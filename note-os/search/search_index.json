{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"algorithm/sword/ch4/","text":"\u5251\u6307Offer - \u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def \u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316 \u5f88\u591a\u2faf\u8bd5\u9898\u5f88\u62bd\u8c61\uff0c\u4e0d\u662f\u5f88\u5bb9\u6613\u627e\u5230\u89e3\u51b3\u529e\u6cd5\u3002\u8fd9\u65f6\u4e0d\u59a8\u753b\u51fa\u2f00\u4e9b\u4e0e\u9898\u2f6c\u76f8\u5173\u7684\u56fe\u5f62\uff0c\u501f\u4ee5\u8f85\u52a9\u2f83\u2f30\u89c2\u5bdf\u548c\u601d\u8003\u3002\u56fe\u5f62\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5177\u4f53\u5316\u3001\u5f62\u8c61\u5316\uff0c\u5e94\u8058\u8005\u8bf4\u4e0d\u5b9a\u901a\u8fc7\u2f0f\u4e2a\u56fe\u5f62\u5c31\u80fd\u627e\u5230\u89c4\u5f8b\uff0c\u4ece\u2f7d\u627e\u5230\u95ee\u9898\u7684\u89e3\u51b3\u2f45\u6848\u3002\u5982\u2f06\u53c9\u6811\u3001\u2f06\u7ef4\u6570\u7ec4\u3001\u94fe\u8868\u7b49\u95ee \u9898\uff0c\u90fd\u53ef\u4ee5\u91c7\u2f64\u753b\u56fe\u7684\u2f45\u6cd5\u6765\u5206\u6790\u3002 19 \u4e8c\u53c9\u6811\u7684\u955c\u50cf NowCoder \u9898\u76ee\u63cf\u8ff0 \u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u6e90\u4e8c\u53c9\u6811: 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811: 8 / \\ 10 6 / \\ / \\ 11 9 7 5 \u89e3\u9898\u601d\u8def \u9012\u5f52\u7684\u4ea4\u6362\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9 public void Mirror ( TreeNode root ) { if ( root == null ) return ; TreeNode left = root . left ; root . left = root . right ; root . right = left ; Mirror ( root . left ); Mirror ( root . right ); } 20 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4X4\u77e9\u9635\uff1a1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\uff0c \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10. \u89e3\u9898\u601d\u8def public ArrayList Integer printMatrix ( int [][] matrix ) { ArrayList Integer list = new ArrayList (); int row = matrix . length ; if ( row == 0 ) return list ; int col = matrix [ 0 ]. length ; // \u77ed\u7684\u8fb9/2\uff0c\u5411\u4e0a\u53d6\u6574 int circle = (( row col ? col : row ) + 1 ) / 2 ; for ( int i = 0 ; i circle ; i ++) { // \u4ece\u5de6\u5411\u53f3\u6253\u5370\uff0cj=i; j col-i, // \u8fd9\u4e00\u884c\u7684\u524di\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u4e0b\u5f80\u4e0a\u88ab\u6253\u5370\uff0c\u6545j=i // \u5012\u6570i\u4e2a\u90fd\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u4e0a\u5f80\u4e0b\u88ab\u6253\u5370\uff0c\u6545j=col-i-1 col-i for ( int j = i ; j col - i ; j ++) list . add ( matrix [ i ][ j ]); // \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\uff0cj=i+1;j row-i, // \u8fd9\u4e00\u5217\u7684\u524di+1\u4e2a\u5df2\u7ecf\u5728\u4ece\u5de6\u5411\u53f3\u6253\u5370\u65f6\u88ab\u6253\u5370,\u6545j=i+1 // \u5012\u6570i\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u53f3\u5f80\u5de6\u88ab\u6253\u5370,\u6545j=row-i-1 row-i for ( int j = i + 1 ; j row - i ; j ++) list . add ( matrix [ j ][ col - i - 1 ]); // \u4ece\u53f3\u5f80\u5de6\u6253\u5370\uff0cj=col-i-2;j =i row-i-1!=i;\uff0c // \u8fd9\u4e00\u884c\u5012\u6570i\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u4e0a\u5f80\u4e0b\u88ab\u6253\u5370 // \u8fd9\u4e00\u884c\u5012\u6570\u7b2ci+1\u4e2a\u5df2\u7ecf\u5728\u4ece\u4e0a\u5f80\u4e0b\u65f6\u88ab\u6253\u5370\uff0c\u6545j=col-1-(i+1)=col-i-2 // \u8fd9\u4e00\u884c\u7684\u524di\u4e2a\u5df2\u7ecf\u5728\u4ece\u4e0b\u5f80\u4e0a\u65f6\u88ab\u6253\u5370\uff0c\u6545j=i =i // \u5f53\u7b2ci\u5708\u4e3a0\u65f6\u5373\u4ece\u672a\u7531\u4e0a\u5f80\u4e0b\u6253\u5370\u65f6\uff0ccol\u6709\u591a\u5217\u65f6\uff0c\u4f1a\u9020\u6210\u91cd\u590d\u6253\u5370\uff0c\u6545\u5224\u65adrow-i-1!=i\u4ee5\u907f\u514d for ( int j = col - i - 2 ; j = i row - i - 1 != i ; j --) list . add ( matrix [ row - i - 1 ][ j ]); // \u4ece\u4e0b\u5f80\u4e0a\u6253\u5370\uff0cj=row-i-2;j i col-i-1!=i\uff0c // \u8fd9\u4e00\u5217\u5012\u6570i\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u53f3\u5f80\u4f5c\u88ab\u6253\u5370 // \u8fd9\u4e00\u5217\u5012\u6570\u7b2ci+1\u4e2a\u5df2\u7ecf\u5728\u4ece\u53f3\u5f80\u5de6\u65f6\u88ab\u6253\u5370\uff0c\u6545j=row-1-(i+1)=row-i-2 // \u8fd9\u4e00\u5217\u7684\u524di\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u5de6\u5f80\u53f3\u65f6\u88ab\u6253\u5370\uff0c // \u8fd9\u4e00\u5217\u7684\u7b2ci+1\u4e2a\u5df2\u7ecf\u5728\u672c\u5708\u4ece\u5de6\u5f80\u53f3\u88ab\u6253\u5370\uff0c\u6545j=i+1 i // \u5f53\u7b2ci\u5708\u4e3a0\u65f6\u5373\u4ece\u672a\u7531\u53f3\u5411\u5de6\u6253\u5370\u65f6\uff0crow\u6709\u591a\u884c\u65f6\uff0c\u4f1a\u9020\u6210\u91cd\u590d\u6253\u5370\uff0c\u6545\u5224\u65adcol-i-1!=i\u4ee5\u907f\u514d for ( int j = row - i - 2 ; j i col - i - 1 != i ; j --) list . add ( matrix [ j ][ i ]); } return list ; } 21 \u5305\u542bmin\u51fd\u6570\u7684\u6808 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u2f00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u7684\u6700\u2f29\u5143\u7d20\u7684min\u51fd\u6570\u3002\u5728\u8be5\u6808\u4e2d\uff0c\u8c03\u2f64 min \u3001 push \u53ca pop \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1) O(1) \u3002 \u89e3\u9898\u601d\u8def \u53c2\u89c1 LeetCode 155 Min Stack 22 \u6808\u7684\u538b\u2f0a\u3001\u5f39\u51fa\u5e8f\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u2f0a\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u2f00\u4e2a\u5e8f\u5217\u8868\u2f70\u6808\u7684\u538b\u2f0a\u987a\u5e8f\uff0c \u8bf7\u5224\u65ad\u7b2c\u2f06\u4e2a\u5e8f\u5217\u662f\u5426\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u2f0a\u6808\u7684\u6240\u6709\u6570 \u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171\u30012\u30013\u30014\u30015\u662f\u67d0\u6808\u7684\u538b\u6808\u5e8f\u5217\uff0c\u5e8f\u5217 4\u30015\u30013\u30012\u30011\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u2f00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464\u30013\u30015\u3001 1\u30012\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u89e3\u9898\u601d\u8def \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\u5efa\u2f74\u2f00\u4e2a\u8f85\u52a9\u6808\uff0c\u628a\u8f93\u2f0a\u7684\u7b2c\u2f00\u4e2a\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u4f9d\u6b21\u538b\u2f0a\u8be5\u8f85\u52a9\u6808\uff0c\u5e76\u6309\u7167\u7b2c\u2f06\u4e2a\u5e8f\u5217\u7684\u987a\u5e8f\u4f9d\u6b21\u4ece\u8be5\u6808\u4e2d\u5f39\u51fa\u6570\u5b57\u3002 \u5224\u65ad\u2f00\u4e2a\u5e8f\u5217\u662f\u4e0d\u662f\u6808\u7684\u5f39\u51fa\u5e8f\u5217\u7684\u89c4\u5f8b\uff1a\u5982\u679c\u4e0b\u2f00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u521a\u597d\u662f\u6808\u9876\u6570\u5b57\uff0c\u90a3\u4e48\u76f4\u63a5\u5f39\u51fa\u3002\u5982\u679c\u4e0b\u2f00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u4e0d\u5728\u6808\u9876\uff0c\u6211\u4eec\u628a\u538b\u6808\u5e8f\u5217\u4e2d\u8fd8\u6ca1\u6709\u2f0a\u6808\u7684\u6570\u5b57\u538b\u2f0a\u8f85\u52a9\u6808\uff0c\u76f4\u5230\u628a\u4e0b\u2f00\u4e2a\u9700\u8981\u5f39\u51fa\u7684\u6570\u5b57\u538b\u2f0a\u6808\u9876\u4e3a\u2f4c\u3002\u5982\u679c\u6240\u6709\u7684\u6570\u5b57\u90fd\u538b\u2f0a\u6808\u4e86\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u4e0b\u2f00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u4e0d\u53ef\u80fd\u662f\u2f00\u4e2a\u5f39\u51fa\u5e8f\u5217\u3002 public boolean IsPopOrder ( int [] pushA , int [] popA ) { if ( pushA == null ) return popA == null ; if ( pushA . length != popA . length ) return false ; int i = 0 , j = 0 ; Stack Integer stack = new Stack (); while ( i pushA . length j popA . length ) { // \u5165\u6808 stack . push ( pushA [ i ++]); while ( i pushA . length stack . peek () != popA [ j ]) stack . push ( pushA [ i ++]); // \u5168\u90e8\u5143\u7d20\u5165\u6808 if ( i == pushA . length ) break ; // \u51fa\u6808 stack . pop (); j ++; } // \u786e\u8ba4\u6808\u5185\u7684\u5269\u4f59\u5143\u7d20\u4e0e\u51fa\u6808\u987a\u5e8f\u76f8\u7b26\u5408 while (! stack . isEmpty ()) if ( stack . pop () != popA [ j ++]) return false ; return true ; } 23 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u2f06\u53c9\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u540c\u2f00\u5c42\u7684\u7ed3\u70b9\u6309 \u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\u3002\u4f8b\u5982\u8f93\u2f0a\u4e0b\u56fe\u4e2d\u7684\u2f06\u53c9\u6811\uff0c\u5219\u4f9d\u6b21\u6253\u5370\u51fa8\u30016\u300110\u30015\u30017\u30019\u300111\u3002 \u89e3\u9898\u601d\u8def \u6811\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u7c7b\u4f3c\u4e8e LeetCode 102 Binary Tree Level Order Traversal \u3002 public ArrayList Integer PrintFromTopToBottom ( TreeNode root ){ ArrayList Integer list = new ArrayList (); if ( root == null ) return list ; Queue TreeNode queue = new LinkedList (); queue . offer ( root ); while (! queue . isEmpty ()) { int size = queue . size (); for ( int i = 0 ; i size ; i ++) { TreeNode cur = queue . poll (); list . add ( cur . val ); if ( cur . left != null ) queue . offer ( cur . left ); if ( cur . right != null ) queue . offer ( cur . right ); } } return list ; } 24 \u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u9898\u2f6c\uff1a\u8f93\u2f0a\u2f00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\u5047\u8bbe\u8f93\u2f0a\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\u8f93\u2f0a\u6570\u7ec4{5,7,6,9,11,10,8}\uff0c\u5219\u8fd4\u56detrue\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6574\u6570\u5e8f\u5217\u662f\u4e0b\u56fe\u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u3002\u5982\u679c\u8f93\u2f0a\u7684\u6570\u7ec4\u662f{7,4,6,5}\uff0c\u7531\u4e8e\u6ca1\u6709\u54ea\u68f5\u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u662f\u8fd9\u4e2a\u5e8f\u5217\uff0c\u56e0\u6b64\u8fd4\u56defalse\u3002 \u5728\u540e\u5e8f\u904d\u5386\u5f97\u5230\u7684\u5e8f\u5217\u4e2d\uff0c\u6700\u540e\u2f00\u4e2a\u6570\u5b57\u662f\u6811\u7684\u6839\u7ed3\u70b9\u7684\u503c\u3002\u6570\u7ec4\u4e2d\u524d\u2faf\u7684\u6570\u5b57\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7b2c\u2f00\u90e8\u5206\u662f\u5de6\u2f26\u6811\u7ed3\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u2f50\u6839\u7ed3\u70b9\u7684\u503c\u2f29\uff1b\u7b2c\u2f06\u90e8\u5206\u662f\u53f3\u2f26\u6811\u7ed3\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u2f50\u6839\u7ed3\u70b9\u7684\u503c\u2f24\u3002 public boolean VerifySquenceOfBST ( int [] sequence ) { if ( sequence == null || sequence . length == 0 ) return false ; return VerifySquenceOfBST ( sequence , 0 , sequence . length - 1 ); } private boolean VerifySquenceOfBST ( int [] nums , int lo , int hi ) { // \u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u8282\u70b9 if ( lo = hi ) return true ; // \u6839\u8282\u70b9 int root = nums [ hi ]; // \u627e\u5bfb\u5de6\u5b50\u6811 int left = lo ; while ( left hi nums [ left ] = root ) left ++; // \u627e\u5bfb\u53f3\u5b50\u6811 int right = left ; while ( right hi ) if ( nums [ right ++] root ) return false ; return VerifySquenceOfBST ( nums , lo , left - 1 ) VerifySquenceOfBST ( nums , left , hi - 1 ); } 25 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002 \u4f8b\u5982\u8f93\u2f0a\u4e0b\u56fe\u4e2d\u2f06\u53c9\u6811\u548c\u6574\u657022\uff0c\u5219\u6253\u5370\u51fa\u4e24\u6761\u8def\u5f84\uff0c\u7b2c\u2f00\u6761\u8def\u5f84\u5305\u542b\u7ed3\u70b910\u300112\uff0c\u7b2c\u2f06\u6761\u8def\u5f84\u5305\u542b\u7ed3\u70b910\u30015\u548c7\u3002 \u89e3\u9898\u601d\u8def \u89c1 LeetCode 113. Path Sum II 26 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868(\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9)\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002 public class RandomListNode { int label ; RandomListNode next = null ; RandomListNode random = null ; RandomListNode ( int label ) { this . label = label ; } } \u89e3\u9898\u601d\u8def \u89c1 LeetCode 138. Copy List with Random Pointer 27 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u2f0a\u2f00\u68f5\u2f06\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u2f06\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u2f00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002\u2f50\u5982\u8f93\u2f0a\u4e0b\u56fe\u4e2d\u5de6\u8fb9\u7684\u2f06\u53c9\u641c\u7d22\u6811\uff0c\u5219\u8f93\u51fa\u8f6c\u6362\u4e4b\u540e\u7684\u6392\u5e8f\u53cc\u5411\u94fe\u8868\u3002 \u89e3\u9898\u601d\u8def \u8fd9\u9053\u9898\u76ee\u975e\u5e38\u7c7b\u4f3c\u4e8e LeetCode 114. Flatten Binary Tree to Linked List \uff0c\u53ea\u4e0d\u8fc7LeetCode\u8981\u6c42\u7528\u5148\u5e8f\u904d\u5386\uff0c\u8fd9\u91cc\u8981\u6c42\u662f\u6392\u5e8f\u7684\uff0c\u4e5f\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u3002\u672c\u8d28\u662f\u4e00\u6837\u7684\u3002 \u6700\u76f4\u63a5\u7684\u65b9\u6cd5\uff1a\u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u5148\u540e\u7684\u8282\u70b9\u4e00\u4e00\u4e32\u8054\u8d77\u6765\u3002 public TreeNode Convert ( TreeNode root ) { if ( root == null ) return null ; List TreeNode list = new ArrayList (); inorder ( list , root ); for ( int i = 1 ; i list . size (); i ++) { list . get ( i ). left = list . get ( i - 1 ); list . get ( i - 1 ). right = list . get ( i ); } return list . get ( 0 ); } private void inorder ( List TreeNode list , TreeNode root ) { if ( root == null ) return ; inorder ( list , root . left ); list . add ( root ); inorder ( list , root . right ); } \u6bd4\u8f83\u597d\u7684\u529e\u6cd5\u662f\u5728\u904d\u5386\u4e8c\u53c9\u6811\u7684\u540c\u65f6\uff0c\u64cd\u4f5c\u8282\u70b9\uff1a private TreeNode prevNode , head ; public TreeNode Convert ( TreeNode root ) { if ( root == null ) return null ; inorder ( root ); return head ; } private void inorder ( TreeNode root ) { if ( root == null ) return ; inorder ( root . left ); if ( prevNode == null ) { head = root ; } else { prevNode . right = root ; root . left = prevNode ; } prevNode = root ; inorder ( root . right ); } 28 \u5b57\u7b26\u4e32\u7684\u6392\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc\uff0c\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a, b, c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc, acb, bac, bca, cab\u548ccba\u3002 \u89e3\u9898\u601d\u8def \u5178\u578b\u7684\u56de\u6eaf\u6cd5\uff0c\u89c1","title":"\u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def"},{"location":"algorithm/sword/ch4/#offer-","text":"","title":"\u5251\u6307Offer - \u89e3\u51b3\u9762\u8bd5\u9898\u7684\u601d\u8def"},{"location":"algorithm/sword/ch4/#_1","text":"\u5f88\u591a\u2faf\u8bd5\u9898\u5f88\u62bd\u8c61\uff0c\u4e0d\u662f\u5f88\u5bb9\u6613\u627e\u5230\u89e3\u51b3\u529e\u6cd5\u3002\u8fd9\u65f6\u4e0d\u59a8\u753b\u51fa\u2f00\u4e9b\u4e0e\u9898\u2f6c\u76f8\u5173\u7684\u56fe\u5f62\uff0c\u501f\u4ee5\u8f85\u52a9\u2f83\u2f30\u89c2\u5bdf\u548c\u601d\u8003\u3002\u56fe\u5f62\u80fd\u4f7f\u62bd\u8c61\u7684\u95ee\u9898\u5177\u4f53\u5316\u3001\u5f62\u8c61\u5316\uff0c\u5e94\u8058\u8005\u8bf4\u4e0d\u5b9a\u901a\u8fc7\u2f0f\u4e2a\u56fe\u5f62\u5c31\u80fd\u627e\u5230\u89c4\u5f8b\uff0c\u4ece\u2f7d\u627e\u5230\u95ee\u9898\u7684\u89e3\u51b3\u2f45\u6848\u3002\u5982\u2f06\u53c9\u6811\u3001\u2f06\u7ef4\u6570\u7ec4\u3001\u94fe\u8868\u7b49\u95ee \u9898\uff0c\u90fd\u53ef\u4ee5\u91c7\u2f64\u753b\u56fe\u7684\u2f45\u6cd5\u6765\u5206\u6790\u3002","title":"\u753b\u56fe\u8ba9\u62bd\u8c61\u95ee\u9898\u5f62\u8c61\u5316"},{"location":"algorithm/sword/ch4/#19","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u64cd\u4f5c\u7ed9\u5b9a\u7684\u4e8c\u53c9\u6811\uff0c\u5c06\u5176\u53d8\u6362\u4e3a\u6e90\u4e8c\u53c9\u6811\u7684\u955c\u50cf\u3002 \u6e90\u4e8c\u53c9\u6811: 8 / \\ 6 10 / \\ / \\ 5 7 9 11 \u955c\u50cf\u4e8c\u53c9\u6811: 8 / \\ 10 6 / \\ / \\ 11 9 7 5 \u89e3\u9898\u601d\u8def \u9012\u5f52\u7684\u4ea4\u6362\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9 public void Mirror ( TreeNode root ) { if ( root == null ) return ; TreeNode left = root . left ; root . left = root . right ; root . right = left ; Mirror ( root . left ); Mirror ( root . right ); }","title":"19 \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"algorithm/sword/ch4/#20","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u5982\u4e0b4X4\u77e9\u9635\uff1a1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\uff0c \u5219\u4f9d\u6b21\u6253\u5370\u51fa\u6570\u5b571,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10. \u89e3\u9898\u601d\u8def public ArrayList Integer printMatrix ( int [][] matrix ) { ArrayList Integer list = new ArrayList (); int row = matrix . length ; if ( row == 0 ) return list ; int col = matrix [ 0 ]. length ; // \u77ed\u7684\u8fb9/2\uff0c\u5411\u4e0a\u53d6\u6574 int circle = (( row col ? col : row ) + 1 ) / 2 ; for ( int i = 0 ; i circle ; i ++) { // \u4ece\u5de6\u5411\u53f3\u6253\u5370\uff0cj=i; j col-i, // \u8fd9\u4e00\u884c\u7684\u524di\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u4e0b\u5f80\u4e0a\u88ab\u6253\u5370\uff0c\u6545j=i // \u5012\u6570i\u4e2a\u90fd\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u4e0a\u5f80\u4e0b\u88ab\u6253\u5370\uff0c\u6545j=col-i-1 col-i for ( int j = i ; j col - i ; j ++) list . add ( matrix [ i ][ j ]); // \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\uff0cj=i+1;j row-i, // \u8fd9\u4e00\u5217\u7684\u524di+1\u4e2a\u5df2\u7ecf\u5728\u4ece\u5de6\u5411\u53f3\u6253\u5370\u65f6\u88ab\u6253\u5370,\u6545j=i+1 // \u5012\u6570i\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u53f3\u5f80\u5de6\u88ab\u6253\u5370,\u6545j=row-i-1 row-i for ( int j = i + 1 ; j row - i ; j ++) list . add ( matrix [ j ][ col - i - 1 ]); // \u4ece\u53f3\u5f80\u5de6\u6253\u5370\uff0cj=col-i-2;j =i row-i-1!=i;\uff0c // \u8fd9\u4e00\u884c\u5012\u6570i\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u4e0a\u5f80\u4e0b\u88ab\u6253\u5370 // \u8fd9\u4e00\u884c\u5012\u6570\u7b2ci+1\u4e2a\u5df2\u7ecf\u5728\u4ece\u4e0a\u5f80\u4e0b\u65f6\u88ab\u6253\u5370\uff0c\u6545j=col-1-(i+1)=col-i-2 // \u8fd9\u4e00\u884c\u7684\u524di\u4e2a\u5df2\u7ecf\u5728\u4ece\u4e0b\u5f80\u4e0a\u65f6\u88ab\u6253\u5370\uff0c\u6545j=i =i // \u5f53\u7b2ci\u5708\u4e3a0\u65f6\u5373\u4ece\u672a\u7531\u4e0a\u5f80\u4e0b\u6253\u5370\u65f6\uff0ccol\u6709\u591a\u5217\u65f6\uff0c\u4f1a\u9020\u6210\u91cd\u590d\u6253\u5370\uff0c\u6545\u5224\u65adrow-i-1!=i\u4ee5\u907f\u514d for ( int j = col - i - 2 ; j = i row - i - 1 != i ; j --) list . add ( matrix [ row - i - 1 ][ j ]); // \u4ece\u4e0b\u5f80\u4e0a\u6253\u5370\uff0cj=row-i-2;j i col-i-1!=i\uff0c // \u8fd9\u4e00\u5217\u5012\u6570i\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u53f3\u5f80\u4f5c\u88ab\u6253\u5370 // \u8fd9\u4e00\u5217\u5012\u6570\u7b2ci+1\u4e2a\u5df2\u7ecf\u5728\u4ece\u53f3\u5f80\u5de6\u65f6\u88ab\u6253\u5370\uff0c\u6545j=row-1-(i+1)=row-i-2 // \u8fd9\u4e00\u5217\u7684\u524di\u4e2a\u5df2\u7ecf\u5728\u7b2ci\u5708\u4ece\u5de6\u5f80\u53f3\u65f6\u88ab\u6253\u5370\uff0c // \u8fd9\u4e00\u5217\u7684\u7b2ci+1\u4e2a\u5df2\u7ecf\u5728\u672c\u5708\u4ece\u5de6\u5f80\u53f3\u88ab\u6253\u5370\uff0c\u6545j=i+1 i // \u5f53\u7b2ci\u5708\u4e3a0\u65f6\u5373\u4ece\u672a\u7531\u53f3\u5411\u5de6\u6253\u5370\u65f6\uff0crow\u6709\u591a\u884c\u65f6\uff0c\u4f1a\u9020\u6210\u91cd\u590d\u6253\u5370\uff0c\u6545\u5224\u65adcol-i-1!=i\u4ee5\u907f\u514d for ( int j = row - i - 2 ; j i col - i - 1 != i ; j --) list . add ( matrix [ j ][ i ]); } return list ; }","title":"20 \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"algorithm/sword/ch4/#21-min","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u2f00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u7684\u6700\u2f29\u5143\u7d20\u7684min\u51fd\u6570\u3002\u5728\u8be5\u6808\u4e2d\uff0c\u8c03\u2f64 min \u3001 push \u53ca pop \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1) O(1) \u3002 \u89e3\u9898\u601d\u8def \u53c2\u89c1 LeetCode 155 Min Stack","title":"21 \u5305\u542bmin\u51fd\u6570\u7684\u6808"},{"location":"algorithm/sword/ch4/#22","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u2f0a\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u2f00\u4e2a\u5e8f\u5217\u8868\u2f70\u6808\u7684\u538b\u2f0a\u987a\u5e8f\uff0c \u8bf7\u5224\u65ad\u7b2c\u2f06\u4e2a\u5e8f\u5217\u662f\u5426\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u2f0a\u6808\u7684\u6240\u6709\u6570 \u5b57\u5747\u4e0d\u76f8\u7b49\u3002\u4f8b\u5982\u5e8f\u52171\u30012\u30013\u30014\u30015\u662f\u67d0\u6808\u7684\u538b\u6808\u5e8f\u5217\uff0c\u5e8f\u5217 4\u30015\u30013\u30012\u30011\u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u2f00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f464\u30013\u30015\u3001 1\u30012\u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u89e3\u9898\u601d\u8def \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5f88\u76f4\u89c2\u7684\u60f3\u6cd5\u5c31\u662f\u5efa\u2f74\u2f00\u4e2a\u8f85\u52a9\u6808\uff0c\u628a\u8f93\u2f0a\u7684\u7b2c\u2f00\u4e2a\u5e8f\u5217\u4e2d\u7684\u6570\u5b57\u4f9d\u6b21\u538b\u2f0a\u8be5\u8f85\u52a9\u6808\uff0c\u5e76\u6309\u7167\u7b2c\u2f06\u4e2a\u5e8f\u5217\u7684\u987a\u5e8f\u4f9d\u6b21\u4ece\u8be5\u6808\u4e2d\u5f39\u51fa\u6570\u5b57\u3002 \u5224\u65ad\u2f00\u4e2a\u5e8f\u5217\u662f\u4e0d\u662f\u6808\u7684\u5f39\u51fa\u5e8f\u5217\u7684\u89c4\u5f8b\uff1a\u5982\u679c\u4e0b\u2f00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u521a\u597d\u662f\u6808\u9876\u6570\u5b57\uff0c\u90a3\u4e48\u76f4\u63a5\u5f39\u51fa\u3002\u5982\u679c\u4e0b\u2f00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\u4e0d\u5728\u6808\u9876\uff0c\u6211\u4eec\u628a\u538b\u6808\u5e8f\u5217\u4e2d\u8fd8\u6ca1\u6709\u2f0a\u6808\u7684\u6570\u5b57\u538b\u2f0a\u8f85\u52a9\u6808\uff0c\u76f4\u5230\u628a\u4e0b\u2f00\u4e2a\u9700\u8981\u5f39\u51fa\u7684\u6570\u5b57\u538b\u2f0a\u6808\u9876\u4e3a\u2f4c\u3002\u5982\u679c\u6240\u6709\u7684\u6570\u5b57\u90fd\u538b\u2f0a\u6808\u4e86\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u4e0b\u2f00\u4e2a\u5f39\u51fa\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u8be5\u5e8f\u5217\u4e0d\u53ef\u80fd\u662f\u2f00\u4e2a\u5f39\u51fa\u5e8f\u5217\u3002 public boolean IsPopOrder ( int [] pushA , int [] popA ) { if ( pushA == null ) return popA == null ; if ( pushA . length != popA . length ) return false ; int i = 0 , j = 0 ; Stack Integer stack = new Stack (); while ( i pushA . length j popA . length ) { // \u5165\u6808 stack . push ( pushA [ i ++]); while ( i pushA . length stack . peek () != popA [ j ]) stack . push ( pushA [ i ++]); // \u5168\u90e8\u5143\u7d20\u5165\u6808 if ( i == pushA . length ) break ; // \u51fa\u6808 stack . pop (); j ++; } // \u786e\u8ba4\u6808\u5185\u7684\u5269\u4f59\u5143\u7d20\u4e0e\u51fa\u6808\u987a\u5e8f\u76f8\u7b26\u5408 while (! stack . isEmpty ()) if ( stack . pop () != popA [ j ++]) return false ; return true ; }","title":"22 \u6808\u7684\u538b\u2f0a\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"algorithm/sword/ch4/#23","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u2f06\u53c9\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u540c\u2f00\u5c42\u7684\u7ed3\u70b9\u6309 \u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\u3002\u4f8b\u5982\u8f93\u2f0a\u4e0b\u56fe\u4e2d\u7684\u2f06\u53c9\u6811\uff0c\u5219\u4f9d\u6b21\u6253\u5370\u51fa8\u30016\u300110\u30015\u30017\u30019\u300111\u3002 \u89e3\u9898\u601d\u8def \u6811\u7684\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3002\u7c7b\u4f3c\u4e8e LeetCode 102 Binary Tree Level Order Traversal \u3002 public ArrayList Integer PrintFromTopToBottom ( TreeNode root ){ ArrayList Integer list = new ArrayList (); if ( root == null ) return list ; Queue TreeNode queue = new LinkedList (); queue . offer ( root ); while (! queue . isEmpty ()) { int size = queue . size (); for ( int i = 0 ; i size ; i ++) { TreeNode cur = queue . poll (); list . add ( cur . val ); if ( cur . left != null ) queue . offer ( cur . left ); if ( cur . right != null ) queue . offer ( cur . right ); } } return list ; }","title":"23 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/ch4/#24","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u9898\u2f6c\uff1a\u8f93\u2f0a\u2f00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\u5047\u8bbe\u8f93\u2f0a\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\u8f93\u2f0a\u6570\u7ec4{5,7,6,9,11,10,8}\uff0c\u5219\u8fd4\u56detrue\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6574\u6570\u5e8f\u5217\u662f\u4e0b\u56fe\u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u3002\u5982\u679c\u8f93\u2f0a\u7684\u6570\u7ec4\u662f{7,4,6,5}\uff0c\u7531\u4e8e\u6ca1\u6709\u54ea\u68f5\u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u662f\u8fd9\u4e2a\u5e8f\u5217\uff0c\u56e0\u6b64\u8fd4\u56defalse\u3002 \u5728\u540e\u5e8f\u904d\u5386\u5f97\u5230\u7684\u5e8f\u5217\u4e2d\uff0c\u6700\u540e\u2f00\u4e2a\u6570\u5b57\u662f\u6811\u7684\u6839\u7ed3\u70b9\u7684\u503c\u3002\u6570\u7ec4\u4e2d\u524d\u2faf\u7684\u6570\u5b57\u53ef\u4ee5\u5206\u4e3a\u4e24\u90e8\u5206\uff1a\u7b2c\u2f00\u90e8\u5206\u662f\u5de6\u2f26\u6811\u7ed3\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u2f50\u6839\u7ed3\u70b9\u7684\u503c\u2f29\uff1b\u7b2c\u2f06\u90e8\u5206\u662f\u53f3\u2f26\u6811\u7ed3\u70b9\u7684\u503c\uff0c\u5b83\u4eec\u90fd\u2f50\u6839\u7ed3\u70b9\u7684\u503c\u2f24\u3002 public boolean VerifySquenceOfBST ( int [] sequence ) { if ( sequence == null || sequence . length == 0 ) return false ; return VerifySquenceOfBST ( sequence , 0 , sequence . length - 1 ); } private boolean VerifySquenceOfBST ( int [] nums , int lo , int hi ) { // \u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u8282\u70b9 if ( lo = hi ) return true ; // \u6839\u8282\u70b9 int root = nums [ hi ]; // \u627e\u5bfb\u5de6\u5b50\u6811 int left = lo ; while ( left hi nums [ left ] = root ) left ++; // \u627e\u5bfb\u53f3\u5b50\u6811 int right = left ; while ( right hi ) if ( nums [ right ++] root ) return false ; return VerifySquenceOfBST ( nums , lo , left - 1 ) VerifySquenceOfBST ( nums , left , hi - 1 ); }","title":"24 \u2f06\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"algorithm/sword/ch4/#25","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002 \u4f8b\u5982\u8f93\u2f0a\u4e0b\u56fe\u4e2d\u2f06\u53c9\u6811\u548c\u6574\u657022\uff0c\u5219\u6253\u5370\u51fa\u4e24\u6761\u8def\u5f84\uff0c\u7b2c\u2f00\u6761\u8def\u5f84\u5305\u542b\u7ed3\u70b910\u300112\uff0c\u7b2c\u2f06\u6761\u8def\u5f84\u5305\u542b\u7ed3\u70b910\u30015\u548c7\u3002 \u89e3\u9898\u601d\u8def \u89c1 LeetCode 113. Path Sum II","title":"25 \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"algorithm/sword/ch4/#26","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868(\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9)\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684head\u3002 public class RandomListNode { int label ; RandomListNode next = null ; RandomListNode random = null ; RandomListNode ( int label ) { this . label = label ; } } \u89e3\u9898\u601d\u8def \u89c1 LeetCode 138. Copy List with Random Pointer","title":"26 \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"algorithm/sword/ch4/#27","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u2f0a\u2f00\u68f5\u2f06\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u2f06\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u2f00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002\u2f50\u5982\u8f93\u2f0a\u4e0b\u56fe\u4e2d\u5de6\u8fb9\u7684\u2f06\u53c9\u641c\u7d22\u6811\uff0c\u5219\u8f93\u51fa\u8f6c\u6362\u4e4b\u540e\u7684\u6392\u5e8f\u53cc\u5411\u94fe\u8868\u3002 \u89e3\u9898\u601d\u8def \u8fd9\u9053\u9898\u76ee\u975e\u5e38\u7c7b\u4f3c\u4e8e LeetCode 114. Flatten Binary Tree to Linked List \uff0c\u53ea\u4e0d\u8fc7LeetCode\u8981\u6c42\u7528\u5148\u5e8f\u904d\u5386\uff0c\u8fd9\u91cc\u8981\u6c42\u662f\u6392\u5e8f\u7684\uff0c\u4e5f\u5c31\u662f\u4e2d\u5e8f\u904d\u5386\u3002\u672c\u8d28\u662f\u4e00\u6837\u7684\u3002 \u6700\u76f4\u63a5\u7684\u65b9\u6cd5\uff1a\u83b7\u53d6\u4e2d\u5e8f\u904d\u5386\u7ed3\u679c\uff0c\u7136\u540e\u5c06\u5148\u540e\u7684\u8282\u70b9\u4e00\u4e00\u4e32\u8054\u8d77\u6765\u3002 public TreeNode Convert ( TreeNode root ) { if ( root == null ) return null ; List TreeNode list = new ArrayList (); inorder ( list , root ); for ( int i = 1 ; i list . size (); i ++) { list . get ( i ). left = list . get ( i - 1 ); list . get ( i - 1 ). right = list . get ( i ); } return list . get ( 0 ); } private void inorder ( List TreeNode list , TreeNode root ) { if ( root == null ) return ; inorder ( list , root . left ); list . add ( root ); inorder ( list , root . right ); } \u6bd4\u8f83\u597d\u7684\u529e\u6cd5\u662f\u5728\u904d\u5386\u4e8c\u53c9\u6811\u7684\u540c\u65f6\uff0c\u64cd\u4f5c\u8282\u70b9\uff1a private TreeNode prevNode , head ; public TreeNode Convert ( TreeNode root ) { if ( root == null ) return null ; inorder ( root ); return head ; } private void inorder ( TreeNode root ) { if ( root == null ) return ; inorder ( root . left ); if ( prevNode == null ) { head = root ; } else { prevNode . right = root ; root . left = prevNode ; } prevNode = root ; inorder ( root . right ); }","title":"27 \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"algorithm/sword/ch4/#28","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32abc\uff0c\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26a, b, c\u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32abc, acb, bac, bca, cab\u548ccba\u3002 \u89e3\u9898\u601d\u8def \u5178\u578b\u7684\u56de\u6eaf\u6cd5\uff0c\u89c1","title":"28 \u5b57\u7b26\u4e32\u7684\u6392\u5217"}]}