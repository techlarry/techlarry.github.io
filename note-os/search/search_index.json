{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"algorithm/sword/solution/","text":"\u5251\u6307Offer 1. \u524d\u8a00 \u672c\u6587\u7684\u7ed8\u56fe\u53ef\u901a\u8fc7\u4ee5\u4e0b\u9014\u5f84\u514d\u8d39\u83b7\u5f97\u5e76\u4f7f\u7528\uff1a ProcessOn DrawIO 2. \u5b9e\u73b0 Singleton Singleton Pattern 3. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 NowCoder \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230 n-1 n-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4 [2,3,1,0,2,5,3] [2,3,1,0,2,5,3] \uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u89e3\u9898\u601d\u8def \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5148\u628a\u8f93\u5165\u7684\u6570\u7ec4\u6392\u5e8f\u3002\u7136\u540e\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u7ec4\uff0c\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3002\u6216\u8005\u5229\u7528\u54c8\u5e0c\u8868\uff0c\u6bcf\u626b\u5230\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u90fd\u53ef\u4ee5\u7528 O(1) O(1) \u7684\u65f6\u95f4\u6765\u5224\u65ad\u54c8\u5e0c\u8868\u91cc\u662f\u5426\u5df2\u7ecf\u5305\u542b\u4e86\u8be5\u6570\u5b57\u3002\u5982\u679c\u54c8\u5e0c\u8868\u91cc\u8fd8\u6ca1\u6709\u8fd9\u4e2a\u6570\u5b57\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u54c8\u5e0c\u8868\uff0c\u5426\u5219\uff0c\u5c31\u627e\u5230\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1) O(1) \u3002\u56e0\u6b64\u4e0d\u80fd\u4f7f\u7528\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u6807\u8bb0\u6570\u7ec4\u3002 \u6ce8\u610f\u5230\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u5728 0\\sim n-1 0\\sim n-1 \u7684\u8303\u56f4\u5185\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\u6570\u5b57 i i \u5c06\u51fa\u73b0\u5728\u4e0b\u6807\u4e3a i i \u7684\u4f4d\u7f6e\u3002\u6240\u4ee5\u53ef\u4ee5\u5c06\u503c\u4e3a i i \u7684\u5143\u7d20\u8c03\u6574\u5230\u7b2c i i \u4e2a\u4f4d\u7f6e\u4e0a\u3002 \u4ee5 (2, 3, 1, 0, 2, 5) \u4e3a\u4f8b\uff1a position-0 : (2,3,1,0,2,5) // 2 - 1 (1,3,2,0,2,5) // 1 - 3 (3,1,2,0,2,5) // 3 - 0 (0,1,2,3,2,5) // already in position position-1 : (0,1,2,3,2,5) // already in position position-2 : (0,1,2,3,2,5) // already in position position-3 : (0,1,2,3,2,5) // already in position position-4 : (0,1,2,3,2,5) // nums[i] == nums[nums[i]], exit \u904d\u5386\u5230\u4f4d\u7f6e 4 \u65f6\uff0c\u8be5\u4f4d\u7f6e\u4e0a\u7684\u6570\u4e3a 2\uff0c\u4f46\u662f\u7b2c 2 \u4e2a\u4f4d\u7f6e\u4e0a\u5df2\u7ecf\u6709\u4e00\u4e2a 2 \u7684\u503c\u4e86\uff0c\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 2 \u91cd\u590d\u3002 public boolean duplicate ( int [] nums , int length , int [] duplication ) { if ( nums == null || length = 0 ) return false ; for ( int i = 0 ; i length ; i ++) { while ( nums [ i ] != i ) { if ( nums [ i ] == nums [ nums [ i ]]) { duplication [ 0 ] = nums [ i ]; return true ; } swap ( nums , i , nums [ i ]); } } return false ; } private void swap ( int [] nums , int i , int j ) { int t = nums [ i ]; nums [ i ] = nums [ j ]; nums [ j ] = t ; } 3. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 Consider the following matrix: [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] Given target = 5, return true. Given target = 20, return false. \u89e3\u9898\u601d\u8def \u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002 \u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1a \u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217; \u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\uff0d\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\uff09\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f. \u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(M + N) + O(1) O(M + N) + O(1) \u5f53\u524d\u5143\u7d20\u7684\u67e5\u627e\u533a\u95f4\u4e3a\u5de6\u4e0b\u89d2\u7684\u6240\u6709\u5143\u7d20\uff0c\u4f8b\u5982\u5143\u7d2012\u7684\u67e5\u627e\u533a\u95f4\u5982\u4e0b\uff1a public boolean Find ( int target , int [][] array ) { if ( array == null || array . length == 0 || array [ 0 ]. length == 0 ) return false ; int row = 0 , col = array [ 0 ]. length - 1 ; while ( row array . length col = 0 ) { int cmp = array [ row ][ col ] - target ; if ( cmp 0 ) col --; else if ( cmp 0 ) row ++; else return true ; } return false ; } 4. \u66ff\u6362\u7a7a\u683c NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3a\"We Are Happy\". \u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\"\u4e3aWe%20Are%20Happy\"\u3002 Note \u5728\u2f79\u7edc\u7f16\u7a0b\u4e2d\uff0c\u5982\u679cURL\u53c2\u6570\u4e2d\u542b\u6709\u7279\u6b8a\u5b57\u7b26\uff0c\u5982\u7a7a\u683c\u3001'#'\u7b49\uff0c\u53ef\u80fd\u5bfc\u81f4\u670d\u52a1\u5668\u7aef\u2f46\u6cd5\u83b7\u5f97\u6b63\u786e\u7684\u53c2\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u7279\u6b8a\u7b26\u53f7\u8f6c\u6362\u6210\u670d\u52a1\u5668\u53ef\u4ee5\u8bc6\u522b\u7684\u5b57\u7b26\u3002\u8f6c\u6362\u7684\u89c4\u5219\u662f\u5728'%'\u540e\u2faf\u8ddf\u4e0aASCII\u7801\u7684\u4e24\u4f4d\u2f17\u516d\u8fdb\u5236\u7684\u8868\u2f70\u3002\u2f50\u5982\u7a7a\u683c\u7684ASCII\u7801\u662f32\uff0c\u5373\u2f17\u516d\u8fdb\u5236\u76840x20\uff0c\u56e0\u6b64\u7a7a\u683c\u88ab\u66ff\u6362\u6210\"%20\"\u3002\u518d\u2f50\u5982'#'\u7684ASCII\u7801\u4e3a35\uff0c\u5373\u2f17\u516d\u8fdb\u5236\u76840x23\uff0c\u5b83\u5728URL\u4e2d\u88ab\u66ff\u6362\u4e3a\"%23\"\u3002 \u89e3\u9898\u601d\u8def \u6700\u76f4\u89c2\u7684\u505a\u6cd5\u662f\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u78b0\u5230\u7a7a\u683c\u5b57\u7b26\u7684\u65f6\u5019\u8fdb\u884c\u66ff\u6362\u3002\u7531\u4e8e\u662f\u628a1\u4e2a\u5b57\u7b26\u66ff\u6362\u62103\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u628a\u7a7a\u683c\u540e\u9762\u7684\u5b57\u7b26\u90fd\u540e\u79fb2\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u5c31\u6709\u4e24\u4e2a\u5b57\u7b26\u88ab\u8986\u76d6\u4e86\u3002 \u4ece\u524d\u5f80\u540e\u628a\u5b57\u7b26\u4e32\"We are happy.\"\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u7684\u8fc7\u7a0b\u3002\u7070\u8272\u80cc\u666f\u8868\u793a\u9700\u8981\u79fb\u52a8\u7684\u5b57\u7b26\u3002 public String replaceSpace ( StringBuffer str ) { if ( str == null || str . length () == 0 ) return ; for ( int i = 0 ; i str . length (); i ++) if ( str . charAt ( i ) == ) { str . setCharAt ( i , % ); str . insert ( i + 1 , 20 ); i += 2 ; } return str . toString (); } \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f n n \u3002\u5bf9\u6bcf\u4e2a\u7a7a\u683c\u5b57\u7b26\uff0c\u9700\u8981\u79fb\u52a8\u540e\u9762 O(n) O(n) \u4e2a\u5b57\u7b26\uff0c\u56e0\u6b64\u5bf9\u4e8e\u542b\u6709 n n \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u800c\u8a00\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u3002 \u80fd\u4e0d\u80fd\u51cf\u5c11\u79fb\u52a8\u6b21\u6570\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u628a\u4ece\u524d\u5411\u540e\u66ff\u6362\u6539\u6210\u4ece\u540e\u5411\u524d\u66ff\u6362\u3002\u53ef\u4ee5\u5148\u904d\u5386\u4e00\u6b21\u5b57\u7b26\u4e32\uff0c\u7edf\u8ba1\u51fa\u5b57\u7b26\u4e32\u4e2d\u7a7a\u683c\u7684\u7efc\u8ff0\uff0c\u8ba1\u7b97\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 = n + 2 \\times n + 2 \\times \u7a7a\u683c\u6570\u3002 \u5728\u5b57\u7b26\u4e32\u5c3e\u90e8\u586b\u5145\u4efb\u610f\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7b49\u4e8e\u66ff\u6362\u4e4b\u540e\u7684\u957f\u5ea6\u3002\u56e0\u4e3a\u4e00\u4e2a\u7a7a\u683c\u8981\u66ff\u6362\u6210\u4e09\u4e2a\u5b57\u7b26\uff08%20\uff09\uff0c\u56e0\u6b64\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u7a7a\u683c\u65f6\uff0c\u9700\u8981\u5728\u5c3e\u90e8\u586b\u5145\u4e24\u4e2a\u4efb\u610f\u5b57\u7b26\u3002\u51c6\u5907\u4e24\u4e2a\u6307\u9488\uff0cP1\u548cP2\uff0cP1\u6307\u5411\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u800cP2\u6307\u5411\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u7684\u672b\u5c3e.\u63a5\u4e0b\u6765\u6211\u4eec\u5411\u524d\u79fb\u52a8\u6307\u9488P1\uff0c\u9010\u4e2a\u628a\u5b83\u6307\u5411\u7684\u5b57\u7b26\u590d\u5236\u5230P2\u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u76f4\u5230\u78b0\u5230\u7a7a\u683c\u4e3a\u6b62\uff0c\u6b64\u65f6\u628aP1\u5411\u524d\u79fb\u52a81\u683c\uff0c\u5e76\u5728P2\u4e4b\u524d\u63d2\u5165\u5b57\u7b26\u4e32\"%20\",\u7136\u540e\u5411\u524d\u79fb\u52a83\u683c\u3002\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230P1\u548cP2\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u8868\u660e\u6240\u6709\u7a7a\u683c\u90fd\u5df2\u7ecf\u66ff\u6362\u5b8c\u6bd5\u3002 \u7531\u4e8e\u6240\u6709\u7684\u5b57\u7b26\u90fd\u6307\u590d\u5236/\u79fb\u52a8\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \u3002 public String replaceSpace ( StringBuffer str ) { if ( str == null || str . length () == 0 ) return ; // \u83b7\u53d6\u7a7a\u683c\u7684\u6570\u91cf int n = str . length (); int numOfSpace = 0 ; for ( int i = 0 ; i n ; i ++) if ( str . charAt ( i ) == ) numOfSpace ++; // \u63d2\u5165\u7a7a\u683c int newStringLength = n + 2 * numOfSpace ; // \u65b0\u5b57\u7b26\u4e32\u957f\u5ea6 str . setLength ( newStringLength ); // \u6269\u5145\u5b57\u7b26\u4e32 int p1 = n - 1 , p2 = str . length () - 1 ; // p1\u6307\u5411\u65e7\u5b57\u7b26\u4e32\uff0cp2\u6307\u5411\u65b0\u5b57\u7b26\u4e32 while ( p1 != p2 ) { if ( str . charAt ( p1 ) != ) str . setCharAt ( p2 --, str . charAt ( p1 )); else { str . setCharAt ( p2 --, 0 ); str . setCharAt ( p2 --, 2 ); str . setCharAt ( p2 --, % ); } p1 --; } return str . toString (); } 5. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u6253\u5370\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u3002\u94fe\u8868\u7ed3\u70b9\u5b9a\u4e49\u5982\u4e0b\uff1a public class ListNode { int val ; ListNode next = null ; ListNode ( int val ) { this . val = val ; } } \u89e3\u9898\u601d\u8def \u6211\u4eec\u60f3\u5230\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u80af\u5b9a\u8981\u904d\u5386\u94fe\u8868\u3002\u904d\u5386\u7684\u987a\u5e8f\u662f\u4ece\u5934\u5230\u5c3e\u7684\u987a\u5e8f\uff0c\u53ef\u8f93\u51fa\u7684\u987a\u5e8f\u5374\u662f\u4ece\u5c3e\u5230\u5934\u3002\u4e5f\u5c31\u662f\u8bf4\u7b2c\u2f00\u4e2a\u904d\u5386\u5230\u7684\u7ed3\u70b9\u6700\u540e\u2f00\u4e2a\u8f93\u51fa\uff0c\u2f7d\u6700\u540e\u2f00\u4e2a\u904d\u5386\u5230\u7684\u7ed3\u70b9\u7b2c\u2f00\u4e2a\u8f93\u51fa\u3002\u8fd9\u5c31\u662f\u5178\u578b\u7684\u201c\u540e\u8fdb\u5148\u51fa\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u2f64\u6808\u5b9e\u73b0\u8fd9\u79cd\u987a\u5e8f\u3002\u6bcf\u7ecf\u8fc7\u2f00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u628a\u8be5\u7ed3\u70b9\u653e\u5230\u2f00\u4e2a\u6808\u4e2d\u3002\u5f53\u904d\u5386\u5b8c\u6574\u4e2a\u94fe\u8868\u540e\uff0c\u518d\u4ece\u6808\u9876\u5f00\u59cb\u9010\u4e2a\u8f93\u51fa\u7ed3\u70b9\u7684\u503c\uff0c\u6b64\u65f6\u8f93\u51fa\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5df2\u7ecf\u53cd\u8f6c\u8fc7\u6765\u4e86\u3002 \u4f7f\u7528\u6808 public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { if ( listNode == null ) return new ArrayList Stack Integer stack = new Stack (); while ( listNode != null ) { stack . add ( listNode . val ); listNode = listNode . next ; } ArrayList Integer ret = new ArrayList (); while (! stack . isEmpty ()) res . add ( stack . pop ()); return res ; } \u4f7f\u7528\u9012\u5f52 \u65e2\u7136\u60f3\u5230\u4e86\u2f64\u6808\u6765\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\uff0c\u2f7d\u9012\u5f52\u5728\u672c\u8d28\u4e0a\u5c31\u662f\u2f00\u4e2a\u6808\u7ed3\u6784\uff0c \u4e8e\u662f\u5f88\u2f83\u7136\u5730\u53c8\u60f3\u5230\u4e86\u2f64\u9012\u5f52\u6765\u5b9e\u73b0\u3002\u8981\u5b9e\u73b0\u53cd\u8fc7\u6765\u8f93\u51fa\u94fe\u8868\uff0c\u6211\u4eec\u6bcf\u8bbf\u95ee\u5230\u2f00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u5148\u9012\u5f52\u8f93\u51fa\u5b83\u540e\u2faf\u7684\u7ed3\u70b9\uff0c\u518d\u8f93\u51fa\u8be5\u7ed3\u70b9\u2f83\u2f9d\uff0c\u8fd9\u6837\u94fe\u8868\u7684\u8f93\u51fa\u7ed3\u679c\u5c31\u53cd\u8fc7\u6765\u4e86\u3002 public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { ArrayList Integer list = new ArrayList (); printListFromTailToHead ( list , listNode ); return list ; } private void printListFromTailToHead ( ArrayList Integer list , ListNode listNode ) { if ( listNode == null ) return ; printListFromTailToHead ( list , listNode . next ); list . add ( listNode . val ); } \u4e5f\u53ef\u4ee5\u5229\u7528 ArrayList.addAll() \uff0c\u800c\u7701\u53bb\u4e86\u8f85\u52a9\u51fd\u6570\uff1a public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { ArrayList Integer list = new ArrayList (); if ( listNode == null ) return list ; list . addAll ( printListFromTailToHead ( listNode . next )); list . add ( listNode . val ); return list ; } \u867d\u7136\u4e0a\u2faf\u7684\u57fa\u4e8e\u9012\u5f52\u7684\u4ee3\u7801\u770b\u8d77\u6765\u5f88\u7b80\u6d01\uff0c\u4f46\u6709\u4e2a\u95ee\u9898\uff1a\u5f53\u94fe\u8868\u2fae\u5e38\u957f\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5bfc\u81f4\u51fd\u6570\u8c03\u2f64\u7684\u5c42\u7ea7\u5f88\u6df1\uff0c\u4ece\u2f7d\u6709\u53ef\u80fd\u5bfc\u81f4\u51fd\u6570\u8c03\u2f64\u6808\u6ea2\u51fa\u3002 \u663e\u5f0f\u2f64\u6808\u57fa\u4e8e\u5faa\u73af\u5b9e\u73b0\u7684\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u8981\u597d\u2f00\u4e9b\u3002 \u4f7f\u7528Collections.reverse() \u987a\u5e8f\u904d\u5386\u94fe\u8868\uff0c\u83b7\u53d6\u94fe\u8868\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u53cd\u8f6c\u3002 public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { ArrayList Integer res = new ArrayList (); while ( listNode != null ) { res . add ( listNode . val ); listNode = listNode . next ; } Collections . reverse ( res ); return res ; } 6. \u91cd\u5efa\u4e8c\u53c9\u6811 NowCoder \u9898\u76ee\u63cf\u8ff0 \u6839\u636e\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 preorder = [3,9,20,15,7] inorder = [9,3,15,20,7] \u89e3\u9898\u601d\u8def \u89c1 LeetCode 105 . 8. \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9 NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5e76\u4e14\u8fd4\u56de\u3002\u6ce8\u610f\uff0c\u6811\u4e2d\u7684\u7ed3\u70b9\u4e0d\u4ec5\u5305\u542b\u5de6\u53f3\u5b50\u7ed3\u70b9\uff0c\u540c\u65f6\u5305\u542b\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 TreeLinkNode \u5b9a\u4e49\uff1a public class TreeLinkNode { int val ; TreeLinkNode left = null ; TreeLinkNode right = null ; TreeLinkNode next = null ; TreeLinkNode ( int val ) { this . val = val ; } } \u89e3\u9898\u601d\u8def \u2460 \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9\uff1b \u2461 \u5426\u5219\uff0c\u5411\u4e0a\u627e\u7b2c\u4e00\u4e2a\u5de6\u94fe\u63a5\u6307\u5411\u7684\u6811\u5305\u542b\u8be5\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u3002 public TreeLinkNode GetNext ( TreeLinkNode root ){ if ( root == null ) return null ; // \u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9 if ( root . right != null ) { root = root . right ; while ( root . left != null ) root = root . left ; return root ; } // \u7b2c\u4e00\u4e2a\u5de6\u94fe\u63a5\u6307\u5411\u7684\u6811\u5305\u542b\u5de6\u5b50\u6811 TreeLinkNode parent = root . next ; while ( parent != null root != parent . left ) { root = parent ; parent = root . next ; } return parent ; } 7. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u89e3\u9898\u601d\u8def in\u6808\u7528\u6765\u5904\u7406\u5165\u6808(push)\u64cd\u4f5c\uff0cout\u6808\u7528\u6765\u5904\u7406\u51fa\u6808(pop)\u64cd\u4f5c\u3002\u4e00\u4e2a\u5143\u7d20\u8fdb\u5165 in\u6808\u4e4b\u540e\uff0c\u51fa\u6808\u7684\u987a\u5e8f\u88ab\u53cd\u8f6c\u3002\u5f53\u5143\u7d20\u8981\u51fa\u6808\u65f6\uff0c\u9700\u8981\u5148\u8fdb\u5165out\u6808\uff0c\u6b64\u65f6\u5143\u7d20\u51fa\u6808\u987a\u5e8f\u518d\u4e00\u6b21\u88ab\u53cd\u8f6c\uff0c\u56e0\u6b64\u51fa\u6808\u987a\u5e8f\u5c31\u548c\u6700\u5f00\u59cb\u5165\u6808\u987a\u5e8f\u662f\u76f8\u540c\u7684\uff0c\u5148\u8fdb\u5165\u7684\u5143\u7d20\u5148\u9000\u51fa\uff0c\u8fd9\u5c31\u662f\u961f\u5217\u7684\u987a\u5e8f\u3002 \u5f53out\u4e2d\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u5728out\u4e2d\u7684\u6808\u9876\u5143\u7d20\u662f\u6700\u5148\u8fdb\u2f0a\u961f\u5217\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u5f39\u51fa\u3002\u5982\u679c out\u4e3a\u7a7a\u65f6\uff0c\u6211\u4eec\u628ain\u4e2d\u7684\u5143\u7d20\u9010\u4e2a\u5f39\u51fa\u5e76\u538b\u2f0aout\u3002\u7531\u4e8e\u5148\u8fdb\u2f0a\u961f\u5217\u7684\u5143\u7d20\u88ab\u538b\u5230in\u7684\u5e95\u7aef\uff0c\u7ecf\u8fc7\u5f39\u51fa\u548c\u538b\u2f0a\u4e4b\u540e\u5c31\u5904\u4e8eout\u7684\u9876\u7aef\u4e86\uff0c\u53c8\u53ef\u4ee5\u76f4\u63a5\u5f39\u51fa\u3002 public class Queue { Stack Integer in = new Stack Integer (); Stack Integer out = new Stack Integer (); public void push ( int node ) { in . push ( node ); } public int pop () throws Exception { if ( out . isEmpty ()) while (! in . isEmpty ()) out . push ( in . pop ()); if ( out . isEmpty ()) throw new Exception ( Queue is Empty! ); return out . pop (); } } 8. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 NowCoder \u9898\u76ee\u63cf\u8ff0 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002 \u89e3\u9898\u601d\u8def \u5982\u679c\u6570\u5b57\u4e0d\u91cd\u590d\uff0c\u89c1 LeetCode 153 Find Minimum in Rotated Sorted Array . \u5982\u679c\u6570\u7ec4\u5143\u7d20\u5141\u8bb8\u91cd\u590d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7279\u6b8a\u7684\u60c5\u51b5\uff1anums [lo] [lo] = nums [mid] [mid] = nums [hi] [hi] \uff0c\u90a3\u4e48\u6b64\u65f6\u65e0\u6cd5\u786e\u5b9a\u89e3\u5728\u54ea\u4e2a\u533a\u95f4\uff0c\u9700\u8981\u5207\u6362\u5230\u987a\u5e8f\u67e5\u627e\u3002\u4f8b\u5982\u5bf9\u4e8e\u6570\u7ec4 {1,1,1,0,1}\uff0c lo\u3001mid lo\u3001mid \u548c hi hi \u6307\u5411\u7684\u6570\u90fd\u4e3a1\uff0c\u6b64\u65f6\u65e0\u6cd5\u77e5\u9053\u6700\u5c0f\u6570\u5b570\u5728\u54ea\u4e2a\u533a\u95f4\u3002 public int minNumberInRotateArray ( int [] nums ) { if ( nums == null || nums . length == 0 ) return 0 ; int lo = 0 , hi = nums . length - 1 , mid ; while ( lo hi ) { // \u53d6\u4e2d\u95f4\u7684\u4f4d\u7f6e mid = lo + ( hi - lo ) / 2 ; // \u5982\u679c\u4e09\u4e2a\u6570\u90fd\u76f8\u7b49\uff0c\u5219\u9700\u8981\u8fdb\u884c\u987a\u5e8f\u5904\u7406\uff0c\u4ece\u5934\u5230\u5c3e\u627e\u6700\u5c0f\u7684\u503c if ( nums [ mid ] == nums [ hi ] nums [ mid ] == nums [ lo ]) return findMin ( nums , lo , hi ); // \u5982\u679c\u4e2d\u95f4\u4f4d\u7f6e\u5bf9\u5e94\u7684\u503c\u5728\u540e\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u90e8\u5206\uff0c\u5c06hi\u8bbe\u7f6e\u4e3a\u65b0\u7684\u5904\u7406\u4f4d\u7f6e else if ( nums [ mid ] nums [ hi ]) lo = mid + 1 ; else hi = mid ; // \u4e0d\u662f hi = mid - 1; } return nums [ lo ]; } // \u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c private int findMin ( int [] nums , int lo , int hi ) { int min = nums [ lo ]; for ( int i = lo + 1 ; i = hi ; i ++) if ( nums [ i ] min ) min = nums [ i ]; return min ; } 9 \u6590\u6ce2\u90a3\u5951\u6570\u5217 \u6590\u6ce2\u90a3\u5951\u6570\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c n n \u9879\uff0c n = 39 n <= 39 \u3002 \u89e3\u9898\u601d\u8def \u7531\u4e8e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u53ef\u4ee5\u7528\u9012\u5f52\u51fd\u6570\u8868\u793a\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u662f\u7528\u9012\u5f52\u6765\u89e3\u51b3\u3002 public int Fibonacci ( int n ) { if ( n = 0 ) return 0 ; if ( n == 1 ) return 1 ; return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ); } \u4f46\u662f\u5982\u679c\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\uff0c\u4f1a\u91cd\u590d\u8ba1\u7b97\u4e00\u4e9b\u5b50\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u8ba1\u7b97 f(10) f(10) \u9700\u8981\u8ba1\u7b97 f(9) f(9) \u548c f(8) f(8) \uff0c\u8ba1\u7b97 f(9) f(9) \u9700\u8981\u8ba1\u7b97 f(8) f(8) \u548c f(7) f(7) \uff0c\u53ef\u4ee5\u770b\u5230 f(8) f(8) \u88ab\u91cd\u590d\u8ba1\u7b97\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u2f64\u9012\u5f52\u2f45\u6cd5\u8ba1\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4ee5 n n \u7684\u6307\u6570\u7684\u2f45\u5f0f\u9012\u589e\u7684\u3002 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u628a\u5b50\u95ee\u9898\u7684\u89e3\u7f13\u5b58\u8d77\u6765\uff0c\u4ece\u800c\u907f\u514d\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\u3002 public int Fibonacci ( int n ) { if ( n = 1 ) return n ; int [] fib = new int [ n + 1 ]; fib [ 1 ] = 1 ; for ( int i = 2 ; i = n ; i ++) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ]; return fib [ n ]; } \u8003\u8651\u5230\u7b2c i i \u9879\u53ea\u4e0e\u7b2c i-1 i-1 \u548c\u7b2c i-2 i-2 \u9879\u6709\u5173\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5b58\u50a8\u524d\u4e24\u9879\u7684\u503c\u5c31\u80fd\u6c42\u89e3\u7b2c i i \u9879\uff0c\u4ece\u800c\u5c06\u7a7a\u95f4\u590d\u6742\u5ea6\u7531 O(N) O(N) \u964d\u4f4e\u4e3a O(1) O(1) \u3002 public int Fibonacci ( int n ) { if ( n 0 ) throw new IllegalArgumentException ( n must be a non-negative integer ); if ( n 2 ) return n == 0 ? 0 : 1 ; int prev = 1 , before_prev = 0 , cur = 0 ; for ( int i = 2 ; i = n ; i ++) { cur = prev + before_prev ; before_prev = prev ; prev = cur ; } return cur ; } \u7531\u4e8e\u5f85\u6c42\u89e3\u7684 n n \u5c0f\u4e8e40\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u5c06\u524d40\u9879\u7684\u7ed3\u679c\u5148\u8fdb\u884c\u8ba1\u7b97\uff0c\u4e4b\u540e\u5c31\u80fd\u4ee5 O(1) O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5f97\u5230\u7b2c n n \u9879\u7684\u503c\u4e86\u3002 public class Solution { private int [] fib = new int [ 40 ]; public Solution () { fib [ 1 ] = 1 ; fib [ 2 ] = 2 ; for ( int i = 2 ; i fib . length ; i ++) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ]; } public int Fibonacci ( int n ) { return fib [ n ]; } } \u8df3\u53f0\u9636 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u89e3\u9898\u601d\u8def \u9898\u76ee\u7c7b\u4f3c\u4e8e LeetCode 70 climbing stairs \u3002 public int JumpFloor ( int n ) { if ( n = 2 ) return n ; int last = 1 , secondLast = 2 ; int result = 1 ; for ( int i = 2 ; i n ; i ++) { result = secondLast + last ; secondLast = last ; last = result ; } return result ; } \u77e9\u5f62\u8986\u76d6 NowCoder \u9898\u76ee\u63cf\u8ff0 \u6211\u4eec\u53ef\u4ee5\u7528 2\\times 1 2\\times 1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528 n n \u4e2a 2\\times 1 2\\times 1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2\\times n 2\\times n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f \u89e3\u9898\u601d\u8def \u6211\u4eec\u5148\u628a 2\u00d78 2\u00d78 \u7684\u8986\u76d6\u2f45\u6cd5\u8bb0\u4e3a f(8 f(8 \u3002\u2f64\u7b2c\u2f00\u4e2a 1\u00d72 1\u00d72 \u2f29\u77e9\u5f62\u53bb\u8986\u76d6\u2f24\u77e9\u5f62\u7684\u6700\u5de6\u8fb9\u65f6\u6709\u4e24\u4e2a\u9009\u62e9\uff0c\u7ad6\u7740\u653e\u6216\u8005\u6a2a\u7740\u653e\u3002\u5f53\u7ad6\u7740\u653e\u7684\u65f6\u5019\uff0c\u53f3\u8fb9\u8fd8\u5269\u4e0b 2\u00d77 2\u00d77 \u7684\u533a\u57df\uff0c\u8fd9\u79cd\u60c5\u5f62\u4e0b\u7684\u8986\u76d6\u2f45\u6cd5\u8bb0\u4e3a f(7) f(7) \u3002\u63a5\u4e0b\u6765\u8003\u8651\u6a2a\u7740\u653e\u7684\u60c5\u51b5\u3002\u5f53 1\u00d72 1\u00d72 \u7684\u2f29\u77e9\u5f62\u6a2a\u7740\u653e\u5728\u5de6\u4e0a\u2f93\u7684\u65f6\u5019\uff0c\u5de6\u4e0b\u2f93\u5fc5\u987b\u548c\u6a2a\u7740\u653e\u2f00\u4e2a 1\u00d72 1\u00d72 \u7684\u2f29\u77e9\u5f62\uff0c\u2f7d\u5728\u53f3\u8fb9\u8fd8\u8fd8\u5269\u4e0b 2\u00d76 2\u00d76 \u7684\u533a\u57df\uff0c\u8fd9\u79cd\u60c5\u5f62\u4e0b\u7684\u8986\u76d6\u2f45\u6cd5\u8bb0\u4e3a f(6) f(6) \uff0c\u56e0\u6b64 f(8) f(8) = f(7)\uff0bf(6) f(7)\uff0bf(6) \u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4ecd\u7136\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002 \u53d8\u6001\u8df3\u53f0\u9636 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7... \u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a n n \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 n n \u4e2a\u53f0\u9636\u603b\u5171\u6709 2^{n-1} 2^{n-1} \u79cd\u8df3\u6cd5\u3002\u5206\u6790\u5982\u4e0b: f(1) = 1 f(1) = 1 f(2) = f(2-1) + f(2-2) f(2) = f(2-1) + f(2-2) f(3) = f(3-1) + f(3-2) + f(3-3) f(3) = f(3-1) + f(3-2) + f(3-3) ... f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(n-(n-1)) + f(n-n) f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(n-(n-1)) + f(n-n) public int JumpFloorII ( int target ) { if ( target = 0 ) return 0 ; int [] dp = new int [ target + 1 ]; dp [ 0 ] = 0 ; for ( int i = 1 ; i = target ; i ++) { for ( int j = 0 ; j i ; j ++) dp [ i ] += dp [ j ]; dp [ i ] += 1 ; } return dp [ target ]; } 10. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002 \u89e3\u9898\u601d\u8def \u89c1 LeetCode 191 Number of 1 bits \u3002 11. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9 NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent\uff0c\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u89e3\u9898\u601d\u8def \u89c1 LeetCode 50 Pow(x,n) 12. \u6253\u5370\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u6570\u5b57 n n \uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece1\u5230\u6700\u5927\u7684 n n \u4f4d\u5341\u8fdb\u5236\u6570\u3002\u6bd4\u5982\u8f93\u51653\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u76843\u4f4d\u6570\u5373999\u3002 \u89e3\u9898\u601d\u8def \u7531\u4e8e n \u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u56e0\u6b64\u4e0d\u80fd\u76f4\u63a5\u7528 int \u8868\u793a\u6570\u5b57\uff0c\u800c\u662f\u7528 char \u6570\u7ec4\u8fdb\u884c\u5b58\u50a8\u3002 \u4f7f\u7528\u56de\u6eaf\u6cd5\u5f97\u5230\u6240\u6709\u7684\u6570\u3002 public void print1ToMaxOfNDigits ( int n ) { if ( n = 0 ) return ; char [] number = new char [ n ]; print1ToMaxOfNDigits ( number , 0 ); } private void print1ToMaxOfNDigits ( char [] number , int digit ) { if ( digit == number . length ) { printNumber ( number ); return ; } for ( int i = 0 ; i 10 ; i ++) { number [ digit ] = ( char ) ( i + 0 ); print1ToMaxOfNDigits ( number , digit + 1 ); } } private void printNumber ( char [] number ) { int index = 0 ; while ( index number . length number [ index ] == 0 ) index ++; while ( index number . length ) System . out . print ( number [ index ++]); System . out . println (); } 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u8fdb\u5165\u8be5\u683c\u5b50\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u77e9\u9635\u5305\u542b\u4e86\u4e00\u6761 bfce \u8def\u5f84\u3002 \u89e3\u9898\u601d\u8def private final static int [][] next = {{ 0 , - 1 }, { 0 , 1 }, {- 1 , 0 }, { 1 , 0 }}; private int rows ; private int cols ; public boolean hasPath ( char [] array , int rows , int cols , char [] str ) { if ( rows == 0 || cols == 0 ) return false ; this . rows = rows ; this . cols = cols ; boolean [][] marked = new boolean [ rows ][ cols ]; char [][] matrix = buildMatrix ( array ); for ( int i = 0 ; i rows ; i ++) for ( int j = 0 ; j cols ; j ++) if ( backtracking ( matrix , str , marked , 0 , i , j )) return true ; return false ; } private boolean backtracking ( char [][] matrix , char [] str , boolean [][] marked , int pathLen , int r , int c ) { if ( pathLen == str . length ) return true ; if ( r 0 || r = rows || c 0 || c = cols || matrix [ r ][ c ] != str [ pathLen ] || marked [ r ][ c ]) return false ; marked [ r ][ c ] = true ; for ( int [] n : next ) if ( backtracking ( matrix , str , marked , pathLen + 1 , r + n [ 0 ], c + n [ 1 ])) return true ; marked [ r ][ c ] = false ; return false ; } private char [][] buildMatrix ( char [] array ) { char [][] matrix = new char [ rows ][ cols ]; for ( int i = 0 , idx = 0 ; i rows ; i ++) for ( int j = 0 ; j cols ; j ++) matrix [ i ][ j ] = array [ idx ++]; return matrix ; } 13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5730\u4e0a\u6709\u4e00\u4e2a m \u884c\u548c n \u5217\u7684\u65b9\u683c\u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 (0, 0) \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\u53f3\u4e0a\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\uff0c\u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e k \u7684\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c (35,37)\uff0c\u56e0\u4e3a 3+5+3+7=18\u3002\u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c (35,38)\uff0c\u56e0\u4e3a 3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u89e3\u9898\u601d\u8def private static final int [][] next = {{ 0 , - 1 }, { 0 , 1 }, {- 1 , 0 }, { 1 , 0 }}; private int cnt = 0 ; private int rows ; private int cols ; private int threshold ; private int [][] digitSum ; public int movingCount ( int threshold , int rows , int cols ) { this . rows = rows ; this . cols = cols ; this . threshold = threshold ; initDigitSum (); boolean [][] marked = new boolean [ rows ][ cols ]; dfs ( marked , 0 , 0 ); return cnt ; } private void dfs ( boolean [][] marked , int r , int c ) { if ( r 0 || r = rows || c 0 || c = cols || marked [ r ][ c ]) return ; marked [ r ][ c ] = true ; if ( this . digitSum [ r ][ c ] this . threshold ) return ; cnt ++; for ( int [] n : next ) dfs ( marked , r + n [ 0 ], c + n [ 1 ]); } private void initDigitSum () { int [] digitSumOne = new int [ Math . max ( rows , cols )]; for ( int i = 0 ; i digitSumOne . length ; i ++) { int n = i ; while ( n 0 ) { digitSumOne [ i ] += n % 10 ; n /= 10 ; } } this . digitSum = new int [ rows ][ cols ]; for ( int i = 0 ; i this . rows ; i ++) for ( int j = 0 ; j this . cols ; j ++) this . digitSum [ i ][ j ] = digitSumOne [ i ] + digitSumOne [ j ]; } 14. \u526a\u7ef3\u5b50 Leetcode \u9898\u76ee\u63cf\u8ff0 \u628a\u4e00\u6839\u7ef3\u5b50\u526a\u6210\u591a\u6bb5\uff0c\u5e76\u4e14\u4f7f\u5f97\u6bcf\u6bb5\u7684\u957f\u5ea6\u4e58\u79ef\u6700\u5927\u3002 n = 2 return 1 (2 = 1 + 1) n = 10 return 36 (10 = 3 + 3 + 4) \u89e3\u9898\u601d\u8def \u8d2a\u5fc3 \u5c3d\u53ef\u80fd\u591a\u526a\u957f\u5ea6\u4e3a 3 \u7684\u7ef3\u5b50\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u6709\u957f\u5ea6\u4e3a 1 \u7684\u7ef3\u5b50\u51fa\u73b0\u3002\u5982\u679c\u51fa\u73b0\u4e86\uff0c\u5c31\u4ece\u5df2\u7ecf\u5207\u597d\u957f\u5ea6\u4e3a 3 \u7684\u7ef3\u5b50\u4e2d\u62ff\u51fa\u4e00\u6bb5\u4e0e\u957f\u5ea6\u4e3a 1 \u7684\u7ef3\u5b50\u91cd\u65b0\u7ec4\u5408\uff0c\u628a\u5b83\u4eec\u5207\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a 2 \u7684\u7ef3\u5b50\u3002 \u8bc1\u660e\uff1a\u5f53 n = 5 \u65f6\uff0c3(n - 3) - 2(n - 2) = n - 5 = 0\u3002\u56e0\u6b64\u628a\u957f\u5ea6\u5927\u4e8e 5 \u7684\u7ef3\u5b50\u5207\u6210\u4e24\u6bb5\uff0c\u4ee4\u5176\u4e2d\u4e00\u6bb5\u957f\u5ea6\u4e3a 3 \u53ef\u4ee5\u4f7f\u5f97\u4e24\u6bb5\u7684\u4e58\u79ef\u6700\u5927\u3002 public int integerBreak ( int n ) { if ( n 2 ) return 0 ; if ( n == 2 ) return 1 ; if ( n == 3 ) return 2 ; int timesOf3 = n / 3 ; if ( n - timesOf3 * 3 == 1 ) timesOf3 --; int timesOf2 = ( n - timesOf3 * 3 ) / 2 ; return ( int ) ( Math . pow ( 3 , timesOf3 )) * ( int ) ( Math . pow ( 2 , timesOf2 )); } \u52a8\u6001\u89c4\u5212 public int integerBreak ( int n ) { int [] dp = new int [ n + 1 ]; dp [ 1 ] = 1 ; for ( int i = 2 ; i = n ; i ++) for ( int j = 1 ; j i ; j ++) dp [ i ] = Math . max ( dp [ i ], Math . max ( j * ( i - j ), dp [ j ] * ( i - j ))); return dp [ n ]; } 18.1 \u5728 O(1) \u65f6\u95f4\u5185\u5220\u9664\u94fe\u8868\u8282\u70b9 \u89e3\u9898\u601d\u8def \u2460 \u5982\u679c\u8be5\u8282\u70b9\u4e0d\u662f\u5c3e\u8282\u70b9\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u8d4b\u7ed9\u8be5\u8282\u70b9\uff0c\u7136\u540e\u4ee4\u8be5\u8282\u70b9\u6307\u5411\u4e0b\u4e0b\u4e2a\u8282\u70b9\uff0c\u518d\u5220\u9664\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002 \u2461 \u5426\u5219\uff0c\u5c31\u9700\u8981\u5148\u904d\u5386\u94fe\u8868\uff0c\u627e\u5230\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u8ba9\u524d\u4e00\u4e2a\u8282\u70b9\u6307\u5411 null\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\u3002 \u7efc\u4e0a\uff0c\u5982\u679c\u8fdb\u884c N \u6b21\u64cd\u4f5c\uff0c\u90a3\u4e48\u5927\u7ea6\u9700\u8981\u64cd\u4f5c\u8282\u70b9\u7684\u6b21\u6570\u4e3a N-1+N=2N-1\uff0c\u5176\u4e2d N-1 \u8868\u793a N-1 \u4e2a\u4e0d\u662f\u5c3e\u8282\u70b9\u7684\u6bcf\u4e2a\u8282\u70b9\u4ee5 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u64cd\u4f5c\u8282\u70b9\u7684\u603b\u6b21\u6570\uff0cN \u8868\u793a 1 \u4e2a\u5c3e\u8282\u70b9\u4ee5 O(N) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u64cd\u4f5c\u8282\u70b9\u7684\u603b\u6b21\u6570\u3002(2N-1)/N \\~ 2\uff0c\u56e0\u6b64\u8be5\u7b97\u6cd5\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002 public ListNode deleteNode ( ListNode head , ListNode tobeDelete ) { if ( head == null || tobeDelete == null ) return null ; if ( tobeDelete . next != null ) { // \u8981\u5220\u9664\u7684\u8282\u70b9\u4e0d\u662f\u5c3e\u8282\u70b9 ListNode next = tobeDelete . next ; tobeDelete . val = next . val ; tobeDelete . next = next . next ; } else { ListNode cur = head ; while ( cur . next != tobeDelete ) cur = cur . next ; cur . next = null ; } return head ; } 18.2 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9 NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u63cf\u8ff0 public ListNode deleteDuplication ( ListNode pHead ) { if ( pHead == null || pHead . next == null ) return pHead ; ListNode next = pHead . next ; if ( pHead . val == next . val ) { while ( next != null pHead . val == next . val ) next = next . next ; return deleteDuplication ( next ); } else { pHead . next = deleteDuplication ( pHead . next ); return pHead ; } } 19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b 0 \u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u89e3\u9898\u601d\u8def \u5e94\u8be5\u6ce8\u610f\u5230\uff0c'.' \u662f\u7528\u6765\u5f53\u505a\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\uff0c\u800c '*' \u662f\u7528\u6765\u91cd\u590d\u524d\u9762\u7684\u5b57\u7b26\u3002\u8fd9\u4e24\u4e2a\u7684\u4f5c\u7528\u4e0d\u540c\uff0c\u4e0d\u80fd\u628a '.' \u7684\u4f5c\u7528\u548c '*' \u8fdb\u884c\u7c7b\u6bd4\uff0c\u4ece\u800c\u628a\u5b83\u5f53\u6210\u91cd\u590d\u524d\u9762\u5b57\u7b26\u4e00\u6b21\u3002 public boolean match ( char [] str , char [] pattern ) { int m = str . length , n = pattern . length ; boolean [][] dp = new boolean [ m + 1 ][ n + 1 ]; dp [ 0 ][ 0 ] = true ; for ( int i = 1 ; i = n ; i ++) if ( pattern [ i - 1 ] == * ) dp [ 0 ][ i ] = dp [ 0 ][ i - 2 ]; for ( int i = 1 ; i = m ; i ++) for ( int j = 1 ; j = n ; j ++) if ( str [ i - 1 ] == pattern [ j - 1 ] || pattern [ j - 1 ] == . ) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ]; else if ( pattern [ j - 1 ] == * ) if ( pattern [ j - 2 ] == str [ i - 1 ] || pattern [ j - 2 ] == . ) { dp [ i ][ j ] |= dp [ i ][ j - 1 ]; // a* counts as single a dp [ i ][ j ] |= dp [ i - 1 ][ j ]; // a* counts as multiple a dp [ i ][ j ] |= dp [ i ][ j - 2 ]; // a* counts as empty } else dp [ i ][ j ] = dp [ i ][ j - 2 ]; // a* only counts as empty return dp [ m ][ n ]; } 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 NowCoder \u9898\u76ee\u63cf\u8ff0 true +100 5e2 -123 3.1416 -1E-16 false 12e 1a3.14 1.2.3 +-5 12e+4.3 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5339\u914d\u3002 Html [] \uff1a \u5b57\u7b26\u96c6\u5408 () \uff1a \u5206\u7ec4 ? \uff1a \u91cd\u590d 0 ~ 1 + \uff1a \u91cd\u590d 1 ~ n * \uff1a \u91cd\u590d 0 ~ n . \uff1a \u4efb\u610f\u5b57\u7b26 \\\\. \uff1a \u8f6c\u4e49\u540e\u7684 . \\\\d \uff1a \u6570\u5b57 Java public boolean isNumeric ( char [] str ) { if ( str == null || str . length == 0 ) return false ; return new String ( str ). matches ( [+-]?\\\\d*(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? ); } 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 NowCoder \u9898\u76ee\u63cf\u8ff0 \u9700\u8981\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u8fd9\u548c\u4e66\u672c\u4e0d\u592a\u4e00\u6837\u3002 \u89e3\u9898\u601d\u8def public void reOrderArray ( int [] nums ) { // \u5947\u6570\u4e2a\u6570 int oddCnt = 0 ; for ( int val : nums ) if ( val % 2 == 1 ) oddCnt ++; int [] copy = nums . clone (); int i = 0 , j = oddCnt ; for ( int num : copy ) { if ( num % 2 == 1 ) nums [ i ++] = num ; else nums [ j ++] = num ; } } 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2c K \u4e2a\u7ed3\u70b9 NowCoder \u89e3\u9898\u601d\u8def \u8bbe\u94fe\u8868\u7684\u957f\u5ea6\u4e3a N\u3002\u8bbe\u4e24\u4e2a\u6307\u9488 P1 \u548c P2\uff0c\u5148\u8ba9 P1 \u79fb\u52a8 K \u4e2a\u8282\u70b9\uff0c\u5219\u8fd8\u6709 N - K \u4e2a\u8282\u70b9\u53ef\u4ee5\u79fb\u52a8\u3002\u6b64\u65f6\u8ba9 P1 \u548c P2 \u540c\u65f6\u79fb\u52a8\uff0c\u53ef\u4ee5\u77e5\u9053\u5f53 P1 \u79fb\u52a8\u5230\u94fe\u8868\u7ed3\u5c3e\u65f6\uff0cP2 \u79fb\u52a8\u5230 N - K \u4e2a\u8282\u70b9\u5904\uff0c\u8be5\u4f4d\u7f6e\u5c31\u662f\u5012\u6570\u7b2c K \u4e2a\u8282\u70b9\u3002 public ListNode FindKthToTail ( ListNode head , int k ) { if ( head == null ) return null ; ListNode P1 = head ; while ( P1 != null k -- 0 ) P1 = P1 . next ; if ( k 0 ) return null ; ListNode P2 = head ; while ( P1 != null ) { P1 = P1 . next ; P2 = P2 . next ; } return P2 ; } 23. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u94fe\u8868\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\u3002\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488 fast \u6bcf\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u6307\u9488 slow \u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\u3002\u56e0\u4e3a\u5b58\u5728\u73af\uff0c\u6240\u4ee5\u4e24\u4e2a\u6307\u9488\u5fc5\u5b9a\u76f8\u9047\u5728\u73af\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\u4e0a\u3002\u5047\u8bbe\u76f8\u9047\u70b9\u5728\u4e0b\u56fe\u7684 y6 \u4f4d\u7f6e\uff0c\u6b64\u65f6 fast \u79fb\u52a8\u7684\u8282\u70b9\u6570\u4e3a x+2y+z\uff0cslow \u4e3a x+y\uff0c\u7531\u4e8e fast \u901f\u5ea6\u6bd4 slow \u5feb\u4e00\u500d\uff0c\u56e0\u6b64 x+2y+z=2(x+y)\uff0c\u5f97\u5230 x=z\u3002 \u5728\u76f8\u9047\u70b9\uff0cslow \u8981\u5230\u73af\u7684\u5165\u53e3\u70b9\u8fd8\u9700\u8981\u79fb\u52a8 z \u4e2a\u8282\u70b9\uff0c\u5982\u679c\u8ba9 fast \u91cd\u65b0\u4ece\u5934\u5f00\u59cb\u79fb\u52a8\uff0c\u5e76\u4e14\u901f\u5ea6\u53d8\u4e3a\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u5230\u73af\u5165\u53e3\u70b9\u8fd8\u9700\u8981\u79fb\u52a8 x \u4e2a\u8282\u70b9\u3002\u5728\u4e0a\u9762\u5df2\u7ecf\u63a8\u5bfc\u51fa x=z\uff0c\u56e0\u6b64 fast \u548c slow \u5c06\u5728\u73af\u5165\u53e3\u70b9\u76f8\u9047\u3002 public ListNode EntryNodeOfLoop ( ListNode pHead ) { if ( pHead == null || pHead . next == null ) return null ; ListNode slow = pHead , fast = pHead ; do { fast = fast . next . next ; slow = slow . next ; } while ( slow != fast ); fast = pHead ; while ( slow != fast ) { slow = slow . next ; fast = fast . next ; } return slow ; } 24. \u53cd\u8f6c\u94fe\u8868 NowCoder \u89e3\u9898\u601d\u8def \u9012\u5f52 public ListNode ReverseList ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode next = head . next ; head . next = null ; ListNode newHead = ReverseList ( next ); next . next = head ; return newHead ; } \u8fed\u4ee3 public ListNode ReverseList ( ListNode head ) { ListNode newList = new ListNode (- 1 ); while ( head != null ) { ListNode next = head . next ; head . next = newList . next ; newList . next = head ; head = next ; } return newList . next ; } 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868 NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u9012\u5f52 public ListNode Merge ( ListNode list1 , ListNode list2 ) { if ( list1 == null ) return list2 ; if ( list2 == null ) return list1 ; if ( list1 . val = list2 . val ) { list1 . next = Merge ( list1 . next , list2 ); return list1 ; } else { list2 . next = Merge ( list1 , list2 . next ); return list2 ; } } \u8fed\u4ee3 public ListNode Merge ( ListNode list1 , ListNode list2 ) { ListNode head = new ListNode (- 1 ); ListNode cur = head ; while ( list1 != null list2 != null ) { if ( list1 . val = list2 . val ) { cur . next = list1 ; list1 = list1 . next ; } else { cur . next = list2 ; list2 = list2 . next ; } cur = cur . next ; } if ( list1 != null ) cur . next = list1 ; if ( list2 != null ) cur . next = list2 ; return head . next ; } 26. \u6811\u7684\u5b50\u7ed3\u6784 NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def public boolean HasSubtree ( TreeNode root1 , TreeNode root2 ) { if ( root1 == null || root2 == null ) return false ; return isSubtreeWithRoot ( root1 , root2 ) || HasSubtree ( root1 . left , root2 ) || HasSubtree ( root1 . right , root2 ); } private boolean isSubtreeWithRoot ( TreeNode root1 , TreeNode root2 ) { if ( root2 == null ) return true ; if ( root1 == null ) return false ; if ( root1 . val != root2 . val ) return false ; return isSubtreeWithRoot ( root1 . left , root2 . left ) isSubtreeWithRoot ( root1 . right , root2 . right ); } 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def public void Mirror ( TreeNode root ) { if ( root == null ) return ; swap ( root ); Mirror ( root . left ); Mirror ( root . right ); } private void swap ( TreeNode root ) { TreeNode t = root . left ; root . left = root . right ; root . right = t ; } 28 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811 NowCder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def boolean isSymmetrical ( TreeNode pRoot ) { if ( pRoot == null ) return true ; return isSymmetrical ( pRoot . left , pRoot . right ); } boolean isSymmetrical ( TreeNode t1 , TreeNode t2 ) { if ( t1 == null t2 == null ) return true ; if ( t1 == null || t2 == null ) return false ; if ( t1 . val != t2 . val ) return false ; return isSymmetrical ( t1 . left , t2 . right ) isSymmetrical ( t1 . right , t2 . left ); } 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e0b\u56fe\u7684\u77e9\u9635\u987a\u65f6\u9488\u6253\u5370\u7ed3\u679c\u4e3a\uff1a1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 \u89e3\u9898\u601d\u8def public ArrayList Integer printMatrix ( int [][] matrix ) { ArrayList Integer ret = new ArrayList (); int r1 = 0 , r2 = matrix . length - 1 , c1 = 0 , c2 = matrix [ 0 ]. length - 1 ; while ( r1 = r2 c1 = c2 ) { for ( int i = c1 ; i = c2 ; i ++) ret . add ( matrix [ r1 ][ i ]); for ( int i = r1 + 1 ; i = r2 ; i ++) ret . add ( matrix [ i ][ c2 ]); if ( r1 != r2 ) for ( int i = c2 - 1 ; i = c1 ; i --) ret . add ( matrix [ r2 ][ i ]); if ( c1 != c2 ) for ( int i = r2 - 1 ; i r1 ; i --) ret . add ( matrix [ i ][ c1 ]); r1 ++; r2 --; c1 ++; c2 --; } return ret ; } 30. \u5305\u542b min \u51fd\u6570\u7684\u6808 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\u3002 \u89e3\u9898\u601d\u8def private Stack Integer dataStack = new Stack (); private Stack Integer minStack = new Stack (); public void push ( int node ) { dataStack . push ( node ); minStack . push ( minStack . isEmpty () ? node : Math . min ( minStack . peek (), node )); } public void pop () { dataStack . pop (); minStack . pop (); } public int top () { return dataStack . peek (); } public int min () { return minStack . peek (); } 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002 \u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f46 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u4e00\u4e2a\u6808\u6765\u6a21\u62df\u538b\u5165\u5f39\u51fa\u64cd\u4f5c\u3002 public boolean IsPopOrder ( int [] pushSequence , int [] popSequence ) { int n = pushSequence . length ; Stack Integer stack = new Stack (); for ( int pushIndex = 0 , popIndex = 0 ; pushIndex n ; pushIndex ++) { stack . push ( pushSequence [ pushIndex ]); while ( popIndex n ! stack . isEmpty () stack . peek () == popSequence [ popIndex ]) { stack . pop (); popIndex ++; } } return stack . isEmpty (); } 32.1 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386\u7684\u7ed3\u679c\u4e3a\uff1a1,2,3,4,5,6,7 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u961f\u5217\u6765\u8fdb\u884c\u5c42\u6b21\u904d\u5386\u3002 \u4e0d\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u5206\u522b\u5b58\u50a8\u5f53\u524d\u5c42\u7684\u8282\u70b9\u548c\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u56e0\u4e3a\u5728\u5f00\u59cb\u904d\u5386\u4e00\u5c42\u7684\u8282\u70b9\u65f6\uff0c\u5f53\u524d\u961f\u5217\u4e2d\u7684\u8282\u70b9\u6570\u5c31\u662f\u5f53\u524d\u5c42\u7684\u8282\u70b9\u6570\uff0c\u53ea\u8981\u63a7\u5236\u904d\u5386\u8fd9\u4e48\u591a\u8282\u70b9\u6570\uff0c\u5c31\u80fd\u4fdd\u8bc1\u8fd9\u6b21\u904d\u5386\u7684\u90fd\u662f\u5f53\u524d\u5c42\u7684\u8282\u70b9\u3002 public ArrayList Integer PrintFromTopToBottom ( TreeNode root ) { Queue TreeNode queue = new LinkedList (); ArrayList Integer ret = new ArrayList (); queue . add ( root ); while (! queue . isEmpty ()) { int cnt = queue . size (); while ( cnt -- 0 ) { TreeNode t = queue . poll (); if ( t == null ) continue ; ret . add ( t . val ); queue . add ( t . left ); queue . add ( t . right ); } } return ret ; } 32.2 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c NowCoder \u9898\u76ee\u63cf\u8ff0 \u548c\u4e0a\u9898\u51e0\u4e4e\u4e00\u6837\u3002 \u89e3\u9898\u601d\u8def ArrayList ArrayList Integer Print ( TreeNode pRoot ) { ArrayList ArrayList Integer ret = new ArrayList (); Queue TreeNode queue = new LinkedList (); queue . add ( pRoot ); while (! queue . isEmpty ()) { ArrayList Integer list = new ArrayList (); int cnt = queue . size (); while ( cnt -- 0 ) { TreeNode node = queue . poll (); if ( node == null ) continue ; list . add ( node . val ); queue . add ( node . left ); queue . add ( node . right ); } if ( list . size () != 0 ) ret . add ( list ); } return ret ; } 32.3 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u81f3\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u89e3\u9898\u601d\u8def public ArrayList ArrayList Integer Print ( TreeNode pRoot ) { ArrayList ArrayList Integer ret = new ArrayList (); Queue TreeNode queue = new LinkedList (); queue . add ( pRoot ); boolean reverse = false ; while (! queue . isEmpty ()) { ArrayList Integer list = new ArrayList (); int cnt = queue . size (); while ( cnt -- 0 ) { TreeNode node = queue . poll (); if ( node == null ) continue ; list . add ( node . val ); queue . add ( node . left ); queue . add ( node . right ); } if ( reverse ) Collections . reverse ( list ); reverse = ! reverse ; if ( list . size () != 0 ) ret . add ( list ); } return ret ; } 33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\uff0c\u4e0b\u56fe\u662f\u540e\u5e8f\u904d\u5386\u5e8f\u5217 1,3,2 \u6240\u5bf9\u5e94\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u89e3\u9898\u601d\u8def public boolean VerifySquenceOfBST ( int [] sequence ) { if ( sequence == null || sequence . length == 0 ) return false ; return verify ( sequence , 0 , sequence . length - 1 ); } private boolean verify ( int [] sequence , int first , int last ) { if ( last - first = 1 ) return true ; int rootVal = sequence [ last ]; int cutIndex = first ; while ( cutIndex last sequence [ cutIndex ] = rootVal ) cutIndex ++; for ( int i = cutIndex ; i last ; i ++) if ( sequence [ i ] rootVal ) return false ; return verify ( sequence , first , cutIndex - 1 ) verify ( sequence , cutIndex , last - 1 ); } 34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002 \u4e0b\u56fe\u7684\u4e8c\u53c9\u6811\u6709\u4e24\u6761\u548c\u4e3a 22 \u7684\u8def\u5f84\uff1a10, 5, 7 \u548c 10, 12 \u89e3\u9898\u601d\u8def private ArrayList ArrayList Integer ret = new ArrayList (); public ArrayList ArrayList Integer FindPath ( TreeNode root , int target ) { backtracking ( root , target , new ArrayList ()); return ret ; } private void backtracking ( TreeNode node , int target , ArrayList Integer path ) { if ( node == null ) return ; path . add ( node . val ); target -= node . val ; if ( target == 0 node . left == null node . right == null ) { ret . add ( new ArrayList ( path )); } else { backtracking ( node . left , target , path ); backtracking ( node . right , target , path ); } path . remove ( path . size () - 1 ); } 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684 head\u3002 public class RandomListNode { int label ; RandomListNode next = null ; RandomListNode random = null ; RandomListNode ( int label ) { this . label = label ; } } \u89e3\u9898\u601d\u8def \u7b2c\u4e00\u6b65\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u7684\u540e\u9762\u63d2\u5165\u590d\u5236\u7684\u8282\u70b9\u3002 \u7b2c\u4e8c\u6b65\uff0c\u5bf9\u590d\u5236\u8282\u70b9\u7684 random \u94fe\u63a5\u8fdb\u884c\u8d4b\u503c\u3002 \u7b2c\u4e09\u6b65\uff0c\u62c6\u5206\u3002 public RandomListNode Clone ( RandomListNode pHead ) { if ( pHead == null ) return null ; // \u63d2\u5165\u65b0\u8282\u70b9 RandomListNode cur = pHead ; while ( cur != null ) { RandomListNode clone = new RandomListNode ( cur . label ); clone . next = cur . next ; cur . next = clone ; cur = clone . next ; } // \u5efa\u7acb random \u94fe\u63a5 cur = pHead ; while ( cur != null ) { RandomListNode clone = cur . next ; if ( cur . random != null ) clone . random = cur . random . next ; cur = clone . next ; } // \u62c6\u5206 cur = pHead ; RandomListNode pCloneHead = pHead . next ; while ( cur . next != null ) { RandomListNode next = cur . next ; cur . next = next . next ; cur = next ; } return pCloneHead ; } 36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u89e3\u9898\u601d\u8def private TreeNode pre = null ; private TreeNode head = null ; public TreeNode Convert ( TreeNode root ) { inOrder ( root ); return head ; } private void inOrder ( TreeNode node ) { if ( node == null ) return ; inOrder ( node . left ); node . left = pre ; if ( pre != null ) pre . right = node ; pre = node ; if ( head == null ) head = node ; inOrder ( node . right ); } 37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u89e3\u9898\u601d\u8def private String deserializeStr ; public String Serialize ( TreeNode root ) { if ( root == null ) return # ; return root . val + + Serialize ( root . left ) + + Serialize ( root . right ); } public TreeNode Deserialize ( String str ) { deserializeStr = str ; return Deserialize (); } private TreeNode Deserialize () { if ( deserializeStr . length () == 0 ) return null ; int index = deserializeStr . indexOf ( ); String node = index == - 1 ? deserializeStr : deserializeStr . substring ( 0 , index ); deserializeStr = index == - 1 ? : deserializeStr . substring ( index + 1 ); if ( node . equals ( # )) return null ; int val = Integer . valueOf ( node ); TreeNode t = new TreeNode ( val ); t . left = Deserialize (); t . right = Deserialize (); return t ; } 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 abc\uff0c\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26 a, b, c \u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32 abc, acb, bac, bca, cab \u548c cba\u3002 \u89e3\u9898\u601d\u8def private ArrayList String ret = new ArrayList (); public ArrayList String Permutation ( String str ) { if ( str . length () == 0 ) return ret ; char [] chars = str . toCharArray (); Arrays . sort ( chars ); backtracking ( chars , new boolean [ chars . length ], new StringBuilder ()); return ret ; } private void backtracking ( char [] chars , boolean [] hasUsed , StringBuilder s ) { if ( s . length () == chars . length ) { ret . add ( s . toString ()); return ; } for ( int i = 0 ; i chars . length ; i ++) { if ( hasUsed [ i ]) continue ; if ( i != 0 chars [ i ] == chars [ i - 1 ] ! hasUsed [ i - 1 ]) /* \u4fdd\u8bc1\u4e0d\u91cd\u590d */ continue ; hasUsed [ i ] = true ; s . append ( chars [ i ]); backtracking ( chars , hasUsed , s ); s . deleteCharAt ( s . length () - 1 ); hasUsed [ i ] = false ; } } 39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57 NowCoder \u89e3\u9898\u601d\u8def \u591a\u6570\u6295\u7968\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528 Boyer-Moore Majority Vote Algorithm \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u5f97\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\u3002 \u4f7f\u7528 cnt \u6765\u7edf\u8ba1\u4e00\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5f53\u904d\u5386\u5230\u7684\u5143\u7d20\u548c\u7edf\u8ba1\u5143\u7d20\u76f8\u7b49\u65f6\uff0c\u4ee4 cnt++\uff0c\u5426\u5219\u4ee4 cnt--\u3002\u5982\u679c\u524d\u9762\u67e5\u627e\u4e86 i \u4e2a\u5143\u7d20\uff0c\u4e14 cnt == 0\uff0c\u8bf4\u660e\u524d i \u4e2a\u5143\u7d20\u6ca1\u6709 majority\uff0c\u6216\u8005\u6709 majority\uff0c\u4f46\u662f\u51fa\u73b0\u7684\u6b21\u6570\u5c11\u4e8e i / 2 \uff0c\u56e0\u4e3a\u5982\u679c\u591a\u4e8e i / 2 \u7684\u8bdd cnt \u5c31\u4e00\u5b9a\u4e0d\u4f1a\u4e3a 0 \u3002\u6b64\u65f6\u5269\u4e0b\u7684 n - i \u4e2a\u5143\u7d20\u4e2d\uff0cmajority \u7684\u6570\u76ee\u4f9d\u7136\u591a\u4e8e (n - i) / 2\uff0c\u56e0\u6b64\u7ee7\u7eed\u67e5\u627e\u5c31\u80fd\u627e\u51fa majority\u3002 public int MoreThanHalfNum_Solution ( int [] nums ) { int majority = nums [ 0 ]; for ( int i = 1 , cnt = 1 ; i nums . length ; i ++) { cnt = nums [ i ] == majority ? cnt + 1 : cnt - 1 ; if ( cnt == 0 ) { majority = nums [ i ]; cnt = 1 ; } } int cnt = 0 ; for ( int val : nums ) if ( val == majority ) cnt ++; return cnt nums . length / 2 ? majority : 0 ; } 40. \u6700\u5c0f\u7684 K \u4e2a\u6570 NowCoder \u5feb\u901f\u9009\u62e9 \u590d\u6742\u5ea6\uff1aO(N) + O(1) \u53ea\u6709\u5f53\u5141\u8bb8\u4fee\u6539\u6570\u7ec4\u5143\u7d20\u65f6\u624d\u53ef\u4ee5\u4f7f\u7528 \u5feb\u901f\u6392\u5e8f\u7684 partition() \u65b9\u6cd5\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6574\u6570 j \u4f7f\u5f97 a[l..j-1] \u5c0f\u4e8e\u7b49\u4e8e a[j]\uff0c\u4e14 a[j+1..h] \u5927\u4e8e\u7b49\u4e8e a[j]\uff0c\u6b64\u65f6 a[j] \u5c31\u662f\u6570\u7ec4\u7684\u7b2c j \u5927\u5143\u7d20\u3002\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u627e\u51fa\u6570\u7ec4\u7684\u7b2c K \u4e2a\u5143\u7d20\uff0c\u8fd9\u79cd\u627e\u7b2c K \u4e2a\u5143\u7d20\u7684\u7b97\u6cd5\u79f0\u4e3a\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\u3002 public ArrayList Integer GetLeastNumbers_Solution ( int [] nums , int k ) { ArrayList Integer ret = new ArrayList (); if ( k nums . length || k = 0 ) return ret ; findKthSmallest ( nums , k - 1 ); /* findKthSmallest \u4f1a\u6539\u53d8\u6570\u7ec4\uff0c\u4f7f\u5f97\u524d k \u4e2a\u6570\u90fd\u662f\u6700\u5c0f\u7684 k \u4e2a\u6570 */ for ( int i = 0 ; i k ; i ++) ret . add ( nums [ i ]); return ret ; } public void findKthSmallest ( int [] nums , int k ) { int l = 0 , h = nums . length - 1 ; while ( l h ) { int j = partition ( nums , l , h ); if ( j == k ) break ; if ( j k ) h = j - 1 ; else l = j + 1 ; } } private int partition ( int [] nums , int l , int h ) { int p = nums [ l ]; /* \u5207\u5206\u5143\u7d20 */ int i = l , j = h + 1 ; while ( true ) { while ( i != h nums [++ i ] p ) ; while ( j != l nums [-- j ] p ) ; if ( i = j ) break ; swap ( nums , i , j ); } swap ( nums , l , j ); return j ; } private void swap ( int [] nums , int i , int j ) { int t = nums [ i ]; nums [ i ] = nums [ j ]; nums [ j ] = t ; } \u5927\u5c0f\u4e3a K \u7684\u6700\u5c0f\u5806 \u590d\u6742\u5ea6\uff1aO(NlogK) + O(K) \u7279\u522b\u9002\u5408\u5904\u7406\u6d77\u91cf\u6570\u636e \u5e94\u8be5\u4f7f\u7528\u5927\u9876\u5806\u6765\u7ef4\u62a4\u6700\u5c0f\u5806\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u5c0f\u9876\u5806\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u5927\u5c0f\uff0c\u4f01\u56fe\u8ba9\u5c0f\u9876\u5806\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u6700\u5c0f\u5143\u7d20\u3002 \u7ef4\u62a4\u4e00\u4e2a\u5927\u5c0f\u4e3a K \u7684\u6700\u5c0f\u5806\u8fc7\u7a0b\u5982\u4e0b\uff1a\u5728\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\uff0c\u5982\u679c\u5927\u9876\u5806\u7684\u5927\u5c0f\u5927\u4e8e K\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\u53bb\u9664\u3002 public ArrayList Integer GetLeastNumbers_Solution ( int [] nums , int k ) { if ( k nums . length || k = 0 ) return new ArrayList (); PriorityQueue Integer maxHeap = new PriorityQueue (( o1 , o2 ) - o2 - o1 ); for ( int num : nums ) { maxHeap . add ( num ); if ( maxHeap . size () k ) maxHeap . poll (); } return new ArrayList ( maxHeap ); } 41.1 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u89e3\u9898\u601d\u8def /* \u5927\u9876\u5806\uff0c\u5b58\u50a8\u5de6\u534a\u8fb9\u5143\u7d20 */ private PriorityQueue Integer left = new PriorityQueue (( o1 , o2 ) - o2 - o1 ); /* \u5c0f\u9876\u5806\uff0c\u5b58\u50a8\u53f3\u534a\u8fb9\u5143\u7d20\uff0c\u5e76\u4e14\u53f3\u534a\u8fb9\u5143\u7d20\u90fd\u5927\u4e8e\u5de6\u534a\u8fb9 */ private PriorityQueue Integer right = new PriorityQueue (); /* \u5f53\u524d\u6570\u636e\u6d41\u8bfb\u5165\u7684\u5143\u7d20\u4e2a\u6570 */ private int N = 0 ; public void Insert ( Integer val ) { /* \u63d2\u5165\u8981\u4fdd\u8bc1\u4e24\u4e2a\u5806\u5b58\u4e8e\u5e73\u8861\u72b6\u6001 */ if ( N % 2 == 0 ) { /* N \u4e3a\u5076\u6570\u7684\u60c5\u51b5\u4e0b\u63d2\u5165\u5230\u53f3\u534a\u8fb9\u3002 * \u56e0\u4e3a\u53f3\u534a\u8fb9\u5143\u7d20\u90fd\u8981\u5927\u4e8e\u5de6\u534a\u8fb9\uff0c\u4f46\u662f\u65b0\u63d2\u5165\u7684\u5143\u7d20\u4e0d\u4e00\u5b9a\u6bd4\u5de6\u534a\u8fb9\u5143\u7d20\u6765\u7684\u5927\uff0c * \u56e0\u6b64\u9700\u8981\u5148\u5c06\u5143\u7d20\u63d2\u5165\u5de6\u534a\u8fb9\uff0c\u7136\u540e\u5229\u7528\u5de6\u534a\u8fb9\u4e3a\u5927\u9876\u5806\u7684\u7279\u70b9\uff0c\u53d6\u51fa\u5806\u9876\u5143\u7d20\u5373\u4e3a\u6700\u5927\u5143\u7d20\uff0c\u6b64\u65f6\u63d2\u5165\u53f3\u534a\u8fb9 */ left . add ( val ); right . add ( left . poll ()); } else { right . add ( val ); left . add ( right . poll ()); } N ++; } public Double GetMedian () { if ( N % 2 == 0 ) return ( left . peek () + right . peek ()) / 2.0 ; else return ( double ) right . peek (); } 41.2 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26 \"go\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"g\"\u3002\u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26\u201cgoogle\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"l\"\u3002 \u89e3\u9898\u601d\u8def private int [] cnts = new int [ 256 ]; private Queue Character queue = new LinkedList (); public void Insert ( char ch ) { cnts [ ch ]++; queue . add ( ch ); while (! queue . isEmpty () cnts [ queue . peek ()] 1 ) queue . poll (); } public char FirstAppearingOnce () { return queue . isEmpty () ? # : queue . peek (); } 42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c NowCoder \u9898\u76ee\u63cf\u8ff0 {6, -3, -2, 7, -15, 1, 2, 2}\uff0c\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u4e3a 8\uff08\u4ece\u7b2c 0 \u4e2a\u5f00\u59cb\uff0c\u5230\u7b2c 3 \u4e2a\u4e3a\u6b62\uff09\u3002 \u89e3\u9898\u601d\u8def public int FindGreatestSumOfSubArray ( int [] nums ) { if ( nums == null || nums . length == 0 ) return 0 ; int greatestSum = Integer . MIN_VALUE ; int sum = 0 ; for ( int val : nums ) { sum = sum = 0 ? val : sum + val ; greatestSum = Math . max ( greatestSum , sum ); } return greatestSum ; } 43. \u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570 NowCoder \u89e3\u9898\u601d\u8def public int NumberOf1Between1AndN_Solution ( int n ) { int cnt = 0 ; for ( int m = 1 ; m = n ; m *= 10 ) { int a = n / m , b = n % m ; cnt += ( a + 8 ) / 10 * m + ( a % 10 == 1 ? b + 1 : 0 ); } return cnt ; } Leetcode : 233. Number of Digit One 44. \u6570\u5b57\u5e8f\u5217\u4e2d\u7684\u67d0\u4e00\u4f4d\u6570\u5b57 \u9898\u76ee\u63cf\u8ff0 \u6570\u5b57\u4ee5 0123456789101112131415... \u7684\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u6c42\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u7b2c index \u4f4d\u3002 \u89e3\u9898\u601d\u8def public int getDigitAtIndex ( int index ) { if ( index 0 ) return - 1 ; int place = 1 ; // 1 \u8868\u793a\u4e2a\u4f4d\uff0c2 \u8868\u793a \u5341\u4f4d... while ( true ) { int amount = getAmountOfPlace ( place ); int totalAmount = amount * place ; if ( index totalAmount ) return getDigitAtIndex ( index , place ); index -= totalAmount ; place ++; } } /** * place \u4f4d\u6570\u7684\u6570\u5b57\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 * 10, 90, 900, ... */ private int getAmountOfPlace ( int place ) { if ( place == 1 ) return 10 ; return ( int ) Math . pow ( 10 , place - 1 ) * 9 ; } /** * place \u4f4d\u6570\u7684\u8d77\u59cb\u6570\u5b57 * 0, 10, 100, ... */ private int getBeginNumberOfPlace ( int place ) { if ( place == 1 ) return 0 ; return ( int ) Math . pow ( 10 , place - 1 ); } /** * \u5728 place \u4f4d\u6570\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u7b2c index \u4e2a\u6570 */ private int getDigitAtIndex ( int index , int place ) { int beginNumber = getBeginNumberOfPlace ( place ); int shiftNumber = index / place ; String number = ( beginNumber + shiftNumber ) + ; int count = index % place ; return number . charAt ( count ) - 0 ; } 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\u8f93\u5165\u6570\u7ec4 {3\uff0c32\uff0c321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a 321323\u3002 \u89e3\u9898\u601d\u8def \u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u6392\u5e8f\u95ee\u9898\uff0c\u5728\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32 S1 \u548c S2 \u7684\u5927\u5c0f\u65f6\uff0c\u5e94\u8be5\u6bd4\u8f83\u7684\u662f S1+S2 \u548c S2+S1 \u7684\u5927\u5c0f\uff0c\u5982\u679c S1+S2 S2+S1\uff0c\u90a3\u4e48\u5e94\u8be5\u628a S1 \u6392\u5728\u524d\u9762\uff0c\u5426\u5219\u5e94\u8be5\u628a S2 \u6392\u5728\u524d\u9762\u3002 public String PrintMinNumber ( int [] numbers ) { if ( numbers == null || numbers . length == 0 ) return ; int n = numbers . length ; String [] nums = new String [ n ]; for ( int i = 0 ; i n ; i ++) nums [ i ] = numbers [ i ] + ; Arrays . sort ( nums , ( s1 , s2 ) - ( s1 + s2 ). compareTo ( s2 + s1 )); String ret = ; for ( String str : nums ) ret += str ; return ret ; } 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 Leetcode \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6309\u7167\u5982\u4e0b\u89c4\u5219\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32\uff1a0 \u7ffb\u8bd1\u6210\u201ca\u201d\uff0c1 \u7ffb\u8bd1\u6210\u201cb\u201d... 25 \u7ffb\u8bd1\u6210\u201cz\u201d\u3002\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u79cd\u7ffb\u8bd1\u53ef\u80fd\uff0c\u4f8b\u5982 12258 \u4e00\u5171\u6709 5 \u79cd\uff0c\u5206\u522b\u662f bccfi\uff0cbwfi\uff0cbczi\uff0cmcfi\uff0cmzi\u3002\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u89e3\u9898\u601d\u8def public int numDecodings ( String s ) { if ( s == null || s . length () == 0 ) return 0 ; int n = s . length (); int [] dp = new int [ n + 1 ]; dp [ 0 ] = 1 ; dp [ 1 ] = s . charAt ( 0 ) == 0 ? 0 : 1 ; for ( int i = 2 ; i = n ; i ++) { int one = Integer . valueOf ( s . substring ( i - 1 , i )); if ( one != 0 ) dp [ i ] += dp [ i - 1 ]; if ( s . charAt ( i - 2 ) == 0 ) continue ; int two = Integer . valueOf ( s . substring ( i - 2 , i )); if ( two = 26 ) dp [ i ] += dp [ i - 2 ]; } return dp [ n ]; } 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a m*n \u7684\u68cb\u76d8\u7684\u6bcf\u4e00\u4e2a\u683c\u90fd\u653e\u6709\u4e00\u4e2a\u793c\u7269\uff0c\u6bcf\u4e2a\u793c\u7269\u90fd\u6709\u4e00\u5b9a\u4ef7\u503c\uff08\u5927\u4e8e 0\uff09\u3002\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u62ff\u793c\u7269\uff0c\u6bcf\u6b21\u5411\u53f3\u6216\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\uff0c\u76f4\u5230\u53f3\u4e0b\u89d2\u7ed3\u675f\u3002\u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\uff0c\u6c42\u62ff\u5230\u793c\u7269\u7684\u6700\u5927\u4ef7\u503c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5982\u4e0b\u68cb\u76d8 1 10 3 8 12 2 9 6 5 7 4 11 3 7 16 5 \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c\u4e3a 1+12+5+7+7+16+5=53\u3002 \u89e3\u9898\u601d\u8def \u5e94\u8be5\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\uff0c\u800c\u4e0d\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8fc7\u4e8e\u590d\u6742\uff0c\u4e0d\u662f\u6700\u4f18\u89e3\u3002 public int getMost ( int [][] values ) { if ( values == null || values . length == 0 || values [ 0 ]. length == 0 ) return 0 ; int n = values [ 0 ]. length ; int [] dp = new int [ n ]; for ( int [] value : values ) { dp [ 0 ] += value [ 0 ]; for ( int i = 1 ; i n ; i ++) dp [ i ] = Math . max ( dp [ i ], dp [ i - 1 ]) + value [ i ]; } return dp [ n - 1 ]; } 48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32 \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u53ea\u5305\u542b a\\~z \u7684\u5b57\u7b26\uff09\uff0c\u6c42\u5176\u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u4f8b\u5982\u5bf9\u4e8e arabcacfr\uff0c\u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\u4e3a acfr\uff0c\u957f\u5ea6\u4e3a 4\u3002 \u89e3\u9898\u601d\u8def public int longestSubStringWithoutDuplication ( String str ) { int curLen = 0 ; int maxLen = 0 ; int [] preIndexs = new int [ 26 ]; Arrays . fill ( preIndexs , - 1 ); for ( int curI = 0 ; curI str . length (); curI ++) { int c = str . charAt ( curI ) - a ; int preI = preIndexs [ c ]; if ( preI == - 1 || curI - preI curLen ) { curLen ++; } else { maxLen = Math . max ( maxLen , curLen ); curLen = curI - preI ; } preIndexs [ c ] = curI ; } maxLen = Math . max ( maxLen , curLen ); return maxLen ; } 49. \u4e11\u6570 NowCoder \u9898\u76ee\u63cf\u8ff0 \u628a\u53ea\u5305\u542b\u56e0\u5b50 2\u30013 \u548c 5 \u7684\u6570\u79f0\u4f5c\u4e11\u6570\uff08Ugly Number\uff09\u3002\u4f8b\u5982 6\u30018 \u90fd\u662f\u4e11\u6570\uff0c\u4f46 14 \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u56e0\u5b50 7\u3002\u4e60\u60ef\u4e0a\u6211\u4eec\u628a 1 \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002\u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c N \u4e2a\u4e11\u6570\u3002 \u89e3\u9898\u601d\u8def public int GetUglyNumber_Solution ( int N ) { if ( N = 6 ) return N ; int i2 = 0 , i3 = 0 , i5 = 0 ; int [] dp = new int [ N ]; dp [ 0 ] = 1 ; for ( int i = 1 ; i N ; i ++) { int next2 = dp [ i2 ] * 2 , next3 = dp [ i3 ] * 3 , next5 = dp [ i5 ] * 5 ; dp [ i ] = Math . min ( next2 , Math . min ( next3 , next5 )); if ( dp [ i ] == next2 ) i2 ++; if ( dp [ i ] == next3 ) i3 ++; if ( dp [ i ] == next5 ) i5 ++; } return dp [ N - 1 ]; } 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4f4d\u7f6e NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\u3002 \u89e3\u9898\u601d\u8def \u6700\u76f4\u89c2\u7684\u89e3\u6cd5\u662f\u4f7f\u7528 HashMap \u5bf9\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u7edf\u8ba1\uff0c\u4f46\u662f\u8003\u8651\u5230\u8981\u7edf\u8ba1\u7684\u5b57\u7b26\u8303\u56f4\u6709\u9650\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u6574\u578b\u6570\u7ec4\u4ee3\u66ff HashMap\u3002 public int FirstNotRepeatingChar ( String str ) { int [] cnts = new int [ 256 ]; for ( int i = 0 ; i str . length (); i ++) cnts [ str . charAt ( i )]++; for ( int i = 0 ; i str . length (); i ++) if ( cnts [ str . charAt ( i )] == 1 ) return i ; return - 1 ; } \u4ee5\u4e0a\u5b9e\u73b0\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u8fd8\u4e0d\u662f\u6700\u4f18\u7684\u3002\u8003\u8651\u5230\u53ea\u9700\u8981\u627e\u5230\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u9700\u8981\u7edf\u8ba1\u7684\u6b21\u6570\u4fe1\u606f\u53ea\u6709 0,1,\u66f4\u5927\uff0c\u4f7f\u7528\u4e24\u4e2a\u6bd4\u7279\u4f4d\u5c31\u80fd\u5b58\u50a8\u8fd9\u4e9b\u4fe1\u606f\u3002 public int FirstNotRepeatingChar2 ( String str ) { BitSet bs1 = new BitSet ( 256 ); BitSet bs2 = new BitSet ( 256 ); for ( char c : str . toCharArray ()) { if (! bs1 . get ( c ) ! bs2 . get ( c )) bs1 . set ( c ); // 0 0 - 0 1 else if ( bs1 . get ( c ) ! bs2 . get ( c )) bs2 . set ( c ); // 0 1 - 1 1 } for ( int i = 0 ; i str . length (); i ++) { char c = str . charAt ( i ); if ( bs1 . get ( c ) ! bs2 . get ( c )) // 0 1 return i ; } return - 1 ; } 51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002 \u89e3\u9898\u601d\u8def private long cnt = 0 ; private int [] tmp ; // \u5728\u8fd9\u91cc\u58f0\u660e\u8f85\u52a9\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u5728 merge() \u9012\u5f52\u51fd\u6570\u4e2d\u58f0\u660e public int InversePairs ( int [] nums ) { tmp = new int [ nums . length ]; mergeSort ( nums , 0 , nums . length - 1 ); return ( int ) ( cnt % 1000000007 ); } private void mergeSort ( int [] nums , int l , int h ) { if ( h - l 1 ) return ; int m = l + ( h - l ) / 2 ; mergeSort ( nums , l , m ); mergeSort ( nums , m + 1 , h ); merge ( nums , l , m , h ); } private void merge ( int [] nums , int l , int m , int h ) { int i = l , j = m + 1 , k = l ; while ( i = m || j = h ) { if ( i m ) tmp [ k ] = nums [ j ++]; else if ( j h ) tmp [ k ] = nums [ i ++]; else if ( nums [ i ] nums [ j ]) tmp [ k ] = nums [ i ++]; else { tmp [ k ] = nums [ j ++]; this . cnt += m - i + 1 ; // nums[i] = nums[j]\uff0c\u8bf4\u660e nums[i...mid] \u90fd\u5927\u4e8e nums[j] } k ++; } for ( k = l ; k = h ; k ++) nums [ k ] = tmp [ k ]; } 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9 NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u8bbe A \u7684\u957f\u5ea6\u4e3a a + c\uff0cB \u7684\u957f\u5ea6\u4e3a b + c\uff0c\u5176\u4e2d c \u4e3a\u5c3e\u90e8\u516c\u5171\u90e8\u5206\u957f\u5ea6\uff0c\u53ef\u77e5 a + c + b = b + c + a\u3002 \u5f53\u8bbf\u95ee\u94fe\u8868 A \u7684\u6307\u9488\u8bbf\u95ee\u5230\u94fe\u8868\u5c3e\u90e8\u65f6\uff0c\u4ee4\u5b83\u4ece\u94fe\u8868 B \u7684\u5934\u90e8\u91cd\u65b0\u5f00\u59cb\u8bbf\u95ee\u94fe\u8868 B\uff1b\u540c\u6837\u5730\uff0c\u5f53\u8bbf\u95ee\u94fe\u8868 B \u7684\u6307\u9488\u8bbf\u95ee\u5230\u94fe\u8868\u5c3e\u90e8\u65f6\uff0c\u4ee4\u5b83\u4ece\u94fe\u8868 A \u7684\u5934\u90e8\u91cd\u65b0\u5f00\u59cb\u8bbf\u95ee\u94fe\u8868 A\u3002\u8fd9\u6837\u5c31\u80fd\u63a7\u5236\u8bbf\u95ee A \u548c B \u4e24\u4e2a\u94fe\u8868\u7684\u6307\u9488\u80fd\u540c\u65f6\u8bbf\u95ee\u5230\u4ea4\u70b9\u3002 public ListNode FindFirstCommonNode ( ListNode pHead1 , ListNode pHead2 ) { ListNode l1 = pHead1 , l2 = pHead2 ; while ( l1 != l2 ) { l1 = ( l1 == null ) ? pHead2 : l1 . next ; l2 = ( l2 == null ) ? pHead1 : l2 . next ; } return l1 ; } 53. \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 NowCoder \u9898\u76ee\u63cf\u8ff0 Input: nums = 1, 2, 3, 3, 3, 3, 4, 6 K = 3 Output: 4 \u89e3\u9898\u601d\u8def public int GetNumberOfK ( int [] nums , int K ) { int first = binarySearch ( nums , K ); int last = binarySearch ( nums , K + 1 ); return ( first == nums . length || nums [ first ] != K ) ? 0 : last - first ; } private int binarySearch ( int [] nums , int K ) { int l = 0 , h = nums . length ; while ( l h ) { int m = l + ( h - l ) / 2 ; if ( nums [ m ] = K ) h = m ; else l = m + 1 ; } return l ; } 54. \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u7b2c K \u4e2a\u7ed3\u70b9 NowCoder \u89e3\u9898\u601d\u8def \u5229\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u5e8f\u904d\u5386\u6709\u5e8f\u7684\u7279\u70b9\u3002 private TreeNode ret ; private int cnt = 0 ; public TreeNode KthNode ( TreeNode pRoot , int k ) { inOrder ( pRoot , k ); return ret ; } private void inOrder ( TreeNode root , int k ) { if ( root == null || cnt = k ) return ; inOrder ( root . left , k ); cnt ++; if ( cnt == k ) ret = root ; inOrder ( root . right , k ); } 55.1 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u89e3\u9898\u601d\u8def public int TreeDepth ( TreeNode root ) { return root == null ? 0 : 1 + Math . max ( TreeDepth ( root . left ), TreeDepth ( root . right )); } 55.2 \u5e73\u8861\u4e8c\u53c9\u6811 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5e73\u8861\u4e8c\u53c9\u6811\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1\u3002 \u89e3\u9898\u601d\u8def private boolean isBalanced = true ; public boolean IsBalanced_Solution ( TreeNode root ) { height ( root ); return isBalanced ; } private int height ( TreeNode root ) { if ( root == null || ! isBalanced ) return 0 ; int left = height ( root . left ); int right = height ( root . right ); if ( Math . abs ( left - right ) 1 ) isBalanced = false ; return 1 + Math . max ( left , right ); } 56. \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570\u3002 \u89e3\u9898\u601d\u8def \u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5143\u7d20\u5728\u4f4d\u7ea7\u8868\u793a\u4e0a\u5fc5\u5b9a\u4f1a\u6709\u4e00\u4f4d\u5b58\u5728\u4e0d\u540c\uff0c\u5c06\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\u5f02\u6216\u5f97\u5230\u7684\u7ed3\u679c\u4e3a\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u4e24\u4e2a\u5143\u7d20\u5f02\u6216\u7684\u7ed3\u679c\u3002 diff = -diff \u5f97\u5230\u51fa diff \u6700\u53f3\u4fa7\u4e0d\u4e3a 0 \u7684\u4f4d\uff0c\u4e5f\u5c31\u662f\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u4f4d\u7ea7\u8868\u793a\u4e0a\u6700\u53f3\u4fa7\u4e0d\u540c\u7684\u90a3\u4e00\u4f4d\uff0c\u5229\u7528\u8fd9\u4e00\u4f4d\u5c31\u53ef\u4ee5\u5c06\u4e24\u4e2a\u5143\u7d20\u533a\u5206\u5f00\u6765\u3002 public void FindNumsAppearOnce ( int [] nums , int num1 [], int num2 []) { int diff = 0 ; for ( int num : nums ) diff ^= num ; diff = - diff ; for ( int num : nums ) { if (( num diff ) == 0 ) num1 [ 0 ] ^= num ; else num2 [ 0 ] ^= num ; } } 57.1 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57 S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662f S\u3002\u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8e S\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u8f83\u5c0f\u7684\u503c\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u8f83\u5927\u7684\u503c\u3002\u6307\u5411\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u4ece\u5934\u5411\u5c3e\u904d\u5386\uff0c\u6307\u5411\u8f83\u5927\u5143\u7d20\u7684\u6307\u9488\u4ece\u5c3e\u5411\u5934\u904d\u5386\u3002 \u5982\u679c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u7684\u548c sum == target\uff0c\u90a3\u4e48\u5f97\u5230\u8981\u6c42\u7684\u7ed3\u679c\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5927\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5c0f\u4e00\u4e9b\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5c0f\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5927\u4e00\u4e9b\u3002 public ArrayList Integer FindNumbersWithSum ( int [] array , int sum ) { int i = 0 , j = array . length - 1 ; while ( i j ) { int cur = array [ i ] + array [ j ]; if ( cur == sum ) return new ArrayList ( Arrays . asList ( array [ i ], array [ j ])); if ( cur sum ) i ++; else j --; } return new ArrayList (); } 57.2 \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u51fa\u6240\u6709\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002 \u4f8b\u5982\u548c\u4e3a 100 \u7684\u8fde\u7eed\u5e8f\u5217\u6709\uff1a [9, 10, 11, 12, 13, 14, 15, 16] [18, 19, 20, 21, 22]\u3002 \u89e3\u9898\u601d\u8def public ArrayList ArrayList Integer FindContinuousSequence ( int sum ) { ArrayList ArrayList Integer ret = new ArrayList (); int start = 1 , end = 2 ; int curSum = 3 ; while ( end sum ) { if ( curSum sum ) { curSum -= start ; start ++; } else if ( curSum sum ) { end ++; curSum += end ; } else { ArrayList Integer list = new ArrayList (); for ( int i = start ; i = end ; i ++) list . add ( i ); ret . add ( list ); curSum -= start ; start ++; end ++; curSum += end ; } } return ret ; } 58.1 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217 NowCoder \u9898\u76ee\u63cf\u8ff0 Input: I am a student. Output: student. a am I \u89e3\u9898\u601d\u8def \u9898\u76ee\u5e94\u8be5\u6709\u4e00\u4e2a\u9690\u542b\u6761\u4ef6\uff0c\u5c31\u662f\u4e0d\u80fd\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002\u867d\u7136 Java \u7684\u9898\u76ee\u8f93\u5165\u53c2\u6570\u4e3a String \u7c7b\u578b\uff0c\u9700\u8981\u5148\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u4f7f\u5f97\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\uff0c\u4f46\u662f\u6b63\u786e\u7684\u53c2\u6570\u7c7b\u578b\u5e94\u8be5\u548c\u539f\u4e66\u4e00\u6837\uff0c\u4e3a\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u8be5\u5b57\u7b26\u6570\u7ec4\u7684\u7a7a\u95f4\u3002\u4efb\u4f55\u4f7f\u7528\u4e86\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u6cd5\u5728\u9762\u8bd5\u65f6\u90fd\u4f1a\u5927\u6253\u6298\u6263\uff0c\u5305\u62ec\u9012\u5f52\u89e3\u6cd5\u3002 \u6b63\u786e\u7684\u89e3\u6cd5\u5e94\u8be5\u662f\u548c\u4e66\u4e0a\u4e00\u6837\uff0c\u5148\u65cb\u8f6c\u6bcf\u4e2a\u5355\u8bcd\uff0c\u518d\u65cb\u8f6c\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 public String ReverseSentence ( String str ) { int n = str . length (); char [] chars = str . toCharArray (); int i = 0 , j = 0 ; while ( j = n ) { if ( j == n || chars [ j ] == ) { reverse ( chars , i , j - 1 ); i = j + 1 ; } j ++; } reverse ( chars , 0 , n - 1 ); return new String ( chars ); } private void reverse ( char [] c , int i , int j ) { while ( i j ) swap ( c , i ++, j --); } private void swap ( char [] c , int i , int j ) { char t = c [ i ]; c [ i ] = c [ j ]; c [ j ] = t ; } 58.2 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32 NowCoder \u9898\u76ee\u63cf\u8ff0 Input: S= abcXYZdef K=3 Output: XYZdefabc \u89e3\u9898\u601d\u8def \u5148\u5c06 \"abc\" \u548c \"XYZdef\" \u5206\u522b\u7ffb\u8f6c\uff0c\u5f97\u5230 \"cbafedZYX\"\uff0c\u7136\u540e\u518d\u628a\u6574\u4e2a\u5b57\u7b26\u4e32\u7ffb\u8f6c\u5f97\u5230 \"XYZdefabc\"\u3002 public String LeftRotateString ( String str , int n ) { if ( n = str . length ()) return str ; char [] chars = str . toCharArray (); reverse ( chars , 0 , n - 1 ); reverse ( chars , n , chars . length - 1 ); reverse ( chars , 0 , chars . length - 1 ); return new String ( chars ); } private void reverse ( char [] chars , int i , int j ) { while ( i j ) swap ( chars , i ++, j --); } private void swap ( char [] chars , int i , int j ) { char t = chars [ i ]; chars [ i ] = chars [ j ]; chars [ j ] = t ; } 59. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u6570\u503c\u7684\u6700\u5927\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4 {2, 3, 4, 2, 6, 2, 5, 1} \u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f 3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u5728 6 \u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u4ed6\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a {4, 4, 6, 6, 6, 5}\u3002 \u89e3\u9898\u601d\u8def public ArrayList Integer maxInWindows ( int [] num , int size ) { ArrayList Integer ret = new ArrayList (); if ( size num . length || size 1 ) return ret ; PriorityQueue Integer heap = new PriorityQueue (( o1 , o2 ) - o2 - o1 ); /* \u5927\u9876\u5806 */ for ( int i = 0 ; i size ; i ++) heap . add ( num [ i ]); ret . add ( heap . peek ()); for ( int i = 0 , j = i + size ; j num . length ; i ++, j ++) { /* \u7ef4\u62a4\u4e00\u4e2a\u5927\u5c0f\u4e3a size \u7684\u5927\u9876\u5806 */ heap . remove ( num [ i ]); heap . add ( num [ j ]); ret . add ( heap . peek ()); } return ret ; } 60. n \u4e2a\u9ab0\u5b50\u7684\u70b9\u6570 Lintcode \u9898\u76ee\u63cf\u8ff0 \u628a n \u4e2a\u9ab0\u5b50\u4ecd\u5728\u5730\u4e0a\uff0c\u6c42\u70b9\u6570\u548c\u4e3a s \u7684\u6982\u7387\u3002 \u52a8\u6001\u89c4\u5212\u89e3\u6cd5 \u4f7f\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 dp \u5b58\u50a8\u70b9\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5176\u4e2d dp[i][j] \u8868\u793a\u524d i \u4e2a\u9ab0\u5b50\u4ea7\u751f\u70b9\u6570 j \u7684\u6b21\u6570\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N 2 ) public List Map . Entry Integer , Double dicesSum ( int n ) { final int face = 6 ; final int pointNum = face * n ; long [][] dp = new long [ n + 1 ][ pointNum + 1 ]; for ( int i = 1 ; i = face ; i ++) dp [ 1 ][ i ] = 1 ; for ( int i = 2 ; i = n ; i ++) for ( int j = i ; j = pointNum ; j ++) /* \u4f7f\u7528 i \u4e2a\u9ab0\u5b50\u6700\u5c0f\u70b9\u6570\u4e3a i */ for ( int k = 1 ; k = face k = j ; k ++) dp [ i ][ j ] += dp [ i - 1 ][ j - k ]; final double totalNum = Math . pow ( 6 , n ); List Map . Entry Integer , Double ret = new ArrayList (); for ( int i = n ; i = pointNum ; i ++) ret . add ( new AbstractMap . SimpleEntry ( i , dp [ n ][ i ] / totalNum )); return ret ; } \u52a8\u6001\u89c4\u5212\u89e3\u6cd5 + \u65cb\u8f6c\u6570\u7ec4 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N) public List Map . Entry Integer , Double dicesSum ( int n ) { final int face = 6 ; final int pointNum = face * n ; long [][] dp = new long [ 2 ][ pointNum + 1 ]; for ( int i = 1 ; i = face ; i ++) dp [ 0 ][ i ] = 1 ; int flag = 1 ; /* \u65cb\u8f6c\u6807\u8bb0 */ for ( int i = 2 ; i = n ; i ++, flag = 1 - flag ) { for ( int j = 0 ; j = pointNum ; j ++) dp [ flag ][ j ] = 0 ; /* \u65cb\u8f6c\u6570\u7ec4\u6e05\u96f6 */ for ( int j = i ; j = pointNum ; j ++) for ( int k = 1 ; k = face k = j ; k ++) dp [ flag ][ j ] += dp [ 1 - flag ][ j - k ]; } final double totalNum = Math . pow ( 6 , n ); List Map . Entry Integer , Double ret = new ArrayList (); for ( int i = n ; i = pointNum ; i ++) ret . add ( new AbstractMap . SimpleEntry ( i , dp [ 1 - flag ][ i ] / totalNum )); return ret ; } 61. \u6251\u514b\u724c\u987a\u5b50 NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e94\u5f20\u724c\uff0c\u5176\u4e2d\u5927\u5c0f\u9b3c\u4e3a\u765e\u5b50\uff0c\u724c\u9762\u5927\u5c0f\u4e3a 0\u3002\u5224\u65ad\u8fd9\u4e94\u5f20\u724c\u662f\u5426\u80fd\u7ec4\u6210\u987a\u5b50\u3002 \u89e3\u9898\u601d\u8def public boolean isContinuous ( int [] nums ) { if ( nums . length 5 ) return false ; Arrays . sort ( nums ); // \u7edf\u8ba1\u765e\u5b50\u6570\u91cf int cnt = 0 ; for ( int num : nums ) if ( num == 0 ) cnt ++; // \u4f7f\u7528\u765e\u5b50\u53bb\u8865\u5168\u4e0d\u8fde\u7eed\u7684\u987a\u5b50 for ( int i = cnt ; i nums . length - 1 ; i ++) { if ( nums [ i + 1 ] == nums [ i ]) return false ; cnt -= nums [ i + 1 ] - nums [ i ] - 1 ; } return cnt = 0 ; } 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570 NowCoder \u9898\u76ee\u63cf\u8ff0 \u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e\uff0c\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570 m\uff0c\u8ba9\u7f16\u53f7\u4e3a 0 \u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002\u6bcf\u6b21\u558a\u5230 m-1 \u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269\uff0c\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d\uff0c\u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u7ee7\u7eed 0...m-1 \u62a5\u6570 .... \u8fd9\u6837\u4e0b\u53bb .... \u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14\u3002 \u89e3\u9898\u601d\u8def \u7ea6\u745f\u592b\u73af\uff0c\u5706\u5708\u957f\u5ea6\u4e3a n \u7684\u89e3\u53ef\u4ee5\u770b\u6210\u957f\u5ea6\u4e3a n-1 \u7684\u89e3\u518d\u52a0\u4e0a\u62a5\u6570\u7684\u957f\u5ea6 m\u3002\u56e0\u4e3a\u662f\u5706\u5708\uff0c\u6240\u4ee5\u6700\u540e\u9700\u8981\u5bf9 n \u53d6\u4f59\u3002 public int LastRemaining_Solution ( int n , int m ) { if ( n == 0 ) /* \u7279\u6b8a\u8f93\u5165\u7684\u5904\u7406 */ return - 1 ; if ( n == 1 ) /* \u9012\u5f52\u8fd4\u56de\u6761\u4ef6 */ return 0 ; return ( LastRemaining_Solution ( n - 1 , m ) + m ) % n ; } 63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6 Leetcode \u9898\u76ee\u63cf\u8ff0 \u53ef\u4ee5\u6709\u4e00\u6b21\u4e70\u5165\u548c\u4e00\u6b21\u5356\u51fa\uff0c\u90a3\u4e48\u4e70\u5165\u5fc5\u987b\u5728\u524d\u3002\u6c42\u6700\u5927\u6536\u76ca\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u8d2a\u5fc3\u7b56\u7565\uff0c\u5047\u8bbe\u7b2c i \u8f6e\u8fdb\u884c\u5356\u51fa\u64cd\u4f5c\uff0c\u4e70\u5165\u64cd\u4f5c\u4ef7\u683c\u5e94\u8be5\u5728 i \u4e4b\u524d\u5e76\u4e14\u4ef7\u683c\u6700\u4f4e\u3002 public int maxProfit ( int [] prices ) { if ( prices == null || prices . length == 0 ) return 0 ; int soFarMin = prices [ 0 ]; int maxProfit = 0 ; for ( int i = 1 ; i prices . length ; i ++) { soFarMin = Math . min ( soFarMin , prices [ i ]); maxProfit = Math . max ( maxProfit , prices [ i ] - soFarMin ); } return maxProfit ; } 64. \u6c42 1+2+3+...+n NowCoder \u9898\u76ee\u63cf\u8ff0 \u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5 A ? B : C\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u9012\u5f52\u89e3\u6cd5\u6700\u91cd\u8981\u7684\u662f\u6307\u5b9a\u8fd4\u56de\u6761\u4ef6\uff0c\u4f46\u662f\u672c\u9898\u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528 if \u8bed\u53e5\u6765\u6307\u5b9a\u8fd4\u56de\u6761\u4ef6\u3002 \u6761\u4ef6\u4e0e \u5177\u6709\u77ed\u8def\u539f\u5219\uff0c\u5373\u5728\u7b2c\u4e00\u4e2a\u6761\u4ef6\u8bed\u53e5\u4e3a false \u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u53bb\u6267\u884c\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u8bed\u53e5\u3002\u5229\u7528\u8fd9\u4e00\u7279\u6027\uff0c\u5c06\u9012\u5f52\u7684\u8fd4\u56de\u6761\u4ef6\u53d6\u975e\u7136\u540e\u4f5c\u4e3a \u7684\u7b2c\u4e00\u4e2a\u6761\u4ef6\u8bed\u53e5\uff0c\u9012\u5f52\u7684\u4e3b\u4f53\u8f6c\u6362\u4e3a\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u8bed\u53e5\uff0c\u90a3\u4e48\u5f53\u9012\u5f52\u7684\u8fd4\u56de\u6761\u4ef6\u4e3a true \u7684\u60c5\u51b5\u4e0b\u5c31\u4e0d\u4f1a\u6267\u884c\u9012\u5f52\u7684\u4e3b\u4f53\u90e8\u5206\uff0c\u9012\u5f52\u8fd4\u56de\u3002 \u672c\u9898\u7684\u9012\u5f52\u8fd4\u56de\u6761\u4ef6\u4e3a n = 0\uff0c\u53d6\u975e\u540e\u5c31\u662f n 0\uff1b\u9012\u5f52\u7684\u4e3b\u4f53\u90e8\u5206\u4e3a sum += Sum_Solution(n - 1)\uff0c\u8f6c\u6362\u4e3a\u6761\u4ef6\u8bed\u53e5\u540e\u5c31\u662f (sum += Sum_Solution(n - 1)) 0\u3002 public int Sum_Solution ( int n ) { int sum = n ; boolean b = ( n 0 ) (( sum += Sum_Solution ( n - 1 )) 0 ); return sum ; } 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u4e0d\u5f97\u4f7f\u7528 +\u3001-\u3001*\u3001/ \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u89e3\u9898\u601d\u8def a ^ b \u8868\u793a\u6ca1\u6709\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\u4e24\u6570\u7684\u548c\uff0c(a b) 1 \u5c31\u662f\u8fdb\u4f4d\u3002 \u9012\u5f52\u4f1a\u7ec8\u6b62\u7684\u539f\u56e0\u662f (a b) 1 \u6700\u53f3\u8fb9\u4f1a\u591a\u4e00\u4e2a 0\uff0c\u90a3\u4e48\u7ee7\u7eed\u9012\u5f52\uff0c\u8fdb\u4f4d\u6700\u53f3\u8fb9\u7684 0 \u4f1a\u6162\u6162\u589e\u591a\uff0c\u6700\u540e\u8fdb\u4f4d\u4f1a\u53d8\u4e3a 0\uff0c\u9012\u5f52\u7ec8\u6b62\u3002 public int Add ( int a , int b ) { return b == 0 ? a : Add ( a ^ b , ( a b ) 1 ); } 66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4 NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0, 1,..., n-1]\uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0, 1,..., n-1]\uff0c\u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]\u3002\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \u89e3\u9898\u601d\u8def public int [] multiply ( int [] A ) { int n = A . length ; int [] B = new int [ n ]; for ( int i = 0 , product = 1 ; i n ; product *= A [ i ], i ++) /* \u4ece\u5de6\u5f80\u53f3\u7d2f\u4e58 */ B [ i ] = product ; for ( int i = n - 1 , product = 1 ; i = 0 ; product *= A [ i ], i --) /* \u4ece\u53f3\u5f80\u5de6\u7d2f\u4e58 */ B [ i ] *= product ; return B ; } 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 NowCoder \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de 0\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 Iuput: +2147483647 1a33 Output: 2147483647 0 \u89e3\u9898\u601d\u8def public int StrToInt ( String str ) { if ( str == null || str . length () == 0 ) return 0 ; boolean isNegative = str . charAt ( 0 ) == - ; int ret = 0 ; for ( int i = 0 ; i str . length (); i ++) { char c = str . charAt ( i ); if ( i == 0 ( c == + || c == - )) /* \u7b26\u53f7\u5224\u5b9a */ continue ; if ( c 0 || c 9 ) /* \u975e\u6cd5\u8f93\u5165 */ return 0 ; ret = ret * 10 + ( c - 0 ); } return isNegative ? - ret : ret ; } 68. \u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148 \u4e8c\u53c9\u67e5\u627e\u6811 Leetcode : 235. Lowest Common Ancestor of a Binary Search Tree \u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\uff0c\u4e24\u4e2a\u8282\u70b9 p, q \u7684\u516c\u5171\u7956\u5148 root \u6ee1\u8db3 root.val = p.val root.val = q.val\u3002 public TreeNode lowestCommonAncestor ( TreeNode root , TreeNode p , TreeNode q ) { if ( root == null ) return root ; if ( root . val p . val root . val q . val ) return lowestCommonAncestor ( root . left , p , q ); if ( root . val p . val root . val q . val ) return lowestCommonAncestor ( root . right , p , q ); return root ; } \u666e\u901a\u4e8c\u53c9\u6811 Leetcode : 236. Lowest Common Ancestor of a Binary Tree \u5728\u5de6\u53f3\u5b50\u6811\u4e2d\u67e5\u627e\u662f\u5426\u5b58\u5728 p \u6216\u8005 q\uff0c\u5982\u679c p \u548c q \u5206\u522b\u5728\u4e24\u4e2a\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6839\u8282\u70b9\u5c31\u662f\u6700\u4f4e\u516c\u5171\u7956\u5148\u3002 public TreeNode lowestCommonAncestor ( TreeNode root , TreeNode p , TreeNode q ) { if ( root == null || root == p || root == q ) return root ; TreeNode left = lowestCommonAncestor ( root . left , p , q ); TreeNode right = lowestCommonAncestor ( root . right , p , q ); return left == null ? right : right == null ? left : root ; } Reference \u5251\u6307Offer \u5251\u6307Offer\u7684Java\u5b9e\u73b0 \u5251\u6307Offer\u9898\u89e3","title":"\u5251\u6307Offer\u9898\u89e3"},{"location":"algorithm/sword/solution/#offer","text":"","title":"\u5251\u6307Offer"},{"location":"algorithm/sword/solution/#1","text":"\u672c\u6587\u7684\u7ed8\u56fe\u53ef\u901a\u8fc7\u4ee5\u4e0b\u9014\u5f84\u514d\u8d39\u83b7\u5f97\u5e76\u4f7f\u7528\uff1a ProcessOn DrawIO","title":"1. \u524d\u8a00"},{"location":"algorithm/sword/solution/#2-singleton","text":"Singleton Pattern","title":"2. \u5b9e\u73b0 Singleton"},{"location":"algorithm/sword/solution/#3","text":"NowCoder \u5728\u4e00\u4e2a\u957f\u5ea6\u4e3a n n \u7684\u6570\u7ec4\u91cc\u7684\u6240\u6709\u6570\u5b57\u90fd\u57280\u5230 n-1 n-1 \u7684\u8303\u56f4\u5185\u3002\u6570\u7ec4\u4e2d\u67d0\u4e9b\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4f46\u4e0d\u77e5\u9053\u6709\u51e0\u4e2a\u6570\u5b57\u662f\u91cd\u590d\u7684\uff0c\u4e5f\u4e0d\u77e5\u9053\u6bcf\u4e2a\u6570\u5b57\u91cd\u590d\u51e0\u6b21\u3002\u8bf7\u627e\u51fa\u6570\u7ec4\u4e2d\u4efb\u610f\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u957f\u5ea6\u4e3a7\u7684\u6570\u7ec4 [2,3,1,0,2,5,3] [2,3,1,0,2,5,3] \uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8f93\u51fa\u662f\u7b2c\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b572\u3002 \u89e3\u9898\u601d\u8def \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u4e2a\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5148\u628a\u8f93\u5165\u7684\u6570\u7ec4\u6392\u5e8f\u3002\u7136\u540e\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u6570\u7ec4\uff0c\u627e\u51fa\u91cd\u590d\u7684\u6570\u5b57\u3002\u6216\u8005\u5229\u7528\u54c8\u5e0c\u8868\uff0c\u6bcf\u626b\u5230\u4e00\u4e2a\u6570\u5b57\u7684\u65f6\u5019\uff0c\u90fd\u53ef\u4ee5\u7528 O(1) O(1) \u7684\u65f6\u95f4\u6765\u5224\u65ad\u54c8\u5e0c\u8868\u91cc\u662f\u5426\u5df2\u7ecf\u5305\u542b\u4e86\u8be5\u6570\u5b57\u3002\u5982\u679c\u54c8\u5e0c\u8868\u91cc\u8fd8\u6ca1\u6709\u8fd9\u4e2a\u6570\u5b57\uff0c\u5c31\u628a\u5b83\u52a0\u5165\u54c8\u5e0c\u8868\uff0c\u5426\u5219\uff0c\u5c31\u627e\u5230\u4e00\u4e2a\u91cd\u590d\u7684\u6570\u5b57\u3002 \u6709\u6ca1\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u5462\uff1f\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6 O(N) O(N) \uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1) O(1) \u3002\u56e0\u6b64\u4e0d\u80fd\u4f7f\u7528\u6392\u5e8f\u7684\u65b9\u6cd5\uff0c\u4e5f\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u6807\u8bb0\u6570\u7ec4\u3002 \u6ce8\u610f\u5230\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u90fd\u5728 0\\sim n-1 0\\sim n-1 \u7684\u8303\u56f4\u5185\u3002\u5982\u679c\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u6570\u5b57\uff0c\u90a3\u4e48\u5f53\u6570\u7ec4\u6392\u5e8f\u4e4b\u540e\u6570\u5b57 i i \u5c06\u51fa\u73b0\u5728\u4e0b\u6807\u4e3a i i \u7684\u4f4d\u7f6e\u3002\u6240\u4ee5\u53ef\u4ee5\u5c06\u503c\u4e3a i i \u7684\u5143\u7d20\u8c03\u6574\u5230\u7b2c i i \u4e2a\u4f4d\u7f6e\u4e0a\u3002 \u4ee5 (2, 3, 1, 0, 2, 5) \u4e3a\u4f8b\uff1a position-0 : (2,3,1,0,2,5) // 2 - 1 (1,3,2,0,2,5) // 1 - 3 (3,1,2,0,2,5) // 3 - 0 (0,1,2,3,2,5) // already in position position-1 : (0,1,2,3,2,5) // already in position position-2 : (0,1,2,3,2,5) // already in position position-3 : (0,1,2,3,2,5) // already in position position-4 : (0,1,2,3,2,5) // nums[i] == nums[nums[i]], exit \u904d\u5386\u5230\u4f4d\u7f6e 4 \u65f6\uff0c\u8be5\u4f4d\u7f6e\u4e0a\u7684\u6570\u4e3a 2\uff0c\u4f46\u662f\u7b2c 2 \u4e2a\u4f4d\u7f6e\u4e0a\u5df2\u7ecf\u6709\u4e00\u4e2a 2 \u7684\u503c\u4e86\uff0c\u56e0\u6b64\u53ef\u4ee5\u77e5\u9053 2 \u91cd\u590d\u3002 public boolean duplicate ( int [] nums , int length , int [] duplication ) { if ( nums == null || length = 0 ) return false ; for ( int i = 0 ; i length ; i ++) { while ( nums [ i ] != i ) { if ( nums [ i ] == nums [ nums [ i ]]) { duplication [ 0 ] = nums [ i ]; return true ; } swap ( nums , i , nums [ i ]); } } return false ; } private void swap ( int [] nums , int i , int j ) { int t = nums [ i ]; nums [ i ] = nums [ j ]; nums [ j ] = t ; }","title":"3. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57"},{"location":"algorithm/sword/solution/#3_1","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u4e2d\uff0c\u6bcf\u4e00\u884c\u90fd\u6309\u7167\u4ece\u5de6\u5230\u53f3\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\uff0c\u6bcf\u4e00\u5217\u90fd\u6309\u7167\u4ece\u4e0a\u5230\u4e0b\u9012\u589e\u7684\u987a\u5e8f\u6392\u5e8f\u3002\u8bf7\u5b8c\u6210\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u5224\u65ad\u6570\u7ec4\u4e2d\u662f\u5426\u542b\u6709\u8be5\u6574\u6570\u3002 Consider the following matrix: [ [1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30] ] Given target = 5, return true. Given target = 20, return false. \u89e3\u9898\u601d\u8def \u9996\u5148\u9009\u53d6\u6570\u7ec4\u4e2d\u53f3\u4e0a\u89d2\u7684\u6570\u5b57\u3002 \u5982\u679c\u8be5\u6570\u5b57\u7b49\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u67e5\u627e\u8fc7\u7a0b\u7ed3\u675f\uff1a \u5982\u679c\u8be5\u6570\u5b57\u5927\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u5217; \u5982\u679c\u8be5\u6570\u5b57\u5c0f\u4e8e\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u5254\u9664\u8fd9\u4e2a\u6570\u5b57\u6240\u5728\u7684\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8981\u67e5\u627e\u7684\u6570\u5b57\u4e0d\u5728\u6570\u7ec4\u7684\u53f3\u4e0a\u89d2\uff0c\u5219\u6bcf\uff0d\u6b21\u90fd\u5728\u6570\u7ec4\u7684\u67e5\u627e\u8303\u56f4\u4e2d\u5254\u9664\uff09\u884c\u6216\u8005\u4e00\u5217\uff0c\u8fd9\u6837\u6bcf\u4e00\u6b65\u90fd\u53ef\u4ee5\u7f29\u5c0f. \u67e5\u627e\u7684\u8303\u56f4\uff0c\u76f4\u5230\u627e\u5230\u8981\u67e5\u627e\u7684\u6570\u5b57\uff0c\u6216\u8005\u67e5\u627e\u8303\u56f4\u4e3a\u7a7a\u3002 \u65f6\u95f4\u590d\u6742\u5ea6\uff1a O(M + N) + O(1) O(M + N) + O(1) \u5f53\u524d\u5143\u7d20\u7684\u67e5\u627e\u533a\u95f4\u4e3a\u5de6\u4e0b\u89d2\u7684\u6240\u6709\u5143\u7d20\uff0c\u4f8b\u5982\u5143\u7d2012\u7684\u67e5\u627e\u533a\u95f4\u5982\u4e0b\uff1a public boolean Find ( int target , int [][] array ) { if ( array == null || array . length == 0 || array [ 0 ]. length == 0 ) return false ; int row = 0 , col = array [ 0 ]. length - 1 ; while ( row array . length col = 0 ) { int cmp = array [ row ][ col ] - target ; if ( cmp 0 ) col --; else if ( cmp 0 ) row ++; else return true ; } return false ; }","title":"3. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e"},{"location":"algorithm/sword/solution/#4","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\u201c%20\u201d\u3002\u4f8b\u5982\uff0c\u5f53\u5b57\u7b26\u4e32\u4e3a\"We Are Happy\". \u5219\u7ecf\u8fc7\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\"\u4e3aWe%20Are%20Happy\"\u3002 Note \u5728\u2f79\u7edc\u7f16\u7a0b\u4e2d\uff0c\u5982\u679cURL\u53c2\u6570\u4e2d\u542b\u6709\u7279\u6b8a\u5b57\u7b26\uff0c\u5982\u7a7a\u683c\u3001'#'\u7b49\uff0c\u53ef\u80fd\u5bfc\u81f4\u670d\u52a1\u5668\u7aef\u2f46\u6cd5\u83b7\u5f97\u6b63\u786e\u7684\u53c2\u6570\u503c\u3002\u6211\u4eec\u9700\u8981\u5c06\u8fd9\u4e9b\u7279\u6b8a\u7b26\u53f7\u8f6c\u6362\u6210\u670d\u52a1\u5668\u53ef\u4ee5\u8bc6\u522b\u7684\u5b57\u7b26\u3002\u8f6c\u6362\u7684\u89c4\u5219\u662f\u5728'%'\u540e\u2faf\u8ddf\u4e0aASCII\u7801\u7684\u4e24\u4f4d\u2f17\u516d\u8fdb\u5236\u7684\u8868\u2f70\u3002\u2f50\u5982\u7a7a\u683c\u7684ASCII\u7801\u662f32\uff0c\u5373\u2f17\u516d\u8fdb\u5236\u76840x20\uff0c\u56e0\u6b64\u7a7a\u683c\u88ab\u66ff\u6362\u6210\"%20\"\u3002\u518d\u2f50\u5982'#'\u7684ASCII\u7801\u4e3a35\uff0c\u5373\u2f17\u516d\u8fdb\u5236\u76840x23\uff0c\u5b83\u5728URL\u4e2d\u88ab\u66ff\u6362\u4e3a\"%23\"\u3002 \u89e3\u9898\u601d\u8def \u6700\u76f4\u89c2\u7684\u505a\u6cd5\u662f\u4ece\u5934\u5230\u5c3e\u626b\u63cf\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u78b0\u5230\u7a7a\u683c\u5b57\u7b26\u7684\u65f6\u5019\u8fdb\u884c\u66ff\u6362\u3002\u7531\u4e8e\u662f\u628a1\u4e2a\u5b57\u7b26\u66ff\u6362\u62103\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u5fc5\u987b\u8981\u628a\u7a7a\u683c\u540e\u9762\u7684\u5b57\u7b26\u90fd\u540e\u79fb2\u4e2a\u5b57\u8282\uff0c\u5426\u5219\u5c31\u6709\u4e24\u4e2a\u5b57\u7b26\u88ab\u8986\u76d6\u4e86\u3002 \u4ece\u524d\u5f80\u540e\u628a\u5b57\u7b26\u4e32\"We are happy.\"\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u7684\u8fc7\u7a0b\u3002\u7070\u8272\u80cc\u666f\u8868\u793a\u9700\u8981\u79fb\u52a8\u7684\u5b57\u7b26\u3002 public String replaceSpace ( StringBuffer str ) { if ( str == null || str . length () == 0 ) return ; for ( int i = 0 ; i str . length (); i ++) if ( str . charAt ( i ) == ) { str . setCharAt ( i , % ); str . insert ( i + 1 , 20 ); i += 2 ; } return str . toString (); } \u5047\u8bbe\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f n n \u3002\u5bf9\u6bcf\u4e2a\u7a7a\u683c\u5b57\u7b26\uff0c\u9700\u8981\u79fb\u52a8\u540e\u9762 O(n) O(n) \u4e2a\u5b57\u7b26\uff0c\u56e0\u6b64\u5bf9\u4e8e\u542b\u6709 n n \u4e2a\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u800c\u8a00\uff0c\u6700\u574f\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n^2) O(n^2) \u3002 \u80fd\u4e0d\u80fd\u51cf\u5c11\u79fb\u52a8\u6b21\u6570\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u628a\u4ece\u524d\u5411\u540e\u66ff\u6362\u6539\u6210\u4ece\u540e\u5411\u524d\u66ff\u6362\u3002\u53ef\u4ee5\u5148\u904d\u5386\u4e00\u6b21\u5b57\u7b26\u4e32\uff0c\u7edf\u8ba1\u51fa\u5b57\u7b26\u4e32\u4e2d\u7a7a\u683c\u7684\u7efc\u8ff0\uff0c\u8ba1\u7b97\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 = n + 2 \\times n + 2 \\times \u7a7a\u683c\u6570\u3002 \u5728\u5b57\u7b26\u4e32\u5c3e\u90e8\u586b\u5145\u4efb\u610f\u5b57\u7b26\uff0c\u4f7f\u5f97\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u7b49\u4e8e\u66ff\u6362\u4e4b\u540e\u7684\u957f\u5ea6\u3002\u56e0\u4e3a\u4e00\u4e2a\u7a7a\u683c\u8981\u66ff\u6362\u6210\u4e09\u4e2a\u5b57\u7b26\uff08%20\uff09\uff0c\u56e0\u6b64\u5f53\u904d\u5386\u5230\u4e00\u4e2a\u7a7a\u683c\u65f6\uff0c\u9700\u8981\u5728\u5c3e\u90e8\u586b\u5145\u4e24\u4e2a\u4efb\u610f\u5b57\u7b26\u3002\u51c6\u5907\u4e24\u4e2a\u6307\u9488\uff0cP1\u548cP2\uff0cP1\u6307\u5411\u539f\u59cb\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u800cP2\u6307\u5411\u66ff\u6362\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u7684\u672b\u5c3e.\u63a5\u4e0b\u6765\u6211\u4eec\u5411\u524d\u79fb\u52a8\u6307\u9488P1\uff0c\u9010\u4e2a\u628a\u5b83\u6307\u5411\u7684\u5b57\u7b26\u590d\u5236\u5230P2\u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u76f4\u5230\u78b0\u5230\u7a7a\u683c\u4e3a\u6b62\uff0c\u6b64\u65f6\u628aP1\u5411\u524d\u79fb\u52a81\u683c\uff0c\u5e76\u5728P2\u4e4b\u524d\u63d2\u5165\u5b57\u7b26\u4e32\"%20\",\u7136\u540e\u5411\u524d\u79fb\u52a83\u683c\u3002\u91cd\u590d\u6b64\u8fc7\u7a0b\uff0c\u76f4\u5230P1\u548cP2\u6307\u5411\u540c\u4e00\u4f4d\u7f6e\uff0c\u8868\u660e\u6240\u6709\u7a7a\u683c\u90fd\u5df2\u7ecf\u66ff\u6362\u5b8c\u6bd5\u3002 \u7531\u4e8e\u6240\u6709\u7684\u5b57\u7b26\u90fd\u6307\u590d\u5236/\u79fb\u52a8\u4e00\u6b21\uff0c\u56e0\u6b64\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \u3002 public String replaceSpace ( StringBuffer str ) { if ( str == null || str . length () == 0 ) return ; // \u83b7\u53d6\u7a7a\u683c\u7684\u6570\u91cf int n = str . length (); int numOfSpace = 0 ; for ( int i = 0 ; i n ; i ++) if ( str . charAt ( i ) == ) numOfSpace ++; // \u63d2\u5165\u7a7a\u683c int newStringLength = n + 2 * numOfSpace ; // \u65b0\u5b57\u7b26\u4e32\u957f\u5ea6 str . setLength ( newStringLength ); // \u6269\u5145\u5b57\u7b26\u4e32 int p1 = n - 1 , p2 = str . length () - 1 ; // p1\u6307\u5411\u65e7\u5b57\u7b26\u4e32\uff0cp2\u6307\u5411\u65b0\u5b57\u7b26\u4e32 while ( p1 != p2 ) { if ( str . charAt ( p1 ) != ) str . setCharAt ( p2 --, str . charAt ( p1 )); else { str . setCharAt ( p2 --, 0 ); str . setCharAt ( p2 --, 2 ); str . setCharAt ( p2 --, % ); } p1 --; } return str . toString (); }","title":"4. \u66ff\u6362\u7a7a\u683c"},{"location":"algorithm/sword/solution/#5","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u6253\u5370\u51fa\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u3002\u94fe\u8868\u7ed3\u70b9\u5b9a\u4e49\u5982\u4e0b\uff1a public class ListNode { int val ; ListNode next = null ; ListNode ( int val ) { this . val = val ; } } \u89e3\u9898\u601d\u8def \u6211\u4eec\u60f3\u5230\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u80af\u5b9a\u8981\u904d\u5386\u94fe\u8868\u3002\u904d\u5386\u7684\u987a\u5e8f\u662f\u4ece\u5934\u5230\u5c3e\u7684\u987a\u5e8f\uff0c\u53ef\u8f93\u51fa\u7684\u987a\u5e8f\u5374\u662f\u4ece\u5c3e\u5230\u5934\u3002\u4e5f\u5c31\u662f\u8bf4\u7b2c\u2f00\u4e2a\u904d\u5386\u5230\u7684\u7ed3\u70b9\u6700\u540e\u2f00\u4e2a\u8f93\u51fa\uff0c\u2f7d\u6700\u540e\u2f00\u4e2a\u904d\u5386\u5230\u7684\u7ed3\u70b9\u7b2c\u2f00\u4e2a\u8f93\u51fa\u3002\u8fd9\u5c31\u662f\u5178\u578b\u7684\u201c\u540e\u8fdb\u5148\u51fa\u201d\uff0c\u6211\u4eec\u53ef\u4ee5\u2f64\u6808\u5b9e\u73b0\u8fd9\u79cd\u987a\u5e8f\u3002\u6bcf\u7ecf\u8fc7\u2f00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u628a\u8be5\u7ed3\u70b9\u653e\u5230\u2f00\u4e2a\u6808\u4e2d\u3002\u5f53\u904d\u5386\u5b8c\u6574\u4e2a\u94fe\u8868\u540e\uff0c\u518d\u4ece\u6808\u9876\u5f00\u59cb\u9010\u4e2a\u8f93\u51fa\u7ed3\u70b9\u7684\u503c\uff0c\u6b64\u65f6\u8f93\u51fa\u7684\u7ed3\u70b9\u7684\u987a\u5e8f\u5df2\u7ecf\u53cd\u8f6c\u8fc7\u6765\u4e86\u3002 \u4f7f\u7528\u6808 public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { if ( listNode == null ) return new ArrayList Stack Integer stack = new Stack (); while ( listNode != null ) { stack . add ( listNode . val ); listNode = listNode . next ; } ArrayList Integer ret = new ArrayList (); while (! stack . isEmpty ()) res . add ( stack . pop ()); return res ; } \u4f7f\u7528\u9012\u5f52 \u65e2\u7136\u60f3\u5230\u4e86\u2f64\u6808\u6765\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\uff0c\u2f7d\u9012\u5f52\u5728\u672c\u8d28\u4e0a\u5c31\u662f\u2f00\u4e2a\u6808\u7ed3\u6784\uff0c \u4e8e\u662f\u5f88\u2f83\u7136\u5730\u53c8\u60f3\u5230\u4e86\u2f64\u9012\u5f52\u6765\u5b9e\u73b0\u3002\u8981\u5b9e\u73b0\u53cd\u8fc7\u6765\u8f93\u51fa\u94fe\u8868\uff0c\u6211\u4eec\u6bcf\u8bbf\u95ee\u5230\u2f00\u4e2a\u7ed3\u70b9\u7684\u65f6\u5019\uff0c\u5148\u9012\u5f52\u8f93\u51fa\u5b83\u540e\u2faf\u7684\u7ed3\u70b9\uff0c\u518d\u8f93\u51fa\u8be5\u7ed3\u70b9\u2f83\u2f9d\uff0c\u8fd9\u6837\u94fe\u8868\u7684\u8f93\u51fa\u7ed3\u679c\u5c31\u53cd\u8fc7\u6765\u4e86\u3002 public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { ArrayList Integer list = new ArrayList (); printListFromTailToHead ( list , listNode ); return list ; } private void printListFromTailToHead ( ArrayList Integer list , ListNode listNode ) { if ( listNode == null ) return ; printListFromTailToHead ( list , listNode . next ); list . add ( listNode . val ); } \u4e5f\u53ef\u4ee5\u5229\u7528 ArrayList.addAll() \uff0c\u800c\u7701\u53bb\u4e86\u8f85\u52a9\u51fd\u6570\uff1a public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { ArrayList Integer list = new ArrayList (); if ( listNode == null ) return list ; list . addAll ( printListFromTailToHead ( listNode . next )); list . add ( listNode . val ); return list ; } \u867d\u7136\u4e0a\u2faf\u7684\u57fa\u4e8e\u9012\u5f52\u7684\u4ee3\u7801\u770b\u8d77\u6765\u5f88\u7b80\u6d01\uff0c\u4f46\u6709\u4e2a\u95ee\u9898\uff1a\u5f53\u94fe\u8868\u2fae\u5e38\u957f\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u5bfc\u81f4\u51fd\u6570\u8c03\u2f64\u7684\u5c42\u7ea7\u5f88\u6df1\uff0c\u4ece\u2f7d\u6709\u53ef\u80fd\u5bfc\u81f4\u51fd\u6570\u8c03\u2f64\u6808\u6ea2\u51fa\u3002 \u663e\u5f0f\u2f64\u6808\u57fa\u4e8e\u5faa\u73af\u5b9e\u73b0\u7684\u4ee3\u7801\u7684\u9c81\u68d2\u6027\u8981\u597d\u2f00\u4e9b\u3002 \u4f7f\u7528Collections.reverse() \u987a\u5e8f\u904d\u5386\u94fe\u8868\uff0c\u83b7\u53d6\u94fe\u8868\u8282\u70b9\u7684\u503c\uff0c\u7136\u540e\u53cd\u8f6c\u3002 public ArrayList Integer printListFromTailToHead ( ListNode listNode ) { ArrayList Integer res = new ArrayList (); while ( listNode != null ) { res . add ( listNode . val ); listNode = listNode . next ; } Collections . reverse ( res ); return res ; }","title":"5. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868"},{"location":"algorithm/sword/solution/#6","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u6839\u636e\u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\uff0c\u91cd\u5efa\u51fa\u8be5\u4e8c\u53c9\u6811\u3002\u5047\u8bbe\u8f93\u5165\u7684\u524d\u5e8f\u904d\u5386\u548c\u4e2d\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u4e2d\u90fd\u4e0d\u542b\u91cd\u590d\u7684\u6570\u5b57\u3002 preorder = [3,9,20,15,7] inorder = [9,3,15,20,7] \u89e3\u9898\u601d\u8def \u89c1 LeetCode 105 .","title":"6. \u91cd\u5efa\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/solution/#8","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u5176\u4e2d\u7684\u4e00\u4e2a\u7ed3\u70b9\uff0c\u8bf7\u627e\u51fa\u4e2d\u5e8f\u904d\u5386\u987a\u5e8f\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9\u5e76\u4e14\u8fd4\u56de\u3002\u6ce8\u610f\uff0c\u6811\u4e2d\u7684\u7ed3\u70b9\u4e0d\u4ec5\u5305\u542b\u5de6\u53f3\u5b50\u7ed3\u70b9\uff0c\u540c\u65f6\u5305\u542b\u6307\u5411\u7236\u7ed3\u70b9\u7684\u6307\u9488\u3002 TreeLinkNode \u5b9a\u4e49\uff1a public class TreeLinkNode { int val ; TreeLinkNode left = null ; TreeLinkNode right = null ; TreeLinkNode next = null ; TreeLinkNode ( int val ) { this . val = val ; } } \u89e3\u9898\u601d\u8def \u2460 \u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e0d\u4e3a\u7a7a\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9\uff1b \u2461 \u5426\u5219\uff0c\u5411\u4e0a\u627e\u7b2c\u4e00\u4e2a\u5de6\u94fe\u63a5\u6307\u5411\u7684\u6811\u5305\u542b\u8be5\u8282\u70b9\u7684\u7956\u5148\u8282\u70b9\u3002 public TreeLinkNode GetNext ( TreeLinkNode root ){ if ( root == null ) return null ; // \u53f3\u5b50\u6811\u7684\u6700\u5de6\u8282\u70b9 if ( root . right != null ) { root = root . right ; while ( root . left != null ) root = root . left ; return root ; } // \u7b2c\u4e00\u4e2a\u5de6\u94fe\u63a5\u6307\u5411\u7684\u6811\u5305\u542b\u5de6\u5b50\u6811 TreeLinkNode parent = root . next ; while ( parent != null root != parent . left ) { root = parent ; parent = root . next ; } return parent ; }","title":"8. \u4e8c\u53c9\u6811\u7684\u4e0b\u4e00\u4e2a\u7ed3\u70b9"},{"location":"algorithm/sword/solution/#7","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u7528\u4e24\u4e2a\u6808\u6765\u5b9e\u73b0\u4e00\u4e2a\u961f\u5217\uff0c\u5b8c\u6210\u961f\u5217\u7684Push\u548cPop\u64cd\u4f5c\u3002 \u89e3\u9898\u601d\u8def in\u6808\u7528\u6765\u5904\u7406\u5165\u6808(push)\u64cd\u4f5c\uff0cout\u6808\u7528\u6765\u5904\u7406\u51fa\u6808(pop)\u64cd\u4f5c\u3002\u4e00\u4e2a\u5143\u7d20\u8fdb\u5165 in\u6808\u4e4b\u540e\uff0c\u51fa\u6808\u7684\u987a\u5e8f\u88ab\u53cd\u8f6c\u3002\u5f53\u5143\u7d20\u8981\u51fa\u6808\u65f6\uff0c\u9700\u8981\u5148\u8fdb\u5165out\u6808\uff0c\u6b64\u65f6\u5143\u7d20\u51fa\u6808\u987a\u5e8f\u518d\u4e00\u6b21\u88ab\u53cd\u8f6c\uff0c\u56e0\u6b64\u51fa\u6808\u987a\u5e8f\u5c31\u548c\u6700\u5f00\u59cb\u5165\u6808\u987a\u5e8f\u662f\u76f8\u540c\u7684\uff0c\u5148\u8fdb\u5165\u7684\u5143\u7d20\u5148\u9000\u51fa\uff0c\u8fd9\u5c31\u662f\u961f\u5217\u7684\u987a\u5e8f\u3002 \u5f53out\u4e2d\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u5728out\u4e2d\u7684\u6808\u9876\u5143\u7d20\u662f\u6700\u5148\u8fdb\u2f0a\u961f\u5217\u7684\u5143\u7d20\uff0c\u53ef\u4ee5\u5f39\u51fa\u3002\u5982\u679c out\u4e3a\u7a7a\u65f6\uff0c\u6211\u4eec\u628ain\u4e2d\u7684\u5143\u7d20\u9010\u4e2a\u5f39\u51fa\u5e76\u538b\u2f0aout\u3002\u7531\u4e8e\u5148\u8fdb\u2f0a\u961f\u5217\u7684\u5143\u7d20\u88ab\u538b\u5230in\u7684\u5e95\u7aef\uff0c\u7ecf\u8fc7\u5f39\u51fa\u548c\u538b\u2f0a\u4e4b\u540e\u5c31\u5904\u4e8eout\u7684\u9876\u7aef\u4e86\uff0c\u53c8\u53ef\u4ee5\u76f4\u63a5\u5f39\u51fa\u3002 public class Queue { Stack Integer in = new Stack Integer (); Stack Integer out = new Stack Integer (); public void push ( int node ) { in . push ( node ); } public int pop () throws Exception { if ( out . isEmpty ()) while (! in . isEmpty ()) out . push ( in . pop ()); if ( out . isEmpty ()) throw new Exception ( Queue is Empty! ); return out . pop (); } }","title":"7. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217"},{"location":"algorithm/sword/solution/#8_1","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u628a\u4e00\u4e2a\u6570\u7ec4\u6700\u5f00\u59cb\u7684\u82e5\u5e72\u4e2a\u5143\u7d20\u642c\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a\u6570\u7ec4\u7684\u65cb\u8f6c\u3002 \u8f93\u5165\u4e00\u4e2a\u975e\u51cf\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8f93\u51fa\u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u4f8b\u5982\u6570\u7ec4{3,4,5,1,2}\u4e3a{1,2,3,4,5}\u7684\u4e00\u4e2a\u65cb\u8f6c\uff0c\u8be5\u6570\u7ec4\u7684\u6700\u5c0f\u503c\u4e3a1\u3002 NOTE\uff1a\u7ed9\u51fa\u7684\u6240\u6709\u5143\u7d20\u90fd\u5927\u4e8e0\uff0c\u82e5\u6570\u7ec4\u5927\u5c0f\u4e3a0\uff0c\u8bf7\u8fd4\u56de0\u3002 \u89e3\u9898\u601d\u8def \u5982\u679c\u6570\u5b57\u4e0d\u91cd\u590d\uff0c\u89c1 LeetCode 153 Find Minimum in Rotated Sorted Array . \u5982\u679c\u6570\u7ec4\u5143\u7d20\u5141\u8bb8\u91cd\u590d\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u4f1a\u51fa\u73b0\u4e00\u4e2a\u7279\u6b8a\u7684\u60c5\u51b5\uff1anums [lo] [lo] = nums [mid] [mid] = nums [hi] [hi] \uff0c\u90a3\u4e48\u6b64\u65f6\u65e0\u6cd5\u786e\u5b9a\u89e3\u5728\u54ea\u4e2a\u533a\u95f4\uff0c\u9700\u8981\u5207\u6362\u5230\u987a\u5e8f\u67e5\u627e\u3002\u4f8b\u5982\u5bf9\u4e8e\u6570\u7ec4 {1,1,1,0,1}\uff0c lo\u3001mid lo\u3001mid \u548c hi hi \u6307\u5411\u7684\u6570\u90fd\u4e3a1\uff0c\u6b64\u65f6\u65e0\u6cd5\u77e5\u9053\u6700\u5c0f\u6570\u5b570\u5728\u54ea\u4e2a\u533a\u95f4\u3002 public int minNumberInRotateArray ( int [] nums ) { if ( nums == null || nums . length == 0 ) return 0 ; int lo = 0 , hi = nums . length - 1 , mid ; while ( lo hi ) { // \u53d6\u4e2d\u95f4\u7684\u4f4d\u7f6e mid = lo + ( hi - lo ) / 2 ; // \u5982\u679c\u4e09\u4e2a\u6570\u90fd\u76f8\u7b49\uff0c\u5219\u9700\u8981\u8fdb\u884c\u987a\u5e8f\u5904\u7406\uff0c\u4ece\u5934\u5230\u5c3e\u627e\u6700\u5c0f\u7684\u503c if ( nums [ mid ] == nums [ hi ] nums [ mid ] == nums [ lo ]) return findMin ( nums , lo , hi ); // \u5982\u679c\u4e2d\u95f4\u4f4d\u7f6e\u5bf9\u5e94\u7684\u503c\u5728\u540e\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u90e8\u5206\uff0c\u5c06hi\u8bbe\u7f6e\u4e3a\u65b0\u7684\u5904\u7406\u4f4d\u7f6e else if ( nums [ mid ] nums [ hi ]) lo = mid + 1 ; else hi = mid ; // \u4e0d\u662f hi = mid - 1; } return nums [ lo ]; } // \u627e\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c private int findMin ( int [] nums , int lo , int hi ) { int min = nums [ lo ]; for ( int i = lo + 1 ; i = hi ; i ++) if ( nums [ i ] min ) min = nums [ i ]; return min ; }","title":"8. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57"},{"location":"algorithm/sword/solution/#9","text":"","title":"9 \u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"algorithm/sword/solution/#_1","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u6c42\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u7b2c n n \u9879\uff0c n = 39 n <= 39 \u3002 \u89e3\u9898\u601d\u8def \u7531\u4e8e\u6590\u6ce2\u90a3\u5951\u6570\u5217\u53ef\u4ee5\u7528\u9012\u5f52\u51fd\u6570\u8868\u793a\uff0c\u6700\u76f4\u63a5\u7684\u65b9\u6cd5\u662f\u7528\u9012\u5f52\u6765\u89e3\u51b3\u3002 public int Fibonacci ( int n ) { if ( n = 0 ) return 0 ; if ( n == 1 ) return 1 ; return Fibonacci ( n - 1 ) + Fibonacci ( n - 2 ); } \u4f46\u662f\u5982\u679c\u4f7f\u7528\u9012\u5f52\u6c42\u89e3\uff0c\u4f1a\u91cd\u590d\u8ba1\u7b97\u4e00\u4e9b\u5b50\u95ee\u9898\u3002\u4f8b\u5982\uff0c\u8ba1\u7b97 f(10) f(10) \u9700\u8981\u8ba1\u7b97 f(9) f(9) \u548c f(8) f(8) \uff0c\u8ba1\u7b97 f(9) f(9) \u9700\u8981\u8ba1\u7b97 f(8) f(8) \u548c f(7) f(7) \uff0c\u53ef\u4ee5\u770b\u5230 f(8) f(8) \u88ab\u91cd\u590d\u8ba1\u7b97\u4e86\u3002\u4e8b\u5b9e\u4e0a\uff0c\u2f64\u9012\u5f52\u2f45\u6cd5\u8ba1\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4ee5 n n \u7684\u6307\u6570\u7684\u2f45\u5f0f\u9012\u589e\u7684\u3002 \u4f7f\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\u628a\u5b50\u95ee\u9898\u7684\u89e3\u7f13\u5b58\u8d77\u6765\uff0c\u4ece\u800c\u907f\u514d\u91cd\u590d\u6c42\u89e3\u5b50\u95ee\u9898\u3002 public int Fibonacci ( int n ) { if ( n = 1 ) return n ; int [] fib = new int [ n + 1 ]; fib [ 1 ] = 1 ; for ( int i = 2 ; i = n ; i ++) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ]; return fib [ n ]; } \u8003\u8651\u5230\u7b2c i i \u9879\u53ea\u4e0e\u7b2c i-1 i-1 \u548c\u7b2c i-2 i-2 \u9879\u6709\u5173\uff0c\u56e0\u6b64\u53ea\u9700\u8981\u5b58\u50a8\u524d\u4e24\u9879\u7684\u503c\u5c31\u80fd\u6c42\u89e3\u7b2c i i \u9879\uff0c\u4ece\u800c\u5c06\u7a7a\u95f4\u590d\u6742\u5ea6\u7531 O(N) O(N) \u964d\u4f4e\u4e3a O(1) O(1) \u3002 public int Fibonacci ( int n ) { if ( n 0 ) throw new IllegalArgumentException ( n must be a non-negative integer ); if ( n 2 ) return n == 0 ? 0 : 1 ; int prev = 1 , before_prev = 0 , cur = 0 ; for ( int i = 2 ; i = n ; i ++) { cur = prev + before_prev ; before_prev = prev ; prev = cur ; } return cur ; } \u7531\u4e8e\u5f85\u6c42\u89e3\u7684 n n \u5c0f\u4e8e40\uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u5c06\u524d40\u9879\u7684\u7ed3\u679c\u5148\u8fdb\u884c\u8ba1\u7b97\uff0c\u4e4b\u540e\u5c31\u80fd\u4ee5 O(1) O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5f97\u5230\u7b2c n n \u9879\u7684\u503c\u4e86\u3002 public class Solution { private int [] fib = new int [ 40 ]; public Solution () { fib [ 1 ] = 1 ; fib [ 2 ] = 2 ; for ( int i = 2 ; i fib . length ; i ++) fib [ i ] = fib [ i - 1 ] + fib [ i - 2 ]; } public int Fibonacci ( int n ) { return fib [ n ]; } }","title":"\u6590\u6ce2\u90a3\u5951\u6570\u5217"},{"location":"algorithm/sword/solution/#_2","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a 1 \u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a 2 \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 \u89e3\u9898\u601d\u8def \u9898\u76ee\u7c7b\u4f3c\u4e8e LeetCode 70 climbing stairs \u3002 public int JumpFloor ( int n ) { if ( n = 2 ) return n ; int last = 1 , secondLast = 2 ; int result = 1 ; for ( int i = 2 ; i n ; i ++) { result = secondLast + last ; secondLast = last ; last = result ; } return result ; }","title":"\u8df3\u53f0\u9636"},{"location":"algorithm/sword/solution/#_3","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u6211\u4eec\u53ef\u4ee5\u7528 2\\times 1 2\\times 1 \u7684\u5c0f\u77e9\u5f62\u6a2a\u7740\u6216\u8005\u7ad6\u7740\u53bb\u8986\u76d6\u66f4\u5927\u7684\u77e9\u5f62\u3002\u8bf7\u95ee\u7528 n n \u4e2a 2\\times 1 2\\times 1 \u7684\u5c0f\u77e9\u5f62\u65e0\u91cd\u53e0\u5730\u8986\u76d6\u4e00\u4e2a 2\\times n 2\\times n \u7684\u5927\u77e9\u5f62\uff0c\u603b\u5171\u6709\u591a\u5c11\u79cd\u65b9\u6cd5\uff1f \u89e3\u9898\u601d\u8def \u6211\u4eec\u5148\u628a 2\u00d78 2\u00d78 \u7684\u8986\u76d6\u2f45\u6cd5\u8bb0\u4e3a f(8 f(8 \u3002\u2f64\u7b2c\u2f00\u4e2a 1\u00d72 1\u00d72 \u2f29\u77e9\u5f62\u53bb\u8986\u76d6\u2f24\u77e9\u5f62\u7684\u6700\u5de6\u8fb9\u65f6\u6709\u4e24\u4e2a\u9009\u62e9\uff0c\u7ad6\u7740\u653e\u6216\u8005\u6a2a\u7740\u653e\u3002\u5f53\u7ad6\u7740\u653e\u7684\u65f6\u5019\uff0c\u53f3\u8fb9\u8fd8\u5269\u4e0b 2\u00d77 2\u00d77 \u7684\u533a\u57df\uff0c\u8fd9\u79cd\u60c5\u5f62\u4e0b\u7684\u8986\u76d6\u2f45\u6cd5\u8bb0\u4e3a f(7) f(7) \u3002\u63a5\u4e0b\u6765\u8003\u8651\u6a2a\u7740\u653e\u7684\u60c5\u51b5\u3002\u5f53 1\u00d72 1\u00d72 \u7684\u2f29\u77e9\u5f62\u6a2a\u7740\u653e\u5728\u5de6\u4e0a\u2f93\u7684\u65f6\u5019\uff0c\u5de6\u4e0b\u2f93\u5fc5\u987b\u548c\u6a2a\u7740\u653e\u2f00\u4e2a 1\u00d72 1\u00d72 \u7684\u2f29\u77e9\u5f62\uff0c\u2f7d\u5728\u53f3\u8fb9\u8fd8\u8fd8\u5269\u4e0b 2\u00d76 2\u00d76 \u7684\u533a\u57df\uff0c\u8fd9\u79cd\u60c5\u5f62\u4e0b\u7684\u8986\u76d6\u2f45\u6cd5\u8bb0\u4e3a f(6) f(6) \uff0c\u56e0\u6b64 f(8) f(8) = f(7)\uff0bf(6) f(7)\uff0bf(6) \u3002\u6b64\u65f6\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff0c\u8fd9\u4ecd\u7136\u662f\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002","title":"\u77e9\u5f62\u8986\u76d6"},{"location":"algorithm/sword/solution/#_4","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u53ea\u9752\u86d9\u4e00\u6b21\u53ef\u4ee5\u8df3\u4e0a1\u7ea7\u53f0\u9636\uff0c\u4e5f\u53ef\u4ee5\u8df3\u4e0a2\u7ea7... \u5b83\u4e5f\u53ef\u4ee5\u8df3\u4e0a n n \u7ea7\u3002\u6c42\u8be5\u9752\u86d9\u8df3\u4e0a\u4e00\u4e2a n n \u7ea7\u7684\u53f0\u9636\u603b\u5171\u6709\u591a\u5c11\u79cd\u8df3\u6cd5\u3002 n n \u4e2a\u53f0\u9636\u603b\u5171\u6709 2^{n-1} 2^{n-1} \u79cd\u8df3\u6cd5\u3002\u5206\u6790\u5982\u4e0b: f(1) = 1 f(1) = 1 f(2) = f(2-1) + f(2-2) f(2) = f(2-1) + f(2-2) f(3) = f(3-1) + f(3-2) + f(3-3) f(3) = f(3-1) + f(3-2) + f(3-3) ... f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(n-(n-1)) + f(n-n) f(n) = f(n-1) + f(n-2) + f(n-3) + ... + f(n-(n-1)) + f(n-n) public int JumpFloorII ( int target ) { if ( target = 0 ) return 0 ; int [] dp = new int [ target + 1 ]; dp [ 0 ] = 0 ; for ( int i = 1 ; i = target ; i ++) { for ( int j = 0 ; j i ; j ++) dp [ i ] += dp [ j ]; dp [ i ] += 1 ; } return dp [ target ]; }","title":"\u53d8\u6001\u8df3\u53f0\u9636"},{"location":"algorithm/sword/solution/#10-1","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\uff0c\u8f93\u51fa\u8be5\u6570\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d1\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u8d1f\u6570\u7528\u8865\u7801\u8868\u793a\u3002 \u89e3\u9898\u601d\u8def \u89c1 LeetCode 191 Number of 1 bits \u3002","title":"10. \u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570"},{"location":"algorithm/sword/solution/#11","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a double \u7c7b\u578b\u7684\u6d6e\u70b9\u6570 base \u548c int \u7c7b\u578b\u7684\u6574\u6570 exponent\uff0c\u6c42 base \u7684 exponent \u6b21\u65b9\u3002 \u89e3\u9898\u601d\u8def \u89c1 LeetCode 50 Pow(x,n)","title":"11. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9"},{"location":"algorithm/sword/solution/#12-1-n","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u6570\u5b57 n n \uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece1\u5230\u6700\u5927\u7684 n n \u4f4d\u5341\u8fdb\u5236\u6570\u3002\u6bd4\u5982\u8f93\u51653\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u76843\u4f4d\u6570\u5373999\u3002 \u89e3\u9898\u601d\u8def \u7531\u4e8e n \u53ef\u80fd\u4f1a\u975e\u5e38\u5927\uff0c\u56e0\u6b64\u4e0d\u80fd\u76f4\u63a5\u7528 int \u8868\u793a\u6570\u5b57\uff0c\u800c\u662f\u7528 char \u6570\u7ec4\u8fdb\u884c\u5b58\u50a8\u3002 \u4f7f\u7528\u56de\u6eaf\u6cd5\u5f97\u5230\u6240\u6709\u7684\u6570\u3002 public void print1ToMaxOfNDigits ( int n ) { if ( n = 0 ) return ; char [] number = new char [ n ]; print1ToMaxOfNDigits ( number , 0 ); } private void print1ToMaxOfNDigits ( char [] number , int digit ) { if ( digit == number . length ) { printNumber ( number ); return ; } for ( int i = 0 ; i 10 ; i ++) { number [ digit ] = ( char ) ( i + 0 ); print1ToMaxOfNDigits ( number , digit + 1 ); } } private void printNumber ( char [] number ) { int index = 0 ; while ( index number . length number [ index ] == 0 ) index ++; while ( index number . length ) System . out . print ( number [ index ++]); System . out . println (); }","title":"12. \u6253\u5370\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u6570"},{"location":"algorithm/sword/solution/#12","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u5224\u65ad\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\u662f\u5426\u5b58\u5728\u4e00\u6761\u5305\u542b\u67d0\u5b57\u7b26\u4e32\u6240\u6709\u5b57\u7b26\u7684\u8def\u5f84\u3002\u8def\u5f84\u53ef\u4ee5\u4ece\u77e9\u9635\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u683c\u5b50\u5f00\u59cb\uff0c\u6bcf\u4e00\u6b65\u53ef\u4ee5\u5728\u77e9\u9635\u4e2d\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u4e0a\uff0c\u5411\u4e0b\u79fb\u52a8\u4e00\u4e2a\u683c\u5b50\u3002\u5982\u679c\u4e00\u6761\u8def\u5f84\u7ecf\u8fc7\u4e86\u77e9\u9635\u4e2d\u7684\u67d0\u4e00\u4e2a\u683c\u5b50\uff0c\u5219\u8be5\u8def\u5f84\u4e0d\u80fd\u518d\u8fdb\u5165\u8be5\u683c\u5b50\u3002 \u4f8b\u5982\u4e0b\u9762\u7684\u77e9\u9635\u5305\u542b\u4e86\u4e00\u6761 bfce \u8def\u5f84\u3002 \u89e3\u9898\u601d\u8def private final static int [][] next = {{ 0 , - 1 }, { 0 , 1 }, {- 1 , 0 }, { 1 , 0 }}; private int rows ; private int cols ; public boolean hasPath ( char [] array , int rows , int cols , char [] str ) { if ( rows == 0 || cols == 0 ) return false ; this . rows = rows ; this . cols = cols ; boolean [][] marked = new boolean [ rows ][ cols ]; char [][] matrix = buildMatrix ( array ); for ( int i = 0 ; i rows ; i ++) for ( int j = 0 ; j cols ; j ++) if ( backtracking ( matrix , str , marked , 0 , i , j )) return true ; return false ; } private boolean backtracking ( char [][] matrix , char [] str , boolean [][] marked , int pathLen , int r , int c ) { if ( pathLen == str . length ) return true ; if ( r 0 || r = rows || c 0 || c = cols || matrix [ r ][ c ] != str [ pathLen ] || marked [ r ][ c ]) return false ; marked [ r ][ c ] = true ; for ( int [] n : next ) if ( backtracking ( matrix , str , marked , pathLen + 1 , r + n [ 0 ], c + n [ 1 ])) return true ; marked [ r ][ c ] = false ; return false ; } private char [][] buildMatrix ( char [] array ) { char [][] matrix = new char [ rows ][ cols ]; for ( int i = 0 , idx = 0 ; i rows ; i ++) for ( int j = 0 ; j cols ; j ++) matrix [ i ][ j ] = array [ idx ++]; return matrix ; }","title":"12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84"},{"location":"algorithm/sword/solution/#13","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5730\u4e0a\u6709\u4e00\u4e2a m \u884c\u548c n \u5217\u7684\u65b9\u683c\u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 (0, 0) \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u4e00\u6b21\u53ea\u80fd\u5411\u5de6\u53f3\u4e0a\u4e0b\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u4e00\u683c\uff0c\u4f46\u662f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8e k \u7684\u683c\u5b50\u3002 \u4f8b\u5982\uff0c\u5f53 k \u4e3a 18 \u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c (35,37)\uff0c\u56e0\u4e3a 3+5+3+7=18\u3002\u4f46\u662f\uff0c\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c (35,38)\uff0c\u56e0\u4e3a 3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u8fbe\u5230\u591a\u5c11\u4e2a\u683c\u5b50\uff1f \u89e3\u9898\u601d\u8def private static final int [][] next = {{ 0 , - 1 }, { 0 , 1 }, {- 1 , 0 }, { 1 , 0 }}; private int cnt = 0 ; private int rows ; private int cols ; private int threshold ; private int [][] digitSum ; public int movingCount ( int threshold , int rows , int cols ) { this . rows = rows ; this . cols = cols ; this . threshold = threshold ; initDigitSum (); boolean [][] marked = new boolean [ rows ][ cols ]; dfs ( marked , 0 , 0 ); return cnt ; } private void dfs ( boolean [][] marked , int r , int c ) { if ( r 0 || r = rows || c 0 || c = cols || marked [ r ][ c ]) return ; marked [ r ][ c ] = true ; if ( this . digitSum [ r ][ c ] this . threshold ) return ; cnt ++; for ( int [] n : next ) dfs ( marked , r + n [ 0 ], c + n [ 1 ]); } private void initDigitSum () { int [] digitSumOne = new int [ Math . max ( rows , cols )]; for ( int i = 0 ; i digitSumOne . length ; i ++) { int n = i ; while ( n 0 ) { digitSumOne [ i ] += n % 10 ; n /= 10 ; } } this . digitSum = new int [ rows ][ cols ]; for ( int i = 0 ; i this . rows ; i ++) for ( int j = 0 ; j this . cols ; j ++) this . digitSum [ i ][ j ] = digitSumOne [ i ] + digitSumOne [ j ]; }","title":"13. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4"},{"location":"algorithm/sword/solution/#14","text":"Leetcode \u9898\u76ee\u63cf\u8ff0 \u628a\u4e00\u6839\u7ef3\u5b50\u526a\u6210\u591a\u6bb5\uff0c\u5e76\u4e14\u4f7f\u5f97\u6bcf\u6bb5\u7684\u957f\u5ea6\u4e58\u79ef\u6700\u5927\u3002 n = 2 return 1 (2 = 1 + 1) n = 10 return 36 (10 = 3 + 3 + 4) \u89e3\u9898\u601d\u8def","title":"14. \u526a\u7ef3\u5b50"},{"location":"algorithm/sword/solution/#_5","text":"\u5c3d\u53ef\u80fd\u591a\u526a\u957f\u5ea6\u4e3a 3 \u7684\u7ef3\u5b50\uff0c\u5e76\u4e14\u4e0d\u5141\u8bb8\u6709\u957f\u5ea6\u4e3a 1 \u7684\u7ef3\u5b50\u51fa\u73b0\u3002\u5982\u679c\u51fa\u73b0\u4e86\uff0c\u5c31\u4ece\u5df2\u7ecf\u5207\u597d\u957f\u5ea6\u4e3a 3 \u7684\u7ef3\u5b50\u4e2d\u62ff\u51fa\u4e00\u6bb5\u4e0e\u957f\u5ea6\u4e3a 1 \u7684\u7ef3\u5b50\u91cd\u65b0\u7ec4\u5408\uff0c\u628a\u5b83\u4eec\u5207\u6210\u4e24\u6bb5\u957f\u5ea6\u4e3a 2 \u7684\u7ef3\u5b50\u3002 \u8bc1\u660e\uff1a\u5f53 n = 5 \u65f6\uff0c3(n - 3) - 2(n - 2) = n - 5 = 0\u3002\u56e0\u6b64\u628a\u957f\u5ea6\u5927\u4e8e 5 \u7684\u7ef3\u5b50\u5207\u6210\u4e24\u6bb5\uff0c\u4ee4\u5176\u4e2d\u4e00\u6bb5\u957f\u5ea6\u4e3a 3 \u53ef\u4ee5\u4f7f\u5f97\u4e24\u6bb5\u7684\u4e58\u79ef\u6700\u5927\u3002 public int integerBreak ( int n ) { if ( n 2 ) return 0 ; if ( n == 2 ) return 1 ; if ( n == 3 ) return 2 ; int timesOf3 = n / 3 ; if ( n - timesOf3 * 3 == 1 ) timesOf3 --; int timesOf2 = ( n - timesOf3 * 3 ) / 2 ; return ( int ) ( Math . pow ( 3 , timesOf3 )) * ( int ) ( Math . pow ( 2 , timesOf2 )); }","title":"\u8d2a\u5fc3"},{"location":"algorithm/sword/solution/#_6","text":"public int integerBreak ( int n ) { int [] dp = new int [ n + 1 ]; dp [ 1 ] = 1 ; for ( int i = 2 ; i = n ; i ++) for ( int j = 1 ; j i ; j ++) dp [ i ] = Math . max ( dp [ i ], Math . max ( j * ( i - j ), dp [ j ] * ( i - j ))); return dp [ n ]; }","title":"\u52a8\u6001\u89c4\u5212"},{"location":"algorithm/sword/solution/#181-o1","text":"\u89e3\u9898\u601d\u8def \u2460 \u5982\u679c\u8be5\u8282\u70b9\u4e0d\u662f\u5c3e\u8282\u70b9\uff0c\u90a3\u4e48\u53ef\u4ee5\u76f4\u63a5\u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u8d4b\u7ed9\u8be5\u8282\u70b9\uff0c\u7136\u540e\u4ee4\u8be5\u8282\u70b9\u6307\u5411\u4e0b\u4e0b\u4e2a\u8282\u70b9\uff0c\u518d\u5220\u9664\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002 \u2461 \u5426\u5219\uff0c\u5c31\u9700\u8981\u5148\u904d\u5386\u94fe\u8868\uff0c\u627e\u5230\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\uff0c\u7136\u540e\u8ba9\u524d\u4e00\u4e2a\u8282\u70b9\u6307\u5411 null\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\u3002 \u7efc\u4e0a\uff0c\u5982\u679c\u8fdb\u884c N \u6b21\u64cd\u4f5c\uff0c\u90a3\u4e48\u5927\u7ea6\u9700\u8981\u64cd\u4f5c\u8282\u70b9\u7684\u6b21\u6570\u4e3a N-1+N=2N-1\uff0c\u5176\u4e2d N-1 \u8868\u793a N-1 \u4e2a\u4e0d\u662f\u5c3e\u8282\u70b9\u7684\u6bcf\u4e2a\u8282\u70b9\u4ee5 O(1) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u64cd\u4f5c\u8282\u70b9\u7684\u603b\u6b21\u6570\uff0cN \u8868\u793a 1 \u4e2a\u5c3e\u8282\u70b9\u4ee5 O(N) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u64cd\u4f5c\u8282\u70b9\u7684\u603b\u6b21\u6570\u3002(2N-1)/N \\~ 2\uff0c\u56e0\u6b64\u8be5\u7b97\u6cd5\u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(1)\u3002 public ListNode deleteNode ( ListNode head , ListNode tobeDelete ) { if ( head == null || tobeDelete == null ) return null ; if ( tobeDelete . next != null ) { // \u8981\u5220\u9664\u7684\u8282\u70b9\u4e0d\u662f\u5c3e\u8282\u70b9 ListNode next = tobeDelete . next ; tobeDelete . val = next . val ; tobeDelete . next = next . next ; } else { ListNode cur = head ; while ( cur . next != tobeDelete ) cur = cur . next ; cur . next = null ; } return head ; }","title":"18.1 \u5728 O(1) \u65f6\u95f4\u5185\u5220\u9664\u94fe\u8868\u8282\u70b9"},{"location":"algorithm/sword/solution/#182","text":"NowCoder \u9898\u76ee\u63cf\u8ff0","title":"18.2 \u5220\u9664\u94fe\u8868\u4e2d\u91cd\u590d\u7684\u7ed3\u70b9"},{"location":"algorithm/sword/solution/#_7","text":"public ListNode deleteDuplication ( ListNode pHead ) { if ( pHead == null || pHead . next == null ) return pHead ; ListNode next = pHead . next ; if ( pHead . val == next . val ) { while ( next != null pHead . val == next . val ) next = next . next ; return deleteDuplication ( next ); } else { pHead . next = deleteDuplication ( pHead . next ); return pHead ; } }","title":"\u89e3\u9898\u63cf\u8ff0"},{"location":"algorithm/sword/solution/#19","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5339\u914d\u5305\u62ec '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u3002\u6a21\u5f0f\u4e2d\u7684\u5b57\u7b26 '.' \u8868\u793a\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\uff0c\u800c '*' \u8868\u793a\u5b83\u524d\u9762\u7684\u5b57\u7b26\u53ef\u4ee5\u51fa\u73b0\u4efb\u610f\u6b21\uff08\u5305\u542b 0 \u6b21\uff09\u3002 \u5728\u672c\u9898\u4e2d\uff0c\u5339\u914d\u662f\u6307\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b57\u7b26\u5339\u914d\u6574\u4e2a\u6a21\u5f0f\u3002\u4f8b\u5982\uff0c\u5b57\u7b26\u4e32 \"aaa\" \u4e0e\u6a21\u5f0f \"a.a\" \u548c \"ab*ac*a\" \u5339\u914d\uff0c\u4f46\u662f\u4e0e \"aa.a\" \u548c \"ab*a\" \u5747\u4e0d\u5339\u914d\u3002 \u89e3\u9898\u601d\u8def \u5e94\u8be5\u6ce8\u610f\u5230\uff0c'.' \u662f\u7528\u6765\u5f53\u505a\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\uff0c\u800c '*' \u662f\u7528\u6765\u91cd\u590d\u524d\u9762\u7684\u5b57\u7b26\u3002\u8fd9\u4e24\u4e2a\u7684\u4f5c\u7528\u4e0d\u540c\uff0c\u4e0d\u80fd\u628a '.' \u7684\u4f5c\u7528\u548c '*' \u8fdb\u884c\u7c7b\u6bd4\uff0c\u4ece\u800c\u628a\u5b83\u5f53\u6210\u91cd\u590d\u524d\u9762\u5b57\u7b26\u4e00\u6b21\u3002 public boolean match ( char [] str , char [] pattern ) { int m = str . length , n = pattern . length ; boolean [][] dp = new boolean [ m + 1 ][ n + 1 ]; dp [ 0 ][ 0 ] = true ; for ( int i = 1 ; i = n ; i ++) if ( pattern [ i - 1 ] == * ) dp [ 0 ][ i ] = dp [ 0 ][ i - 2 ]; for ( int i = 1 ; i = m ; i ++) for ( int j = 1 ; j = n ; j ++) if ( str [ i - 1 ] == pattern [ j - 1 ] || pattern [ j - 1 ] == . ) dp [ i ][ j ] = dp [ i - 1 ][ j - 1 ]; else if ( pattern [ j - 1 ] == * ) if ( pattern [ j - 2 ] == str [ i - 1 ] || pattern [ j - 2 ] == . ) { dp [ i ][ j ] |= dp [ i ][ j - 1 ]; // a* counts as single a dp [ i ][ j ] |= dp [ i - 1 ][ j ]; // a* counts as multiple a dp [ i ][ j ] |= dp [ i ][ j - 2 ]; // a* counts as empty } else dp [ i ][ j ] = dp [ i ][ j - 2 ]; // a* only counts as empty return dp [ m ][ n ]; }","title":"19. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"algorithm/sword/solution/#20","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 true +100 5e2 -123 3.1416 -1E-16 false 12e 1a3.14 1.2.3 +-5 12e+4.3 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fdb\u884c\u5339\u914d\u3002 Html [] \uff1a \u5b57\u7b26\u96c6\u5408 () \uff1a \u5206\u7ec4 ? \uff1a \u91cd\u590d 0 ~ 1 + \uff1a \u91cd\u590d 1 ~ n * \uff1a \u91cd\u590d 0 ~ n . \uff1a \u4efb\u610f\u5b57\u7b26 \\\\. \uff1a \u8f6c\u4e49\u540e\u7684 . \\\\d \uff1a \u6570\u5b57 Java public boolean isNumeric ( char [] str ) { if ( str == null || str . length == 0 ) return false ; return new String ( str ). matches ( [+-]?\\\\d*(\\\\.\\\\d+)?([eE][+-]?\\\\d+)? ); }","title":"20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32"},{"location":"algorithm/sword/solution/#21","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u9700\u8981\u4fdd\u8bc1\u5947\u6570\u548c\u5947\u6570\uff0c\u5076\u6570\u548c\u5076\u6570\u4e4b\u95f4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8\uff0c\u8fd9\u548c\u4e66\u672c\u4e0d\u592a\u4e00\u6837\u3002 \u89e3\u9898\u601d\u8def public void reOrderArray ( int [] nums ) { // \u5947\u6570\u4e2a\u6570 int oddCnt = 0 ; for ( int val : nums ) if ( val % 2 == 1 ) oddCnt ++; int [] copy = nums . clone (); int i = 0 , j = oddCnt ; for ( int num : copy ) { if ( num % 2 == 1 ) nums [ i ++] = num ; else nums [ j ++] = num ; } }","title":"21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762"},{"location":"algorithm/sword/solution/#22-k","text":"NowCoder \u89e3\u9898\u601d\u8def \u8bbe\u94fe\u8868\u7684\u957f\u5ea6\u4e3a N\u3002\u8bbe\u4e24\u4e2a\u6307\u9488 P1 \u548c P2\uff0c\u5148\u8ba9 P1 \u79fb\u52a8 K \u4e2a\u8282\u70b9\uff0c\u5219\u8fd8\u6709 N - K \u4e2a\u8282\u70b9\u53ef\u4ee5\u79fb\u52a8\u3002\u6b64\u65f6\u8ba9 P1 \u548c P2 \u540c\u65f6\u79fb\u52a8\uff0c\u53ef\u4ee5\u77e5\u9053\u5f53 P1 \u79fb\u52a8\u5230\u94fe\u8868\u7ed3\u5c3e\u65f6\uff0cP2 \u79fb\u52a8\u5230 N - K \u4e2a\u8282\u70b9\u5904\uff0c\u8be5\u4f4d\u7f6e\u5c31\u662f\u5012\u6570\u7b2c K \u4e2a\u8282\u70b9\u3002 public ListNode FindKthToTail ( ListNode head , int k ) { if ( head == null ) return null ; ListNode P1 = head ; while ( P1 != null k -- 0 ) P1 = P1 . next ; if ( k 0 ) return null ; ListNode P2 = head ; while ( P1 != null ) { P1 = P1 . next ; P2 = P2 . next ; } return P2 ; }","title":"22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2c K \u4e2a\u7ed3\u70b9"},{"location":"algorithm/sword/solution/#23","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u94fe\u8868\u4e2d\u5305\u542b\u73af\uff0c\u8bf7\u627e\u51fa\u8be5\u94fe\u8868\u7684\u73af\u7684\u5165\u53e3\u7ed3\u70b9\u3002\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488 fast \u6bcf\u6b21\u79fb\u52a8\u4e24\u4e2a\u8282\u70b9\uff0c\u4e00\u4e2a\u6307\u9488 slow \u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\u3002\u56e0\u4e3a\u5b58\u5728\u73af\uff0c\u6240\u4ee5\u4e24\u4e2a\u6307\u9488\u5fc5\u5b9a\u76f8\u9047\u5728\u73af\u4e2d\u7684\u67d0\u4e2a\u8282\u70b9\u4e0a\u3002\u5047\u8bbe\u76f8\u9047\u70b9\u5728\u4e0b\u56fe\u7684 y6 \u4f4d\u7f6e\uff0c\u6b64\u65f6 fast \u79fb\u52a8\u7684\u8282\u70b9\u6570\u4e3a x+2y+z\uff0cslow \u4e3a x+y\uff0c\u7531\u4e8e fast \u901f\u5ea6\u6bd4 slow \u5feb\u4e00\u500d\uff0c\u56e0\u6b64 x+2y+z=2(x+y)\uff0c\u5f97\u5230 x=z\u3002 \u5728\u76f8\u9047\u70b9\uff0cslow \u8981\u5230\u73af\u7684\u5165\u53e3\u70b9\u8fd8\u9700\u8981\u79fb\u52a8 z \u4e2a\u8282\u70b9\uff0c\u5982\u679c\u8ba9 fast \u91cd\u65b0\u4ece\u5934\u5f00\u59cb\u79fb\u52a8\uff0c\u5e76\u4e14\u901f\u5ea6\u53d8\u4e3a\u6bcf\u6b21\u79fb\u52a8\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5b83\u5230\u73af\u5165\u53e3\u70b9\u8fd8\u9700\u8981\u79fb\u52a8 x \u4e2a\u8282\u70b9\u3002\u5728\u4e0a\u9762\u5df2\u7ecf\u63a8\u5bfc\u51fa x=z\uff0c\u56e0\u6b64 fast \u548c slow \u5c06\u5728\u73af\u5165\u53e3\u70b9\u76f8\u9047\u3002 public ListNode EntryNodeOfLoop ( ListNode pHead ) { if ( pHead == null || pHead . next == null ) return null ; ListNode slow = pHead , fast = pHead ; do { fast = fast . next . next ; slow = slow . next ; } while ( slow != fast ); fast = pHead ; while ( slow != fast ) { slow = slow . next ; fast = fast . next ; } return slow ; }","title":"23. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u7ed3\u70b9"},{"location":"algorithm/sword/solution/#24","text":"NowCoder \u89e3\u9898\u601d\u8def","title":"24. \u53cd\u8f6c\u94fe\u8868"},{"location":"algorithm/sword/solution/#_8","text":"public ListNode ReverseList ( ListNode head ) { if ( head == null || head . next == null ) return head ; ListNode next = head . next ; head . next = null ; ListNode newHead = ReverseList ( next ); next . next = head ; return newHead ; }","title":"\u9012\u5f52"},{"location":"algorithm/sword/solution/#_9","text":"public ListNode ReverseList ( ListNode head ) { ListNode newList = new ListNode (- 1 ); while ( head != null ) { ListNode next = head . next ; head . next = newList . next ; newList . next = head ; head = next ; } return newList . next ; }","title":"\u8fed\u4ee3"},{"location":"algorithm/sword/solution/#25","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def","title":"25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868"},{"location":"algorithm/sword/solution/#_10","text":"public ListNode Merge ( ListNode list1 , ListNode list2 ) { if ( list1 == null ) return list2 ; if ( list2 == null ) return list1 ; if ( list1 . val = list2 . val ) { list1 . next = Merge ( list1 . next , list2 ); return list1 ; } else { list2 . next = Merge ( list1 , list2 . next ); return list2 ; } }","title":"\u9012\u5f52"},{"location":"algorithm/sword/solution/#_11","text":"public ListNode Merge ( ListNode list1 , ListNode list2 ) { ListNode head = new ListNode (- 1 ); ListNode cur = head ; while ( list1 != null list2 != null ) { if ( list1 . val = list2 . val ) { cur . next = list1 ; list1 = list1 . next ; } else { cur . next = list2 ; list2 = list2 . next ; } cur = cur . next ; } if ( list1 != null ) cur . next = list1 ; if ( list2 != null ) cur . next = list2 ; return head . next ; }","title":"\u8fed\u4ee3"},{"location":"algorithm/sword/solution/#26","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def public boolean HasSubtree ( TreeNode root1 , TreeNode root2 ) { if ( root1 == null || root2 == null ) return false ; return isSubtreeWithRoot ( root1 , root2 ) || HasSubtree ( root1 . left , root2 ) || HasSubtree ( root1 . right , root2 ); } private boolean isSubtreeWithRoot ( TreeNode root1 , TreeNode root2 ) { if ( root2 == null ) return true ; if ( root1 == null ) return false ; if ( root1 . val != root2 . val ) return false ; return isSubtreeWithRoot ( root1 . left , root2 . left ) isSubtreeWithRoot ( root1 . right , root2 . right ); }","title":"26. \u6811\u7684\u5b50\u7ed3\u6784"},{"location":"algorithm/sword/solution/#27","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def public void Mirror ( TreeNode root ) { if ( root == null ) return ; swap ( root ); Mirror ( root . left ); Mirror ( root . right ); } private void swap ( TreeNode root ) { TreeNode t = root . left ; root . left = root . right ; root . right = t ; }","title":"27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf"},{"location":"algorithm/sword/solution/#28","text":"NowCder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def boolean isSymmetrical ( TreeNode pRoot ) { if ( pRoot == null ) return true ; return isSymmetrical ( pRoot . left , pRoot . right ); } boolean isSymmetrical ( TreeNode t1 , TreeNode t2 ) { if ( t1 == null t2 == null ) return true ; if ( t1 == null || t2 == null ) return false ; if ( t1 . val != t2 . val ) return false ; return isSymmetrical ( t1 . left , t2 . right ) isSymmetrical ( t1 . right , t2 . left ); }","title":"28 \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/solution/#29","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e0b\u56fe\u7684\u77e9\u9635\u987a\u65f6\u9488\u6253\u5370\u7ed3\u679c\u4e3a\uff1a1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10 \u89e3\u9898\u601d\u8def public ArrayList Integer printMatrix ( int [][] matrix ) { ArrayList Integer ret = new ArrayList (); int r1 = 0 , r2 = matrix . length - 1 , c1 = 0 , c2 = matrix [ 0 ]. length - 1 ; while ( r1 = r2 c1 = c2 ) { for ( int i = c1 ; i = c2 ; i ++) ret . add ( matrix [ r1 ][ i ]); for ( int i = r1 + 1 ; i = r2 ; i ++) ret . add ( matrix [ i ][ c2 ]); if ( r1 != r2 ) for ( int i = c2 - 1 ; i = c1 ; i --) ret . add ( matrix [ r2 ][ i ]); if ( c1 != c2 ) for ( int i = r2 - 1 ; i r1 ; i --) ret . add ( matrix [ i ][ c1 ]); r1 ++; r2 --; c1 ++; c2 --; } return ret ; }","title":"29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635"},{"location":"algorithm/sword/solution/#30-min","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5b9a\u4e49\u6808\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bf7\u5728\u8be5\u7c7b\u578b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5f97\u5230\u6808\u6700\u5c0f\u5143\u7d20\u7684 min \u51fd\u6570\u3002 \u89e3\u9898\u601d\u8def private Stack Integer dataStack = new Stack (); private Stack Integer minStack = new Stack (); public void push ( int node ) { dataStack . push ( node ); minStack . push ( minStack . isEmpty () ? node : Math . min ( minStack . peek (), node )); } public void pop () { dataStack . pop (); minStack . pop (); } public int top () { return dataStack . peek (); } public int min () { return minStack . peek (); }","title":"30. \u5305\u542b min \u51fd\u6570\u7684\u6808"},{"location":"algorithm/sword/solution/#31","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e24\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u8868\u793a\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u8bf7\u5224\u65ad\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u5426\u4e3a\u8be5\u6808\u7684\u5f39\u51fa\u987a\u5e8f\u3002\u5047\u8bbe\u538b\u5165\u6808\u7684\u6240\u6709\u6570\u5b57\u5747\u4e0d\u76f8\u7b49\u3002 \u4f8b\u5982\u5e8f\u5217 1,2,3,4,5 \u662f\u67d0\u6808\u7684\u538b\u5165\u987a\u5e8f\uff0c\u5e8f\u5217 4,5,3,2,1 \u662f\u8be5\u538b\u6808\u5e8f\u5217\u5bf9\u5e94\u7684\u4e00\u4e2a\u5f39\u51fa\u5e8f\u5217\uff0c\u4f46 4,3,5,1,2 \u5c31\u4e0d\u53ef\u80fd\u662f\u8be5\u538b\u6808\u5e8f\u5217\u7684\u5f39\u51fa\u5e8f\u5217\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u4e00\u4e2a\u6808\u6765\u6a21\u62df\u538b\u5165\u5f39\u51fa\u64cd\u4f5c\u3002 public boolean IsPopOrder ( int [] pushSequence , int [] popSequence ) { int n = pushSequence . length ; Stack Integer stack = new Stack (); for ( int pushIndex = 0 , popIndex = 0 ; pushIndex n ; pushIndex ++) { stack . push ( pushSequence [ pushIndex ]); while ( popIndex n ! stack . isEmpty () stack . peek () == popSequence [ popIndex ]) { stack . pop (); popIndex ++; } } return stack . isEmpty (); }","title":"31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217"},{"location":"algorithm/sword/solution/#321","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u7684\u6bcf\u4e2a\u8282\u70b9\uff0c\u540c\u5c42\u8282\u70b9\u4ece\u5de6\u81f3\u53f3\u6253\u5370\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b\u4e8c\u53c9\u6811\u5c42\u6b21\u904d\u5386\u7684\u7ed3\u679c\u4e3a\uff1a1,2,3,4,5,6,7 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u961f\u5217\u6765\u8fdb\u884c\u5c42\u6b21\u904d\u5386\u3002 \u4e0d\u9700\u8981\u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u5206\u522b\u5b58\u50a8\u5f53\u524d\u5c42\u7684\u8282\u70b9\u548c\u4e0b\u4e00\u5c42\u7684\u8282\u70b9\uff0c\u56e0\u4e3a\u5728\u5f00\u59cb\u904d\u5386\u4e00\u5c42\u7684\u8282\u70b9\u65f6\uff0c\u5f53\u524d\u961f\u5217\u4e2d\u7684\u8282\u70b9\u6570\u5c31\u662f\u5f53\u524d\u5c42\u7684\u8282\u70b9\u6570\uff0c\u53ea\u8981\u63a7\u5236\u904d\u5386\u8fd9\u4e48\u591a\u8282\u70b9\u6570\uff0c\u5c31\u80fd\u4fdd\u8bc1\u8fd9\u6b21\u904d\u5386\u7684\u90fd\u662f\u5f53\u524d\u5c42\u7684\u8282\u70b9\u3002 public ArrayList Integer PrintFromTopToBottom ( TreeNode root ) { Queue TreeNode queue = new LinkedList (); ArrayList Integer ret = new ArrayList (); queue . add ( root ); while (! queue . isEmpty ()) { int cnt = queue . size (); while ( cnt -- 0 ) { TreeNode t = queue . poll (); if ( t == null ) continue ; ret . add ( t . val ); queue . add ( t . left ); queue . add ( t . right ); } } return ret ; }","title":"32.1 \u4ece\u4e0a\u5f80\u4e0b\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/solution/#322","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u548c\u4e0a\u9898\u51e0\u4e4e\u4e00\u6837\u3002 \u89e3\u9898\u601d\u8def ArrayList ArrayList Integer Print ( TreeNode pRoot ) { ArrayList ArrayList Integer ret = new ArrayList (); Queue TreeNode queue = new LinkedList (); queue . add ( pRoot ); while (! queue . isEmpty ()) { ArrayList Integer list = new ArrayList (); int cnt = queue . size (); while ( cnt -- 0 ) { TreeNode node = queue . poll (); if ( node == null ) continue ; list . add ( node . val ); queue . add ( node . left ); queue . add ( node . right ); } if ( list . size () != 0 ) ret . add ( list ); } return ret ; }","title":"32.2 \u628a\u4e8c\u53c9\u6811\u6253\u5370\u6210\u591a\u884c"},{"location":"algorithm/sword/solution/#323","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u81f3\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u89e3\u9898\u601d\u8def public ArrayList ArrayList Integer Print ( TreeNode pRoot ) { ArrayList ArrayList Integer ret = new ArrayList (); Queue TreeNode queue = new LinkedList (); queue . add ( pRoot ); boolean reverse = false ; while (! queue . isEmpty ()) { ArrayList Integer list = new ArrayList (); int cnt = queue . size (); while ( cnt -- 0 ) { TreeNode node = queue . poll (); if ( node == null ) continue ; list . add ( node . val ); queue . add ( node . left ); queue . add ( node . right ); } if ( reverse ) Collections . reverse ( list ); reverse = ! reverse ; if ( list . size () != 0 ) ret . add ( list ); } return ret ; }","title":"32.3 \u6309\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/solution/#33","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7684\u7ed3\u679c\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u4f8b\u5982\uff0c\u4e0b\u56fe\u662f\u540e\u5e8f\u904d\u5386\u5e8f\u5217 1,3,2 \u6240\u5bf9\u5e94\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u89e3\u9898\u601d\u8def public boolean VerifySquenceOfBST ( int [] sequence ) { if ( sequence == null || sequence . length == 0 ) return false ; return verify ( sequence , 0 , sequence . length - 1 ); } private boolean verify ( int [] sequence , int first , int last ) { if ( last - first = 1 ) return true ; int rootVal = sequence [ last ]; int cutIndex = first ; while ( cutIndex last sequence [ cutIndex ] = rootVal ) cutIndex ++; for ( int i = cutIndex ; i last ; i ++) if ( sequence [ i ] rootVal ) return false ; return verify ( sequence , first , cutIndex - 1 ) verify ( sequence , cutIndex , last - 1 ); }","title":"33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217"},{"location":"algorithm/sword/solution/#34","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u9897\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u6574\u6570\uff0c\u6253\u5370\u51fa\u4e8c\u53c9\u6811\u4e2d\u7ed3\u70b9\u503c\u7684\u548c\u4e3a\u8f93\u5165\u6574\u6570\u7684\u6240\u6709\u8def\u5f84\u3002\u8def\u5f84\u5b9a\u4e49\u4e3a\u4ece\u6811\u7684\u6839\u7ed3\u70b9\u5f00\u59cb\u5f80\u4e0b\u4e00\u76f4\u5230\u53f6\u7ed3\u70b9\u6240\u7ecf\u8fc7\u7684\u7ed3\u70b9\u5f62\u6210\u4e00\u6761\u8def\u5f84\u3002 \u4e0b\u56fe\u7684\u4e8c\u53c9\u6811\u6709\u4e24\u6761\u548c\u4e3a 22 \u7684\u8def\u5f84\uff1a10, 5, 7 \u548c 10, 12 \u89e3\u9898\u601d\u8def private ArrayList ArrayList Integer ret = new ArrayList (); public ArrayList ArrayList Integer FindPath ( TreeNode root , int target ) { backtracking ( root , target , new ArrayList ()); return ret ; } private void backtracking ( TreeNode node , int target , ArrayList Integer path ) { if ( node == null ) return ; path . add ( node . val ); target -= node . val ; if ( target == 0 node . left == null node . right == null ) { ret . add ( new ArrayList ( path )); } else { backtracking ( node . left , target , path ); backtracking ( node . right , target , path ); } path . remove ( path . size () - 1 ); }","title":"34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84"},{"location":"algorithm/sword/solution/#35","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u590d\u6742\u94fe\u8868\uff08\u6bcf\u4e2a\u8282\u70b9\u4e2d\u6709\u8282\u70b9\u503c\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c\u53e6\u4e00\u4e2a\u7279\u6b8a\u6307\u9488\u6307\u5411\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\uff09\uff0c\u8fd4\u56de\u7ed3\u679c\u4e3a\u590d\u5236\u540e\u590d\u6742\u94fe\u8868\u7684 head\u3002 public class RandomListNode { int label ; RandomListNode next = null ; RandomListNode random = null ; RandomListNode ( int label ) { this . label = label ; } } \u89e3\u9898\u601d\u8def \u7b2c\u4e00\u6b65\uff0c\u5728\u6bcf\u4e2a\u8282\u70b9\u7684\u540e\u9762\u63d2\u5165\u590d\u5236\u7684\u8282\u70b9\u3002 \u7b2c\u4e8c\u6b65\uff0c\u5bf9\u590d\u5236\u8282\u70b9\u7684 random \u94fe\u63a5\u8fdb\u884c\u8d4b\u503c\u3002 \u7b2c\u4e09\u6b65\uff0c\u62c6\u5206\u3002 public RandomListNode Clone ( RandomListNode pHead ) { if ( pHead == null ) return null ; // \u63d2\u5165\u65b0\u8282\u70b9 RandomListNode cur = pHead ; while ( cur != null ) { RandomListNode clone = new RandomListNode ( cur . label ); clone . next = cur . next ; cur . next = clone ; cur = clone . next ; } // \u5efa\u7acb random \u94fe\u63a5 cur = pHead ; while ( cur != null ) { RandomListNode clone = cur . next ; if ( cur . random != null ) clone . random = cur . random . next ; cur = clone . next ; } // \u62c6\u5206 cur = pHead ; RandomListNode pCloneHead = pHead . next ; while ( cur . next != null ) { RandomListNode next = cur . next ; cur . next = next . next ; cur = next ; } return pCloneHead ; }","title":"35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236"},{"location":"algorithm/sword/solution/#36","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u7ed3\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u7ed3\u70b9\u6307\u9488\u7684\u6307\u5411\u3002 \u89e3\u9898\u601d\u8def private TreeNode pre = null ; private TreeNode head = null ; public TreeNode Convert ( TreeNode root ) { inOrder ( root ); return head ; } private void inOrder ( TreeNode node ) { if ( node == null ) return ; inOrder ( node . left ); node . left = pre ; if ( pre != null ) pre . right = node ; pre = node ; if ( head == null ) head = node ; inOrder ( node . right ); }","title":"36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868"},{"location":"algorithm/sword/solution/#37","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e24\u4e2a\u51fd\u6570\uff0c\u5206\u522b\u7528\u6765\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u4e8c\u53c9\u6811\u3002 \u89e3\u9898\u601d\u8def private String deserializeStr ; public String Serialize ( TreeNode root ) { if ( root == null ) return # ; return root . val + + Serialize ( root . left ) + + Serialize ( root . right ); } public TreeNode Deserialize ( String str ) { deserializeStr = str ; return Deserialize (); } private TreeNode Deserialize () { if ( deserializeStr . length () == 0 ) return null ; int index = deserializeStr . indexOf ( ); String node = index == - 1 ? deserializeStr : deserializeStr . substring ( 0 , index ); deserializeStr = index == - 1 ? : deserializeStr . substring ( index + 1 ); if ( node . equals ( # )) return null ; int val = Integer . valueOf ( node ); TreeNode t = new TreeNode ( val ); t . left = Deserialize (); t . right = Deserialize (); return t ; }","title":"37. \u5e8f\u5217\u5316\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/solution/#38","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6309\u5b57\u5178\u5e8f\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002\u4f8b\u5982\u8f93\u5165\u5b57\u7b26\u4e32 abc\uff0c\u5219\u6253\u5370\u51fa\u7531\u5b57\u7b26 a, b, c \u6240\u80fd\u6392\u5217\u51fa\u6765\u7684\u6240\u6709\u5b57\u7b26\u4e32 abc, acb, bac, bca, cab \u548c cba\u3002 \u89e3\u9898\u601d\u8def private ArrayList String ret = new ArrayList (); public ArrayList String Permutation ( String str ) { if ( str . length () == 0 ) return ret ; char [] chars = str . toCharArray (); Arrays . sort ( chars ); backtracking ( chars , new boolean [ chars . length ], new StringBuilder ()); return ret ; } private void backtracking ( char [] chars , boolean [] hasUsed , StringBuilder s ) { if ( s . length () == chars . length ) { ret . add ( s . toString ()); return ; } for ( int i = 0 ; i chars . length ; i ++) { if ( hasUsed [ i ]) continue ; if ( i != 0 chars [ i ] == chars [ i - 1 ] ! hasUsed [ i - 1 ]) /* \u4fdd\u8bc1\u4e0d\u91cd\u590d */ continue ; hasUsed [ i ] = true ; s . append ( chars [ i ]); backtracking ( chars , hasUsed , s ); s . deleteCharAt ( s . length () - 1 ); hasUsed [ i ] = false ; } }","title":"38. \u5b57\u7b26\u4e32\u7684\u6392\u5217"},{"location":"algorithm/sword/solution/#39","text":"NowCoder \u89e3\u9898\u601d\u8def \u591a\u6570\u6295\u7968\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528 Boyer-Moore Majority Vote Algorithm \u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u5f97\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\u3002 \u4f7f\u7528 cnt \u6765\u7edf\u8ba1\u4e00\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5f53\u904d\u5386\u5230\u7684\u5143\u7d20\u548c\u7edf\u8ba1\u5143\u7d20\u76f8\u7b49\u65f6\uff0c\u4ee4 cnt++\uff0c\u5426\u5219\u4ee4 cnt--\u3002\u5982\u679c\u524d\u9762\u67e5\u627e\u4e86 i \u4e2a\u5143\u7d20\uff0c\u4e14 cnt == 0\uff0c\u8bf4\u660e\u524d i \u4e2a\u5143\u7d20\u6ca1\u6709 majority\uff0c\u6216\u8005\u6709 majority\uff0c\u4f46\u662f\u51fa\u73b0\u7684\u6b21\u6570\u5c11\u4e8e i / 2 \uff0c\u56e0\u4e3a\u5982\u679c\u591a\u4e8e i / 2 \u7684\u8bdd cnt \u5c31\u4e00\u5b9a\u4e0d\u4f1a\u4e3a 0 \u3002\u6b64\u65f6\u5269\u4e0b\u7684 n - i \u4e2a\u5143\u7d20\u4e2d\uff0cmajority \u7684\u6570\u76ee\u4f9d\u7136\u591a\u4e8e (n - i) / 2\uff0c\u56e0\u6b64\u7ee7\u7eed\u67e5\u627e\u5c31\u80fd\u627e\u51fa majority\u3002 public int MoreThanHalfNum_Solution ( int [] nums ) { int majority = nums [ 0 ]; for ( int i = 1 , cnt = 1 ; i nums . length ; i ++) { cnt = nums [ i ] == majority ? cnt + 1 : cnt - 1 ; if ( cnt == 0 ) { majority = nums [ i ]; cnt = 1 ; } } int cnt = 0 ; for ( int val : nums ) if ( val == majority ) cnt ++; return cnt nums . length / 2 ? majority : 0 ; }","title":"39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57"},{"location":"algorithm/sword/solution/#40-k","text":"NowCoder","title":"40. \u6700\u5c0f\u7684 K \u4e2a\u6570"},{"location":"algorithm/sword/solution/#_12","text":"\u590d\u6742\u5ea6\uff1aO(N) + O(1) \u53ea\u6709\u5f53\u5141\u8bb8\u4fee\u6539\u6570\u7ec4\u5143\u7d20\u65f6\u624d\u53ef\u4ee5\u4f7f\u7528 \u5feb\u901f\u6392\u5e8f\u7684 partition() \u65b9\u6cd5\uff0c\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6574\u6570 j \u4f7f\u5f97 a[l..j-1] \u5c0f\u4e8e\u7b49\u4e8e a[j]\uff0c\u4e14 a[j+1..h] \u5927\u4e8e\u7b49\u4e8e a[j]\uff0c\u6b64\u65f6 a[j] \u5c31\u662f\u6570\u7ec4\u7684\u7b2c j \u5927\u5143\u7d20\u3002\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u6027\u627e\u51fa\u6570\u7ec4\u7684\u7b2c K \u4e2a\u5143\u7d20\uff0c\u8fd9\u79cd\u627e\u7b2c K \u4e2a\u5143\u7d20\u7684\u7b97\u6cd5\u79f0\u4e3a\u5feb\u901f\u9009\u62e9\u7b97\u6cd5\u3002 public ArrayList Integer GetLeastNumbers_Solution ( int [] nums , int k ) { ArrayList Integer ret = new ArrayList (); if ( k nums . length || k = 0 ) return ret ; findKthSmallest ( nums , k - 1 ); /* findKthSmallest \u4f1a\u6539\u53d8\u6570\u7ec4\uff0c\u4f7f\u5f97\u524d k \u4e2a\u6570\u90fd\u662f\u6700\u5c0f\u7684 k \u4e2a\u6570 */ for ( int i = 0 ; i k ; i ++) ret . add ( nums [ i ]); return ret ; } public void findKthSmallest ( int [] nums , int k ) { int l = 0 , h = nums . length - 1 ; while ( l h ) { int j = partition ( nums , l , h ); if ( j == k ) break ; if ( j k ) h = j - 1 ; else l = j + 1 ; } } private int partition ( int [] nums , int l , int h ) { int p = nums [ l ]; /* \u5207\u5206\u5143\u7d20 */ int i = l , j = h + 1 ; while ( true ) { while ( i != h nums [++ i ] p ) ; while ( j != l nums [-- j ] p ) ; if ( i = j ) break ; swap ( nums , i , j ); } swap ( nums , l , j ); return j ; } private void swap ( int [] nums , int i , int j ) { int t = nums [ i ]; nums [ i ] = nums [ j ]; nums [ j ] = t ; }","title":"\u5feb\u901f\u9009\u62e9"},{"location":"algorithm/sword/solution/#k","text":"\u590d\u6742\u5ea6\uff1aO(NlogK) + O(K) \u7279\u522b\u9002\u5408\u5904\u7406\u6d77\u91cf\u6570\u636e \u5e94\u8be5\u4f7f\u7528\u5927\u9876\u5806\u6765\u7ef4\u62a4\u6700\u5c0f\u5806\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u521b\u5efa\u4e00\u4e2a\u5c0f\u9876\u5806\u5e76\u8bbe\u7f6e\u4e00\u4e2a\u5927\u5c0f\uff0c\u4f01\u56fe\u8ba9\u5c0f\u9876\u5806\u4e2d\u7684\u5143\u7d20\u90fd\u662f\u6700\u5c0f\u5143\u7d20\u3002 \u7ef4\u62a4\u4e00\u4e2a\u5927\u5c0f\u4e3a K \u7684\u6700\u5c0f\u5806\u8fc7\u7a0b\u5982\u4e0b\uff1a\u5728\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\uff0c\u5982\u679c\u5927\u9876\u5806\u7684\u5927\u5c0f\u5927\u4e8e K\uff0c\u90a3\u4e48\u9700\u8981\u5c06\u5927\u9876\u5806\u7684\u5806\u9876\u5143\u7d20\u53bb\u9664\u3002 public ArrayList Integer GetLeastNumbers_Solution ( int [] nums , int k ) { if ( k nums . length || k = 0 ) return new ArrayList (); PriorityQueue Integer maxHeap = new PriorityQueue (( o1 , o2 ) - o2 - o1 ); for ( int num : nums ) { maxHeap . add ( num ); if ( maxHeap . size () k ) maxHeap . poll (); } return new ArrayList ( maxHeap ); }","title":"\u5927\u5c0f\u4e3a K \u7684\u6700\u5c0f\u5806"},{"location":"algorithm/sword/solution/#411","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5982\u4f55\u5f97\u5230\u4e00\u4e2a\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570\uff1f\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5947\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u6570\u503c\u3002\u5982\u679c\u4ece\u6570\u636e\u6d41\u4e2d\u8bfb\u51fa\u5076\u6570\u4e2a\u6570\u503c\uff0c\u90a3\u4e48\u4e2d\u4f4d\u6570\u5c31\u662f\u6240\u6709\u6570\u503c\u6392\u5e8f\u4e4b\u540e\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002 \u89e3\u9898\u601d\u8def /* \u5927\u9876\u5806\uff0c\u5b58\u50a8\u5de6\u534a\u8fb9\u5143\u7d20 */ private PriorityQueue Integer left = new PriorityQueue (( o1 , o2 ) - o2 - o1 ); /* \u5c0f\u9876\u5806\uff0c\u5b58\u50a8\u53f3\u534a\u8fb9\u5143\u7d20\uff0c\u5e76\u4e14\u53f3\u534a\u8fb9\u5143\u7d20\u90fd\u5927\u4e8e\u5de6\u534a\u8fb9 */ private PriorityQueue Integer right = new PriorityQueue (); /* \u5f53\u524d\u6570\u636e\u6d41\u8bfb\u5165\u7684\u5143\u7d20\u4e2a\u6570 */ private int N = 0 ; public void Insert ( Integer val ) { /* \u63d2\u5165\u8981\u4fdd\u8bc1\u4e24\u4e2a\u5806\u5b58\u4e8e\u5e73\u8861\u72b6\u6001 */ if ( N % 2 == 0 ) { /* N \u4e3a\u5076\u6570\u7684\u60c5\u51b5\u4e0b\u63d2\u5165\u5230\u53f3\u534a\u8fb9\u3002 * \u56e0\u4e3a\u53f3\u534a\u8fb9\u5143\u7d20\u90fd\u8981\u5927\u4e8e\u5de6\u534a\u8fb9\uff0c\u4f46\u662f\u65b0\u63d2\u5165\u7684\u5143\u7d20\u4e0d\u4e00\u5b9a\u6bd4\u5de6\u534a\u8fb9\u5143\u7d20\u6765\u7684\u5927\uff0c * \u56e0\u6b64\u9700\u8981\u5148\u5c06\u5143\u7d20\u63d2\u5165\u5de6\u534a\u8fb9\uff0c\u7136\u540e\u5229\u7528\u5de6\u534a\u8fb9\u4e3a\u5927\u9876\u5806\u7684\u7279\u70b9\uff0c\u53d6\u51fa\u5806\u9876\u5143\u7d20\u5373\u4e3a\u6700\u5927\u5143\u7d20\uff0c\u6b64\u65f6\u63d2\u5165\u53f3\u534a\u8fb9 */ left . add ( val ); right . add ( left . poll ()); } else { right . add ( val ); left . add ( right . poll ()); } N ++; } public Double GetMedian () { if ( N % 2 == 0 ) return ( left . peek () + right . peek ()) / 2.0 ; else return ( double ) right . peek (); }","title":"41.1 \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570"},{"location":"algorithm/sword/solution/#412","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u627e\u51fa\u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\u4f8b\u5982\uff0c\u5f53\u4ece\u5b57\u7b26\u6d41\u4e2d\u53ea\u8bfb\u51fa\u524d\u4e24\u4e2a\u5b57\u7b26 \"go\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"g\"\u3002\u5f53\u4ece\u8be5\u5b57\u7b26\u6d41\u4e2d\u8bfb\u51fa\u524d\u516d\u4e2a\u5b57\u7b26\u201cgoogle\" \u65f6\uff0c\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u662f \"l\"\u3002 \u89e3\u9898\u601d\u8def private int [] cnts = new int [ 256 ]; private Queue Character queue = new LinkedList (); public void Insert ( char ch ) { cnts [ ch ]++; queue . add ( ch ); while (! queue . isEmpty () cnts [ queue . peek ()] 1 ) queue . poll (); } public char FirstAppearingOnce () { return queue . isEmpty () ? # : queue . peek (); }","title":"41.2 \u5b57\u7b26\u6d41\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26"},{"location":"algorithm/sword/solution/#42","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 {6, -3, -2, 7, -15, 1, 2, 2}\uff0c\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c\u4e3a 8\uff08\u4ece\u7b2c 0 \u4e2a\u5f00\u59cb\uff0c\u5230\u7b2c 3 \u4e2a\u4e3a\u6b62\uff09\u3002 \u89e3\u9898\u601d\u8def public int FindGreatestSumOfSubArray ( int [] nums ) { if ( nums == null || nums . length == 0 ) return 0 ; int greatestSum = Integer . MIN_VALUE ; int sum = 0 ; for ( int val : nums ) { sum = sum = 0 ? val : sum + val ; greatestSum = Math . max ( greatestSum , sum ); } return greatestSum ; }","title":"42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c"},{"location":"algorithm/sword/solution/#43-1-n-1","text":"NowCoder \u89e3\u9898\u601d\u8def public int NumberOf1Between1AndN_Solution ( int n ) { int cnt = 0 ; for ( int m = 1 ; m = n ; m *= 10 ) { int a = n / m , b = n % m ; cnt += ( a + 8 ) / 10 * m + ( a % 10 == 1 ? b + 1 : 0 ); } return cnt ; } Leetcode : 233. Number of Digit One","title":"43. \u4ece 1 \u5230 n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570"},{"location":"algorithm/sword/solution/#44","text":"\u9898\u76ee\u63cf\u8ff0 \u6570\u5b57\u4ee5 0123456789101112131415... \u7684\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\uff0c\u6c42\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684\u7b2c index \u4f4d\u3002 \u89e3\u9898\u601d\u8def public int getDigitAtIndex ( int index ) { if ( index 0 ) return - 1 ; int place = 1 ; // 1 \u8868\u793a\u4e2a\u4f4d\uff0c2 \u8868\u793a \u5341\u4f4d... while ( true ) { int amount = getAmountOfPlace ( place ); int totalAmount = amount * place ; if ( index totalAmount ) return getDigitAtIndex ( index , place ); index -= totalAmount ; place ++; } } /** * place \u4f4d\u6570\u7684\u6570\u5b57\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u957f\u5ea6 * 10, 90, 900, ... */ private int getAmountOfPlace ( int place ) { if ( place == 1 ) return 10 ; return ( int ) Math . pow ( 10 , place - 1 ) * 9 ; } /** * place \u4f4d\u6570\u7684\u8d77\u59cb\u6570\u5b57 * 0, 10, 100, ... */ private int getBeginNumberOfPlace ( int place ) { if ( place == 1 ) return 0 ; return ( int ) Math . pow ( 10 , place - 1 ); } /** * \u5728 place \u4f4d\u6570\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u7b2c index \u4e2a\u6570 */ private int getDigitAtIndex ( int index , int place ) { int beginNumber = getBeginNumberOfPlace ( place ); int shiftNumber = index / place ; String number = ( beginNumber + shiftNumber ) + ; int count = index % place ; return number . charAt ( count ) - 0 ; }","title":"44. \u6570\u5b57\u5e8f\u5217\u4e2d\u7684\u67d0\u4e00\u4f4d\u6570\u5b57"},{"location":"algorithm/sword/solution/#45","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\u4f8b\u5982\u8f93\u5165\u6570\u7ec4 {3\uff0c32\uff0c321}\uff0c\u5219\u6253\u5370\u51fa\u8fd9\u4e09\u4e2a\u6570\u5b57\u80fd\u6392\u6210\u7684\u6700\u5c0f\u6570\u5b57\u4e3a 321323\u3002 \u89e3\u9898\u601d\u8def \u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u6392\u5e8f\u95ee\u9898\uff0c\u5728\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32 S1 \u548c S2 \u7684\u5927\u5c0f\u65f6\uff0c\u5e94\u8be5\u6bd4\u8f83\u7684\u662f S1+S2 \u548c S2+S1 \u7684\u5927\u5c0f\uff0c\u5982\u679c S1+S2 S2+S1\uff0c\u90a3\u4e48\u5e94\u8be5\u628a S1 \u6392\u5728\u524d\u9762\uff0c\u5426\u5219\u5e94\u8be5\u628a S2 \u6392\u5728\u524d\u9762\u3002 public String PrintMinNumber ( int [] numbers ) { if ( numbers == null || numbers . length == 0 ) return ; int n = numbers . length ; String [] nums = new String [ n ]; for ( int i = 0 ; i n ; i ++) nums [ i ] = numbers [ i ] + ; Arrays . sort ( nums , ( s1 , s2 ) - ( s1 + s2 ). compareTo ( s2 + s1 )); String ret = ; for ( String str : nums ) ret += str ; return ret ; }","title":"45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570"},{"location":"algorithm/sword/solution/#46","text":"Leetcode \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6309\u7167\u5982\u4e0b\u89c4\u5219\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32\uff1a0 \u7ffb\u8bd1\u6210\u201ca\u201d\uff0c1 \u7ffb\u8bd1\u6210\u201cb\u201d... 25 \u7ffb\u8bd1\u6210\u201cz\u201d\u3002\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u79cd\u7ffb\u8bd1\u53ef\u80fd\uff0c\u4f8b\u5982 12258 \u4e00\u5171\u6709 5 \u79cd\uff0c\u5206\u522b\u662f bccfi\uff0cbwfi\uff0cbczi\uff0cmcfi\uff0cmzi\u3002\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002 \u89e3\u9898\u601d\u8def public int numDecodings ( String s ) { if ( s == null || s . length () == 0 ) return 0 ; int n = s . length (); int [] dp = new int [ n + 1 ]; dp [ 0 ] = 1 ; dp [ 1 ] = s . charAt ( 0 ) == 0 ? 0 : 1 ; for ( int i = 2 ; i = n ; i ++) { int one = Integer . valueOf ( s . substring ( i - 1 , i )); if ( one != 0 ) dp [ i ] += dp [ i - 1 ]; if ( s . charAt ( i - 2 ) == 0 ) continue ; int two = Integer . valueOf ( s . substring ( i - 2 , i )); if ( two = 26 ) dp [ i ] += dp [ i - 2 ]; } return dp [ n ]; }","title":"46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32"},{"location":"algorithm/sword/solution/#47","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a m*n \u7684\u68cb\u76d8\u7684\u6bcf\u4e00\u4e2a\u683c\u90fd\u653e\u6709\u4e00\u4e2a\u793c\u7269\uff0c\u6bcf\u4e2a\u793c\u7269\u90fd\u6709\u4e00\u5b9a\u4ef7\u503c\uff08\u5927\u4e8e 0\uff09\u3002\u4ece\u5de6\u4e0a\u89d2\u5f00\u59cb\u62ff\u793c\u7269\uff0c\u6bcf\u6b21\u5411\u53f3\u6216\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\uff0c\u76f4\u5230\u53f3\u4e0b\u89d2\u7ed3\u675f\u3002\u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\uff0c\u6c42\u62ff\u5230\u793c\u7269\u7684\u6700\u5927\u4ef7\u503c\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e\u5982\u4e0b\u68cb\u76d8 1 10 3 8 12 2 9 6 5 7 4 11 3 7 16 5 \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c\u4e3a 1+12+5+7+7+16+5=53\u3002 \u89e3\u9898\u601d\u8def \u5e94\u8be5\u7528\u52a8\u6001\u89c4\u5212\u6c42\u89e3\uff0c\u800c\u4e0d\u662f\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8fc7\u4e8e\u590d\u6742\uff0c\u4e0d\u662f\u6700\u4f18\u89e3\u3002 public int getMost ( int [][] values ) { if ( values == null || values . length == 0 || values [ 0 ]. length == 0 ) return 0 ; int n = values [ 0 ]. length ; int [] dp = new int [ n ]; for ( int [] value : values ) { dp [ 0 ] += value [ 0 ]; for ( int i = 1 ; i n ; i ++) dp [ i ] = Math . max ( dp [ i ], dp [ i - 1 ]) + value [ i ]; } return dp [ n - 1 ]; }","title":"47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c"},{"location":"algorithm/sword/solution/#48","text":"\u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff08\u53ea\u5305\u542b a\\~z \u7684\u5b57\u7b26\uff09\uff0c\u6c42\u5176\u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u4f8b\u5982\u5bf9\u4e8e arabcacfr\uff0c\u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32\u4e3a acfr\uff0c\u957f\u5ea6\u4e3a 4\u3002 \u89e3\u9898\u601d\u8def public int longestSubStringWithoutDuplication ( String str ) { int curLen = 0 ; int maxLen = 0 ; int [] preIndexs = new int [ 26 ]; Arrays . fill ( preIndexs , - 1 ); for ( int curI = 0 ; curI str . length (); curI ++) { int c = str . charAt ( curI ) - a ; int preI = preIndexs [ c ]; if ( preI == - 1 || curI - preI curLen ) { curLen ++; } else { maxLen = Math . max ( maxLen , curLen ); curLen = curI - preI ; } preIndexs [ c ] = curI ; } maxLen = Math . max ( maxLen , curLen ); return maxLen ; }","title":"48. \u6700\u957f\u4e0d\u542b\u91cd\u590d\u5b57\u7b26\u7684\u5b50\u5b57\u7b26\u4e32"},{"location":"algorithm/sword/solution/#49","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u628a\u53ea\u5305\u542b\u56e0\u5b50 2\u30013 \u548c 5 \u7684\u6570\u79f0\u4f5c\u4e11\u6570\uff08Ugly Number\uff09\u3002\u4f8b\u5982 6\u30018 \u90fd\u662f\u4e11\u6570\uff0c\u4f46 14 \u4e0d\u662f\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u56e0\u5b50 7\u3002\u4e60\u60ef\u4e0a\u6211\u4eec\u628a 1 \u5f53\u505a\u662f\u7b2c\u4e00\u4e2a\u4e11\u6570\u3002\u6c42\u6309\u4ece\u5c0f\u5230\u5927\u7684\u987a\u5e8f\u7684\u7b2c N \u4e2a\u4e11\u6570\u3002 \u89e3\u9898\u601d\u8def public int GetUglyNumber_Solution ( int N ) { if ( N = 6 ) return N ; int i2 = 0 , i3 = 0 , i5 = 0 ; int [] dp = new int [ N ]; dp [ 0 ] = 1 ; for ( int i = 1 ; i N ; i ++) { int next2 = dp [ i2 ] * 2 , next3 = dp [ i3 ] * 3 , next5 = dp [ i5 ] * 5 ; dp [ i ] = Math . min ( next2 , Math . min ( next3 , next5 )); if ( dp [ i ] == next2 ) i2 ++; if ( dp [ i ] == next3 ) i3 ++; if ( dp [ i ] == next5 ) i5 ++; } return dp [ N - 1 ]; }","title":"49. \u4e11\u6570"},{"location":"algorithm/sword/solution/#50","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u4f4d\u7f6e\u3002 \u89e3\u9898\u601d\u8def \u6700\u76f4\u89c2\u7684\u89e3\u6cd5\u662f\u4f7f\u7528 HashMap \u5bf9\u51fa\u73b0\u6b21\u6570\u8fdb\u884c\u7edf\u8ba1\uff0c\u4f46\u662f\u8003\u8651\u5230\u8981\u7edf\u8ba1\u7684\u5b57\u7b26\u8303\u56f4\u6709\u9650\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u6574\u578b\u6570\u7ec4\u4ee3\u66ff HashMap\u3002 public int FirstNotRepeatingChar ( String str ) { int [] cnts = new int [ 256 ]; for ( int i = 0 ; i str . length (); i ++) cnts [ str . charAt ( i )]++; for ( int i = 0 ; i str . length (); i ++) if ( cnts [ str . charAt ( i )] == 1 ) return i ; return - 1 ; } \u4ee5\u4e0a\u5b9e\u73b0\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u8fd8\u4e0d\u662f\u6700\u4f18\u7684\u3002\u8003\u8651\u5230\u53ea\u9700\u8981\u627e\u5230\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u9700\u8981\u7edf\u8ba1\u7684\u6b21\u6570\u4fe1\u606f\u53ea\u6709 0,1,\u66f4\u5927\uff0c\u4f7f\u7528\u4e24\u4e2a\u6bd4\u7279\u4f4d\u5c31\u80fd\u5b58\u50a8\u8fd9\u4e9b\u4fe1\u606f\u3002 public int FirstNotRepeatingChar2 ( String str ) { BitSet bs1 = new BitSet ( 256 ); BitSet bs2 = new BitSet ( 256 ); for ( char c : str . toCharArray ()) { if (! bs1 . get ( c ) ! bs2 . get ( c )) bs1 . set ( c ); // 0 0 - 0 1 else if ( bs1 . get ( c ) ! bs2 . get ( c )) bs2 . set ( c ); // 0 1 - 1 1 } for ( int i = 0 ; i str . length (); i ++) { char c = str . charAt ( i ); if ( bs1 . get ( c ) ! bs2 . get ( c )) // 0 1 return i ; } return - 1 ; }","title":"50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u4f4d\u7f6e"},{"location":"algorithm/sword/solution/#51","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5728\u6570\u7ec4\u4e2d\u7684\u4e24\u4e2a\u6570\u5b57\uff0c\u5982\u679c\u524d\u9762\u4e00\u4e2a\u6570\u5b57\u5927\u4e8e\u540e\u9762\u7684\u6570\u5b57\uff0c\u5219\u8fd9\u4e24\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u9006\u5e8f\u5bf9\u3002\u8f93\u5165\u4e00\u4e2a\u6570\u7ec4\uff0c\u6c42\u51fa\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9\u7684\u603b\u6570\u3002 \u89e3\u9898\u601d\u8def private long cnt = 0 ; private int [] tmp ; // \u5728\u8fd9\u91cc\u58f0\u660e\u8f85\u52a9\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u5728 merge() \u9012\u5f52\u51fd\u6570\u4e2d\u58f0\u660e public int InversePairs ( int [] nums ) { tmp = new int [ nums . length ]; mergeSort ( nums , 0 , nums . length - 1 ); return ( int ) ( cnt % 1000000007 ); } private void mergeSort ( int [] nums , int l , int h ) { if ( h - l 1 ) return ; int m = l + ( h - l ) / 2 ; mergeSort ( nums , l , m ); mergeSort ( nums , m + 1 , h ); merge ( nums , l , m , h ); } private void merge ( int [] nums , int l , int m , int h ) { int i = l , j = m + 1 , k = l ; while ( i = m || j = h ) { if ( i m ) tmp [ k ] = nums [ j ++]; else if ( j h ) tmp [ k ] = nums [ i ++]; else if ( nums [ i ] nums [ j ]) tmp [ k ] = nums [ i ++]; else { tmp [ k ] = nums [ j ++]; this . cnt += m - i + 1 ; // nums[i] = nums[j]\uff0c\u8bf4\u660e nums[i...mid] \u90fd\u5927\u4e8e nums[j] } k ++; } for ( k = l ; k = h ; k ++) nums [ k ] = tmp [ k ]; }","title":"51. \u6570\u7ec4\u4e2d\u7684\u9006\u5e8f\u5bf9"},{"location":"algorithm/sword/solution/#52","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u89e3\u9898\u601d\u8def \u8bbe A \u7684\u957f\u5ea6\u4e3a a + c\uff0cB \u7684\u957f\u5ea6\u4e3a b + c\uff0c\u5176\u4e2d c \u4e3a\u5c3e\u90e8\u516c\u5171\u90e8\u5206\u957f\u5ea6\uff0c\u53ef\u77e5 a + c + b = b + c + a\u3002 \u5f53\u8bbf\u95ee\u94fe\u8868 A \u7684\u6307\u9488\u8bbf\u95ee\u5230\u94fe\u8868\u5c3e\u90e8\u65f6\uff0c\u4ee4\u5b83\u4ece\u94fe\u8868 B \u7684\u5934\u90e8\u91cd\u65b0\u5f00\u59cb\u8bbf\u95ee\u94fe\u8868 B\uff1b\u540c\u6837\u5730\uff0c\u5f53\u8bbf\u95ee\u94fe\u8868 B \u7684\u6307\u9488\u8bbf\u95ee\u5230\u94fe\u8868\u5c3e\u90e8\u65f6\uff0c\u4ee4\u5b83\u4ece\u94fe\u8868 A \u7684\u5934\u90e8\u91cd\u65b0\u5f00\u59cb\u8bbf\u95ee\u94fe\u8868 A\u3002\u8fd9\u6837\u5c31\u80fd\u63a7\u5236\u8bbf\u95ee A \u548c B \u4e24\u4e2a\u94fe\u8868\u7684\u6307\u9488\u80fd\u540c\u65f6\u8bbf\u95ee\u5230\u4ea4\u70b9\u3002 public ListNode FindFirstCommonNode ( ListNode pHead1 , ListNode pHead2 ) { ListNode l1 = pHead1 , l2 = pHead2 ; while ( l1 != l2 ) { l1 = ( l1 == null ) ? pHead2 : l1 . next ; l2 = ( l2 == null ) ? pHead1 : l2 . next ; } return l1 ; }","title":"52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u7ed3\u70b9"},{"location":"algorithm/sword/solution/#53","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 Input: nums = 1, 2, 3, 3, 3, 3, 4, 6 K = 3 Output: 4 \u89e3\u9898\u601d\u8def public int GetNumberOfK ( int [] nums , int K ) { int first = binarySearch ( nums , K ); int last = binarySearch ( nums , K + 1 ); return ( first == nums . length || nums [ first ] != K ) ? 0 : last - first ; } private int binarySearch ( int [] nums , int K ) { int l = 0 , h = nums . length ; while ( l h ) { int m = l + ( h - l ) / 2 ; if ( nums [ m ] = K ) h = m ; else l = m + 1 ; } return l ; }","title":"53. \u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570"},{"location":"algorithm/sword/solution/#54-k","text":"NowCoder \u89e3\u9898\u601d\u8def \u5229\u7528\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u5e8f\u904d\u5386\u6709\u5e8f\u7684\u7279\u70b9\u3002 private TreeNode ret ; private int cnt = 0 ; public TreeNode KthNode ( TreeNode pRoot , int k ) { inOrder ( pRoot , k ); return ret ; } private void inOrder ( TreeNode root , int k ) { if ( root == null || cnt = k ) return ; inOrder ( root . left , k ); cnt ++; if ( cnt == k ) ret = root ; inOrder ( root . right , k ); }","title":"54. \u4e8c\u53c9\u67e5\u627e\u6811\u7684\u7b2c K \u4e2a\u7ed3\u70b9"},{"location":"algorithm/sword/solution/#551","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4ece\u6839\u7ed3\u70b9\u5230\u53f6\u7ed3\u70b9\u4f9d\u6b21\u7ecf\u8fc7\u7684\u7ed3\u70b9\uff08\u542b\u6839\u3001\u53f6\u7ed3\u70b9\uff09\u5f62\u6210\u6811\u7684\u4e00\u6761\u8def\u5f84\uff0c\u6700\u957f\u8def\u5f84\u7684\u957f\u5ea6\u4e3a\u6811\u7684\u6df1\u5ea6\u3002 \u89e3\u9898\u601d\u8def public int TreeDepth ( TreeNode root ) { return root == null ? 0 : 1 + Math . max ( TreeDepth ( root . left ), TreeDepth ( root . right )); }","title":"55.1 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6"},{"location":"algorithm/sword/solution/#552","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5e73\u8861\u4e8c\u53c9\u6811\u5de6\u53f3\u5b50\u6811\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1\u3002 \u89e3\u9898\u601d\u8def private boolean isBalanced = true ; public boolean IsBalanced_Solution ( TreeNode root ) { height ( root ); return isBalanced ; } private int height ( TreeNode root ) { if ( root == null || ! isBalanced ) return 0 ; int left = height ( root . left ); int right = height ( root . right ); if ( Math . abs ( left - right ) 1 ) isBalanced = false ; return 1 + Math . max ( left , right ); }","title":"55.2 \u5e73\u8861\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/solution/#56","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e00\u4e2a\u6574\u578b\u6570\u7ec4\u91cc\u9664\u4e86\u4e24\u4e2a\u6570\u5b57\u4e4b\u5916\uff0c\u5176\u4ed6\u7684\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u627e\u51fa\u8fd9\u4e24\u4e2a\u6570\u3002 \u89e3\u9898\u601d\u8def \u4e24\u4e2a\u4e0d\u76f8\u7b49\u7684\u5143\u7d20\u5728\u4f4d\u7ea7\u8868\u793a\u4e0a\u5fc5\u5b9a\u4f1a\u6709\u4e00\u4f4d\u5b58\u5728\u4e0d\u540c\uff0c\u5c06\u6570\u7ec4\u7684\u6240\u6709\u5143\u7d20\u5f02\u6216\u5f97\u5230\u7684\u7ed3\u679c\u4e3a\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u4e24\u4e2a\u5143\u7d20\u5f02\u6216\u7684\u7ed3\u679c\u3002 diff = -diff \u5f97\u5230\u51fa diff \u6700\u53f3\u4fa7\u4e0d\u4e3a 0 \u7684\u4f4d\uff0c\u4e5f\u5c31\u662f\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u4f4d\u7ea7\u8868\u793a\u4e0a\u6700\u53f3\u4fa7\u4e0d\u540c\u7684\u90a3\u4e00\u4f4d\uff0c\u5229\u7528\u8fd9\u4e00\u4f4d\u5c31\u53ef\u4ee5\u5c06\u4e24\u4e2a\u5143\u7d20\u533a\u5206\u5f00\u6765\u3002 public void FindNumsAppearOnce ( int [] nums , int num1 [], int num2 []) { int diff = 0 ; for ( int num : nums ) diff ^= num ; diff = - diff ; for ( int num : nums ) { if (( num diff ) == 0 ) num1 [ 0 ] ^= num ; else num2 [ 0 ] ^= num ; } }","title":"56. \u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"algorithm/sword/solution/#571-s","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u5165\u4e00\u4e2a\u9012\u589e\u6392\u5e8f\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6570\u5b57 S\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e24\u4e2a\u6570\uff0c\u4f7f\u5f97\u4ed6\u4eec\u7684\u548c\u6b63\u597d\u662f S\u3002\u5982\u679c\u6709\u591a\u5bf9\u6570\u5b57\u7684\u548c\u7b49\u4e8e S\uff0c\u8f93\u51fa\u4e24\u4e2a\u6570\u7684\u4e58\u79ef\u6700\u5c0f\u7684\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u8f83\u5c0f\u7684\u503c\uff0c\u4e00\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u8f83\u5927\u7684\u503c\u3002\u6307\u5411\u8f83\u5c0f\u5143\u7d20\u7684\u6307\u9488\u4ece\u5934\u5411\u5c3e\u904d\u5386\uff0c\u6307\u5411\u8f83\u5927\u5143\u7d20\u7684\u6307\u9488\u4ece\u5c3e\u5411\u5934\u904d\u5386\u3002 \u5982\u679c\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5143\u7d20\u7684\u548c sum == target\uff0c\u90a3\u4e48\u5f97\u5230\u8981\u6c42\u7684\u7ed3\u679c\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5927\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5c0f\u4e00\u4e9b\uff1b \u5982\u679c sum target\uff0c\u79fb\u52a8\u8f83\u5c0f\u7684\u5143\u7d20\uff0c\u4f7f sum \u53d8\u5927\u4e00\u4e9b\u3002 public ArrayList Integer FindNumbersWithSum ( int [] array , int sum ) { int i = 0 , j = array . length - 1 ; while ( i j ) { int cur = array [ i ] + array [ j ]; if ( cur == sum ) return new ArrayList ( Arrays . asList ( array [ i ], array [ j ])); if ( cur sum ) i ++; else j --; } return new ArrayList (); }","title":"57.1 \u548c\u4e3a S \u7684\u4e24\u4e2a\u6570\u5b57"},{"location":"algorithm/sword/solution/#572-s","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8f93\u51fa\u6240\u6709\u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217\u3002 \u4f8b\u5982\u548c\u4e3a 100 \u7684\u8fde\u7eed\u5e8f\u5217\u6709\uff1a [9, 10, 11, 12, 13, 14, 15, 16] [18, 19, 20, 21, 22]\u3002 \u89e3\u9898\u601d\u8def public ArrayList ArrayList Integer FindContinuousSequence ( int sum ) { ArrayList ArrayList Integer ret = new ArrayList (); int start = 1 , end = 2 ; int curSum = 3 ; while ( end sum ) { if ( curSum sum ) { curSum -= start ; start ++; } else if ( curSum sum ) { end ++; curSum += end ; } else { ArrayList Integer list = new ArrayList (); for ( int i = start ; i = end ; i ++) list . add ( i ); ret . add ( list ); curSum -= start ; start ++; end ++; curSum += end ; } } return ret ; }","title":"57.2 \u548c\u4e3a S \u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217"},{"location":"algorithm/sword/solution/#581","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 Input: I am a student. Output: student. a am I \u89e3\u9898\u601d\u8def \u9898\u76ee\u5e94\u8be5\u6709\u4e00\u4e2a\u9690\u542b\u6761\u4ef6\uff0c\u5c31\u662f\u4e0d\u80fd\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002\u867d\u7136 Java \u7684\u9898\u76ee\u8f93\u5165\u53c2\u6570\u4e3a String \u7c7b\u578b\uff0c\u9700\u8981\u5148\u521b\u5efa\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u4f7f\u5f97\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(N)\uff0c\u4f46\u662f\u6b63\u786e\u7684\u53c2\u6570\u7c7b\u578b\u5e94\u8be5\u548c\u539f\u4e66\u4e00\u6837\uff0c\u4e3a\u5b57\u7b26\u6570\u7ec4\uff0c\u5e76\u4e14\u53ea\u80fd\u4f7f\u7528\u8be5\u5b57\u7b26\u6570\u7ec4\u7684\u7a7a\u95f4\u3002\u4efb\u4f55\u4f7f\u7528\u4e86\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u6cd5\u5728\u9762\u8bd5\u65f6\u90fd\u4f1a\u5927\u6253\u6298\u6263\uff0c\u5305\u62ec\u9012\u5f52\u89e3\u6cd5\u3002 \u6b63\u786e\u7684\u89e3\u6cd5\u5e94\u8be5\u662f\u548c\u4e66\u4e0a\u4e00\u6837\uff0c\u5148\u65cb\u8f6c\u6bcf\u4e2a\u5355\u8bcd\uff0c\u518d\u65cb\u8f6c\u6574\u4e2a\u5b57\u7b26\u4e32\u3002 public String ReverseSentence ( String str ) { int n = str . length (); char [] chars = str . toCharArray (); int i = 0 , j = 0 ; while ( j = n ) { if ( j == n || chars [ j ] == ) { reverse ( chars , i , j - 1 ); i = j + 1 ; } j ++; } reverse ( chars , 0 , n - 1 ); return new String ( chars ); } private void reverse ( char [] c , int i , int j ) { while ( i j ) swap ( c , i ++, j --); } private void swap ( char [] c , int i , int j ) { char t = c [ i ]; c [ i ] = c [ j ]; c [ j ] = t ; }","title":"58.1 \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f\u5217"},{"location":"algorithm/sword/solution/#582","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 Input: S= abcXYZdef K=3 Output: XYZdefabc \u89e3\u9898\u601d\u8def \u5148\u5c06 \"abc\" \u548c \"XYZdef\" \u5206\u522b\u7ffb\u8f6c\uff0c\u5f97\u5230 \"cbafedZYX\"\uff0c\u7136\u540e\u518d\u628a\u6574\u4e2a\u5b57\u7b26\u4e32\u7ffb\u8f6c\u5f97\u5230 \"XYZdefabc\"\u3002 public String LeftRotateString ( String str , int n ) { if ( n = str . length ()) return str ; char [] chars = str . toCharArray (); reverse ( chars , 0 , n - 1 ); reverse ( chars , n , chars . length - 1 ); reverse ( chars , 0 , chars . length - 1 ); return new String ( chars ); } private void reverse ( char [] chars , int i , int j ) { while ( i j ) swap ( chars , i ++, j --); } private void swap ( char [] chars , int i , int j ) { char t = chars [ i ]; chars [ i ] = chars [ j ]; chars [ j ] = t ; }","title":"58.2 \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32"},{"location":"algorithm/sword/solution/#59","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\u548c\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\uff0c\u627e\u51fa\u6240\u6709\u6ed1\u52a8\u7a97\u53e3\u91cc\u6570\u503c\u7684\u6700\u5927\u503c\u3002 \u4f8b\u5982\uff0c\u5982\u679c\u8f93\u5165\u6570\u7ec4 {2, 3, 4, 2, 6, 2, 5, 1} \u53ca\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f 3\uff0c\u90a3\u4e48\u4e00\u5171\u5b58\u5728 6 \u4e2a\u6ed1\u52a8\u7a97\u53e3\uff0c\u4ed6\u4eec\u7684\u6700\u5927\u503c\u5206\u522b\u4e3a {4, 4, 6, 6, 6, 5}\u3002 \u89e3\u9898\u601d\u8def public ArrayList Integer maxInWindows ( int [] num , int size ) { ArrayList Integer ret = new ArrayList (); if ( size num . length || size 1 ) return ret ; PriorityQueue Integer heap = new PriorityQueue (( o1 , o2 ) - o2 - o1 ); /* \u5927\u9876\u5806 */ for ( int i = 0 ; i size ; i ++) heap . add ( num [ i ]); ret . add ( heap . peek ()); for ( int i = 0 , j = i + size ; j num . length ; i ++, j ++) { /* \u7ef4\u62a4\u4e00\u4e2a\u5927\u5c0f\u4e3a size \u7684\u5927\u9876\u5806 */ heap . remove ( num [ i ]); heap . add ( num [ j ]); ret . add ( heap . peek ()); } return ret ; }","title":"59. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c"},{"location":"algorithm/sword/solution/#60-n","text":"Lintcode \u9898\u76ee\u63cf\u8ff0 \u628a n \u4e2a\u9ab0\u5b50\u4ecd\u5728\u5730\u4e0a\uff0c\u6c42\u70b9\u6570\u548c\u4e3a s \u7684\u6982\u7387\u3002","title":"60. n \u4e2a\u9ab0\u5b50\u7684\u70b9\u6570"},{"location":"algorithm/sword/solution/#_13","text":"\u4f7f\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 dp \u5b58\u50a8\u70b9\u6570\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5176\u4e2d dp[i][j] \u8868\u793a\u524d i \u4e2a\u9ab0\u5b50\u4ea7\u751f\u70b9\u6570 j \u7684\u6b21\u6570\u3002 \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N 2 ) public List Map . Entry Integer , Double dicesSum ( int n ) { final int face = 6 ; final int pointNum = face * n ; long [][] dp = new long [ n + 1 ][ pointNum + 1 ]; for ( int i = 1 ; i = face ; i ++) dp [ 1 ][ i ] = 1 ; for ( int i = 2 ; i = n ; i ++) for ( int j = i ; j = pointNum ; j ++) /* \u4f7f\u7528 i \u4e2a\u9ab0\u5b50\u6700\u5c0f\u70b9\u6570\u4e3a i */ for ( int k = 1 ; k = face k = j ; k ++) dp [ i ][ j ] += dp [ i - 1 ][ j - k ]; final double totalNum = Math . pow ( 6 , n ); List Map . Entry Integer , Double ret = new ArrayList (); for ( int i = n ; i = pointNum ; i ++) ret . add ( new AbstractMap . SimpleEntry ( i , dp [ n ][ i ] / totalNum )); return ret ; }","title":"\u52a8\u6001\u89c4\u5212\u89e3\u6cd5"},{"location":"algorithm/sword/solution/#_14","text":"\u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(N) public List Map . Entry Integer , Double dicesSum ( int n ) { final int face = 6 ; final int pointNum = face * n ; long [][] dp = new long [ 2 ][ pointNum + 1 ]; for ( int i = 1 ; i = face ; i ++) dp [ 0 ][ i ] = 1 ; int flag = 1 ; /* \u65cb\u8f6c\u6807\u8bb0 */ for ( int i = 2 ; i = n ; i ++, flag = 1 - flag ) { for ( int j = 0 ; j = pointNum ; j ++) dp [ flag ][ j ] = 0 ; /* \u65cb\u8f6c\u6570\u7ec4\u6e05\u96f6 */ for ( int j = i ; j = pointNum ; j ++) for ( int k = 1 ; k = face k = j ; k ++) dp [ flag ][ j ] += dp [ 1 - flag ][ j - k ]; } final double totalNum = Math . pow ( 6 , n ); List Map . Entry Integer , Double ret = new ArrayList (); for ( int i = n ; i = pointNum ; i ++) ret . add ( new AbstractMap . SimpleEntry ( i , dp [ 1 - flag ][ i ] / totalNum )); return ret ; }","title":"\u52a8\u6001\u89c4\u5212\u89e3\u6cd5 + \u65cb\u8f6c\u6570\u7ec4"},{"location":"algorithm/sword/solution/#61","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u4e94\u5f20\u724c\uff0c\u5176\u4e2d\u5927\u5c0f\u9b3c\u4e3a\u765e\u5b50\uff0c\u724c\u9762\u5927\u5c0f\u4e3a 0\u3002\u5224\u65ad\u8fd9\u4e94\u5f20\u724c\u662f\u5426\u80fd\u7ec4\u6210\u987a\u5b50\u3002 \u89e3\u9898\u601d\u8def public boolean isContinuous ( int [] nums ) { if ( nums . length 5 ) return false ; Arrays . sort ( nums ); // \u7edf\u8ba1\u765e\u5b50\u6570\u91cf int cnt = 0 ; for ( int num : nums ) if ( num == 0 ) cnt ++; // \u4f7f\u7528\u765e\u5b50\u53bb\u8865\u5168\u4e0d\u8fde\u7eed\u7684\u987a\u5b50 for ( int i = cnt ; i nums . length - 1 ; i ++) { if ( nums [ i + 1 ] == nums [ i ]) return false ; cnt -= nums [ i + 1 ] - nums [ i ] - 1 ; } return cnt = 0 ; }","title":"61. \u6251\u514b\u724c\u987a\u5b50"},{"location":"algorithm/sword/solution/#62","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8ba9\u5c0f\u670b\u53cb\u4eec\u56f4\u6210\u4e00\u4e2a\u5927\u5708\u3002\u7136\u540e\uff0c\u968f\u673a\u6307\u5b9a\u4e00\u4e2a\u6570 m\uff0c\u8ba9\u7f16\u53f7\u4e3a 0 \u7684\u5c0f\u670b\u53cb\u5f00\u59cb\u62a5\u6570\u3002\u6bcf\u6b21\u558a\u5230 m-1 \u7684\u90a3\u4e2a\u5c0f\u670b\u53cb\u8981\u51fa\u5217\u5531\u9996\u6b4c\uff0c\u7136\u540e\u53ef\u4ee5\u5728\u793c\u54c1\u7bb1\u4e2d\u4efb\u610f\u7684\u6311\u9009\u793c\u7269\uff0c\u5e76\u4e14\u4e0d\u518d\u56de\u5230\u5708\u4e2d\uff0c\u4ece\u4ed6\u7684\u4e0b\u4e00\u4e2a\u5c0f\u670b\u53cb\u5f00\u59cb\uff0c\u7ee7\u7eed 0...m-1 \u62a5\u6570 .... \u8fd9\u6837\u4e0b\u53bb .... \u76f4\u5230\u5269\u4e0b\u6700\u540e\u4e00\u4e2a\u5c0f\u670b\u53cb\uff0c\u53ef\u4ee5\u4e0d\u7528\u8868\u6f14\u3002 \u89e3\u9898\u601d\u8def \u7ea6\u745f\u592b\u73af\uff0c\u5706\u5708\u957f\u5ea6\u4e3a n \u7684\u89e3\u53ef\u4ee5\u770b\u6210\u957f\u5ea6\u4e3a n-1 \u7684\u89e3\u518d\u52a0\u4e0a\u62a5\u6570\u7684\u957f\u5ea6 m\u3002\u56e0\u4e3a\u662f\u5706\u5708\uff0c\u6240\u4ee5\u6700\u540e\u9700\u8981\u5bf9 n \u53d6\u4f59\u3002 public int LastRemaining_Solution ( int n , int m ) { if ( n == 0 ) /* \u7279\u6b8a\u8f93\u5165\u7684\u5904\u7406 */ return - 1 ; if ( n == 1 ) /* \u9012\u5f52\u8fd4\u56de\u6761\u4ef6 */ return 0 ; return ( LastRemaining_Solution ( n - 1 , m ) + m ) % n ; }","title":"62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570"},{"location":"algorithm/sword/solution/#63","text":"Leetcode \u9898\u76ee\u63cf\u8ff0 \u53ef\u4ee5\u6709\u4e00\u6b21\u4e70\u5165\u548c\u4e00\u6b21\u5356\u51fa\uff0c\u90a3\u4e48\u4e70\u5165\u5fc5\u987b\u5728\u524d\u3002\u6c42\u6700\u5927\u6536\u76ca\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u8d2a\u5fc3\u7b56\u7565\uff0c\u5047\u8bbe\u7b2c i \u8f6e\u8fdb\u884c\u5356\u51fa\u64cd\u4f5c\uff0c\u4e70\u5165\u64cd\u4f5c\u4ef7\u683c\u5e94\u8be5\u5728 i \u4e4b\u524d\u5e76\u4e14\u4ef7\u683c\u6700\u4f4e\u3002 public int maxProfit ( int [] prices ) { if ( prices == null || prices . length == 0 ) return 0 ; int soFarMin = prices [ 0 ]; int maxProfit = 0 ; for ( int i = 1 ; i prices . length ; i ++) { soFarMin = Math . min ( soFarMin , prices [ i ]); maxProfit = Math . max ( maxProfit , prices [ i ] - soFarMin ); } return maxProfit ; }","title":"63. \u80a1\u7968\u7684\u6700\u5927\u5229\u6da6"},{"location":"algorithm/sword/solution/#64-123n","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case \u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5 A ? B : C\u3002 \u89e3\u9898\u601d\u8def \u4f7f\u7528\u9012\u5f52\u89e3\u6cd5\u6700\u91cd\u8981\u7684\u662f\u6307\u5b9a\u8fd4\u56de\u6761\u4ef6\uff0c\u4f46\u662f\u672c\u9898\u65e0\u6cd5\u76f4\u63a5\u4f7f\u7528 if \u8bed\u53e5\u6765\u6307\u5b9a\u8fd4\u56de\u6761\u4ef6\u3002 \u6761\u4ef6\u4e0e \u5177\u6709\u77ed\u8def\u539f\u5219\uff0c\u5373\u5728\u7b2c\u4e00\u4e2a\u6761\u4ef6\u8bed\u53e5\u4e3a false \u7684\u60c5\u51b5\u4e0b\u4e0d\u4f1a\u53bb\u6267\u884c\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u8bed\u53e5\u3002\u5229\u7528\u8fd9\u4e00\u7279\u6027\uff0c\u5c06\u9012\u5f52\u7684\u8fd4\u56de\u6761\u4ef6\u53d6\u975e\u7136\u540e\u4f5c\u4e3a \u7684\u7b2c\u4e00\u4e2a\u6761\u4ef6\u8bed\u53e5\uff0c\u9012\u5f52\u7684\u4e3b\u4f53\u8f6c\u6362\u4e3a\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u8bed\u53e5\uff0c\u90a3\u4e48\u5f53\u9012\u5f52\u7684\u8fd4\u56de\u6761\u4ef6\u4e3a true \u7684\u60c5\u51b5\u4e0b\u5c31\u4e0d\u4f1a\u6267\u884c\u9012\u5f52\u7684\u4e3b\u4f53\u90e8\u5206\uff0c\u9012\u5f52\u8fd4\u56de\u3002 \u672c\u9898\u7684\u9012\u5f52\u8fd4\u56de\u6761\u4ef6\u4e3a n = 0\uff0c\u53d6\u975e\u540e\u5c31\u662f n 0\uff1b\u9012\u5f52\u7684\u4e3b\u4f53\u90e8\u5206\u4e3a sum += Sum_Solution(n - 1)\uff0c\u8f6c\u6362\u4e3a\u6761\u4ef6\u8bed\u53e5\u540e\u5c31\u662f (sum += Sum_Solution(n - 1)) 0\u3002 public int Sum_Solution ( int n ) { int sum = n ; boolean b = ( n 0 ) (( sum += Sum_Solution ( n - 1 )) 0 ); return sum ; }","title":"64. \u6c42 1+2+3+...+n"},{"location":"algorithm/sword/solution/#65","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4e24\u4e2a\u6574\u6570\u4e4b\u548c\uff0c\u8981\u6c42\u4e0d\u5f97\u4f7f\u7528 +\u3001-\u3001*\u3001/ \u56db\u5219\u8fd0\u7b97\u7b26\u53f7\u3002 \u89e3\u9898\u601d\u8def a ^ b \u8868\u793a\u6ca1\u6709\u8003\u8651\u8fdb\u4f4d\u7684\u60c5\u51b5\u4e0b\u4e24\u6570\u7684\u548c\uff0c(a b) 1 \u5c31\u662f\u8fdb\u4f4d\u3002 \u9012\u5f52\u4f1a\u7ec8\u6b62\u7684\u539f\u56e0\u662f (a b) 1 \u6700\u53f3\u8fb9\u4f1a\u591a\u4e00\u4e2a 0\uff0c\u90a3\u4e48\u7ee7\u7eed\u9012\u5f52\uff0c\u8fdb\u4f4d\u6700\u53f3\u8fb9\u7684 0 \u4f1a\u6162\u6162\u589e\u591a\uff0c\u6700\u540e\u8fdb\u4f4d\u4f1a\u53d8\u4e3a 0\uff0c\u9012\u5f52\u7ec8\u6b62\u3002 public int Add ( int a , int b ) { return b == 0 ? a : Add ( a ^ b , ( a b ) 1 ); }","title":"65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5"},{"location":"algorithm/sword/solution/#66","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 A[0, 1,..., n-1]\uff0c\u8bf7\u6784\u5efa\u4e00\u4e2a\u6570\u7ec4 B[0, 1,..., n-1]\uff0c\u5176\u4e2d B \u4e2d\u7684\u5143\u7d20 B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]\u3002\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u9664\u6cd5\u3002 \u89e3\u9898\u601d\u8def public int [] multiply ( int [] A ) { int n = A . length ; int [] B = new int [ n ]; for ( int i = 0 , product = 1 ; i n ; product *= A [ i ], i ++) /* \u4ece\u5de6\u5f80\u53f3\u7d2f\u4e58 */ B [ i ] = product ; for ( int i = n - 1 , product = 1 ; i = 0 ; product *= A [ i ], i --) /* \u4ece\u53f3\u5f80\u5de6\u7d2f\u4e58 */ B [ i ] *= product ; return B ; }","title":"66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4"},{"location":"algorithm/sword/solution/#67","text":"NowCoder \u9898\u76ee\u63cf\u8ff0 \u5c06\u4e00\u4e2a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a\u6574\u6570\uff0c\u5b57\u7b26\u4e32\u4e0d\u662f\u4e00\u4e2a\u5408\u6cd5\u7684\u6570\u503c\u5219\u8fd4\u56de 0\uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570\u7684\u5e93\u51fd\u6570\u3002 Iuput: +2147483647 1a33 Output: 2147483647 0 \u89e3\u9898\u601d\u8def public int StrToInt ( String str ) { if ( str == null || str . length () == 0 ) return 0 ; boolean isNegative = str . charAt ( 0 ) == - ; int ret = 0 ; for ( int i = 0 ; i str . length (); i ++) { char c = str . charAt ( i ); if ( i == 0 ( c == + || c == - )) /* \u7b26\u53f7\u5224\u5b9a */ continue ; if ( c 0 || c 9 ) /* \u975e\u6cd5\u8f93\u5165 */ return 0 ; ret = ret * 10 + ( c - 0 ); } return isNegative ? - ret : ret ; }","title":"67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570"},{"location":"algorithm/sword/solution/#68","text":"","title":"68. \u6811\u4e2d\u4e24\u4e2a\u8282\u70b9\u7684\u6700\u4f4e\u516c\u5171\u7956\u5148"},{"location":"algorithm/sword/solution/#_15","text":"Leetcode : 235. Lowest Common Ancestor of a Binary Search Tree \u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\uff0c\u4e24\u4e2a\u8282\u70b9 p, q \u7684\u516c\u5171\u7956\u5148 root \u6ee1\u8db3 root.val = p.val root.val = q.val\u3002 public TreeNode lowestCommonAncestor ( TreeNode root , TreeNode p , TreeNode q ) { if ( root == null ) return root ; if ( root . val p . val root . val q . val ) return lowestCommonAncestor ( root . left , p , q ); if ( root . val p . val root . val q . val ) return lowestCommonAncestor ( root . right , p , q ); return root ; }","title":"\u4e8c\u53c9\u67e5\u627e\u6811"},{"location":"algorithm/sword/solution/#_16","text":"Leetcode : 236. Lowest Common Ancestor of a Binary Tree \u5728\u5de6\u53f3\u5b50\u6811\u4e2d\u67e5\u627e\u662f\u5426\u5b58\u5728 p \u6216\u8005 q\uff0c\u5982\u679c p \u548c q \u5206\u522b\u5728\u4e24\u4e2a\u5b50\u6811\u4e2d\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u6839\u8282\u70b9\u5c31\u662f\u6700\u4f4e\u516c\u5171\u7956\u5148\u3002 public TreeNode lowestCommonAncestor ( TreeNode root , TreeNode p , TreeNode q ) { if ( root == null || root == p || root == q ) return root ; TreeNode left = lowestCommonAncestor ( root . left , p , q ); TreeNode right = lowestCommonAncestor ( root . right , p , q ); return left == null ? right : right == null ? left : root ; }","title":"\u666e\u901a\u4e8c\u53c9\u6811"},{"location":"algorithm/sword/solution/#reference","text":"\u5251\u6307Offer \u5251\u6307Offer\u7684Java\u5b9e\u73b0 \u5251\u6307Offer\u9898\u89e3","title":"Reference"}]}