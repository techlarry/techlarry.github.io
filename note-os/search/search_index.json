{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"osc/ch1/","text":"Operating System Concepts 1 - Introduction 1. What operating system do There is no completely adequate definition of operating system. A simple viewpoint is that it includes everything a vendor ships. A more common definition is that the operating system is the one program running at all times on computer - usually called kernel . Three main purposes of an operating system are, manages a computer's hardware provides a basis for application programs acts as an intermediary between the user and hardware The operating system includes the always running kernel , middleware frameworks that ease application development and provide features, and system programs that aid in managing the system while it is running. Anything between the kernel and user applications is considered middleware (\u4e2d\u95f4\u4ef6) [ 1 ]. 2 Computer-system organisation A computer system can be divided roughly into four components: the hardware , the operating system , the application programs , and a user . A computer system (\u8ba1\u7b97\u673a\u7cfb\u7edf) consists of one or more CPUs and a number of device controllers (\u8bbe\u5907\u63a7\u5236\u5668) connected through a common bus (\u603b\u7ebf) that provides access between components and shared memory . A device controller maintains some local buffer storage (\u5c40\u90e8\u7f13\u51b2\u5b58\u50a8) and a set of special-purpose registers . Typically, operating systems have a device driver (\u8bbe\u5907\u9a71\u52a8) for each device controller. This device driver understands the device controller and provides the rest of the operating system with a uniform interface to the device Interrupt When the CPU is interrupted , it stops what it is doing and immediately transfers execution to a fixed location. The fixed location usually contains the starting address where the service routine for the interrupt is located. The interrupt routine (\u4e2d\u65ad\u7a0b\u5e8f) is called indirectly through the interrupt vector table\uff08\u4e2d\u65ad\u5411\u91cf\u8868). Generally, the table of pointers is stored in low memory (the first hundred or so locations). These locations hold the addresses of the interrupt service routines for the various devices. Interrupt vector is then indexed by a unique number(interrupt vector number, \u4e2d\u65ad\u5411\u91cf\u53f7) interrupt priority levels(\u4e2d\u65ad\u4f18\u5148\u7ea7) Some services are provided outside of the kernel by system programs that are loaded into memory at boot time to become system daemons , which run the entire time the kernel is running. interrupt, exception, trap Unfortunately, there is no clear consensus as to the exact meaning of these terms(exceptions, faults, aborts, traps, and interrupts). Different authors adopt different terms to their own use [ ref ]. trap (\u9677\u9631) or exception (\u5f02\u5e38): a software-generated interrupt either by an error\uff08e.g. division by zero, or invalid memory access or by a system call. * usual way to invoke a kernel routine (a system call) interrupt (\u4e2d\u65ad): generated by the hardware (devices like the hard disk, graphics card, I/O ports, etc). multiprogramming and multitasking Multiprogramming (\u591a\u9053\u7a0b\u5e8f) explained: The operating system keeps several processes in memory simultaneously. The operating system picks and begins to execute one of these processes. Eventually, the process may have to wait for some task, such as an I/O operation, to complete. When that process needs to wait, the CPU switches to another process, and so on. Eventually, the first process finishes waiting and gets the CPU back. As long as at least one process needs to execute, the CPU is never idle . Multitasking (\u591a\u4efb\u52a1) is a logical extension of multiprogramming. In multitasking systems, the CPU executes multiple processes by switching among them, but the switches occur frequently , providing the user with a fast response time. dual-mode In order to ensure the proper execution of the system, we must be able to distinguish between the execution of operating-system code\uff08 kernel mode \uff09and user-defined code ( user mode ). Mode bit (\u6a21\u5f0f\u4f4d), is added to the hardware of the computer to indicate the current mode: kernel (0) or user (1). The concept of modes can be extended beyond two modes. protection rings \uff08\u4fdd\u62a4\u73af) are mechanisms to protect data and functionality from faults (by improving fault tolerance) and malicious behavior (by providing computer security). For intel processors, ring 0 is kernel mode and ring 3 is user mode timer A timer (\u5b9a\u65f6\u5668) can be set to interrupt the computer after a specified period( usually, 100s hz) A variable timer is generally implemented by a fixed-rate clock and a counter. The operating system sets the counter. Every time the clock ticks, the counter is decremented. When the counter reaches 0, an interrupt occurs. 7 virtualization virtualization (\u865a\u62df\u5316) is a technology that allows us to abstract the hardware of a single computer into several different execution environments, thereby creating the illusion that each separate environment is running on its own private computer . * v.s. [different] Emulation involves simulating computer handware in software. 8 Free and Open-Source OS Open-source OS source code available opposite: closed-source OS Free OS source code available allow no-cost use, redistribution, and modification Arguably, open-source code is more secure than closed-source code because many more eyes are viewing the code. e.g. OS GNU/Linux FreeBSD Solaris","title":"Chapter 1: Introduction "},{"location":"osc/ch1/#operating-system-concepts-1-introduction","text":"","title":"Operating System Concepts 1 - Introduction"},{"location":"osc/ch1/#1-what-operating-system-do","text":"There is no completely adequate definition of operating system. A simple viewpoint is that it includes everything a vendor ships. A more common definition is that the operating system is the one program running at all times on computer - usually called kernel . Three main purposes of an operating system are, manages a computer's hardware provides a basis for application programs acts as an intermediary between the user and hardware The operating system includes the always running kernel , middleware frameworks that ease application development and provide features, and system programs that aid in managing the system while it is running. Anything between the kernel and user applications is considered middleware (\u4e2d\u95f4\u4ef6) [ 1 ].","title":"1. What operating system do"},{"location":"osc/ch1/#2-computer-system-organisation","text":"A computer system can be divided roughly into four components: the hardware , the operating system , the application programs , and a user . A computer system (\u8ba1\u7b97\u673a\u7cfb\u7edf) consists of one or more CPUs and a number of device controllers (\u8bbe\u5907\u63a7\u5236\u5668) connected through a common bus (\u603b\u7ebf) that provides access between components and shared memory . A device controller maintains some local buffer storage (\u5c40\u90e8\u7f13\u51b2\u5b58\u50a8) and a set of special-purpose registers . Typically, operating systems have a device driver (\u8bbe\u5907\u9a71\u52a8) for each device controller. This device driver understands the device controller and provides the rest of the operating system with a uniform interface to the device","title":"2 Computer-system organisation"},{"location":"osc/ch1/#interrupt","text":"When the CPU is interrupted , it stops what it is doing and immediately transfers execution to a fixed location. The fixed location usually contains the starting address where the service routine for the interrupt is located. The interrupt routine (\u4e2d\u65ad\u7a0b\u5e8f) is called indirectly through the interrupt vector table\uff08\u4e2d\u65ad\u5411\u91cf\u8868). Generally, the table of pointers is stored in low memory (the first hundred or so locations). These locations hold the addresses of the interrupt service routines for the various devices. Interrupt vector is then indexed by a unique number(interrupt vector number, \u4e2d\u65ad\u5411\u91cf\u53f7) interrupt priority levels(\u4e2d\u65ad\u4f18\u5148\u7ea7) Some services are provided outside of the kernel by system programs that are loaded into memory at boot time to become system daemons , which run the entire time the kernel is running.","title":"Interrupt"},{"location":"osc/ch1/#interrupt-exception-trap","text":"Unfortunately, there is no clear consensus as to the exact meaning of these terms(exceptions, faults, aborts, traps, and interrupts). Different authors adopt different terms to their own use [ ref ]. trap (\u9677\u9631) or exception (\u5f02\u5e38): a software-generated interrupt either by an error\uff08e.g. division by zero, or invalid memory access or by a system call. * usual way to invoke a kernel routine (a system call) interrupt (\u4e2d\u65ad): generated by the hardware (devices like the hard disk, graphics card, I/O ports, etc).","title":"interrupt, exception, trap"},{"location":"osc/ch1/#multiprogramming-and-multitasking","text":"Multiprogramming (\u591a\u9053\u7a0b\u5e8f) explained: The operating system keeps several processes in memory simultaneously. The operating system picks and begins to execute one of these processes. Eventually, the process may have to wait for some task, such as an I/O operation, to complete. When that process needs to wait, the CPU switches to another process, and so on. Eventually, the first process finishes waiting and gets the CPU back. As long as at least one process needs to execute, the CPU is never idle . Multitasking (\u591a\u4efb\u52a1) is a logical extension of multiprogramming. In multitasking systems, the CPU executes multiple processes by switching among them, but the switches occur frequently , providing the user with a fast response time.","title":"multiprogramming and multitasking"},{"location":"osc/ch1/#dual-mode","text":"In order to ensure the proper execution of the system, we must be able to distinguish between the execution of operating-system code\uff08 kernel mode \uff09and user-defined code ( user mode ). Mode bit (\u6a21\u5f0f\u4f4d), is added to the hardware of the computer to indicate the current mode: kernel (0) or user (1). The concept of modes can be extended beyond two modes. protection rings \uff08\u4fdd\u62a4\u73af) are mechanisms to protect data and functionality from faults (by improving fault tolerance) and malicious behavior (by providing computer security). For intel processors, ring 0 is kernel mode and ring 3 is user mode","title":"dual-mode"},{"location":"osc/ch1/#timer","text":"A timer (\u5b9a\u65f6\u5668) can be set to interrupt the computer after a specified period( usually, 100s hz) A variable timer is generally implemented by a fixed-rate clock and a counter. The operating system sets the counter. Every time the clock ticks, the counter is decremented. When the counter reaches 0, an interrupt occurs.","title":"timer"},{"location":"osc/ch1/#7-virtualization","text":"virtualization (\u865a\u62df\u5316) is a technology that allows us to abstract the hardware of a single computer into several different execution environments, thereby creating the illusion that each separate environment is running on its own private computer . * v.s. [different] Emulation involves simulating computer handware in software.","title":"7 virtualization"},{"location":"osc/ch1/#8-free-and-open-source-os","text":"Open-source OS source code available opposite: closed-source OS Free OS source code available allow no-cost use, redistribution, and modification Arguably, open-source code is more secure than closed-source code because many more eyes are viewing the code. e.g. OS GNU/Linux FreeBSD Solaris","title":"8 Free and Open-Source OS"}]}