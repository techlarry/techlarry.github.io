{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Zhenhua's Notes - Algorithm This site documents reading and learning notes. Search (function() { var cx = '011299089536274713055:ppqfpivtvxy'; var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true; gcse.src = 'https://cse.google.com/cse.js?cx=' + cx; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s); })(); TOC See Table of Contents . Books and Materials See Books and Materials . Roadmap See Roadmap .","title":"Home"},{"location":"#zhenhuas-notes-algorithm","text":"This site documents reading and learning notes.","title":"Zhenhua's Notes - Algorithm"},{"location":"#search","text":"(function() { var cx = '011299089536274713055:ppqfpivtvxy'; var gcse = document.createElement('script'); gcse.type = 'text/javascript'; gcse.async = true; gcse.src = 'https://cse.google.com/cse.js?cx=' + cx; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(gcse, s); })();","title":"Search"},{"location":"#toc","text":"See Table of Contents .","title":"TOC"},{"location":"#books-and-materials","text":"See Books and Materials .","title":"Books and Materials"},{"location":"#roadmap","text":"See Roadmap .","title":"Roadmap"},{"location":"books/","text":"Books and Materials The following is the primary reading list of books. Each chapter is organized as a single page; the included sections are noted with major concepts, and summary. Operating System CSAPP Computer System: A Programmer's Perspective, 3rd Edition by Randal E. Bryant and David A. O'Hallaron OSC Operating System Concepts (10th Edition) by Silberschatz Abraham, Galvin, Peter B., Gagne, Greg DataBase MySQL Learning MySQL and MariaDB by Russell Dyer Java HFJ Head first java, 2nd Edition by Kathy Sierra and Bert Bates TIJ Thinking in Java, 4th Edition by Bruce Eckel UJVM \u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a, 2nd Edition by \u5468\u5fd7\u660e BigData Hadoop Hadoop: The Definitive Guide, 4th Edition by Tom White Spark Learning Spark: Lighting-Fast Data Analysis by Tom White GDM A Programmer's Guide to Data Mining by Ron Zacharski Algorithm Algorithm, Princeton Algorithm, 4th Edition by Robert Sedgewick and Kevin Wayne Materials CS61B CS61B Data Structures, Berkeley Instructor: Josh Hug","title":"Books"},{"location":"books/#books-and-materials","text":"The following is the primary reading list of books. Each chapter is organized as a single page; the included sections are noted with major concepts, and summary.","title":"Books and Materials"},{"location":"books/#operating-system","text":"","title":"Operating System"},{"location":"books/#csapp","text":"Computer System: A Programmer's Perspective, 3rd Edition by Randal E. Bryant and David A. O'Hallaron","title":"CSAPP"},{"location":"books/#osc","text":"Operating System Concepts (10th Edition) by Silberschatz Abraham, Galvin, Peter B., Gagne, Greg","title":"OSC"},{"location":"books/#database","text":"","title":"DataBase"},{"location":"books/#mysql","text":"Learning MySQL and MariaDB by Russell Dyer","title":"MySQL"},{"location":"books/#java","text":"","title":"Java"},{"location":"books/#hfj","text":"Head first java, 2nd Edition by Kathy Sierra and Bert Bates","title":"HFJ"},{"location":"books/#tij","text":"Thinking in Java, 4th Edition by Bruce Eckel","title":"TIJ"},{"location":"books/#ujvm","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a, 2nd Edition by \u5468\u5fd7\u660e","title":"UJVM"},{"location":"books/#bigdata","text":"","title":"BigData"},{"location":"books/#hadoop","text":"Hadoop: The Definitive Guide, 4th Edition by Tom White","title":"Hadoop"},{"location":"books/#spark","text":"Learning Spark: Lighting-Fast Data Analysis by Tom White","title":"Spark"},{"location":"books/#gdm","text":"A Programmer's Guide to Data Mining by Ron Zacharski","title":"GDM"},{"location":"books/#algorithm","text":"","title":"Algorithm"},{"location":"books/#algorithm-princeton","text":"Algorithm, 4th Edition by Robert Sedgewick and Kevin Wayne","title":"Algorithm, Princeton"},{"location":"books/#materials","text":"","title":"Materials"},{"location":"books/#cs61b","text":"CS61B Data Structures, Berkeley Instructor: Josh Hug","title":"CS61B"},{"location":"toc/","text":"Table of Contents Shortcuts APUE - x86 assembly - Bash - BD - C - CLRS - CNAPP - CNSPP - CSN - DDA - DevOps - x86 disassembly - Golang - GOPL - HTAE - ICND1 - ICND2 - iptables - LKD - LSP - Nginx - PER - PIC - Python - Ruby - SPEC - TCPIP - TCPv1 - TLPI - TWGR - UNP - UTLK - Vim Contents Name Status Progress APUE Backlog Almost Done x86 assembly Backlog Almost Done Bash Future Started BD Discontinued First Half C Stub - CLRS Discontinued Started CNAPP Future Started CNSPP Backlog Started CSN Active First Half DDA Active Started DevOps Future Second Half x86 disassembly Future Started Golang Discontinued First Half GOPL Active Almost Done HTAE Backlog Started ICND1 Future Started ICND2 Future Started iptables Stub - LKD Active Second Half LSP Backlog Started Nginx Stub - PER Future Started PIC Future Started Python Stub - Ruby Discontinued First Half SPEC Backlog First Half TCPIP Backlog Started TCPv1 Backlog First Half TLPI Backlog Started TWGR Backlog Started UNP Backlog First Half UTLK Backlog First Half Vim Stub - Note: Active items are of P0 priority per OKR , and are in bold. All other items in the OKR are in backlog . Future items are not in the OKR but are likely to be revisited in the future. Stub items are not intended as notes. For progress, started : 15%; first half : 15% ~ 50%; second half : 50% ~ 85%; almost done : 85% ~ 100%; complete : 100%. For full titles, see Books and Materials .","title":"Toc"},{"location":"toc/#table-of-contents","text":"","title":"Table of Contents"},{"location":"toc/#shortcuts","text":"APUE - x86 assembly - Bash - BD - C - CLRS - CNAPP - CNSPP - CSN - DDA - DevOps - x86 disassembly - Golang - GOPL - HTAE - ICND1 - ICND2 - iptables - LKD - LSP - Nginx - PER - PIC - Python - Ruby - SPEC - TCPIP - TCPv1 - TLPI - TWGR - UNP - UTLK - Vim","title":"Shortcuts"},{"location":"toc/#contents","text":"Name Status Progress APUE Backlog Almost Done x86 assembly Backlog Almost Done Bash Future Started BD Discontinued First Half C Stub - CLRS Discontinued Started CNAPP Future Started CNSPP Backlog Started CSN Active First Half DDA Active Started DevOps Future Second Half x86 disassembly Future Started Golang Discontinued First Half GOPL Active Almost Done HTAE Backlog Started ICND1 Future Started ICND2 Future Started iptables Stub - LKD Active Second Half LSP Backlog Started Nginx Stub - PER Future Started PIC Future Started Python Stub - Ruby Discontinued First Half SPEC Backlog First Half TCPIP Backlog Started TCPv1 Backlog First Half TLPI Backlog Started TWGR Backlog Started UNP Backlog First Half UTLK Backlog First Half Vim Stub - Note: Active items are of P0 priority per OKR , and are in bold. All other items in the OKR are in backlog . Future items are not in the OKR but are likely to be revisited in the future. Stub items are not intended as notes. For progress, started : 15%; first half : 15% ~ 50%; second half : 50% ~ 85%; almost done : 85% ~ 100%; complete : 100%. For full titles, see Books and Materials .","title":"Contents"},{"location":"algorithm/","text":"Algorithm AlgorithmPrinceton Topic 1: UnionFind Topic 2: StackQueue Topic 3: Sort Topic 4: PriorityQueues Topic 5: Symbol Tables Topic 6: Balanced Search Trees Topic 8: Hash Table Topic 8: Graph AlgorithmStanford Topic: Dynammic Programming Topic: Heap Topic: Graph Topic: Greedy Algorithm CS61B Lab1: javac, java, git Lab2: Unit Testing with JUnit and IntLists Lab3: Unit Testing with JUnit, Debugging","title":"Contents"},{"location":"algorithm/#algorithm","text":"","title":"Algorithm"},{"location":"algorithm/#algorithmprinceton","text":"Topic 1: UnionFind Topic 2: StackQueue Topic 3: Sort Topic 4: PriorityQueues Topic 5: Symbol Tables Topic 6: Balanced Search Trees Topic 8: Hash Table Topic 8: Graph","title":"AlgorithmPrinceton"},{"location":"algorithm/#algorithmstanford","text":"Topic: Dynammic Programming Topic: Heap Topic: Graph Topic: Greedy Algorithm","title":"AlgorithmStanford"},{"location":"algorithm/#cs61b","text":"Lab1: javac, java, git Lab2: Unit Testing with JUnit and IntLists Lab3: Unit Testing with JUnit, Debugging","title":"CS61B"},{"location":"algorithm/algorithmPrinceton/","text":"AlgorithmPrinceton Topic 1: UnionFind Topic 2: StackQueue Topic 3: Sort Topic 4: PriorityQueues Topic 5: Symbol Tables Topic 6: Balanced Search Trees Topic 8: Hash Table Topic 8: Graph","title":"Contents"},{"location":"algorithm/algorithmPrinceton/#algorithmprinceton","text":"Topic 1: UnionFind Topic 2: StackQueue Topic 3: Sort Topic 4: PriorityQueues Topic 5: Symbol Tables Topic 6: Balanced Search Trees Topic 8: Hash Table Topic 8: Graph","title":"AlgorithmPrinceton"},{"location":"algorithm/algorithmPrinceton/bst/","text":"Topic 6: Balanced Search Trees Binary Search Tree Balanced Search Trees k-d Tree Binary Search Tree have poor worst-case performance. Balanced Search Trees are guaranteed to be logarithmic, no matter what sequence of keys is used to construct them. 2-3 Search Trees Definition A 2-3 search tree is a tree that is either empty or A 2- node , with one key (and associated value) and two links, a left link to a 2-3 search tree with smaller keys, and a right link to a 2-3 search tree with larger keys A 3- node , with two keys (and associated values) and three links, a left link to a 2-3 search tree with smaller keys, a middle link to a 2-3 search tree with keys between the node s keys, and a right link to a 2-3 search tree with larger keys As usual, we refer to a link to an empty tree as a null link. A perfectly balanced 2-3 search tree is one whose null links are all the same distance from the root. Search To determine whether a key is in the tree, we compare it against the keys at the root. If it is equal to any of them, we have a search hit; otherwise, we follow the link from the root to the subtree corresponding to the interval of key values that could contain the search key. If that link is null, we have a search miss; otherwise we recursively search in that subtree. Insert into a 2-node If the search terminates as a 2-node: we just replace the node with a 3-node containing its key and the new key to be inserted. Insert into a tree consisting of a single 3-node. To insert into a tiny 2-3 tree consisting of just a single 3-node, we temporarily put the new key into a 4- node , which has 3 keys and four links. It is easy to convert a 4- node into a 2-3 tree made up of three 2-nodes, one with the middle key (at the root), one with the smallest of the three keys (pointed to by the left link of the root), and one with the largest of the three keys (pointed to by the right link of the root). Insert into a 3-node whose parent is a 2-node Making a temporary 4-node, then splitting the 4-node instead of creating a new node to hold the middle key, we move the middle key to the node's parent. Insert into a 3-node whose parent is a 3-node. Global properties Moreover, these local transformations preserve the global properties that the tree is ordered and perfectly balanced: the number of links on the path from the root to any null link is the same. Unlike standard BSTs, which grow down from the top, 2-3 trees grow up from the bottom . Analysis Search and insert operations in a 2-3 tree with N keys are guaranteed to visit at most \\lg N \\lg N nodes. Red-black BSTs Although 2-3 search tree guarantee good worst-case performance, it is inconvenient to implement because there are numerous different cases to be handled. maintain two different types of nodes, compare search keys against each of the keys in the nodes, copy links and other information from one type of node to another convert nodes from one type to another, and so forth. In this section, We will consider a simple representation of 2-3 search tree known as a red-black BST that leads to a natural implementation. Definition Red-black BSTs is BSTs having red and black links and satisfying the following three restrictions: Red links lean left. No node has two red links connected to it. The tree has perfect black balance : every path from the root to a null link has the same number of black links. Encoding 3-nodes The basic idea behind red-black BSTs is to encode 2-3 trees by starting with standard BSTs (which are made up of 2-nodes) and adding extra information to encode 3-nodes. We think of the links as being of two different types: red links, which bind together two 2-nodes to represent 3-nodes, black links, which bind together the 2-3 tree. Specifically, we represent 3-nodes as two 2-nodes connected by a single red link that leans left. We refer to BSTs that represent 2-3 trees in this way as red-black BSTs. A 1-1 correspondence If we draw the red links horizontally in a red-black BST, all of the null links are the same distance from the root, and if we then collapse together the nodes connected by red links, the result is a 2-3 tree. Conversely, if we draw 3-nodes in a 2-3 tree as two 2-nodes connected by a red link that leans left, then no node has two red links connected to it, and the tree has perfect black balance, since the black links correspond to the 2-3 tree links, which are perfectly balanced by definition. Color representation Since each node is pointed to by precisely one link (from its parent), we encode the color of links in nodes , by adding a boolean instance variable color to our Node data type, which is true if the link from the parent is red and false if it is black. By convention, null links are black. private static final boolean RED = true ; private static final boolean BLACK = false ; private class Node { private Key key ; // key private Value val ; // associated data private Node left , right ; // links to left and right subtrees private boolean color ; // color of parent link private int size ; // subtree count public Node ( Key key , Value val , boolean color , int size ) { this . key = key ; this . val = val ; this . color = color ; this . size = size ; } } private boolean isRed ( Node x ) { if ( x == null ) return false ; return x . color == RED ; } Rotations The implementation that we will consider might allow right-leaning red links or two red-links in a row during an operation, but it always corrects these conditions before completion, through judicious use of an operation called rotation that switches orientation of red links. If the right child is red and the left child is black, rotate left. If both the left child and its left child are red, rotate right. Flipping colors The implementation that we will consider might also allow a black parent to have two red children. The color flip operation flips the colors of the the two red children to black and the color of the black parent to red. Implementation: put() The code for the recursive put() for red-black BSTs is identical to put() in elementary BSTs except for the three if statements after the recursive calls, which provide near-perfect balance in the tree by maintaining a 1-1 correspondence with 2-3 trees, on the way up the search path. The first rotates left any right-leaning 3-node (or a right-leaning red link at the bottom of a temporary 4-node); The second rotates right the top link in a temporary 4-node with two left-leaning red links; The third flips colors to pass a red link up the tree (see text). // Red-black tree insertion. public void put ( Key key , Value val ) { root = insert ( root , key , val ); root . color = BLACK ; assert check (); } private Node put ( Node h , Key key , Value val ) { if ( h == null ) { n ++; return new Node ( key , val , RED ); } int cmp = key . compareTo ( h . key ); if ( cmp 0 ) h . left = put ( h . left , key , val ); else if ( cmp 0 ) h . right = put ( h . right , key , val ); else h . val = val ; // fix-up any right-leaning links if ( isRed ( h . right ) ! isRed ( h . left )) h = rotateLeft ( h ); if ( isRed ( h . left ) isRed ( h . left . left )) h = rotateRight ( h ); if ( isRed ( h . left ) isRed ( h . right )) flipColors ( h ); return h ; } Application : Kd Tree k-d Tree is invented in 1970s by Jon Bentley. Its name originally meant \"3d-trees, 4d-trees\", where k was the number of dimensions. Its Idea is simple: Each level of the tree compares against 1 dimension. Insert The algorithms for search and insert are similar to those for BSTs, but at the level cd cd (cut dimension) we use the cd cd th coordinate (if the point to be inserted has a smaller coordinate than the point at the root, go left; otherwise go right); // Insert a point public void put ( Point p ) { root = put ( p , root , 0 ); } // put a point into current subtree. // @param p: the point to put // @param x: the root of the current subtree // @param cd: cut dim private KDNode put ( Point p , KDNode x , int cd ) { if ( x == null ) { size ++; return new KDNode ( p ); } if ( p . equals ( x . p )) ; // the point repeats, only contain one copy else if ( p . get ( cd ) x . p . get ( cd )) x . left = put ( p , x . left , ( cd + 1 ) % dim ); else x . right = put ( p , x . right , ( cd + 1 ) % dim ); return x ; } Nearest Neighbor /** * A nearest neighbor in the set to point p; null if the set is empty * @param p: an point * @return a nearest neighbor, null if the set is empty */ public Point nearestNeighbor ( Point p ) { minDistanceSquared = Double . POSITIVE_INFINITY ; nearestPoint = null ; nearestNeighbor ( p , root , 0 ); return nearestPoint ; } private void nearestNeighbor ( Point p , KDNode x , int cd ) { // if this bounding box is too far, do nothing if ( x == null ) return ; // if this point is better than the best: double distanceSquared = p . distanceSquaredTo ( x . p ); if ( distanceSquared minDistanceSquared ) { minDistanceSquared = distanceSquared ; nearestPoint = x . p ; } // visit subtrees is most promising order: if ( p . get ( cd ) x . p . get ( cd )) { nearestNeighbor ( p , x . left , ( cd + 1 ) % dim ); if ( p . get ( cd ) + distanceSquared x . p . get ( cd )) nearestNeighbor ( p , x . right , ( cd + 1 ) % dim ); } else { nearestNeighbor ( p , x . right , ( cd + 1 ) % dim ); if ( p . get ( cd ) - distanceSquared = x . p . get ( cd )) nearestNeighbor ( p , x . right , ( cd + 1 ) % dim ); } }","title":"Topic 6: Balanced Search Trees"},{"location":"algorithm/algorithmPrinceton/bst/#topic-6-balanced-search-trees","text":"Binary Search Tree Balanced Search Trees k-d Tree Binary Search Tree have poor worst-case performance. Balanced Search Trees are guaranteed to be logarithmic, no matter what sequence of keys is used to construct them.","title":"Topic 6: Balanced Search Trees"},{"location":"algorithm/algorithmPrinceton/bst/#2-3-search-trees","text":"Definition A 2-3 search tree is a tree that is either empty or A 2- node , with one key (and associated value) and two links, a left link to a 2-3 search tree with smaller keys, and a right link to a 2-3 search tree with larger keys A 3- node , with two keys (and associated values) and three links, a left link to a 2-3 search tree with smaller keys, a middle link to a 2-3 search tree with keys between the node s keys, and a right link to a 2-3 search tree with larger keys As usual, we refer to a link to an empty tree as a null link. A perfectly balanced 2-3 search tree is one whose null links are all the same distance from the root.","title":"2-3 Search Trees"},{"location":"algorithm/algorithmPrinceton/bst/#search","text":"To determine whether a key is in the tree, we compare it against the keys at the root. If it is equal to any of them, we have a search hit; otherwise, we follow the link from the root to the subtree corresponding to the interval of key values that could contain the search key. If that link is null, we have a search miss; otherwise we recursively search in that subtree.","title":"Search"},{"location":"algorithm/algorithmPrinceton/bst/#insert-into-a-2-node","text":"If the search terminates as a 2-node: we just replace the node with a 3-node containing its key and the new key to be inserted.","title":"Insert into a 2-node"},{"location":"algorithm/algorithmPrinceton/bst/#insert-into-a-tree-consisting-of-a-single-3-node","text":"To insert into a tiny 2-3 tree consisting of just a single 3-node, we temporarily put the new key into a 4- node , which has 3 keys and four links. It is easy to convert a 4- node into a 2-3 tree made up of three 2-nodes, one with the middle key (at the root), one with the smallest of the three keys (pointed to by the left link of the root), and one with the largest of the three keys (pointed to by the right link of the root).","title":"Insert into a tree consisting of a single 3-node."},{"location":"algorithm/algorithmPrinceton/bst/#insert-into-a-3-node-whose-parent-is-a-2-node","text":"Making a temporary 4-node, then splitting the 4-node instead of creating a new node to hold the middle key, we move the middle key to the node's parent.","title":"Insert into a 3-node whose parent is a 2-node"},{"location":"algorithm/algorithmPrinceton/bst/#insert-into-a-3-node-whose-parent-is-a-3-node","text":"","title":"Insert into a 3-node whose parent is a 3-node."},{"location":"algorithm/algorithmPrinceton/bst/#global-properties","text":"Moreover, these local transformations preserve the global properties that the tree is ordered and perfectly balanced: the number of links on the path from the root to any null link is the same. Unlike standard BSTs, which grow down from the top, 2-3 trees grow up from the bottom .","title":"Global properties"},{"location":"algorithm/algorithmPrinceton/bst/#analysis","text":"Search and insert operations in a 2-3 tree with N keys are guaranteed to visit at most \\lg N \\lg N nodes.","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/bst/#red-black-bsts","text":"Although 2-3 search tree guarantee good worst-case performance, it is inconvenient to implement because there are numerous different cases to be handled. maintain two different types of nodes, compare search keys against each of the keys in the nodes, copy links and other information from one type of node to another convert nodes from one type to another, and so forth. In this section, We will consider a simple representation of 2-3 search tree known as a red-black BST that leads to a natural implementation. Definition Red-black BSTs is BSTs having red and black links and satisfying the following three restrictions: Red links lean left. No node has two red links connected to it. The tree has perfect black balance : every path from the root to a null link has the same number of black links.","title":"Red-black BSTs"},{"location":"algorithm/algorithmPrinceton/bst/#encoding-3-nodes","text":"The basic idea behind red-black BSTs is to encode 2-3 trees by starting with standard BSTs (which are made up of 2-nodes) and adding extra information to encode 3-nodes. We think of the links as being of two different types: red links, which bind together two 2-nodes to represent 3-nodes, black links, which bind together the 2-3 tree. Specifically, we represent 3-nodes as two 2-nodes connected by a single red link that leans left. We refer to BSTs that represent 2-3 trees in this way as red-black BSTs.","title":"Encoding 3-nodes"},{"location":"algorithm/algorithmPrinceton/bst/#a-1-1-correspondence","text":"If we draw the red links horizontally in a red-black BST, all of the null links are the same distance from the root, and if we then collapse together the nodes connected by red links, the result is a 2-3 tree. Conversely, if we draw 3-nodes in a 2-3 tree as two 2-nodes connected by a red link that leans left, then no node has two red links connected to it, and the tree has perfect black balance, since the black links correspond to the 2-3 tree links, which are perfectly balanced by definition.","title":"A 1-1 correspondence"},{"location":"algorithm/algorithmPrinceton/bst/#color-representation","text":"Since each node is pointed to by precisely one link (from its parent), we encode the color of links in nodes , by adding a boolean instance variable color to our Node data type, which is true if the link from the parent is red and false if it is black. By convention, null links are black. private static final boolean RED = true ; private static final boolean BLACK = false ; private class Node { private Key key ; // key private Value val ; // associated data private Node left , right ; // links to left and right subtrees private boolean color ; // color of parent link private int size ; // subtree count public Node ( Key key , Value val , boolean color , int size ) { this . key = key ; this . val = val ; this . color = color ; this . size = size ; } } private boolean isRed ( Node x ) { if ( x == null ) return false ; return x . color == RED ; }","title":"Color representation"},{"location":"algorithm/algorithmPrinceton/bst/#rotations","text":"The implementation that we will consider might allow right-leaning red links or two red-links in a row during an operation, but it always corrects these conditions before completion, through judicious use of an operation called rotation that switches orientation of red links. If the right child is red and the left child is black, rotate left. If both the left child and its left child are red, rotate right.","title":"Rotations"},{"location":"algorithm/algorithmPrinceton/bst/#flipping-colors","text":"The implementation that we will consider might also allow a black parent to have two red children. The color flip operation flips the colors of the the two red children to black and the color of the black parent to red.","title":"Flipping colors"},{"location":"algorithm/algorithmPrinceton/bst/#implementation-put","text":"The code for the recursive put() for red-black BSTs is identical to put() in elementary BSTs except for the three if statements after the recursive calls, which provide near-perfect balance in the tree by maintaining a 1-1 correspondence with 2-3 trees, on the way up the search path. The first rotates left any right-leaning 3-node (or a right-leaning red link at the bottom of a temporary 4-node); The second rotates right the top link in a temporary 4-node with two left-leaning red links; The third flips colors to pass a red link up the tree (see text). // Red-black tree insertion. public void put ( Key key , Value val ) { root = insert ( root , key , val ); root . color = BLACK ; assert check (); } private Node put ( Node h , Key key , Value val ) { if ( h == null ) { n ++; return new Node ( key , val , RED ); } int cmp = key . compareTo ( h . key ); if ( cmp 0 ) h . left = put ( h . left , key , val ); else if ( cmp 0 ) h . right = put ( h . right , key , val ); else h . val = val ; // fix-up any right-leaning links if ( isRed ( h . right ) ! isRed ( h . left )) h = rotateLeft ( h ); if ( isRed ( h . left ) isRed ( h . left . left )) h = rotateRight ( h ); if ( isRed ( h . left ) isRed ( h . right )) flipColors ( h ); return h ; }","title":"Implementation: put()"},{"location":"algorithm/algorithmPrinceton/bst/#application-kd-tree","text":"k-d Tree is invented in 1970s by Jon Bentley. Its name originally meant \"3d-trees, 4d-trees\", where k was the number of dimensions. Its Idea is simple: Each level of the tree compares against 1 dimension.","title":"Application : Kd Tree"},{"location":"algorithm/algorithmPrinceton/bst/#insert","text":"The algorithms for search and insert are similar to those for BSTs, but at the level cd cd (cut dimension) we use the cd cd th coordinate (if the point to be inserted has a smaller coordinate than the point at the root, go left; otherwise go right); // Insert a point public void put ( Point p ) { root = put ( p , root , 0 ); } // put a point into current subtree. // @param p: the point to put // @param x: the root of the current subtree // @param cd: cut dim private KDNode put ( Point p , KDNode x , int cd ) { if ( x == null ) { size ++; return new KDNode ( p ); } if ( p . equals ( x . p )) ; // the point repeats, only contain one copy else if ( p . get ( cd ) x . p . get ( cd )) x . left = put ( p , x . left , ( cd + 1 ) % dim ); else x . right = put ( p , x . right , ( cd + 1 ) % dim ); return x ; }","title":"Insert"},{"location":"algorithm/algorithmPrinceton/bst/#nearest-neighbor","text":"/** * A nearest neighbor in the set to point p; null if the set is empty * @param p: an point * @return a nearest neighbor, null if the set is empty */ public Point nearestNeighbor ( Point p ) { minDistanceSquared = Double . POSITIVE_INFINITY ; nearestPoint = null ; nearestNeighbor ( p , root , 0 ); return nearestPoint ; } private void nearestNeighbor ( Point p , KDNode x , int cd ) { // if this bounding box is too far, do nothing if ( x == null ) return ; // if this point is better than the best: double distanceSquared = p . distanceSquaredTo ( x . p ); if ( distanceSquared minDistanceSquared ) { minDistanceSquared = distanceSquared ; nearestPoint = x . p ; } // visit subtrees is most promising order: if ( p . get ( cd ) x . p . get ( cd )) { nearestNeighbor ( p , x . left , ( cd + 1 ) % dim ); if ( p . get ( cd ) + distanceSquared x . p . get ( cd )) nearestNeighbor ( p , x . right , ( cd + 1 ) % dim ); } else { nearestNeighbor ( p , x . right , ( cd + 1 ) % dim ); if ( p . get ( cd ) - distanceSquared = x . p . get ( cd )) nearestNeighbor ( p , x . right , ( cd + 1 ) % dim ); } }","title":"Nearest Neighbor"},{"location":"algorithm/algorithmPrinceton/graph/","text":"Topic 8: Graph DAG DFS BFS UnDirected Graph A graph is a set of vertices and a collection of edges that each connect a pair of vertices. Glossary A path in a graph is a sequence of vertices connected by edges. A simple path is one with no repeated vertices. A cycle is a path with at least one edge whose first and last vertices are the same. A simple cycle is a cycle with no repeated edges or vertices (except the requisite repetition of the first and last vertices). The length of a path or a cycle is its number of edges. A graph is connected if there is a path from every vertex to every other vertex in the graph. A graph that is not connected consists of a set of connected components , which are maximal connected subgraphs. An acyclic graph is a graph with no cycles. A tree is an acyclic connected graph. A disjoint set of trees is called a forest . A spanning tree of a connected graph is a subgraph that contains all of that graph\u2019s vertices and is a single tree. A spanning forest of a graph is the union of spanning trees of its connected components. API Directed Graph Definition. A directed graph (or digraph ) is a set of vertices and a collection of directed edges . Each directed edge connects an ordered pair of vertices. Glossary The outdegree (\u51fa\u5ea6) of a vertex in a digraph is the number of edges going from it. The indegree (\u5165\u5ea6) of a vertex is the number of edges going to it. A directed path in a digraph is a sequence of vertices in which there is a (directed) edge pointing from each vertex in the sequence to its successor in the sequence. A directed cycle is a directed path with at least one edge whose first and last vertices are the same. The length of a path or a cycle is its number of edges. A vertex w w is reachable from a vertex v v if there is a directed path from v v to w w . Each vertex is reachable from itself. API The API below and the class Digraph are virtually identical to those for Graph . The Digraph data type is identical to Graph except that addEdge only calls add() once, and it has an instance method reverse() that returns a copy with all its edges reversed. public class Digraph { private final int V ; private int E ; private Bag Integer [] adj ; public Digraph ( int V ){ this . V = V ; this . E = 0 ; adj = ( Bag Integer []) new Bag [ V ]; for ( int v = 0 ; v V ; v ++) adj [ v ] = new Bag (); } public int V () { return V ; } public int E () { return E ; } public void addEdge ( int v , int w ) { adj [ v ]. add ( w ); E ++; } public Iterable Integer adj ( int v ) { return adj [ v ]; } public Digraph reverse () { Digraph R = new Digraph ( V ); for ( int v = 0 ; v V ; v ++) for ( int w : adj ( v )) R . addEdge ( w , v ); return R ; } } Reachability in digraphs DFS Single source reachability. Given a digraph and a source vertex s s , support queries of the form, Is there a directed path from s s to a given target vertex v v ? Multiple-source reachability. Given a digraph and a set of source vertices, support queries of the form, Is there a directed path from any vertex in the set to a given target vertex v v ? DFS marks all the vertices in a digraph reachable from a given set of sources in time proportional to the sum of the outdegrees of the vertices marked. public class DirectedDFS { // marked[v] = true if v is reachable from source(s) private boolean [] marked ; // Computes the vertices in digraph G that are // reachable from the source vertex s. public DirectedDFS ( Digraph G , int s ) { marked = new boolean [ G . V ()]; dfs ( G , s ); } // Computes the vertices in digraph {@code G} that are // connected to any of the source vertices sources. public DirectedDFS ( Digraph G , Iterable Integer sources ) { marked = new boolean [ G . V ()]; for ( int v : sources ) { if (! marked [ v ]) dfs ( G , v ); } } private void dfs ( Digraph G , int v ) { marked [ v ] = true ; for ( int w : G . adj ( v )) if (! marked [ w ]) dfs ( G , w ); } // Is there a directed path from the source vertex (or any // of the source vertices) and vertex v? public boolean marked ( int v ) { return marked [ v ]; } } Application: Mark-and-sweep garbage collection An important application of multiple-source reachability is found in typical memory-management systems, including many implementations of Java. A digraph where each vertex represents an object and each edge represents a reference to an object is an appropriate model for the memory usage of a running Java program. A mark-and-sweep garbage collection strategy reserves one bit per object for the purpose of garbage collection, then periodically marks the set of potentially accessible objects by running a digraph reachability algorithm like DirectedDFS and sweeps through all objects, collecting the unmarked ones for use for new objects. Cycles and DAGs Directed cycle detection: Does a given digraph have a directed cycle? If so, find the vertices on some such cycle, in order from some vertex back to itself. Definition. A directed acyclic graph (DAG, \u6709\u5411\u65e0\u73af\u56fe) is a digraph with no directed cycles. Developing a dfs-based solution to this problem is not difficult, based on the fact that the recursive call stack maintained by the system represents the \u201ccurrent\u201d directed path under consideration. If we ever find a directed edge v\\rightarrow w v\\rightarrow w to a vertex w w that is on that stack, we have found a cycle, since the stack is evidence of a directed path from w w to v v , and the edge v\\rightarrow w v\\rightarrow w completes the cycle. public class DirectedCycle { private boolean [] marked ; // marked[v] = has vertex v been marked? private int [] edgeTo ; // edgeTo[v] = previous vertex on path to v private boolean [] onStack ; // onStack[v] = is vertex on the stack? private Stack Integer cycle ; // directed cycle (or null if no such cycle) // Determines whether the digraph G has a directed cycle and, // if so, finds such a cycle. public DirectedCycle ( Digraph G ) { marked = new boolean [ G . V ()]; onStack = new boolean [ G . V ()]; edgeTo = new int [ G . V ()]; for ( int v = 0 ; v G . V (); v ++) if (! marked [ v ] cycle == null ) dfs ( G , v ); } // check that algorithm computes either the topological order or finds a directed cycle private void dfs ( Digraph G , int v ) { onStack [ v ] = true ; marked [ v ] = true ; for ( int w : G . adj ( v )) { // short circuit if directed cycle found if ( cycle != null ) return ; // found new vertex, so recur else if (! marked [ w ]) { edgeTo [ w ] = v ; dfs ( G , w ); } // trace back directed cycle else if ( onStack [ w ]) { cycle = new Stack Integer (); for ( int x = v ; x != w ; x = edgeTo [ x ]) cycle . push ( x ); cycle . push ( w ); cycle . push ( v ); } } onStack [ v ] = false ; } } When executing dfs(G, v) , we have followed a directed path from the source to v v . To keep track of this path, DirectedCycle maintains a vertex-indexed array onStack[] that marks the vertices on the recursive call stack (by setting onStack[v] to true on entry to dfs(G, v) and to false on exit). DirectedCycle also maintains an edgeTo[] array so that it can return the cycle when it is detected. Topological Sort Topological sort. Given a digraph, put the vertices in order such that all its directed edges point from a vertex earlier in the order to a vertex later in the order (or report that doing so is not possible). Example: All edges point down, so it clearly represents a solution to the precedence-constrained scheduling problem that this digraph models: the student can satisfy all course prerequisites by taking the courses in this order. A digraph has a topological order if and only if it is a DAG. To get the topological order: Run depth-first search. Return vertices in reverse postorder. DFS Order Three vertex orderings of dfs are of interest in typical applications: Preorder: Put the vertex on a queue before the recursive calls. for course schedule, [0, 5, 4, 1, 6, 9, 12, 11, 10, 2, 3, 7, 8] Postorder: Put the vertex on a queue after the recursive calls. for course schedule, [4, 5, 1, 12, 11, 10, 9, 6, 0, 3, 2, 7, 8] Reverse postorder: Put the vertex on a stack after the recursive calls. for course schedule, [8, 7, 2, 3, 0, 6, 9, 10, 11, 12, 1, 5, 4] /** * The DFSOrder class represents a data type for * determining depth-first search ordering of the vertices in a digraph * or edge-weighted digraph, including preorder, postorder, and reverse postorder. */ public class DFSOrder { private boolean [] marked ; // marked[v] = has v been marked in dfs? private Queue Integer preorder ; // vertices in preorder private Queue Integer postorder ; // vertices in postorder /** * Determines a depth-first order for the digraph {@code G}. */ public DFSOrder ( Digraph G ) { postorder = new LinkedList (); preorder = new LinkedList (); marked = new boolean [ G . V ()]; for ( int v = 0 ; v G . V (); v ++) if (! marked [ v ]) dfs ( G , v ); } // run DFS in digraph G from vertex v and compute preorder/postorder private void dfs ( Digraph G , int v ) { marked [ v ] = true ; preorder . offer ( v ); for ( int w : G . adj ( v )) if (! marked [ w ]) dfs ( G , w ); postorder . offer ( v ); } // Returns the vertices in postorder. public Iterable Integer post () { return postorder ; } // Returns the vertices in preorder. public Iterable Integer pre () { return preorder ; } // Returns the vertices in reverse postorder. public Iterable Integer reversePost () { List Integer reverse = new ArrayList ( postorder ); Collections . reverse ( reverse ); return reverse ; } } Proposition Reverse postorder in a DAG is a topological sort. Proof: Consider any edge v\\rightarrow w v\\rightarrow w . One of the following three cases must hold when dfs(v) is called: dfs(w) has already been called and has returned ( w w is marked). dfs(w) has not yet been called ( w w is unmarked), so v\\rightarrow w v\\rightarrow w will cause dfs(w) to be called (and return), either directly or indirectly, before dfs(v) returns. dfs(w) has been called and has not yet returned when dfs(v) is called. The key to the proof is that this case is impossible in a DAG, because the recursive call chain implies a path from w w to v v and v\\rightarrow w v\\rightarrow w would complete a directed cycle. With DFS, we can topologically sort a DAG in time proportional to |V|+|E| |V|+|E| . Strong connectivity in digraphs Definition. Two vertices v v and w w are strongly connected if they are mutually reachable: that is, if there is a directed path from v v to w w and a directed path from w w to v v . A digraph is strongly connected if all its vertices are strongly connected to one another. Application: WordNet WordNet is a semantic lexicon for the English language that computational linguists and cognitive scientists use extensively. WordNet groups words into sets of synonyms called synsets . For example, { AND circuit, AND gate } is a synset that represent a logical gate that \ufb01res only when all of its inputs \ufb01re. WordNet also describes semantic relationships between synsets. One such relationship is the is-a relationship, which connects a hyponym (more specific synset, \u4e0b\u4f4d\u8bcd) to a hypernym (more general synset, \u4e0a\u4f4d\u8bcd). For example, the synset { gate, logic gate } is a hypernym of { AND circuit, AND gate } because an AND gate is a kind of logic gate. The WordNet digraph WordNet digraph: each vertex v v is an integer that represents a synset, and each directed edge v\\rightarrow w v\\rightarrow w represents that w w is a hypernym of v v . The WordNet digraph is a rooted DAG: it is acyclic and has one vertex\u2014the root\u2014that is an ancestor of every other vertex. However, it is not necessarily a tree because a synset can have more than one hypernym. A small subgraph of the WordNet digraph appears below. The WordNet input \ufb01le formats WordNet digraph files are in comma-separated values (CSV) format: each line contains a sequence of fields, separated by commas. List of synsets. Synsets file contains all noun synsets in WordNet, one per line. List of hypernyms. Hypernyms file contains the hypernym relationships. Click Here to View Code /** * WordNet digraph. * Each vertex v is an integer that represents a synset, * and each directed edge v- w represents that w is a hypernym of v. * */ public class WordNet { private Digraph digraph ; private HashMap String , List Integer wordsMap ; private List String wordsList ; private SAP sap ; /** * constructor takes the name of the two input files * @param synsets: synset file * @param hypernyms: hypernym file, * Line i of the file (counting from 0) contains the hypernyms of synset i. * The first field is the synset id, which is always the integer i; * subsequent fields are the id numbers of the synset\u2019s hypernyms. * @throws IllegalArgumentException if argument is null, * or the input does not correspond to a rooted DAG. */ public WordNet ( String synsets , String hypernyms ) { if ( synsets == null || hypernyms == null ) throw new IllegalArgumentException (); In in = new In ( synsets ); Integer id ; String line ; String [] line_seg , words ; // read synsets wordsMap = new HashMap (); wordsList = new ArrayList (); while ( in . hasNextLine ()) { line = in . readLine (); line_seg = line . split ( , ); id = Integer . parseInt ( line_seg [ 0 ]); words = line_seg [ 1 ]. split ( \\\\s ); // put every word into wordsMap for ( String word : words ) { List Integer list = wordsMap . getOrDefault ( word , new ArrayList ()); list . add ( id ); wordsMap . put ( word , list ); } // put entire word into a list wordsList . add ( line_seg [ 1 ]); } // read hypernyms digraph = new Digraph ( wordsList . size ()); in = new In ( hypernyms ); while ( in . hasNextLine ()) { line = in . readLine (); line_seg = line . split ( , ); for ( int i = 1 ; i line_seg . length ; i ++) digraph . addEdge ( Integer . parseInt ( line_seg [ 0 ]), Integer . parseInt ( line_seg [ i ])); } assertRootedDag (); assertNoCycle (); sap = new SAP ( digraph ); } /** * assert digraph has no cycle * @throws IllegalArgumentException if it has a cycle. */ private void assertNoCycle () { // assert the graph NOT contain a cycle DirectedCycle directedCycle = new DirectedCycle ( digraph ); if ( directedCycle . hasCycle ()) throw new IllegalArgumentException ( The input graph has a cycle! ); } /** * assert digraph is a rooted dag. * @throws IllegalArgumentException if it is NOT. */ private void assertRootedDag () { int numOfRoot = 0 ; // the number of the root, which has no parent for ( int vertex = 0 ; vertex digraph . V (); vertex ++) // a rooted dag has zero outdegree. if ( digraph . outdegree ( vertex ) == 0 ) { if ( numOfRoot == 0 ) numOfRoot ++; else throw new IllegalArgumentException ( The digraph is NOT a rooted DAG! It has more than one root. ); } } /** * returns all WordNet nouns * @return a list of wordnet nouns */ public Iterable String nouns () { return wordsMap . keySet (); } /** * Is the word a WordNet noun? * @param word: a string represent a word * @return: true if the word is a WordNet noun, otherwise false * @throws IllegalArgumentException if word is null. * */ public boolean isNoun ( String word ) { if ( word == null ) throw new IllegalArgumentException (); return wordsMap . containsKey ( word ); } /** * Distance between nounA and nounB. * * Defined as the length of shortest ancestral path of subsets A and B, * where A/B denotes sets of synsets in which nounA/nounB appears. * * @param nounA : a noun * @param nounB: a noun * @return an integer, which denotes the distance between nounA and nounB * @throws IllegalArgumentException if any of nouns is null, * or any of nouns is NOT a WordNet noun. * */ public int distance ( String nounA , String nounB ) { if (! isNoun ( nounA ) || ! isNoun ( nounB )) throw new IllegalArgumentException (); int minlength = Integer . MAX_VALUE , length ; for ( int vertexA : wordsMap . get ( nounA )) for ( int vertexB : wordsMap . get ( nounB )) { length = sap . length ( vertexA , vertexB ); if ( length minlength ) minlength = length ; } return minlength ; } /** * A synset (second field of synsets.txt) that is the common ancestor of nounA and nounB * in a shortest ancestral path. * @param nounA: a noun * @param nounB: a noun * @return a synset * @throws IllegalArgumentException if any of nouns is null, * or any of nouns is NOT a WordNet noun. */ public String sap ( String nounA , String nounB ) { if (! isNoun ( nounA ) || ! isNoun ( nounB )) throw new IllegalArgumentException (); int minlength = Integer . MAX_VALUE , length ; int minVertexA = 0 , minVertexB = 0 ; for ( int vertexA : wordsMap . get ( nounA )) for ( int vertexB : wordsMap . get ( nounB )) { length = sap . length ( vertexA , vertexB ); if ( length minlength ) { minlength = length ; minVertexA = vertexA ; minVertexB = vertexB ; } } return wordsList . get ( sap . ancestor ( minVertexA , minVertexB )); } } Shortest ancestral path An ancestral path between two vertices v v and w w in a digraph is a directed path from v v to a common ancestor x x , together with a directed path from w w to the same ancestor x x . A shortest ancestral path is an ancestral path of minimum total length. We refer to the common ancestor in a shortest ancestral path as a shortest common ancestor . We could generalize the notion of shortest common ancestor to subsets of vertices. A shortest ancestral path of two subsets of vertices A and B is a shortest ancestral path over all pairs of vertices v v and w w , with v v in A and w w in B. The figure below shows an example in which, for two subsets, red and blue, there are several (but not all) ancestral paths, including the shortest one. In order to find shortest common ancestor, run the two breadth-first searches from v v and w w in lockstep (alternating back and forth between exploring vertices in each of the two searches), then terminate the BFS from v v (or w w ) as soon as the distance exceeds the length of the best ancestral path found so far. In order to speed up the query, we could implement a software cache of recently computed length() and ancestor() queries. Click Here to View Code /** * Shortest ancestral path. */ public class SAP { private Digraph digraph ; private LRUCache cache ; /** * constructor takes a digraph (not necessarily a DAG) * @param G: an digraph */ public SAP ( Digraph G ) { //make a deep copy of G digraph = new Digraph ( G ); cache = new LRUCache ( 100 ); } /** * length of shortest ancestral path between v and w; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range */ // -1 if no such path public int length ( int v , int w ) { // validate vertex validateVertex ( v ); validateVertex ( w ); // already calculated? int [] p = new int []{ v , w }; if ( cache . containsKey ( p )) return cache . get ( p )[ 1 ]; // bfs search for ancestor int [] res = bfs ( Arrays . asList ( v ), Arrays . asList ( w )); if ( res [ 1 ] != - 1 ) { cache . put ( p , res ); cache . put ( new int []{ w , v }, res ); } return res [ 1 ]; } /** * a common ancestor of v and w that participates in a shortest ancestral path; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range * */ public int ancestor ( int v , int w ) { // validate vertex validateVertex ( v ); validateVertex ( w ); // already calculated? int [] p = new int []{ v , w }; if ( cache . containsKey ( p )) return cache . get ( p )[ 0 ]; // bfs search for ancestor int [] res = bfs ( Arrays . asList ( v ), Arrays . asList ( w )); if ( res [ 0 ] != - 1 ) { cache . put ( p , res ); cache . put ( new int []{ w , v }, res ); } return res [ 0 ]; } /** * length of shortest ancestral path between any vertex in v and any vertex in w; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range */ public int length ( Iterable Integer v , Iterable Integer w ) { if ( v == null || w == null ) throw new IllegalArgumentException (); // validate vertex for ( Integer vertex : v ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); for ( Integer vertex : w ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); // bfs search for ancestor int [] res = bfs ( v , w ); return res [ 1 ]; } /** * a common ancestor that participates in shortest ancestral path; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range */ public int ancestor ( Iterable Integer v , Iterable Integer w ) { if ( v == null || w == null ) throw new IllegalArgumentException (); // validate vertex for ( Integer vertex : v ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); for ( Integer vertex : w ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); // bfs search for ancestor int [] res = bfs ( v , w ); return res [ 0 ]; } /** * Initialize BFS. * @param queueListv: a list of queue * @param v : a list of vertex to add * @param visitedThis : a set of visisted vertex * @param visitedOther : a set of visisted vertex * @return -1 if all vertexes are unvisited, * otherwise return the visited vertex; */ private int initializeBFS ( List Queue Integer queueListv , Iterable Integer v , Map Integer , Integer visitedThis , Map Integer , Integer visitedOther ) { for ( Integer i : v ) { Queue Integer queue = new LinkedList (); queue . offer ( i ); queueListv . add ( queue ); if ( visitedThis . containsKey ( i )) return i ; if ( visitedOther . containsKey ( i )) return i ; visitedThis . put ( i , 0 ); } return - 1 ; } /** * Search for the shortest Common Ancestor by bfs. * search from v(start) to w(end) * @param v: a list of vertex * @param w: a list of vertex * @return: a common ancestor ( -1 if not found), * and corresponding length of path (-1 if not found). */ private int [] bfs ( Iterable Integer v , Iterable Integer w ) { ArrayList Queue Integer queueListv = new ArrayList (), queueListw = new ArrayList (); // viisted vertex HashMap Integer , Integer visitedV = new HashMap (), visitedW = new HashMap (); // initialize bfs, if vertexes are repeated, // which means their shortest Common Ancestor is repeated vertex, // return {repeated vertex, 0} int state ; state = initializeBFS ( queueListv , v , visitedV , visitedW ); if ( state != - 1 ) return new int []{ state , 0 }; state = initializeBFS ( queueListw , w , visitedW , visitedV ); if ( state != - 1 ) return new int []{ state , 0 }; // number of bfs steps int numOfSteps = 0 ; // commonAncestor int commonAncestor , shortestCommonAncestor = - 1 ; int sap = Integer . MAX_VALUE ; while ( true ) { // bfs for v commonAncestor = bfsOneStep ( queueListv , visitedV , visitedW , numOfSteps ); if ( commonAncestor != - 1 visitedV . get ( commonAncestor ) sap ) { shortestCommonAncestor = commonAncestor ; sap = visitedV . get ( commonAncestor ); } // bfs for w commonAncestor = bfsOneStep ( queueListw , visitedW , visitedV , numOfSteps ); if ( commonAncestor != - 1 visitedW . get ( commonAncestor ) sap ) { shortestCommonAncestor = commonAncestor ; sap = visitedW . get ( commonAncestor ); } // number of step plus one numOfSteps ++; // break if all queues are empty boolean allEmpty = true ; for ( Queue Integer q : queueListv ) allEmpty = q . isEmpty (); for ( Queue Integer q : queueListw ) allEmpty = q . isEmpty (); if ( allEmpty ) break ; } if ( shortestCommonAncestor == - 1 ) return new int []{- 1 , - 1 }; return new int []{ shortestCommonAncestor , sap }; } /** * A step of Binary First Search. * @param queueList: a list of queues maintains the vertexes to visit * @param visitedThis: a set of vertexes that has been visited * @param visitedOther: a set of vertexes that has been visited * @param length: the length of path bfs already visited * @return: a common ancestor, or -1 if not found. */ private int bfsOneStep ( Iterable Queue Integer queueList , Map Integer , Integer visitedThis , Map Integer , Integer visitedOther , int length ) { int commonAncestor = - 1 ; for ( Queue Integer q : queueList ) { // queue is emtpy if ( q . isEmpty ()) continue ; // visit all unvisited neighbors int lenOfQueue = q . size (); for ( int i = 0 ; i lenOfQueue ; i ++) { for ( int neighbor : digraph . adj ( q . poll ())) { // another set is already visted this vertex!! // the neighbor is the common ancestor we try to find. if ( visitedOther . containsKey ( neighbor )) { if (! visitedThis . containsKey ( neighbor )) q . offer ( neighbor ); visitedThis . put ( neighbor , visitedOther . get ( neighbor ) + length + 1 ); if ( commonAncestor == - 1 ) commonAncestor = neighbor ; else if ( visitedThis . get ( neighbor ) visitedThis . get ( commonAncestor )) commonAncestor = neighbor ; } // visit vertex if (! visitedThis . containsKey ( neighbor )) { visitedThis . put ( neighbor , length + 1 ); q . offer ( neighbor ); } } } } return commonAncestor ; } /** * validate vertex * @throws IllegalArgumentException unless {@code 0 = v V} */ private void validateVertex ( int v ) { if ( v 0 || v = digraph . V ()) throw new IllegalArgumentException ( vertex + v + is not between 0 and + ( digraph . V () - 1 )); } /** * LRU cache. */ private static class LRUCache extends LinkedHashMap int [], int [] { private final int CAPACITY ; LRUCache ( int capacity ) { super ( capacity , 0.75f , true ); this . CAPACITY = capacity ; } public int [] put ( int [] key , int [] value ) { return super . put ( key , value ); } public int [] get ( int [] key ) { return super . get ( key ); } @Override protected boolean removeEldestEntry ( Map . Entry int [], int [] eldest ) { return size () this . CAPACITY ; } } } Analysis All methods (and the constructor) take time proportional to |E| + |V| |E| + |V| in the worst case, where |E| |E| and |V| |V| are the number of edges and vertices in the digraph, respectively. And data type uses space proportional to |E| + |V| |E| + |V| . Outcast detection Given a list of WordNet nouns x_1, x_2, ..., x_n x_1, x_2, ..., x_n , which noun is the least related to the others? To identify an outcast, compute the sum of the distances between each noun and every other one: d_i = distance(x_i, x_1) + distance(x_i, x_2) + ... + distance(x_i, x_n) d_i = distance(x_i, x_1) + distance(x_i, x_2) + ... + distance(x_i, x_n) and return a noun x_t x_t for which d_t d_t is maximum. Note that distance(x_i , x_i ) = 0 distance(x_i , x_i ) = 0 , so it will not contribute to the sum. Semantic relatedness refers to the degree to which two concepts are related. Define the semantic relatedness of two WordNet nouns x x and y y as follows: A = set of synsets in which x appears B = set of synsets in which y appears distance(x, y) distance(x, y) = length of shortest ancestral path of subsets A and B sca(x, y) sca(x, y) = a shortest common ancestor of subsets A and B Click Here to View Code /** * Identify an outcast from a list of words. */ public class Outcast { private WordNet wordNet ; /** * constructor takes a WordNet object * @param wordnet: a wordnet */ public Outcast ( WordNet wordnet ) { this . wordNet = wordnet ; } /** * given an array of WordNet nouns, return an outcast * @param nouns: a list of nouns * @return: an outcast * @throws IllegalArgumentException if nouns is null, * or any of the noun is not part of the wordNet. */ public String outcast ( String [] nouns ) { if ( nouns == null ) throw new IllegalArgumentException ( nouns is null! ); for ( String noun : nouns ) if (! wordNet . isNoun ( noun )) throw new IllegalArgumentException ( nouns are not part of wordNet! ); int maxDistance = - 1 ; String outcastNoun = null ; int distance ; for ( String nounA : nouns ) { distance = 0 ; for ( String nounB : nouns ) { int tmp = wordNet . distance ( nounA , nounB ); distance += tmp ; } if ( distance maxDistance ) { maxDistance = distance ; outcastNoun = nounA ; } } return outcastNoun ; } }","title":"Topic 8: Graph"},{"location":"algorithm/algorithmPrinceton/graph/#topic-8-graph","text":"DAG DFS BFS","title":"Topic 8: Graph"},{"location":"algorithm/algorithmPrinceton/graph/#undirected-graph","text":"A graph is a set of vertices and a collection of edges that each connect a pair of vertices.","title":"UnDirected Graph"},{"location":"algorithm/algorithmPrinceton/graph/#glossary","text":"A path in a graph is a sequence of vertices connected by edges. A simple path is one with no repeated vertices. A cycle is a path with at least one edge whose first and last vertices are the same. A simple cycle is a cycle with no repeated edges or vertices (except the requisite repetition of the first and last vertices). The length of a path or a cycle is its number of edges. A graph is connected if there is a path from every vertex to every other vertex in the graph. A graph that is not connected consists of a set of connected components , which are maximal connected subgraphs. An acyclic graph is a graph with no cycles. A tree is an acyclic connected graph. A disjoint set of trees is called a forest . A spanning tree of a connected graph is a subgraph that contains all of that graph\u2019s vertices and is a single tree. A spanning forest of a graph is the union of spanning trees of its connected components.","title":"Glossary"},{"location":"algorithm/algorithmPrinceton/graph/#api","text":"","title":"API"},{"location":"algorithm/algorithmPrinceton/graph/#directed-graph","text":"Definition. A directed graph (or digraph ) is a set of vertices and a collection of directed edges . Each directed edge connects an ordered pair of vertices.","title":"Directed Graph"},{"location":"algorithm/algorithmPrinceton/graph/#glossary_1","text":"The outdegree (\u51fa\u5ea6) of a vertex in a digraph is the number of edges going from it. The indegree (\u5165\u5ea6) of a vertex is the number of edges going to it. A directed path in a digraph is a sequence of vertices in which there is a (directed) edge pointing from each vertex in the sequence to its successor in the sequence. A directed cycle is a directed path with at least one edge whose first and last vertices are the same. The length of a path or a cycle is its number of edges. A vertex w w is reachable from a vertex v v if there is a directed path from v v to w w . Each vertex is reachable from itself.","title":"Glossary"},{"location":"algorithm/algorithmPrinceton/graph/#api_1","text":"The API below and the class Digraph are virtually identical to those for Graph . The Digraph data type is identical to Graph except that addEdge only calls add() once, and it has an instance method reverse() that returns a copy with all its edges reversed. public class Digraph { private final int V ; private int E ; private Bag Integer [] adj ; public Digraph ( int V ){ this . V = V ; this . E = 0 ; adj = ( Bag Integer []) new Bag [ V ]; for ( int v = 0 ; v V ; v ++) adj [ v ] = new Bag (); } public int V () { return V ; } public int E () { return E ; } public void addEdge ( int v , int w ) { adj [ v ]. add ( w ); E ++; } public Iterable Integer adj ( int v ) { return adj [ v ]; } public Digraph reverse () { Digraph R = new Digraph ( V ); for ( int v = 0 ; v V ; v ++) for ( int w : adj ( v )) R . addEdge ( w , v ); return R ; } }","title":"API"},{"location":"algorithm/algorithmPrinceton/graph/#reachability-in-digraphs","text":"DFS Single source reachability. Given a digraph and a source vertex s s , support queries of the form, Is there a directed path from s s to a given target vertex v v ? Multiple-source reachability. Given a digraph and a set of source vertices, support queries of the form, Is there a directed path from any vertex in the set to a given target vertex v v ? DFS marks all the vertices in a digraph reachable from a given set of sources in time proportional to the sum of the outdegrees of the vertices marked. public class DirectedDFS { // marked[v] = true if v is reachable from source(s) private boolean [] marked ; // Computes the vertices in digraph G that are // reachable from the source vertex s. public DirectedDFS ( Digraph G , int s ) { marked = new boolean [ G . V ()]; dfs ( G , s ); } // Computes the vertices in digraph {@code G} that are // connected to any of the source vertices sources. public DirectedDFS ( Digraph G , Iterable Integer sources ) { marked = new boolean [ G . V ()]; for ( int v : sources ) { if (! marked [ v ]) dfs ( G , v ); } } private void dfs ( Digraph G , int v ) { marked [ v ] = true ; for ( int w : G . adj ( v )) if (! marked [ w ]) dfs ( G , w ); } // Is there a directed path from the source vertex (or any // of the source vertices) and vertex v? public boolean marked ( int v ) { return marked [ v ]; } } Application: Mark-and-sweep garbage collection An important application of multiple-source reachability is found in typical memory-management systems, including many implementations of Java. A digraph where each vertex represents an object and each edge represents a reference to an object is an appropriate model for the memory usage of a running Java program. A mark-and-sweep garbage collection strategy reserves one bit per object for the purpose of garbage collection, then periodically marks the set of potentially accessible objects by running a digraph reachability algorithm like DirectedDFS and sweeps through all objects, collecting the unmarked ones for use for new objects.","title":"Reachability in digraphs"},{"location":"algorithm/algorithmPrinceton/graph/#cycles-and-dags","text":"Directed cycle detection: Does a given digraph have a directed cycle? If so, find the vertices on some such cycle, in order from some vertex back to itself. Definition. A directed acyclic graph (DAG, \u6709\u5411\u65e0\u73af\u56fe) is a digraph with no directed cycles. Developing a dfs-based solution to this problem is not difficult, based on the fact that the recursive call stack maintained by the system represents the \u201ccurrent\u201d directed path under consideration. If we ever find a directed edge v\\rightarrow w v\\rightarrow w to a vertex w w that is on that stack, we have found a cycle, since the stack is evidence of a directed path from w w to v v , and the edge v\\rightarrow w v\\rightarrow w completes the cycle. public class DirectedCycle { private boolean [] marked ; // marked[v] = has vertex v been marked? private int [] edgeTo ; // edgeTo[v] = previous vertex on path to v private boolean [] onStack ; // onStack[v] = is vertex on the stack? private Stack Integer cycle ; // directed cycle (or null if no such cycle) // Determines whether the digraph G has a directed cycle and, // if so, finds such a cycle. public DirectedCycle ( Digraph G ) { marked = new boolean [ G . V ()]; onStack = new boolean [ G . V ()]; edgeTo = new int [ G . V ()]; for ( int v = 0 ; v G . V (); v ++) if (! marked [ v ] cycle == null ) dfs ( G , v ); } // check that algorithm computes either the topological order or finds a directed cycle private void dfs ( Digraph G , int v ) { onStack [ v ] = true ; marked [ v ] = true ; for ( int w : G . adj ( v )) { // short circuit if directed cycle found if ( cycle != null ) return ; // found new vertex, so recur else if (! marked [ w ]) { edgeTo [ w ] = v ; dfs ( G , w ); } // trace back directed cycle else if ( onStack [ w ]) { cycle = new Stack Integer (); for ( int x = v ; x != w ; x = edgeTo [ x ]) cycle . push ( x ); cycle . push ( w ); cycle . push ( v ); } } onStack [ v ] = false ; } } When executing dfs(G, v) , we have followed a directed path from the source to v v . To keep track of this path, DirectedCycle maintains a vertex-indexed array onStack[] that marks the vertices on the recursive call stack (by setting onStack[v] to true on entry to dfs(G, v) and to false on exit). DirectedCycle also maintains an edgeTo[] array so that it can return the cycle when it is detected.","title":"Cycles and DAGs"},{"location":"algorithm/algorithmPrinceton/graph/#topological-sort","text":"Topological sort. Given a digraph, put the vertices in order such that all its directed edges point from a vertex earlier in the order to a vertex later in the order (or report that doing so is not possible). Example: All edges point down, so it clearly represents a solution to the precedence-constrained scheduling problem that this digraph models: the student can satisfy all course prerequisites by taking the courses in this order. A digraph has a topological order if and only if it is a DAG. To get the topological order: Run depth-first search. Return vertices in reverse postorder. DFS Order Three vertex orderings of dfs are of interest in typical applications: Preorder: Put the vertex on a queue before the recursive calls. for course schedule, [0, 5, 4, 1, 6, 9, 12, 11, 10, 2, 3, 7, 8] Postorder: Put the vertex on a queue after the recursive calls. for course schedule, [4, 5, 1, 12, 11, 10, 9, 6, 0, 3, 2, 7, 8] Reverse postorder: Put the vertex on a stack after the recursive calls. for course schedule, [8, 7, 2, 3, 0, 6, 9, 10, 11, 12, 1, 5, 4] /** * The DFSOrder class represents a data type for * determining depth-first search ordering of the vertices in a digraph * or edge-weighted digraph, including preorder, postorder, and reverse postorder. */ public class DFSOrder { private boolean [] marked ; // marked[v] = has v been marked in dfs? private Queue Integer preorder ; // vertices in preorder private Queue Integer postorder ; // vertices in postorder /** * Determines a depth-first order for the digraph {@code G}. */ public DFSOrder ( Digraph G ) { postorder = new LinkedList (); preorder = new LinkedList (); marked = new boolean [ G . V ()]; for ( int v = 0 ; v G . V (); v ++) if (! marked [ v ]) dfs ( G , v ); } // run DFS in digraph G from vertex v and compute preorder/postorder private void dfs ( Digraph G , int v ) { marked [ v ] = true ; preorder . offer ( v ); for ( int w : G . adj ( v )) if (! marked [ w ]) dfs ( G , w ); postorder . offer ( v ); } // Returns the vertices in postorder. public Iterable Integer post () { return postorder ; } // Returns the vertices in preorder. public Iterable Integer pre () { return preorder ; } // Returns the vertices in reverse postorder. public Iterable Integer reversePost () { List Integer reverse = new ArrayList ( postorder ); Collections . reverse ( reverse ); return reverse ; } } Proposition Reverse postorder in a DAG is a topological sort. Proof: Consider any edge v\\rightarrow w v\\rightarrow w . One of the following three cases must hold when dfs(v) is called: dfs(w) has already been called and has returned ( w w is marked). dfs(w) has not yet been called ( w w is unmarked), so v\\rightarrow w v\\rightarrow w will cause dfs(w) to be called (and return), either directly or indirectly, before dfs(v) returns. dfs(w) has been called and has not yet returned when dfs(v) is called. The key to the proof is that this case is impossible in a DAG, because the recursive call chain implies a path from w w to v v and v\\rightarrow w v\\rightarrow w would complete a directed cycle. With DFS, we can topologically sort a DAG in time proportional to |V|+|E| |V|+|E| .","title":"Topological Sort"},{"location":"algorithm/algorithmPrinceton/graph/#strong-connectivity-in-digraphs","text":"Definition. Two vertices v v and w w are strongly connected if they are mutually reachable: that is, if there is a directed path from v v to w w and a directed path from w w to v v . A digraph is strongly connected if all its vertices are strongly connected to one another.","title":"Strong connectivity in digraphs"},{"location":"algorithm/algorithmPrinceton/graph/#application-wordnet","text":"WordNet is a semantic lexicon for the English language that computational linguists and cognitive scientists use extensively. WordNet groups words into sets of synonyms called synsets . For example, { AND circuit, AND gate } is a synset that represent a logical gate that \ufb01res only when all of its inputs \ufb01re. WordNet also describes semantic relationships between synsets. One such relationship is the is-a relationship, which connects a hyponym (more specific synset, \u4e0b\u4f4d\u8bcd) to a hypernym (more general synset, \u4e0a\u4f4d\u8bcd). For example, the synset { gate, logic gate } is a hypernym of { AND circuit, AND gate } because an AND gate is a kind of logic gate.","title":"Application: WordNet"},{"location":"algorithm/algorithmPrinceton/graph/#the-wordnet-digraph","text":"WordNet digraph: each vertex v v is an integer that represents a synset, and each directed edge v\\rightarrow w v\\rightarrow w represents that w w is a hypernym of v v . The WordNet digraph is a rooted DAG: it is acyclic and has one vertex\u2014the root\u2014that is an ancestor of every other vertex. However, it is not necessarily a tree because a synset can have more than one hypernym. A small subgraph of the WordNet digraph appears below. The WordNet input \ufb01le formats WordNet digraph files are in comma-separated values (CSV) format: each line contains a sequence of fields, separated by commas. List of synsets. Synsets file contains all noun synsets in WordNet, one per line. List of hypernyms. Hypernyms file contains the hypernym relationships. Click Here to View Code /** * WordNet digraph. * Each vertex v is an integer that represents a synset, * and each directed edge v- w represents that w is a hypernym of v. * */ public class WordNet { private Digraph digraph ; private HashMap String , List Integer wordsMap ; private List String wordsList ; private SAP sap ; /** * constructor takes the name of the two input files * @param synsets: synset file * @param hypernyms: hypernym file, * Line i of the file (counting from 0) contains the hypernyms of synset i. * The first field is the synset id, which is always the integer i; * subsequent fields are the id numbers of the synset\u2019s hypernyms. * @throws IllegalArgumentException if argument is null, * or the input does not correspond to a rooted DAG. */ public WordNet ( String synsets , String hypernyms ) { if ( synsets == null || hypernyms == null ) throw new IllegalArgumentException (); In in = new In ( synsets ); Integer id ; String line ; String [] line_seg , words ; // read synsets wordsMap = new HashMap (); wordsList = new ArrayList (); while ( in . hasNextLine ()) { line = in . readLine (); line_seg = line . split ( , ); id = Integer . parseInt ( line_seg [ 0 ]); words = line_seg [ 1 ]. split ( \\\\s ); // put every word into wordsMap for ( String word : words ) { List Integer list = wordsMap . getOrDefault ( word , new ArrayList ()); list . add ( id ); wordsMap . put ( word , list ); } // put entire word into a list wordsList . add ( line_seg [ 1 ]); } // read hypernyms digraph = new Digraph ( wordsList . size ()); in = new In ( hypernyms ); while ( in . hasNextLine ()) { line = in . readLine (); line_seg = line . split ( , ); for ( int i = 1 ; i line_seg . length ; i ++) digraph . addEdge ( Integer . parseInt ( line_seg [ 0 ]), Integer . parseInt ( line_seg [ i ])); } assertRootedDag (); assertNoCycle (); sap = new SAP ( digraph ); } /** * assert digraph has no cycle * @throws IllegalArgumentException if it has a cycle. */ private void assertNoCycle () { // assert the graph NOT contain a cycle DirectedCycle directedCycle = new DirectedCycle ( digraph ); if ( directedCycle . hasCycle ()) throw new IllegalArgumentException ( The input graph has a cycle! ); } /** * assert digraph is a rooted dag. * @throws IllegalArgumentException if it is NOT. */ private void assertRootedDag () { int numOfRoot = 0 ; // the number of the root, which has no parent for ( int vertex = 0 ; vertex digraph . V (); vertex ++) // a rooted dag has zero outdegree. if ( digraph . outdegree ( vertex ) == 0 ) { if ( numOfRoot == 0 ) numOfRoot ++; else throw new IllegalArgumentException ( The digraph is NOT a rooted DAG! It has more than one root. ); } } /** * returns all WordNet nouns * @return a list of wordnet nouns */ public Iterable String nouns () { return wordsMap . keySet (); } /** * Is the word a WordNet noun? * @param word: a string represent a word * @return: true if the word is a WordNet noun, otherwise false * @throws IllegalArgumentException if word is null. * */ public boolean isNoun ( String word ) { if ( word == null ) throw new IllegalArgumentException (); return wordsMap . containsKey ( word ); } /** * Distance between nounA and nounB. * * Defined as the length of shortest ancestral path of subsets A and B, * where A/B denotes sets of synsets in which nounA/nounB appears. * * @param nounA : a noun * @param nounB: a noun * @return an integer, which denotes the distance between nounA and nounB * @throws IllegalArgumentException if any of nouns is null, * or any of nouns is NOT a WordNet noun. * */ public int distance ( String nounA , String nounB ) { if (! isNoun ( nounA ) || ! isNoun ( nounB )) throw new IllegalArgumentException (); int minlength = Integer . MAX_VALUE , length ; for ( int vertexA : wordsMap . get ( nounA )) for ( int vertexB : wordsMap . get ( nounB )) { length = sap . length ( vertexA , vertexB ); if ( length minlength ) minlength = length ; } return minlength ; } /** * A synset (second field of synsets.txt) that is the common ancestor of nounA and nounB * in a shortest ancestral path. * @param nounA: a noun * @param nounB: a noun * @return a synset * @throws IllegalArgumentException if any of nouns is null, * or any of nouns is NOT a WordNet noun. */ public String sap ( String nounA , String nounB ) { if (! isNoun ( nounA ) || ! isNoun ( nounB )) throw new IllegalArgumentException (); int minlength = Integer . MAX_VALUE , length ; int minVertexA = 0 , minVertexB = 0 ; for ( int vertexA : wordsMap . get ( nounA )) for ( int vertexB : wordsMap . get ( nounB )) { length = sap . length ( vertexA , vertexB ); if ( length minlength ) { minlength = length ; minVertexA = vertexA ; minVertexB = vertexB ; } } return wordsList . get ( sap . ancestor ( minVertexA , minVertexB )); } }","title":"The WordNet digraph"},{"location":"algorithm/algorithmPrinceton/graph/#shortest-ancestral-path","text":"An ancestral path between two vertices v v and w w in a digraph is a directed path from v v to a common ancestor x x , together with a directed path from w w to the same ancestor x x . A shortest ancestral path is an ancestral path of minimum total length. We refer to the common ancestor in a shortest ancestral path as a shortest common ancestor . We could generalize the notion of shortest common ancestor to subsets of vertices. A shortest ancestral path of two subsets of vertices A and B is a shortest ancestral path over all pairs of vertices v v and w w , with v v in A and w w in B. The figure below shows an example in which, for two subsets, red and blue, there are several (but not all) ancestral paths, including the shortest one. In order to find shortest common ancestor, run the two breadth-first searches from v v and w w in lockstep (alternating back and forth between exploring vertices in each of the two searches), then terminate the BFS from v v (or w w ) as soon as the distance exceeds the length of the best ancestral path found so far. In order to speed up the query, we could implement a software cache of recently computed length() and ancestor() queries. Click Here to View Code /** * Shortest ancestral path. */ public class SAP { private Digraph digraph ; private LRUCache cache ; /** * constructor takes a digraph (not necessarily a DAG) * @param G: an digraph */ public SAP ( Digraph G ) { //make a deep copy of G digraph = new Digraph ( G ); cache = new LRUCache ( 100 ); } /** * length of shortest ancestral path between v and w; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range */ // -1 if no such path public int length ( int v , int w ) { // validate vertex validateVertex ( v ); validateVertex ( w ); // already calculated? int [] p = new int []{ v , w }; if ( cache . containsKey ( p )) return cache . get ( p )[ 1 ]; // bfs search for ancestor int [] res = bfs ( Arrays . asList ( v ), Arrays . asList ( w )); if ( res [ 1 ] != - 1 ) { cache . put ( p , res ); cache . put ( new int []{ w , v }, res ); } return res [ 1 ]; } /** * a common ancestor of v and w that participates in a shortest ancestral path; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range * */ public int ancestor ( int v , int w ) { // validate vertex validateVertex ( v ); validateVertex ( w ); // already calculated? int [] p = new int []{ v , w }; if ( cache . containsKey ( p )) return cache . get ( p )[ 0 ]; // bfs search for ancestor int [] res = bfs ( Arrays . asList ( v ), Arrays . asList ( w )); if ( res [ 0 ] != - 1 ) { cache . put ( p , res ); cache . put ( new int []{ w , v }, res ); } return res [ 0 ]; } /** * length of shortest ancestral path between any vertex in v and any vertex in w; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range */ public int length ( Iterable Integer v , Iterable Integer w ) { if ( v == null || w == null ) throw new IllegalArgumentException (); // validate vertex for ( Integer vertex : v ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); for ( Integer vertex : w ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); // bfs search for ancestor int [] res = bfs ( v , w ); return res [ 1 ]; } /** * a common ancestor that participates in shortest ancestral path; * -1 if no such path * @param v: a vertex * @param w: a vertex * @throws IllegalArgumentException if any of the vertex is out of range */ public int ancestor ( Iterable Integer v , Iterable Integer w ) { if ( v == null || w == null ) throw new IllegalArgumentException (); // validate vertex for ( Integer vertex : v ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); for ( Integer vertex : w ) if ( vertex == null ) throw new IllegalArgumentException (); else validateVertex ( vertex ); // bfs search for ancestor int [] res = bfs ( v , w ); return res [ 0 ]; } /** * Initialize BFS. * @param queueListv: a list of queue * @param v : a list of vertex to add * @param visitedThis : a set of visisted vertex * @param visitedOther : a set of visisted vertex * @return -1 if all vertexes are unvisited, * otherwise return the visited vertex; */ private int initializeBFS ( List Queue Integer queueListv , Iterable Integer v , Map Integer , Integer visitedThis , Map Integer , Integer visitedOther ) { for ( Integer i : v ) { Queue Integer queue = new LinkedList (); queue . offer ( i ); queueListv . add ( queue ); if ( visitedThis . containsKey ( i )) return i ; if ( visitedOther . containsKey ( i )) return i ; visitedThis . put ( i , 0 ); } return - 1 ; } /** * Search for the shortest Common Ancestor by bfs. * search from v(start) to w(end) * @param v: a list of vertex * @param w: a list of vertex * @return: a common ancestor ( -1 if not found), * and corresponding length of path (-1 if not found). */ private int [] bfs ( Iterable Integer v , Iterable Integer w ) { ArrayList Queue Integer queueListv = new ArrayList (), queueListw = new ArrayList (); // viisted vertex HashMap Integer , Integer visitedV = new HashMap (), visitedW = new HashMap (); // initialize bfs, if vertexes are repeated, // which means their shortest Common Ancestor is repeated vertex, // return {repeated vertex, 0} int state ; state = initializeBFS ( queueListv , v , visitedV , visitedW ); if ( state != - 1 ) return new int []{ state , 0 }; state = initializeBFS ( queueListw , w , visitedW , visitedV ); if ( state != - 1 ) return new int []{ state , 0 }; // number of bfs steps int numOfSteps = 0 ; // commonAncestor int commonAncestor , shortestCommonAncestor = - 1 ; int sap = Integer . MAX_VALUE ; while ( true ) { // bfs for v commonAncestor = bfsOneStep ( queueListv , visitedV , visitedW , numOfSteps ); if ( commonAncestor != - 1 visitedV . get ( commonAncestor ) sap ) { shortestCommonAncestor = commonAncestor ; sap = visitedV . get ( commonAncestor ); } // bfs for w commonAncestor = bfsOneStep ( queueListw , visitedW , visitedV , numOfSteps ); if ( commonAncestor != - 1 visitedW . get ( commonAncestor ) sap ) { shortestCommonAncestor = commonAncestor ; sap = visitedW . get ( commonAncestor ); } // number of step plus one numOfSteps ++; // break if all queues are empty boolean allEmpty = true ; for ( Queue Integer q : queueListv ) allEmpty = q . isEmpty (); for ( Queue Integer q : queueListw ) allEmpty = q . isEmpty (); if ( allEmpty ) break ; } if ( shortestCommonAncestor == - 1 ) return new int []{- 1 , - 1 }; return new int []{ shortestCommonAncestor , sap }; } /** * A step of Binary First Search. * @param queueList: a list of queues maintains the vertexes to visit * @param visitedThis: a set of vertexes that has been visited * @param visitedOther: a set of vertexes that has been visited * @param length: the length of path bfs already visited * @return: a common ancestor, or -1 if not found. */ private int bfsOneStep ( Iterable Queue Integer queueList , Map Integer , Integer visitedThis , Map Integer , Integer visitedOther , int length ) { int commonAncestor = - 1 ; for ( Queue Integer q : queueList ) { // queue is emtpy if ( q . isEmpty ()) continue ; // visit all unvisited neighbors int lenOfQueue = q . size (); for ( int i = 0 ; i lenOfQueue ; i ++) { for ( int neighbor : digraph . adj ( q . poll ())) { // another set is already visted this vertex!! // the neighbor is the common ancestor we try to find. if ( visitedOther . containsKey ( neighbor )) { if (! visitedThis . containsKey ( neighbor )) q . offer ( neighbor ); visitedThis . put ( neighbor , visitedOther . get ( neighbor ) + length + 1 ); if ( commonAncestor == - 1 ) commonAncestor = neighbor ; else if ( visitedThis . get ( neighbor ) visitedThis . get ( commonAncestor )) commonAncestor = neighbor ; } // visit vertex if (! visitedThis . containsKey ( neighbor )) { visitedThis . put ( neighbor , length + 1 ); q . offer ( neighbor ); } } } } return commonAncestor ; } /** * validate vertex * @throws IllegalArgumentException unless {@code 0 = v V} */ private void validateVertex ( int v ) { if ( v 0 || v = digraph . V ()) throw new IllegalArgumentException ( vertex + v + is not between 0 and + ( digraph . V () - 1 )); } /** * LRU cache. */ private static class LRUCache extends LinkedHashMap int [], int [] { private final int CAPACITY ; LRUCache ( int capacity ) { super ( capacity , 0.75f , true ); this . CAPACITY = capacity ; } public int [] put ( int [] key , int [] value ) { return super . put ( key , value ); } public int [] get ( int [] key ) { return super . get ( key ); } @Override protected boolean removeEldestEntry ( Map . Entry int [], int [] eldest ) { return size () this . CAPACITY ; } } } Analysis All methods (and the constructor) take time proportional to |E| + |V| |E| + |V| in the worst case, where |E| |E| and |V| |V| are the number of edges and vertices in the digraph, respectively. And data type uses space proportional to |E| + |V| |E| + |V| .","title":"Shortest ancestral path"},{"location":"algorithm/algorithmPrinceton/graph/#outcast-detection","text":"Given a list of WordNet nouns x_1, x_2, ..., x_n x_1, x_2, ..., x_n , which noun is the least related to the others? To identify an outcast, compute the sum of the distances between each noun and every other one: d_i = distance(x_i, x_1) + distance(x_i, x_2) + ... + distance(x_i, x_n) d_i = distance(x_i, x_1) + distance(x_i, x_2) + ... + distance(x_i, x_n) and return a noun x_t x_t for which d_t d_t is maximum. Note that distance(x_i , x_i ) = 0 distance(x_i , x_i ) = 0 , so it will not contribute to the sum. Semantic relatedness refers to the degree to which two concepts are related. Define the semantic relatedness of two WordNet nouns x x and y y as follows: A = set of synsets in which x appears B = set of synsets in which y appears distance(x, y) distance(x, y) = length of shortest ancestral path of subsets A and B sca(x, y) sca(x, y) = a shortest common ancestor of subsets A and B Click Here to View Code /** * Identify an outcast from a list of words. */ public class Outcast { private WordNet wordNet ; /** * constructor takes a WordNet object * @param wordnet: a wordnet */ public Outcast ( WordNet wordnet ) { this . wordNet = wordnet ; } /** * given an array of WordNet nouns, return an outcast * @param nouns: a list of nouns * @return: an outcast * @throws IllegalArgumentException if nouns is null, * or any of the noun is not part of the wordNet. */ public String outcast ( String [] nouns ) { if ( nouns == null ) throw new IllegalArgumentException ( nouns is null! ); for ( String noun : nouns ) if (! wordNet . isNoun ( noun )) throw new IllegalArgumentException ( nouns are not part of wordNet! ); int maxDistance = - 1 ; String outcastNoun = null ; int distance ; for ( String nounA : nouns ) { distance = 0 ; for ( String nounB : nouns ) { int tmp = wordNet . distance ( nounA , nounB ); distance += tmp ; } if ( distance maxDistance ) { maxDistance = distance ; outcastNoun = nounA ; } } return outcastNoun ; } }","title":"Outcast detection"},{"location":"algorithm/algorithmPrinceton/hashtable/","text":"Topic 7: Hash Table Hash Table Linear Probing","title":"Topic 8: Hash Table"},{"location":"algorithm/algorithmPrinceton/hashtable/#topic-7-hash-table","text":"Hash Table Linear Probing","title":"Topic 7: Hash Table"},{"location":"algorithm/algorithmPrinceton/priorityqueue/","text":"Topic 4: Priority Queues 1 Priority Queue A priority queue is an abstract data type which is like a regular queue or stack data structure, but where additionally each element has a \"priority\" associated with it. It basically supports two operations: remove the maximum and insert . Question Q: The purpose of Binary Heap: Why exactly don\u2019t we just sort and then consider the items in increasing order in the sorted array? In some data-processing examples such as TopM and Multiway, the total amount of data is far too large to consider sorting (or even storing in memory). In other examples, all the data does not even exist together at any point in time. Elementary implementations Array representation (unordered) Perhaps the simplest priority-queue implementation is based on pushdown stacks. The code for insert in the priority queue is the same as for push in the stack. To implement remove the maximum , we can add code like the inner loop of selection sort to exchange the maximum item with the item at the end and then delete that one, the same as pop() for stacks. As with stacks, we can add resizing-array code to ensure that the data structure is always at least one-quarter full and never overflows. click here public class UnorderedMaxPQ Key extends Comparable Key { private Key [] pq ; // pq[i] = ith element on pq private int N ; // number of elements on pq @SuppressWarnings ( unchecked ) public UnorderedMaxPQ ( int capacity ) { pq = ( Key []) new Comparable [ capacity ]; } public boolean isEmpty () { return N == 0 ; } public void insert ( Key x ) { pq [ N ++] = x ; } public Key delMax () { int max = 0 ; for ( int i = 1 ; i N ; i ++) if ( less ( max , i )) max = i ; exch ( max , N - 1 ); Key max_element = pq [-- N ]; pq [ N ] = null ; //null out entry, to prevent loitering return max_element ; } private void exch ( int i , int j ) { Key swap = pq [ i ]; pq [ i ] = pq [ j ]; pq [ j ] = swap ; } private boolean less ( int i , int j ) { return pq [ i ]. compareTo ( pq [ j ]) 0 ; } } Array representation (ordered). Another approach for insert is to move larger entries one position to the right, thus keeping the keys in the array in order (as in insertion sort). Thus, the largest element is always at the end, and the code for remove the maximum in the priority queue is the same as for pop in the stack. Analysis Order of growth of worst-case running time for priority-queue implementations\uff1a 2 Binary Heap A binary tree is heap-ordered if the key in each node is larger than or equal to the keys in that node\u2019s two children (if any). A binary heap is a collection of keys arranged in a complete heap-ordered binary tree, represented in level order in an array (not using the first entry). In a heap, the parent of the node in position k k is in position \u23a3 k/2 k/2 \u23a6 and, conversely, the two children of the node in position k k are in positions 2k 2k and 2k + 1 2k + 1 . we can travel up and down by doing simple arithmetic on array indices: to move up the tree from a[k] a[k] we set k k to k/2 k/2 ; to move down the tree we set k to 2k 2k or 2k+1 2k+1 . The height of a complete binary tree of size N N is \u23a3 \\lg N \\lg N \u23a6 . Question Q. Why not use a[0] a[0] in the heap representation? A. Doing so simplifies the arithmetic a bit. Promotion in a heap Scenario: Child's key becomes larger key than its parent's key. To eliminate the violation: Exchange key in child with key in parent. Repeat until heap order restored. private void swim ( int k ) { while ( k 1 less ( k / 2 , k )) { exch ( k / 2 , k ); k = k / 2 ; } } Insertion in a heap Insert: Add node at end, then swim it up. Cost: At most 1 + \\lg N 1 + \\lg N compares. public void insert ( Key v ) { pq [++ N ] = v ; swim ( N ); } Demotion in a heap Scenario: Parent's key becomes smaller than one (or both) of its children's. To eliminate the violation: Exchange key in parent with key in larger child. Repeat until heap order restored. private void sink ( int k ) { while ( 2 * k = N ) { int j = 2 * k ; if ( j N less ( j , j + 1 )) j ++; if (! less ( k , j )) break ; exch ( k , j ); k = j ; } } Delete the maximum in a heap Delete max. Exchange root with node at end, then sink it down. Cost. At most 2 \\lg N 2 \\lg N compares. public Key delMax () { Key max = pq [ 1 ]; exch ( 1 , N --); sink ( 1 ); pq [ N + 1 ] = null ; return max ; } Complete Java Code Click Here public class MaxPQ Key extends Comparable Key { private Key [] pq ; // pq[i] = ith element on pq private int N ; // number of elements on pq @SuppressWarnings ( unchecked ) public MaxPQ ( int capacity ) { pq = ( Key []) new Comparable [ capacity + 1 ]; } public void insert ( Key v ) { pq [++ N ] = v ; swim ( N ); } public Key delMax () { Key max = pq [ 1 ]; exch ( 1 , N --); sink ( 1 ); pq [ N + 1 ] = null ; return max ; } public boolean isEmpty () { return N == 0 ; } private void swim ( int k ) { while ( k 1 less ( k / 2 , k )) { exch ( k / 2 , k ); k = k / 2 ; } } private void sink ( int k ) { while ( 2 * k = N ) { int j = 2 * k ; if ( j N less ( j , j + 1 )) j ++; if (! less ( k , j )) break ; exch ( k , j ); k = j ; } } private void exch ( int i , int j ) { Key swap = pq [ i ]; pq [ i ] = pq [ j ]; pq [ j ] = swap ; } private boolean less ( int i , int j ) { return pq [ i ]. compareTo ( pq [ j ]) 0 ; } } 3 Heap Sort Heapsort use any heap-based priority queue as the basis for a sorting algorithm by inserting a sequence of items, then successively removing the smallest to get them out. Heapsort breaks into two phases: heap construction : reorganize the original array into a heap. sortdown : pull the items out of the heap in decreasing order to build the sorted result. Heap construction Build heap using bottom-up method: proceed from bottom to top, using sink() to make subheaps. The scan starts halfway, and ends at position 1. int N = a . length ; for ( int k = N / 2 ; k = 1 ; k --) sink ( a , k , N ); Sortdown Sortdown: repeatedly delete the largest remaining item. Remove the maximum, one at a time. Leave in array, instead of nulling out. while ( N 1 ) { exch ( a , 1 , N --); sink ( a , 1 , N ); } Analysis Heap construction uses \\le 2 N \\le 2 N compares and exchanges. Heapsort uses \\le 2 N \\lg N \\le 2 N \\lg N compares and exchanges. Heapsort is optimal for both time and space, but: Inner loop longer than quicksort\u2019s. Makes poor use of cache memory. Not stable. 4 Quick Sort 5 Quick Select","title":"Topic 4: PriorityQueues"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#topic-4-priority-queues","text":"","title":"Topic 4: Priority Queues"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#1-priority-queue","text":"A priority queue is an abstract data type which is like a regular queue or stack data structure, but where additionally each element has a \"priority\" associated with it. It basically supports two operations: remove the maximum and insert . Question Q: The purpose of Binary Heap: Why exactly don\u2019t we just sort and then consider the items in increasing order in the sorted array? In some data-processing examples such as TopM and Multiway, the total amount of data is far too large to consider sorting (or even storing in memory). In other examples, all the data does not even exist together at any point in time.","title":"1 Priority Queue"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#elementary-implementations","text":"Array representation (unordered) Perhaps the simplest priority-queue implementation is based on pushdown stacks. The code for insert in the priority queue is the same as for push in the stack. To implement remove the maximum , we can add code like the inner loop of selection sort to exchange the maximum item with the item at the end and then delete that one, the same as pop() for stacks. As with stacks, we can add resizing-array code to ensure that the data structure is always at least one-quarter full and never overflows. click here public class UnorderedMaxPQ Key extends Comparable Key { private Key [] pq ; // pq[i] = ith element on pq private int N ; // number of elements on pq @SuppressWarnings ( unchecked ) public UnorderedMaxPQ ( int capacity ) { pq = ( Key []) new Comparable [ capacity ]; } public boolean isEmpty () { return N == 0 ; } public void insert ( Key x ) { pq [ N ++] = x ; } public Key delMax () { int max = 0 ; for ( int i = 1 ; i N ; i ++) if ( less ( max , i )) max = i ; exch ( max , N - 1 ); Key max_element = pq [-- N ]; pq [ N ] = null ; //null out entry, to prevent loitering return max_element ; } private void exch ( int i , int j ) { Key swap = pq [ i ]; pq [ i ] = pq [ j ]; pq [ j ] = swap ; } private boolean less ( int i , int j ) { return pq [ i ]. compareTo ( pq [ j ]) 0 ; } } Array representation (ordered). Another approach for insert is to move larger entries one position to the right, thus keeping the keys in the array in order (as in insertion sort). Thus, the largest element is always at the end, and the code for remove the maximum in the priority queue is the same as for pop in the stack.","title":"Elementary implementations"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#analysis","text":"Order of growth of worst-case running time for priority-queue implementations\uff1a","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#2-binary-heap","text":"A binary tree is heap-ordered if the key in each node is larger than or equal to the keys in that node\u2019s two children (if any). A binary heap is a collection of keys arranged in a complete heap-ordered binary tree, represented in level order in an array (not using the first entry). In a heap, the parent of the node in position k k is in position \u23a3 k/2 k/2 \u23a6 and, conversely, the two children of the node in position k k are in positions 2k 2k and 2k + 1 2k + 1 . we can travel up and down by doing simple arithmetic on array indices: to move up the tree from a[k] a[k] we set k k to k/2 k/2 ; to move down the tree we set k to 2k 2k or 2k+1 2k+1 . The height of a complete binary tree of size N N is \u23a3 \\lg N \\lg N \u23a6 . Question Q. Why not use a[0] a[0] in the heap representation? A. Doing so simplifies the arithmetic a bit.","title":"2 Binary Heap"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#promotion-in-a-heap","text":"Scenario: Child's key becomes larger key than its parent's key. To eliminate the violation: Exchange key in child with key in parent. Repeat until heap order restored. private void swim ( int k ) { while ( k 1 less ( k / 2 , k )) { exch ( k / 2 , k ); k = k / 2 ; } }","title":"Promotion in a heap"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#insertion-in-a-heap","text":"Insert: Add node at end, then swim it up. Cost: At most 1 + \\lg N 1 + \\lg N compares. public void insert ( Key v ) { pq [++ N ] = v ; swim ( N ); }","title":"Insertion in a heap"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#demotion-in-a-heap","text":"Scenario: Parent's key becomes smaller than one (or both) of its children's. To eliminate the violation: Exchange key in parent with key in larger child. Repeat until heap order restored. private void sink ( int k ) { while ( 2 * k = N ) { int j = 2 * k ; if ( j N less ( j , j + 1 )) j ++; if (! less ( k , j )) break ; exch ( k , j ); k = j ; } }","title":"Demotion in a heap"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#delete-the-maximum-in-a-heap","text":"Delete max. Exchange root with node at end, then sink it down. Cost. At most 2 \\lg N 2 \\lg N compares. public Key delMax () { Key max = pq [ 1 ]; exch ( 1 , N --); sink ( 1 ); pq [ N + 1 ] = null ; return max ; } Complete Java Code Click Here public class MaxPQ Key extends Comparable Key { private Key [] pq ; // pq[i] = ith element on pq private int N ; // number of elements on pq @SuppressWarnings ( unchecked ) public MaxPQ ( int capacity ) { pq = ( Key []) new Comparable [ capacity + 1 ]; } public void insert ( Key v ) { pq [++ N ] = v ; swim ( N ); } public Key delMax () { Key max = pq [ 1 ]; exch ( 1 , N --); sink ( 1 ); pq [ N + 1 ] = null ; return max ; } public boolean isEmpty () { return N == 0 ; } private void swim ( int k ) { while ( k 1 less ( k / 2 , k )) { exch ( k / 2 , k ); k = k / 2 ; } } private void sink ( int k ) { while ( 2 * k = N ) { int j = 2 * k ; if ( j N less ( j , j + 1 )) j ++; if (! less ( k , j )) break ; exch ( k , j ); k = j ; } } private void exch ( int i , int j ) { Key swap = pq [ i ]; pq [ i ] = pq [ j ]; pq [ j ] = swap ; } private boolean less ( int i , int j ) { return pq [ i ]. compareTo ( pq [ j ]) 0 ; } }","title":"Delete the maximum in a heap"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#3-heap-sort","text":"Heapsort use any heap-based priority queue as the basis for a sorting algorithm by inserting a sequence of items, then successively removing the smallest to get them out. Heapsort breaks into two phases: heap construction : reorganize the original array into a heap. sortdown : pull the items out of the heap in decreasing order to build the sorted result.","title":"3 Heap Sort"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#heap-construction","text":"Build heap using bottom-up method: proceed from bottom to top, using sink() to make subheaps. The scan starts halfway, and ends at position 1. int N = a . length ; for ( int k = N / 2 ; k = 1 ; k --) sink ( a , k , N );","title":"Heap construction"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#sortdown","text":"Sortdown: repeatedly delete the largest remaining item. Remove the maximum, one at a time. Leave in array, instead of nulling out. while ( N 1 ) { exch ( a , 1 , N --); sink ( a , 1 , N ); }","title":"Sortdown"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#analysis_1","text":"Heap construction uses \\le 2 N \\le 2 N compares and exchanges. Heapsort uses \\le 2 N \\lg N \\le 2 N \\lg N compares and exchanges. Heapsort is optimal for both time and space, but: Inner loop longer than quicksort\u2019s. Makes poor use of cache memory. Not stable.","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#4-quick-sort","text":"","title":"4 Quick Sort"},{"location":"algorithm/algorithmPrinceton/priorityqueue/#5-quick-select","text":"","title":"5 Quick Select"},{"location":"algorithm/algorithmPrinceton/sort/","text":"Topic 3: Sorting Selection Sort In iteration i i , find index min min of smallest remaining entry. Swap a[i] a[i] and a[min] a[min] . Animation: public class Selection { public static void sort ( Comparable [] a ) { int N = a . length ; for ( int i = 0 ; i N ; i ++) { int min = i ; for ( int j = i + 1 ; j N ; j ++) if ( less ( a [ j ], a [ min ])) min = j ; exch ( a , i , min ); } } } Analysis Selection sort uses (N-1)+(N-2)+...+1\\sim N^2/2 (N-1)+(N-2)+...+1\\sim N^2/2 compares and N N exchanges. Insertion Sort Animation: In iteration i i , swap a[i] a[i] with each larger entry to its left. Invariants. \u2191 scans from left to right. Entries to the left of \u2191 (including \u2191) are in ascending order. Entries to the right of \u2191 have not yet been seen. public class Insertion { public static void sort ( Comparable [] a ) { for ( int i = 1 ; i a . length ; i ++) { int j = i ; while ( j 0 less ( a [ j ], a [ j - 1 ])) { exch ( a , j , j - 1 ); j --; } } } @SuppressWarnings ( unchecked ) private static boolean less ( Comparable a , Comparable b ) { return a . compareTo ( b ) 0 ; } private static void exch ( Comparable [] a , int i , int j ) { Comparable temp = a [ i ]; a [ i ] = a [ j ]; a [ j ] = temp ; } } Analysis Insertion sort uses \\sim N^2/4 \\sim N^2/4 compares and \\sim N^2/4 \\sim N^2/4 exchanges to sort a randomly ordered array of length N N with distinct keys, on the average. The worst case is \\sim N^2/2 \\sim N^2/2 compares and \\sim N ^2/2 \\sim N ^2/2 exchanges and the best case is N-1 N-1 compares and 0 exchanges. Shell Sort Shuffling Our goal is to rearrange array so that result is a uniformly random permutation. Shuffle sort Generate a random real number for each array entry. Sort the array based on generated random numbers. Knuth shuffle In iteration i i , pick integer r r between 0 and i i uniformly at random. Swap a[i] a[i] and a[r] a[r] . public class KnuthShuffle { public static void shuffle ( Object [] a ) { Random random = new Random (); for ( int i = 0 ; i a . length ; i ++) { //In iteration i, pick integer r between 0 and i uniformly at random. int r = random . nextInt ( i + 1 ); // Swap a[i] and a[r]. exch ( a , i , r ); } } } Knuth shuffling algorithm produces a uniformly random permutation of the input array in linear time. Quick Sort Quicksort honored as one of top 10 algorithms of 20th century in science and engineering. Quicksort is the default Java sort for primitive types. Basic plan. Shuffle the array. Partition so that, for some j j entry a[j] a[j] is in place no larger entry to the left of j j no smaller entry to the right of j j Sort each piece recursively. public class Quick { public static void sort ( Comparable [] a ) { // shuffle needed for performance guarantee StdRandom . shuffle ( a ); sort ( a , 0 , a . length - 1 ); } private static void sort ( Comparable [] a , int lo , int hi ) { if ( hi = lo ) return ; int j = partition ( a , lo , hi ); sort ( a , lo , j - 1 ); sort ( a , j + 1 , hi ); } } ANIMATION: Partitioning The crux of the quick sort is the partitioning process, which rearranges the array to make the following three conditions hold: The entry a[j] a[j] is in its final place in the array, for some j j . No entry in a[lo] a[lo] through a[j-1] a[j-1] is greater than a[j] a[j] . No entry in a[j+1] a[j+1] through a[hi] a[hi] is less than a[j] a[j] . First, we arbitrarily choose a[lo] a[lo] to be the partitioning item\u2014the one that will go into its final position. Next, we scan from the left end of the array until we find an entry greater than (or equal to) the partitioning item, and we scan from the right end of the array until we find an entry less than (or equal to) the partitioning item. The two items that stopped the scans are out of place in the final partitioned array, so we exchange them. Continuing in this way, when the scan indices cross, all that we need to do is to exchange the partitioning item a[lo] a[lo] with the rightmost entry of the left subarray ( a[j] a[j] ) and return its index j j . private static int partition ( Comparable a [], int lo , int hi ) { int i = lo , j = hi + 1 ; while ( true ) { // find item on left to swap while ( less ( a [++ i ], a [ lo ])) if ( i == hi ) break ; // find item on right to swap while ( less ( a [ lo ], a [-- j ])) if ( j == lo ) break ; // check if pointers cross if ( i = j ) break ; // swap exch ( a , i , j ); } // swap with partitioning item exch ( a , lo , j ); // return index of item now known to be in place. return j ; } Analysis Best case. Number of compares is \\sim N \\lg N \\sim N \\lg N . Worst case. Number of compares is \\sim \\frac{1}{2} N^2 \\sim \\frac{1}{2} N^2 . The average number of compares C_N C_N to quicksort an array of N N distinct keys is ~ 2N\\ln N 2N\\ln N (and the number of exchanges is \\sim\\frac{1}{3}N \\ln N \\sim\\frac{1}{3}N \\ln N ). Quicksort is an in-place sorting algorithm, but is not stable . Merge Sort Basic plan: Divide array into two halves Recursively sort each half Merge two halves Goal. Given two sorted subarrays a[lo] to a[mid] and a[mid+1] to a[hi], replace with sorted subarray a[lo] to a[hi] Java Implementation Java System Sorts Arrays.sort() Has different method for each primitive type. Has a method for data types that implement Comparable . Has a method that uses a Comparator . Uses tuned quicksort for primitive types; tuned mergesort for objects.","title":"Topic 3: Sort"},{"location":"algorithm/algorithmPrinceton/sort/#topic-3-sorting","text":"","title":"Topic 3: Sorting"},{"location":"algorithm/algorithmPrinceton/sort/#selection-sort","text":"In iteration i i , find index min min of smallest remaining entry. Swap a[i] a[i] and a[min] a[min] . Animation: public class Selection { public static void sort ( Comparable [] a ) { int N = a . length ; for ( int i = 0 ; i N ; i ++) { int min = i ; for ( int j = i + 1 ; j N ; j ++) if ( less ( a [ j ], a [ min ])) min = j ; exch ( a , i , min ); } } }","title":"Selection Sort"},{"location":"algorithm/algorithmPrinceton/sort/#analysis","text":"Selection sort uses (N-1)+(N-2)+...+1\\sim N^2/2 (N-1)+(N-2)+...+1\\sim N^2/2 compares and N N exchanges.","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/sort/#insertion-sort","text":"Animation: In iteration i i , swap a[i] a[i] with each larger entry to its left. Invariants. \u2191 scans from left to right. Entries to the left of \u2191 (including \u2191) are in ascending order. Entries to the right of \u2191 have not yet been seen. public class Insertion { public static void sort ( Comparable [] a ) { for ( int i = 1 ; i a . length ; i ++) { int j = i ; while ( j 0 less ( a [ j ], a [ j - 1 ])) { exch ( a , j , j - 1 ); j --; } } } @SuppressWarnings ( unchecked ) private static boolean less ( Comparable a , Comparable b ) { return a . compareTo ( b ) 0 ; } private static void exch ( Comparable [] a , int i , int j ) { Comparable temp = a [ i ]; a [ i ] = a [ j ]; a [ j ] = temp ; } }","title":"Insertion Sort"},{"location":"algorithm/algorithmPrinceton/sort/#analysis_1","text":"Insertion sort uses \\sim N^2/4 \\sim N^2/4 compares and \\sim N^2/4 \\sim N^2/4 exchanges to sort a randomly ordered array of length N N with distinct keys, on the average. The worst case is \\sim N^2/2 \\sim N^2/2 compares and \\sim N ^2/2 \\sim N ^2/2 exchanges and the best case is N-1 N-1 compares and 0 exchanges.","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/sort/#shell-sort","text":"","title":"Shell Sort"},{"location":"algorithm/algorithmPrinceton/sort/#shuffling","text":"Our goal is to rearrange array so that result is a uniformly random permutation.","title":"Shuffling"},{"location":"algorithm/algorithmPrinceton/sort/#shuffle-sort","text":"Generate a random real number for each array entry. Sort the array based on generated random numbers.","title":"Shuffle sort"},{"location":"algorithm/algorithmPrinceton/sort/#knuth-shuffle","text":"In iteration i i , pick integer r r between 0 and i i uniformly at random. Swap a[i] a[i] and a[r] a[r] . public class KnuthShuffle { public static void shuffle ( Object [] a ) { Random random = new Random (); for ( int i = 0 ; i a . length ; i ++) { //In iteration i, pick integer r between 0 and i uniformly at random. int r = random . nextInt ( i + 1 ); // Swap a[i] and a[r]. exch ( a , i , r ); } } } Knuth shuffling algorithm produces a uniformly random permutation of the input array in linear time.","title":"Knuth shuffle"},{"location":"algorithm/algorithmPrinceton/sort/#quick-sort","text":"Quicksort honored as one of top 10 algorithms of 20th century in science and engineering. Quicksort is the default Java sort for primitive types. Basic plan. Shuffle the array. Partition so that, for some j j entry a[j] a[j] is in place no larger entry to the left of j j no smaller entry to the right of j j Sort each piece recursively. public class Quick { public static void sort ( Comparable [] a ) { // shuffle needed for performance guarantee StdRandom . shuffle ( a ); sort ( a , 0 , a . length - 1 ); } private static void sort ( Comparable [] a , int lo , int hi ) { if ( hi = lo ) return ; int j = partition ( a , lo , hi ); sort ( a , lo , j - 1 ); sort ( a , j + 1 , hi ); } } ANIMATION:","title":"Quick Sort"},{"location":"algorithm/algorithmPrinceton/sort/#partitioning","text":"The crux of the quick sort is the partitioning process, which rearranges the array to make the following three conditions hold: The entry a[j] a[j] is in its final place in the array, for some j j . No entry in a[lo] a[lo] through a[j-1] a[j-1] is greater than a[j] a[j] . No entry in a[j+1] a[j+1] through a[hi] a[hi] is less than a[j] a[j] . First, we arbitrarily choose a[lo] a[lo] to be the partitioning item\u2014the one that will go into its final position. Next, we scan from the left end of the array until we find an entry greater than (or equal to) the partitioning item, and we scan from the right end of the array until we find an entry less than (or equal to) the partitioning item. The two items that stopped the scans are out of place in the final partitioned array, so we exchange them. Continuing in this way, when the scan indices cross, all that we need to do is to exchange the partitioning item a[lo] a[lo] with the rightmost entry of the left subarray ( a[j] a[j] ) and return its index j j . private static int partition ( Comparable a [], int lo , int hi ) { int i = lo , j = hi + 1 ; while ( true ) { // find item on left to swap while ( less ( a [++ i ], a [ lo ])) if ( i == hi ) break ; // find item on right to swap while ( less ( a [ lo ], a [-- j ])) if ( j == lo ) break ; // check if pointers cross if ( i = j ) break ; // swap exch ( a , i , j ); } // swap with partitioning item exch ( a , lo , j ); // return index of item now known to be in place. return j ; }","title":"Partitioning"},{"location":"algorithm/algorithmPrinceton/sort/#analysis_2","text":"Best case. Number of compares is \\sim N \\lg N \\sim N \\lg N . Worst case. Number of compares is \\sim \\frac{1}{2} N^2 \\sim \\frac{1}{2} N^2 . The average number of compares C_N C_N to quicksort an array of N N distinct keys is ~ 2N\\ln N 2N\\ln N (and the number of exchanges is \\sim\\frac{1}{3}N \\ln N \\sim\\frac{1}{3}N \\ln N ). Quicksort is an in-place sorting algorithm, but is not stable .","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/sort/#merge-sort","text":"Basic plan: Divide array into two halves Recursively sort each half Merge two halves Goal. Given two sorted subarrays a[lo] to a[mid] and a[mid+1] to a[hi], replace with sorted subarray a[lo] to a[hi]","title":"Merge Sort"},{"location":"algorithm/algorithmPrinceton/sort/#java-implementation","text":"","title":"Java Implementation"},{"location":"algorithm/algorithmPrinceton/sort/#java-system-sorts","text":"Arrays.sort() Has different method for each primitive type. Has a method for data types that implement Comparable . Has a method that uses a Comparator . Uses tuned quicksort for primitive types; tuned mergesort for objects.","title":"Java System Sorts"},{"location":"algorithm/algorithmPrinceton/stackqueue/","text":"Stacks and Queues Bags, queues, and stacks are fundamental and broadly useful. They involve collections of objects. Specifically, the set of values is a collection of objects, and the operations revolve around adding, removing, or iterating objects in the collection. 1 stacks Stack API Stack: linked-list representation Maintain pointer to first node in a linked list; insert/remove from front. 2 resizing arrays 3 queues 4 generics 5 iterators 6 applications","title":"Topic 2: StackQueue"},{"location":"algorithm/algorithmPrinceton/stackqueue/#stacks-and-queues","text":"Bags, queues, and stacks are fundamental and broadly useful. They involve collections of objects. Specifically, the set of values is a collection of objects, and the operations revolve around adding, removing, or iterating objects in the collection.","title":"Stacks and Queues"},{"location":"algorithm/algorithmPrinceton/stackqueue/#1-stacks","text":"","title":"1 stacks"},{"location":"algorithm/algorithmPrinceton/stackqueue/#stack-api","text":"","title":"Stack API"},{"location":"algorithm/algorithmPrinceton/stackqueue/#stack-linked-list-representation","text":"Maintain pointer to first node in a linked list; insert/remove from front.","title":"Stack: linked-list representation"},{"location":"algorithm/algorithmPrinceton/stackqueue/#2-resizing-arrays","text":"","title":"2 resizing arrays"},{"location":"algorithm/algorithmPrinceton/stackqueue/#3-queues","text":"","title":"3 queues"},{"location":"algorithm/algorithmPrinceton/stackqueue/#4-generics","text":"","title":"4 generics"},{"location":"algorithm/algorithmPrinceton/stackqueue/#5-iterators","text":"","title":"5 iterators"},{"location":"algorithm/algorithmPrinceton/stackqueue/#6-applications","text":"","title":"6 applications"},{"location":"algorithm/algorithmPrinceton/symboltable/","text":"Topic 5: Symbol Tables Symbol Table Binary Search Binary Search Tree Symbol Tables Definition. A symbol table is a data structure for key-value pairs that supports two operations: insert (put) a new pair into the table and search for (get) the value associated with a given key. key-value pair abstraction. insert a value with specified key. Given a key, search for the corresponding value. Basic Symbol Table API API for a generic basic symbol table: Ordered symbol tables API Specifically, for applications where keys are Comparable , we implement the following API. Preview We shall consider six symbol-table implementations in this section, so a brief preview is in order. Pros and cons of symbol-table implementations: Elementary Implementations Sequential Search (unordered list) Sequential search in a linked list: Maintain an (unordered) linked list of key-value pairs. Search : Scan through all keys until find a match. Insert : Scan through all keys until find a match; if no match add to front. Click Here To View Code public class SequentialSearchST Key , Value { private Node first ; private int size ; /** * create a symbol table */ public SequentialSearchST () { } /** * put key-value pair into the table. * remove key from table if value is null. * @param key: key * @param val: value * @throws IllegalArgumentException if key is null */ public void put ( Key key , Value val ) { // if key is null if ( key == null ) throw new IllegalArgumentException ( Key is null ); // Search for key. Update value if found; grow table if new. for ( Node cur = first ; cur != null ; cur = cur . next ) { if ( cur . key . equals ( key )) { cur . value = val ; // Search hit: update val. return ; } } first = new Node ( key , val , first ); // Search miss: add new node. size ++; } /** * Value paired with key. * (null if key is absent) * @param key: key * @return Value paired with key */ public Value get ( Key key ) { // Search for key for ( Node cur = first ; cur != null ; cur = cur . next ) { if ( cur . key . equals ( key )) { return cur . value ; // search hit } } return null ; // search miss } /** * remove key (and its value) from table * @param key: a key to delete * @throws IllegalArgumentException if key is null */ public void delete ( Key key ) { // if key is null if ( key == null ) throw new IllegalArgumentException ( Key is null ); // delete first if ( first . key . equals ( key )) { Node toDelete = first ; first = first . next ; first . next = null ; // prevent loitering size --; return ; } // search for key in the rest of the linkedlist for ( Node cur = first ; cur . next != null ; cur = cur . next ) { if ( cur . next . key . equals ( key )) { // search hit Node toDelete = cur . next ; cur . next = cur . next . next ; toDelete . next = null ; // prevent loitering size --; return ; } } } /** * is there a value paired with key? * @param key: a key * @return true, if the key exists. * */ public boolean contains ( Key key ) { return get ( key ) == null ; } /** * is the table empty? * @return true, if empty. */ public boolean isEmpty () { return size () == 0 ; } /** * number of key-value pairs in the table * @return the size of the symbol table */ public int size () { return size ; } /** * all the keys in the table * @return an iterable of keys */ public Iterable Key keys () { List Key keyList = new ArrayList (); for ( Node cur = first ; cur != null ; cur = cur . next ) { keyList . add ( cur . key ); } return keyList ; } /** * Node for LinkedList */ private class Node { Key key ; Value value ; Node next ; Node ( Key key , Value value , Node next ) { this . key = key ; this . value = value ; this . next = next ; } } } Binary Search (ordered array) Next, we consider a full implementation of our ordered symbol-table API. The underlying data structure is a pair of parallel arrays, one for the keys and one for the values. The heart of the implementation is the rank() method, which returns the number of keys smaller than a given key. For get() , the rank tells us precisely where the key is to be found if it is in the table (and, if it is not there, that it is not in the table). For put() , the rank tells us precisely where to update the value when the key is in the table, and precisely where to put the key when the key is not in the table. Click Here To View Code public class BinarySearchST K extends Comparable K , V { private K [] keys ; private V [] vals ; private int size ; /** * create a symbol table. * @param capacity: the size of the symbol table */ @SuppressWarnings ( unchecked ) public BinarySearchST ( int capacity ) { keys = ( K []) new Comparable [ capacity ]; vals = ( V []) new Object [ capacity ]; } /** * put key-value pair into the table. * remove key from table if value is null. * @param key: key * @param val: value * @throws IllegalArgumentException if key is null */ public void put ( K key , V val ) { // search for key. int i = rank ( key ); // update value if found if ( i size keys [ i ]. compareTo ( key ) == 0 ) { vals [ i ] = val ; return ; } // grow table if new for ( int j = size ; j i ; j --) { keys [ j ] = keys [ j - 1 ]; vals [ j ] = vals [ j - 1 ]; size ++; } } /** * V paired with key. * (null if key is absent) * @param key: key * @return V paired with key */ public V get ( K key ) { if ( isEmpty ()) return null ; int i = rank ( key ); if ( i size keys [ i ]. compareTo ( key ) == 0 ) return vals [ i ]; // search hit return null ; // search miss } } Binary Search The reason that we keep keys in an ordered array is so that we can use array indexing to dramatically reduce the number of compares required for each search, using the classic and venerable binary search algorithm. To search, we compare the search key against the key in the middle of the subarray. If the search key is less than the key in the middle, we search in the left half of the subarray; if the search key is greater than the key in the middle, we search in the right half of the subarray; otherwise the key in the middle is equal to the search key. Recursive Binary Search: private int rank ( K key , int lo , int hi ) { if ( hi lo ) return lo ; int mid = ( lo + hi )/ 2 ; int cmp = key . compareTo ( keys [ mid ]); if ( cmp 0 ) return rankRecursive ( key , lo , mid - 1 ); else if ( cmp 0 ) return rankRecursive ( key , mid + 1 , hi ); else return mid ; } Non-Recursive Binary Search: private int rank ( K key ) { int lo = 0 , hi = size - 1 ; while ( lo = hi ) { int mid = ( lo + hi )/ 2 ; int cmp = key . compareTo ( keys [ mid ]); if ( cmp 0 ) hi = mid - 1 ; else if ( cmp 0 ) lo = mid + 1 ; else return mid ; } return lo ; } Analysis Inserting N N distinct keys into an initially empty linked-list symbol table uses \\sim N^2 /2 \\sim N^2 /2 compares. Inserting a new key into an ordered array of size N N uses \\sim 2N \\sim 2N array accesses in the worst case, so inserting N N keys into an initially empty table uses \\sim N^2 \\sim N^2 array accesses in the worst case. The central question is whether we can devise algorithms and data structures that achieve logarithmic performance for both search and insert. Binary Search Trees Definition. A binary search tree (BST) is a binary tree where each node has a Comparable key (and an associated value) and satis\ufb01es the restriction that the key in any node is larger than the keys in all nodes in that node\u2019s left subtree and smaller than the keys in all nodes in that node\u2019s right subtree. Each node contains a key, a value, a left link, a right link, and a node count. private class Node { private Key key ; // sorted by key private Value val ; // associated data private Node left , right ; // left and right subtrees private int size ; // number of nodes in subtree public Node ( Key key , Value val , int size ) { this . key = key ; this . val = val ; this . size = size ; } } Basic Implementation get() A recursive algorithm to search for a key in a BST follows immediately from the recursive structure: if the tree is empty, we have a search miss ; if the search key is equal to the key at the root, we have a search hit . Otherwise, we search (recursively) in the appropriate subtree, moving left if the search key is smaller, right if it is larger. // Return value associated with key in the subtree rooted at x; // Return null if key not present in subtree rooted at x. private Value get ( Node x , Key key ) { if ( x == null ) return null ; int cmp = key . compareTo ( x . key ); if ( cmp 0 ) return get ( x . left , key ); else if ( cmp 0 ) return get ( x . right , key ); else return x . val ; } put() A more important essential feature of BSTs is that put is not much more difficult to implement than get . Indeed, a search for a key not in the tree ends at a null link, and all that we need to do is replace that link with a new node containing the key. // Search for key. Update value if found; grow table if new. public void put ( Key key , Value val ) { root = put ( root , key , val ); } // Change key\u2019s value to val if key in subtree rooted at x. // Otherwise, add new node to subtree associating key with val. private Node put ( Node x , Key key , Value val ) { if ( x == null ) return new Node ( key , val , 1 ); int cmp = key . compareTo ( x . key ); if ( cmp 0 ) x . left = put ( x . left , key , val ); else if ( cmp 0 ) x . right = put ( x . right , key , val ); else x . val = val ; // update value x . N = size ( x . left ) + size ( x . right ) + 1 ; // update count return x ; } Analysis The running times of algorithms on binary search trees depend on the shapes of the trees, which, in turn, depend on the order in which keys are inserted. In the best case, a tree with N N nodes could be perfectly balanced, with \\sim \\log N \\sim \\log N nodes between the root and each null link. In the worst case there could be N N nodes on the search path. The balance in typical trees turns out to be much closer to the best case than the worst case. Insertions, search miss and search hits in a BST built from N N random keys require \\sim 2 ln N \\sim 2 ln N (about 1.39 \\lg N \\lg N ) compares, on the average. Order-based methods and deletion An important reason that BSTs are widely used is that they allow us to keep the keys in order . min If the left link of the root is null, the smallest key in a BST is the key at the root; if the left link is not null, the smallest key in the BST is the smallest key in the subtree rooted at the node referenced by the left link. public Key min () { return min ( root ). key ; } private Node min ( Node x ) { if ( x . left == null ) return x ; return min ( x . left ); } floor floor() gives the largest key in the BST less than or equal to key. If a given key is less than the key at the root of a BST, then the floor of key must be in the left subtree. If key is greater than the key at the root, then the floor of key could be in the right subtree, but only if there is a key smaller than or equal to key in the right subtree; if not (or if key is equal to the key at the root), then the key at the root is the floor of key. public Key floor ( Key key ) { Node x = floor ( root , key ); if ( x == null ) return null ; return x . key ; } private Node floor ( Node x , Key key ) { if ( x == null ) return null ; int cmp = key . compareTo ( x . key ); if ( cmp == 0 ) return x ; if ( cmp 0 ) return floor ( x . left , key ); Node t = floor ( x . right , key ); if ( t != null ) return t ; else return x ; } rank rank() gives number of keys in the tree less than key: If the given key is equal to the key at the root, we return the number of keys t t in the left subtree; If the given key is less than the key at the root, we return the rank of the key in the left subtree (recursively computed); If the given key is larger than the key at the root, we return t t plus one (to count the key at the root) plus the rank of the key in the right subtree (recursively computed). public int rank ( Key key ) { return rank ( key , root ); } // Number of keys in the subtree less than key. private int rank ( Key key , Node x ) { if ( x == null ) return 0 ; int cmp = key . compareTo ( x . key ); if ( cmp 0 ) return rank ( key , x . left ); else if ( cmp 0 ) return 1 + size ( x . left ) + rank ( key , x . right ); else return size ( x . left ); } Subtree counts Each node stores the number of nodes in the subtree rooted at that node; to implement size() , return the count at the root. // Returns the number of key-value pairs in bst. public int size () { return size ( root ); } // return number of key-value pairs in BST rooted at x private int size ( Node x ) { if ( x == null ) return 0 ; else return x . size ; } Delete Deleting the minimum deleteMin() removes the key-value pair with the smallest key. Go left until finding a node with a null left link. Replace that node by its right link. Update subtree counts. // Removes the key-value pair with the smallest key. // throws NoSuchElementException if the bst is empty public void deleteMin () { if ( isEmpty ()) throw new NoSuchElementException ( BST is empty ); deleteMin ( root ); } private Node deleteMin ( Node x ) { if ( x . left == null ) return x . right ; x . left = deleteMin ( x . left ); x . size = size ( x . left ) + size ( x . right ) + 1 ; return x ; } Analysis In a BST, all operations take time proportional to the height of the tree, in the worst case.","title":"Topic 5: Symbol Tables"},{"location":"algorithm/algorithmPrinceton/symboltable/#topic-5-symbol-tables","text":"Symbol Table Binary Search Binary Search Tree","title":"Topic 5: Symbol Tables"},{"location":"algorithm/algorithmPrinceton/symboltable/#symbol-tables","text":"Definition. A symbol table is a data structure for key-value pairs that supports two operations: insert (put) a new pair into the table and search for (get) the value associated with a given key. key-value pair abstraction. insert a value with specified key. Given a key, search for the corresponding value.","title":"Symbol Tables"},{"location":"algorithm/algorithmPrinceton/symboltable/#basic-symbol-table-api","text":"API for a generic basic symbol table:","title":"Basic Symbol Table API"},{"location":"algorithm/algorithmPrinceton/symboltable/#ordered-symbol-tables-api","text":"Specifically, for applications where keys are Comparable , we implement the following API.","title":"Ordered symbol tables API"},{"location":"algorithm/algorithmPrinceton/symboltable/#preview","text":"We shall consider six symbol-table implementations in this section, so a brief preview is in order. Pros and cons of symbol-table implementations:","title":"Preview"},{"location":"algorithm/algorithmPrinceton/symboltable/#elementary-implementations","text":"","title":"Elementary Implementations"},{"location":"algorithm/algorithmPrinceton/symboltable/#sequential-search-unordered-list","text":"Sequential search in a linked list: Maintain an (unordered) linked list of key-value pairs. Search : Scan through all keys until find a match. Insert : Scan through all keys until find a match; if no match add to front. Click Here To View Code public class SequentialSearchST Key , Value { private Node first ; private int size ; /** * create a symbol table */ public SequentialSearchST () { } /** * put key-value pair into the table. * remove key from table if value is null. * @param key: key * @param val: value * @throws IllegalArgumentException if key is null */ public void put ( Key key , Value val ) { // if key is null if ( key == null ) throw new IllegalArgumentException ( Key is null ); // Search for key. Update value if found; grow table if new. for ( Node cur = first ; cur != null ; cur = cur . next ) { if ( cur . key . equals ( key )) { cur . value = val ; // Search hit: update val. return ; } } first = new Node ( key , val , first ); // Search miss: add new node. size ++; } /** * Value paired with key. * (null if key is absent) * @param key: key * @return Value paired with key */ public Value get ( Key key ) { // Search for key for ( Node cur = first ; cur != null ; cur = cur . next ) { if ( cur . key . equals ( key )) { return cur . value ; // search hit } } return null ; // search miss } /** * remove key (and its value) from table * @param key: a key to delete * @throws IllegalArgumentException if key is null */ public void delete ( Key key ) { // if key is null if ( key == null ) throw new IllegalArgumentException ( Key is null ); // delete first if ( first . key . equals ( key )) { Node toDelete = first ; first = first . next ; first . next = null ; // prevent loitering size --; return ; } // search for key in the rest of the linkedlist for ( Node cur = first ; cur . next != null ; cur = cur . next ) { if ( cur . next . key . equals ( key )) { // search hit Node toDelete = cur . next ; cur . next = cur . next . next ; toDelete . next = null ; // prevent loitering size --; return ; } } } /** * is there a value paired with key? * @param key: a key * @return true, if the key exists. * */ public boolean contains ( Key key ) { return get ( key ) == null ; } /** * is the table empty? * @return true, if empty. */ public boolean isEmpty () { return size () == 0 ; } /** * number of key-value pairs in the table * @return the size of the symbol table */ public int size () { return size ; } /** * all the keys in the table * @return an iterable of keys */ public Iterable Key keys () { List Key keyList = new ArrayList (); for ( Node cur = first ; cur != null ; cur = cur . next ) { keyList . add ( cur . key ); } return keyList ; } /** * Node for LinkedList */ private class Node { Key key ; Value value ; Node next ; Node ( Key key , Value value , Node next ) { this . key = key ; this . value = value ; this . next = next ; } } }","title":"Sequential Search (unordered list)"},{"location":"algorithm/algorithmPrinceton/symboltable/#binary-search-ordered-array","text":"Next, we consider a full implementation of our ordered symbol-table API. The underlying data structure is a pair of parallel arrays, one for the keys and one for the values. The heart of the implementation is the rank() method, which returns the number of keys smaller than a given key. For get() , the rank tells us precisely where the key is to be found if it is in the table (and, if it is not there, that it is not in the table). For put() , the rank tells us precisely where to update the value when the key is in the table, and precisely where to put the key when the key is not in the table. Click Here To View Code public class BinarySearchST K extends Comparable K , V { private K [] keys ; private V [] vals ; private int size ; /** * create a symbol table. * @param capacity: the size of the symbol table */ @SuppressWarnings ( unchecked ) public BinarySearchST ( int capacity ) { keys = ( K []) new Comparable [ capacity ]; vals = ( V []) new Object [ capacity ]; } /** * put key-value pair into the table. * remove key from table if value is null. * @param key: key * @param val: value * @throws IllegalArgumentException if key is null */ public void put ( K key , V val ) { // search for key. int i = rank ( key ); // update value if found if ( i size keys [ i ]. compareTo ( key ) == 0 ) { vals [ i ] = val ; return ; } // grow table if new for ( int j = size ; j i ; j --) { keys [ j ] = keys [ j - 1 ]; vals [ j ] = vals [ j - 1 ]; size ++; } } /** * V paired with key. * (null if key is absent) * @param key: key * @return V paired with key */ public V get ( K key ) { if ( isEmpty ()) return null ; int i = rank ( key ); if ( i size keys [ i ]. compareTo ( key ) == 0 ) return vals [ i ]; // search hit return null ; // search miss } } Binary Search The reason that we keep keys in an ordered array is so that we can use array indexing to dramatically reduce the number of compares required for each search, using the classic and venerable binary search algorithm. To search, we compare the search key against the key in the middle of the subarray. If the search key is less than the key in the middle, we search in the left half of the subarray; if the search key is greater than the key in the middle, we search in the right half of the subarray; otherwise the key in the middle is equal to the search key. Recursive Binary Search: private int rank ( K key , int lo , int hi ) { if ( hi lo ) return lo ; int mid = ( lo + hi )/ 2 ; int cmp = key . compareTo ( keys [ mid ]); if ( cmp 0 ) return rankRecursive ( key , lo , mid - 1 ); else if ( cmp 0 ) return rankRecursive ( key , mid + 1 , hi ); else return mid ; } Non-Recursive Binary Search: private int rank ( K key ) { int lo = 0 , hi = size - 1 ; while ( lo = hi ) { int mid = ( lo + hi )/ 2 ; int cmp = key . compareTo ( keys [ mid ]); if ( cmp 0 ) hi = mid - 1 ; else if ( cmp 0 ) lo = mid + 1 ; else return mid ; } return lo ; }","title":"Binary Search (ordered array)"},{"location":"algorithm/algorithmPrinceton/symboltable/#analysis","text":"Inserting N N distinct keys into an initially empty linked-list symbol table uses \\sim N^2 /2 \\sim N^2 /2 compares. Inserting a new key into an ordered array of size N N uses \\sim 2N \\sim 2N array accesses in the worst case, so inserting N N keys into an initially empty table uses \\sim N^2 \\sim N^2 array accesses in the worst case. The central question is whether we can devise algorithms and data structures that achieve logarithmic performance for both search and insert.","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/symboltable/#binary-search-trees","text":"Definition. A binary search tree (BST) is a binary tree where each node has a Comparable key (and an associated value) and satis\ufb01es the restriction that the key in any node is larger than the keys in all nodes in that node\u2019s left subtree and smaller than the keys in all nodes in that node\u2019s right subtree. Each node contains a key, a value, a left link, a right link, and a node count. private class Node { private Key key ; // sorted by key private Value val ; // associated data private Node left , right ; // left and right subtrees private int size ; // number of nodes in subtree public Node ( Key key , Value val , int size ) { this . key = key ; this . val = val ; this . size = size ; } }","title":"Binary Search Trees"},{"location":"algorithm/algorithmPrinceton/symboltable/#basic-implementation","text":"get() A recursive algorithm to search for a key in a BST follows immediately from the recursive structure: if the tree is empty, we have a search miss ; if the search key is equal to the key at the root, we have a search hit . Otherwise, we search (recursively) in the appropriate subtree, moving left if the search key is smaller, right if it is larger. // Return value associated with key in the subtree rooted at x; // Return null if key not present in subtree rooted at x. private Value get ( Node x , Key key ) { if ( x == null ) return null ; int cmp = key . compareTo ( x . key ); if ( cmp 0 ) return get ( x . left , key ); else if ( cmp 0 ) return get ( x . right , key ); else return x . val ; } put() A more important essential feature of BSTs is that put is not much more difficult to implement than get . Indeed, a search for a key not in the tree ends at a null link, and all that we need to do is replace that link with a new node containing the key. // Search for key. Update value if found; grow table if new. public void put ( Key key , Value val ) { root = put ( root , key , val ); } // Change key\u2019s value to val if key in subtree rooted at x. // Otherwise, add new node to subtree associating key with val. private Node put ( Node x , Key key , Value val ) { if ( x == null ) return new Node ( key , val , 1 ); int cmp = key . compareTo ( x . key ); if ( cmp 0 ) x . left = put ( x . left , key , val ); else if ( cmp 0 ) x . right = put ( x . right , key , val ); else x . val = val ; // update value x . N = size ( x . left ) + size ( x . right ) + 1 ; // update count return x ; } Analysis The running times of algorithms on binary search trees depend on the shapes of the trees, which, in turn, depend on the order in which keys are inserted. In the best case, a tree with N N nodes could be perfectly balanced, with \\sim \\log N \\sim \\log N nodes between the root and each null link. In the worst case there could be N N nodes on the search path. The balance in typical trees turns out to be much closer to the best case than the worst case. Insertions, search miss and search hits in a BST built from N N random keys require \\sim 2 ln N \\sim 2 ln N (about 1.39 \\lg N \\lg N ) compares, on the average.","title":"Basic Implementation"},{"location":"algorithm/algorithmPrinceton/symboltable/#order-based-methods-and-deletion","text":"An important reason that BSTs are widely used is that they allow us to keep the keys in order . min If the left link of the root is null, the smallest key in a BST is the key at the root; if the left link is not null, the smallest key in the BST is the smallest key in the subtree rooted at the node referenced by the left link. public Key min () { return min ( root ). key ; } private Node min ( Node x ) { if ( x . left == null ) return x ; return min ( x . left ); } floor floor() gives the largest key in the BST less than or equal to key. If a given key is less than the key at the root of a BST, then the floor of key must be in the left subtree. If key is greater than the key at the root, then the floor of key could be in the right subtree, but only if there is a key smaller than or equal to key in the right subtree; if not (or if key is equal to the key at the root), then the key at the root is the floor of key. public Key floor ( Key key ) { Node x = floor ( root , key ); if ( x == null ) return null ; return x . key ; } private Node floor ( Node x , Key key ) { if ( x == null ) return null ; int cmp = key . compareTo ( x . key ); if ( cmp == 0 ) return x ; if ( cmp 0 ) return floor ( x . left , key ); Node t = floor ( x . right , key ); if ( t != null ) return t ; else return x ; } rank rank() gives number of keys in the tree less than key: If the given key is equal to the key at the root, we return the number of keys t t in the left subtree; If the given key is less than the key at the root, we return the rank of the key in the left subtree (recursively computed); If the given key is larger than the key at the root, we return t t plus one (to count the key at the root) plus the rank of the key in the right subtree (recursively computed). public int rank ( Key key ) { return rank ( key , root ); } // Number of keys in the subtree less than key. private int rank ( Key key , Node x ) { if ( x == null ) return 0 ; int cmp = key . compareTo ( x . key ); if ( cmp 0 ) return rank ( key , x . left ); else if ( cmp 0 ) return 1 + size ( x . left ) + rank ( key , x . right ); else return size ( x . left ); } Subtree counts Each node stores the number of nodes in the subtree rooted at that node; to implement size() , return the count at the root. // Returns the number of key-value pairs in bst. public int size () { return size ( root ); } // return number of key-value pairs in BST rooted at x private int size ( Node x ) { if ( x == null ) return 0 ; else return x . size ; }","title":"Order-based methods and deletion"},{"location":"algorithm/algorithmPrinceton/symboltable/#delete","text":"Deleting the minimum deleteMin() removes the key-value pair with the smallest key. Go left until finding a node with a null left link. Replace that node by its right link. Update subtree counts. // Removes the key-value pair with the smallest key. // throws NoSuchElementException if the bst is empty public void deleteMin () { if ( isEmpty ()) throw new NoSuchElementException ( BST is empty ); deleteMin ( root ); } private Node deleteMin ( Node x ) { if ( x . left == null ) return x . right ; x . left = deleteMin ( x . left ); x . size = size ( x . left ) + size ( x . right ) + 1 ; return x ; }","title":"Delete"},{"location":"algorithm/algorithmPrinceton/symboltable/#analysis_1","text":"In a BST, all operations take time proportional to the height of the tree, in the worst case.","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/unionfind/","text":"Chapter 1: Union Find 1 Dynamic Connectivity The graph connectivity problem is the following: Given an undirected graph G, preprocess the graph so that queries of the form \u201care nodes u and v connected?\u201d Connected components : Maximal set of objects that are mutually connected. Union-Find data type (API) Union-Find API: the union() operation merges two components if the two sites are in different components. the find() operation returns an integer component identifier for a given site. the connected() operation determines whether two sites are in the same component. the count() method returns the number of components. public class QuickFind { private int [] id ; private int count ; public QuickFind ( int N ) { count = N ; id = new int [ N ]; for ( int i = 0 ; i N ; i ++) id [ i ] = i ; } public boolean connected ( int p , int q ) { return find ( p ) == find ( q ); } public int find ( int p ) { } public void union ( int p , int q ) { } } Dynamic-connectivity client Read in number of objects N N from standard input. Repeat: read in pair of integers from standard input if they are not yet connected, connect them and print out pair We shall consider several different implementations, all based on using the site-indexed id[] array, to determine whether two sites are in the same connected component. 2 Quick-Find Quick-find idea: all sites in a component must have the same value in id[]. This method is called quick-find because find(p) just returns id[p], which immediately implies that connected(p, q) reduces to just the test id[p] == id[q] and returns true , if and only if p and q are in the same component. Union() : To combine the two components into one, we have to make all of the id[] entries corresponding to both sets of sites the same value. To do so, we go through the array, changing all the entries with values equal to id[p] to the value id[q]. public class QuickFind { private int [] id ; public QuickFind ( int N ) { id = new int [ N ]; for ( int i = 0 ; i N ; i ++) id [ i ] = i ; } public boolean connected ( int p , int q ) { return id [ p ] == id [ q ]; } public void union ( int p , int q ) { int pid = id [ p ]; int qid = id [ q ]; for ( int i = 0 ; i id . length ; i ++) if ( id [ i ] == pid ) id [ i ] = qid ; } } Analysis The quick-find algorithm uses one array access for each call to find() and between N + 3 N + 3 and 2N + 1 2N + 1 array accesses for each call to union() that combines two components. WORST CASE: suppose we wind up with a single component. This requires at least N-1 N-1 calls to union() , and, consequently, at least (N+3)(N-1) \\sim N^2 (N+3)(N-1) \\sim N^2 array accesses\u2014we are led immediately to the hypothesis that dynamic connectivity with quick-find can be a quadratic-time process. 3 Quick-Union Data structure: Interpretation: id[i] is parent of i. Root of i is id[id[id[...id[i]...]]] (keep going until it doesn\u2019t change) Specifically, the id[] entry, for each site is the name of another site in the same component (possibly itself)\u2014we refer to this connection as a link. To implement find() , we start at the given site, follow its link to another site, follow that site\u2019s link to yet another site, and so forth, following links until reaching a root, a site that has a link to itself. Two sites are in the same component if and only if this process leads them to the same root. union(p, q) : we follow links to finds the roots associated with p and q, then rename one of the components by linking one of these roots to the other; hence the name quick-union. public class QuickUnion { private int [] id ; private int count ; public QuickUnion ( int N ) { count = N ; id = new int [ N ]; // set id of each object to itself (N array accesses) for ( int i = 0 ; i N ; i ++) id [ i ] = i ; } private int find ( int p ) { // chase parent pointers until reach root while ( p != id [ p ]) p = id [ p ]; return p ; } public boolean connected ( int p , int q ) { //check if p and q have same root return find ( p ) == find ( q ); } public void union ( int p , int q ) { // change root of p to point to root of q int i = find ( p ); int j = find ( q ); id [ i ] = j ; count --; } } Analysis The number of array accesses used by find() in quick-union is 1 plus the twice the depth of the node corresponding to the given site. The number of array accesses used by union() and connected() is the cost of the two find() operations (plus 1 for union() if the given sites are in different trees). WORST CASE: suppose we wind up with a single component, the running time is quadratic 4 Improvement 1: weighting Weighted quick-union : Rather than arbitrarily connecting the second tree to the first for union() , we keep track of the size of each tree and always c onnect the smaller tree to the larger . This change needs another array to hold the node counts. public class WeightedQuickUnion { private int [] id ; // parent link (site indexed) private int [] sz ; // size of component for roots (site indexed) private int count ; // number of components public WeightedQuickUnion ( int N ) { count = N ; id = new int [ N ]; for ( int i = 0 ; i N ; i ++) id [ i ] = i ; sz = new int [ N ]; for ( int i = 0 ; i N ; i ++) sz [ i ] = 1 ; } public int count () { return count ; } public boolean connected ( int p , int q ) { return find ( p ) == find ( q ); } private int find ( int p ) { // Follow links to find a root. while ( p != id [ p ]) p = id [ p ]; return p ; } public void union ( int p , int q ) { int i = find ( p ); int j = find ( q ); if ( i == j ) return ; // Make smaller root point to larger one. if ( sz [ i ] sz [ j ]) { id [ i ] = j ; sz [ j ] += sz [ i ]; } else { id [ j ] = i ; sz [ i ] += sz [ j ]; } count --; } } Analysis The depth of any node in a forest built by weighted quick-union for N N sites is at most \\log N \\log N . The worst case for weighted quick union is when the sizes of the trees to be merged by union() are always equal (and a power of 2). And they have the simple property that the height of a tree of 2^n 2^n nodes is n n . For weighted quick-union with N N sites, the worst-case order of growth of the cost of find() , connected() , and union() is \\log N \\log N . Specifically, the weighted quick-union algorithm uses at most cM\\log N cM\\log N array accesses to process M M connections among N N sites for a small constant c c . 5 Improvement 2: path compression IDEA: Just after computing the root of p, set the id of each examined node to point to that root. Two-pass implementation: add second loop to find() to set the id[] of each examined node to the root. Simpler one-pass variant: Make every other node in path point to its grandparent (thereby halving path length). private int find ( int p ) { // Follow links to find a root. while ( p != id [ p ]) { // only one extra line of code ! id [ p ] = id [ id [ p ]]; p = id [ p ]; } return p ; } Amortized Analysis Starting from an empty data structure, any sequence of M M union-find ops on N N objects makes \\le c ( N + M \\lg^*N ) \\le c ( N + M \\lg^*N ) array accesses, where lg^* lg^* is iterated logarithm[ wiki ]. ( lg^*N lg^*N \u8868\u793a\u5c06 N N \u53d8\u4e3a\u5c0f\u4e8e1\u9700\u8981\u7684 \\log \\log \u8fed\u4ee3\u6b21\u6570) Application - Percolation","title":"Topic 1: UnionFind"},{"location":"algorithm/algorithmPrinceton/unionfind/#chapter-1-union-find","text":"","title":"Chapter 1: Union Find"},{"location":"algorithm/algorithmPrinceton/unionfind/#1-dynamic-connectivity","text":"The graph connectivity problem is the following: Given an undirected graph G, preprocess the graph so that queries of the form \u201care nodes u and v connected?\u201d Connected components : Maximal set of objects that are mutually connected.","title":"1 Dynamic Connectivity"},{"location":"algorithm/algorithmPrinceton/unionfind/#union-find-data-type-api","text":"Union-Find API: the union() operation merges two components if the two sites are in different components. the find() operation returns an integer component identifier for a given site. the connected() operation determines whether two sites are in the same component. the count() method returns the number of components. public class QuickFind { private int [] id ; private int count ; public QuickFind ( int N ) { count = N ; id = new int [ N ]; for ( int i = 0 ; i N ; i ++) id [ i ] = i ; } public boolean connected ( int p , int q ) { return find ( p ) == find ( q ); } public int find ( int p ) { } public void union ( int p , int q ) { } }","title":"Union-Find data type (API)"},{"location":"algorithm/algorithmPrinceton/unionfind/#dynamic-connectivity-client","text":"Read in number of objects N N from standard input. Repeat: read in pair of integers from standard input if they are not yet connected, connect them and print out pair We shall consider several different implementations, all based on using the site-indexed id[] array, to determine whether two sites are in the same connected component.","title":"Dynamic-connectivity client"},{"location":"algorithm/algorithmPrinceton/unionfind/#2-quick-find","text":"Quick-find idea: all sites in a component must have the same value in id[]. This method is called quick-find because find(p) just returns id[p], which immediately implies that connected(p, q) reduces to just the test id[p] == id[q] and returns true , if and only if p and q are in the same component. Union() : To combine the two components into one, we have to make all of the id[] entries corresponding to both sets of sites the same value. To do so, we go through the array, changing all the entries with values equal to id[p] to the value id[q]. public class QuickFind { private int [] id ; public QuickFind ( int N ) { id = new int [ N ]; for ( int i = 0 ; i N ; i ++) id [ i ] = i ; } public boolean connected ( int p , int q ) { return id [ p ] == id [ q ]; } public void union ( int p , int q ) { int pid = id [ p ]; int qid = id [ q ]; for ( int i = 0 ; i id . length ; i ++) if ( id [ i ] == pid ) id [ i ] = qid ; } }","title":"2 Quick-Find"},{"location":"algorithm/algorithmPrinceton/unionfind/#analysis","text":"The quick-find algorithm uses one array access for each call to find() and between N + 3 N + 3 and 2N + 1 2N + 1 array accesses for each call to union() that combines two components. WORST CASE: suppose we wind up with a single component. This requires at least N-1 N-1 calls to union() , and, consequently, at least (N+3)(N-1) \\sim N^2 (N+3)(N-1) \\sim N^2 array accesses\u2014we are led immediately to the hypothesis that dynamic connectivity with quick-find can be a quadratic-time process.","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/unionfind/#3-quick-union","text":"Data structure: Interpretation: id[i] is parent of i. Root of i is id[id[id[...id[i]...]]] (keep going until it doesn\u2019t change) Specifically, the id[] entry, for each site is the name of another site in the same component (possibly itself)\u2014we refer to this connection as a link. To implement find() , we start at the given site, follow its link to another site, follow that site\u2019s link to yet another site, and so forth, following links until reaching a root, a site that has a link to itself. Two sites are in the same component if and only if this process leads them to the same root. union(p, q) : we follow links to finds the roots associated with p and q, then rename one of the components by linking one of these roots to the other; hence the name quick-union. public class QuickUnion { private int [] id ; private int count ; public QuickUnion ( int N ) { count = N ; id = new int [ N ]; // set id of each object to itself (N array accesses) for ( int i = 0 ; i N ; i ++) id [ i ] = i ; } private int find ( int p ) { // chase parent pointers until reach root while ( p != id [ p ]) p = id [ p ]; return p ; } public boolean connected ( int p , int q ) { //check if p and q have same root return find ( p ) == find ( q ); } public void union ( int p , int q ) { // change root of p to point to root of q int i = find ( p ); int j = find ( q ); id [ i ] = j ; count --; } }","title":"3 Quick-Union"},{"location":"algorithm/algorithmPrinceton/unionfind/#analysis_1","text":"The number of array accesses used by find() in quick-union is 1 plus the twice the depth of the node corresponding to the given site. The number of array accesses used by union() and connected() is the cost of the two find() operations (plus 1 for union() if the given sites are in different trees). WORST CASE: suppose we wind up with a single component, the running time is quadratic","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/unionfind/#4-improvement-1-weighting","text":"Weighted quick-union : Rather than arbitrarily connecting the second tree to the first for union() , we keep track of the size of each tree and always c onnect the smaller tree to the larger . This change needs another array to hold the node counts. public class WeightedQuickUnion { private int [] id ; // parent link (site indexed) private int [] sz ; // size of component for roots (site indexed) private int count ; // number of components public WeightedQuickUnion ( int N ) { count = N ; id = new int [ N ]; for ( int i = 0 ; i N ; i ++) id [ i ] = i ; sz = new int [ N ]; for ( int i = 0 ; i N ; i ++) sz [ i ] = 1 ; } public int count () { return count ; } public boolean connected ( int p , int q ) { return find ( p ) == find ( q ); } private int find ( int p ) { // Follow links to find a root. while ( p != id [ p ]) p = id [ p ]; return p ; } public void union ( int p , int q ) { int i = find ( p ); int j = find ( q ); if ( i == j ) return ; // Make smaller root point to larger one. if ( sz [ i ] sz [ j ]) { id [ i ] = j ; sz [ j ] += sz [ i ]; } else { id [ j ] = i ; sz [ i ] += sz [ j ]; } count --; } }","title":"4 Improvement 1: weighting"},{"location":"algorithm/algorithmPrinceton/unionfind/#analysis_2","text":"The depth of any node in a forest built by weighted quick-union for N N sites is at most \\log N \\log N . The worst case for weighted quick union is when the sizes of the trees to be merged by union() are always equal (and a power of 2). And they have the simple property that the height of a tree of 2^n 2^n nodes is n n . For weighted quick-union with N N sites, the worst-case order of growth of the cost of find() , connected() , and union() is \\log N \\log N . Specifically, the weighted quick-union algorithm uses at most cM\\log N cM\\log N array accesses to process M M connections among N N sites for a small constant c c .","title":"Analysis"},{"location":"algorithm/algorithmPrinceton/unionfind/#5-improvement-2-path-compression","text":"IDEA: Just after computing the root of p, set the id of each examined node to point to that root. Two-pass implementation: add second loop to find() to set the id[] of each examined node to the root. Simpler one-pass variant: Make every other node in path point to its grandparent (thereby halving path length). private int find ( int p ) { // Follow links to find a root. while ( p != id [ p ]) { // only one extra line of code ! id [ p ] = id [ id [ p ]]; p = id [ p ]; } return p ; }","title":"5 Improvement 2: path compression"},{"location":"algorithm/algorithmPrinceton/unionfind/#amortized-analysis","text":"Starting from an empty data structure, any sequence of M M union-find ops on N N objects makes \\le c ( N + M \\lg^*N ) \\le c ( N + M \\lg^*N ) array accesses, where lg^* lg^* is iterated logarithm[ wiki ]. ( lg^*N lg^*N \u8868\u793a\u5c06 N N \u53d8\u4e3a\u5c0f\u4e8e1\u9700\u8981\u7684 \\log \\log \u8fed\u4ee3\u6b21\u6570)","title":"Amortized Analysis"},{"location":"algorithm/algorithmPrinceton/unionfind/#application-percolation","text":"","title":"Application - Percolation"},{"location":"algorithm/algorithmStanford/","text":"AlgorithmStanford Topic: Dynammic Programming Topic: Heap Topic: Graph Topic: Greedy Algorithm","title":"Contents"},{"location":"algorithm/algorithmStanford/#algorithmstanford","text":"Topic: Dynammic Programming Topic: Heap Topic: Graph Topic: Greedy Algorithm","title":"AlgorithmStanford"},{"location":"algorithm/algorithmStanford/dynamicprogramming/","text":"Algorithm (Stanford), Dynammic Programming 1. Introduction Dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions. It stores solutions to subproblems instead of recomputing them(called memoization technique). Dynamic programming v.s. Divide-and-conquer algorithm Divide-and-conquer algorithms partition the problem into disjoint subproblems, solve the subproblems recursively, and then combine their solutions to solve the original problem. In contrast, dynamic programming partition the problem into subproblems that overlaps, that is, subproblems share subproblems. Approach There are usually two equivalent ways to implement a dynamic-programming approach. Top-down with memoization \u81ea\u9876\u5411\u4e0b\u6cd5 We write the procedure recursively in a natural manner, but modified to save the result of each subproblem in the hash table. The procedure first checks to see whether it has previously solved this subproblem. If so, it returns the saved value, saving further computation at this level; if not, the procedure computes the value in the usual manner. Bottom-up method \u81ea\u5e95\u5411\u4e0a\u6cd5 We sort the subproblems by size and solve them in size order, smallest first. When solving a particular subproblem, we have already solved all of the smaller subproblems its solution depends upon, and we have saved their solutions. We solve each subproblem only once, and when we first see it, we have already solved all of its prerequisite subproblems. Which Method? Top-down approach often results in slightly simpler and clearer code. Top-down approach only computes the partial results that are needed for the particular problem instance, whereas the bottom-up approach computes all partial results even if some of them go unused. 2 Application: Maximum weight independent set of path graph Input : A path graph G=(V,E) G=(V,E) with nonnegative weights on vertices. Desired Output : subset of nonadjacent vertices - an independent set (\u72ec\u7acb\u96c6) of maximum total weight. Background : A path graph [ wiki ] is a graph whose vertices can be listed in the order v_1, v_2, \u2026, v_n v_1, v_2, \u2026, v_n such that the edges are { v_i, v_{i+1} v_i, v_{i+1} } . A path graph is therefore a graph that can be drawn so that all of its vertices and edges lie on a single straight line. A Independent set is a set of vertices in a graph, no two of which are adjacent. Basis An optimal solution can have one of two properties: Case 1: Either the last element in the path is not part of the maximum weighted independent set (in which case we know that the solution is equally valid for the subgraph G' formed by popping the last vertex off the path) Case 2: Or the last element is part of the set (in which case we know that the predecessor cannot be part of the set, and the solution minus the last vertex is equally valid for the subgraph G'' formed by popping off the last two vertices of the path) Proposed algorithm A dynamic programming approach can solve the problem in linear time: The first time solving a subproblem, cache its solution in a global table for O(1)-time lookup later on. Plan: Populate array A A left to right with A[i] A[i] = value of max-weight Independent Set of G_i G_i . Initialization: A[0] = 0, A[1] = w_1 A[0] = 0, A[1] = w_1 Main loop: For i = 2, 3, . . . , n i = 2, 3, . . . , n : A[i] = \\max\\{ A[i \u2212 1] , A[i \u2212 2] + w_i \\} A[i] = \\max\\{ A[i \u2212 1] , A[i \u2212 2] + w_i \\} A Reconstruction: the algorithm above computes the value of a max-weight IS, not such an IS itself. So trace back through filled-in array to reconstruct optimal solution. While i \u2265 1 [scan through array from right to left] If A[i \u2212 1] \u2265 A[i \u2212 2] + w_i A[i \u2212 1] \u2265 A[i \u2212 2] + w_i [i.e. case 1 wins] Decrease i i by 1 Else [i.e., case 2 wins] Add i i to S, decrease i i by 2 Return S Implementation Java\u4ee3\u7801\uff1a public static int [] getMaximumWeightIndependentSet ( int [] weights ) { // setWeights: for ith item, it holds maximum weights of previous i weights. int [] setWeights = new int [ weights . length + 1 ]; // Base conditions. setWeights [ 0 ] = 0 ; setWeights [ 1 ] = weights [ 0 ]; // The max weight will be the max of: // Case 1: the last element in the path is not part of the maximum weighted IS. // then max weight will be previous max weight. // Case 2: the last element in the path is not part of the maximum weighted IS, // then max weight will be, previous vertex + weight of current vertex. for ( int i = 1 ; i weights . length ; i ++) setWeights [ i + 1 ] = Math . max ( setWeights [ i ], setWeights [ i - 1 ] + weights [ i ]); // list to hold each index of the max weight independent set List Integer maxWeightIndependentSet = new ArrayList (); // Reconstruct the max weight independent set. for ( int i = setWeights . length - 1 ; i = 1 ; ) if ( setWeights [ i ] setWeights [ i - 1 ]) { maxWeightIndependentSet . add ( i ); i -= 2 ; } else i -= 1 ; return Ints . toArray ( maxWeightIndependentSet ); } Python\u4ee3\u7801 def maximum_weight_independent_set ( weights ): Compute Maximum weight independent set for a path graph. Weights of vertexes in the path graph are given. Return maximum weight independent set. num = len ( weights ) a = [ 0 ] * ( num + 1 ) in_set = [] # independent set a [ 0 ], a [ 1 ] = 0 , weights [ 0 ] for i in range ( 2 , num + 1 ): a [ i ] = max ( a [ i - 1 ], a [ i - 2 ] + weights [ i - 1 ]) i = num + 1 ; while i = 1 : # start i: # last element if a [ i - 1 ] = a [ i - 2 ] + weights [ i - 1 ]: # last vertex not in set i -= 1 else : # last vertex is in set in_set . append ( i - 1 ) i -= 2 in_set . reverse () return in_set 3. Application: 0-1 Knapsack Problem The most common problem being solved is the 0-1 knapsack problem (0-1\u80cc\u5305\u95ee\u9898), which restricts the number of copies of each kind of item to zero or one . Given a set of n n items numbered from 1 up to n n , each with a weight w_i w_i and a value v_i v_i , along with a maximum weight capacity W W , \\begin{equation} \\begin{split} \\text{maximize} \\sum_{i=1}^nv_ix_i\\\\ \\text{subject to} \\sum_{i=1}^n w_ix_i \\le W \\quad \\text{and} \\quad x_i \\in \\{0,1\\}\\\\ \\end{split} \\end{equation} \\begin{equation} \\begin{split} &\\text{maximize} \\sum_{i=1}^nv_ix_i\\\\ &\\text{subject to} \\sum_{i=1}^n w_ix_i \\le W \\quad \\text{and} \\quad x_i \\in \\{0,1\\}\\\\ \\end{split} \\end{equation} Informally, the problem is to maximize the sum of the values of the items in the knapsack so that the sum of the weights is less than or equal to the knapsack's capacity. Bottom-up method Solving Assume w_i, w_2,..., w_n, W w_i, w_2,..., w_n, W are strictly positive integers. Define m[i, w] m[i, w] to be the maximum value that can be attained with weight less than or equal to w w using items up to i i (first i i items). We can define m[i,w] m[i,w] recursively as follows: m[0, w]=0 m[0, w]=0 m[i,w]=m[i-1, w], \\text{if}\\quad w_i w m[i,w]=m[i-1, w], \\text{if}\\quad w_i > w ( the new item is more than the current weight limit) m[i,w]= \\max(m[i-1,w],m[i-1,w-w_i]+v_i), \\text{if}\\quad w_i \\le w m[i,w]= \\max(m[i-1,w],m[i-1,w-w_i]+v_i), \\text{if}\\quad w_i \\le w m(i, w) = max( m(i-1, w), m(i-1, w-weight[i]) + cost[i] ) ^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \u4e0d\u653e - 0 \u6709\u653e - 1 The following is pseudo code for the dynamic program: // Input : // Values ( stored in array v ) // Weights ( stored in array w ) // Number of distinct items ( n ) // Knapsack capacity ( W ) for j from 0 to W do : m [ 0 , j ] : = 0 for i = 1 , 2 , .. , n : for j = 0 , 1 , ... , W : if w [ i ] j then : m [ i , j ] : = m [ i - 1 , j ] else : m [ i , j ] : = max ( m [ i - 1 , j ], m [ i - 1 , j - w [ i ]] + v [ i ]) Implementation /** * 0/1 knapsack problem * @param values: values of items to put in the knapsack * @param weights: weights of items to put in the knapsack * @param maxWeight: a maximum weight capacity of the knapsack * @return * */ public static List Integer knapsack ( int [] values , int [] weights , int maxWeight ) { // m[i][j] to be the maximum value that can be attained with weight less than or equal to j, // using first i items int [][] m = new int [ values . length + 1 ][ maxWeight + 1 ]; // initialze: using first i=0 items, obviously, their maximum value is zero. for ( int j = 0 ; j = maxWeight ; j ++) m [ 0 ][ j ] = 0 ; // cal m for ( int i = 1 ; i m . length ; i ++) for ( int j = 1 ; j = maxWeight ; j ++) { int curWeight = weights [ i - 1 ]; if ( curWeight j ) m [ i ][ j ] = m [ i - 1 ][ j ]; // max(either not put , or put) else m [ i ][ j ] = Math . max ( m [ i - 1 ][ j ], values [ i - 1 ] + m [ i - 1 ][ j - curWeight ]); } // trace back to get items int max_val = m [ values . length ][ maxWeight ]; List Integer items = new ArrayList (); int i = values . length ; while ( max_val 0 i 0 ) { if ( Ints . contains ( m [ i - 1 ], max_val - values [ i - 1 ])) { max_val = max_val - values [ i - 1 ]; items . add ( i - 1 ); } i --; } return items ; } Python\u4ee3\u7801 def knapsack01 ( value , weight , w_size ): kanapsack01 solves a 0-1 knapsack problem, input: values(value) and weights(W) of items to put into knapsack ( size of which is w_size) output: the index of items that maximize the value of items putted in the knapsack the index of items counts from 0, and corresponding value n = len ( value ) # the number of items # maximum value that can be attained with weight = weight using first i items m = np . zeros ( shape = ( n + 1 , w_size + 1 ), dtype = int ) for i in range ( w_size + 1 ): m [ 0 , i ] = 0 if not isinstance ( w_size , int ): raise ValueError ( knapsack_size should be an integer ) for i in range ( 1 , n + 1 ): # items for j in range ( 1 , w_size + 1 ): # sizes if weight [ i - 1 ] j : m [ i , j ] = m [ i - 1 , j ] else : m [ i , j ] = max ( m [ i - 1 , j ], m [ i - 1 , j - weight [ i - 1 ]] + value [ i - 1 ]) max_val = m [ - 1 , - 1 ] items = set () while max_val 0 and i 0 : if max_val - value [ i - 1 ] in m [ i - 1 , :]: max_val = max_val - value [ i - 1 ] items . add ( i - 1 ) i -= 1 else : i -= 1 return items , m [ - 1 , - 1 ] top-down with memoization def knapsack01_recursive ( hash_table , value , weight , i , j ): # base case: when 1 items here if i == 1 : if weight [ i - 1 ] j : hash_table [( i , j )] = value [ i - 1 ] return value [ i - 1 ] else : hash_table [( i , j )] = 0 return 0 # sub-problem computed if ( i , j ) in hash_table : return hash_table [( i , j )] else : if weight [ i - 1 ] j : # only case 1 hash_table [( i , j )] = knapsack01_recursive ( hash_table , value , weight , i - 1 , j ) else : # case 1, item i-1 excluded case1 = knapsack01_recursive ( hash_table , value , weight , i - 1 , j ) # case 2, item i-1 included case2 = knapsack01_recursive ( hash_table , value , weight , i - 1 , j - weight [ i - 1 ]) + value [ i - 1 ] hash_table [( i , j )] = max ( case1 , case2 ) return hash_table [( i , j )] Analysis The running time of this algorithm is \u0398(nW) \u0398(nW) . Reference Knapsack Problem WIKIPEDIA Knapsack problem Stack Overflow The knapsack Problem PPT 4. Application: Optimal Binary Search Tree An Optimal Binary Search Tree (Optimal BST) is a binary search tree which provides the smallest possible search time for a given sequence of access probabilities. The cost of a BST node is the level of that node plus one multiplied by its frequency. Problem Statement : Given a sorted array keys[0.. n-1] of search keys and an array freq[0.. n-1] of frequency counts, where freq[i] is the number of searches to keys[i] . Construct a binary search tree of all keys such that the total cost of all the searches is as small as possible. Optimal Substructure The optimal cost of node i,...,j i,...,j can be recursively calculated using the following formula. Cost(i,j) = \\sum \\limits^{j}_{k=i}freq[k] + \\min \\limits_{r=i}^j[Cost(i,r-1)+Cost(r+1,j)] Cost(i,j) = \\sum \\limits^{j}_{k=i}freq[k] + \\min \\limits_{r=i}^j[Cost(i,r-1)+Cost(r+1,j)] We try all nodes one by one as root ( r r varies from i i to j j ). When we make r r th node as root, we recursively calculate optimal cost from i i to r-1 r-1 and r+1 r+1 to j j . Implementation: top-down with memoization def optimal_bst ( freq ): def opt_cost ( hash_table , freq , i , j ): Optimal Binary Search Tree Recursive Method used here # base case: only 0~1 element if j i : return 0 if j == i : return freq [ i ] # if already exists if ( i , j ) in hash_table : return hash_table [( i , j )] min_cost = sys . maxsize for r in range ( i , j + 1 ): cost = opt_cost ( hash_table , freq , i , r - 1 ) + opt_cost ( hash_table , freq , r + 1 , j ) if cost min_cost : min_cost = cost hash_table [( i , j )] = sum ( freq [ i : j + 1 ]) + min_cost return hash_table [( i , j )] return opt_cost ({}, freq , 0 , len ( freq ) - 1 ) Reference Optimal Binary Search Tree Optimal Binary Search Tree GeeksforGeeks","title":"Topic: Dynammic Programming"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#algorithm-stanford-dynammic-programming","text":"","title":"Algorithm (Stanford), Dynammic Programming"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#1-introduction","text":"Dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions. It stores solutions to subproblems instead of recomputing them(called memoization technique).","title":"1. Introduction"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#dynamic-programming-vs-divide-and-conquer-algorithm","text":"Divide-and-conquer algorithms partition the problem into disjoint subproblems, solve the subproblems recursively, and then combine their solutions to solve the original problem. In contrast, dynamic programming partition the problem into subproblems that overlaps, that is, subproblems share subproblems.","title":"Dynamic programming v.s. Divide-and-conquer algorithm"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#approach","text":"There are usually two equivalent ways to implement a dynamic-programming approach.","title":"Approach"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#top-down-with-memoization","text":"\u81ea\u9876\u5411\u4e0b\u6cd5 We write the procedure recursively in a natural manner, but modified to save the result of each subproblem in the hash table. The procedure first checks to see whether it has previously solved this subproblem. If so, it returns the saved value, saving further computation at this level; if not, the procedure computes the value in the usual manner.","title":"Top-down with memoization"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#bottom-up-method","text":"\u81ea\u5e95\u5411\u4e0a\u6cd5 We sort the subproblems by size and solve them in size order, smallest first. When solving a particular subproblem, we have already solved all of the smaller subproblems its solution depends upon, and we have saved their solutions. We solve each subproblem only once, and when we first see it, we have already solved all of its prerequisite subproblems.","title":"Bottom-up method"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#which-method","text":"Top-down approach often results in slightly simpler and clearer code. Top-down approach only computes the partial results that are needed for the particular problem instance, whereas the bottom-up approach computes all partial results even if some of them go unused.","title":"Which Method?"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#2-application-maximum-weight-independent-set-of-path-graph","text":"Input : A path graph G=(V,E) G=(V,E) with nonnegative weights on vertices. Desired Output : subset of nonadjacent vertices - an independent set (\u72ec\u7acb\u96c6) of maximum total weight. Background : A path graph [ wiki ] is a graph whose vertices can be listed in the order v_1, v_2, \u2026, v_n v_1, v_2, \u2026, v_n such that the edges are { v_i, v_{i+1} v_i, v_{i+1} } . A path graph is therefore a graph that can be drawn so that all of its vertices and edges lie on a single straight line. A Independent set is a set of vertices in a graph, no two of which are adjacent.","title":"2 Application: Maximum weight independent set of path graph"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#basis","text":"An optimal solution can have one of two properties: Case 1: Either the last element in the path is not part of the maximum weighted independent set (in which case we know that the solution is equally valid for the subgraph G' formed by popping the last vertex off the path) Case 2: Or the last element is part of the set (in which case we know that the predecessor cannot be part of the set, and the solution minus the last vertex is equally valid for the subgraph G'' formed by popping off the last two vertices of the path)","title":"Basis"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#proposed-algorithm","text":"A dynamic programming approach can solve the problem in linear time: The first time solving a subproblem, cache its solution in a global table for O(1)-time lookup later on. Plan: Populate array A A left to right with A[i] A[i] = value of max-weight Independent Set of G_i G_i . Initialization: A[0] = 0, A[1] = w_1 A[0] = 0, A[1] = w_1 Main loop: For i = 2, 3, . . . , n i = 2, 3, . . . , n : A[i] = \\max\\{ A[i \u2212 1] , A[i \u2212 2] + w_i \\} A[i] = \\max\\{ A[i \u2212 1] , A[i \u2212 2] + w_i \\} A Reconstruction: the algorithm above computes the value of a max-weight IS, not such an IS itself. So trace back through filled-in array to reconstruct optimal solution. While i \u2265 1 [scan through array from right to left] If A[i \u2212 1] \u2265 A[i \u2212 2] + w_i A[i \u2212 1] \u2265 A[i \u2212 2] + w_i [i.e. case 1 wins] Decrease i i by 1 Else [i.e., case 2 wins] Add i i to S, decrease i i by 2 Return S","title":"Proposed algorithm"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#implementation","text":"Java\u4ee3\u7801\uff1a public static int [] getMaximumWeightIndependentSet ( int [] weights ) { // setWeights: for ith item, it holds maximum weights of previous i weights. int [] setWeights = new int [ weights . length + 1 ]; // Base conditions. setWeights [ 0 ] = 0 ; setWeights [ 1 ] = weights [ 0 ]; // The max weight will be the max of: // Case 1: the last element in the path is not part of the maximum weighted IS. // then max weight will be previous max weight. // Case 2: the last element in the path is not part of the maximum weighted IS, // then max weight will be, previous vertex + weight of current vertex. for ( int i = 1 ; i weights . length ; i ++) setWeights [ i + 1 ] = Math . max ( setWeights [ i ], setWeights [ i - 1 ] + weights [ i ]); // list to hold each index of the max weight independent set List Integer maxWeightIndependentSet = new ArrayList (); // Reconstruct the max weight independent set. for ( int i = setWeights . length - 1 ; i = 1 ; ) if ( setWeights [ i ] setWeights [ i - 1 ]) { maxWeightIndependentSet . add ( i ); i -= 2 ; } else i -= 1 ; return Ints . toArray ( maxWeightIndependentSet ); } Python\u4ee3\u7801 def maximum_weight_independent_set ( weights ): Compute Maximum weight independent set for a path graph. Weights of vertexes in the path graph are given. Return maximum weight independent set. num = len ( weights ) a = [ 0 ] * ( num + 1 ) in_set = [] # independent set a [ 0 ], a [ 1 ] = 0 , weights [ 0 ] for i in range ( 2 , num + 1 ): a [ i ] = max ( a [ i - 1 ], a [ i - 2 ] + weights [ i - 1 ]) i = num + 1 ; while i = 1 : # start i: # last element if a [ i - 1 ] = a [ i - 2 ] + weights [ i - 1 ]: # last vertex not in set i -= 1 else : # last vertex is in set in_set . append ( i - 1 ) i -= 2 in_set . reverse () return in_set","title":"Implementation"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#3-application-0-1-knapsack-problem","text":"The most common problem being solved is the 0-1 knapsack problem (0-1\u80cc\u5305\u95ee\u9898), which restricts the number of copies of each kind of item to zero or one . Given a set of n n items numbered from 1 up to n n , each with a weight w_i w_i and a value v_i v_i , along with a maximum weight capacity W W , \\begin{equation} \\begin{split} \\text{maximize} \\sum_{i=1}^nv_ix_i\\\\ \\text{subject to} \\sum_{i=1}^n w_ix_i \\le W \\quad \\text{and} \\quad x_i \\in \\{0,1\\}\\\\ \\end{split} \\end{equation} \\begin{equation} \\begin{split} &\\text{maximize} \\sum_{i=1}^nv_ix_i\\\\ &\\text{subject to} \\sum_{i=1}^n w_ix_i \\le W \\quad \\text{and} \\quad x_i \\in \\{0,1\\}\\\\ \\end{split} \\end{equation} Informally, the problem is to maximize the sum of the values of the items in the knapsack so that the sum of the weights is less than or equal to the knapsack's capacity.","title":"3. Application: 0-1 Knapsack Problem"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#bottom-up-method_1","text":"Solving Assume w_i, w_2,..., w_n, W w_i, w_2,..., w_n, W are strictly positive integers. Define m[i, w] m[i, w] to be the maximum value that can be attained with weight less than or equal to w w using items up to i i (first i i items). We can define m[i,w] m[i,w] recursively as follows: m[0, w]=0 m[0, w]=0 m[i,w]=m[i-1, w], \\text{if}\\quad w_i w m[i,w]=m[i-1, w], \\text{if}\\quad w_i > w ( the new item is more than the current weight limit) m[i,w]= \\max(m[i-1,w],m[i-1,w-w_i]+v_i), \\text{if}\\quad w_i \\le w m[i,w]= \\max(m[i-1,w],m[i-1,w-w_i]+v_i), \\text{if}\\quad w_i \\le w m(i, w) = max( m(i-1, w), m(i-1, w-weight[i]) + cost[i] ) ^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \u4e0d\u653e - 0 \u6709\u653e - 1 The following is pseudo code for the dynamic program: // Input : // Values ( stored in array v ) // Weights ( stored in array w ) // Number of distinct items ( n ) // Knapsack capacity ( W ) for j from 0 to W do : m [ 0 , j ] : = 0 for i = 1 , 2 , .. , n : for j = 0 , 1 , ... , W : if w [ i ] j then : m [ i , j ] : = m [ i - 1 , j ] else : m [ i , j ] : = max ( m [ i - 1 , j ], m [ i - 1 , j - w [ i ]] + v [ i ]) Implementation /** * 0/1 knapsack problem * @param values: values of items to put in the knapsack * @param weights: weights of items to put in the knapsack * @param maxWeight: a maximum weight capacity of the knapsack * @return * */ public static List Integer knapsack ( int [] values , int [] weights , int maxWeight ) { // m[i][j] to be the maximum value that can be attained with weight less than or equal to j, // using first i items int [][] m = new int [ values . length + 1 ][ maxWeight + 1 ]; // initialze: using first i=0 items, obviously, their maximum value is zero. for ( int j = 0 ; j = maxWeight ; j ++) m [ 0 ][ j ] = 0 ; // cal m for ( int i = 1 ; i m . length ; i ++) for ( int j = 1 ; j = maxWeight ; j ++) { int curWeight = weights [ i - 1 ]; if ( curWeight j ) m [ i ][ j ] = m [ i - 1 ][ j ]; // max(either not put , or put) else m [ i ][ j ] = Math . max ( m [ i - 1 ][ j ], values [ i - 1 ] + m [ i - 1 ][ j - curWeight ]); } // trace back to get items int max_val = m [ values . length ][ maxWeight ]; List Integer items = new ArrayList (); int i = values . length ; while ( max_val 0 i 0 ) { if ( Ints . contains ( m [ i - 1 ], max_val - values [ i - 1 ])) { max_val = max_val - values [ i - 1 ]; items . add ( i - 1 ); } i --; } return items ; } Python\u4ee3\u7801 def knapsack01 ( value , weight , w_size ): kanapsack01 solves a 0-1 knapsack problem, input: values(value) and weights(W) of items to put into knapsack ( size of which is w_size) output: the index of items that maximize the value of items putted in the knapsack the index of items counts from 0, and corresponding value n = len ( value ) # the number of items # maximum value that can be attained with weight = weight using first i items m = np . zeros ( shape = ( n + 1 , w_size + 1 ), dtype = int ) for i in range ( w_size + 1 ): m [ 0 , i ] = 0 if not isinstance ( w_size , int ): raise ValueError ( knapsack_size should be an integer ) for i in range ( 1 , n + 1 ): # items for j in range ( 1 , w_size + 1 ): # sizes if weight [ i - 1 ] j : m [ i , j ] = m [ i - 1 , j ] else : m [ i , j ] = max ( m [ i - 1 , j ], m [ i - 1 , j - weight [ i - 1 ]] + value [ i - 1 ]) max_val = m [ - 1 , - 1 ] items = set () while max_val 0 and i 0 : if max_val - value [ i - 1 ] in m [ i - 1 , :]: max_val = max_val - value [ i - 1 ] items . add ( i - 1 ) i -= 1 else : i -= 1 return items , m [ - 1 , - 1 ]","title":"Bottom-up method"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#top-down-with-memoization_1","text":"def knapsack01_recursive ( hash_table , value , weight , i , j ): # base case: when 1 items here if i == 1 : if weight [ i - 1 ] j : hash_table [( i , j )] = value [ i - 1 ] return value [ i - 1 ] else : hash_table [( i , j )] = 0 return 0 # sub-problem computed if ( i , j ) in hash_table : return hash_table [( i , j )] else : if weight [ i - 1 ] j : # only case 1 hash_table [( i , j )] = knapsack01_recursive ( hash_table , value , weight , i - 1 , j ) else : # case 1, item i-1 excluded case1 = knapsack01_recursive ( hash_table , value , weight , i - 1 , j ) # case 2, item i-1 included case2 = knapsack01_recursive ( hash_table , value , weight , i - 1 , j - weight [ i - 1 ]) + value [ i - 1 ] hash_table [( i , j )] = max ( case1 , case2 ) return hash_table [( i , j )]","title":"top-down with memoization"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#analysis","text":"The running time of this algorithm is \u0398(nW) \u0398(nW) .","title":"Analysis"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#reference","text":"Knapsack Problem WIKIPEDIA Knapsack problem Stack Overflow The knapsack Problem PPT","title":"Reference"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#4-application-optimal-binary-search-tree","text":"An Optimal Binary Search Tree (Optimal BST) is a binary search tree which provides the smallest possible search time for a given sequence of access probabilities. The cost of a BST node is the level of that node plus one multiplied by its frequency. Problem Statement : Given a sorted array keys[0.. n-1] of search keys and an array freq[0.. n-1] of frequency counts, where freq[i] is the number of searches to keys[i] . Construct a binary search tree of all keys such that the total cost of all the searches is as small as possible.","title":"4. Application: Optimal Binary Search Tree"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#optimal-substructure","text":"The optimal cost of node i,...,j i,...,j can be recursively calculated using the following formula. Cost(i,j) = \\sum \\limits^{j}_{k=i}freq[k] + \\min \\limits_{r=i}^j[Cost(i,r-1)+Cost(r+1,j)] Cost(i,j) = \\sum \\limits^{j}_{k=i}freq[k] + \\min \\limits_{r=i}^j[Cost(i,r-1)+Cost(r+1,j)] We try all nodes one by one as root ( r r varies from i i to j j ). When we make r r th node as root, we recursively calculate optimal cost from i i to r-1 r-1 and r+1 r+1 to j j .","title":"Optimal Substructure"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#implementation-top-down-with-memoization","text":"def optimal_bst ( freq ): def opt_cost ( hash_table , freq , i , j ): Optimal Binary Search Tree Recursive Method used here # base case: only 0~1 element if j i : return 0 if j == i : return freq [ i ] # if already exists if ( i , j ) in hash_table : return hash_table [( i , j )] min_cost = sys . maxsize for r in range ( i , j + 1 ): cost = opt_cost ( hash_table , freq , i , r - 1 ) + opt_cost ( hash_table , freq , r + 1 , j ) if cost min_cost : min_cost = cost hash_table [( i , j )] = sum ( freq [ i : j + 1 ]) + min_cost return hash_table [( i , j )] return opt_cost ({}, freq , 0 , len ( freq ) - 1 )","title":"Implementation: top-down with memoization"},{"location":"algorithm/algorithmStanford/dynamicprogramming/#reference_1","text":"Optimal Binary Search Tree Optimal Binary Search Tree GeeksforGeeks","title":"Reference"},{"location":"algorithm/algorithmStanford/graph/","text":"Topic: Graph Definition: A graph can be represented by G G where G=(V,E) G=(V,E) . For the graph G G , V V is a set of vertices and E E is a set of edges. Each edge is a tuple (v,w) (v,w) where w, v \\in V w, v \\in V . Vocabulary and Definitions vertex : also a node , is a fundamental part of a graph. It can have a name key . A vertex may also have additional information called payload . Edge : also an arc , connects two vertices, and may be one-way( directed graph ) or two-way( undirected graph ). Weight: Edges may be weighted to show that there is a cost ( weight )to go from one vertex to another. E.g. the distance between the two cities. path : a sequence of vertices that are connected by edges. Formally we could define a path as w_1, w_2,...,w_n w_1, w_2,...,w_n such that (w_i,w_{i+1}) \\in E (w_i,w_{i+1}) \\in E for all 1 \\le i \\le n-1 1 \\le i \\le n-1 . The weighted path length is the sum of the weights of the edges in the path. cycle : a path in a directed graph, which starts and ends at the same vertex. A graph with no cycles is called an acyclic graph . A directed graph with no cycles is called a directed acyclic graph or a DAG . Representation Adjacency Matrix Each of the rows and columns represent a vertex in the graph. The value that is stored in the cell at the intersection of row v v and column w w indicates if there is an edge from vertex v v to vertex w w . simple, but inefficient if the graph is too large and the matrix is sparse. Space Complexity: O(|V|^2) O(|V|^2) , where |V| |V| is the number of vertices. Adjacency List A more space-efficient way to implement a sparsely connected graph is to use an adjacency list. We keep a master list of all the vertices in the Graph object and then each vertex object in the graph maintains a list of the other vertices that it is connected to. Space Complexity is O(|V| + |E|) O(|V| + |E|) . Edge List A list of edges. Edge lists are simple, but if we want to find whether the graph contains a particular edge, we have to search through the edge list. Space Complexity is O(|E|) O(|E|) , where |E| |E| is the number of edges. Summary API The graph abstract data type (ADT) is defined as follows: Graph() : Creates a new, empty graph. addVertex(vert) : Adds an instance of Vertex to the graph. addEdge(fromVert, toVert) : Adds a new, directed edge to the graph that connects two vertices. addEdge(fromVert, toVert, weight) : Adds a new, weighted, directed edge to the graph that connects two vertices. getVertex(vertKey) : Finds the vertex in the graph named vertKey. getVertices() returns the list of all vertices in the graph. in : Returns True for a statement of the form vertex in graph, if the given vertex is in the graph, False otherwise. Implementation We will create two classes, Graph , which holds the master list of vertices, and Vertex , which will represent each vertex in the graph. Each Vertex uses a dictionary to keep track of the vertices to which it is connected, and the weight of each edge. This dictionary is called connectedTo . The listing below shows the code for the Vertex class. The constructor simply initializes the id , which will typically be a string, and the connectedTo dictionary. The addNeighbor() method is used to add a connection from this vertex to another. The getConnections() method returns all of the vertices in the adjacency list, as represented by the connectedTo() instance variable. The getWeight() method returns the weight of the edge from this vertex to the vertex passed as a parameter. class Vertex : def __init__ ( self , key ): self . id = key self . connectedTo = {} def addNeighbor ( self , nbr , weight = 0 ): self . connectedTo [ nbr ] = weight def __str__ ( self ): return str ( self . id ) + connectedTo: + str ([ x . id for x in self . connectedTo ]) def getConnections ( self ): return self . connectedTo . keys () def getId ( self ): return self . id def getWeight ( self , nbr ): return self . connectedTo [ nbr ] The Graph class, shown in the next listing, contains a dictionary that maps vertex names to vertex objects. Graph also provides methods for adding vertices to a graph and connecting one vertex to another. The getVertices() method returns the names of all of the vertices in the graph. In addition, the __iter__ method makes it easy to iterate over all the vertex objects in a particular graph. Together, the two methods allow to iterate over the vertices in a graph by name, or by the objects themselves. class Graph : def __init__ ( self ): self . vertList = {} self . numVertices = 0 def addVertex ( self , key ): self . numVertices = self . numVertices + 1 newVertex = Vertex ( key ) self . vertList [ key ] = newVertex return newVertex def getVertex ( self , n ): if n in self . vertList : return self . vertList [ n ] else : return None def __contains__ ( self , vertex ): return vertex in self . vertList def addEdge ( self , fromVert , toVert , cost = 0 ): if fromVert not in self . vertList : nv = self . addVertex ( fromVert ) if toVert not in self . vertList : nv = self . addVertex ( toVert ) self . vertList [ toVert ] . addNeighbor ( self . vertList [ toVert ], cost ) def getVertices ( self ): return self . vertList . keys () def __iter__ ( self ): return iter ( self . vertList . values ()) Search \u6df1\u5ea6\u4f18\u5148\u641c\u7d22(Depth First Search, DFS)\u548c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22(Breath First Search, BFS)\u662f\u5e38\u7528\u7684\u56fe\u7684\u641c\u7d22\u7b97\u6cd5\u3002 DFS\u548cBFS\u4e3b\u8981\u5dee\u522b\u662f\u641c\u7d22\u7684\u4f18\u5148\u7ea7\u4e0d\u540c\uff0c\u4e00\u4e2a\u5e7f\u5ea6\u4f18\u5148\uff0c\u4e00\u4e2a\u6df1\u5ea6\u4f18\u5148\u3002 BFS Implementation Breadth-First Search (BFS) explored nodes in \"layers\" can compute shortest paths (FIFO) can compute connected components of an undirected graph O(E+V) O(E+V) time using a queue BFS ( graph G , start vertex s ) -- mark s as explored -- let Q = queue , initialized with s -- while Q is not empty : -- remove the first node of Q , call it v -- for each edge ( v , w ): -- if w unexplored -- mark w as explored -- add w to Q ( at the end ) Connected Components via BFS A connected component of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. [ wiki ] To compute all components for undirected graph: Pseudocode -- initialize all nodes as unexplored [ assume labelled 1 to n ] -- for i = 1 to n -- if i not yet explored // discovers precisely i \u2019 s connected component -- BFS ( G , i ) Python def bfs ( graph , start ): visited , queue = set (), [ start ] while queue : vertex = queue . pop ( 0 ) if vertex not in visited : visited . add ( vertex ) queue . extend ( graph [ vertex ] - visited ) return visited Running time is O(|E| + |V|) O(|E| + |V|) . DFS Implementation Depth-First Search explore aggressively like a maze, backtrack only necessary compute topological ordering of a directed acyclic graph compute connected components in directed graphs O(E+V) O(E+V) time using a stack (LIFO) or via recursion Recursive Version Pseudocode DFS ( graph G , start vertex s ) -- mark s as explored -- for every edge ( s , v ): -- if v unexplored -- DFS ( G , v ) Python def dfs ( graph , start , visited = None ): if visited is None : visited = set () visited . add ( start ) for next in graph [ start ] - visited : dfs ( graph , next , visited ) return visited Iterative Version DFS ( graph G , start vertex s ): -- let S be a stack , and initialized with s -- while S is not empty -- u = S . pop () -- for each edge ( u , v ) -- if v is not yet explored : -- label v as explored -- S . push ( v ) Topological Sort A topological sort of a directed graph is a linear ordering of its vertices such that for every directed edge uv uv from vertex u u to vertex v v , u u comes before v v in the ordering. [ wiki ] Note : G has directed cycle = no topological ordering -- mark all vertexes unexplored -- L \u2190 Empty stack that will contain the sorted nodes -- for each vertex -- if v not yet explored -- DFS ( G , v ) -- DFS ( G , start vertex s ) -- for every edge ( s , v ) -- if v not yet explored -- mark v explored -- DFS ( G , v ) -- add s to L Reference Problems Solving with Algorithms and Data Structures, Chapter 7 Depth-First Search and Breadth-First Search in Python","title":"Topic: Graph"},{"location":"algorithm/algorithmStanford/graph/#topic-graph","text":"Definition: A graph can be represented by G G where G=(V,E) G=(V,E) . For the graph G G , V V is a set of vertices and E E is a set of edges. Each edge is a tuple (v,w) (v,w) where w, v \\in V w, v \\in V .","title":"Topic: Graph"},{"location":"algorithm/algorithmStanford/graph/#vocabulary-and-definitions","text":"vertex : also a node , is a fundamental part of a graph. It can have a name key . A vertex may also have additional information called payload . Edge : also an arc , connects two vertices, and may be one-way( directed graph ) or two-way( undirected graph ). Weight: Edges may be weighted to show that there is a cost ( weight )to go from one vertex to another. E.g. the distance between the two cities. path : a sequence of vertices that are connected by edges. Formally we could define a path as w_1, w_2,...,w_n w_1, w_2,...,w_n such that (w_i,w_{i+1}) \\in E (w_i,w_{i+1}) \\in E for all 1 \\le i \\le n-1 1 \\le i \\le n-1 . The weighted path length is the sum of the weights of the edges in the path. cycle : a path in a directed graph, which starts and ends at the same vertex. A graph with no cycles is called an acyclic graph . A directed graph with no cycles is called a directed acyclic graph or a DAG .","title":"Vocabulary and Definitions"},{"location":"algorithm/algorithmStanford/graph/#representation","text":"","title":"Representation"},{"location":"algorithm/algorithmStanford/graph/#adjacency-matrix","text":"Each of the rows and columns represent a vertex in the graph. The value that is stored in the cell at the intersection of row v v and column w w indicates if there is an edge from vertex v v to vertex w w . simple, but inefficient if the graph is too large and the matrix is sparse. Space Complexity: O(|V|^2) O(|V|^2) , where |V| |V| is the number of vertices.","title":"Adjacency Matrix"},{"location":"algorithm/algorithmStanford/graph/#adjacency-list","text":"A more space-efficient way to implement a sparsely connected graph is to use an adjacency list. We keep a master list of all the vertices in the Graph object and then each vertex object in the graph maintains a list of the other vertices that it is connected to. Space Complexity is O(|V| + |E|) O(|V| + |E|) .","title":"Adjacency List"},{"location":"algorithm/algorithmStanford/graph/#edge-list","text":"A list of edges. Edge lists are simple, but if we want to find whether the graph contains a particular edge, we have to search through the edge list. Space Complexity is O(|E|) O(|E|) , where |E| |E| is the number of edges.","title":"Edge List"},{"location":"algorithm/algorithmStanford/graph/#summary","text":"","title":"Summary"},{"location":"algorithm/algorithmStanford/graph/#api","text":"The graph abstract data type (ADT) is defined as follows: Graph() : Creates a new, empty graph. addVertex(vert) : Adds an instance of Vertex to the graph. addEdge(fromVert, toVert) : Adds a new, directed edge to the graph that connects two vertices. addEdge(fromVert, toVert, weight) : Adds a new, weighted, directed edge to the graph that connects two vertices. getVertex(vertKey) : Finds the vertex in the graph named vertKey. getVertices() returns the list of all vertices in the graph. in : Returns True for a statement of the form vertex in graph, if the given vertex is in the graph, False otherwise.","title":"API"},{"location":"algorithm/algorithmStanford/graph/#implementation","text":"We will create two classes, Graph , which holds the master list of vertices, and Vertex , which will represent each vertex in the graph. Each Vertex uses a dictionary to keep track of the vertices to which it is connected, and the weight of each edge. This dictionary is called connectedTo . The listing below shows the code for the Vertex class. The constructor simply initializes the id , which will typically be a string, and the connectedTo dictionary. The addNeighbor() method is used to add a connection from this vertex to another. The getConnections() method returns all of the vertices in the adjacency list, as represented by the connectedTo() instance variable. The getWeight() method returns the weight of the edge from this vertex to the vertex passed as a parameter. class Vertex : def __init__ ( self , key ): self . id = key self . connectedTo = {} def addNeighbor ( self , nbr , weight = 0 ): self . connectedTo [ nbr ] = weight def __str__ ( self ): return str ( self . id ) + connectedTo: + str ([ x . id for x in self . connectedTo ]) def getConnections ( self ): return self . connectedTo . keys () def getId ( self ): return self . id def getWeight ( self , nbr ): return self . connectedTo [ nbr ] The Graph class, shown in the next listing, contains a dictionary that maps vertex names to vertex objects. Graph also provides methods for adding vertices to a graph and connecting one vertex to another. The getVertices() method returns the names of all of the vertices in the graph. In addition, the __iter__ method makes it easy to iterate over all the vertex objects in a particular graph. Together, the two methods allow to iterate over the vertices in a graph by name, or by the objects themselves. class Graph : def __init__ ( self ): self . vertList = {} self . numVertices = 0 def addVertex ( self , key ): self . numVertices = self . numVertices + 1 newVertex = Vertex ( key ) self . vertList [ key ] = newVertex return newVertex def getVertex ( self , n ): if n in self . vertList : return self . vertList [ n ] else : return None def __contains__ ( self , vertex ): return vertex in self . vertList def addEdge ( self , fromVert , toVert , cost = 0 ): if fromVert not in self . vertList : nv = self . addVertex ( fromVert ) if toVert not in self . vertList : nv = self . addVertex ( toVert ) self . vertList [ toVert ] . addNeighbor ( self . vertList [ toVert ], cost ) def getVertices ( self ): return self . vertList . keys () def __iter__ ( self ): return iter ( self . vertList . values ())","title":"Implementation"},{"location":"algorithm/algorithmStanford/graph/#search","text":"\u6df1\u5ea6\u4f18\u5148\u641c\u7d22(Depth First Search, DFS)\u548c\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22(Breath First Search, BFS)\u662f\u5e38\u7528\u7684\u56fe\u7684\u641c\u7d22\u7b97\u6cd5\u3002 DFS\u548cBFS\u4e3b\u8981\u5dee\u522b\u662f\u641c\u7d22\u7684\u4f18\u5148\u7ea7\u4e0d\u540c\uff0c\u4e00\u4e2a\u5e7f\u5ea6\u4f18\u5148\uff0c\u4e00\u4e2a\u6df1\u5ea6\u4f18\u5148\u3002","title":"Search"},{"location":"algorithm/algorithmStanford/graph/#bfs-implementation","text":"Breadth-First Search (BFS) explored nodes in \"layers\" can compute shortest paths (FIFO) can compute connected components of an undirected graph O(E+V) O(E+V) time using a queue BFS ( graph G , start vertex s ) -- mark s as explored -- let Q = queue , initialized with s -- while Q is not empty : -- remove the first node of Q , call it v -- for each edge ( v , w ): -- if w unexplored -- mark w as explored -- add w to Q ( at the end )","title":"BFS Implementation"},{"location":"algorithm/algorithmStanford/graph/#connected-components-via-bfs","text":"A connected component of an undirected graph is a subgraph in which any two vertices are connected to each other by paths, and which is connected to no additional vertices in the supergraph. [ wiki ] To compute all components for undirected graph: Pseudocode -- initialize all nodes as unexplored [ assume labelled 1 to n ] -- for i = 1 to n -- if i not yet explored // discovers precisely i \u2019 s connected component -- BFS ( G , i ) Python def bfs ( graph , start ): visited , queue = set (), [ start ] while queue : vertex = queue . pop ( 0 ) if vertex not in visited : visited . add ( vertex ) queue . extend ( graph [ vertex ] - visited ) return visited Running time is O(|E| + |V|) O(|E| + |V|) .","title":"Connected Components via BFS"},{"location":"algorithm/algorithmStanford/graph/#dfs-implementation","text":"Depth-First Search explore aggressively like a maze, backtrack only necessary compute topological ordering of a directed acyclic graph compute connected components in directed graphs O(E+V) O(E+V) time using a stack (LIFO) or via recursion Recursive Version Pseudocode DFS ( graph G , start vertex s ) -- mark s as explored -- for every edge ( s , v ): -- if v unexplored -- DFS ( G , v ) Python def dfs ( graph , start , visited = None ): if visited is None : visited = set () visited . add ( start ) for next in graph [ start ] - visited : dfs ( graph , next , visited ) return visited Iterative Version DFS ( graph G , start vertex s ): -- let S be a stack , and initialized with s -- while S is not empty -- u = S . pop () -- for each edge ( u , v ) -- if v is not yet explored : -- label v as explored -- S . push ( v )","title":"DFS Implementation"},{"location":"algorithm/algorithmStanford/graph/#topological-sort","text":"A topological sort of a directed graph is a linear ordering of its vertices such that for every directed edge uv uv from vertex u u to vertex v v , u u comes before v v in the ordering. [ wiki ] Note : G has directed cycle = no topological ordering -- mark all vertexes unexplored -- L \u2190 Empty stack that will contain the sorted nodes -- for each vertex -- if v not yet explored -- DFS ( G , v ) -- DFS ( G , start vertex s ) -- for every edge ( s , v ) -- if v not yet explored -- mark v explored -- DFS ( G , v ) -- add s to L","title":"Topological Sort"},{"location":"algorithm/algorithmStanford/graph/#reference","text":"Problems Solving with Algorithms and Data Structures, Chapter 7 Depth-First Search and Breadth-First Search in Python","title":"Reference"},{"location":"algorithm/algorithmStanford/greedy/","text":"Topic: Greedy Algorithm A greedy algorithm is an algorithmic paradigm that follows the problem solving heuristic of making the locally optimal choice at each stage with the intent of finding a global optimum.","title":"Topic: Greedy Algorithm"},{"location":"algorithm/algorithmStanford/greedy/#topic-greedy-algorithm","text":"A greedy algorithm is an algorithmic paradigm that follows the problem solving heuristic of making the locally optimal choice at each stage with the intent of finding a global optimum.","title":"Topic: Greedy Algorithm"},{"location":"algorithm/algorithmStanford/heap/","text":"Topic: Heap Introduction and Implementation A heap (\u5806)is a specialized tree-based data structure\u3002 A heap can be classified as either a max heap or a min heap . In a max heap (\u6700\u5927\u5806), the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node. In a min heap (\u6700\u5c0f\u5806), the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node. Heap is one maximally efficient implementation of an abstract data type called a priority queue (see here ), and in fact priority queues are often referred to as heaps , regardless of how they may be implemented. Implementation Priority queues typically use a heap as backbone, giving O(\\log n) O(\\log n) performance for pushs and pops, and O(n) O(n) to build initially. Binary Heap A common implementation of a heap is the binary heap (\u4e8c\u53c9\u5806), in which the tree is a complete binary tree (\u5b8c\u5168\u4e8c\u53c9\u6811). \u4e8c\u53c9\u5806\u7684\u64cd\u4f5c\u4e0e\u5b9e\u73b0 BinaryHeap() \uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u7a7a\u7684\u4e8c\u53c9\u5806\u5bf9\u8c61 push(k) \uff1a\u628a\u65b0\u5143\u7d20\u52a0\u5165\u5230\u5806\u4e2d findMin() \uff1a\u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u6700\u5c0f\u9879\u4ecd\u4fdd\u7559\u5728\u5806\u4e2d pop() \uff1a\u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u540c\u65f6\u4ece\u5806\u4e2d\u5220\u9664 isEmpty() \uff1a\u8fd4\u56de\u5806\u662f\u5426\u4e3a\u7a7a size() \uff1a\u8fd4\u56de\u5806\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 heapify(list) \uff1a\u4ece\u4e00\u4e2a\u5305\u542b\u5143\u7d20\u7684\u5217\u8868\u521b\u5efa\u65b0\u5806 \u6709\u4e24\u4e2a\u5173\u952e\u7684\u64cd\u4f5c\uff1a 1. insert \u65b9\u6cd5\u3002\u9996\u5148\uff0c\u4e3a\u4e86\u6ee1\u8db3\u201c\u5b8c\u5168\u4e8c\u53c9\u6811\u201d\u7684\u6027\u8d28\uff0c\u65b0\u952e\u503c\u5e94\u8be5\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002\u7136\u800c\u65b0\u952e\u503c\u7b80\u5355\u5730\u6dfb\u52a0\u5728\u5217\u8868\u672b\u5c3e\uff0c\u663e\u7136\u65e0\u6cd5\u6ee1\u8db3\u5806\u6b21\u5e8f\u3002\u6240\u4ee5\u8981\u901a\u8fc7\u6bd4\u8f83\u7236\u8282\u70b9\u548c\u65b0\u52a0\u5165\u7684\u5143\u7d20\u7684\u65b9\u6cd5\u6765\u91cd\u65b0\u6ee1\u8db3\u5806\u6b21\u5e8f\u3002\u5982\u679c\u65b0\u52a0\u5165\u7684\u5143\u7d20\u6bd4\u7236\u8282\u70b9\u8981\u5c0f\uff0c\u53ef\u4ee5\u4e0e\u7236\u8282\u70b9\u4e92\u6362\u4f4d\u7f6e\uff1b\u4e0d\u65ad\u4ea4\u6362\uff0c\u76f4\u5230\u5230\u8fbe\u6811\u7684\u9876\u7aef\u3002\u4e0b\u56fe\u6240\u793a\u4e00\u7cfb\u5217\u4ea4\u6362\u64cd\u4f5c\u6765\u4f7f\u65b0\u52a0\u5165\u5143\u7d20\u201c\u4e0a\u6d6e\u201d\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 2. pop \u65b9\u6cd5 \u79fb\u8d70\u6839\u8282\u70b9\u7684\u5143\u7d20\u540e\u5982\u4f55\u4fdd\u6301\u5806\u7ed3\u6784\u548c\u5806\u6b21\u5e8f: \u9996\u5148\uff0c\u7528\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6765\u4ee3\u66ff\u6839\u8282\u70b9, \u79fb\u8d70\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4fdd\u6301\u4e86\u5806\u7ed3\u6784\u7684\u6027\u8d28\u3002\u8fd9\u4e48\u7b80\u5355\u7684\u66ff\u6362\uff0c\u8fd8\u662f\u4f1a\u7834\u574f\u5806\u6b21\u5e8f\u3002\u7b2c\u4e8c\u6b65\uff0c\u5c06\u65b0\u8282\u70b9\u201c\u4e0b\u6c89\u201d\u6765\u6062\u590d\u5806\u6b21\u5e8f\u3002\u4e0b\u56fe\u6240\u793a\u7684\u662f\u4e00\u7cfb\u5217\u4ea4\u6362\u64cd\u4f5c\u6765\u4f7f\u65b0\u8282\u70b9\u201c\u4e0b\u6c89\u201d\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u4e3a\u4e86\u4fdd\u6301\u5806\u6b21\u5e8f\uff0c\u6211\u4eec\u9700\u5c06\u65b0\u7684\u6839\u8282\u70b9\u6cbf\u7740\u4e00\u6761\u8def\u5f84\u201c\u4e0b\u6c89\u201d\uff0c\u76f4\u5230\u6bd4\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5c0f\u3002\u5728\u9009\u62e9\u4e0b\u6c89\u8def\u5f84\u65f6\uff0c\u5982\u679c\u65b0\u6839\u8282\u70b9\u6bd4\u5b50\u8282\u70b9\u5927\uff0c\u90a3\u4e48\u9009\u62e9\u8f83\u5c0f\u7684\u5b50\u8282\u70b9\u4e0e\u4e4b\u4ea4\u6362\u3002 class BinHeap ( object ): \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u7a7a\u7684\u4e8c\u53c9\u5806\u5bf9\u8c61 def __init__ ( self ): self . list = [ 0 ] self . size = 0 def perc_up ( self , i ): Percolate the new node into proper position while i : if self . list [ i ] self . list [ i // 2 ]: self . list [ i ], self . list [ i // 2 ] = self . list [ i // 2 ], self . list [ i ] i = i // 2 def push ( self , item ): \u628a\u65b0\u5143\u7d20\u52a0\u5165\u5230\u5806\u4e2d self . list . append ( item ) self . size += 1 self . perc_up ( self . size ) def findMin ( self ): \u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u6700\u5c0f\u9879\u4ecd\u4fdd\u7559\u5728\u5806\u4e2d return self . list [ 1 ] def pop ( self ): \u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u540c\u65f6\u4ece\u5806\u4e2d\u5220\u9664 retval = self . list [ 1 ] self . list [ 1 ] = self . list [ - 1 ] self . size -= 1 self . list . pop () self . perc_down ( 1 ) return retval def percDown ( self , i ): \u5c06\u65b0\u8282\u70b9\u201c\u4e0b\u6c89\u201d\u6765\u6062\u590d\u5806\u6b21\u5e8f while ( i * 2 ) = self . size : mc = self . minChild ( i ) if self . list [ i ] self . list [ mc ]: tmp = self . list [ i ] self . list [ i ] = self . list [ mc ] self . list [ mc ] = tmp i = mc def minChild ( self , i ): \u8fd4\u56de\u8f83\u5c0f\u7684\u5b50\u8282\u70b9 if i * 2 + 1 size : return i * 2 else : if self . list [ i * 2 ] self . list [ i * 2 + 1 ]: return i * 2 else : return i * 2 + 1 def isEmpty ( self ): \u8fd4\u56de\u5806\u662f\u5426\u4e3a\u7a7a return self . size == 0 def __len__ ( self ): \u8fd4\u56de\u5806\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 return self . size def heapify ( self , alist ): \u4ece\u4e00\u4e2a\u5305\u542b\u5143\u7d20\u7684\u5217\u8868\u521b\u5efa\u65b0\u5806 self . size = len ( alist ) self . list . extend ( alist ) i = self . size // 2 while i 0 : self . perc_down ( i ) i -= 1 \u5efa\u5806\u7684\u590d\u6742\u5ea6 \u5efa\u5806\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5806\u7684\u4e00\u4e2a\u96be\u70b9\u3002\u4e00\u822c\u4f1a\u8bef\u8ba4\u4e3a\u5efa\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlog n) O(nlog n) \uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u5806\u8c03\u6574\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n) O(log n) \uff0c\u90a3\u4e48 n n \u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlog n) O(nlog n) \uff0c\u8fd9\u5176\u5b9e\u662f\u9519\u7684\u3002 \u9996\u5148\u5bf9\u4e8e\u4e8c\u53c9\u6811\uff0c\u5b83\u5fc5\u987b\u4fdd\u8bc1\u6bcf\u4e00\u5c42\u586b\u6ee1\u4e4b\u540e\u624d\u80fd\u53bb\u586b\u5145\u4e0b\u4e00\u5c42\u3002\u800c\u4e14\uff0c\u5982\u679c\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u8ba1\u6570(\u6839\u7ed3\u70b9\u4e3a\u7b2c0\u5c42)\uff0c\u5f80\u4e0b\u7b2c i i \u5c42\u7684\u5143\u7d20\u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u5c42\u7684\u8bdd\uff0c\u8fd9\u4e00\u5c42\u7684\u5143\u7d20\u6570\u91cf\u4e3a 2^i 2^i \u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u68f5\u9ad8\u4e3a h h \u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u5143\u7d20\u4e2a\u6570\u4e3a n=1+2+4+...+2^i, i\\in(0,h) n=1+2+4+...+2^i, i\\in(0,h) . \u7136\u540e\u7406\u89e3\u51fd\u6570 heapify \u4e2d\u7684\u5faa\u73af\u8303\u56f4\u662f i=\\text{size}//2\\sim 0 i=\\text{size}//2\\sim 0 \uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u662f\u4e00\u4e2a\u4ece\u4e0b\u5f80\u4e0a\u7684\u5efa\u5806\u3002\u5bf9\u4e8e\u7b2c h-1 h-1 \u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u5b83\u9700\u8981\u548c\u5b83\u76842\u4e2a\u5b50\u8282\u70b9\u6bd4\u8f83\u4e00\u6b21\uff0c\u5171\u8ba1 2^{(h-1)}\\times 2 2^{(h-1)}\\times 2 \u3002\u5bf9\u4e8e\u7b2c h-2 h-2 \u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5b83\u9700\u8981\u548c\u5b83\u76842\u4e2a\u5b50\u8282\u70b9\u6bd4\u8f83\u4e00\u6b21\uff0c\u7136\u540e\u548c\u5b50\u8282\u70b9\u4ea4\u6362\uff0c\u5b50\u8282\u70b9\u518d\u548c\u8be5\u5b50\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6bd4\u8f83\uff0c\u6240\u4ee5\u5171\u8ba1 2^{(h-2)}\\times 4 2^{(h-2)}\\times 4 \u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5bf9\u4e8e\u7b2c i i \u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5171\u9700\u6bd4\u8f83 2^i\\times 2(h-i) 2^i\\times 2(h-i) \u3002 \u603b\u5171\u9700\u8981\u6bd4\u8f83: $$ S= \\sum\\limits^{i=0}_{i=h-1} 2^{i+1}(h-i) =2^h+2^{h-1}\\times 2 + 2^{h-2}\\times 3+... \\quad .......(a)$$ 2*S= \\sum\\limits^{i=0}_{i=h-1} 2^{i+2}(h-i) = 2^{h+1} + 2^h\\times 2 + 2^{h-1}\\times 3 + ... \\quad .......(b) 2*S= \\sum\\limits^{i=0}_{i=h-1} 2^{i+2}(h-i) = 2^{h+1} + 2^h\\times 2 + 2^{h-1}\\times 3 + ... \\quad .......(b) \\text{(b-a)}\\quad S = 2^h+2^{h-1}+2^{h-2}+... = n = O(n) \\text{(b-a)}\\quad S = 2^h+2^{h-1}+2^{h-2}+... = n = O(n) Application: Median Maintenance Problem Statement : The goal of the problem is to implement the Median Maintenance algorithm. The text file contains a list of the integers; you should treat this as a stream of numbers, arriving one by one. Letting x_i x_i denote the i i th number of the file, the k k th median m_k m_k is defined as the median of the numbers x_1,\u2026,x_k x_1,\u2026,x_k . (So, if k k is odd, then m_k m_k is ((k+1)/2) ((k+1)/2) th smallest number among x_1,\u2026,x_k x_1,\u2026,x_k ; if k k is even, then m_k m_k is the (k/2) (k/2) th smallest number among x_1,\u2026,x_k x_1,\u2026,x_k .) Solution We might use a max heap to represent elements that are less than the median, and a min heap to represent elements that are greater than the median. ........maxHeap....max of maxHeap....min of minHeap ......minHeap..... After balancing the heaps, the number of elements in two heaps differs at most by 1. Step 1 : Add next item to one of the heaps if next item maxHeap root : add it to maxHeap else : add it to minHeap Step 2 : Balance the heaps ( after this step heaps will be either balanced or one of them will contain 1 more item ) if number of elements in one of the heaps the other by more than 1 : remove the root element from the one containing more elements and add to the other one Step 3 : Calculate the median : if the heaps contain equal amount of elements : median = root of maxHeap else : median = root of the heap with more elements Implementation MinHeap and MaxHeap defined: Click here to View import doctest import sys class MinHeap ( object ): Min Heap bh = MinHeap() bh.buildHeap([9,5,14,18,-17,27,33,19,11,21]) bh.findMin() -17 bh.delMin() -17 bh.list[1:] [5, 9, 14, 11, 21, 27, 33, 19, 18] bh.insert(-100) bh.delMin() -100 def __init__ ( self ): add self.list 0 with initialization in order to divide self . list = [ - sys . maxsize ] self . size = 0 def insert ( self , k ): Insert element to the MinBinaryHeap self . list . append ( k ) self . size += 1 self . perc_up ( self . size ) def findMin ( self ): Find the min element and return it return self . list [ 1 ] def delMin ( self ): Delete the min element and return it retrival = self . list [ 1 ] self . size -= 1 self . list [ 1 ] = self . list [ - 1 ] self . list . pop () self . perc_down ( 1 ) return retrival def isEmpty ( self ): Return if the MinBinaryHeap is empty return self . size == 0 def __len__ ( self ): Magic Method: return the length of MinBinaryHeap return self . size def buildHeap ( self , alist ): Build a MinBinaryHeap from alist which is a collection of data self . list . extend ( alist ) self . size = len ( alist ) i = self . size // 2 while i 0 : self . perc_down ( i ) i -= 1 def perc_up ( self , i ): perc_up i while i // 2 0 : if self . list [ i ] self . list [ i // 2 ]: self . list [ i ], self . list [ i // 2 ] = self . list [ i // 2 ], self . list [ i ] i = i // 2 def perc_down ( self , i ): perc down i while ( i * 2 ) = self . size : mc = self . minChild ( i ) if self . list [ i ] self . list [ mc ]: self . list [ i ], self . list [ mc ] = self . list [ mc ], self . list [ i ] i = mc def minChild ( self , i ): find the min child if i * 2 + 1 self . size : return i * 2 else : if self . list [ i * 2 ] self . list [ i * 2 + 1 ]: return i * 2 else : return i * 2 + 1 def __iter__ ( self ): return iter ( self . list [ 1 :]) class MaxHeap ( object ): Max Heap bh = MaxHeap() bh.buildHeap([9,5,14,18,-17,27,33,19,11,21]) bh.delMax() 33 bh.insert(100) bh.delMax() 100 len(bh) 9 def __init__ ( self ): self . heap = MinHeap () def insert ( self , k ): self . heap . insert ( - k ) def delMax ( self ): return - self . heap . delMin () def buildHeap ( self , alist ): for i in range ( len ( alist )): alist [ i ] = - alist [ i ] self . heap . buildHeap ( alist ) def findMax ( self ): return - self . heap . findMin () def __len__ ( self ): return self . heap . size def __iter__ ( self ): for i in range ( 1 , self . heap . size + 1 ): yield - self . heap . list [ i ] median maintenance algorithm: def median_maintenance ( textfile ): min_heap = MinHeap () # medium max_heap = MaxHeap () # medium medians = [] count = 0 with open ( textfile ) as infile : for line in infile : item = int ( line ) count += 1 # Step 1: Add next item to one of the hepas # special case: initialize if count == 1 : max_heap . insert ( item ) else : if item max_heap . findMax (): max_heap . insert ( item ) else : min_heap . insert ( item ) # Step2: Balance the heap if abs ( len ( max_heap ) - len ( min_heap )) 1 : if len ( max_heap ) len ( min_heap ): min_heap . insert ( max_heap . delMax ()) else : max_heap . insert ( min_heap . delMin ()) # Step3: calculate median if len ( max_heap ) == len ( min_heap ): median = max_heap . findMax () else : if len ( max_heap ) len ( min_heap ): median = max_heap . findMax () else : median = min_heap . findMin () medians . append ( median ) # test #for element in max_heap: # print(element, end= ) #for element in min_heap: # print(element, end= ) #print( total elem: ,len(max_heap)+len(min_heap)) return medians if __name__ == __main__ : # doctest.testmod(verbose=True) #textfile = SmallTest.txt textfile = Median.txt medians = median_maintenance ( textfile ) answer = sum ( medians ) % 10000 print ( answer ) Resources max heap implementation median maintenance","title":"Topic: Heap"},{"location":"algorithm/algorithmStanford/heap/#topic-heap","text":"","title":"Topic: Heap"},{"location":"algorithm/algorithmStanford/heap/#introduction-and-implementation","text":"A heap (\u5806)is a specialized tree-based data structure\u3002 A heap can be classified as either a max heap or a min heap . In a max heap (\u6700\u5927\u5806), the keys of parent nodes are always greater than or equal to those of the children and the highest key is in the root node. In a min heap (\u6700\u5c0f\u5806), the keys of parent nodes are less than or equal to those of the children and the lowest key is in the root node. Heap is one maximally efficient implementation of an abstract data type called a priority queue (see here ), and in fact priority queues are often referred to as heaps , regardless of how they may be implemented.","title":"Introduction and Implementation"},{"location":"algorithm/algorithmStanford/heap/#implementation","text":"Priority queues typically use a heap as backbone, giving O(\\log n) O(\\log n) performance for pushs and pops, and O(n) O(n) to build initially.","title":"Implementation"},{"location":"algorithm/algorithmStanford/heap/#binary-heap","text":"A common implementation of a heap is the binary heap (\u4e8c\u53c9\u5806), in which the tree is a complete binary tree (\u5b8c\u5168\u4e8c\u53c9\u6811). \u4e8c\u53c9\u5806\u7684\u64cd\u4f5c\u4e0e\u5b9e\u73b0 BinaryHeap() \uff1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u7a7a\u7684\u4e8c\u53c9\u5806\u5bf9\u8c61 push(k) \uff1a\u628a\u65b0\u5143\u7d20\u52a0\u5165\u5230\u5806\u4e2d findMin() \uff1a\u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u6700\u5c0f\u9879\u4ecd\u4fdd\u7559\u5728\u5806\u4e2d pop() \uff1a\u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u540c\u65f6\u4ece\u5806\u4e2d\u5220\u9664 isEmpty() \uff1a\u8fd4\u56de\u5806\u662f\u5426\u4e3a\u7a7a size() \uff1a\u8fd4\u56de\u5806\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 heapify(list) \uff1a\u4ece\u4e00\u4e2a\u5305\u542b\u5143\u7d20\u7684\u5217\u8868\u521b\u5efa\u65b0\u5806 \u6709\u4e24\u4e2a\u5173\u952e\u7684\u64cd\u4f5c\uff1a 1. insert \u65b9\u6cd5\u3002\u9996\u5148\uff0c\u4e3a\u4e86\u6ee1\u8db3\u201c\u5b8c\u5168\u4e8c\u53c9\u6811\u201d\u7684\u6027\u8d28\uff0c\u65b0\u952e\u503c\u5e94\u8be5\u6dfb\u52a0\u5230\u5217\u8868\u7684\u672b\u5c3e\u3002\u7136\u800c\u65b0\u952e\u503c\u7b80\u5355\u5730\u6dfb\u52a0\u5728\u5217\u8868\u672b\u5c3e\uff0c\u663e\u7136\u65e0\u6cd5\u6ee1\u8db3\u5806\u6b21\u5e8f\u3002\u6240\u4ee5\u8981\u901a\u8fc7\u6bd4\u8f83\u7236\u8282\u70b9\u548c\u65b0\u52a0\u5165\u7684\u5143\u7d20\u7684\u65b9\u6cd5\u6765\u91cd\u65b0\u6ee1\u8db3\u5806\u6b21\u5e8f\u3002\u5982\u679c\u65b0\u52a0\u5165\u7684\u5143\u7d20\u6bd4\u7236\u8282\u70b9\u8981\u5c0f\uff0c\u53ef\u4ee5\u4e0e\u7236\u8282\u70b9\u4e92\u6362\u4f4d\u7f6e\uff1b\u4e0d\u65ad\u4ea4\u6362\uff0c\u76f4\u5230\u5230\u8fbe\u6811\u7684\u9876\u7aef\u3002\u4e0b\u56fe\u6240\u793a\u4e00\u7cfb\u5217\u4ea4\u6362\u64cd\u4f5c\u6765\u4f7f\u65b0\u52a0\u5165\u5143\u7d20\u201c\u4e0a\u6d6e\u201d\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 2. pop \u65b9\u6cd5 \u79fb\u8d70\u6839\u8282\u70b9\u7684\u5143\u7d20\u540e\u5982\u4f55\u4fdd\u6301\u5806\u7ed3\u6784\u548c\u5806\u6b21\u5e8f: \u9996\u5148\uff0c\u7528\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u6765\u4ee3\u66ff\u6839\u8282\u70b9, \u79fb\u8d70\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4fdd\u6301\u4e86\u5806\u7ed3\u6784\u7684\u6027\u8d28\u3002\u8fd9\u4e48\u7b80\u5355\u7684\u66ff\u6362\uff0c\u8fd8\u662f\u4f1a\u7834\u574f\u5806\u6b21\u5e8f\u3002\u7b2c\u4e8c\u6b65\uff0c\u5c06\u65b0\u8282\u70b9\u201c\u4e0b\u6c89\u201d\u6765\u6062\u590d\u5806\u6b21\u5e8f\u3002\u4e0b\u56fe\u6240\u793a\u7684\u662f\u4e00\u7cfb\u5217\u4ea4\u6362\u64cd\u4f5c\u6765\u4f7f\u65b0\u8282\u70b9\u201c\u4e0b\u6c89\u201d\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u4e3a\u4e86\u4fdd\u6301\u5806\u6b21\u5e8f\uff0c\u6211\u4eec\u9700\u5c06\u65b0\u7684\u6839\u8282\u70b9\u6cbf\u7740\u4e00\u6761\u8def\u5f84\u201c\u4e0b\u6c89\u201d\uff0c\u76f4\u5230\u6bd4\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5c0f\u3002\u5728\u9009\u62e9\u4e0b\u6c89\u8def\u5f84\u65f6\uff0c\u5982\u679c\u65b0\u6839\u8282\u70b9\u6bd4\u5b50\u8282\u70b9\u5927\uff0c\u90a3\u4e48\u9009\u62e9\u8f83\u5c0f\u7684\u5b50\u8282\u70b9\u4e0e\u4e4b\u4ea4\u6362\u3002 class BinHeap ( object ): \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u3001\u7a7a\u7684\u4e8c\u53c9\u5806\u5bf9\u8c61 def __init__ ( self ): self . list = [ 0 ] self . size = 0 def perc_up ( self , i ): Percolate the new node into proper position while i : if self . list [ i ] self . list [ i // 2 ]: self . list [ i ], self . list [ i // 2 ] = self . list [ i // 2 ], self . list [ i ] i = i // 2 def push ( self , item ): \u628a\u65b0\u5143\u7d20\u52a0\u5165\u5230\u5806\u4e2d self . list . append ( item ) self . size += 1 self . perc_up ( self . size ) def findMin ( self ): \u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u6700\u5c0f\u9879\u4ecd\u4fdd\u7559\u5728\u5806\u4e2d return self . list [ 1 ] def pop ( self ): \u8fd4\u56de\u5806\u4e2d\u7684\u6700\u5c0f\u9879\uff0c\u540c\u65f6\u4ece\u5806\u4e2d\u5220\u9664 retval = self . list [ 1 ] self . list [ 1 ] = self . list [ - 1 ] self . size -= 1 self . list . pop () self . perc_down ( 1 ) return retval def percDown ( self , i ): \u5c06\u65b0\u8282\u70b9\u201c\u4e0b\u6c89\u201d\u6765\u6062\u590d\u5806\u6b21\u5e8f while ( i * 2 ) = self . size : mc = self . minChild ( i ) if self . list [ i ] self . list [ mc ]: tmp = self . list [ i ] self . list [ i ] = self . list [ mc ] self . list [ mc ] = tmp i = mc def minChild ( self , i ): \u8fd4\u56de\u8f83\u5c0f\u7684\u5b50\u8282\u70b9 if i * 2 + 1 size : return i * 2 else : if self . list [ i * 2 ] self . list [ i * 2 + 1 ]: return i * 2 else : return i * 2 + 1 def isEmpty ( self ): \u8fd4\u56de\u5806\u662f\u5426\u4e3a\u7a7a return self . size == 0 def __len__ ( self ): \u8fd4\u56de\u5806\u4e2d\u5143\u7d20\u7684\u4e2a\u6570 return self . size def heapify ( self , alist ): \u4ece\u4e00\u4e2a\u5305\u542b\u5143\u7d20\u7684\u5217\u8868\u521b\u5efa\u65b0\u5806 self . size = len ( alist ) self . list . extend ( alist ) i = self . size // 2 while i 0 : self . perc_down ( i ) i -= 1","title":"Binary Heap"},{"location":"algorithm/algorithmStanford/heap/#_1","text":"\u5efa\u5806\u8fc7\u7a0b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u5806\u7684\u4e00\u4e2a\u96be\u70b9\u3002\u4e00\u822c\u4f1a\u8bef\u8ba4\u4e3a\u5efa\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlog n) O(nlog n) \uff0c\u56e0\u4e3a\u6bcf\u4e00\u6b21\u5806\u8c03\u6574\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n) O(log n) \uff0c\u90a3\u4e48 n n \u4e2a\u8282\u70b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(nlog n) O(nlog n) \uff0c\u8fd9\u5176\u5b9e\u662f\u9519\u7684\u3002 \u9996\u5148\u5bf9\u4e8e\u4e8c\u53c9\u6811\uff0c\u5b83\u5fc5\u987b\u4fdd\u8bc1\u6bcf\u4e00\u5c42\u586b\u6ee1\u4e4b\u540e\u624d\u80fd\u53bb\u586b\u5145\u4e0b\u4e00\u5c42\u3002\u800c\u4e14\uff0c\u5982\u679c\u4ece\u6839\u7ed3\u70b9\u5f00\u59cb\u8ba1\u6570(\u6839\u7ed3\u70b9\u4e3a\u7b2c0\u5c42)\uff0c\u5f80\u4e0b\u7b2c i i \u5c42\u7684\u5143\u7d20\u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u5c42\u7684\u8bdd\uff0c\u8fd9\u4e00\u5c42\u7684\u5143\u7d20\u6570\u91cf\u4e3a 2^i 2^i \u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e\u4e00\u68f5\u9ad8\u4e3a h h \u7684\u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u5143\u7d20\u4e2a\u6570\u4e3a n=1+2+4+...+2^i, i\\in(0,h) n=1+2+4+...+2^i, i\\in(0,h) . \u7136\u540e\u7406\u89e3\u51fd\u6570 heapify \u4e2d\u7684\u5faa\u73af\u8303\u56f4\u662f i=\\text{size}//2\\sim 0 i=\\text{size}//2\\sim 0 \uff0c\u4e5f\u5c31\u662f\u8bf4\u8fd9\u662f\u4e00\u4e2a\u4ece\u4e0b\u5f80\u4e0a\u7684\u5efa\u5806\u3002\u5bf9\u4e8e\u7b2c h-1 h-1 \u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u5b83\u9700\u8981\u548c\u5b83\u76842\u4e2a\u5b50\u8282\u70b9\u6bd4\u8f83\u4e00\u6b21\uff0c\u5171\u8ba1 2^{(h-1)}\\times 2 2^{(h-1)}\\times 2 \u3002\u5bf9\u4e8e\u7b2c h-2 h-2 \u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5b83\u9700\u8981\u548c\u5b83\u76842\u4e2a\u5b50\u8282\u70b9\u6bd4\u8f83\u4e00\u6b21\uff0c\u7136\u540e\u548c\u5b50\u8282\u70b9\u4ea4\u6362\uff0c\u5b50\u8282\u70b9\u518d\u548c\u8be5\u5b50\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6bd4\u8f83\uff0c\u6240\u4ee5\u5171\u8ba1 2^{(h-2)}\\times 4 2^{(h-2)}\\times 4 \u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5bf9\u4e8e\u7b2c i i \u5c42\u7684\u6bcf\u4e2a\u8282\u70b9\u6765\u8bf4\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\uff0c\u5171\u9700\u6bd4\u8f83 2^i\\times 2(h-i) 2^i\\times 2(h-i) \u3002 \u603b\u5171\u9700\u8981\u6bd4\u8f83: $$ S= \\sum\\limits^{i=0}_{i=h-1} 2^{i+1}(h-i) =2^h+2^{h-1}\\times 2 + 2^{h-2}\\times 3+... \\quad .......(a)$$ 2*S= \\sum\\limits^{i=0}_{i=h-1} 2^{i+2}(h-i) = 2^{h+1} + 2^h\\times 2 + 2^{h-1}\\times 3 + ... \\quad .......(b) 2*S= \\sum\\limits^{i=0}_{i=h-1} 2^{i+2}(h-i) = 2^{h+1} + 2^h\\times 2 + 2^{h-1}\\times 3 + ... \\quad .......(b) \\text{(b-a)}\\quad S = 2^h+2^{h-1}+2^{h-2}+... = n = O(n) \\text{(b-a)}\\quad S = 2^h+2^{h-1}+2^{h-2}+... = n = O(n)","title":"\u5efa\u5806\u7684\u590d\u6742\u5ea6"},{"location":"algorithm/algorithmStanford/heap/#application-median-maintenance","text":"Problem Statement : The goal of the problem is to implement the Median Maintenance algorithm. The text file contains a list of the integers; you should treat this as a stream of numbers, arriving one by one. Letting x_i x_i denote the i i th number of the file, the k k th median m_k m_k is defined as the median of the numbers x_1,\u2026,x_k x_1,\u2026,x_k . (So, if k k is odd, then m_k m_k is ((k+1)/2) ((k+1)/2) th smallest number among x_1,\u2026,x_k x_1,\u2026,x_k ; if k k is even, then m_k m_k is the (k/2) (k/2) th smallest number among x_1,\u2026,x_k x_1,\u2026,x_k .)","title":"Application: Median Maintenance"},{"location":"algorithm/algorithmStanford/heap/#solution","text":"We might use a max heap to represent elements that are less than the median, and a min heap to represent elements that are greater than the median. ........maxHeap....max of maxHeap....min of minHeap ......minHeap..... After balancing the heaps, the number of elements in two heaps differs at most by 1. Step 1 : Add next item to one of the heaps if next item maxHeap root : add it to maxHeap else : add it to minHeap Step 2 : Balance the heaps ( after this step heaps will be either balanced or one of them will contain 1 more item ) if number of elements in one of the heaps the other by more than 1 : remove the root element from the one containing more elements and add to the other one Step 3 : Calculate the median : if the heaps contain equal amount of elements : median = root of maxHeap else : median = root of the heap with more elements","title":"Solution"},{"location":"algorithm/algorithmStanford/heap/#implementation_1","text":"MinHeap and MaxHeap defined: Click here to View import doctest import sys class MinHeap ( object ): Min Heap bh = MinHeap() bh.buildHeap([9,5,14,18,-17,27,33,19,11,21]) bh.findMin() -17 bh.delMin() -17 bh.list[1:] [5, 9, 14, 11, 21, 27, 33, 19, 18] bh.insert(-100) bh.delMin() -100 def __init__ ( self ): add self.list 0 with initialization in order to divide self . list = [ - sys . maxsize ] self . size = 0 def insert ( self , k ): Insert element to the MinBinaryHeap self . list . append ( k ) self . size += 1 self . perc_up ( self . size ) def findMin ( self ): Find the min element and return it return self . list [ 1 ] def delMin ( self ): Delete the min element and return it retrival = self . list [ 1 ] self . size -= 1 self . list [ 1 ] = self . list [ - 1 ] self . list . pop () self . perc_down ( 1 ) return retrival def isEmpty ( self ): Return if the MinBinaryHeap is empty return self . size == 0 def __len__ ( self ): Magic Method: return the length of MinBinaryHeap return self . size def buildHeap ( self , alist ): Build a MinBinaryHeap from alist which is a collection of data self . list . extend ( alist ) self . size = len ( alist ) i = self . size // 2 while i 0 : self . perc_down ( i ) i -= 1 def perc_up ( self , i ): perc_up i while i // 2 0 : if self . list [ i ] self . list [ i // 2 ]: self . list [ i ], self . list [ i // 2 ] = self . list [ i // 2 ], self . list [ i ] i = i // 2 def perc_down ( self , i ): perc down i while ( i * 2 ) = self . size : mc = self . minChild ( i ) if self . list [ i ] self . list [ mc ]: self . list [ i ], self . list [ mc ] = self . list [ mc ], self . list [ i ] i = mc def minChild ( self , i ): find the min child if i * 2 + 1 self . size : return i * 2 else : if self . list [ i * 2 ] self . list [ i * 2 + 1 ]: return i * 2 else : return i * 2 + 1 def __iter__ ( self ): return iter ( self . list [ 1 :]) class MaxHeap ( object ): Max Heap bh = MaxHeap() bh.buildHeap([9,5,14,18,-17,27,33,19,11,21]) bh.delMax() 33 bh.insert(100) bh.delMax() 100 len(bh) 9 def __init__ ( self ): self . heap = MinHeap () def insert ( self , k ): self . heap . insert ( - k ) def delMax ( self ): return - self . heap . delMin () def buildHeap ( self , alist ): for i in range ( len ( alist )): alist [ i ] = - alist [ i ] self . heap . buildHeap ( alist ) def findMax ( self ): return - self . heap . findMin () def __len__ ( self ): return self . heap . size def __iter__ ( self ): for i in range ( 1 , self . heap . size + 1 ): yield - self . heap . list [ i ] median maintenance algorithm: def median_maintenance ( textfile ): min_heap = MinHeap () # medium max_heap = MaxHeap () # medium medians = [] count = 0 with open ( textfile ) as infile : for line in infile : item = int ( line ) count += 1 # Step 1: Add next item to one of the hepas # special case: initialize if count == 1 : max_heap . insert ( item ) else : if item max_heap . findMax (): max_heap . insert ( item ) else : min_heap . insert ( item ) # Step2: Balance the heap if abs ( len ( max_heap ) - len ( min_heap )) 1 : if len ( max_heap ) len ( min_heap ): min_heap . insert ( max_heap . delMax ()) else : max_heap . insert ( min_heap . delMin ()) # Step3: calculate median if len ( max_heap ) == len ( min_heap ): median = max_heap . findMax () else : if len ( max_heap ) len ( min_heap ): median = max_heap . findMax () else : median = min_heap . findMin () medians . append ( median ) # test #for element in max_heap: # print(element, end= ) #for element in min_heap: # print(element, end= ) #print( total elem: ,len(max_heap)+len(min_heap)) return medians if __name__ == __main__ : # doctest.testmod(verbose=True) #textfile = SmallTest.txt textfile = Median.txt medians = median_maintenance ( textfile ) answer = sum ( medians ) % 10000 print ( answer )","title":"Implementation"},{"location":"algorithm/algorithmStanford/heap/#resources","text":"max heap implementation median maintenance","title":"Resources"},{"location":"algorithm/cs61b/","text":"CS61B Lab1: javac, java, git Lab2: Unit Testing with JUnit and IntLists Lab3: Unit Testing with JUnit, Debugging","title":"Home"},{"location":"algorithm/cs61b/#cs61b","text":"Lab1: javac, java, git Lab2: Unit Testing with JUnit and IntLists Lab3: Unit Testing with JUnit, Debugging","title":"CS61B"},{"location":"algorithm/cs61b/Lab1/","text":"Lab 1: javac, java, git Add the skeleton remote repository, and pull from the skeleton remote in order to get the starter code for lab 1. $ git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp18.git $ git pull skeleton master Leap Year In the lab1 folder, you should see a file called LeapYear.java . This program is supposed to test whether or not a given year is a Leap Year. The user will give a year as a command line parameter (examples given below), and then print out whether or not that year is a leap year, e.g. $ java LeapYear 2000 2000 is a leap year. $ java LeapYear 1999 1999 is not a leap year. $ java LeapYear 2004 2004 is a leap year. $ java LeapYear 2100 2100 is not a leap year. A leap year is either: divisible by 400 or divisible by 4 and not by 100. Requirement: Make sure to provide a description of the method as a comment. Your description should be contained by /* and / (JavaDocs). Use the @source tag any time you receive significant help on a project. Some Java tips: The % operator implements remainder. The != operator compares two values for inequality. When one of the arguments of the + operator is a String, the arguments are concatenated as Strings. /** Class that determines whether or not a year is a leap year. * @author zhenhua wang */ public class LeapYear { /** Calls isLeapYear to print correct statement. * @param year to be analyzed */ private static void checkLeapYear ( int year ) { if ( isLeapYear ( year )) { System . out . printf ( %d is a leap year.\\n , year ); } else { System . out . printf ( %d is not a leap year.\\n , year ); } } /** Check if the year is a leap year * @param year int year */ private static boolean isLeapYear ( int year ) { if ( year % 400 == 0 ) return true ; else if (( year % 4 == 0 ) ( year % 100 != 0 )) return true ; return false ; } /** Must be provided an integer as a command line argument ARGS. * @param args int year */ public static void main ( String [] args ) { if ( args . length 1 ) { System . out . println ( Please enter command line arguments. ); System . out . println ( e.g. java Year 2000 ); } for ( int i = 0 ; i args . length ; i ++) { try { int year = Integer . parseInt ( args [ i ]); checkLeapYear ( year ); } catch ( NumberFormatException e ) { System . out . printf ( %s is not a valid number.\\n , args [ i ]); } } } }","title":"Lab1: javac, java, git"},{"location":"algorithm/cs61b/Lab1/#lab-1-javac-java-git","text":"Add the skeleton remote repository, and pull from the skeleton remote in order to get the starter code for lab 1. $ git remote add skeleton https://github.com/Berkeley-CS61B/skeleton-sp18.git $ git pull skeleton master","title":"Lab 1: javac, java, git"},{"location":"algorithm/cs61b/Lab1/#leap-year","text":"In the lab1 folder, you should see a file called LeapYear.java . This program is supposed to test whether or not a given year is a Leap Year. The user will give a year as a command line parameter (examples given below), and then print out whether or not that year is a leap year, e.g. $ java LeapYear 2000 2000 is a leap year. $ java LeapYear 1999 1999 is not a leap year. $ java LeapYear 2004 2004 is a leap year. $ java LeapYear 2100 2100 is not a leap year. A leap year is either: divisible by 400 or divisible by 4 and not by 100. Requirement: Make sure to provide a description of the method as a comment. Your description should be contained by /* and / (JavaDocs). Use the @source tag any time you receive significant help on a project. Some Java tips: The % operator implements remainder. The != operator compares two values for inequality. When one of the arguments of the + operator is a String, the arguments are concatenated as Strings. /** Class that determines whether or not a year is a leap year. * @author zhenhua wang */ public class LeapYear { /** Calls isLeapYear to print correct statement. * @param year to be analyzed */ private static void checkLeapYear ( int year ) { if ( isLeapYear ( year )) { System . out . printf ( %d is a leap year.\\n , year ); } else { System . out . printf ( %d is not a leap year.\\n , year ); } } /** Check if the year is a leap year * @param year int year */ private static boolean isLeapYear ( int year ) { if ( year % 400 == 0 ) return true ; else if (( year % 4 == 0 ) ( year % 100 != 0 )) return true ; return false ; } /** Must be provided an integer as a command line argument ARGS. * @param args int year */ public static void main ( String [] args ) { if ( args . length 1 ) { System . out . println ( Please enter command line arguments. ); System . out . println ( e.g. java Year 2000 ); } for ( int i = 0 ; i args . length ; i ++) { try { int year = Integer . parseInt ( args [ i ]); checkLeapYear ( year ); } catch ( NumberFormatException e ) { System . out . printf ( %s is not a valid number.\\n , args [ i ]); } } } }","title":"Leap Year"},{"location":"algorithm/cs61b/Lab2/","text":"Lab 2: Unit Testing with JUnit and IntLists 1 Lab 2 setup: Setting Up IntelliJ Installing the IntelliJ CS 61B Plugin after installation of IntelliJ. Getting Java Libraries git submodule update -- init 2 Lab 2: Unit Testing with JUnit and IntLists Introduction In this lab, you will learn about basic IntelliJ features, Destructive vs NonDestructive methods, and IntLists. Breakpoints and Step Into While print statements can be very useful for debugging, they have a few disadvantages: They require you to modify your code (to add print statements). They require you to explicitly state what you want to know (since you have to say precisely what you want to print). And they provide their results in a format that can be hard to read, since it s just a big blob of text in the execution window. The IntelliJ debugger allows you to pause the code in the middle of execution, step the code line by line, and even visualize the organization of complex data structures like linked lists. The step over button allows us to complete a function call without showing the function executing Conditional Breakpoints and Resume An even faster approach is to make our breakpoint conditional. To do this, right (or two-finer) click on the red breakpoint dot. Here, you can set a condition for when you want to stop. Destructive vs. Non-Destructive By destructive, we mean that the original list changes. The term mutative is also sometimes used. By contrast a non-destructive method does not affect the original list. Implementing Destructive vs. Non-destructive Methods package com.berkeycs61b.lab2.Intlist ; import java.util.Formatter ; /** * A naked recursive list of integers, similar to what we saw in lecture 3, but * with a large number of additional methods. * * @author P. N. Hilfinger, with some modifications by Josh Hug and melaniecebula * [Do not modify this file.] */ public class IntList { /** * First element of list. */ public int first ; /** * Remaining elements of list. */ public IntList rest ; /** * A List with first FIRST0 and rest REST0. */ public IntList ( int first0 , IntList rest0 ) { first = first0 ; rest = rest0 ; } /** * A List with null rest, and first = 0. */ public IntList () { /* NOTE: public IntList () { } would also work. */ this ( 0 , null ); } /** * Returns a list equal to L with all elements squared. Destructive. */ public static void dSquareList ( IntList L ) { while ( L != null ) { L . first = L . first * L . first ; L = L . rest ; } } /** * Returns a list equal to L with all elements squared. Non-destructive. */ public static IntList squareListIterative ( IntList L ) { if ( L == null ) { return null ; } IntList res = new IntList ( L . first * L . first , null ); IntList ptr = res ; L = L . rest ; while ( L != null ) { ptr . rest = new IntList ( L . first * L . first , null ); L = L . rest ; ptr = ptr . rest ; } return res ; } /** * Returns a list equal to L with all elements squared. Non-destructive. */ public static IntList squareListRecursive ( IntList L ) { if ( L == null ) { return null ; } return new IntList ( L . first * L . first , squareListRecursive ( L . rest )); } /** DO NOT MODIFY ANYTHING ABOVE THIS LINE! */ /** * Returns a list consisting of the elements of A followed by the * * elements of B. May modify items of A. Don t use new . */ public static IntList dcatenate ( IntList A , IntList B ) { //TODO: fill in method IntList A_location = A ; while ( A_location . rest != null ) { A_location = A_location . rest ; } A_location . rest = B ; return A ; } /** * Returns a list consisting of the elements of A followed by the * * elements of B. May NOT modify items of A. Use new . */ public static IntList catenate ( IntList A , IntList B ) { //TODO: fill in method IntList res = new IntList ( A . first , null ); IntList res_location = res ; IntList A_location = A . rest ; while ( A_location . rest != null ) { res_location . rest = new IntList ( A_location . first , null ); A_location = A_location . rest ; res_location = res_location . rest ; } res_location . rest = new IntList ( A_location . first , null ); res_location = res_location . rest ; IntList B_location = B ; while ( B_location . rest != null ) { res_location . rest = new IntList ( B_location . first , null ); B_location = B_location . rest ; res_location = res_location . rest ; } res_location . rest = new IntList ( B_location . first , null ); return res ; } /** * DO NOT MODIFY ANYTHING BELOW THIS LINE! Many of the concepts below here * will be introduced later in the course or feature some form of advanced * trickery which we implemented to help make your life a little easier for * the lab. */ @Override public int hashCode () { return first ; } /** * Returns a new IntList containing the ints in ARGS. You are not * expected to read or understand this method. */ public static IntList of ( Integer ... args ) { IntList result , p ; if ( args . length 0 ) { result = new IntList ( args [ 0 ], null ); } else { return null ; } int k ; for ( k = 1 , p = result ; k args . length ; k += 1 , p = p . rest ) { p . rest = new IntList ( args [ k ], null ); } return result ; } /** * Returns true iff X is an IntList containing the same sequence of ints * as THIS. Cannot handle IntLists with cycles. You are not expected to * read or understand this method. */ public boolean equals ( Object x ) { if (!( x instanceof IntList )) { return false ; } IntList L = ( IntList ) x ; IntList p ; for ( p = this ; p != null L != null ; p = p . rest , L = L . rest ) { if ( p . first != L . first ) { return false ; } } if ( p != null || L != null ) { return false ; } return true ; } /** * If a cycle exists in the IntList, this method * returns an integer equal to the item number of the location where the * cycle is detected. * p * If there is no cycle, the number 0 is returned instead. This is a * utility method for lab2. You are not expected to read, understand, or * even use this method. The point of this method is so that if you convert * an IntList into a String and that IntList has a loop, your computer * doesn t get stuck in an infinite loop. */ private int detectCycles ( IntList A ) { IntList tortoise = A ; IntList hare = A ; if ( A == null ) { return 0 ; } int cnt = 0 ; while ( true ) { cnt ++; if ( hare . rest != null ) { hare = hare . rest . rest ; } else { return 0 ; } tortoise = tortoise . rest ; if ( tortoise == null || hare == null ) { return 0 ; } if ( hare == tortoise ) { return cnt ; } } } @Override /** Outputs the IntList as a String. You are not expected to read * or understand this method. */ public String toString () { Formatter out = new Formatter (); String sep ; sep = ( ; int cycleLocation = detectCycles ( this ); int cnt = 0 ; for ( IntList p = this ; p != null ; p = p . rest ) { out . format ( %s%d , sep , p . first ); sep = , ; cnt ++; if (( cnt cycleLocation ) ( cycleLocation 0 )) { out . format ( ... (cycle exists) ... ); break ; } } out . format ( ) ); return out . toString (); } }","title":"Lab2: Unit Testing with JUnit and IntLists"},{"location":"algorithm/cs61b/Lab2/#lab-2-unit-testing-with-junit-and-intlists","text":"","title":"Lab 2: Unit Testing with JUnit and IntLists"},{"location":"algorithm/cs61b/Lab2/#1-lab-2-setup-setting-up-intellij","text":"Installing the IntelliJ CS 61B Plugin after installation of IntelliJ. Getting Java Libraries git submodule update -- init","title":"1 Lab 2 setup: Setting Up IntelliJ"},{"location":"algorithm/cs61b/Lab2/#2-lab-2-unit-testing-with-junit-and-intlists","text":"","title":"2 Lab 2: Unit Testing with JUnit and IntLists"},{"location":"algorithm/cs61b/Lab2/#introduction","text":"In this lab, you will learn about basic IntelliJ features, Destructive vs NonDestructive methods, and IntLists.","title":"Introduction"},{"location":"algorithm/cs61b/Lab2/#breakpoints-and-step-into","text":"While print statements can be very useful for debugging, they have a few disadvantages: They require you to modify your code (to add print statements). They require you to explicitly state what you want to know (since you have to say precisely what you want to print). And they provide their results in a format that can be hard to read, since it s just a big blob of text in the execution window. The IntelliJ debugger allows you to pause the code in the middle of execution, step the code line by line, and even visualize the organization of complex data structures like linked lists. The step over button allows us to complete a function call without showing the function executing","title":"Breakpoints and Step Into"},{"location":"algorithm/cs61b/Lab2/#conditional-breakpoints-and-resume","text":"An even faster approach is to make our breakpoint conditional. To do this, right (or two-finer) click on the red breakpoint dot. Here, you can set a condition for when you want to stop.","title":"Conditional Breakpoints and Resume"},{"location":"algorithm/cs61b/Lab2/#destructive-vs-non-destructive","text":"By destructive, we mean that the original list changes. The term mutative is also sometimes used. By contrast a non-destructive method does not affect the original list.","title":"Destructive vs. Non-Destructive"},{"location":"algorithm/cs61b/Lab2/#implementing-destructive-vs-non-destructive-methods","text":"package com.berkeycs61b.lab2.Intlist ; import java.util.Formatter ; /** * A naked recursive list of integers, similar to what we saw in lecture 3, but * with a large number of additional methods. * * @author P. N. Hilfinger, with some modifications by Josh Hug and melaniecebula * [Do not modify this file.] */ public class IntList { /** * First element of list. */ public int first ; /** * Remaining elements of list. */ public IntList rest ; /** * A List with first FIRST0 and rest REST0. */ public IntList ( int first0 , IntList rest0 ) { first = first0 ; rest = rest0 ; } /** * A List with null rest, and first = 0. */ public IntList () { /* NOTE: public IntList () { } would also work. */ this ( 0 , null ); } /** * Returns a list equal to L with all elements squared. Destructive. */ public static void dSquareList ( IntList L ) { while ( L != null ) { L . first = L . first * L . first ; L = L . rest ; } } /** * Returns a list equal to L with all elements squared. Non-destructive. */ public static IntList squareListIterative ( IntList L ) { if ( L == null ) { return null ; } IntList res = new IntList ( L . first * L . first , null ); IntList ptr = res ; L = L . rest ; while ( L != null ) { ptr . rest = new IntList ( L . first * L . first , null ); L = L . rest ; ptr = ptr . rest ; } return res ; } /** * Returns a list equal to L with all elements squared. Non-destructive. */ public static IntList squareListRecursive ( IntList L ) { if ( L == null ) { return null ; } return new IntList ( L . first * L . first , squareListRecursive ( L . rest )); } /** DO NOT MODIFY ANYTHING ABOVE THIS LINE! */ /** * Returns a list consisting of the elements of A followed by the * * elements of B. May modify items of A. Don t use new . */ public static IntList dcatenate ( IntList A , IntList B ) { //TODO: fill in method IntList A_location = A ; while ( A_location . rest != null ) { A_location = A_location . rest ; } A_location . rest = B ; return A ; } /** * Returns a list consisting of the elements of A followed by the * * elements of B. May NOT modify items of A. Use new . */ public static IntList catenate ( IntList A , IntList B ) { //TODO: fill in method IntList res = new IntList ( A . first , null ); IntList res_location = res ; IntList A_location = A . rest ; while ( A_location . rest != null ) { res_location . rest = new IntList ( A_location . first , null ); A_location = A_location . rest ; res_location = res_location . rest ; } res_location . rest = new IntList ( A_location . first , null ); res_location = res_location . rest ; IntList B_location = B ; while ( B_location . rest != null ) { res_location . rest = new IntList ( B_location . first , null ); B_location = B_location . rest ; res_location = res_location . rest ; } res_location . rest = new IntList ( B_location . first , null ); return res ; } /** * DO NOT MODIFY ANYTHING BELOW THIS LINE! Many of the concepts below here * will be introduced later in the course or feature some form of advanced * trickery which we implemented to help make your life a little easier for * the lab. */ @Override public int hashCode () { return first ; } /** * Returns a new IntList containing the ints in ARGS. You are not * expected to read or understand this method. */ public static IntList of ( Integer ... args ) { IntList result , p ; if ( args . length 0 ) { result = new IntList ( args [ 0 ], null ); } else { return null ; } int k ; for ( k = 1 , p = result ; k args . length ; k += 1 , p = p . rest ) { p . rest = new IntList ( args [ k ], null ); } return result ; } /** * Returns true iff X is an IntList containing the same sequence of ints * as THIS. Cannot handle IntLists with cycles. You are not expected to * read or understand this method. */ public boolean equals ( Object x ) { if (!( x instanceof IntList )) { return false ; } IntList L = ( IntList ) x ; IntList p ; for ( p = this ; p != null L != null ; p = p . rest , L = L . rest ) { if ( p . first != L . first ) { return false ; } } if ( p != null || L != null ) { return false ; } return true ; } /** * If a cycle exists in the IntList, this method * returns an integer equal to the item number of the location where the * cycle is detected. * p * If there is no cycle, the number 0 is returned instead. This is a * utility method for lab2. You are not expected to read, understand, or * even use this method. The point of this method is so that if you convert * an IntList into a String and that IntList has a loop, your computer * doesn t get stuck in an infinite loop. */ private int detectCycles ( IntList A ) { IntList tortoise = A ; IntList hare = A ; if ( A == null ) { return 0 ; } int cnt = 0 ; while ( true ) { cnt ++; if ( hare . rest != null ) { hare = hare . rest . rest ; } else { return 0 ; } tortoise = tortoise . rest ; if ( tortoise == null || hare == null ) { return 0 ; } if ( hare == tortoise ) { return cnt ; } } } @Override /** Outputs the IntList as a String. You are not expected to read * or understand this method. */ public String toString () { Formatter out = new Formatter (); String sep ; sep = ( ; int cycleLocation = detectCycles ( this ); int cnt = 0 ; for ( IntList p = this ; p != null ; p = p . rest ) { out . format ( %s%d , sep , p . first ); sep = , ; cnt ++; if (( cnt cycleLocation ) ( cycleLocation 0 )) { out . format ( ... (cycle exists) ... ); break ; } } out . format ( ) ); return out . toString (); } }","title":"Implementing Destructive vs. Non-destructive Methods"},{"location":"algorithm/cs61b/Lab3/","text":"Lab 3: Unit Testing with JUnit, Debugging 1 Introduction JUnit is a Unit Testing Framework for Java. Unit Testing is a great way to rigorously test each method of your code and ultimately ensure that you have a working project. The \u201cUnit\u201d part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure (each method should only do \u201cOne Thing\u201d), and allows you to consider all of the edge cases for each method and test for them individually. JUnit Syntax assertEquals is a common method used in JUnit tests. It tests if a variable\u2019s actual value is equivalent to its expected value. @Test public void testMethod () { assertEquals ( expected , actual ); } When you create JUnit test files, you should precede each test method with a @Test annotation, and can have one or more assertEquals or assertTrue methods (provided by the JUnit library). All tests must be non-static. Running JUnit Tests in IntelliJ Even though methods includes many assert statements, only one failure is shown. This is because JUnit tests are short-circuiting \u2013 as soon as one of the asserts in a method fails, it will output the failure and move on to the next test. Write a test BEFORE we write a method. Don\u2019t fill in the code for the actual method yet, just make it return null. Write a method, and rerun the tests until it passes. Pro tip: If you want to have your tests timeout after a certain amount of time (to prevent in\ufb01nite loops), you can declare your test like this: @Test ( timeout = 1000 ) A Debugging Mystery Another important skill to learn is how to exhaustively debug. When done properly, debugging should allow you to rapidly narrow down where a bug might be located, even when you are debugging code you don\u2019t fully understand. Using any combination of the following techniques, figure out whether the bug is in Horrible Steve\u2019s code or in Flik enterprise\u2019s library: Writing JUnit tests for the Flik library. Using the IntelliJ debugger, especially conditional breakpoints. Using print statements. Refactoring Horrible Steve\u2019s code. Refactoring means changing the syntax without changing the functionality. This may be hard to do since HS\u2019s code uses lots of weird stuff. We do not expect you to \ufb01x the bug or even understand why it\u2019s happening once you have found it. Instead, your job is simply to find the bug. Tip: JUnit provides methods assertTrue(boolean) and assertTrue(String, boolean) that you might find helpful. Running the 61B Style Checker We will be using the CS 61B IntelliJ Plugin to check for style. official 61B style guide My common mistake: ',' is followed by whitespace. Using trailing comments.","title":"Lab3: Unit Testing with JUnit, Debugging"},{"location":"algorithm/cs61b/Lab3/#lab-3-unit-testing-with-junit-debugging","text":"","title":"Lab 3: Unit Testing with JUnit, Debugging"},{"location":"algorithm/cs61b/Lab3/#1-introduction","text":"JUnit is a Unit Testing Framework for Java. Unit Testing is a great way to rigorously test each method of your code and ultimately ensure that you have a working project. The \u201cUnit\u201d part of Unit Testing comes from the idea that you can break your program down into units, or the smallest testable part of an application. Therefore, Unit Testing enforces good code structure (each method should only do \u201cOne Thing\u201d), and allows you to consider all of the edge cases for each method and test for them individually.","title":"1 Introduction"},{"location":"algorithm/cs61b/Lab3/#junit-syntax","text":"assertEquals is a common method used in JUnit tests. It tests if a variable\u2019s actual value is equivalent to its expected value. @Test public void testMethod () { assertEquals ( expected , actual ); } When you create JUnit test files, you should precede each test method with a @Test annotation, and can have one or more assertEquals or assertTrue methods (provided by the JUnit library). All tests must be non-static.","title":"JUnit Syntax"},{"location":"algorithm/cs61b/Lab3/#running-junit-tests-in-intellij","text":"Even though methods includes many assert statements, only one failure is shown. This is because JUnit tests are short-circuiting \u2013 as soon as one of the asserts in a method fails, it will output the failure and move on to the next test. Write a test BEFORE we write a method. Don\u2019t fill in the code for the actual method yet, just make it return null. Write a method, and rerun the tests until it passes. Pro tip: If you want to have your tests timeout after a certain amount of time (to prevent in\ufb01nite loops), you can declare your test like this: @Test ( timeout = 1000 )","title":"Running JUnit Tests in IntelliJ"},{"location":"algorithm/cs61b/Lab3/#a-debugging-mystery","text":"Another important skill to learn is how to exhaustively debug. When done properly, debugging should allow you to rapidly narrow down where a bug might be located, even when you are debugging code you don\u2019t fully understand. Using any combination of the following techniques, figure out whether the bug is in Horrible Steve\u2019s code or in Flik enterprise\u2019s library: Writing JUnit tests for the Flik library. Using the IntelliJ debugger, especially conditional breakpoints. Using print statements. Refactoring Horrible Steve\u2019s code. Refactoring means changing the syntax without changing the functionality. This may be hard to do since HS\u2019s code uses lots of weird stuff. We do not expect you to \ufb01x the bug or even understand why it\u2019s happening once you have found it. Instead, your job is simply to find the bug. Tip: JUnit provides methods assertTrue(boolean) and assertTrue(String, boolean) that you might find helpful.","title":"A Debugging Mystery"},{"location":"algorithm/cs61b/Lab3/#running-the-61b-style-checker","text":"We will be using the CS 61B IntelliJ Plugin to check for style. official 61B style guide My common mistake: ',' is followed by whitespace. Using trailing comments.","title":"Running the 61B Style Checker"},{"location":"bigdata/","text":"BigData HADOOP Chapter 1: Meet Hadoop Chapter 2: MapReduce Chapter 3: The Hadoop Distributed FileSystem Chapter 4: YARN Chapter 5: Hadoop I/O Chapter 6: Developing a MapReduce Application Chapter 7: How MapReduce Works Chapter 8: MapReduce Types and Formats Chapter 9: MapReduce Features Chapter 10: Setting Up a Hadoop Cluster Chapter 11: Adminstering Hadoop Chapter 12: Avro Chapter 13: Parquet Chapter 14: Flume Chapter 15: Sqoop Chapter 16: Pig Chapter 17: Hive Chapter 18: Crunch Chapter 19: Spark Chapter 20: HBase Chapter 21: ZooKeeper Chapter 22: Composable Data at Center Chapter 23: Biological Data Science: Saving Lives with Software Chapter 24: Cascading Spark Chapter 1: Introduction to Data Analysis with Spark Chapter 2: Downloading Spark and Getting Started Chapter 3: Programming with RDDs Chapter 4: Working with Key/Value Pairs Chapter 5: Loading and Saving Your Data Chapter 6: Advanced Spark Programming Chapter 7: Running on a Cluster Chapter 8: Tuning and Debugging Spark Chapter 9: Spark SQL Chapter 10: Spark Streaming Chapter 11: Machine Learning with MLlib GDM Chapter 1: \u63a8\u8350\u7cfb\u7edf\u5165\u95e8 Chapter 2: \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5 Chapter 3: \u5206\u7c7b Chapter 4: \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b Chapter 5: \u6982\u7387\u548c\u6734\u7d20\u8d1d\u53f6\u65af Chapter 6: \u6734\u7d20\u8d1d\u53f6\u65af\u548c\u6587\u672c\u6570\u636e Chapter 7: \u805a\u7c7b MLIA Chapter 1: \u673a\u5668\u5b66\u4e60\u57fa\u7840 Chapter 2: k-\u8fd1\u90bb\u7b97\u6cd5 Chapter 3: \u51b3\u7b56\u6811 Chapter 4: \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af Chapter 5: Logistic\u56de\u5f52 Chapter 6: \u652f\u6301\u5411\u91cf\u673a Chapter 7: \u5229\u7528AdaBoost\u5143\u7b97\u6cd5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd Chapter 8: \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52 Chapter 9: \u6811\u56de\u5f52 Chapter 10: \u5229\u7528\uff2b-\u5747\u503c\u805a\u7c7b\u7b97\u6cd5\u5bf9\u672a\u6807\u6ce8\u6570\u636e\u5206\u7ec4 Chapter 11: \u4f7f\u7528Apriori\u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790 Chapter 12: \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6 Chapter 13: \u5229\u7528PCA\u6765\u7b80\u5316\u6570\u636e Crawler Chapter 1: \u5f00\u53d1\u73af\u5883\u914d\u7f6e Chapter 2: \u722c\u866b\u57fa\u7840 Chapter 3: \u57fa\u672c\u5e93\u7684\u4f7f\u7528 Chapter 4: \u89e3\u6790\u5e93\u7684\u4f7f\u7528 Chapter 5: \u6570\u636e\u5b58\u50a8 Chapter 7: \u52a8\u6001\u6e32\u67d3\u9875\u9762\u722c\u53d6 Chapter 13: Scrapy\u6846\u67b6\u7684\u4f7f\u7528 Projects SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406","title":"Contents"},{"location":"bigdata/#bigdata","text":"","title":"BigData"},{"location":"bigdata/#hadoop","text":"Chapter 1: Meet Hadoop Chapter 2: MapReduce Chapter 3: The Hadoop Distributed FileSystem Chapter 4: YARN Chapter 5: Hadoop I/O Chapter 6: Developing a MapReduce Application Chapter 7: How MapReduce Works Chapter 8: MapReduce Types and Formats Chapter 9: MapReduce Features Chapter 10: Setting Up a Hadoop Cluster Chapter 11: Adminstering Hadoop Chapter 12: Avro Chapter 13: Parquet Chapter 14: Flume Chapter 15: Sqoop Chapter 16: Pig Chapter 17: Hive Chapter 18: Crunch Chapter 19: Spark Chapter 20: HBase Chapter 21: ZooKeeper Chapter 22: Composable Data at Center Chapter 23: Biological Data Science: Saving Lives with Software Chapter 24: Cascading","title":"HADOOP"},{"location":"bigdata/#spark","text":"Chapter 1: Introduction to Data Analysis with Spark Chapter 2: Downloading Spark and Getting Started Chapter 3: Programming with RDDs Chapter 4: Working with Key/Value Pairs Chapter 5: Loading and Saving Your Data Chapter 6: Advanced Spark Programming Chapter 7: Running on a Cluster Chapter 8: Tuning and Debugging Spark Chapter 9: Spark SQL Chapter 10: Spark Streaming Chapter 11: Machine Learning with MLlib","title":"Spark"},{"location":"bigdata/#gdm","text":"Chapter 1: \u63a8\u8350\u7cfb\u7edf\u5165\u95e8 Chapter 2: \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5 Chapter 3: \u5206\u7c7b Chapter 4: \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b Chapter 5: \u6982\u7387\u548c\u6734\u7d20\u8d1d\u53f6\u65af Chapter 6: \u6734\u7d20\u8d1d\u53f6\u65af\u548c\u6587\u672c\u6570\u636e Chapter 7: \u805a\u7c7b","title":"GDM"},{"location":"bigdata/#mlia","text":"Chapter 1: \u673a\u5668\u5b66\u4e60\u57fa\u7840 Chapter 2: k-\u8fd1\u90bb\u7b97\u6cd5 Chapter 3: \u51b3\u7b56\u6811 Chapter 4: \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af Chapter 5: Logistic\u56de\u5f52 Chapter 6: \u652f\u6301\u5411\u91cf\u673a Chapter 7: \u5229\u7528AdaBoost\u5143\u7b97\u6cd5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd Chapter 8: \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52 Chapter 9: \u6811\u56de\u5f52 Chapter 10: \u5229\u7528\uff2b-\u5747\u503c\u805a\u7c7b\u7b97\u6cd5\u5bf9\u672a\u6807\u6ce8\u6570\u636e\u5206\u7ec4 Chapter 11: \u4f7f\u7528Apriori\u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790 Chapter 12: \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6 Chapter 13: \u5229\u7528PCA\u6765\u7b80\u5316\u6570\u636e","title":"MLIA"},{"location":"bigdata/#crawler","text":"Chapter 1: \u5f00\u53d1\u73af\u5883\u914d\u7f6e Chapter 2: \u722c\u866b\u57fa\u7840 Chapter 3: \u57fa\u672c\u5e93\u7684\u4f7f\u7528 Chapter 4: \u89e3\u6790\u5e93\u7684\u4f7f\u7528 Chapter 5: \u6570\u636e\u5b58\u50a8 Chapter 7: \u52a8\u6001\u6e32\u67d3\u9875\u9762\u722c\u53d6 Chapter 13: Scrapy\u6846\u67b6\u7684\u4f7f\u7528","title":"Crawler"},{"location":"bigdata/#projects","text":"SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406","title":"Projects"},{"location":"bigdata/crawler/","text":"Crawler Chapter 1: \u5f00\u53d1\u73af\u5883\u914d\u7f6e Chapter 2: \u722c\u866b\u57fa\u7840 Chapter 3: \u57fa\u672c\u5e93\u7684\u4f7f\u7528 Chapter 4: \u89e3\u6790\u5e93\u7684\u4f7f\u7528 Chapter 5: \u6570\u636e\u5b58\u50a8 Chapter 7: \u52a8\u6001\u6e32\u67d3\u9875\u9762\u722c\u53d6 Chapter 13: Scrapy\u6846\u67b6\u7684\u4f7f\u7528","title":"Contents"},{"location":"bigdata/crawler/#crawler","text":"Chapter 1: \u5f00\u53d1\u73af\u5883\u914d\u7f6e Chapter 2: \u722c\u866b\u57fa\u7840 Chapter 3: \u57fa\u672c\u5e93\u7684\u4f7f\u7528 Chapter 4: \u89e3\u6790\u5e93\u7684\u4f7f\u7528 Chapter 5: \u6570\u636e\u5b58\u50a8 Chapter 7: \u52a8\u6001\u6e32\u67d3\u9875\u9762\u722c\u53d6 Chapter 13: Scrapy\u6846\u67b6\u7684\u4f7f\u7528","title":"Crawler"},{"location":"bigdata/crawler/ch1/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Chapter 1: \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch1/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch10/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch10"},{"location":"bigdata/crawler/ch10/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch11/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch11"},{"location":"bigdata/crawler/ch11/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch12/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch12"},{"location":"bigdata/crawler/ch12/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch13/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - Scrapy\u6846\u67b6\u7684\u4f7f\u7528 Scrapy\u6846\u67b6\u4ecb\u7ecd Scrapy \u662f\u4e00\u4e2a\u57fa\u4e8e Twisted \u7684\u5f02\u6b65\u5904\u7406\u6846\u67b6\uff0c\u662f\u7eafPython\u5b9e\u73b0\u7684\u722c\u866b\u6846\u67b6\uff0c\u5176\u67b6\u6784\u6e05\u6670\uff0c\u6a21\u5757\u4e4b\u95f4\u7684\u8026\u5408\u7a0b\u5ea6\u4f4e\uff0c\u53ef\u6269\u5c55\u6027\u6781\u5f3a\uff0c\u53ef\u4ee5\u7075\u6d3b\u5b8c\u6210\u5404\u79cd\u9700\u6c42\u3002 Engine\u3002 \u5f15\u64ce\uff0c\u5904\u7406\u6574\u4e2a\u7cfb\u7edf\u7684\u6570\u636e\u6d41\u5904\u7406\u3001\u89e6\u53d1\u4e8b\u52a1\uff0c\u662f\u6574\u4e2a\u6846\u67b6\u7684\u6838\u5fc3\u3002 Item\u3002 \u9879\u76ee\uff0c\u5b83\u5b9a\u4e49\u4e86\u722c\u53d6\u7ed3\u679c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u722c\u53d6\u7684\u6570\u636e\u4f1a\u88ab\u8d4b\u503c\u6210\u8be5Item\u5bf9\u8c61\u3002 Scheduler\u3002\u8c03\u5ea6\u5668\uff0c\u63a5\u53d7\u5f15\u64ce\u53d1\u8fc7\u6765\u7684\u8bf7\u6c42\u5e76\u5c06\u5176\u52a0\u5165\u961f\u5217\u4e2d\uff0c\u5728\u5f15\u64ce\u518d\u6b21\u8bf7\u6c42\u7684\u65f6\u5019\u5c06\u8bf7\u6c42\u63d0\u4f9b\u7ed9\u5f15\u64ce\u3002 Downloader\u3002\u4e0b\u8f7d\u5668\uff0c\u4e0b\u8f7d\u7f51\u9875\u5185\u5bb9\uff0c\u5e76\u5c06\u7f51\u9875\u5185\u5bb9\u8fd4\u56de\u7ed9\u8718\u86db\u3002 Spiders\u3002 \u8718\u86db\uff0c\u5176\u5185\u5b9a\u4e49\u4e86\u722c\u53d6\u7684\u903b\u8f91\u548c\u7f51\u9875\u7684\u89e3\u6790\u89c4\u5219\uff0c\u7ed3\u679c\u548c\u65b0\u7684\u8bf7\u6c42\u3002 Item Pipeline\u3002 \u9879\u76ee\u7ba1\u9053, \u8d1f\u8d23\u5904\u7406\u7531\u8718\u86db\u4ece\u7f51\u9875\u4e2d\u62bd\u53d6\u7684\u9879\u76ee\uff0c\u5b83\u4e3b\u8981\u8d1f\u8d23\u89e3\u6790\u54cd\u5e94\u5e76\u751f\u6210\u63d0\u53d6. \u5b83\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u6e05\u6d17 \u3001\u9a8c\u8bc1\u548c\u5b58\u50a8\u6570\u636e\u3002 Downloader Middlewares\u3002 \u4e0b\u8f7d\u5668\u4e2d\u95f4\u4ef6, \u4f4d\u4e8e\u5f15\u64ce\u548c\u4e0b\u8f7d\u5668\u4e4b\u95f4\u7684\u7ec4\u4ef6\uff0c\u4e3b\u8981\u5904\u7406\u5f15\u64ce\u4e0e\u4e0b\u8f7d\u5668\u4e4b\u95f4\u7684\u8bf7\u6c42\u53ca\u54cd\u5e94\u3002 Spider Middlewares\u3002 \u8718\u86db\u4e2d\u95f4\u4ef6\uff0c\u4f4d\u4e8e\u5f15\u64ce\u548c\u8718\u86db\u4e4b\u95f4\u7684\u7ec4\u4ef6\uff0c\u4e3b\u8981\u5904\u7406\u8718\u86db\u8f93\u5165\u7684\u54cd\u5e94\u548c\u8f93\u51fa\u7684\u7ed3\u679c\u53ca\u65b0\u7684\u8bf7\u6c42\u3002 Scrapy\u4e2d\u7684\u6570\u636e\u6d41\u7531\u5f15\u64ce\u63a7\u5236\uff0c\u6570\u636e\u6d41\u7684\u8fc7\u7a0b\u5982\u4e0b\u3002 Engine \u9996\u5148\u6253\u5f00\u4e00\u4e2a\u7f51\u7ad9\uff0c \u627e\u5230\u5904\u7406\u8be5\u7f51\u7ad9\u7684 Spider \uff0c\u5e76\u5411\u8be5 Spider \u8bf7\u6c42\u7b2c\u4e00\u4e2a\u8981\u722c\u53d6\u7684 URL\u3002 Engine\u4eceSpider\u4e2d\u83b7\u53d6\u5230\u7b2c\u4e00\u4e2a\u8981\u722c\u53d6\u7684URL\uff0c\u5e76\u901a\u8fc7Scheduler\u4ee5 Request \u7684\u5f62\u5f0f\u8c03\u5ea6 \u3002 Engine\u5411Scheduler\u8bf7\u6c42\u4e0b\u4e00\u4e2a\u8981\u722c\u53d6\u7684URL\u3002 Scheduler\u8fd4\u56de\u4e0b\u4e00\u4e2a\u8981\u722c\u53d6\u7684URL\u7ed9Engine, Engine\u5c06URL\u901a\u8fc7Downloader Middlewares\u8f6c\u53d1\u7ed9 Downloader\u4e0b\u8f7d\u3002 \u4e00\u65e6\u9875\u9762\u4e0b\u8f7d\u5b8c\u6bd5\uff0c Downloader\u751f\u6210\u8be5\u9875\u9762\u7684 Response \uff0c \u5e76\u5c06\u5176\u901a\u8fc7Downloader Middlewares\u53d1\u9001\u7ed9Engine\u3002 Engine\u4ece\u4e0b\u8f7d\u5668\u4e2d\u63a5\u6536\u5230 Response \uff0c \u5e76\u5c06\u5176\u901a\u8fc7Spider Middlewares\u53d1\u9001\u7ed9Spider\u5904\u7406\u3002 Spider\u5904\u7406 Response\uff0c\u5e76\u8fd4\u56de\u722c\u53d6\u5230\u7684Item\u53ca\u65b0\u7684 Request \u7ed9Engine\u3002 Engine\u5c06Spider\u8fd4\u56de\u7684Item\u7ed9ItemPipeline\uff0c\u5c06\u65b0\u7684Request\u7ed9Scheduler\u3002 \u91cd\u590d\u7b2c\uff082\uff09\u6b65\u5230\u7b2c\uff088 \uff09\u6b65\uff0c \u76f4\u5230Scheduler\u4e2d\u6ca1\u6709\u66f4\u591a\u7684 Request , Engine\u5173\u95ed\u8be5\u7f51\u7ad9\uff0c \u722c\u53d6\u7ed3\u675f\u3002 Scrapy\u5165\u95e8 \u521b\u5efa\u4e00\u4e2aScrapy\u9879\u76ee\uff0c\u9879\u76ee\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u7528scrapy\u547d\u4ee4\u751f\u6210 scrapy startproject projectname \u521b\u5efa\u4e4b\u540e\uff0c\u9879\u76ee\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\u6240\u793a \uff1a scrapy.cfg project/ __init__. py items.py pipelines.py settings.py middlewares.py spiders/ init.py Spider\u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\uff0c scrapy\u7528\u5b83\u6765\u4ece\u7f51\u9875\u91cc\u6293\u53d6\u5185\u5bb9\uff0c \u5e76\u89e3\u6790\u6293\u53d6\u7684\u7ed3\u679c\u3002 \u4e0d\u8fc7\u8fd9\u4e2a\u7c7b\u5fc5\u987b\u7ee7\u627fscrapy\u63d0\u4f9b\u7684Spider\u7c7b scrapy.Spider \uff0c \u8fd8\u8981\u5b9a\u4e49Spider\u7684\u540d\u79f0\u548c\u8d77\u59cb\u8bf7\u6c42\uff0c \u4ee5\u53ca\u600e\u6837\u5904\u7406\u722c\u53d6\u540e\u7684\u7ed3\u679c\u7684\u65b9\u6cd5\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u4e00\u4e2aSpider\u3002 \u6bd4\u5982\u8981\u751f\u6210Quotes\u8fd9\u4e2aSpider\uff0c\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a cd projectname scrapy genspider quotes quotes.toscrape.com genspider\u547d\u4ee4\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fSpider\u7684\u540d\u79f0\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7f51\u7ad9\u57df\u540d\u3002\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0cspiders\u6587\u4ef6\u5939\u4e2d\u591a\u4e86\u4e00\u4e2aquotes.py\uff0c\u5b83\u5c31\u662f\u521a\u521a\u521b\u5efa\u7684Spider, \u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a class QuotesdemoSpider ( scrapy . Spider ): name = quotesdemo allowed_domains = [ quotes.toscrape.com ] start_urls = [ http://quotes.toscrape.com/ ] def parse ( self , response ): pass \u8fd9\u91cc\u6709\u4e09\u4e2a\u5c5e\u6027 -- name , allowed_domains , start_urls , \u8fd8\u6709\u4e00\u4e2a\u65b9\u6cd5 parse \u3002 name , \u5b83\u662f\u6bcf\u4e2a\u9879\u76ee\u552f\u4e00\u7684\u540d\u5b57\uff0c \u7528\u6765\u533a\u5206\u4e0d\u540c\u7684Spider\u3002 allowed_domains , \u5b83\u662f\u5141\u8bb8\u722c\u53d6\u7684\u57df\u540d\uff0c\u5982\u679c\u521d\u59cb\u6216\u540e\u7eed\u7684\u8bf7\u6c42\u94fe\u63a5\u4e0d\u662f\u8fd9\u4e2a\u57df\u540d\u4e0b\u7684\uff0c\u5219\u8bf7\u6c42\u94fe\u63a5\u4f1a\u88ab\u8fc7\u6ee4\u6389\u3002 start_urls \uff0c\u5b83\u5305\u542b\u4e86Spider\u5728\u542f\u52a8\u65f6\u722c\u53d6\u7684url\u5217\u8868\uff0c\u521d\u59cb\u8bf7\u6c42\u662f\u7531\u5b83\u6765\u5b9a\u4e49\u7684 \u3002 parse \uff0c\u5b83\u662f Spider \u7684\u4e00\u4e2a\u65b9\u6cd5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u88ab\u8c03\u7528\u65f6 start_urls \u91cc\u9762\u7684\u94fe\u63a5\u6784\u6210\u7684\u8bf7\u6c42\u5b8c\u6210\u4e0b\u8f7d\u6267\u884c\u540e\uff0c \u8fd4\u56de\u7684\u54cd\u5e94\u5c31\u4f1a\u4f5c\u4e3a\u552f\u4e00\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u51fd\u6570\u3002 \u8be5\u65b9\u6cd5\u8d1f\u8d23\u89e3\u6790\u8fd4\u56de\u7684\u54cd\u5e94\u3001\u63d0\u53d6\u6570\u636e\u6216\u8005\u8fdb\u4e00\u6b65\u751f\u6210\u8981\u5904\u7406\u7684\u8bf7\u6c42\u3002 Scrapy\u5bf9\u63a5Selenium Scrapy\u6293\u53d6\u9875\u9762\u7684\u65b9\u5f0f\u548crequests\u5e93\u7c7b\u4f3c\uff0c\u90fd\u662f\u76f4\u63a5\u6a21\u62dfHTTP\u8bf7\u6c42\uff0c\u6240\u4ee5Scrapy\u4e5f\u4e0d\u80fd\u6293\u53d6JavaScript\u52a8\u6001\u6e32\u67d3\u7684\u9875\u9762\u3002\u76f4\u63a5\u7528Selenium\u6a21\u62df\u6d4f\u89c8\u5668\u8fdb\u884c\u6293\u53d6\uff0c\u53ef\u89c1\u5373\u53ef\u722c\u3002 \u672c\u8282\u4ee5\u6293\u53d6\u6dd8\u5b9d\u5546\u54c1\u4fe1\u606f\u4e3a\u4f8b\u5b50\uff0c\u6f14\u793aScrapy\u6846\u67b6\u5982\u4f55\u5bf9\u63a5Selenium\u3002\u9996\u5148\u65b0\u5efa\u9879\u76ee\u548cSpider\uff0c\u4fee\u6539 settings.py \u4e2d\u7684 ROBOTSTEXT_OBEY=False \u3002 scrapy startproject scrapyseleniumtest scrapy genspider taobao www.taobao.com \u7136\u540e\u5b9a\u4e49Item\u5bf9\u8c61\uff0c\u540d\u4e3a ProductItem class ProductItem ( scrapy . Item ): # define the fields for your item here like: # name = scrapy.Field() collection = products image = scrapy . Field () price = scrapy . Field () deal = scrapy . Field () titlte = scrapy . Field () shop = scrapy . Field () location = scrapy . Field () \u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e866\u4e2a Field \uff0c\u7136\u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a collection \u5c5e\u6027\uff0c\u5373\u6b64 Item \u4fdd\u5b58\u7684MongoDB\u7684 Collection \u540d\u79f0\u3002 \u521d\u6b65\u5b9e\u73b0Spider\u7684 start_requests() \u65b9\u6cd5: class TaobaoSpider ( scrapy . Spider ): name = taobao allowed_domains = [ taobao.com ] base_url = [ https://s.taobao.com/search?q= ] def start_requests ( self ): for keyword in self . settings . get ( KEYWORDS ): for page in range ( 1 , self . settings . get ( MAX_PAGE ) + 1 ): url = self . base_url + quote ( keyword ) yield scrapy . Request ( url = url , callback = self . parse , meta = { page : page }, dont_filter = True ) \u9996\u5148\u5b9a\u4e49\u4e86\u5546\u54c1\u5217\u8868\u7684URL- base_url , \u5176\u540e\u62fc\u63a5\u4e00\u4e2a\u641c\u7d22\u5173\u952e\u5b57\u5c31\u662f\u8be5\u5173\u952e\u5b57\u5728\u6dd8\u5b9d\u641c\u7d22\u7ed3\u679c\u5546\u54c1\u5217\u8868\u9875\u9762\u3002\u5173\u952e\u5b57\u7528KEYWORDS\u6807\u8bc6\uff0c\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u6700\u5927\u7ffb\u9875\u9875\u7801\u7528MAX_PAGE\u8868\u793a\u3002\u4ed6\u4eec\u7edf\u4e00\u5b9a\u4e49\u5728 settings.py \u91cc\u9762\uff0c KEYWORDS = [ iPad ] MAX_PAGE = 100 \u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u5904\u7406\u8fd9\u4e9b\u8bf7\u6c42\u7684\u6293\u53d6\uff1a\u5bf9\u63a5Selenium\u8fdb\u884c\u6293\u53d6\uff0c\u91c7\u7528Downloader Middleware\u6765\u5b9e\u73b0\u3002\u5728Middleware\u91cc\u9762\u7684 process_request() \u65b9\u6cd5\u91cc\u5bf9\u6bcf\u4e2a\u6293\u53d6\u8bf7\u6c42\u8fdb\u884c\u5904\u7406\uff0c\u542f\u52a8\u6d4f\u89c8\u5668\u5e76\u8fdb\u884c\u9875\u9762\u6e32\u67d3\uff0c\u518d\u5c06\u6e32\u67d3\u540e\u7684\u7ed3\u679c\u6784\u9020\u4e00\u4e2a HtmlResponse \u5bf9\u8c61\u8fd4\u56de\u3002 Python","title":"Chapter 13: Scrapy\u6846\u67b6\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch13/#python3-scrapy","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - Scrapy\u6846\u67b6\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch13/#scrapy","text":"Scrapy \u662f\u4e00\u4e2a\u57fa\u4e8e Twisted \u7684\u5f02\u6b65\u5904\u7406\u6846\u67b6\uff0c\u662f\u7eafPython\u5b9e\u73b0\u7684\u722c\u866b\u6846\u67b6\uff0c\u5176\u67b6\u6784\u6e05\u6670\uff0c\u6a21\u5757\u4e4b\u95f4\u7684\u8026\u5408\u7a0b\u5ea6\u4f4e\uff0c\u53ef\u6269\u5c55\u6027\u6781\u5f3a\uff0c\u53ef\u4ee5\u7075\u6d3b\u5b8c\u6210\u5404\u79cd\u9700\u6c42\u3002 Engine\u3002 \u5f15\u64ce\uff0c\u5904\u7406\u6574\u4e2a\u7cfb\u7edf\u7684\u6570\u636e\u6d41\u5904\u7406\u3001\u89e6\u53d1\u4e8b\u52a1\uff0c\u662f\u6574\u4e2a\u6846\u67b6\u7684\u6838\u5fc3\u3002 Item\u3002 \u9879\u76ee\uff0c\u5b83\u5b9a\u4e49\u4e86\u722c\u53d6\u7ed3\u679c\u7684\u6570\u636e\u7ed3\u6784\uff0c\u722c\u53d6\u7684\u6570\u636e\u4f1a\u88ab\u8d4b\u503c\u6210\u8be5Item\u5bf9\u8c61\u3002 Scheduler\u3002\u8c03\u5ea6\u5668\uff0c\u63a5\u53d7\u5f15\u64ce\u53d1\u8fc7\u6765\u7684\u8bf7\u6c42\u5e76\u5c06\u5176\u52a0\u5165\u961f\u5217\u4e2d\uff0c\u5728\u5f15\u64ce\u518d\u6b21\u8bf7\u6c42\u7684\u65f6\u5019\u5c06\u8bf7\u6c42\u63d0\u4f9b\u7ed9\u5f15\u64ce\u3002 Downloader\u3002\u4e0b\u8f7d\u5668\uff0c\u4e0b\u8f7d\u7f51\u9875\u5185\u5bb9\uff0c\u5e76\u5c06\u7f51\u9875\u5185\u5bb9\u8fd4\u56de\u7ed9\u8718\u86db\u3002 Spiders\u3002 \u8718\u86db\uff0c\u5176\u5185\u5b9a\u4e49\u4e86\u722c\u53d6\u7684\u903b\u8f91\u548c\u7f51\u9875\u7684\u89e3\u6790\u89c4\u5219\uff0c\u7ed3\u679c\u548c\u65b0\u7684\u8bf7\u6c42\u3002 Item Pipeline\u3002 \u9879\u76ee\u7ba1\u9053, \u8d1f\u8d23\u5904\u7406\u7531\u8718\u86db\u4ece\u7f51\u9875\u4e2d\u62bd\u53d6\u7684\u9879\u76ee\uff0c\u5b83\u4e3b\u8981\u8d1f\u8d23\u89e3\u6790\u54cd\u5e94\u5e76\u751f\u6210\u63d0\u53d6. \u5b83\u7684\u4e3b\u8981\u4efb\u52a1\u662f\u6e05\u6d17 \u3001\u9a8c\u8bc1\u548c\u5b58\u50a8\u6570\u636e\u3002 Downloader Middlewares\u3002 \u4e0b\u8f7d\u5668\u4e2d\u95f4\u4ef6, \u4f4d\u4e8e\u5f15\u64ce\u548c\u4e0b\u8f7d\u5668\u4e4b\u95f4\u7684\u7ec4\u4ef6\uff0c\u4e3b\u8981\u5904\u7406\u5f15\u64ce\u4e0e\u4e0b\u8f7d\u5668\u4e4b\u95f4\u7684\u8bf7\u6c42\u53ca\u54cd\u5e94\u3002 Spider Middlewares\u3002 \u8718\u86db\u4e2d\u95f4\u4ef6\uff0c\u4f4d\u4e8e\u5f15\u64ce\u548c\u8718\u86db\u4e4b\u95f4\u7684\u7ec4\u4ef6\uff0c\u4e3b\u8981\u5904\u7406\u8718\u86db\u8f93\u5165\u7684\u54cd\u5e94\u548c\u8f93\u51fa\u7684\u7ed3\u679c\u53ca\u65b0\u7684\u8bf7\u6c42\u3002 Scrapy\u4e2d\u7684\u6570\u636e\u6d41\u7531\u5f15\u64ce\u63a7\u5236\uff0c\u6570\u636e\u6d41\u7684\u8fc7\u7a0b\u5982\u4e0b\u3002 Engine \u9996\u5148\u6253\u5f00\u4e00\u4e2a\u7f51\u7ad9\uff0c \u627e\u5230\u5904\u7406\u8be5\u7f51\u7ad9\u7684 Spider \uff0c\u5e76\u5411\u8be5 Spider \u8bf7\u6c42\u7b2c\u4e00\u4e2a\u8981\u722c\u53d6\u7684 URL\u3002 Engine\u4eceSpider\u4e2d\u83b7\u53d6\u5230\u7b2c\u4e00\u4e2a\u8981\u722c\u53d6\u7684URL\uff0c\u5e76\u901a\u8fc7Scheduler\u4ee5 Request \u7684\u5f62\u5f0f\u8c03\u5ea6 \u3002 Engine\u5411Scheduler\u8bf7\u6c42\u4e0b\u4e00\u4e2a\u8981\u722c\u53d6\u7684URL\u3002 Scheduler\u8fd4\u56de\u4e0b\u4e00\u4e2a\u8981\u722c\u53d6\u7684URL\u7ed9Engine, Engine\u5c06URL\u901a\u8fc7Downloader Middlewares\u8f6c\u53d1\u7ed9 Downloader\u4e0b\u8f7d\u3002 \u4e00\u65e6\u9875\u9762\u4e0b\u8f7d\u5b8c\u6bd5\uff0c Downloader\u751f\u6210\u8be5\u9875\u9762\u7684 Response \uff0c \u5e76\u5c06\u5176\u901a\u8fc7Downloader Middlewares\u53d1\u9001\u7ed9Engine\u3002 Engine\u4ece\u4e0b\u8f7d\u5668\u4e2d\u63a5\u6536\u5230 Response \uff0c \u5e76\u5c06\u5176\u901a\u8fc7Spider Middlewares\u53d1\u9001\u7ed9Spider\u5904\u7406\u3002 Spider\u5904\u7406 Response\uff0c\u5e76\u8fd4\u56de\u722c\u53d6\u5230\u7684Item\u53ca\u65b0\u7684 Request \u7ed9Engine\u3002 Engine\u5c06Spider\u8fd4\u56de\u7684Item\u7ed9ItemPipeline\uff0c\u5c06\u65b0\u7684Request\u7ed9Scheduler\u3002 \u91cd\u590d\u7b2c\uff082\uff09\u6b65\u5230\u7b2c\uff088 \uff09\u6b65\uff0c \u76f4\u5230Scheduler\u4e2d\u6ca1\u6709\u66f4\u591a\u7684 Request , Engine\u5173\u95ed\u8be5\u7f51\u7ad9\uff0c \u722c\u53d6\u7ed3\u675f\u3002","title":"Scrapy\u6846\u67b6\u4ecb\u7ecd"},{"location":"bigdata/crawler/ch13/#scrapy_1","text":"\u521b\u5efa\u4e00\u4e2aScrapy\u9879\u76ee\uff0c\u9879\u76ee\u6587\u4ef6\u53ef\u4ee5\u76f4\u63a5\u7528scrapy\u547d\u4ee4\u751f\u6210 scrapy startproject projectname \u521b\u5efa\u4e4b\u540e\uff0c\u9879\u76ee\u6587\u4ef6\u7ed3\u6784\u5982\u4e0b\u6240\u793a \uff1a scrapy.cfg project/ __init__. py items.py pipelines.py settings.py middlewares.py spiders/ init.py Spider\u662f\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\uff0c scrapy\u7528\u5b83\u6765\u4ece\u7f51\u9875\u91cc\u6293\u53d6\u5185\u5bb9\uff0c \u5e76\u89e3\u6790\u6293\u53d6\u7684\u7ed3\u679c\u3002 \u4e0d\u8fc7\u8fd9\u4e2a\u7c7b\u5fc5\u987b\u7ee7\u627fscrapy\u63d0\u4f9b\u7684Spider\u7c7b scrapy.Spider \uff0c \u8fd8\u8981\u5b9a\u4e49Spider\u7684\u540d\u79f0\u548c\u8d77\u59cb\u8bf7\u6c42\uff0c \u4ee5\u53ca\u600e\u6837\u5904\u7406\u722c\u53d6\u540e\u7684\u7ed3\u679c\u7684\u65b9\u6cd5\u3002 \u4e5f\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u521b\u5efa\u4e00\u4e2aSpider\u3002 \u6bd4\u5982\u8981\u751f\u6210Quotes\u8fd9\u4e2aSpider\uff0c\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u547d\u4ee4\uff1a cd projectname scrapy genspider quotes quotes.toscrape.com genspider\u547d\u4ee4\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662fSpider\u7684\u540d\u79f0\uff0c \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u7f51\u7ad9\u57df\u540d\u3002\u6267\u884c\u5b8c\u6bd5\u4e4b\u540e\uff0cspiders\u6587\u4ef6\u5939\u4e2d\u591a\u4e86\u4e00\u4e2aquotes.py\uff0c\u5b83\u5c31\u662f\u521a\u521a\u521b\u5efa\u7684Spider, \u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a class QuotesdemoSpider ( scrapy . Spider ): name = quotesdemo allowed_domains = [ quotes.toscrape.com ] start_urls = [ http://quotes.toscrape.com/ ] def parse ( self , response ): pass \u8fd9\u91cc\u6709\u4e09\u4e2a\u5c5e\u6027 -- name , allowed_domains , start_urls , \u8fd8\u6709\u4e00\u4e2a\u65b9\u6cd5 parse \u3002 name , \u5b83\u662f\u6bcf\u4e2a\u9879\u76ee\u552f\u4e00\u7684\u540d\u5b57\uff0c \u7528\u6765\u533a\u5206\u4e0d\u540c\u7684Spider\u3002 allowed_domains , \u5b83\u662f\u5141\u8bb8\u722c\u53d6\u7684\u57df\u540d\uff0c\u5982\u679c\u521d\u59cb\u6216\u540e\u7eed\u7684\u8bf7\u6c42\u94fe\u63a5\u4e0d\u662f\u8fd9\u4e2a\u57df\u540d\u4e0b\u7684\uff0c\u5219\u8bf7\u6c42\u94fe\u63a5\u4f1a\u88ab\u8fc7\u6ee4\u6389\u3002 start_urls \uff0c\u5b83\u5305\u542b\u4e86Spider\u5728\u542f\u52a8\u65f6\u722c\u53d6\u7684url\u5217\u8868\uff0c\u521d\u59cb\u8bf7\u6c42\u662f\u7531\u5b83\u6765\u5b9a\u4e49\u7684 \u3002 parse \uff0c\u5b83\u662f Spider \u7684\u4e00\u4e2a\u65b9\u6cd5\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u88ab\u8c03\u7528\u65f6 start_urls \u91cc\u9762\u7684\u94fe\u63a5\u6784\u6210\u7684\u8bf7\u6c42\u5b8c\u6210\u4e0b\u8f7d\u6267\u884c\u540e\uff0c \u8fd4\u56de\u7684\u54cd\u5e94\u5c31\u4f1a\u4f5c\u4e3a\u552f\u4e00\u7684\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e2a\u51fd\u6570\u3002 \u8be5\u65b9\u6cd5\u8d1f\u8d23\u89e3\u6790\u8fd4\u56de\u7684\u54cd\u5e94\u3001\u63d0\u53d6\u6570\u636e\u6216\u8005\u8fdb\u4e00\u6b65\u751f\u6210\u8981\u5904\u7406\u7684\u8bf7\u6c42\u3002","title":"Scrapy\u5165\u95e8"},{"location":"bigdata/crawler/ch13/#scrapyselenium","text":"Scrapy\u6293\u53d6\u9875\u9762\u7684\u65b9\u5f0f\u548crequests\u5e93\u7c7b\u4f3c\uff0c\u90fd\u662f\u76f4\u63a5\u6a21\u62dfHTTP\u8bf7\u6c42\uff0c\u6240\u4ee5Scrapy\u4e5f\u4e0d\u80fd\u6293\u53d6JavaScript\u52a8\u6001\u6e32\u67d3\u7684\u9875\u9762\u3002\u76f4\u63a5\u7528Selenium\u6a21\u62df\u6d4f\u89c8\u5668\u8fdb\u884c\u6293\u53d6\uff0c\u53ef\u89c1\u5373\u53ef\u722c\u3002 \u672c\u8282\u4ee5\u6293\u53d6\u6dd8\u5b9d\u5546\u54c1\u4fe1\u606f\u4e3a\u4f8b\u5b50\uff0c\u6f14\u793aScrapy\u6846\u67b6\u5982\u4f55\u5bf9\u63a5Selenium\u3002\u9996\u5148\u65b0\u5efa\u9879\u76ee\u548cSpider\uff0c\u4fee\u6539 settings.py \u4e2d\u7684 ROBOTSTEXT_OBEY=False \u3002 scrapy startproject scrapyseleniumtest scrapy genspider taobao www.taobao.com \u7136\u540e\u5b9a\u4e49Item\u5bf9\u8c61\uff0c\u540d\u4e3a ProductItem class ProductItem ( scrapy . Item ): # define the fields for your item here like: # name = scrapy.Field() collection = products image = scrapy . Field () price = scrapy . Field () deal = scrapy . Field () titlte = scrapy . Field () shop = scrapy . Field () location = scrapy . Field () \u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e866\u4e2a Field \uff0c\u7136\u540e\u5b9a\u4e49\u4e86\u4e00\u4e2a collection \u5c5e\u6027\uff0c\u5373\u6b64 Item \u4fdd\u5b58\u7684MongoDB\u7684 Collection \u540d\u79f0\u3002 \u521d\u6b65\u5b9e\u73b0Spider\u7684 start_requests() \u65b9\u6cd5: class TaobaoSpider ( scrapy . Spider ): name = taobao allowed_domains = [ taobao.com ] base_url = [ https://s.taobao.com/search?q= ] def start_requests ( self ): for keyword in self . settings . get ( KEYWORDS ): for page in range ( 1 , self . settings . get ( MAX_PAGE ) + 1 ): url = self . base_url + quote ( keyword ) yield scrapy . Request ( url = url , callback = self . parse , meta = { page : page }, dont_filter = True ) \u9996\u5148\u5b9a\u4e49\u4e86\u5546\u54c1\u5217\u8868\u7684URL- base_url , \u5176\u540e\u62fc\u63a5\u4e00\u4e2a\u641c\u7d22\u5173\u952e\u5b57\u5c31\u662f\u8be5\u5173\u952e\u5b57\u5728\u6dd8\u5b9d\u641c\u7d22\u7ed3\u679c\u5546\u54c1\u5217\u8868\u9875\u9762\u3002\u5173\u952e\u5b57\u7528KEYWORDS\u6807\u8bc6\uff0c\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5217\u8868\uff0c\u6700\u5927\u7ffb\u9875\u9875\u7801\u7528MAX_PAGE\u8868\u793a\u3002\u4ed6\u4eec\u7edf\u4e00\u5b9a\u4e49\u5728 settings.py \u91cc\u9762\uff0c KEYWORDS = [ iPad ] MAX_PAGE = 100 \u63a5\u4e0b\u6765\u6211\u4eec\u9700\u8981\u5904\u7406\u8fd9\u4e9b\u8bf7\u6c42\u7684\u6293\u53d6\uff1a\u5bf9\u63a5Selenium\u8fdb\u884c\u6293\u53d6\uff0c\u91c7\u7528Downloader Middleware\u6765\u5b9e\u73b0\u3002\u5728Middleware\u91cc\u9762\u7684 process_request() \u65b9\u6cd5\u91cc\u5bf9\u6bcf\u4e2a\u6293\u53d6\u8bf7\u6c42\u8fdb\u884c\u5904\u7406\uff0c\u542f\u52a8\u6d4f\u89c8\u5668\u5e76\u8fdb\u884c\u9875\u9762\u6e32\u67d3\uff0c\u518d\u5c06\u6e32\u67d3\u540e\u7684\u7ed3\u679c\u6784\u9020\u4e00\u4e2a HtmlResponse \u5bf9\u8c61\u8fd4\u56de\u3002 Python","title":"Scrapy\u5bf9\u63a5Selenium"},{"location":"bigdata/crawler/ch14/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch14"},{"location":"bigdata/crawler/ch14/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch15/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch15"},{"location":"bigdata/crawler/ch15/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch2/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Chapter 2: \u722c\u866b\u57fa\u7840"},{"location":"bigdata/crawler/ch2/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch3/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 3 \u57fa\u672c\u5e93\u7684\u4f7f\u7528 1 \u4f7f\u7528Urllib Urllib\u5e93\u662fPython\u5185\u7f6e\u7684HTTP\u8bf7\u6c42\u5e93( \u5b98\u65b9\u6587\u6863\u94fe\u63a5 )\uff0c \u5b83\u5305\u542b\u56db\u4e2a\u6a21\u5757\uff1a request \u6a21\u5757\uff0c\u6700\u57fa\u672c\u7684HTTP\u8bf7\u6c42\u6a21\u5757\uff0c\u53ef\u4ee5\u7528\u6765\u6a21\u62df\u53d1\u9001\u8bf7\u6c42\uff0c\u5c31\u50cf\u5728\u6d4f\u89c8\u5668\u91cc\u8f93\u5165\u7f51\u5740\u7136\u540e\u6572\u51fb\u56de\u8f66\u4e00\u6837\uff0c\u53ea\u9700\u8981\u7ed9\u5e93\u65b9\u6cd5\u4f20\u5165URL\u8fd8\u6709\u989d\u5916\u7684\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u6a21\u62df\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u4e86\u3002 error \u6a21\u5757\u5373\u5f02\u5e38\u5904\u7406\u6a21\u5757\uff0c\u5982\u679c\u51fa\u73b0\u8bf7\u6c42\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\uff0c\u7136\u540e\u8fdb\u884c\u91cd\u8bd5\u6216\u5176\u4ed6\u64cd\u4f5c\u4fdd\u8bc1\u7a0b\u5e8f\u4e0d\u4f1a\u610f\u5916\u7ec8\u6b62\u3002 parse \u6a21\u5757\uff0c\u7528\u6765\u89e3\u6790URL\u3002 robotparser \u6a21\u5757\uff0c\u7528\u6765\u89e3\u6790robots.txt\u6587\u4ef6\u3002 1.1 \u53d1\u9001\u8bf7\u6c42 \u4f7f\u7528Urllib\u7684 request\u6a21\u5757 \u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9e\u73b0Request\u7684\u53d1\u9001\u5e76\u5f97\u5230Response\u3002 urlopen() urllib.request \u6a21\u5757\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u6784\u9020HTTP\u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u7684\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u8fc7\u7a0b\uff0c\u540c\u65f6\u5b83\u8fd8\u5e26\u6709\u5904\u7406authenticaton(\u6388\u6743\u9a8c\u8bc1)\uff0credirections(\u91cd\u5b9a\u5411)\uff0ccookies(\u6d4f\u89c8\u5668Cookies)\u4ee5\u53ca\u5176\u5b83\u5185\u5bb9\u3002 \u6211\u4eec\u6765\u611f\u53d7\u4e00\u4e0b\u5b83\u7684\u5f3a\u5927\u4e4b\u5904\uff0c\u4ee5Python\u5b98\u7f51\u4e3a\u4f8b\uff0c\u6211\u4eec\u6765\u628a\u8fd9\u4e2a\u7f51\u9875\u6293\u4e0b\u6765: import urllib.request # \u6253\u5f00\u7f51\u9875 response = urllib . request . urlopen ( https://www.python.org ) # \u5f97\u5230\u8fd4\u56de\u7684\u7f51\u9875\u5185\u5bb9 print ( response . read () . decode ( utf-8 )) # \u67e5\u770b\u8fd4\u56de\u7c7b\u578b\uff1a class http.client.HTTPResponse print ( type ( response )) urlopen \u8fd4\u56de\u4e00\u4e2a HTTPResponse \u5bf9\u8c61\uff0c\u8c03\u7528\u5bf9\u8c61\u7684 read() \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u8fd4\u56de\u7684\u7f51\u9875\u5185\u5bb9\uff0c\u8c03\u7528 status \u5c5e\u6027\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u7684\u72b6\u6001\u7801\uff0c\u5982200\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\uff0c404\u4ee3\u8868\u7f51\u9875\u672a\u627e\u5230\u7b49\uff0c\u8c03\u7528 getheaders() \u8fd4\u56de\u54cd\u5e94\u7684\u5934\u4fe1\u606f\u3002 response . status 200 response . getheaders () [( Server , nginx ), ( Content-Type , text/html; charset=utf-8 ), ( X-Frame-Options , SAMEORIGIN ), ( x-xss-protection , 1; mode=block ), ( X-Clacks-Overhead , GNU Terry Pratchett ), ( Via , 1.1 varnish ), ( Content-Length , 49419 ), ( Accept-Ranges , bytes ), ( Date , Fri, 19 Oct 2018 01:31:34 GMT ), ( Via , 1.1 varnish ), ( Age , 1228 ), ( Connection , close ), ( X-Served-By , cache-iad2144-IAD, cache-bur17551-BUR ), ( X-Cache , HIT, HIT ), ( X-Cache-Hits , 1, 1 ), ( X-Timer , S1539912694.426186,VS0,VE1 ), ( Vary , Cookie ), ( Strict-Transport-Security , max-age=63072000; includeSubDomains )] \u5982\u679c\u6211\u4eec\u60f3\u7ed9\u94fe\u63a5\u4f20\u9012\u4e00\u4e9b\u53c2\u6570\u8be5\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b urlopen() \u51fd\u6570\u7684API\uff1a urllib . request . urlopen ( url , data = None , [ timeout , ] * , cafile = None , capath = None , cadefault = False , context = None ) \u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u8bf4\u660e\u4e0b\u8fd9\u51e0\u4e2a\u53c2\u6570\u7684\u7528\u6cd5\u3002 data\u53c2\u6570 data \u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u8981\u6dfb\u52a0 data \uff0c\u5b83\u8981\u662f\u5b57\u8282\u6d41\u7f16\u7801\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u5373 bytes \u7c7b\u578b\uff0c\u53ef\u4ee5\u901a\u8fc7 bytes() \u65b9\u6cd5\u8fdb\u884c\u8f6c\u5316\uff0c\u53e6\u5916\u5982\u679c\u4f20\u9012\u4e86\u8fd9\u4e2a data \u53c2\u6570\uff0c\u5b83\u7684\u8bf7\u6c42\u65b9\u5f0f\u5c31\u4e0d\u518d\u662fGET\u65b9\u5f0f\u8bf7\u6c42\uff0c\u800c\u662fPOST\u3002 import urllib.parse import urllib.request # \u8f6c\u7801\u6210bytes(\u5b57\u8282\u6d41)\u7c7b\u578b data = bytes ( urllib . parse . urlencode ({ word : hello }), encoding = utf8 ) # \u8bf7\u6c42\u7ad9\u70b9 response = urllib . request . urlopen ( http://httpbin.org/post , data = data ) # \u8fd4\u56de\u7f51\u9875\u5185\u5bb9 print ( response . read ()) timeout\u53c2\u6570 timeout \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\u3002\u5982\u679c\u8bf7\u6c42\u8d85\u51fa\u4e86\u8bbe\u7f6e\u7684\u8fd9\u4e2a\u65f6\u95f4\u8fd8\u6ca1\u6709\u5f97\u5230\u54cd\u5e94\uff0c\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38 urllib.error.URLError \u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5c31\u4f1a\u4f7f\u7528\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4C timeout \u6765\u63a7\u5236\u4e00\u4e2a\u7f51\u9875\u5982\u679c\u957f\u65f6\u95f4\u672a\u54cd\u5e94\u5c31\u8df3\u8fc7\u5b83\u7684\u6293\u53d6\uff0c\u5229\u7528try-except\u8bed\u53e5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u6837\u7684\u64cd\u4f5c: try : response = urllib . request . urlopen ( http://httpbin.org/get , timeout = 0.1 ) except urllib . error . URLError as e : if isinstance ( e . reason , socket . timeout ): print ( TIME OUT ) Request urlopen() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u63a5\u6536 Request \u5bf9\u8c61\u3002 urlopen(url,...) \u53ef\u4ee5\u5b9e\u73b0\u6700\u57fa\u672c\u8bf7\u6c42\u7684\u53d1\u8d77\uff0c\u4f46\u8fd9\u51e0\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u5e76\u4e0d\u8db3\u4ee5\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u8bf7\u6c42\u4e2d\u9700\u8981\u52a0\u5165Headers\u7b49\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u66f4\u5f3a\u5927\u7684 Request \u7c7b\u6765\u6784\u5efa\u4e00\u4e2a\u8bf7\u6c42\u3002 Request \u7c7b\u7684\u6784\u9020\u65b9\u6cd5\uff1a class urllib . request . Request ( url , data = None , headers = {}, origin_req_host = None , unverifiable = False , method = None ) url \u53c2\u6570\u662fURL\u3002 data \u53c2\u6570\u5982\u679c\u8981\u4f20\u5fc5\u987b\u4f20bytes(\u5b57\u8282\u6d41)\u7c7b\u578b\u7684\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u53ef\u4ee5\u5148\u7528 urllib.parse \u6a21\u5757\u91cc\u7684 urlencode() \u7f16\u7801\u3002 headers \u53c2\u6570\u662fRequest Headers\uff0c\u5b57\u5178\u683c\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5728\u6784\u9020Request\u65f6\u901a\u8fc7 headers \u53c2\u6570\u76f4\u63a5\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Request\u5b9e\u4f8b\u7684 add_header() \u65b9\u6cd5\u6765\u6dfb\u52a0\u3002 origin_req_host \u53c2\u6570\u6307\u7684\u662f\u8bf7\u6c42\u65b9\u7684 host \u540d\u79f0\u6216\u8005 IP \u5730\u5740. unverifiable \u53c2\u6570\u6307\u7684\u662f\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u662f\u65e0\u6cd5\u9a8c\u8bc1\u7684\uff0c\u9ed8\u8ba4\u662fFalse method \u53c2\u6570\u5b83\u7528\u6765\u6307\u793a\u8bf7\u6c42\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982GET\uff0cPOST\uff0cPUT\u7b49\u7b49 \u4e0b\u9762\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50 from urllib import request , parse url = http://httpbin.org/post headers = { User-Agent : Mozilla/4.0 (compatible; MSIE 5.5; Windows NT) , Host : httpbin.org } dict = { name : Germey } data = bytes ( parse . urlencode ( dict ), encoding = utf8 ) req = request . Request ( url = url , data = data , headers = headers , method = POST ) response = request . urlopen ( req ) print ( response . read () . decode ( utf-8 )) \u9ad8\u7ea7\u7528\u6cd5 \u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u867d\u7136\u53ef\u4ee5\u6784\u9020 Request\uff0c\u4f46\u662f\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982 Cookies\u5904\u7406\uff0c\u4ee3\u7406\u8bbe\u7f6e\u7b49\u64cd\u4f5c\u6211\u4eec\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Handler\u3002 urllib.request \u6a21\u5757\u91cc\u7684 BaseHandler \u7c7b\uff0c\u5b83\u662f\u6240\u6709\u5176\u4ed6 Handler \u7684\u7236\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684 Handler \u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 default_open() \u3001 protocol_request() \u65b9\u6cd5\u7b49\u3002\u63a5\u4e0b\u6765\u5c31\u6709\u5404\u79cd Handler \u5b50\u7c7b\u7ee7\u627f\u8fd9\u4e2a BaseHandler \u7c7b\uff0c\u4e3e\u4f8b\u51e0\u4e2a\u5982\u4e0b\uff1a HTTPDefaultErrorHandler \u7528\u4e8e\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\uff0c\u9519\u8bef\u90fd\u4f1a\u629b\u51fa HTTPError \u7c7b\u578b\u7684\u5f02\u5e38\u3002 HTTPRedirectHandler \u7528\u4e8e\u5904\u7406\u91cd\u5b9a\u5411\u3002 HTTPCookieProcessor \u7528\u4e8e\u5904\u7406 Cookies\u3002 ProxyHandler \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7406\uff0c\u9ed8\u8ba4\u4ee3\u7406\u4e3a\u7a7a\u3002 HTTPPasswordMgr \u7528\u4e8e\u7ba1\u7406\u5bc6\u7801\uff0c\u5b83\u7ef4\u62a4\u4e86\u7528\u6237\u540d\u5bc6\u7801\u7684\u8868\u3002 HTTPBasicAuthHandler \u7528\u4e8e\u7ba1\u7406\u8ba4\u8bc1\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u6253\u5f00\u65f6\u9700\u8981\u8ba4\u8bc1\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u5b83\u6765\u89e3\u51b3\u8ba4\u8bc1\u95ee\u9898\u3002 1.2 \u5904\u7406\u5f02\u5e38 Urllib\u7684error\u6a21\u5757\u5b9a\u4e49\u4e86\u7531request\u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u3002\u5982\u679c\u51fa\u73b0\u4e86\u95ee\u9898\uff0crequest\u6a21\u5757\u4fbf\u4f1a\u629b\u51faerror\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5f02\u5e38\u3002 URLError URLError\u7c7b\u6765\u81eaUrllib\u5e93\u7684error\u6a21\u5757\uff0c\u5b83\u7ee7\u627f\u81eaOSError\u7c7b\uff0c\u662ferror\u5f02\u5e38\u6a21\u5757\u7684\u57fa\u7c7b\uff0c\u7531request\u6a21\u5757\u751f\u7684\u5f02\u5e38\u90fd\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u8fd9\u4e2a\u7c7b\u6765\u5904\u7406\u3002\u5b83\u5177\u6709\u4e00\u4e2a\u5c5e\u6027reason\uff0c\u5373\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 from urllib import request , error try : # \u6253\u5f00\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9 response = request . urlopen ( http://www.pythonfs.org ) except error . URLError as e : print ( e . reason ) HTTPError HTTPError\u662fURLError\u7684\u5b50\u7c7b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406HTTP\u8bf7\u6c42\u9519\u8bef\uff0c\u6bd4\u5982\u8ba4\u8bc1\u8bf7\u6c42\u5931\u8d25\u7b49\u7b49\u3002 \u5b83\u6709\u4e09\u4e2a\u5c5e\u6027: code\uff0c\u8fd4\u56de HTTP Status Code\uff0c\u5373\u72b6\u6001\u7801\uff0c\u6bd4\u5982 404 \u7f51\u9875\u4e0d\u5b58\u5728\uff0c500 \u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\u7b49\u7b49\u3002 reason\uff0c\u540c\u7236\u7c7b\u4e00\u6837\uff0c\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 headers\uff0c\u8fd4\u56de Request Headers\u3002 from urllib import request , error try : # \u6253\u5f00\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9 response = request . urlopen ( http://www.pythonfs.org ) except error . HTTPError as e : print ( e . reason , e . code , e . headers ) 1.3 \u89e3\u6790\u94fe\u63a5 1.4 \u5206\u6790Robots\u534f\u8bae Robots\u534f\u8bae Robots\u534f\u8bae\u4e5f\u88ab\u79f0\u4f5c\u722c\u866b\u534f\u8bae\u3001\u673a\u5668\u4eba\u534f\u8bae\uff0c\u5b83\u7684\u5168\u540d\u53eb\u505a\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6(Robots Exclusion Protocol)\uff0c\u7528\u6765\u544a\u8bc9\u722c\u866b\u548c\u641c\u7d22\u5f15\u64ce\u54ea\u4e9b\u9875\u9762\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u53eb\u505a robots.txt \u7684\u6587\u672c\u6587\u4ef6\uff0c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u4f8b\u5982 https://www.jd.com/robots.txt \u3002 \u5f53\u722c\u866b\u8bbf\u95ee\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u5b83\u9996\u5148\u4f1a\u68c0\u67e5\u4e0b\u8fd9\u4e2a\u7ad9\u70b9\u6839\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728robots.txt\u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\uff0c\u641c\u7d22\u722c\u866b\u4f1a\u6839\u636e\u5176\u4e2d\u5b9a\u4e49\u7684\u722c\u53d6\u8303\u56f4\u6765\u722c\u53d6\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\uff0c\u90a3\u4e48\u641c\u7d22\u722c\u866b\u4fbf\u4f1a\u8bbf\u95ee\u6240\u6709\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684\u9875\u9762\u3002 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u4eac\u4e1c\u7684robots.txt\u7684\u6837\u4f8b User-agent: * Disallow: /?* Disallow: /pop/*.html Disallow: /pinpai/*.html?* User-agent: EtaoSpider Disallow: / User-agent: HuihuiSpider Disallow: / User-agent: GwdangSpider Disallow: / User-agent: WochachaSpider Disallow: / \u6700\u7b80\u5355\u7684robots.txt\u53ea\u6709\u4e24\u6761\u89c4\u5219\uff1a User-agent\uff1a\u6307\u5b9a\u5bf9\u54ea\u4e9b\u722c\u866b\u751f\u6548 Disallow\uff1a\u6307\u5b9a\u8981\u5c4f\u853d\u7684\u7f51\u5740\u3002\u4ee5\u6b63\u659c\u7ebf(/)\u5f00\u5934\uff0c\u53ef\u4ee5\u5217\u51fa\u7279\u5b9a\u7684\u7f51\u5740\u6216\u6a21\u5f0f\u3002\u8981\u5c4f\u853d\u6574\u4e2a\u7f51\u7ad9\uff0c\u4f7f\u7528\u6b63\u659c\u7ebf\u5373\u53ef;\u8981\u5c4f\u853d\u67d0\u4e00\u76ee\u5f55\u4ee5\u53ca\u5176\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5728\u76ee\u5f55\u540d\u540e\u6dfb\u52a0\u6b63\u659c\u7ebf;\u8981\u5c4f\u853d\u67d0\u4e2a\u5177\u4f53\u7684\u7f51\u9875\uff0c\u5c31\u6307\u51fa\u8fd9\u4e2a\u7f51\u9875\u3002 robotparser robotparser\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\uff0c\u53eb\u505aRobotFileParser\u3002\u5b83\u53ef\u4ee5\u6839\u636e\u67d0\u7f51\u7ad9\u7684 robots.txt\u6587\u4ef6\u6765\u5224\u65ad\u4e00\u4e2a\u722c\u53d6\u722c\u866b\u662f\u5426\u6709\u6743\u9650\u6765\u722c\u53d6\u8fd9\u4e2a\u7f51\u9875\u3002 \u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u770b\u4e00\u4e0b\u5b83\u7684\u58f0\u660e urllib.robotparser.RobotFileParser(url= ) \u4f7f\u7528\u8fd9\u4e2a\u7c7b\u7684\u65f6\u5019\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6784\u9020\u65b9\u6cd5\u91cc\u4f20\u5165robots.txt\u7684\u94fe\u63a5\u5373\u53ef\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u58f0\u660e\u65f6\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u518d\u4f7f\u7528 set_url() \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e0b\u4e5f\u53ef\u4ee5\u3002 \u6709\u5e38\u7528\u7684\u51e0\u4e2a\u65b9\u6cd5\u5206\u522b\u4ecb\u7ecd\u4e00\u4e0b\uff1a set_url() \uff0c\u7528\u6765\u8bbe\u7f6e robots.txt \u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u5df2\u7ecf\u5728\u521b\u5efa RobotFileParser \u5bf9\u8c61\u65f6\u4f20\u5165\u4e86\u94fe\u63a5\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u518d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8bbe\u7f6e\u4e86\u3002 read() \uff0c\u8bfb\u53d6 robots.txt \u6587\u4ef6\u5e76\u8fdb\u884c\u5206\u6790\uff0c\u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u662f\u6267\u884c\u4e00\u4e2a\u8bfb\u53d6\u548c\u5206\u6790\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u90fd\u4f1a\u4e3a False\uff0c\u6240\u4ee5\u4e00\u5b9a\u8bb0\u5f97\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u662f\u6267\u884c\u4e86\u8bfb\u53d6\u64cd\u4f5c\u3002 parse() \uff0c\u7528\u6765\u89e3\u6790 robots.txt \u6587\u4ef6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f robots.txt \u67d0\u4e9b\u884c\u7684\u5185\u5bb9\uff0c\u5b83\u4f1a\u6309\u7167 robots.txt \u7684\u8bed\u6cd5\u89c4\u5219\u6765\u5206\u6790\u8fd9\u4e9b\u5185\u5bb9\u3002 can_fetch() \uff0c\u65b9\u6cd5\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f User-agent\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6293\u53d6\u7684 URL\uff0c\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u8be5\u641c\u7d22\u5f15\u64ce\u662f\u5426\u53ef\u4ee5\u6293\u53d6\u8fd9\u4e2a URL\uff0c\u8fd4\u56de\u7ed3\u679c\u662f True \u6216 False\u3002 mtime() \uff0c\u8fd4\u56de\u7684\u662f\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b9a\u671f\u68c0\u67e5\u6765\u6293\u53d6\u6700\u65b0\u7684 robots.txt\u3002 modified() \uff0c\u540c\u6837\u7684\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u5f88\u6709\u5e2e\u52a9\uff0c\u5c06\u5f53\u524d\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\u3002 \u4ee5\u4e0a\u662f\u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a from urllib.robotparser import RobotFileParser rp = RobotFileParser () rp . set_url ( https://www.jd.com/robots.txt ) rp . read () print ( rp . can_fetch ( * , https://miaosha.jd.com )) // True print ( rp . can_fetch ( GwdangSpider , https://miaosha.jd.com )) // False 2 \u4f7f\u7528Requests \u5728\u524d\u9762\u4e00\u8282\u6211\u4eec\u4e86\u89e3\u4e86Urllib\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u4f46\u662f\u5176\u4e2d\u786e\u5b9e\u6709\u4e0d\u65b9\u4fbf\u7684\u5730\u65b9\u3002\u6bd4\u5982\u5904\u7406\u7f51\u9875\u9a8c\u8bc1\u3001\u5904\u7406Cookies\u7b49\u7b49\uff0c\u9700\u8981\u5199Opener\u3001Handler\u6765\u8fdb\u884c\u5904\u7406\u3002\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u5c31\u6709\u4e86\u66f4\u4e3a\u5f3a\u5927\u7684\u5e93Requests\uff0c\u6709\u4e86\u5b83\uff0cCookies\u3001\u767b\u5f55\u9a8c\u8bc1\u3001\u4ee3\u7406\u8bbe\u7f6e\u7b49\u64cd\u4f5c\u90fd\u4e0d\u662f\u4e8b\u513f\u3002 Requests\u5b98\u65b9\u6587\u6863 GET\u8bf7\u6c42 \u9996\u5148\u8ba9\u6211\u4eec\u6765\u6784\u5efa\u4e00\u4e2a\u6700\u7b80\u5355\u7684 GET \u8bf7\u6c42\uff0c\u8bf7\u6c42\u7684\u94fe\u63a5\u4e3a\uff1ahttp://httpbin.org/get\uff0c\u5b83\u4f1a\u5224\u65ad\u5982\u679c\u5982\u679c\u662f GET \u8bf7\u6c42\u7684\u8bdd\uff0c\u4f1a\u8fd4\u56de\u54cd\u5e94\u7684 Request \u4fe1\u606f\u3002 import requests import re headers = { User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 } r = requests . get ( https://www.zhihu.com/explore , headers = headers ) pattern = re . compile ( explore-feed.*?question_link.*? (.*?) /a , re . S ) titles = re . findall ( pattern , r . text ) print ( titles ) POST\u8bf7\u6c42 import requests data = { name : germey , age : 22 } r = requests . post ( http://httpbin.org/post , data = data ) print ( r . text ) \u6587\u4ef6\u4e0a\u4f20 \u6211\u4eec\u77e5\u9053 Reqeuests \u53ef\u4ee5\u6a21\u62df\u63d0\u4ea4\u4e00\u4e9b\u6570\u636e\uff0c\u5047\u5982\u6709\u7684\u7f51\u7ad9\u9700\u8981\u6211\u4eec\u4e0a\u4f20\u6587\u4ef6\uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u4e0a\u4f20\uff0c\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a import requests files = { file : open ( favicon.ico , rb )} r = requests . post ( http://httpbin.org/post , files = files ) print ( r . text ) Cookie \u53ef\u4ee5\u76f4\u63a5\u7528 Cookies \u6765\u7ef4\u6301\u767b\u5f55\u72b6\u6001\u3002\u767b\u5f55\u77e5\u4e4e\uff0c\u5c06 Headers \u4e2d\u7684 Cookies \u590d\u5236\u4e0b\u6765\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 Headers \u91cc\u9762\uff0c\u53d1\u9001Request\u3002 import requests headers = { Cookie : \u77e5\u4e4e\u7684Cookie , Host : www.zhihu.com , User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 , } r = requests . get ( https://www.zhihu.com , headers = headers ) print ( r . text ) \u4f1a\u8bdd\u7ef4\u6301 \u5728Requests\u4e2d\uff0c\u5982\u679c\u76f4\u63a5\u5229\u7528 get() \u6216 post() \u7b49\u65b9\u6cd5\u7684\u786e\u53ef\u4ee5\u505a\u5230\u6a21\u62df\u7f51\u9875\u7684\u8bf7\u6c42\u3002\u4f46\u662f\u8fd9\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u4e8e\u4e0d\u540c\u7684\u4f1a\u8bdd\uff0c\u5373\u4e0d\u540c\u7684Session\uff0c\u4e5f\u5c31\u662f\u8bf4\u76f8\u5f53\u4e8e\u4f60\u7528\u4e86\u4e24\u4e2a\u6d4f\u89c8\u5668\u6253\u5f00\u4e86\u4e0d\u540c\u7684\u9875\u9762\u3002 \u8bbe\u60f3\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff0c\u6211\u4eec\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5229\u7528\u4e86 post() \u65b9\u6cd5\u767b\u5f55\u4e86\u67d0\u4e2a\u7f51\u7ad9\uff0c\u7b2c\u4e8c\u6b21\u60f3\u83b7\u53d6\u6210\u529f\u767b\u5f55\u540e\u7684\u81ea\u5df1\u7684\u4e2a\u4eba\u4fe1\u606f\uff0c\u4f60\u53c8\u7528\u4e86\u4e00\u6b21 get() \u65b9\u6cd5\u53bb\u8bf7\u6c42\u4e2a\u4eba\u4fe1\u606f\u9875\u9762\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u76f8\u5f53\u4e8e\u6253\u5f00\u4e86\u4e24\u4e2a\u6d4f\u89c8\u5668\uff0c\u662f\u4e24\u4e2a\u5b8c\u5168\u4e0d\u76f8\u5173\u7684\u4f1a\u8bdd\uff0c\u80fd\u6210\u529f\u83b7\u53d6\u4e2a\u4eba\u4fe1\u606f\u5417\uff1f\u90a3\u5f53\u7136\u4e0d\u80fd\u3002 \u5176\u5b9e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e3b\u8981\u65b9\u6cd5\u5c31\u662f\u7ef4\u6301\u540c\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u6d4f\u89c8\u5668\u9009\u9879\u5361\u800c\u4e0d\u662f\u65b0\u5f00\u4e00\u4e2a\u6d4f\u89c8\u5668\u3002\u4f46\u662f\u6211\u53c8\u4e0d\u60f3\u6bcf\u6b21\u8bbe\u7f6eCookies\uff0c\u90a3\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u65f6\u5019\u5c31\u6709\u4e86\u65b0\u7684\u5229\u5668Session\u5bf9\u8c61\u3002 \u4ee3\u7406\u8bbe\u7f6e \u5bf9\u4e8e\u67d0\u4e9b\u7f51\u7ad9\uff0c\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8bf7\u6c42\u51e0\u6b21\uff0c\u80fd\u6b63\u5e38\u83b7\u53d6\u5185\u5bb9\u3002\u4f46\u662f\u4e00\u65e6\u5f00\u59cb\u5927\u89c4\u6a21\u722c\u53d6\uff0c\u5bf9\u4e8e\u5927\u89c4\u6a21\u4e14\u9891\u7e41\u7684\u8bf7\u6c42\uff0c\u7f51\u7ad9\u53ef\u80fd\u4f1a\u76f4\u63a5\u767b\u5f55\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u7801\uff0c\u751a\u81f3\u76f4\u63a5\u628aIP\u7ed9\u5c01\u7981\u6389\u3002\u90a3\u4e48\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u8bbe\u7f6e\u4ee3\u7406\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728 Requests \u4e2d\u9700\u8981\u7528\u5230 proxies \u8fd9\u4e2a\u53c2\u6570\u3002 import requests proxies = { http : http://10.10.1.10:3128 , https : http://10.10.1.10:1080 , } requests . get ( https://www.taobao.com , proxies = proxies ) 3 \u6b63\u5219\u8868\u8fbe\u5f0f 4 Example: \u6293\u53d6\u732b\u773c\u7535\u5f71\u6392\u884c","title":"Chapter 3: \u57fa\u672c\u5e93\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch3/#python3-3","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 3 \u57fa\u672c\u5e93\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch3/#1-urllib","text":"Urllib\u5e93\u662fPython\u5185\u7f6e\u7684HTTP\u8bf7\u6c42\u5e93( \u5b98\u65b9\u6587\u6863\u94fe\u63a5 )\uff0c \u5b83\u5305\u542b\u56db\u4e2a\u6a21\u5757\uff1a request \u6a21\u5757\uff0c\u6700\u57fa\u672c\u7684HTTP\u8bf7\u6c42\u6a21\u5757\uff0c\u53ef\u4ee5\u7528\u6765\u6a21\u62df\u53d1\u9001\u8bf7\u6c42\uff0c\u5c31\u50cf\u5728\u6d4f\u89c8\u5668\u91cc\u8f93\u5165\u7f51\u5740\u7136\u540e\u6572\u51fb\u56de\u8f66\u4e00\u6837\uff0c\u53ea\u9700\u8981\u7ed9\u5e93\u65b9\u6cd5\u4f20\u5165URL\u8fd8\u6709\u989d\u5916\u7684\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u6a21\u62df\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u4e86\u3002 error \u6a21\u5757\u5373\u5f02\u5e38\u5904\u7406\u6a21\u5757\uff0c\u5982\u679c\u51fa\u73b0\u8bf7\u6c42\u9519\u8bef\uff0c\u6211\u4eec\u53ef\u4ee5\u6355\u83b7\u8fd9\u4e9b\u5f02\u5e38\uff0c\u7136\u540e\u8fdb\u884c\u91cd\u8bd5\u6216\u5176\u4ed6\u64cd\u4f5c\u4fdd\u8bc1\u7a0b\u5e8f\u4e0d\u4f1a\u610f\u5916\u7ec8\u6b62\u3002 parse \u6a21\u5757\uff0c\u7528\u6765\u89e3\u6790URL\u3002 robotparser \u6a21\u5757\uff0c\u7528\u6765\u89e3\u6790robots.txt\u6587\u4ef6\u3002","title":"1 \u4f7f\u7528Urllib"},{"location":"bigdata/crawler/ch3/#11","text":"\u4f7f\u7528Urllib\u7684 request\u6a21\u5757 \u53ef\u4ee5\u65b9\u4fbf\u5730\u5b9e\u73b0Request\u7684\u53d1\u9001\u5e76\u5f97\u5230Response\u3002 urlopen() urllib.request \u6a21\u5757\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684\u6784\u9020HTTP\u8bf7\u6c42\u7684\u65b9\u6cd5\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u7684\u4e00\u4e2a\u8bf7\u6c42\u53d1\u8d77\u8fc7\u7a0b\uff0c\u540c\u65f6\u5b83\u8fd8\u5e26\u6709\u5904\u7406authenticaton(\u6388\u6743\u9a8c\u8bc1)\uff0credirections(\u91cd\u5b9a\u5411)\uff0ccookies(\u6d4f\u89c8\u5668Cookies)\u4ee5\u53ca\u5176\u5b83\u5185\u5bb9\u3002 \u6211\u4eec\u6765\u611f\u53d7\u4e00\u4e0b\u5b83\u7684\u5f3a\u5927\u4e4b\u5904\uff0c\u4ee5Python\u5b98\u7f51\u4e3a\u4f8b\uff0c\u6211\u4eec\u6765\u628a\u8fd9\u4e2a\u7f51\u9875\u6293\u4e0b\u6765: import urllib.request # \u6253\u5f00\u7f51\u9875 response = urllib . request . urlopen ( https://www.python.org ) # \u5f97\u5230\u8fd4\u56de\u7684\u7f51\u9875\u5185\u5bb9 print ( response . read () . decode ( utf-8 )) # \u67e5\u770b\u8fd4\u56de\u7c7b\u578b\uff1a class http.client.HTTPResponse print ( type ( response )) urlopen \u8fd4\u56de\u4e00\u4e2a HTTPResponse \u5bf9\u8c61\uff0c\u8c03\u7528\u5bf9\u8c61\u7684 read() \u65b9\u6cd5\u53ef\u4ee5\u5f97\u5230\u8fd4\u56de\u7684\u7f51\u9875\u5185\u5bb9\uff0c\u8c03\u7528 status \u5c5e\u6027\u5c31\u53ef\u4ee5\u5f97\u5230\u8fd4\u56de\u7ed3\u679c\u7684\u72b6\u6001\u7801\uff0c\u5982200\u4ee3\u8868\u8bf7\u6c42\u6210\u529f\uff0c404\u4ee3\u8868\u7f51\u9875\u672a\u627e\u5230\u7b49\uff0c\u8c03\u7528 getheaders() \u8fd4\u56de\u54cd\u5e94\u7684\u5934\u4fe1\u606f\u3002 response . status 200 response . getheaders () [( Server , nginx ), ( Content-Type , text/html; charset=utf-8 ), ( X-Frame-Options , SAMEORIGIN ), ( x-xss-protection , 1; mode=block ), ( X-Clacks-Overhead , GNU Terry Pratchett ), ( Via , 1.1 varnish ), ( Content-Length , 49419 ), ( Accept-Ranges , bytes ), ( Date , Fri, 19 Oct 2018 01:31:34 GMT ), ( Via , 1.1 varnish ), ( Age , 1228 ), ( Connection , close ), ( X-Served-By , cache-iad2144-IAD, cache-bur17551-BUR ), ( X-Cache , HIT, HIT ), ( X-Cache-Hits , 1, 1 ), ( X-Timer , S1539912694.426186,VS0,VE1 ), ( Vary , Cookie ), ( Strict-Transport-Security , max-age=63072000; includeSubDomains )] \u5982\u679c\u6211\u4eec\u60f3\u7ed9\u94fe\u63a5\u4f20\u9012\u4e00\u4e9b\u53c2\u6570\u8be5\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u6211\u4eec\u9996\u5148\u770b\u4e00\u4e0b urlopen() \u51fd\u6570\u7684API\uff1a urllib . request . urlopen ( url , data = None , [ timeout , ] * , cafile = None , capath = None , cadefault = False , context = None ) \u4e0b\u9762\u6211\u4eec\u8be6\u7ec6\u8bf4\u660e\u4e0b\u8fd9\u51e0\u4e2a\u53c2\u6570\u7684\u7528\u6cd5\u3002 data\u53c2\u6570 data \u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u8981\u6dfb\u52a0 data \uff0c\u5b83\u8981\u662f\u5b57\u8282\u6d41\u7f16\u7801\u683c\u5f0f\u7684\u5185\u5bb9\uff0c\u5373 bytes \u7c7b\u578b\uff0c\u53ef\u4ee5\u901a\u8fc7 bytes() \u65b9\u6cd5\u8fdb\u884c\u8f6c\u5316\uff0c\u53e6\u5916\u5982\u679c\u4f20\u9012\u4e86\u8fd9\u4e2a data \u53c2\u6570\uff0c\u5b83\u7684\u8bf7\u6c42\u65b9\u5f0f\u5c31\u4e0d\u518d\u662fGET\u65b9\u5f0f\u8bf7\u6c42\uff0c\u800c\u662fPOST\u3002 import urllib.parse import urllib.request # \u8f6c\u7801\u6210bytes(\u5b57\u8282\u6d41)\u7c7b\u578b data = bytes ( urllib . parse . urlencode ({ word : hello }), encoding = utf8 ) # \u8bf7\u6c42\u7ad9\u70b9 response = urllib . request . urlopen ( http://httpbin.org/post , data = data ) # \u8fd4\u56de\u7f51\u9875\u5185\u5bb9 print ( response . read ()) timeout\u53c2\u6570 timeout \u53c2\u6570\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u4e3a\u79d2\u3002\u5982\u679c\u8bf7\u6c42\u8d85\u51fa\u4e86\u8bbe\u7f6e\u7684\u8fd9\u4e2a\u65f6\u95f4\u8fd8\u6ca1\u6709\u5f97\u5230\u54cd\u5e94\uff0c\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38 urllib.error.URLError \u3002\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5c31\u4f1a\u4f7f\u7528\u5168\u5c40\u9ed8\u8ba4\u65f6\u95f4\u3002\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u8d85\u65f6\u65f6\u95f4C timeout \u6765\u63a7\u5236\u4e00\u4e2a\u7f51\u9875\u5982\u679c\u957f\u65f6\u95f4\u672a\u54cd\u5e94\u5c31\u8df3\u8fc7\u5b83\u7684\u6293\u53d6\uff0c\u5229\u7528try-except\u8bed\u53e5\u5c31\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u6837\u7684\u64cd\u4f5c: try : response = urllib . request . urlopen ( http://httpbin.org/get , timeout = 0.1 ) except urllib . error . URLError as e : if isinstance ( e . reason , socket . timeout ): print ( TIME OUT ) Request urlopen() \u65b9\u6cd5\u4e5f\u53ef\u4ee5\u63a5\u6536 Request \u5bf9\u8c61\u3002 urlopen(url,...) \u53ef\u4ee5\u5b9e\u73b0\u6700\u57fa\u672c\u8bf7\u6c42\u7684\u53d1\u8d77\uff0c\u4f46\u8fd9\u51e0\u4e2a\u7b80\u5355\u7684\u53c2\u6570\u5e76\u4e0d\u8db3\u4ee5\u6784\u5efa\u4e00\u4e2a\u5b8c\u6574\u7684\u8bf7\u6c42\uff0c\u5982\u679c\u8bf7\u6c42\u4e2d\u9700\u8981\u52a0\u5165Headers\u7b49\u4fe1\u606f\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u66f4\u5f3a\u5927\u7684 Request \u7c7b\u6765\u6784\u5efa\u4e00\u4e2a\u8bf7\u6c42\u3002 Request \u7c7b\u7684\u6784\u9020\u65b9\u6cd5\uff1a class urllib . request . Request ( url , data = None , headers = {}, origin_req_host = None , unverifiable = False , method = None ) url \u53c2\u6570\u662fURL\u3002 data \u53c2\u6570\u5982\u679c\u8981\u4f20\u5fc5\u987b\u4f20bytes(\u5b57\u8282\u6d41)\u7c7b\u578b\u7684\uff0c\u5982\u679c\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u53ef\u4ee5\u5148\u7528 urllib.parse \u6a21\u5757\u91cc\u7684 urlencode() \u7f16\u7801\u3002 headers \u53c2\u6570\u662fRequest Headers\uff0c\u5b57\u5178\u683c\u5f0f\uff0c\u4f60\u53ef\u4ee5\u5728\u6784\u9020Request\u65f6\u901a\u8fc7 headers \u53c2\u6570\u76f4\u63a5\u6784\u9020\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Request\u5b9e\u4f8b\u7684 add_header() \u65b9\u6cd5\u6765\u6dfb\u52a0\u3002 origin_req_host \u53c2\u6570\u6307\u7684\u662f\u8bf7\u6c42\u65b9\u7684 host \u540d\u79f0\u6216\u8005 IP \u5730\u5740. unverifiable \u53c2\u6570\u6307\u7684\u662f\u8fd9\u4e2a\u8bf7\u6c42\u662f\u5426\u662f\u65e0\u6cd5\u9a8c\u8bc1\u7684\uff0c\u9ed8\u8ba4\u662fFalse method \u53c2\u6570\u5b83\u7528\u6765\u6307\u793a\u8bf7\u6c42\u4f7f\u7528\u7684\u65b9\u6cd5\uff0c\u6bd4\u5982GET\uff0cPOST\uff0cPUT\u7b49\u7b49 \u4e0b\u9762\u770b\u4e00\u4e2a\u5177\u4f53\u7684\u4f8b\u5b50 from urllib import request , parse url = http://httpbin.org/post headers = { User-Agent : Mozilla/4.0 (compatible; MSIE 5.5; Windows NT) , Host : httpbin.org } dict = { name : Germey } data = bytes ( parse . urlencode ( dict ), encoding = utf8 ) req = request . Request ( url = url , data = data , headers = headers , method = POST ) response = request . urlopen ( req ) print ( response . read () . decode ( utf-8 )) \u9ad8\u7ea7\u7528\u6cd5 \u6709\u6ca1\u6709\u53d1\u73b0\uff0c\u5728\u4e0a\u9762\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u867d\u7136\u53ef\u4ee5\u6784\u9020 Request\uff0c\u4f46\u662f\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u64cd\u4f5c\uff0c\u6bd4\u5982 Cookies\u5904\u7406\uff0c\u4ee3\u7406\u8bbe\u7f6e\u7b49\u64cd\u4f5c\u6211\u4eec\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528Handler\u3002 urllib.request \u6a21\u5757\u91cc\u7684 BaseHandler \u7c7b\uff0c\u5b83\u662f\u6240\u6709\u5176\u4ed6 Handler \u7684\u7236\u7c7b\uff0c\u5b83\u63d0\u4f9b\u4e86\u6700\u57fa\u672c\u7684 Handler \u7684\u65b9\u6cd5\uff0c\u4f8b\u5982 default_open() \u3001 protocol_request() \u65b9\u6cd5\u7b49\u3002\u63a5\u4e0b\u6765\u5c31\u6709\u5404\u79cd Handler \u5b50\u7c7b\u7ee7\u627f\u8fd9\u4e2a BaseHandler \u7c7b\uff0c\u4e3e\u4f8b\u51e0\u4e2a\u5982\u4e0b\uff1a HTTPDefaultErrorHandler \u7528\u4e8e\u5904\u7406 HTTP \u54cd\u5e94\u9519\u8bef\uff0c\u9519\u8bef\u90fd\u4f1a\u629b\u51fa HTTPError \u7c7b\u578b\u7684\u5f02\u5e38\u3002 HTTPRedirectHandler \u7528\u4e8e\u5904\u7406\u91cd\u5b9a\u5411\u3002 HTTPCookieProcessor \u7528\u4e8e\u5904\u7406 Cookies\u3002 ProxyHandler \u7528\u4e8e\u8bbe\u7f6e\u4ee3\u7406\uff0c\u9ed8\u8ba4\u4ee3\u7406\u4e3a\u7a7a\u3002 HTTPPasswordMgr \u7528\u4e8e\u7ba1\u7406\u5bc6\u7801\uff0c\u5b83\u7ef4\u62a4\u4e86\u7528\u6237\u540d\u5bc6\u7801\u7684\u8868\u3002 HTTPBasicAuthHandler \u7528\u4e8e\u7ba1\u7406\u8ba4\u8bc1\uff0c\u5982\u679c\u4e00\u4e2a\u94fe\u63a5\u6253\u5f00\u65f6\u9700\u8981\u8ba4\u8bc1\uff0c\u90a3\u4e48\u53ef\u4ee5\u7528\u5b83\u6765\u89e3\u51b3\u8ba4\u8bc1\u95ee\u9898\u3002","title":"1.1 \u53d1\u9001\u8bf7\u6c42"},{"location":"bigdata/crawler/ch3/#12","text":"Urllib\u7684error\u6a21\u5757\u5b9a\u4e49\u4e86\u7531request\u6a21\u5757\u4ea7\u751f\u7684\u5f02\u5e38\u3002\u5982\u679c\u51fa\u73b0\u4e86\u95ee\u9898\uff0crequest\u6a21\u5757\u4fbf\u4f1a\u629b\u51faerror\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u5f02\u5e38\u3002 URLError URLError\u7c7b\u6765\u81eaUrllib\u5e93\u7684error\u6a21\u5757\uff0c\u5b83\u7ee7\u627f\u81eaOSError\u7c7b\uff0c\u662ferror\u5f02\u5e38\u6a21\u5757\u7684\u57fa\u7c7b\uff0c\u7531request\u6a21\u5757\u751f\u7684\u5f02\u5e38\u90fd\u53ef\u4ee5\u901a\u8fc7\u6355\u83b7\u8fd9\u4e2a\u7c7b\u6765\u5904\u7406\u3002\u5b83\u5177\u6709\u4e00\u4e2a\u5c5e\u6027reason\uff0c\u5373\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 from urllib import request , error try : # \u6253\u5f00\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9 response = request . urlopen ( http://www.pythonfs.org ) except error . URLError as e : print ( e . reason ) HTTPError HTTPError\u662fURLError\u7684\u5b50\u7c7b\uff0c\u4e13\u95e8\u7528\u6765\u5904\u7406HTTP\u8bf7\u6c42\u9519\u8bef\uff0c\u6bd4\u5982\u8ba4\u8bc1\u8bf7\u6c42\u5931\u8d25\u7b49\u7b49\u3002 \u5b83\u6709\u4e09\u4e2a\u5c5e\u6027: code\uff0c\u8fd4\u56de HTTP Status Code\uff0c\u5373\u72b6\u6001\u7801\uff0c\u6bd4\u5982 404 \u7f51\u9875\u4e0d\u5b58\u5728\uff0c500 \u670d\u52a1\u5668\u5185\u90e8\u9519\u8bef\u7b49\u7b49\u3002 reason\uff0c\u540c\u7236\u7c7b\u4e00\u6837\uff0c\u8fd4\u56de\u9519\u8bef\u7684\u539f\u56e0\u3002 headers\uff0c\u8fd4\u56de Request Headers\u3002 from urllib import request , error try : # \u6253\u5f00\u4e0d\u5b58\u5728\u7684\u7f51\u7ad9 response = request . urlopen ( http://www.pythonfs.org ) except error . HTTPError as e : print ( e . reason , e . code , e . headers )","title":"1.2 \u5904\u7406\u5f02\u5e38"},{"location":"bigdata/crawler/ch3/#13","text":"","title":"1.3 \u89e3\u6790\u94fe\u63a5"},{"location":"bigdata/crawler/ch3/#14-robots","text":"Robots\u534f\u8bae Robots\u534f\u8bae\u4e5f\u88ab\u79f0\u4f5c\u722c\u866b\u534f\u8bae\u3001\u673a\u5668\u4eba\u534f\u8bae\uff0c\u5b83\u7684\u5168\u540d\u53eb\u505a\u7f51\u7edc\u722c\u866b\u6392\u9664\u6807\u51c6(Robots Exclusion Protocol)\uff0c\u7528\u6765\u544a\u8bc9\u722c\u866b\u548c\u641c\u7d22\u5f15\u64ce\u54ea\u4e9b\u9875\u9762\u53ef\u4ee5\u6293\u53d6\uff0c\u54ea\u4e9b\u4e0d\u53ef\u4ee5\u6293\u53d6\u3002\u5b83\u901a\u5e38\u662f\u4e00\u4e2a\u53eb\u505a robots.txt \u7684\u6587\u672c\u6587\u4ef6\uff0c\u653e\u5728\u7f51\u7ad9\u7684\u6839\u76ee\u5f55\u4e0b\uff0c\u4f8b\u5982 https://www.jd.com/robots.txt \u3002 \u5f53\u722c\u866b\u8bbf\u95ee\u4e00\u4e2a\u7ad9\u70b9\u65f6\uff0c\u5b83\u9996\u5148\u4f1a\u68c0\u67e5\u4e0b\u8fd9\u4e2a\u7ad9\u70b9\u6839\u76ee\u5f55\u4e0b\u662f\u5426\u5b58\u5728robots.txt\u6587\u4ef6\uff0c\u5982\u679c\u5b58\u5728\uff0c\u641c\u7d22\u722c\u866b\u4f1a\u6839\u636e\u5176\u4e2d\u5b9a\u4e49\u7684\u722c\u53d6\u8303\u56f4\u6765\u722c\u53d6\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u8fd9\u4e2a\u6587\u4ef6\uff0c\u90a3\u4e48\u641c\u7d22\u722c\u866b\u4fbf\u4f1a\u8bbf\u95ee\u6240\u6709\u53ef\u76f4\u63a5\u8bbf\u95ee\u7684\u9875\u9762\u3002 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0b\u4eac\u4e1c\u7684robots.txt\u7684\u6837\u4f8b User-agent: * Disallow: /?* Disallow: /pop/*.html Disallow: /pinpai/*.html?* User-agent: EtaoSpider Disallow: / User-agent: HuihuiSpider Disallow: / User-agent: GwdangSpider Disallow: / User-agent: WochachaSpider Disallow: / \u6700\u7b80\u5355\u7684robots.txt\u53ea\u6709\u4e24\u6761\u89c4\u5219\uff1a User-agent\uff1a\u6307\u5b9a\u5bf9\u54ea\u4e9b\u722c\u866b\u751f\u6548 Disallow\uff1a\u6307\u5b9a\u8981\u5c4f\u853d\u7684\u7f51\u5740\u3002\u4ee5\u6b63\u659c\u7ebf(/)\u5f00\u5934\uff0c\u53ef\u4ee5\u5217\u51fa\u7279\u5b9a\u7684\u7f51\u5740\u6216\u6a21\u5f0f\u3002\u8981\u5c4f\u853d\u6574\u4e2a\u7f51\u7ad9\uff0c\u4f7f\u7528\u6b63\u659c\u7ebf\u5373\u53ef;\u8981\u5c4f\u853d\u67d0\u4e00\u76ee\u5f55\u4ee5\u53ca\u5176\u4e2d\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5728\u76ee\u5f55\u540d\u540e\u6dfb\u52a0\u6b63\u659c\u7ebf;\u8981\u5c4f\u853d\u67d0\u4e2a\u5177\u4f53\u7684\u7f51\u9875\uff0c\u5c31\u6307\u51fa\u8fd9\u4e2a\u7f51\u9875\u3002 robotparser robotparser\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7c7b\uff0c\u53eb\u505aRobotFileParser\u3002\u5b83\u53ef\u4ee5\u6839\u636e\u67d0\u7f51\u7ad9\u7684 robots.txt\u6587\u4ef6\u6765\u5224\u65ad\u4e00\u4e2a\u722c\u53d6\u722c\u866b\u662f\u5426\u6709\u6743\u9650\u6765\u722c\u53d6\u8fd9\u4e2a\u7f51\u9875\u3002 \u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u9996\u5148\u770b\u4e00\u4e0b\u5b83\u7684\u58f0\u660e urllib.robotparser.RobotFileParser(url= ) \u4f7f\u7528\u8fd9\u4e2a\u7c7b\u7684\u65f6\u5019\u975e\u5e38\u7b80\u5355\uff0c\u53ea\u9700\u8981\u5728\u6784\u9020\u65b9\u6cd5\u91cc\u4f20\u5165robots.txt\u7684\u94fe\u63a5\u5373\u53ef\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u58f0\u660e\u65f6\u4e0d\u4f20\u5165\uff0c\u9ed8\u8ba4\u4e3a\u7a7a\uff0c\u518d\u4f7f\u7528 set_url() \u65b9\u6cd5\u8bbe\u7f6e\u4e00\u4e0b\u4e5f\u53ef\u4ee5\u3002 \u6709\u5e38\u7528\u7684\u51e0\u4e2a\u65b9\u6cd5\u5206\u522b\u4ecb\u7ecd\u4e00\u4e0b\uff1a set_url() \uff0c\u7528\u6765\u8bbe\u7f6e robots.txt \u6587\u4ef6\u7684\u94fe\u63a5\u3002\u5982\u679c\u5df2\u7ecf\u5728\u521b\u5efa RobotFileParser \u5bf9\u8c61\u65f6\u4f20\u5165\u4e86\u94fe\u63a5\uff0c\u90a3\u5c31\u4e0d\u9700\u8981\u518d\u4f7f\u7528\u8fd9\u4e2a\u65b9\u6cd5\u8bbe\u7f6e\u4e86\u3002 read() \uff0c\u8bfb\u53d6 robots.txt \u6587\u4ef6\u5e76\u8fdb\u884c\u5206\u6790\uff0c\u6ce8\u610f\u8fd9\u4e2a\u51fd\u6570\u662f\u6267\u884c\u4e00\u4e2a\u8bfb\u53d6\u548c\u5206\u6790\u64cd\u4f5c\uff0c\u5982\u679c\u4e0d\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u63a5\u4e0b\u6765\u7684\u5224\u65ad\u90fd\u4f1a\u4e3a False\uff0c\u6240\u4ee5\u4e00\u5b9a\u8bb0\u5f97\u8c03\u7528\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u8fd4\u56de\u4efb\u4f55\u5185\u5bb9\uff0c\u4f46\u662f\u6267\u884c\u4e86\u8bfb\u53d6\u64cd\u4f5c\u3002 parse() \uff0c\u7528\u6765\u89e3\u6790 robots.txt \u6587\u4ef6\uff0c\u4f20\u5165\u7684\u53c2\u6570\u662f robots.txt \u67d0\u4e9b\u884c\u7684\u5185\u5bb9\uff0c\u5b83\u4f1a\u6309\u7167 robots.txt \u7684\u8bed\u6cd5\u89c4\u5219\u6765\u5206\u6790\u8fd9\u4e9b\u5185\u5bb9\u3002 can_fetch() \uff0c\u65b9\u6cd5\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f User-agent\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8981\u6293\u53d6\u7684 URL\uff0c\u8fd4\u56de\u7684\u5185\u5bb9\u662f\u8be5\u641c\u7d22\u5f15\u64ce\u662f\u5426\u53ef\u4ee5\u6293\u53d6\u8fd9\u4e2a URL\uff0c\u8fd4\u56de\u7ed3\u679c\u662f True \u6216 False\u3002 mtime() \uff0c\u8fd4\u56de\u7684\u662f\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\uff0c\u8fd9\u4e2a\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u662f\u5f88\u6709\u5fc5\u8981\u7684\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u5b9a\u671f\u68c0\u67e5\u6765\u6293\u53d6\u6700\u65b0\u7684 robots.txt\u3002 modified() \uff0c\u540c\u6837\u7684\u5bf9\u4e8e\u957f\u65f6\u95f4\u5206\u6790\u548c\u6293\u53d6\u7684\u641c\u7d22\u722c\u866b\u5f88\u6709\u5e2e\u52a9\uff0c\u5c06\u5f53\u524d\u65f6\u95f4\u8bbe\u7f6e\u4e3a\u4e0a\u6b21\u6293\u53d6\u548c\u5206\u6790 robots.txt \u7684\u65f6\u95f4\u3002 \u4ee5\u4e0a\u662f\u8fd9\u4e2a\u7c7b\u63d0\u4f9b\u7684\u6240\u6709\u65b9\u6cd5\uff0c\u4e0b\u9762\u6211\u4eec\u7528\u5b9e\u4f8b\u6765\u611f\u53d7\u4e00\u4e0b\uff1a from urllib.robotparser import RobotFileParser rp = RobotFileParser () rp . set_url ( https://www.jd.com/robots.txt ) rp . read () print ( rp . can_fetch ( * , https://miaosha.jd.com )) // True print ( rp . can_fetch ( GwdangSpider , https://miaosha.jd.com )) // False","title":"1.4 \u5206\u6790Robots\u534f\u8bae"},{"location":"bigdata/crawler/ch3/#2-requests","text":"\u5728\u524d\u9762\u4e00\u8282\u6211\u4eec\u4e86\u89e3\u4e86Urllib\u7684\u57fa\u672c\u7528\u6cd5\uff0c\u4f46\u662f\u5176\u4e2d\u786e\u5b9e\u6709\u4e0d\u65b9\u4fbf\u7684\u5730\u65b9\u3002\u6bd4\u5982\u5904\u7406\u7f51\u9875\u9a8c\u8bc1\u3001\u5904\u7406Cookies\u7b49\u7b49\uff0c\u9700\u8981\u5199Opener\u3001Handler\u6765\u8fdb\u884c\u5904\u7406\u3002\u4e3a\u4e86\u66f4\u52a0\u65b9\u4fbf\u5730\u5b9e\u73b0\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u5728\u8fd9\u91cc\u5c31\u6709\u4e86\u66f4\u4e3a\u5f3a\u5927\u7684\u5e93Requests\uff0c\u6709\u4e86\u5b83\uff0cCookies\u3001\u767b\u5f55\u9a8c\u8bc1\u3001\u4ee3\u7406\u8bbe\u7f6e\u7b49\u64cd\u4f5c\u90fd\u4e0d\u662f\u4e8b\u513f\u3002 Requests\u5b98\u65b9\u6587\u6863","title":"2 \u4f7f\u7528Requests"},{"location":"bigdata/crawler/ch3/#get","text":"\u9996\u5148\u8ba9\u6211\u4eec\u6765\u6784\u5efa\u4e00\u4e2a\u6700\u7b80\u5355\u7684 GET \u8bf7\u6c42\uff0c\u8bf7\u6c42\u7684\u94fe\u63a5\u4e3a\uff1ahttp://httpbin.org/get\uff0c\u5b83\u4f1a\u5224\u65ad\u5982\u679c\u5982\u679c\u662f GET \u8bf7\u6c42\u7684\u8bdd\uff0c\u4f1a\u8fd4\u56de\u54cd\u5e94\u7684 Request \u4fe1\u606f\u3002 import requests import re headers = { User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36 } r = requests . get ( https://www.zhihu.com/explore , headers = headers ) pattern = re . compile ( explore-feed.*?question_link.*? (.*?) /a , re . S ) titles = re . findall ( pattern , r . text ) print ( titles )","title":"GET\u8bf7\u6c42"},{"location":"bigdata/crawler/ch3/#post","text":"import requests data = { name : germey , age : 22 } r = requests . post ( http://httpbin.org/post , data = data ) print ( r . text )","title":"POST\u8bf7\u6c42"},{"location":"bigdata/crawler/ch3/#_1","text":"\u6211\u4eec\u77e5\u9053 Reqeuests \u53ef\u4ee5\u6a21\u62df\u63d0\u4ea4\u4e00\u4e9b\u6570\u636e\uff0c\u5047\u5982\u6709\u7684\u7f51\u7ad9\u9700\u8981\u6211\u4eec\u4e0a\u4f20\u6587\u4ef6\uff0c\u6211\u4eec\u540c\u6837\u53ef\u4ee5\u5229\u7528\u5b83\u6765\u4e0a\u4f20\uff0c\u5b9e\u73b0\u975e\u5e38\u7b80\u5355\uff0c\u5b9e\u4f8b\u5982\u4e0b\uff1a import requests files = { file : open ( favicon.ico , rb )} r = requests . post ( http://httpbin.org/post , files = files ) print ( r . text )","title":"\u6587\u4ef6\u4e0a\u4f20"},{"location":"bigdata/crawler/ch3/#cookie","text":"\u53ef\u4ee5\u76f4\u63a5\u7528 Cookies \u6765\u7ef4\u6301\u767b\u5f55\u72b6\u6001\u3002\u767b\u5f55\u77e5\u4e4e\uff0c\u5c06 Headers \u4e2d\u7684 Cookies \u590d\u5236\u4e0b\u6765\uff0c\u5c06\u5176\u8bbe\u7f6e\u5230 Headers \u91cc\u9762\uff0c\u53d1\u9001Request\u3002 import requests headers = { Cookie : \u77e5\u4e4e\u7684Cookie , Host : www.zhihu.com , User-Agent : Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.116 Safari/537.36 , } r = requests . get ( https://www.zhihu.com , headers = headers ) print ( r . text )","title":"Cookie"},{"location":"bigdata/crawler/ch3/#_2","text":"\u5728Requests\u4e2d\uff0c\u5982\u679c\u76f4\u63a5\u5229\u7528 get() \u6216 post() \u7b49\u65b9\u6cd5\u7684\u786e\u53ef\u4ee5\u505a\u5230\u6a21\u62df\u7f51\u9875\u7684\u8bf7\u6c42\u3002\u4f46\u662f\u8fd9\u5b9e\u9645\u4e0a\u662f\u76f8\u5f53\u4e8e\u4e0d\u540c\u7684\u4f1a\u8bdd\uff0c\u5373\u4e0d\u540c\u7684Session\uff0c\u4e5f\u5c31\u662f\u8bf4\u76f8\u5f53\u4e8e\u4f60\u7528\u4e86\u4e24\u4e2a\u6d4f\u89c8\u5668\u6253\u5f00\u4e86\u4e0d\u540c\u7684\u9875\u9762\u3002 \u8bbe\u60f3\u8fd9\u6837\u4e00\u4e2a\u573a\u666f\uff0c\u6211\u4eec\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u5229\u7528\u4e86 post() \u65b9\u6cd5\u767b\u5f55\u4e86\u67d0\u4e2a\u7f51\u7ad9\uff0c\u7b2c\u4e8c\u6b21\u60f3\u83b7\u53d6\u6210\u529f\u767b\u5f55\u540e\u7684\u81ea\u5df1\u7684\u4e2a\u4eba\u4fe1\u606f\uff0c\u4f60\u53c8\u7528\u4e86\u4e00\u6b21 get() \u65b9\u6cd5\u53bb\u8bf7\u6c42\u4e2a\u4eba\u4fe1\u606f\u9875\u9762\u3002\u5b9e\u9645\u4e0a\uff0c\u8fd9\u76f8\u5f53\u4e8e\u6253\u5f00\u4e86\u4e24\u4e2a\u6d4f\u89c8\u5668\uff0c\u662f\u4e24\u4e2a\u5b8c\u5168\u4e0d\u76f8\u5173\u7684\u4f1a\u8bdd\uff0c\u80fd\u6210\u529f\u83b7\u53d6\u4e2a\u4eba\u4fe1\u606f\u5417\uff1f\u90a3\u5f53\u7136\u4e0d\u80fd\u3002 \u5176\u5b9e\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u4e3b\u8981\u65b9\u6cd5\u5c31\u662f\u7ef4\u6301\u540c\u4e00\u4e2a\u4f1a\u8bdd\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6253\u5f00\u4e00\u4e2a\u65b0\u7684\u6d4f\u89c8\u5668\u9009\u9879\u5361\u800c\u4e0d\u662f\u65b0\u5f00\u4e00\u4e2a\u6d4f\u89c8\u5668\u3002\u4f46\u662f\u6211\u53c8\u4e0d\u60f3\u6bcf\u6b21\u8bbe\u7f6eCookies\uff0c\u90a3\u8be5\u600e\u4e48\u529e\uff1f\u8fd9\u65f6\u5019\u5c31\u6709\u4e86\u65b0\u7684\u5229\u5668Session\u5bf9\u8c61\u3002","title":"\u4f1a\u8bdd\u7ef4\u6301"},{"location":"bigdata/crawler/ch3/#_3","text":"\u5bf9\u4e8e\u67d0\u4e9b\u7f51\u7ad9\uff0c\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8bf7\u6c42\u51e0\u6b21\uff0c\u80fd\u6b63\u5e38\u83b7\u53d6\u5185\u5bb9\u3002\u4f46\u662f\u4e00\u65e6\u5f00\u59cb\u5927\u89c4\u6a21\u722c\u53d6\uff0c\u5bf9\u4e8e\u5927\u89c4\u6a21\u4e14\u9891\u7e41\u7684\u8bf7\u6c42\uff0c\u7f51\u7ad9\u53ef\u80fd\u4f1a\u76f4\u63a5\u767b\u5f55\u9a8c\u8bc1\uff0c\u9a8c\u8bc1\u7801\uff0c\u751a\u81f3\u76f4\u63a5\u628aIP\u7ed9\u5c01\u7981\u6389\u3002\u90a3\u4e48\u4e3a\u4e86\u9632\u6b62\u8fd9\u79cd\u60c5\u51b5\u7684\u53d1\u751f\uff0c\u6211\u4eec\u5c31\u9700\u8981\u8bbe\u7f6e\u4ee3\u7406\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5728 Requests \u4e2d\u9700\u8981\u7528\u5230 proxies \u8fd9\u4e2a\u53c2\u6570\u3002 import requests proxies = { http : http://10.10.1.10:3128 , https : http://10.10.1.10:1080 , } requests . get ( https://www.taobao.com , proxies = proxies )","title":"\u4ee3\u7406\u8bbe\u7f6e"},{"location":"bigdata/crawler/ch3/#3","text":"","title":"3 \u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"bigdata/crawler/ch3/#4-example","text":"","title":"4 Example: \u6293\u53d6\u732b\u773c\u7535\u5f71\u6392\u884c"},{"location":"bigdata/crawler/ch4/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 4 \u89e3\u6790\u5e93\u7684\u4f7f\u7528 \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u53d6\u9875\u9762\u4fe1\u606f\u662f\u6bd4\u8f83\u7e41\u7410\u7684\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u73b0\u9519\u8bef\u3002\u5bf9\u4e8e\u7f51\u9875\u8282\u70b9\u6765\u8bf4\uff0c\u5b83\u53ef\u4ee5\u5b9a\u4e49id\u3001class\u6216\u5176\u4ed6\u7684\u5c5e\u6027\uff0c\u800c\u4e14\u8282\u70b9\u4e4b\u95f4\u5177\u6709\u5c42\u6b21\u5173\u7cfb\u3002\u5229\u7528XPath\u6216CSS\u9009\u62e9\u5668\u53ef\u4ee5\u6765\u5b9a\u4f4d\u8282\u70b9\uff0c\u5982\u679c\u6211\u4eec\u5229\u7528\u9009\u62e9\u5668\u63d0\u53d6\u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5b83\u7684\u5185\u5bb9\u6216\u8005\u5c5e\u6027\u4e0d\u5c31\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u63d0\u53d6\u4fe1\u606f\u4e86\u5417\uff1f \u5728Python\u4e2d\uff0c\u6211\u4eec\u600e\u6837\u6765\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u5462\uff1fPython\u6709\u5f3a\u5927\u7684\u89e3\u6790\u5e93\uff1aLXML\u3001BeautifulSoup\u3001PyQuery\u7b49\u7b49\u3002 1 XPath\u7684\u4f7f\u7528 2 BeautifulSoup\u7684\u4f7f\u7528 3 PyQuery\u7684\u4f7f\u7528","title":"Chapter 4: \u89e3\u6790\u5e93\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch4/#python3-4","text":"\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u53d6\u9875\u9762\u4fe1\u606f\u662f\u6bd4\u8f83\u7e41\u7410\u7684\uff0c\u800c\u4e14\u5bb9\u6613\u51fa\u73b0\u9519\u8bef\u3002\u5bf9\u4e8e\u7f51\u9875\u8282\u70b9\u6765\u8bf4\uff0c\u5b83\u53ef\u4ee5\u5b9a\u4e49id\u3001class\u6216\u5176\u4ed6\u7684\u5c5e\u6027\uff0c\u800c\u4e14\u8282\u70b9\u4e4b\u95f4\u5177\u6709\u5c42\u6b21\u5173\u7cfb\u3002\u5229\u7528XPath\u6216CSS\u9009\u62e9\u5668\u53ef\u4ee5\u6765\u5b9a\u4f4d\u8282\u70b9\uff0c\u5982\u679c\u6211\u4eec\u5229\u7528\u9009\u62e9\u5668\u63d0\u53d6\u8282\u70b9\uff0c\u7136\u540e\u518d\u83b7\u53d6\u5b83\u7684\u5185\u5bb9\u6216\u8005\u5c5e\u6027\u4e0d\u5c31\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u7684\u63d0\u53d6\u4fe1\u606f\u4e86\u5417\uff1f \u5728Python\u4e2d\uff0c\u6211\u4eec\u600e\u6837\u6765\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u5462\uff1fPython\u6709\u5f3a\u5927\u7684\u89e3\u6790\u5e93\uff1aLXML\u3001BeautifulSoup\u3001PyQuery\u7b49\u7b49\u3002","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 4 \u89e3\u6790\u5e93\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch4/#1-xpath","text":"","title":"1 XPath\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch4/#2-beautifulsoup","text":"","title":"2 BeautifulSoup\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch4/#3-pyquery","text":"","title":"3 PyQuery\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch5/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Chapter 5: \u6570\u636e\u5b58\u50a8"},{"location":"bigdata/crawler/ch5/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch6/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch6"},{"location":"bigdata/crawler/ch6/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch7/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 7 \u52a8\u6001\u6e32\u67d3\u9875\u9762\u722c\u53d6 \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6a21\u62df\u6d4f\u89c8\u5668\u8fd0\u884c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u722c\u53d6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u662f\u4ec0\u4e48\u6837\uff0c\u6293\u53d6\u7684\u6e90\u7801\u5c31\u662f\u4ec0\u4e48\u6837\uff0c\u4e5f\u5c31\u662f\u53ef\u89c1\u5373\u53ef\u722c\u3002 Selenium\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u5177\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u9a71\u52a8\u6d4f\u89c8\u5668\u6267\u884c\u7279\u5b9a\u7684\u52a8\u4f5c\uff0c\u5982\u70b9\u51fb\u3001\u4e0b\u62c9\u7b49\u64cd\u4f5c\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6d4f\u89c8\u5668\u5f53\u524d\u5448\u73b0\u7684\u9875\u9762\u7684\u6e90\u4ee3\u7801 \uff0c\u505a\u5230\u53ef\u89c1\u5373\u53ef\u722c\u3002 \u5bf9\u4e8e\u4e00\u4e9bJavaScript\u52a8\u6001\u6e32\u67d3\u7684\u9875\u9762\u6765\u8bf4\uff0c\u6b64\u79cd\u6293\u53d6\u65b9\u5f0f\u975e\u5e38\u6709\u6548\u3002 Selenium\u7684\u4f7f\u7528 Selenium\u5728\u4f7f\u7528\u524d\u9700\u8981\u5b89\u88c5Selenium\u5e93\u548cChrome Drive. \u58f0\u660e\u6d4f\u89c8\u5668\u5bf9\u8c61 Selenium \u652f\u6301\u975e\u5e38\u591a\u7684\u6d4f\u89c8\u5668\uff0c\u5982 Chrome\u3001Firefox\u3001Edge \u7b49. from selenium import webdriver browser = webdriver . Chrome () browser = webdriver . Safari () \u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u6d4f\u89c8\u5668\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u5e76\u8d4b\u503c\u4e3abrowser\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u8c03\u7528browser\u5bf9\u8c61\uff0c\u8ba9\u5176\u6267\u884c\u5404\u4e2a\u52a8\u4f5c\uff0c\u5c31\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u64cd\u4f5c\u4e86\u3002 \u8bbf\u95ee\u9875\u9762 \u6211\u4eec\u53ef\u4ee5\u7528 get() \u65b9\u6cd5\u6765\u8bf7\u6c42\u4e00\u4e2a\u7f51\u9875\uff0c\u53c2\u6570\u4f20\u5165\u94fe\u63a5URL\u5373\u53ef\uff0c\u6bd4\u5982\u5728\u8fd9\u91cc\u6211\u4eec\u7528 get() \u65b9\u6cd5\u8bbf\u95ee\u6dd8\u5b9d\uff0c\u7136\u540e\u6253\u5370\u51fa\u6e90\u4ee3\u7801\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a browser . get ( https://www.taobao.com ) print ( browser . page_source ) browser . close () \u8fd0\u884c\u4e4b\u540e\u6211\u4eec\u4fbf\u53d1\u73b0\u5f39\u51fa\u4e86 Chrome \u6d4f\u89c8\u5668\uff0c\u81ea\u52a8\u8bbf\u95ee\u4e86\u6dd8\u5b9d\uff0c\u7136\u540e\u63a7\u5236\u53f0\u8f93\u51fa\u4e86\u6dd8\u5b9d\u9875\u9762\u7684\u6e90\u4ee3\u7801\uff0c\u968f\u540e\u6d4f\u89c8\u5668\u5173\u95ed\u3002 \u67e5\u627e\u8282\u70b9 Selenium \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u67e5\u627e\u8282\u70b9\u7684\u65b9\u6cd5\u3002 \u6bd4\u5982\uff0c find_element_by_name(\uff09 \u662f\u6839\u636e name \u503c\u83b7\u53d6. find_element_by_id() \u662f\u6839\u636e id \u83b7\u53d6\u3002 find_elements_by_xpath \u662f\u6839\u636eXpath\u83b7\u53d6\u3002 find_elements_by_class_name \u662f\u6839\u636eclass name \u83b7\u53d6\u3002 find_elements_by_css_selector \u662f\u6839\u636ecss selector\u83b7\u53d6\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u4ece\u6dd8\u5b9d\u9875\u9762\u4e2d\u63d0\u53d6\u641c\u7d22\u6846\u8fd9\u4e2a\u8282\u70b9\uff0c input_first = browser . find_element_by_id ( q ) input_second = browser . find_element_by_css_selector ( #q ) input_third = browser . find_element_by_xpath ( //*[@id= q ] ) \u53e6\u5916Selenium\u8fd8\u63d0\u4f9b\u4e86\u901a\u7528\u7684 find_element() \u65b9\u6cd5\uff0c\u5b83\u9700\u8981\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u67e5\u627e\u7684\u65b9\u5f0f By \uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u503c\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f find_element_by_id/name/xpath() \u8fd9\u79cd\u65b9\u6cd5\u7684\u901a\u7528\u51fd\u6570\u7248\u672c\uff0c\u6bd4\u5982 find_element_by_id(id) \u5c31\u7b49\u4ef7\u4e8e find_element(By.ID, id) \uff0c\u4e8c\u8005\u5f97\u5230\u7684\u7ed3\u679c\u5b8c\u5168\u4e00\u81f4\u3002 \u5982\u679c\u8981\u67e5\u627e\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u5c31\u9700\u8981\u7528 find_elements() \u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u65b9\u6cd5\u540d\u79f0\u4e2delement\u591a\u4e86\u4e00\u4e2as\uff0c\u6ce8\u610f\u533a\u5206\u3002 \u4f8b\u5982\u67e5\u627e\u6dd8\u5b9d\u5de6\u4fa7\u5bfc\u822a\u6761\u7684\u6240\u6709\u6761\u76ee lis = browser . find_elements_by_css_selector ( .service-bd li ) \u548c\u521a\u624d\u4e00\u6837\uff0c\u4e5f\u53ef\u53ef\u4ee5\u76f4\u63a5 find_elements() \u65b9\u6cd5\u6765\u9009\u62e9\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u8fd9\u6837\u6765\u5199\uff1a lis = browser . find_elements ( By . CSS_SELECTOR , .service-bd li ) \u83b7\u53d6\u8282\u70b9\u4fe1\u606f \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 get_attribute() \u65b9\u6cd5\u6765\u83b7\u53d6\u8282\u70b9\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7684\u524d\u63d0\u5c31\u662f\u5148\u9009\u4e2d\u8fd9\u4e2a\u8282\u70b9\u3002 \u6bcf\u4e2a WebEelement \u8282\u70b9\u90fd\u6709 text \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8c03\u7528\u8fd9\u4e2a\u5c5e\u6027\u5c31\u53ef\u4ee5\u5f97\u5230\u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u4fe1\u606f\u4e86\uff0c\u5c31\u76f8\u5f53\u4e8e BeautifulSoup \u7684 get_text() \u65b9\u6cd5\u3001PyQuery \u7684 text() \u65b9\u6cd5\u3002 \u53e6\u5916 WebElement \u8282\u70b9\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5c5e\u6027\uff0c\u6bd4\u5982 id \u5c5e\u6027\u53ef\u4ee5\u83b7\u53d6\u8282\u70b9 id\uff0clocation \u53ef\u4ee5\u83b7\u53d6\u8be5\u8282\u70b9\u5728\u9875\u9762\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0ctag_name \u53ef\u4ee5\u83b7\u53d6\u6807\u7b7e\u540d\u79f0\uff0csize \u53ef\u4ee5\u83b7\u53d6\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u5bbd\u9ad8\uff0c\u8fd9\u4e9b\u5c5e\u6027\u6709\u65f6\u5019\u8fd8\u662f\u5f88\u6709\u7528\u7684\u3002 \u8282\u70b9\u4ea4\u4e92 Selenium \u53ef\u4ee5\u9a71\u52a8\u6d4f\u89c8\u5668\u6765\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c \u8f93\u5165\u6587\u5b57\u7528 send_keys() \u65b9\u6cd5\uff0c\u6e05\u7a7a\u6587\u5b57\u7528 clear() \u65b9\u6cd5\uff0c\u53e6\u5916\u8fd8\u6709\u6309\u94ae\u70b9\u51fb\uff0c\u7528 click() \u65b9\u6cd5\u3002","title":"Chapter 7: \u52a8\u6001\u6e32\u67d3\u9875\u9762\u722c\u53d6"},{"location":"bigdata/crawler/ch7/#python3-7","text":"\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u6a21\u62df\u6d4f\u89c8\u5668\u8fd0\u884c\u7684\u65b9\u5f0f\u6765\u5b9e\u73b0\u722c\u53d6\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230\u5728\u6d4f\u89c8\u5668\u4e2d\u770b\u5230\u662f\u4ec0\u4e48\u6837\uff0c\u6293\u53d6\u7684\u6e90\u7801\u5c31\u662f\u4ec0\u4e48\u6837\uff0c\u4e5f\u5c31\u662f\u53ef\u89c1\u5373\u53ef\u722c\u3002 Selenium\u662f\u4e00\u4e2a\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u5177\uff0c\u5229\u7528\u5b83\u53ef\u4ee5\u9a71\u52a8\u6d4f\u89c8\u5668\u6267\u884c\u7279\u5b9a\u7684\u52a8\u4f5c\uff0c\u5982\u70b9\u51fb\u3001\u4e0b\u62c9\u7b49\u64cd\u4f5c\uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u83b7\u53d6\u6d4f\u89c8\u5668\u5f53\u524d\u5448\u73b0\u7684\u9875\u9762\u7684\u6e90\u4ee3\u7801 \uff0c\u505a\u5230\u53ef\u89c1\u5373\u53ef\u722c\u3002 \u5bf9\u4e8e\u4e00\u4e9bJavaScript\u52a8\u6001\u6e32\u67d3\u7684\u9875\u9762\u6765\u8bf4\uff0c\u6b64\u79cd\u6293\u53d6\u65b9\u5f0f\u975e\u5e38\u6709\u6548\u3002","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 7 \u52a8\u6001\u6e32\u67d3\u9875\u9762\u722c\u53d6"},{"location":"bigdata/crawler/ch7/#selenium","text":"Selenium\u5728\u4f7f\u7528\u524d\u9700\u8981\u5b89\u88c5Selenium\u5e93\u548cChrome Drive.","title":"Selenium\u7684\u4f7f\u7528"},{"location":"bigdata/crawler/ch7/#_1","text":"Selenium \u652f\u6301\u975e\u5e38\u591a\u7684\u6d4f\u89c8\u5668\uff0c\u5982 Chrome\u3001Firefox\u3001Edge \u7b49. from selenium import webdriver browser = webdriver . Chrome () browser = webdriver . Safari () \u8fd9\u6837\u6211\u4eec\u5c31\u5b8c\u6210\u4e86\u6d4f\u89c8\u5668\u5bf9\u8c61\u7684\u521d\u59cb\u5316\u5e76\u8d4b\u503c\u4e3abrowser\u5bf9\u8c61\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u8c03\u7528browser\u5bf9\u8c61\uff0c\u8ba9\u5176\u6267\u884c\u5404\u4e2a\u52a8\u4f5c\uff0c\u5c31\u53ef\u4ee5\u6a21\u62df\u6d4f\u89c8\u5668\u64cd\u4f5c\u4e86\u3002","title":"\u58f0\u660e\u6d4f\u89c8\u5668\u5bf9\u8c61"},{"location":"bigdata/crawler/ch7/#_2","text":"\u6211\u4eec\u53ef\u4ee5\u7528 get() \u65b9\u6cd5\u6765\u8bf7\u6c42\u4e00\u4e2a\u7f51\u9875\uff0c\u53c2\u6570\u4f20\u5165\u94fe\u63a5URL\u5373\u53ef\uff0c\u6bd4\u5982\u5728\u8fd9\u91cc\u6211\u4eec\u7528 get() \u65b9\u6cd5\u8bbf\u95ee\u6dd8\u5b9d\uff0c\u7136\u540e\u6253\u5370\u51fa\u6e90\u4ee3\u7801\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a browser . get ( https://www.taobao.com ) print ( browser . page_source ) browser . close () \u8fd0\u884c\u4e4b\u540e\u6211\u4eec\u4fbf\u53d1\u73b0\u5f39\u51fa\u4e86 Chrome \u6d4f\u89c8\u5668\uff0c\u81ea\u52a8\u8bbf\u95ee\u4e86\u6dd8\u5b9d\uff0c\u7136\u540e\u63a7\u5236\u53f0\u8f93\u51fa\u4e86\u6dd8\u5b9d\u9875\u9762\u7684\u6e90\u4ee3\u7801\uff0c\u968f\u540e\u6d4f\u89c8\u5668\u5173\u95ed\u3002","title":"\u8bbf\u95ee\u9875\u9762"},{"location":"bigdata/crawler/ch7/#_3","text":"Selenium \u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u67e5\u627e\u8282\u70b9\u7684\u65b9\u6cd5\u3002 \u6bd4\u5982\uff0c find_element_by_name(\uff09 \u662f\u6839\u636e name \u503c\u83b7\u53d6. find_element_by_id() \u662f\u6839\u636e id \u83b7\u53d6\u3002 find_elements_by_xpath \u662f\u6839\u636eXpath\u83b7\u53d6\u3002 find_elements_by_class_name \u662f\u6839\u636eclass name \u83b7\u53d6\u3002 find_elements_by_css_selector \u662f\u6839\u636ecss selector\u83b7\u53d6\u3002 \u4f8b\u5982\uff0c\u60f3\u8981\u4ece\u6dd8\u5b9d\u9875\u9762\u4e2d\u63d0\u53d6\u641c\u7d22\u6846\u8fd9\u4e2a\u8282\u70b9\uff0c input_first = browser . find_element_by_id ( q ) input_second = browser . find_element_by_css_selector ( #q ) input_third = browser . find_element_by_xpath ( //*[@id= q ] ) \u53e6\u5916Selenium\u8fd8\u63d0\u4f9b\u4e86\u901a\u7528\u7684 find_element() \u65b9\u6cd5\uff0c\u5b83\u9700\u8981\u4f20\u5165\u4e24\u4e2a\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u67e5\u627e\u7684\u65b9\u5f0f By \uff0c\u53e6\u4e00\u4e2a\u5c31\u662f\u503c\uff0c\u5b9e\u9645\u4e0a\u5b83\u5c31\u662f find_element_by_id/name/xpath() \u8fd9\u79cd\u65b9\u6cd5\u7684\u901a\u7528\u51fd\u6570\u7248\u672c\uff0c\u6bd4\u5982 find_element_by_id(id) \u5c31\u7b49\u4ef7\u4e8e find_element(By.ID, id) \uff0c\u4e8c\u8005\u5f97\u5230\u7684\u7ed3\u679c\u5b8c\u5168\u4e00\u81f4\u3002 \u5982\u679c\u8981\u67e5\u627e\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\u8282\u70b9\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u5c31\u9700\u8981\u7528 find_elements() \u8fd9\u6837\u7684\u65b9\u6cd5\uff0c\u65b9\u6cd5\u540d\u79f0\u4e2delement\u591a\u4e86\u4e00\u4e2as\uff0c\u6ce8\u610f\u533a\u5206\u3002 \u4f8b\u5982\u67e5\u627e\u6dd8\u5b9d\u5de6\u4fa7\u5bfc\u822a\u6761\u7684\u6240\u6709\u6761\u76ee lis = browser . find_elements_by_css_selector ( .service-bd li ) \u548c\u521a\u624d\u4e00\u6837\uff0c\u4e5f\u53ef\u53ef\u4ee5\u76f4\u63a5 find_elements() \u65b9\u6cd5\u6765\u9009\u62e9\uff0c\u6240\u4ee5\u4e5f\u53ef\u4ee5\u8fd9\u6837\u6765\u5199\uff1a lis = browser . find_elements ( By . CSS_SELECTOR , .service-bd li )","title":"\u67e5\u627e\u8282\u70b9"},{"location":"bigdata/crawler/ch7/#_4","text":"\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 get_attribute() \u65b9\u6cd5\u6765\u83b7\u53d6\u8282\u70b9\u7684\u5c5e\u6027\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7684\u524d\u63d0\u5c31\u662f\u5148\u9009\u4e2d\u8fd9\u4e2a\u8282\u70b9\u3002 \u6bcf\u4e2a WebEelement \u8282\u70b9\u90fd\u6709 text \u5c5e\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u8c03\u7528\u8fd9\u4e2a\u5c5e\u6027\u5c31\u53ef\u4ee5\u5f97\u5230\u8282\u70b9\u5185\u90e8\u7684\u6587\u672c\u4fe1\u606f\u4e86\uff0c\u5c31\u76f8\u5f53\u4e8e BeautifulSoup \u7684 get_text() \u65b9\u6cd5\u3001PyQuery \u7684 text() \u65b9\u6cd5\u3002 \u53e6\u5916 WebElement \u8282\u70b9\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6\u7684\u5c5e\u6027\uff0c\u6bd4\u5982 id \u5c5e\u6027\u53ef\u4ee5\u83b7\u53d6\u8282\u70b9 id\uff0clocation \u53ef\u4ee5\u83b7\u53d6\u8be5\u8282\u70b9\u5728\u9875\u9762\u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0ctag_name \u53ef\u4ee5\u83b7\u53d6\u6807\u7b7e\u540d\u79f0\uff0csize \u53ef\u4ee5\u83b7\u53d6\u8282\u70b9\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u5bbd\u9ad8\uff0c\u8fd9\u4e9b\u5c5e\u6027\u6709\u65f6\u5019\u8fd8\u662f\u5f88\u6709\u7528\u7684\u3002","title":"\u83b7\u53d6\u8282\u70b9\u4fe1\u606f"},{"location":"bigdata/crawler/ch7/#_5","text":"Selenium \u53ef\u4ee5\u9a71\u52a8\u6d4f\u89c8\u5668\u6765\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c \u8f93\u5165\u6587\u5b57\u7528 send_keys() \u65b9\u6cd5\uff0c\u6e05\u7a7a\u6587\u5b57\u7528 clear() \u65b9\u6cd5\uff0c\u53e6\u5916\u8fd8\u6709\u6309\u94ae\u70b9\u51fb\uff0c\u7528 click() \u65b9\u6cd5\u3002","title":"\u8282\u70b9\u4ea4\u4e92"},{"location":"bigdata/crawler/ch8/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch8"},{"location":"bigdata/crawler/ch8/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/crawler/ch9/","text":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e","title":"Ch9"},{"location":"bigdata/crawler/ch9/#python3-1","text":"","title":"Python3\u7f51\u7edc\u722c\u866b\u5f00\u53d1\u5b9e\u6218 - 1 \u5f00\u53d1\u73af\u5883\u914d\u7f6e"},{"location":"bigdata/gdm/","text":"GDM Chapter 1: \u63a8\u8350\u7cfb\u7edf\u5165\u95e8 Chapter 2: \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5 Chapter 3: \u5206\u7c7b Chapter 4: \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b Chapter 5: \u6982\u7387\u548c\u6734\u7d20\u8d1d\u53f6\u65af Chapter 6: \u6734\u7d20\u8d1d\u53f6\u65af\u548c\u6587\u672c\u6570\u636e Chapter 7: \u805a\u7c7b","title":"Contents"},{"location":"bigdata/gdm/#gdm","text":"Chapter 1: \u63a8\u8350\u7cfb\u7edf\u5165\u95e8 Chapter 2: \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5 Chapter 3: \u5206\u7c7b Chapter 4: \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b Chapter 5: \u6982\u7387\u548c\u6734\u7d20\u8d1d\u53f6\u65af Chapter 6: \u6734\u7d20\u8d1d\u53f6\u65af\u548c\u6587\u672c\u6570\u636e Chapter 7: \u805a\u7c7b","title":"GDM"},{"location":"bigdata/gdm/ch1/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 1 \u63a8\u8350\u7cfb\u7edf\u5165\u95e8 \u672c\u7ae0\u5c06\u4ecb\u7ecd\u534f\u540c\u8fc7\u6ee4\uff0c\u57fa\u672c\u7684\u8ddd\u79bb\u7b97\u6cd5\uff0c\u6700\u540e\u4f7f\u7528Python\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u63a8\u8350\u7b97\u6cd5\u3002 \u534f\u540c\u8fc7\u6ee4\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u5229\u7528\u4ed6\u4eba\u7684\u559c\u597d\u6765\u8fdb\u884c\u63a8\u8350\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u662f\u5927\u5bb6\u4e00\u8d77\u4ea7\u751f\u7684\u63a8\u8350\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u5728\u7f51\u7ad9\u4e0a\u67e5\u627e\u4e00\u4e2a\u548c\u4f60\u7c7b\u4f3c\u7684\u7528\u6237\uff0c\u7136\u540e\u5c06\u5b83\u559c\u6b22\u7684\u4e66\u7c4d\u63a8\u8350\u7ed9\u4f60\u3002 \u5982\u4f55\u627e\u5230\u76f8\u4f3c\u7684\u7528\u6237\uff1f \u66fc\u54c8\u987f\u8ddd\u79bb \u987e\u540d\u601d\u4e49\uff0c\u5728\u66fc\u54c8\u987f\u8857\u533a\u8981\u4ece\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\u5f00\u8f66\u5230\u53e6\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\u5b9e\u9645\u9a7e\u9a76\u8ddd\u79bb\u5c31\u662f\u201c\u66fc\u54c8\u987f\u8ddd\u79bb\u201d\u3002 \u6700\u7b80\u5355\u7684\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\u5728\u4e8c\u7ef4\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u7528 (x, y) (x, y) \u7684\u70b9\u6765\u8868\u793a\uff0c\u8fd9\u91cc\u7528\u4e0b\u6807\u6765\u8868\u793a\u4e0d\u540c\u7684\u4eba\uff0c (x_1, y_1) (x_1, y_1) \u8868\u793a\u827e\u7c73\uff0c (x_2, y_2) (x_2, y_2) \u8868\u793a\u795e\u79d8\u7684X\u5148\u751f\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5c31\u662f\uff1a |x_1-x_2|+|y_1-y_2| |x_1-x_2|+|y_1-y_2| \u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u5bf9\u4e8eFacebook\u8fd9\u6837\u9700\u8981\u8ba1\u7b97\u767e\u4e07\u7528\u6237\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u65f6\u5c31\u975e\u5e38\u6709\u5229\u3002 def manhattan ( rating1 , rating2 ): Computes the Manhattan distance. Both rating1 and rating2 are dictionaries of the form { The Strokes : 3.0, Slightly Stoopid : 2.5} distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance += abs ( rating1 [ key ] - rating2 [ key ]) commonRatings = True if commonRatings : return distance else : return - 1 #Indicates no ratings in common \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\u3002 \u4e0b\u9762\u7684\u659c\u7ebf\u5c31\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u516c\u5f0f\u662f\uff1a \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5728\u6570\u636e\u5b8c\u6574\u7684\u60c5\u51b5\u4e0b\u6548\u679c\u6700\u597d\u3002 def euclidean ( rating1 , rating2 ): Computes the Euclidean Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance += pow ( rating1 [ key ] - rating2 [ key ], 2 ) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common \u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb \u6211\u4eec\u53ef\u4ee5\u5c06\u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5f52\u7eb3\u6210\u4e00\u4e2a\u516c\u5f0f\uff0c\u8fd9\u4e2a\u516c\u5f0f\u79f0\u4e3a\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb(Minkowski Distance)\uff1a d(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}} d(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}} \u5176\u4e2d\uff1a r = 1 r = 1 , \u8be5\u516c\u5f0f\u5373\u66fc\u54c8\u987f\u8ddd\u79bb r = 2 r = 2 , \u8be5\u516c\u5f0f\u5373\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb r = \\infty r = \\infty , \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb Note r r \u503c\u8d8a\u5927\uff0c\u5355\u4e2a\u7ef4\u5ea6\u7684\u5dee\u503c\u5927\u5c0f\u4f1a\u5bf9\u6574\u4f53\u8ddd\u79bb\u6709\u66f4\u5927\u7684\u5f71\u54cd\u3002 \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb(Chebyshev Distance)\u662f\u5b9a\u4e49\u4e3a\u5176\u5404\u5750\u6807\u6570\u503c\u5dee\u7684\u6700\u5927\u503c\u3002 D_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k} D_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k} def chebyshev ( rating1 , rating2 ): Computes the Chebyshev Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance = max ( distance , abs ( rating1 [ key ] - rating2 [ key ])) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common \u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570 \u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u7528\u6237\u5bf9\u4e50\u961f\u7684\u8bc4\u5206\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u7684\u6253\u5206\u6807\u51c6\u975e\u5e38\u4e0d\u540c\uff1a Bill\u6ca1\u6709\u6253\u51fa\u6781\u7aef\u7684\u5206\u6570\uff0c\u90fd\u57282\u81f34\u5206\u4e4b\u95f4\uff1b Jordyn\u4f3c\u4e4e\u559c\u6b22\u6240\u6709\u7684\u4e50\u961f\uff0c\u6253\u5206\u90fd\u57284\u81f35\u4e4b\u95f4\uff1b Hailey\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u4eba\uff0c\u4ed6\u7684\u5206\u6570\u4e0d\u662f1\u5c31\u662f4\u3002 \u90a3\u4e48\uff0c\u5982\u4f55\u6bd4\u8f83\u8fd9\u4e9b\u7528\u6237\u5462\uff1f\u6bd4\u5982Hailey\u76844\u5206\u76f8\u5f53\u4e8eJordan\u76844\u5206\u8fd8\u662f5\u5206\u5462\uff1f\u6211\u89c9\u5f97\u66f4\u63a5\u8fd15\u5206\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u5f71\u54cd\u5230\u63a8\u8350\u7cfb\u7edf\u7684\u51c6\u786e\u6027\u4e86\u3002Clara\u6700\u4f4e\u7ed9\u4e864\u5206\u2014\u2014\u5979\u6240\u6709\u7684\u6253\u5206\u90fd\u57284\u81f35\u5206\u4e4b\u95f4\uff0c\u8fd9\u79cd\u73b0\u8c61\u5728\u6570\u636e\u6316\u6398\u9886\u57df\u79f0\u4e3a \u5206\u6570\u81a8\u80c0 \u3002 \u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570, \u7528\u4e8e\u5ea6\u91cf\u4e24\u4e2a\u53d8\u91cfX\u548cY\u4e4b\u95f4\u7684\u76f8\u5173(\u7ebf\u6027\u76f8\u5173)\uff0c\u5176\u503c\u4ecb\u4e8e-1\u4e0e1\u4e4b\u95f4, 1\u8868\u793a\u5b8c\u5168\u543b\u5408\uff0c-1\u8868\u793a\u5b8c\u5168\u76f8\u6096\u3002\u4e0b\u9762\u662f\u5e38\u89c1\u7684\u51e0\u7ec4 (x, y) (x, y) \u70b9\u96c6\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002 \u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u534f\u65b9\u5dee( \\text{cov}(X,Y) \\text{cov}(X,Y) )\u548c\u6807\u51c6\u5dee( \\sigma_X \\sigma_X )\u7684\u5546\uff1a \\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y} \\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y} \u5bf9\u4e8e\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570: r_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}. r_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}. \u4ee5\u4e0a\u65b9\u7a0b\u7ed9\u51fa\u4e86\u8ba1\u7b97\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u7b80\u5355\u7684\u5355\u6d41\u7a0b\u7b97\u6cd5\uff0c\u4f46\u662f\u5176\u4f9d\u8d56\u4e8e\u6d89\u53ca\u5230\u7684\u6570\u636e\uff0c\u6709\u65f6\u5b83\u53ef\u80fd\u662f\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u3002\u4f46\u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\uff0c\u7528\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u53ea\u904d\u5386\u4e00\u6b21\u6570\u636e\u3002 def pearson ( rating1 , rating2 ): Compute pearson coefficient :param rating1: a dictionary :param rating2: a dictionary :return: pearson coefficient sum_xy = 0 sum_x = 0 sum_y = 0 sum_x2 = 0 sum_y2 = 0 n = 0 commonRatings = False for key in rating1 : if key in rating2 : n += 1 x = rating1 [ key ] y = rating2 [ key ] sum_xy += x * y sum_x += x sum_y += y sum_x2 += pow ( x , 2 ) sum_y2 += pow ( y , 2 ) commonRatings = True if not commonRatings : return - 1 # now compute denominator denominator = math . sqrt ( sum_x2 - pow ( sum_x , 2 ) / n ) * math . sqrt ( sum_y2 - pow ( sum_y , 2 ) / n ) if denominator == 0 : return 0 else : return ( sum_xy - ( sum_x * sum_y ) / n ) / denominator \u4f59\u5f26\u76f8\u4f3c\u5ea6 \u5f53\u6211\u4eec\u75281500\u4e07\u9996\u6b4c\u66f2\u6765\u6bd4\u8f83\u4e24\u4e2a\u7528\u6237\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u4ea4\u96c6\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u65e0\u4ece\u8ba1\u7b97\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e86\u3002\u7c7b\u4f3c\u7684\u60c5\u51b5\u662f\u5728\u8ba1\u7b97\u4e24\u7bc7\u6587\u7ae0\u7684\u76f8\u4f3c\u5ea6\u65f6\u3002\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7684\u8ba1\u7b97\u4e2d\u4f1a\u7565\u8fc7\u8fd9\u4e9b\u975e\u96f6\u503c\u3002\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a \\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||} \\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||} \u5176\u4e2d\uff0c \\cdot \\cdot \u53f7\u8868\u793a\u6570\u91cf\u79ef\u3002 ||x|| ||x|| \u8868\u793a\u5411\u91cf x x \u7684\u6a21\u3002 \u4f59\u5f26\u76f8\u4f3c\u5ea6\u5728\u6587\u672c\u6316\u6398\u4e2d\u5e94\u7528\u5f97\u8f83\u591a\uff0c\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u4e5f\u4f1a\u4f7f\u7528\u5230\u3002 \u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u76f8\u4f3c\u5ea6\uff1f \u5982\u679c\u6570\u636e\u5b58\u5728\u201c\u5206\u6570\u81a8\u80c0\u201d\u95ee\u9898\uff0c\u5c31\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002 \u5982\u679c\u6570\u636e\u6bd4\u8f83\u201c\u5bc6\u96c6\u201d\uff0c\u53d8\u91cf\u4e4b\u95f4\u57fa\u672c\u90fd\u5b58\u5728\u516c\u6709\u503c\uff0c\u4e14\u8fd9\u4e9b\u8ddd\u79bb\u6570\u636e\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u90a3\u5c31\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u6216\u66fc\u54c8\u987f\u8ddd\u79bb\u3002 \u5982\u679c\u6570\u636e\u662f\u7a00\u758f\u7684\uff0c\u5219\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 Note \u5728\u6570\u636e\u6807\u51c6\u5316( \\mu=0,\\sigma=1 \\mu=0,\\sigma=1 \uff09\u540e\uff0cPearson\u76f8\u5173\u6027\u7cfb\u6570\u3001\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3001\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9\u53ef\u8ba4\u4e3a\u662f\u7b49\u4ef7\u7684[ 1 ]\u3002 kNN \u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ea\u4f9d\u9760\u6700\u76f8\u4f3c\u7684\u4e00\u4e2a\u7528\u6237\u6765\u505a\u63a8\u8350\uff0c\u5982\u679c\u8fd9\u4e2a\u7528\u6237\u6709\u4e9b\u7279\u6b8a\u7684\u504f\u597d\uff0c\u5c31\u4f1a\u76f4\u63a5\u53cd\u6620\u5728\u63a8\u8350\u5185\u5bb9\u91cc\u3002\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u627e\u5bfb\u591a\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230K\u6700\u90bb\u8fd1\u7b97\u6cd5\u4e86\u3002 \u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u53ef\u4ee5\u4f7f\u7528K\u6700\u90bb\u8fd1\u7b97\u6cd5\u6765\u627e\u51faK\u4e2a\u6700\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u63a8\u8350\u7684\u57fa\u7840\u3002\u4e0d\u540c\u7684 \u5e94\u7528\u6709\u4e0d\u540c\u7684K\u503c\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6765\u5f97\u51fa\u3002\u4ee5\u4e0b\u7ed9\u5230\u8bfb\u8005\u4e00\u4e2a\u57fa\u672c\u7684\u601d\u8def\u3002 \u5047\u8bbe\u6211\u8981\u4e3aAnn\u505a\u63a8\u8350\uff0c\u5e76\u4ee4K=3\u3002\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1a Person Pearson Sally 0.8 Eric 0.7 Amanda 0.5 \u8fd9\u4e09\u4e2a\u4eba\u90fd\u4f1a\u5bf9\u63a8\u8350\u7ed3\u679c\u6709\u6240\u8d21\u732e\uff0c\u95ee\u9898\u5728\u4e8e\u6211\u4eec\u5982\u4f55\u786e\u5b9a\u4ed6\u4eec\u7684\u6bd4\u91cd\u5462\uff1f \u6211\u4eec\u76f4\u63a5\u7528\u76f8\u5173\u7cfb\u6570\u7684\u6bd4\u91cd\u6765\u63cf\u8ff0\uff0cSally\u7684\u6bd4\u91cd\u662f0.8/2=40%\uff0cEric\u662f0.7/2=35%\uff0cAmanda \u5219\u662f25%\uff1a \u5047\u8bbe\u4ed6\u4eec\u4e09\u4eba\u5bf9Grey Wardens\u7684\u8bc4\u5206\u4ee5\u53ca\u52a0\u6743\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a Person Grey Wardens Rating Influence Sally 4.5 25% Eric 5 35% Amanda 3.5 40% \u6700\u540e\u8ba1\u7b97\u5f97\u5230\u7684\u5206\u6570\u4e3a\u4e3a\u52a0\u6743\u548c 4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\% 4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\% \u3002 Python\u63a8\u8350\u6a21\u5757 Cai-Nicolas Zeigler\u4ece\u56fe\u4e66\u6f02\u6d41\u7ad9\u6536\u96c6\u4e86\u8d85\u8fc7100\u4e07\u6761\u8bc4\u4ef7\u6570\u636e\u2014\u2014278,858\u4f4d\u7528\u6237\u4e3a271,379\u672c\u4e66\u6253\u4e86\u5206\u3002\u6570\u636e\u53ef\u4ee5\u4ece\u8fd9\u4e2a \u5730\u5740 \u83b7\u5f97\u3002 CSV\u6587\u4ef6\u5305\u542b\u4e86\u4e09\u5f20\u8868\uff1a \u7528\u6237\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4f4d\u7f6e\u3001\u5e74\u9f84\u7b49\u4fe1\u606f\u3002\u5176\u4e2d\u7528\u6237\u7684\u59d3\u540d\u5df2\u7ecf\u9690\u53bb\uff1b \u4e66\u7c4d\u8868\uff0c\u5305\u62ecISBN\u53f7\u3001\u6807\u9898\u3001\u4f5c\u8005\u3001\u51fa\u7248\u65e5\u671f\u3001\u51fa\u7248\u793e\u7b49\uff1b \u8bc4\u5206\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4e66\u7c4dISBN\u53f7\u3001\u4ee5\u53ca\u8bc4\u5206\uff080-10\u5206\uff09\u3002 Recommender class Recommender : def __init__ ( self , books , users , user_ratings , book_ratings ): initialize basic data :param books: a dictionary of books, whose key is book id :param users: a dictionary of users, whose key is user id :param book_ratings: a dictionary of book ratings, whose key is book id :param user_ratings: a dictionary of user ratings, whose key is user id self . books = books self . users = users self . book_ratings = book_ratings self . user_ratings = user_ratings def recommend ( self , user_to_recommend_int , k = 1 ): Recommend user books :param user_to_recommend_int: int, user id :param k : int, for nearest k neighbors :return: a list of books user_to_recommend = str ( user_to_recommend_int ) if user_to_recommend not in self . users : raise Exception ( user does not exist!! ) # find the user having min distances from user_to_recommend distances = [] find_user = False for user in self . users : if user_to_recommend == user : continue # extract user ratings based on user ids, # and compute the distance between them distance = Distance . pearson ( self . user_ratings [ user_to_recommend ], self . user_ratings [ user ]) if distance != - 1 : distances . append ([ user , distance ]) find_user = True if not find_user : return [] # sort user based on their distances # pearson \u7cfb\u6570\u8d8a\u5927\uff0c\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u6240\u4ee5\u7528reverse distances . sort ( key = lambda x : x [ 1 ], reverse = True ) # compute weight based on distances distances = distances [ 0 : k ] sum_distance = sum ([ distance for user , distance in distances ]) for i in range ( len ( distances )): distances [ i ][ 1 ] /= sum_distance # recommend books books_to_recommend = {} for user_id , weight in distances : for book_id in self . user_ratings [ user_id ]: if book_id not in self . user_ratings [ user_to_recommend ]: # the user haven t seen if book_id not in books_to_recommend : # haven t recommend books_to_recommend [ book_id ] = self . user_ratings [ user_id ][ book_id ] * weight else : books_to_recommend [ book_id ] = books_to_recommend [ book_id ] \\ + self . user_ratings [ user_id ][ book_id ] * weight # transform to a list of tuple books_to_recommend = [( book_id , project_rating ) for book_id , project_rating in books_to_recommend . items ()] # sort based on project_rating books_to_recommend . sort ( key = lambda x : x [ 1 ], reverse = True ) # extract book title books_to_recommend = [ self . books [ book_id ][ title ] for book_id , project_rating in books_to_recommend ] return books_to_recommend if __name__ == __main__ : ratings = BooksImport () books , users , user_ratings , book_ratings = ratings . recommender_import () test = Recommender ( books , users , user_ratings , book_ratings ) print ( test . recommend ( 171118 )) Distance import math class Distance : Compute distance of two users, having different ratings. Both rating1 and rating2 are dictionaries of the form { The Strokes : 3.0, Slightly Stoopid : 2.5} def __init__ ( self ): pass @staticmethod def manhattan ( rating1 , rating2 ): Computes the Manhattan distance. distance = 0 common_ratings = False for key in rating1 : if key in rating2 : distance += abs ( rating1 [ key ] - rating2 [ key ]) common_ratings = True if common_ratings : return distance else : return - 1 # Indicates no ratings in common @staticmethod def euclidean ( rating1 , rating2 ): Computes the Euclidean Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance += pow ( rating1 [ key ] - rating2 [ key ], 2 ) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common @staticmethod def chebyshev ( rating1 , rating2 ): Computes the Chebyshev Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance = max ( distance , abs ( rating1 [ key ] - rating2 [ key ])) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common @staticmethod def pearson ( rating1 , rating2 ): Compute pearson coefficient :param rating1: a dictionary :param rating2: a dictionary :return: pearson coefficient sum_xy = 0 sum_x = 0 sum_y = 0 sum_x2 = 0 sum_y2 = 0 n = 0 commonRatings = False for key in rating1 : if key in rating2 : n += 1 x = rating1 [ key ] y = rating2 [ key ] sum_xy += x * y sum_x += x sum_y += y sum_x2 += pow ( x , 2 ) sum_y2 += pow ( y , 2 ) commonRatings = True if not commonRatings : return - 1 # now compute denominator denominator = math . sqrt ( sum_x2 - pow ( sum_x , 2 ) / n ) \\ * math . sqrt ( sum_y2 - pow ( sum_y , 2 ) / n ) if denominator == 0 : return 0 else : return ( sum_xy - ( sum_x * sum_y ) / n ) / denominator Books_import class BooksImport : def __init__ ( self ): self . books = {} self . users = {} self . book_ratings = {} self . user_ratings = {} self . bx_books_import () self . bx_users_import () self . bx_ratings_import () def bx_books_import ( self ): import books meta information try : booksfile = codecs . open ( BX-Dump/BX-Books.csv , r , utf-8 ) for line in booksfile : props = line . split ( ; ) isbn = props [ 0 ] . strip ( ) title = props [ 1 ] . strip ( ) author = props [ 2 ] . strip ( ) year = props [ 3 ] . strip ( ) self . books [ isbn ] = { title : title , author : author , year : year } booksfile . close () except IOError as e : error = Failed to load: {0} . format ( e ) print ( error ) def bx_users_import ( self ): import user meta information user is a dictionary, whose key is user_id try : users_file = codecs . open ( BX-Dump/BX-Users.csv , r , utf--8 ) for line in users_file : props = line . split ( ; ) user_id = props [ 0 ] . strip ( ) location = props [ 1 ] . strip ( ) self . users [ user_id ] = location self . user_ratings [ user_id ] = {} users_file . close () except IOError as e : error = Failed to load: {0} . format ( e ) print ( error ) def bx_ratings_import ( self ): try : ratings_file = codecs . open ( BX-Dump/BX-Book-Ratings.csv , r , utf--8 ) for line in ratings_file : props = line . split ( ; ) user_id = props [ 0 ] . strip ( ) book_id = props [ 1 ] . strip ( ) rating = int ( props [ 2 ] . strip () . strip ( )) if book_id in self . book_ratings : self . book_ratings [ book_id ] . append ( rating ) else : self . book_ratings [ book_id ] = [ rating ] self . user_ratings [ user_id ][ book_id ] = rating ratings_file . close () except IOError as e : error = Failed to load: {0} . format ( e ) print ( error ) def get_books ( self ): return self . books def get_users ( self ): return self . users def get_user_ratings ( self ): return self . user_ratings def get_book_ratings ( self ): return self . book_ratings def recommender_import ( self ): return self . books , self . users , self . user_ratings , self . book_ratings","title":"Chapter 1: \u63a8\u8350\u7cfb\u7edf\u5165\u95e8"},{"location":"bigdata/gdm/ch1/#-1","text":"\u672c\u7ae0\u5c06\u4ecb\u7ecd\u534f\u540c\u8fc7\u6ee4\uff0c\u57fa\u672c\u7684\u8ddd\u79bb\u7b97\u6cd5\uff0c\u6700\u540e\u4f7f\u7528Python\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u63a8\u8350\u7b97\u6cd5\u3002 \u534f\u540c\u8fc7\u6ee4\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u5229\u7528\u4ed6\u4eba\u7684\u559c\u597d\u6765\u8fdb\u884c\u63a8\u8350\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u662f\u5927\u5bb6\u4e00\u8d77\u4ea7\u751f\u7684\u63a8\u8350\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u5728\u7f51\u7ad9\u4e0a\u67e5\u627e\u4e00\u4e2a\u548c\u4f60\u7c7b\u4f3c\u7684\u7528\u6237\uff0c\u7136\u540e\u5c06\u5b83\u559c\u6b22\u7684\u4e66\u7c4d\u63a8\u8350\u7ed9\u4f60\u3002 \u5982\u4f55\u627e\u5230\u76f8\u4f3c\u7684\u7528\u6237\uff1f","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 1 \u63a8\u8350\u7cfb\u7edf\u5165\u95e8"},{"location":"bigdata/gdm/ch1/#_1","text":"\u987e\u540d\u601d\u4e49\uff0c\u5728\u66fc\u54c8\u987f\u8857\u533a\u8981\u4ece\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\u5f00\u8f66\u5230\u53e6\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\u5b9e\u9645\u9a7e\u9a76\u8ddd\u79bb\u5c31\u662f\u201c\u66fc\u54c8\u987f\u8ddd\u79bb\u201d\u3002 \u6700\u7b80\u5355\u7684\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\u5728\u4e8c\u7ef4\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u7528 (x, y) (x, y) \u7684\u70b9\u6765\u8868\u793a\uff0c\u8fd9\u91cc\u7528\u4e0b\u6807\u6765\u8868\u793a\u4e0d\u540c\u7684\u4eba\uff0c (x_1, y_1) (x_1, y_1) \u8868\u793a\u827e\u7c73\uff0c (x_2, y_2) (x_2, y_2) \u8868\u793a\u795e\u79d8\u7684X\u5148\u751f\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5c31\u662f\uff1a |x_1-x_2|+|y_1-y_2| |x_1-x_2|+|y_1-y_2| \u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u5bf9\u4e8eFacebook\u8fd9\u6837\u9700\u8981\u8ba1\u7b97\u767e\u4e07\u7528\u6237\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u65f6\u5c31\u975e\u5e38\u6709\u5229\u3002 def manhattan ( rating1 , rating2 ): Computes the Manhattan distance. Both rating1 and rating2 are dictionaries of the form { The Strokes : 3.0, Slightly Stoopid : 2.5} distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance += abs ( rating1 [ key ] - rating2 [ key ]) commonRatings = True if commonRatings : return distance else : return - 1 #Indicates no ratings in common","title":"\u66fc\u54c8\u987f\u8ddd\u79bb"},{"location":"bigdata/gdm/ch1/#_2","text":"\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\u3002 \u4e0b\u9762\u7684\u659c\u7ebf\u5c31\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u516c\u5f0f\u662f\uff1a \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} \u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5728\u6570\u636e\u5b8c\u6574\u7684\u60c5\u51b5\u4e0b\u6548\u679c\u6700\u597d\u3002 def euclidean ( rating1 , rating2 ): Computes the Euclidean Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance += pow ( rating1 [ key ] - rating2 [ key ], 2 ) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common","title":"\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb"},{"location":"bigdata/gdm/ch1/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5f52\u7eb3\u6210\u4e00\u4e2a\u516c\u5f0f\uff0c\u8fd9\u4e2a\u516c\u5f0f\u79f0\u4e3a\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb(Minkowski Distance)\uff1a d(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}} d(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}} \u5176\u4e2d\uff1a r = 1 r = 1 , \u8be5\u516c\u5f0f\u5373\u66fc\u54c8\u987f\u8ddd\u79bb r = 2 r = 2 , \u8be5\u516c\u5f0f\u5373\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb r = \\infty r = \\infty , \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb Note r r \u503c\u8d8a\u5927\uff0c\u5355\u4e2a\u7ef4\u5ea6\u7684\u5dee\u503c\u5927\u5c0f\u4f1a\u5bf9\u6574\u4f53\u8ddd\u79bb\u6709\u66f4\u5927\u7684\u5f71\u54cd\u3002","title":"\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb"},{"location":"bigdata/gdm/ch1/#_4","text":"\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb(Chebyshev Distance)\u662f\u5b9a\u4e49\u4e3a\u5176\u5404\u5750\u6807\u6570\u503c\u5dee\u7684\u6700\u5927\u503c\u3002 D_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k} D_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k} def chebyshev ( rating1 , rating2 ): Computes the Chebyshev Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance = max ( distance , abs ( rating1 [ key ] - rating2 [ key ])) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common","title":"\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb"},{"location":"bigdata/gdm/ch1/#_5","text":"\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u7528\u6237\u5bf9\u4e50\u961f\u7684\u8bc4\u5206\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u7684\u6253\u5206\u6807\u51c6\u975e\u5e38\u4e0d\u540c\uff1a Bill\u6ca1\u6709\u6253\u51fa\u6781\u7aef\u7684\u5206\u6570\uff0c\u90fd\u57282\u81f34\u5206\u4e4b\u95f4\uff1b Jordyn\u4f3c\u4e4e\u559c\u6b22\u6240\u6709\u7684\u4e50\u961f\uff0c\u6253\u5206\u90fd\u57284\u81f35\u4e4b\u95f4\uff1b Hailey\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u4eba\uff0c\u4ed6\u7684\u5206\u6570\u4e0d\u662f1\u5c31\u662f4\u3002 \u90a3\u4e48\uff0c\u5982\u4f55\u6bd4\u8f83\u8fd9\u4e9b\u7528\u6237\u5462\uff1f\u6bd4\u5982Hailey\u76844\u5206\u76f8\u5f53\u4e8eJordan\u76844\u5206\u8fd8\u662f5\u5206\u5462\uff1f\u6211\u89c9\u5f97\u66f4\u63a5\u8fd15\u5206\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u5f71\u54cd\u5230\u63a8\u8350\u7cfb\u7edf\u7684\u51c6\u786e\u6027\u4e86\u3002Clara\u6700\u4f4e\u7ed9\u4e864\u5206\u2014\u2014\u5979\u6240\u6709\u7684\u6253\u5206\u90fd\u57284\u81f35\u5206\u4e4b\u95f4\uff0c\u8fd9\u79cd\u73b0\u8c61\u5728\u6570\u636e\u6316\u6398\u9886\u57df\u79f0\u4e3a \u5206\u6570\u81a8\u80c0 \u3002 \u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570, \u7528\u4e8e\u5ea6\u91cf\u4e24\u4e2a\u53d8\u91cfX\u548cY\u4e4b\u95f4\u7684\u76f8\u5173(\u7ebf\u6027\u76f8\u5173)\uff0c\u5176\u503c\u4ecb\u4e8e-1\u4e0e1\u4e4b\u95f4, 1\u8868\u793a\u5b8c\u5168\u543b\u5408\uff0c-1\u8868\u793a\u5b8c\u5168\u76f8\u6096\u3002\u4e0b\u9762\u662f\u5e38\u89c1\u7684\u51e0\u7ec4 (x, y) (x, y) \u70b9\u96c6\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002 \u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u534f\u65b9\u5dee( \\text{cov}(X,Y) \\text{cov}(X,Y) )\u548c\u6807\u51c6\u5dee( \\sigma_X \\sigma_X )\u7684\u5546\uff1a \\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y} \\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y} \u5bf9\u4e8e\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570: r_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}. r_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}. \u4ee5\u4e0a\u65b9\u7a0b\u7ed9\u51fa\u4e86\u8ba1\u7b97\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u7b80\u5355\u7684\u5355\u6d41\u7a0b\u7b97\u6cd5\uff0c\u4f46\u662f\u5176\u4f9d\u8d56\u4e8e\u6d89\u53ca\u5230\u7684\u6570\u636e\uff0c\u6709\u65f6\u5b83\u53ef\u80fd\u662f\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u3002\u4f46\u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\uff0c\u7528\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u53ea\u904d\u5386\u4e00\u6b21\u6570\u636e\u3002 def pearson ( rating1 , rating2 ): Compute pearson coefficient :param rating1: a dictionary :param rating2: a dictionary :return: pearson coefficient sum_xy = 0 sum_x = 0 sum_y = 0 sum_x2 = 0 sum_y2 = 0 n = 0 commonRatings = False for key in rating1 : if key in rating2 : n += 1 x = rating1 [ key ] y = rating2 [ key ] sum_xy += x * y sum_x += x sum_y += y sum_x2 += pow ( x , 2 ) sum_y2 += pow ( y , 2 ) commonRatings = True if not commonRatings : return - 1 # now compute denominator denominator = math . sqrt ( sum_x2 - pow ( sum_x , 2 ) / n ) * math . sqrt ( sum_y2 - pow ( sum_y , 2 ) / n ) if denominator == 0 : return 0 else : return ( sum_xy - ( sum_x * sum_y ) / n ) / denominator","title":"\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570"},{"location":"bigdata/gdm/ch1/#_6","text":"\u5f53\u6211\u4eec\u75281500\u4e07\u9996\u6b4c\u66f2\u6765\u6bd4\u8f83\u4e24\u4e2a\u7528\u6237\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u4ea4\u96c6\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u65e0\u4ece\u8ba1\u7b97\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e86\u3002\u7c7b\u4f3c\u7684\u60c5\u51b5\u662f\u5728\u8ba1\u7b97\u4e24\u7bc7\u6587\u7ae0\u7684\u76f8\u4f3c\u5ea6\u65f6\u3002\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7684\u8ba1\u7b97\u4e2d\u4f1a\u7565\u8fc7\u8fd9\u4e9b\u975e\u96f6\u503c\u3002\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a \\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||} \\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||} \u5176\u4e2d\uff0c \\cdot \\cdot \u53f7\u8868\u793a\u6570\u91cf\u79ef\u3002 ||x|| ||x|| \u8868\u793a\u5411\u91cf x x \u7684\u6a21\u3002 \u4f59\u5f26\u76f8\u4f3c\u5ea6\u5728\u6587\u672c\u6316\u6398\u4e2d\u5e94\u7528\u5f97\u8f83\u591a\uff0c\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u4e5f\u4f1a\u4f7f\u7528\u5230\u3002","title":"\u4f59\u5f26\u76f8\u4f3c\u5ea6"},{"location":"bigdata/gdm/ch1/#_7","text":"\u5982\u679c\u6570\u636e\u5b58\u5728\u201c\u5206\u6570\u81a8\u80c0\u201d\u95ee\u9898\uff0c\u5c31\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002 \u5982\u679c\u6570\u636e\u6bd4\u8f83\u201c\u5bc6\u96c6\u201d\uff0c\u53d8\u91cf\u4e4b\u95f4\u57fa\u672c\u90fd\u5b58\u5728\u516c\u6709\u503c\uff0c\u4e14\u8fd9\u4e9b\u8ddd\u79bb\u6570\u636e\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u90a3\u5c31\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u6216\u66fc\u54c8\u987f\u8ddd\u79bb\u3002 \u5982\u679c\u6570\u636e\u662f\u7a00\u758f\u7684\uff0c\u5219\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002 Note \u5728\u6570\u636e\u6807\u51c6\u5316( \\mu=0,\\sigma=1 \\mu=0,\\sigma=1 \uff09\u540e\uff0cPearson\u76f8\u5173\u6027\u7cfb\u6570\u3001\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3001\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9\u53ef\u8ba4\u4e3a\u662f\u7b49\u4ef7\u7684[ 1 ]\u3002","title":"\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u76f8\u4f3c\u5ea6\uff1f"},{"location":"bigdata/gdm/ch1/#knn","text":"\u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ea\u4f9d\u9760\u6700\u76f8\u4f3c\u7684\u4e00\u4e2a\u7528\u6237\u6765\u505a\u63a8\u8350\uff0c\u5982\u679c\u8fd9\u4e2a\u7528\u6237\u6709\u4e9b\u7279\u6b8a\u7684\u504f\u597d\uff0c\u5c31\u4f1a\u76f4\u63a5\u53cd\u6620\u5728\u63a8\u8350\u5185\u5bb9\u91cc\u3002\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u627e\u5bfb\u591a\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230K\u6700\u90bb\u8fd1\u7b97\u6cd5\u4e86\u3002 \u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u53ef\u4ee5\u4f7f\u7528K\u6700\u90bb\u8fd1\u7b97\u6cd5\u6765\u627e\u51faK\u4e2a\u6700\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u63a8\u8350\u7684\u57fa\u7840\u3002\u4e0d\u540c\u7684 \u5e94\u7528\u6709\u4e0d\u540c\u7684K\u503c\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6765\u5f97\u51fa\u3002\u4ee5\u4e0b\u7ed9\u5230\u8bfb\u8005\u4e00\u4e2a\u57fa\u672c\u7684\u601d\u8def\u3002 \u5047\u8bbe\u6211\u8981\u4e3aAnn\u505a\u63a8\u8350\uff0c\u5e76\u4ee4K=3\u3002\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1a Person Pearson Sally 0.8 Eric 0.7 Amanda 0.5 \u8fd9\u4e09\u4e2a\u4eba\u90fd\u4f1a\u5bf9\u63a8\u8350\u7ed3\u679c\u6709\u6240\u8d21\u732e\uff0c\u95ee\u9898\u5728\u4e8e\u6211\u4eec\u5982\u4f55\u786e\u5b9a\u4ed6\u4eec\u7684\u6bd4\u91cd\u5462\uff1f \u6211\u4eec\u76f4\u63a5\u7528\u76f8\u5173\u7cfb\u6570\u7684\u6bd4\u91cd\u6765\u63cf\u8ff0\uff0cSally\u7684\u6bd4\u91cd\u662f0.8/2=40%\uff0cEric\u662f0.7/2=35%\uff0cAmanda \u5219\u662f25%\uff1a \u5047\u8bbe\u4ed6\u4eec\u4e09\u4eba\u5bf9Grey Wardens\u7684\u8bc4\u5206\u4ee5\u53ca\u52a0\u6743\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a Person Grey Wardens Rating Influence Sally 4.5 25% Eric 5 35% Amanda 3.5 40% \u6700\u540e\u8ba1\u7b97\u5f97\u5230\u7684\u5206\u6570\u4e3a\u4e3a\u52a0\u6743\u548c 4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\% 4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\% \u3002","title":"kNN"},{"location":"bigdata/gdm/ch1/#python","text":"Cai-Nicolas Zeigler\u4ece\u56fe\u4e66\u6f02\u6d41\u7ad9\u6536\u96c6\u4e86\u8d85\u8fc7100\u4e07\u6761\u8bc4\u4ef7\u6570\u636e\u2014\u2014278,858\u4f4d\u7528\u6237\u4e3a271,379\u672c\u4e66\u6253\u4e86\u5206\u3002\u6570\u636e\u53ef\u4ee5\u4ece\u8fd9\u4e2a \u5730\u5740 \u83b7\u5f97\u3002 CSV\u6587\u4ef6\u5305\u542b\u4e86\u4e09\u5f20\u8868\uff1a \u7528\u6237\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4f4d\u7f6e\u3001\u5e74\u9f84\u7b49\u4fe1\u606f\u3002\u5176\u4e2d\u7528\u6237\u7684\u59d3\u540d\u5df2\u7ecf\u9690\u53bb\uff1b \u4e66\u7c4d\u8868\uff0c\u5305\u62ecISBN\u53f7\u3001\u6807\u9898\u3001\u4f5c\u8005\u3001\u51fa\u7248\u65e5\u671f\u3001\u51fa\u7248\u793e\u7b49\uff1b \u8bc4\u5206\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4e66\u7c4dISBN\u53f7\u3001\u4ee5\u53ca\u8bc4\u5206\uff080-10\u5206\uff09\u3002 Recommender class Recommender : def __init__ ( self , books , users , user_ratings , book_ratings ): initialize basic data :param books: a dictionary of books, whose key is book id :param users: a dictionary of users, whose key is user id :param book_ratings: a dictionary of book ratings, whose key is book id :param user_ratings: a dictionary of user ratings, whose key is user id self . books = books self . users = users self . book_ratings = book_ratings self . user_ratings = user_ratings def recommend ( self , user_to_recommend_int , k = 1 ): Recommend user books :param user_to_recommend_int: int, user id :param k : int, for nearest k neighbors :return: a list of books user_to_recommend = str ( user_to_recommend_int ) if user_to_recommend not in self . users : raise Exception ( user does not exist!! ) # find the user having min distances from user_to_recommend distances = [] find_user = False for user in self . users : if user_to_recommend == user : continue # extract user ratings based on user ids, # and compute the distance between them distance = Distance . pearson ( self . user_ratings [ user_to_recommend ], self . user_ratings [ user ]) if distance != - 1 : distances . append ([ user , distance ]) find_user = True if not find_user : return [] # sort user based on their distances # pearson \u7cfb\u6570\u8d8a\u5927\uff0c\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u6240\u4ee5\u7528reverse distances . sort ( key = lambda x : x [ 1 ], reverse = True ) # compute weight based on distances distances = distances [ 0 : k ] sum_distance = sum ([ distance for user , distance in distances ]) for i in range ( len ( distances )): distances [ i ][ 1 ] /= sum_distance # recommend books books_to_recommend = {} for user_id , weight in distances : for book_id in self . user_ratings [ user_id ]: if book_id not in self . user_ratings [ user_to_recommend ]: # the user haven t seen if book_id not in books_to_recommend : # haven t recommend books_to_recommend [ book_id ] = self . user_ratings [ user_id ][ book_id ] * weight else : books_to_recommend [ book_id ] = books_to_recommend [ book_id ] \\ + self . user_ratings [ user_id ][ book_id ] * weight # transform to a list of tuple books_to_recommend = [( book_id , project_rating ) for book_id , project_rating in books_to_recommend . items ()] # sort based on project_rating books_to_recommend . sort ( key = lambda x : x [ 1 ], reverse = True ) # extract book title books_to_recommend = [ self . books [ book_id ][ title ] for book_id , project_rating in books_to_recommend ] return books_to_recommend if __name__ == __main__ : ratings = BooksImport () books , users , user_ratings , book_ratings = ratings . recommender_import () test = Recommender ( books , users , user_ratings , book_ratings ) print ( test . recommend ( 171118 )) Distance import math class Distance : Compute distance of two users, having different ratings. Both rating1 and rating2 are dictionaries of the form { The Strokes : 3.0, Slightly Stoopid : 2.5} def __init__ ( self ): pass @staticmethod def manhattan ( rating1 , rating2 ): Computes the Manhattan distance. distance = 0 common_ratings = False for key in rating1 : if key in rating2 : distance += abs ( rating1 [ key ] - rating2 [ key ]) common_ratings = True if common_ratings : return distance else : return - 1 # Indicates no ratings in common @staticmethod def euclidean ( rating1 , rating2 ): Computes the Euclidean Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance += pow ( rating1 [ key ] - rating2 [ key ], 2 ) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common @staticmethod def chebyshev ( rating1 , rating2 ): Computes the Chebyshev Distance :param rating1: rating :param rating2: rating :return: distance if common ratings exists, or -1 distance = 0 commonRatings = False for key in rating1 : if key in rating2 : distance = max ( distance , abs ( rating1 [ key ] - rating2 [ key ])) commonRatings = True if commonRatings : return distance else : return - 1 # Indicates no ratings in common @staticmethod def pearson ( rating1 , rating2 ): Compute pearson coefficient :param rating1: a dictionary :param rating2: a dictionary :return: pearson coefficient sum_xy = 0 sum_x = 0 sum_y = 0 sum_x2 = 0 sum_y2 = 0 n = 0 commonRatings = False for key in rating1 : if key in rating2 : n += 1 x = rating1 [ key ] y = rating2 [ key ] sum_xy += x * y sum_x += x sum_y += y sum_x2 += pow ( x , 2 ) sum_y2 += pow ( y , 2 ) commonRatings = True if not commonRatings : return - 1 # now compute denominator denominator = math . sqrt ( sum_x2 - pow ( sum_x , 2 ) / n ) \\ * math . sqrt ( sum_y2 - pow ( sum_y , 2 ) / n ) if denominator == 0 : return 0 else : return ( sum_xy - ( sum_x * sum_y ) / n ) / denominator Books_import class BooksImport : def __init__ ( self ): self . books = {} self . users = {} self . book_ratings = {} self . user_ratings = {} self . bx_books_import () self . bx_users_import () self . bx_ratings_import () def bx_books_import ( self ): import books meta information try : booksfile = codecs . open ( BX-Dump/BX-Books.csv , r , utf-8 ) for line in booksfile : props = line . split ( ; ) isbn = props [ 0 ] . strip ( ) title = props [ 1 ] . strip ( ) author = props [ 2 ] . strip ( ) year = props [ 3 ] . strip ( ) self . books [ isbn ] = { title : title , author : author , year : year } booksfile . close () except IOError as e : error = Failed to load: {0} . format ( e ) print ( error ) def bx_users_import ( self ): import user meta information user is a dictionary, whose key is user_id try : users_file = codecs . open ( BX-Dump/BX-Users.csv , r , utf--8 ) for line in users_file : props = line . split ( ; ) user_id = props [ 0 ] . strip ( ) location = props [ 1 ] . strip ( ) self . users [ user_id ] = location self . user_ratings [ user_id ] = {} users_file . close () except IOError as e : error = Failed to load: {0} . format ( e ) print ( error ) def bx_ratings_import ( self ): try : ratings_file = codecs . open ( BX-Dump/BX-Book-Ratings.csv , r , utf--8 ) for line in ratings_file : props = line . split ( ; ) user_id = props [ 0 ] . strip ( ) book_id = props [ 1 ] . strip ( ) rating = int ( props [ 2 ] . strip () . strip ( )) if book_id in self . book_ratings : self . book_ratings [ book_id ] . append ( rating ) else : self . book_ratings [ book_id ] = [ rating ] self . user_ratings [ user_id ][ book_id ] = rating ratings_file . close () except IOError as e : error = Failed to load: {0} . format ( e ) print ( error ) def get_books ( self ): return self . books def get_users ( self ): return self . users def get_user_ratings ( self ): return self . user_ratings def get_book_ratings ( self ): return self . book_ratings def recommender_import ( self ): return self . books , self . users , self . user_ratings , self . book_ratings","title":"Python\u63a8\u8350\u6a21\u5757"},{"location":"bigdata/gdm/ch2/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 2 \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5 \u9690\u5f0f\u8bc4\u4ef7 \u7528\u6237\u7684\u8bc4\u4ef7\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u663e\u5f0f\u8bc4\u4ef7\u548c\u9690\u5f0f\u8bc4\u4ef7\u3002 \u663e\u5f0f\u8bc4\u4ef7 \u6307\u7684\u662f\u7528\u6237\u660e\u786e\u5730\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u662fYouTube\u4e0a\u7684\u201c\u559c\u6b22\u201d\u548c\u201c\u4e0d\u559c\u6b22\u201d\u6309\u94ae\uff0c\u4ee5\u53ca\u4e9a\u9a6c\u900a\u7684\u661f\u7ea7\u8bc4\u4ef7\u7cfb\u7edf\u3002 \u9690\u5f0f\u8bc4\u4ef7 \uff0c\u5c31\u662f\u6211\u4eec\u4e0d\u8ba9\u7528\u6237\u660e\u786e\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\uff0c\u800c\u662f\u901a\u8fc7\u89c2\u5bdf\u4ed6\u4eec\u7684\u884c\u4e3a\u6765\u83b7\u5f97\u504f\u597d\u4fe1\u606f\u3002\u793a\u4f8b\u4e4b\u4e00\u662f\u8bb0\u5f55\u7528\u6237\u5728\u7ebd\u7ea6\u65f6\u62a5\u7f51\u4e0a\u7684\u70b9\u51fb\u8bb0\u5f55\uff0c\u4e9a\u9a6c\u900a\u4e0a\u7528\u6237\u7684\u5b9e\u9645\u8d2d\u4e70\u8bb0\u5f55\u3002 \u6211\u4eec\u53ef\u4ee5\u6536\u96c6\u5230\u54ea\u4e9b\u9690\u5f0f\u8bc4\u4ef7\u5462\uff1f e.g. \u7f51\u9875\u65b9\u9762\uff1a\u9875\u9762\u70b9\u51fb\u3001\u505c\u7559\u65f6\u95f4\u3001\u91cd\u590d\u8bbf\u95ee\u6b21\u6570\u3001\u5f15\u7528\u7387\u3001Hulu\u4e0a\u89c2\u770b\u89c6\u9891\u7684\u6b21\u6570\uff1b\u97f3\u4e50\u64ad\u653e\u5668\uff1a\u64ad\u653e\u7684\u66f2\u76ee\u3001\u8df3\u8fc7\u7684\u66f2\u76ee\u3001\u64ad\u653e\u6b21\u6570\uff1b \u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5 \u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u63cf\u8ff0\u7684\u90fd\u662f\u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\uff1a\u5c06\u4e00\u4e2a\u7528\u6237\u548c\u5176\u4ed6 \u6240\u6709 \u7528\u6237\u8fdb\u884c\u5bf9\u6bd4\uff0c\u627e\u5230\u76f8\u4f3c\u7684\u4eba\u3002\u8fd9\u79cd\u7b97\u6cd5\u6709\u4e24\u4e2a\u5f0a\u7aef\uff1a \u6269\u5c55\u6027 \uff1a\u968f\u7740\u7528\u6237\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5176\u8ba1\u7b97\u91cf\u4e5f\u4f1a\u589e\u52a0\u3002\u8fd9\u79cd\u7b97\u6cd5\u5728\u53ea\u6709\u51e0\u5343\u4e2a\u7528\u6237\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u8fbe\u5230\u4e00\u767e\u4e07\u4e2a\u7528\u6237\u65f6\u5c31\u4f1a\u51fa\u73b0\u74f6\u9888\u3002 \u7a00\u758f\u6027 \uff1a\u5927\u591a\u6570\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u4ec5\u4ec5\u5bf9\u4e00\u5c0f\u90e8\u5206\u7269\u54c1\u8fdb\u884c\u4e86\u8bc4\u4ef7\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6570\u636e\u7684\u7a00\u758f\u6027\u3002\u6bd4\u5982\u4e9a\u9a6c\u900a\u6709\u4e0a\u767e\u4e07\u672c\u4e66\uff0c\u4f46\u7528\u6237\u53ea\u8bc4\u8bba\u4e86\u5f88\u5c11\u4e00\u90e8\u5206\uff0c\u4e8e\u662f\u5c31\u5f88\u96be\u627e\u5230\u4e24\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\u4e86\u3002 \u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6 \u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6765\u8ba1\u7b97\u4e24\u4e2a\u7269\u54c1\u7684\u8ddd\u79bb\u3002\u7531\u4e8e\u201c\u5206\u6570\u81a8\u80c0\u201d\u73b0\u8c61\uff0c\u9700\u8981\u4ece\u7528\u6237\u7684\u8bc4\u4ef7\u4e2d\u51cf\u53bb\u4ed6\u6240\u6709\u8bc4\u4ef7\u7684\u5747\u503c\uff0c\u8fd9\u5c31\u662f\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6(Adjusted Cosine Similarity)\u3002\u8fd9\u4e2a\u516c\u5f0f\u6765\u81ea\u4e8e\u4e00\u7bc7\u5f71\u54cd\u6df1\u8fdc\u7684\u8bba\u6587\u300a \u57fa\u4e8e\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5 \u300b\u3002 s(i,j) =\\frac{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}} s(i,j) =\\frac{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}} U U \u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7\u7269\u54c1 i i \u548c j j \u7684\u7528\u6237\u96c6\u5408\uff0c \\bar R_u \\bar R_u \u8868\u793a\u7528\u6237 u u \u5bf9\u6240\u6709\u7269\u54c1\u7684\u8bc4\u4ef7\u5747\u503c\uff0c s(i,j) s(i,j) \u8868\u793a\u7269\u54c1 i i \u548c j j \u7684\u76f8\u4f3c\u5ea6\u3002 def cosinesimilarity ( item1 , item2 , userRatings ): averages = {} for user , ratings in userRatings . items (): averages [ user ] = ( float ( sum ( ratings . values ())) / len ( ratings . values ())) num = 0 # \u5206\u5b50 dem1 = 0 # \u5206\u6bcd\u7684\u7b2c\u4e00\u90e8\u5206 dem2 = 0 for ( user , ratings ) in userRatings . items (): if item1 in ratings and item2 in ratings : avg = averages [ user ] num += ( ratings [ item1 ] - avg ) * ( ratings [ item2 ] - avg ) dem1 += ( ratings [ item1 ] - avg ) ** 2 dem2 += ( ratings [ item1 ] - avg ) ** 2 return num / ( math . sqrt ( dem1 ) * math . sqrt ( dem2 )) \u9884\u6d4b \u90a3\u4e0b\u9762\u8be5\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u505a\u9884\u6d4b\u5462\uff1f\u6bd4\u5982\u6211\u60f3\u77e5\u9053David\u6709\u591a\u559c\u6b22Kacey Musgraves\uff1f\u5728\u8a08\u7b97\u5b8c similarity \u4e4b\u5f8c\uff0c\u4e0b\u4e00\u6b65\u9a5f\u5c31\u662f\u8981\u9032\u884c\u67d0\u500b item \u7684\u9810\u6e2c\uff0c\u9019\u88e1\u6709\u5169\u7a2e\u65b9\u6cd5\uff0c\u5206\u5225\u662f\uff1a weighted-sum \u548c regression\u3002 weighted-sum p(u,i) = \\frac{{\\sum_{N\\in \\text{similarTo}(i)}(S_{i,N}\\times R_{u,N})}}{\\sum_{N\\in \\text{similarTo}(i)}|S_{i,N}|} p(u,i) = \\frac{{\\sum_{N\\in \\text{similarTo}(i)}(S_{i,N}\\times R_{u,N})}}{\\sum_{N\\in \\text{similarTo}(i)}|S_{i,N}|} \u5176\u4e2d p(u,i) p(u,i) \u8868\u793a\u9884\u6d4b\u7684\u7528\u6237 u u \u5bf9\u7269\u54c1 i i \u7684\u8bc4\u5206\uff0c S_{i,N} S_{i,N} \u8868\u793a\u7269\u54c1 i i \u548c N N \u7684\u76f8\u4f3c\u5ea6\uff0c R_{u,N} R_{u,N} \u8868\u793a\u7528\u6237 u u \u5bf9\u7269\u54c1 N N \u7684\u8bc4\u5206\u3002 N N \u662f\u4e00\u4e2a\u7269\u54c1\u7684\u96c6\u5408\uff0c\u6709\u5982\u4e0b\u7279\u6027\uff1a\u7528\u6237 u u \u5bf9\u96c6\u5408\u4e2d\u7684\u7269\u54c1\u6253\u8fc7\u5206\uff0c\u7269\u54c1 i i \u548c\u96c6\u5408\u4e2d\u7684\u7269\u54c1\u6709\u76f8\u4f3c\u5ea6\u6570\u636e\u3002 \u4f7f\u7528Python\u5b9e\u73b0\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7b97\u6cd5 class ItemBasedCF : \u4f7f\u7528\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5b9e\u73b0\u7269\u54c1\u63a8\u8350 def __init__ ( self , data ): initialize data :param data: a dict of (user, ratings) For instance, users2 = { Amy : { Taylor Swift : 4, PSY : 3, Whitney Houston : 4}, Clara : { PSY : 3.5, Whitney Houston : 4}, Daisy : { Taylor Swift : 5, Whitney Houston : 3}} self . data = data self . items = set () # a set of items # compute average user ratings of given data self . avg_user_rating = {} for user , ratings in data . items (): self . avg_user_rating [ user ] = np . average ( list ( ratings . values ())) for item in ratings . keys (): self . items . add ( item ) def adjusted_cosine_similarity ( self , item1 , item2 ): Compute adjusted cosine similarity :param item1: an item :param item2: an item :return: similarity if ( item1 not in self . items ) or ( item2 not in self . items ): raise ( Exception ( Input Item NOT FOUND! )) num = 0 # numerator den1 = 0 # denominator1 den2 = 0 # denominator2 for user , ratings in self . data . items (): if item1 in ratings and item2 in ratings : x = ratings [ item1 ] - self . avg_user_rating [ user ] y = ratings [ item2 ] - self . avg_user_rating [ user ] num += x * y den1 += x * x den2 += y * y den = np . sqrt ( den1 * den2 ) # denominator if den == 0 : return None return num / den def predict ( self , user , item ): predict rating of given user on given item :param user: an user :param item: an item :return: rating if user not in self . data : raise ( Exception ( Input User NOT FOUND! )) if item not in self . items : raise ( Exception ( Input Item NOT FOUND! )) num = 0 # numerator den = 0 # denominator for another_item , rating in self . data [ user ] . items (): if item != another_item : similarity = self . adjusted_cosine_similarity ( item , another_item ) if similarity is None : continue num += rating * similarity den += abs ( similarity ) if den == 0 : return None return num / den def recommend ( self , user ): recommend items to the user :param user: an user :return: a list of items(up to 10) recommendations = [] for item in self . items : if item not in self . data [ user ]: predict = self . predict ( user , item ) if predict is not None : recommendations . append (( predict , item )) recommendations . sort ( reverse = True ) return list ( map ( lambda x : x [ 1 ], recommendations )) Slope One\u7b97\u6cd5 Slope One\u662f\u53e6\u4e00\u79cd\u6bd4\u8f83\u6d41\u884c\u7684\u57fa\u4e8e\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\u3002\u5b83\u6700\u5927\u7684\u4f18\u52bf\u662f\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u3002Slope One\u7b97\u6cd5\u662f\u5728\u4e00\u7bc7\u540d\u4e3a\u300a Slope One Predictors for Online Rating-Based Collaborative Filtering \u300b\u7684\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\uff0c\u7531Lemire\u548cMachlachlan\u5408\u8457\u3002\u8fd9\u7bc7\u8bba\u6587\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\u3002 \u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u4e86\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u3002\u5047\u8bbeA\u7ed9Item I\u6253\u4e861\u5206\uff0c\u7ed9Item J\u6253\u4e861.5\u5206\uff1bB\u7ed9Item I\u6253\u4e862\u5206\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u903b\u8f91\u6765\u9884\u6d4bB\u5bf9Item J\u7684\u8bc4\u5206\uff1a\u7531\u4e8eA\u7ed9Item J\u6253\u7684\u5206\u6570\u8981\u6bd4Item I\u7684\u9ad80.5\u5206\uff0c\u6240\u4ee5\u6211\u4eec\u9884\u6d4bB\u4e5f\u4f1a\u7ed9\u9ad80.5\u5206\uff0c\u53732.5\u5206\u3002 \u53ef\u4ee5\u5c06Slope One\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a \u8ba1\u7b97\u51fa\u7269\u54c1\u4e4b\u95f4\u7684\u4e24\u4e24\u5dee\u503c(\u53ef\u4ee5\u5728\u591c\u95f4\u6279\u91cf\u8ba1\u7b97) \u8fdb\u884c\u9884\u6d4b\uff0c\u53ef\u4ee5\u4f7f\u7528\u52a0\u6743\u7684Slope One\u7b97\u6cd5 \u8ba1\u7b97\u5dee\u503c \u7269\u54c1 i i \u4e0e\u7269\u54c1 j j \u4e4b\u95f4\u7684\u5e73\u5747\u5dee\u5f02\u4e3a\uff1a \\text{dev}_{i,j}=\\sum_{u\\in S_{i,j}(X)}\\frac{u_i-u_j}{\\text{card}(S_{i,j}(X))} \\text{dev}_{i,j}=\\sum_{u\\in S_{i,j}(X)}\\frac{u_i-u_j}{\\text{card}(S_{i,j}(X))} \u5176\u4e2d S_{i,j}(X) S_{i,j}(X) \u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7 i,j i,j \u7684\u7528\u6237\u96c6\u5408\uff0c \\text{card}(S) \\text{card}(S) \u8868\u793a S S \u4e2d\u6709\u591a\u5c11\u4e2a\u5143\u7d20\uff0c X X \u8868\u793a\u6240\u6709\u8bc4\u5206\u503c\u7684\u96c6\u5408\uff0c \\text{card}(S_{j,i}(X)) \\text{card}(S_{j,i}(X)) \u5219\u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7\u7269\u54c1 i i \u548c j j \u7684\u7528\u6237\u6570\uff0c u_i u_i \u8868\u793a\u7528\u6237 u u \u5bf9\u7269\u54c1 i i \u7684\u8bc4\u5206\u3002 Question \u5982\u679c\u6709\u4e00\u4e2a\u65b0\u8fdb\u7684\u7528\u6237\u5bf910\u4e2a\u6b4c\u624b\u505a\u4e86\u8bc4\u4ef7\uff0c\u6211\u4eec\u662f\u5426\u9700\u8981\u91cd\u65b0\u8ba1\u7b9720\u4e07\u00d720\u4e07\u7684\u5dee\u5f02\u6570\u636e\uff0c\u6216\u662f\u6709\u5176\u4ed6\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff1f \u7b54\u6848\u662f\u4f60\u4e0d\u9700\u8981\u8ba1\u7b97\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8fd9\u6b63\u662fSlope One\u7684\u7f8e\u5999\u4e4b\u5904\u3002\u5bf9\u4e8e\u4e24\u4e2a\u7269\u54c1\uff0c\u6211\u4eec\u53ea\u9700\u8bb0\u5f55\u540c\u65f6\u8bc4\u4ef7\u8fc7\u8fd9\u5bf9\u7269\u54c1\u7684\u7528\u6237\u6570\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f7f\u7528\u52a0\u6743\u7684Slope One\u7b97\u6cd5\u8fdb\u884c\u9884\u6d4b \u4f7f\u7528\u52a0\u6743\u7684Slope One\u7b97\u6cd5(Weighted Slope One, WS1)\u6765\u8fdb\u884c\u9884\u6d4b\uff0c\u7528 P^{WS1} P^{WS1} \u6765\u8868\u793a\u9884\u6d4b\u7528\u6237 u u \u5bf9\u7269\u54c1 j j \u7684\u8bc4\u5206\uff1a P^{WS1}(u)_j=\\frac{\\sum_{i\\in S(u) - \\{j\\}}(\\text{dev}_{i,j}+u_i)c_{j,i}}{\\sum_{i\\in S(u) - \\{j\\}} c_{j,i}} P^{WS1}(u)_j=\\frac{\\sum_{i\\in S(u) - \\{j\\}}(\\text{dev}_{i,j}+u_i)c_{j,i}}{\\sum_{i\\in S(u) - \\{j\\}} c_{j,i}} \u5176\u4e2d\uff1a c_{j,i}=\\text{card}(S_{j,i}(\\chi)) c_{j,i}=\\text{card}(S_{j,i}(\\chi)) \u3002\u5f0f\u4e2d \\sum_{i\\in S(u) - \\{j\\}} \\sum_{i\\in S(u) - \\{j\\}} \u8868\u793a\u7528\u6237 u u \u8bc4\u4ef7\u7684\u9664 j j \u9664\u5916\u7684\u7269\u54c1\uff0c\u5176\u4ed6\u7b26\u53f7\u4e0e\u4e0a\u4e00\u8282\u7684\u542b\u4e49\u76f8\u540c\u3002\u8fd9\u4e2a\u516c\u5f0f\u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c \\text{dev}_{i,j}+u_i \\text{dev}_{i,j}+u_i \u8868\u793a\u6839\u636e\u7269\u54c1 i i \u9884\u6d4b\u5f97\u5230\u7684\u7528\u6237 u u \u5bf9\u7269\u54c1 j j \u7684\u8bc4\u5206\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u52a0\u6743\u5e73\u5747\u5c31\u5f97\u5230 P^{WS1} P^{WS1} \u3002 \u4f7f\u7528Python\u5b9e\u73b0Slope One\u7b97\u6cd5 \u5176\u5b9e\u4ee3\u7801\u6574\u4f53\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u628a\u516c\u5f0f\u8f6c\u5316\u4e3a\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u6280\u5de7\u3002\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\u5c3d\u53ef\u80fd\u7684\u6d4b\u8bd5\u8be5\u7a0b\u5e8f\uff0c\u4fdd\u8bc1\u5176\u6b63\u786e\u6027\u3002\u7531\u4e8e\u7f51\u4e0a\u6709\u4e0d\u5c11SlopeOne\u4ee3\u7801\uff0c\u6211\u81ea\u5df1\u5199\u5b8c\u4ee5\u540e\u548c\u4ed6\u4eec\u7684\u7ed3\u679c\u6bd4\u5bf9\uff0c\u53d1\u73b0\u5b8c\u5168\u4e00\u81f4\u3002 class SlopeOne : def __init__ ( self , data ): initialize :param data: a dictionary, whose key is an item, and value is a rating. self . data = data # frequencies, a dictionary, whose key is an item, # and value is a dictionary of (item, frequency) self . frequencies = {} # deviations, a dictionary, whose key is an item, # and value is a dictionary of (item, deviation) self . deviations = {} def computeDeviations ( self ): compute deviations between items :return: # \u83b7\u53d6\u6bcf\u4f4d\u7528\u6237\u7684\u8bc4\u5206\u6570\u636eratings for ratings in self . data . values (): # \u5bf9\u4e8e\u8be5\u7528\u6237\u7684\u6bcf\u4e2a\u8bc4\u5206\u9879(\u6b4c\u624b\u3001\u5206\u6570) for ( item1 , rating1 ) in ratings . items (): self . frequencies . setdefault ( item1 , {}) self . deviations . setdefault ( item1 , {}) # \u518d\u6b21\u904d\u5386\u8be5\u7528\u6237\u7684\u6bcf\u4e2a\u8bc4\u5206\u9879 for ( item2 , rating2 ) in ratings . items (): if item1 != item2 : # \u5c06\u8bc4\u5206\u7684\u5dee\u5f02\u4fdd\u5b58\u5230\u53d8\u91cf\u4e2d self . frequencies [ item1 ] . setdefault ( item2 , 0 ) self . deviations [ item1 ] . setdefault ( item2 , 0.0 ) self . frequencies [ item1 ][ item2 ] += 1 self . deviations [ item1 ][ item2 ] += ( rating1 - rating2 ) # \u8ba1\u7b97deviations for item1 , deviations in self . deviations . items (): for item2 in deviations : deviations [ item2 ] /= self . frequencies [ item1 ][ item2 ] def predict ( self , user , item ): predict the ratings of the user regard to the item Using Weighted Slope One (WSO) :param user: an user :param item: an item :return: a prediction, double if user not in self . data : raise Exception # predictions predictions = 0 frequency = 0 # \u7528\u6237user \u8bc4\u4ef7\u7684\u9664 item \u9664\u5916\u7684\u7269\u54c1 for diff_item , ratings in self . data [ user ] . items (): if ( item == diff_item ) or ( diff_item not in self . deviations [ item ]): continue predictions += ( self . deviations [ item ][ diff_item ] + self . data [ user ][ diff_item ]) \\ * self . frequencies [ item ][ diff_item ] frequency += self . frequencies [ item ][ diff_item ] predictions /= frequency return predictions def recommendation ( self , user ): recommend items to user :param user: an user :return: a list of items recommended if user not in self . data : raise Exception if self . deviations == {}: self . computeDeviations () recommendations = [] # \u6240\u6709\u7684item for item in self . deviations . keys (): # \u7528\u6237\u672a\u8bc4\u4ef7\u8fc7\u7684item if item not in self . data [ user ]: recommendations . append (( item , self . predict ( user , item ))) recommendations . sort ( key = lambda x : x [ 1 ], reverse = True ) return list ( map ( lambda x : x [ 0 ], recommendations )) Example: MovieLens MovieLens\u6570\u636e\u96c6\u662f\u7531\u660e\u5c3c\u82cf\u8fbe\u5dde\u5927\u5b66\u7684GroupLens\u7814\u7a76\u9879\u76ee\u6536\u96c6\u7684\uff0c\u662f\u7528\u6237\u5bf9\u7535\u5f71\u7684\u8bc4\u5206\u3002 \u8fd9\u4e2a\u6570\u636e\u96c6\u53ef\u4ee5\u5728 www.grouplens.org \u4e0b\u8f7d\u3002\u5176\u4e2d100K\u6570\u636e\u96c6\u5305\u542b\u4e86943\u4f4d\u7528\u6237\u5bf91682\u90e8\u7535\u5f71\u7684\u8bc4\u4ef7\uff0c\u7ea610\u4e07\u6761\u8bb0\u5f55\u3002 \u4f7f\u7528MovieLens 100K\u6570\u636e\u96c6\u5904\u7406\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6839\u636eREADME\u4e2d\u63cf\u8ff0\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5c06\u7535\u5f71\u3001\u7528\u6237\u3001\u8bc4\u5206\u6570\u636e\u5bfc\u5165\u5e76\u8f6c\u5316\u4e3a\u5408\u9002\u7684\u6570\u636e\u683c\u5f0f \u5229\u7528SlopeOne\u8fdb\u884c\u63a8\u8350 \u5c06\u63a8\u8350\u7ed3\u679c\u5c55\u793a \u4ee3\u7801\u6574\u4f53\u975e\u5e38\u7b80\u6d01\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u4e0a\u9762\u5199\u7684SlopeOne\u7b97\u6cd5\u3002 class MovieRecommendation ( SlopeOne ): def __init__ ( self , data , movie ): super ( MovieRecommendation , self ) . __init__ ( data ) self . movie = movie def recommend_movie ( self , user ): movies = self . recommendation ( user )[: 10 ] return list ( map ( lambda x : self . movie [ x ][ title ], movies )) \u8fdb\u4e00\u6b65\u9605\u8bfb http://www.diva-portal.se/smash/get/diva2:811049/FULLTEXT01.pdf https://dzone.com/articles/slope-one-recommender https://www.slideshare.net/irecsys/slope-one-recommender-on-hadoop-15199798?from_action=save#","title":"Chapter 2: \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5"},{"location":"bigdata/gdm/ch2/#-2","text":"","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 2 \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5"},{"location":"bigdata/gdm/ch2/#_1","text":"\u7528\u6237\u7684\u8bc4\u4ef7\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u663e\u5f0f\u8bc4\u4ef7\u548c\u9690\u5f0f\u8bc4\u4ef7\u3002 \u663e\u5f0f\u8bc4\u4ef7 \u6307\u7684\u662f\u7528\u6237\u660e\u786e\u5730\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u662fYouTube\u4e0a\u7684\u201c\u559c\u6b22\u201d\u548c\u201c\u4e0d\u559c\u6b22\u201d\u6309\u94ae\uff0c\u4ee5\u53ca\u4e9a\u9a6c\u900a\u7684\u661f\u7ea7\u8bc4\u4ef7\u7cfb\u7edf\u3002 \u9690\u5f0f\u8bc4\u4ef7 \uff0c\u5c31\u662f\u6211\u4eec\u4e0d\u8ba9\u7528\u6237\u660e\u786e\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\uff0c\u800c\u662f\u901a\u8fc7\u89c2\u5bdf\u4ed6\u4eec\u7684\u884c\u4e3a\u6765\u83b7\u5f97\u504f\u597d\u4fe1\u606f\u3002\u793a\u4f8b\u4e4b\u4e00\u662f\u8bb0\u5f55\u7528\u6237\u5728\u7ebd\u7ea6\u65f6\u62a5\u7f51\u4e0a\u7684\u70b9\u51fb\u8bb0\u5f55\uff0c\u4e9a\u9a6c\u900a\u4e0a\u7528\u6237\u7684\u5b9e\u9645\u8d2d\u4e70\u8bb0\u5f55\u3002 \u6211\u4eec\u53ef\u4ee5\u6536\u96c6\u5230\u54ea\u4e9b\u9690\u5f0f\u8bc4\u4ef7\u5462\uff1f e.g. \u7f51\u9875\u65b9\u9762\uff1a\u9875\u9762\u70b9\u51fb\u3001\u505c\u7559\u65f6\u95f4\u3001\u91cd\u590d\u8bbf\u95ee\u6b21\u6570\u3001\u5f15\u7528\u7387\u3001Hulu\u4e0a\u89c2\u770b\u89c6\u9891\u7684\u6b21\u6570\uff1b\u97f3\u4e50\u64ad\u653e\u5668\uff1a\u64ad\u653e\u7684\u66f2\u76ee\u3001\u8df3\u8fc7\u7684\u66f2\u76ee\u3001\u64ad\u653e\u6b21\u6570\uff1b","title":"\u9690\u5f0f\u8bc4\u4ef7"},{"location":"bigdata/gdm/ch2/#_2","text":"\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u63cf\u8ff0\u7684\u90fd\u662f\u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\uff1a\u5c06\u4e00\u4e2a\u7528\u6237\u548c\u5176\u4ed6 \u6240\u6709 \u7528\u6237\u8fdb\u884c\u5bf9\u6bd4\uff0c\u627e\u5230\u76f8\u4f3c\u7684\u4eba\u3002\u8fd9\u79cd\u7b97\u6cd5\u6709\u4e24\u4e2a\u5f0a\u7aef\uff1a \u6269\u5c55\u6027 \uff1a\u968f\u7740\u7528\u6237\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5176\u8ba1\u7b97\u91cf\u4e5f\u4f1a\u589e\u52a0\u3002\u8fd9\u79cd\u7b97\u6cd5\u5728\u53ea\u6709\u51e0\u5343\u4e2a\u7528\u6237\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u8fbe\u5230\u4e00\u767e\u4e07\u4e2a\u7528\u6237\u65f6\u5c31\u4f1a\u51fa\u73b0\u74f6\u9888\u3002 \u7a00\u758f\u6027 \uff1a\u5927\u591a\u6570\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u7528\u6237\u4ec5\u4ec5\u5bf9\u4e00\u5c0f\u90e8\u5206\u7269\u54c1\u8fdb\u884c\u4e86\u8bc4\u4ef7\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6570\u636e\u7684\u7a00\u758f\u6027\u3002\u6bd4\u5982\u4e9a\u9a6c\u900a\u6709\u4e0a\u767e\u4e07\u672c\u4e66\uff0c\u4f46\u7528\u6237\u53ea\u8bc4\u8bba\u4e86\u5f88\u5c11\u4e00\u90e8\u5206\uff0c\u4e8e\u662f\u5c31\u5f88\u96be\u627e\u5230\u4e24\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\u4e86\u3002","title":"\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5"},{"location":"bigdata/gdm/ch2/#_3","text":"\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6765\u8ba1\u7b97\u4e24\u4e2a\u7269\u54c1\u7684\u8ddd\u79bb\u3002\u7531\u4e8e\u201c\u5206\u6570\u81a8\u80c0\u201d\u73b0\u8c61\uff0c\u9700\u8981\u4ece\u7528\u6237\u7684\u8bc4\u4ef7\u4e2d\u51cf\u53bb\u4ed6\u6240\u6709\u8bc4\u4ef7\u7684\u5747\u503c\uff0c\u8fd9\u5c31\u662f\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6(Adjusted Cosine Similarity)\u3002\u8fd9\u4e2a\u516c\u5f0f\u6765\u81ea\u4e8e\u4e00\u7bc7\u5f71\u54cd\u6df1\u8fdc\u7684\u8bba\u6587\u300a \u57fa\u4e8e\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5 \u300b\u3002 s(i,j) =\\frac{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}} s(i,j) =\\frac{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}} U U \u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7\u7269\u54c1 i i \u548c j j \u7684\u7528\u6237\u96c6\u5408\uff0c \\bar R_u \\bar R_u \u8868\u793a\u7528\u6237 u u \u5bf9\u6240\u6709\u7269\u54c1\u7684\u8bc4\u4ef7\u5747\u503c\uff0c s(i,j) s(i,j) \u8868\u793a\u7269\u54c1 i i \u548c j j \u7684\u76f8\u4f3c\u5ea6\u3002 def cosinesimilarity ( item1 , item2 , userRatings ): averages = {} for user , ratings in userRatings . items (): averages [ user ] = ( float ( sum ( ratings . values ())) / len ( ratings . values ())) num = 0 # \u5206\u5b50 dem1 = 0 # \u5206\u6bcd\u7684\u7b2c\u4e00\u90e8\u5206 dem2 = 0 for ( user , ratings ) in userRatings . items (): if item1 in ratings and item2 in ratings : avg = averages [ user ] num += ( ratings [ item1 ] - avg ) * ( ratings [ item2 ] - avg ) dem1 += ( ratings [ item1 ] - avg ) ** 2 dem2 += ( ratings [ item1 ] - avg ) ** 2 return num / ( math . sqrt ( dem1 ) * math . sqrt ( dem2 ))","title":"\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6"},{"location":"bigdata/gdm/ch2/#_4","text":"\u90a3\u4e0b\u9762\u8be5\u5982\u4f55\u4f7f\u7528\u5b83\u6765\u505a\u9884\u6d4b\u5462\uff1f\u6bd4\u5982\u6211\u60f3\u77e5\u9053David\u6709\u591a\u559c\u6b22Kacey Musgraves\uff1f\u5728\u8a08\u7b97\u5b8c similarity \u4e4b\u5f8c\uff0c\u4e0b\u4e00\u6b65\u9a5f\u5c31\u662f\u8981\u9032\u884c\u67d0\u500b item \u7684\u9810\u6e2c\uff0c\u9019\u88e1\u6709\u5169\u7a2e\u65b9\u6cd5\uff0c\u5206\u5225\u662f\uff1a weighted-sum \u548c regression\u3002 weighted-sum p(u,i) = \\frac{{\\sum_{N\\in \\text{similarTo}(i)}(S_{i,N}\\times R_{u,N})}}{\\sum_{N\\in \\text{similarTo}(i)}|S_{i,N}|} p(u,i) = \\frac{{\\sum_{N\\in \\text{similarTo}(i)}(S_{i,N}\\times R_{u,N})}}{\\sum_{N\\in \\text{similarTo}(i)}|S_{i,N}|} \u5176\u4e2d p(u,i) p(u,i) \u8868\u793a\u9884\u6d4b\u7684\u7528\u6237 u u \u5bf9\u7269\u54c1 i i \u7684\u8bc4\u5206\uff0c S_{i,N} S_{i,N} \u8868\u793a\u7269\u54c1 i i \u548c N N \u7684\u76f8\u4f3c\u5ea6\uff0c R_{u,N} R_{u,N} \u8868\u793a\u7528\u6237 u u \u5bf9\u7269\u54c1 N N \u7684\u8bc4\u5206\u3002 N N \u662f\u4e00\u4e2a\u7269\u54c1\u7684\u96c6\u5408\uff0c\u6709\u5982\u4e0b\u7279\u6027\uff1a\u7528\u6237 u u \u5bf9\u96c6\u5408\u4e2d\u7684\u7269\u54c1\u6253\u8fc7\u5206\uff0c\u7269\u54c1 i i \u548c\u96c6\u5408\u4e2d\u7684\u7269\u54c1\u6709\u76f8\u4f3c\u5ea6\u6570\u636e\u3002","title":"\u9884\u6d4b"},{"location":"bigdata/gdm/ch2/#python","text":"class ItemBasedCF : \u4f7f\u7528\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5b9e\u73b0\u7269\u54c1\u63a8\u8350 def __init__ ( self , data ): initialize data :param data: a dict of (user, ratings) For instance, users2 = { Amy : { Taylor Swift : 4, PSY : 3, Whitney Houston : 4}, Clara : { PSY : 3.5, Whitney Houston : 4}, Daisy : { Taylor Swift : 5, Whitney Houston : 3}} self . data = data self . items = set () # a set of items # compute average user ratings of given data self . avg_user_rating = {} for user , ratings in data . items (): self . avg_user_rating [ user ] = np . average ( list ( ratings . values ())) for item in ratings . keys (): self . items . add ( item ) def adjusted_cosine_similarity ( self , item1 , item2 ): Compute adjusted cosine similarity :param item1: an item :param item2: an item :return: similarity if ( item1 not in self . items ) or ( item2 not in self . items ): raise ( Exception ( Input Item NOT FOUND! )) num = 0 # numerator den1 = 0 # denominator1 den2 = 0 # denominator2 for user , ratings in self . data . items (): if item1 in ratings and item2 in ratings : x = ratings [ item1 ] - self . avg_user_rating [ user ] y = ratings [ item2 ] - self . avg_user_rating [ user ] num += x * y den1 += x * x den2 += y * y den = np . sqrt ( den1 * den2 ) # denominator if den == 0 : return None return num / den def predict ( self , user , item ): predict rating of given user on given item :param user: an user :param item: an item :return: rating if user not in self . data : raise ( Exception ( Input User NOT FOUND! )) if item not in self . items : raise ( Exception ( Input Item NOT FOUND! )) num = 0 # numerator den = 0 # denominator for another_item , rating in self . data [ user ] . items (): if item != another_item : similarity = self . adjusted_cosine_similarity ( item , another_item ) if similarity is None : continue num += rating * similarity den += abs ( similarity ) if den == 0 : return None return num / den def recommend ( self , user ): recommend items to the user :param user: an user :return: a list of items(up to 10) recommendations = [] for item in self . items : if item not in self . data [ user ]: predict = self . predict ( user , item ) if predict is not None : recommendations . append (( predict , item )) recommendations . sort ( reverse = True ) return list ( map ( lambda x : x [ 1 ], recommendations ))","title":"\u4f7f\u7528Python\u5b9e\u73b0\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7b97\u6cd5"},{"location":"bigdata/gdm/ch2/#slope-one","text":"Slope One\u662f\u53e6\u4e00\u79cd\u6bd4\u8f83\u6d41\u884c\u7684\u57fa\u4e8e\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\u3002\u5b83\u6700\u5927\u7684\u4f18\u52bf\u662f\u7b80\u5355\uff0c\u6613\u4e8e\u5b9e\u73b0\u3002Slope One\u7b97\u6cd5\u662f\u5728\u4e00\u7bc7\u540d\u4e3a\u300a Slope One Predictors for Online Rating-Based Collaborative Filtering \u300b\u7684\u8bba\u6587\u4e2d\u63d0\u51fa\u7684\uff0c\u7531Lemire\u548cMachlachlan\u5408\u8457\u3002\u8fd9\u7bc7\u8bba\u6587\u975e\u5e38\u503c\u5f97\u4e00\u8bfb\u3002 \u6211\u4eec\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\u6765\u4e86\u89e3\u8fd9\u4e2a\u7b97\u6cd5\u3002\u5047\u8bbeA\u7ed9Item I\u6253\u4e861\u5206\uff0c\u7ed9Item J\u6253\u4e861.5\u5206\uff1bB\u7ed9Item I\u6253\u4e862\u5206\u3002\u6211\u4eec\u53ef\u4ee5\u7528\u4ee5\u4e0b\u903b\u8f91\u6765\u9884\u6d4bB\u5bf9Item J\u7684\u8bc4\u5206\uff1a\u7531\u4e8eA\u7ed9Item J\u6253\u7684\u5206\u6570\u8981\u6bd4Item I\u7684\u9ad80.5\u5206\uff0c\u6240\u4ee5\u6211\u4eec\u9884\u6d4bB\u4e5f\u4f1a\u7ed9\u9ad80.5\u5206\uff0c\u53732.5\u5206\u3002 \u53ef\u4ee5\u5c06Slope One\u5206\u4e3a\u4e24\u4e2a\u6b65\u9aa4\uff1a \u8ba1\u7b97\u51fa\u7269\u54c1\u4e4b\u95f4\u7684\u4e24\u4e24\u5dee\u503c(\u53ef\u4ee5\u5728\u591c\u95f4\u6279\u91cf\u8ba1\u7b97) \u8fdb\u884c\u9884\u6d4b\uff0c\u53ef\u4ee5\u4f7f\u7528\u52a0\u6743\u7684Slope One\u7b97\u6cd5","title":"Slope One\u7b97\u6cd5"},{"location":"bigdata/gdm/ch2/#_5","text":"\u7269\u54c1 i i \u4e0e\u7269\u54c1 j j \u4e4b\u95f4\u7684\u5e73\u5747\u5dee\u5f02\u4e3a\uff1a \\text{dev}_{i,j}=\\sum_{u\\in S_{i,j}(X)}\\frac{u_i-u_j}{\\text{card}(S_{i,j}(X))} \\text{dev}_{i,j}=\\sum_{u\\in S_{i,j}(X)}\\frac{u_i-u_j}{\\text{card}(S_{i,j}(X))} \u5176\u4e2d S_{i,j}(X) S_{i,j}(X) \u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7 i,j i,j \u7684\u7528\u6237\u96c6\u5408\uff0c \\text{card}(S) \\text{card}(S) \u8868\u793a S S \u4e2d\u6709\u591a\u5c11\u4e2a\u5143\u7d20\uff0c X X \u8868\u793a\u6240\u6709\u8bc4\u5206\u503c\u7684\u96c6\u5408\uff0c \\text{card}(S_{j,i}(X)) \\text{card}(S_{j,i}(X)) \u5219\u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7\u7269\u54c1 i i \u548c j j \u7684\u7528\u6237\u6570\uff0c u_i u_i \u8868\u793a\u7528\u6237 u u \u5bf9\u7269\u54c1 i i \u7684\u8bc4\u5206\u3002 Question \u5982\u679c\u6709\u4e00\u4e2a\u65b0\u8fdb\u7684\u7528\u6237\u5bf910\u4e2a\u6b4c\u624b\u505a\u4e86\u8bc4\u4ef7\uff0c\u6211\u4eec\u662f\u5426\u9700\u8981\u91cd\u65b0\u8ba1\u7b9720\u4e07\u00d720\u4e07\u7684\u5dee\u5f02\u6570\u636e\uff0c\u6216\u662f\u6709\u5176\u4ed6\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff1f \u7b54\u6848\u662f\u4f60\u4e0d\u9700\u8981\u8ba1\u7b97\u6574\u4e2a\u6570\u636e\u96c6\uff0c\u8fd9\u6b63\u662fSlope One\u7684\u7f8e\u5999\u4e4b\u5904\u3002\u5bf9\u4e8e\u4e24\u4e2a\u7269\u54c1\uff0c\u6211\u4eec\u53ea\u9700\u8bb0\u5f55\u540c\u65f6\u8bc4\u4ef7\u8fc7\u8fd9\u5bf9\u7269\u54c1\u7684\u7528\u6237\u6570\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u8ba1\u7b97\u5dee\u503c"},{"location":"bigdata/gdm/ch2/#slope-one_1","text":"\u4f7f\u7528\u52a0\u6743\u7684Slope One\u7b97\u6cd5(Weighted Slope One, WS1)\u6765\u8fdb\u884c\u9884\u6d4b\uff0c\u7528 P^{WS1} P^{WS1} \u6765\u8868\u793a\u9884\u6d4b\u7528\u6237 u u \u5bf9\u7269\u54c1 j j \u7684\u8bc4\u5206\uff1a P^{WS1}(u)_j=\\frac{\\sum_{i\\in S(u) - \\{j\\}}(\\text{dev}_{i,j}+u_i)c_{j,i}}{\\sum_{i\\in S(u) - \\{j\\}} c_{j,i}} P^{WS1}(u)_j=\\frac{\\sum_{i\\in S(u) - \\{j\\}}(\\text{dev}_{i,j}+u_i)c_{j,i}}{\\sum_{i\\in S(u) - \\{j\\}} c_{j,i}} \u5176\u4e2d\uff1a c_{j,i}=\\text{card}(S_{j,i}(\\chi)) c_{j,i}=\\text{card}(S_{j,i}(\\chi)) \u3002\u5f0f\u4e2d \\sum_{i\\in S(u) - \\{j\\}} \\sum_{i\\in S(u) - \\{j\\}} \u8868\u793a\u7528\u6237 u u \u8bc4\u4ef7\u7684\u9664 j j \u9664\u5916\u7684\u7269\u54c1\uff0c\u5176\u4ed6\u7b26\u53f7\u4e0e\u4e0a\u4e00\u8282\u7684\u542b\u4e49\u76f8\u540c\u3002\u8fd9\u4e2a\u516c\u5f0f\u5176\u5b9e\u5f88\u597d\u7406\u89e3\uff0c \\text{dev}_{i,j}+u_i \\text{dev}_{i,j}+u_i \u8868\u793a\u6839\u636e\u7269\u54c1 i i \u9884\u6d4b\u5f97\u5230\u7684\u7528\u6237 u u \u5bf9\u7269\u54c1 j j \u7684\u8bc4\u5206\uff0c\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u884c\u4e86\u52a0\u6743\u5e73\u5747\u5c31\u5f97\u5230 P^{WS1} P^{WS1} \u3002","title":"\u4f7f\u7528\u52a0\u6743\u7684Slope One\u7b97\u6cd5\u8fdb\u884c\u9884\u6d4b"},{"location":"bigdata/gdm/ch2/#pythonslope-one","text":"\u5176\u5b9e\u4ee3\u7801\u6574\u4f53\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u628a\u516c\u5f0f\u8f6c\u5316\u4e3a\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ca1\u6709\u4ec0\u4e48\u7279\u6b8a\u7684\u6280\u5de7\u3002\u552f\u4e00\u9700\u8981\u6ce8\u610f\u7684\u662f\u5c3d\u53ef\u80fd\u7684\u6d4b\u8bd5\u8be5\u7a0b\u5e8f\uff0c\u4fdd\u8bc1\u5176\u6b63\u786e\u6027\u3002\u7531\u4e8e\u7f51\u4e0a\u6709\u4e0d\u5c11SlopeOne\u4ee3\u7801\uff0c\u6211\u81ea\u5df1\u5199\u5b8c\u4ee5\u540e\u548c\u4ed6\u4eec\u7684\u7ed3\u679c\u6bd4\u5bf9\uff0c\u53d1\u73b0\u5b8c\u5168\u4e00\u81f4\u3002 class SlopeOne : def __init__ ( self , data ): initialize :param data: a dictionary, whose key is an item, and value is a rating. self . data = data # frequencies, a dictionary, whose key is an item, # and value is a dictionary of (item, frequency) self . frequencies = {} # deviations, a dictionary, whose key is an item, # and value is a dictionary of (item, deviation) self . deviations = {} def computeDeviations ( self ): compute deviations between items :return: # \u83b7\u53d6\u6bcf\u4f4d\u7528\u6237\u7684\u8bc4\u5206\u6570\u636eratings for ratings in self . data . values (): # \u5bf9\u4e8e\u8be5\u7528\u6237\u7684\u6bcf\u4e2a\u8bc4\u5206\u9879(\u6b4c\u624b\u3001\u5206\u6570) for ( item1 , rating1 ) in ratings . items (): self . frequencies . setdefault ( item1 , {}) self . deviations . setdefault ( item1 , {}) # \u518d\u6b21\u904d\u5386\u8be5\u7528\u6237\u7684\u6bcf\u4e2a\u8bc4\u5206\u9879 for ( item2 , rating2 ) in ratings . items (): if item1 != item2 : # \u5c06\u8bc4\u5206\u7684\u5dee\u5f02\u4fdd\u5b58\u5230\u53d8\u91cf\u4e2d self . frequencies [ item1 ] . setdefault ( item2 , 0 ) self . deviations [ item1 ] . setdefault ( item2 , 0.0 ) self . frequencies [ item1 ][ item2 ] += 1 self . deviations [ item1 ][ item2 ] += ( rating1 - rating2 ) # \u8ba1\u7b97deviations for item1 , deviations in self . deviations . items (): for item2 in deviations : deviations [ item2 ] /= self . frequencies [ item1 ][ item2 ] def predict ( self , user , item ): predict the ratings of the user regard to the item Using Weighted Slope One (WSO) :param user: an user :param item: an item :return: a prediction, double if user not in self . data : raise Exception # predictions predictions = 0 frequency = 0 # \u7528\u6237user \u8bc4\u4ef7\u7684\u9664 item \u9664\u5916\u7684\u7269\u54c1 for diff_item , ratings in self . data [ user ] . items (): if ( item == diff_item ) or ( diff_item not in self . deviations [ item ]): continue predictions += ( self . deviations [ item ][ diff_item ] + self . data [ user ][ diff_item ]) \\ * self . frequencies [ item ][ diff_item ] frequency += self . frequencies [ item ][ diff_item ] predictions /= frequency return predictions def recommendation ( self , user ): recommend items to user :param user: an user :return: a list of items recommended if user not in self . data : raise Exception if self . deviations == {}: self . computeDeviations () recommendations = [] # \u6240\u6709\u7684item for item in self . deviations . keys (): # \u7528\u6237\u672a\u8bc4\u4ef7\u8fc7\u7684item if item not in self . data [ user ]: recommendations . append (( item , self . predict ( user , item ))) recommendations . sort ( key = lambda x : x [ 1 ], reverse = True ) return list ( map ( lambda x : x [ 0 ], recommendations ))","title":"\u4f7f\u7528Python\u5b9e\u73b0Slope One\u7b97\u6cd5"},{"location":"bigdata/gdm/ch2/#example-movielens","text":"MovieLens\u6570\u636e\u96c6\u662f\u7531\u660e\u5c3c\u82cf\u8fbe\u5dde\u5927\u5b66\u7684GroupLens\u7814\u7a76\u9879\u76ee\u6536\u96c6\u7684\uff0c\u662f\u7528\u6237\u5bf9\u7535\u5f71\u7684\u8bc4\u5206\u3002 \u8fd9\u4e2a\u6570\u636e\u96c6\u53ef\u4ee5\u5728 www.grouplens.org \u4e0b\u8f7d\u3002\u5176\u4e2d100K\u6570\u636e\u96c6\u5305\u542b\u4e86943\u4f4d\u7528\u6237\u5bf91682\u90e8\u7535\u5f71\u7684\u8bc4\u4ef7\uff0c\u7ea610\u4e07\u6761\u8bb0\u5f55\u3002 \u4f7f\u7528MovieLens 100K\u6570\u636e\u96c6\u5904\u7406\u7684\u8fc7\u7a0b\u5982\u4e0b\uff1a \u6839\u636eREADME\u4e2d\u63cf\u8ff0\u7684\u6587\u4ef6\u683c\u5f0f\uff0c\u5c06\u7535\u5f71\u3001\u7528\u6237\u3001\u8bc4\u5206\u6570\u636e\u5bfc\u5165\u5e76\u8f6c\u5316\u4e3a\u5408\u9002\u7684\u6570\u636e\u683c\u5f0f \u5229\u7528SlopeOne\u8fdb\u884c\u63a8\u8350 \u5c06\u63a8\u8350\u7ed3\u679c\u5c55\u793a \u4ee3\u7801\u6574\u4f53\u975e\u5e38\u7b80\u6d01\u7684\uff0c\u56e0\u4e3a\u53ef\u4ee5\u76f4\u63a5\u7ee7\u627f\u4e0a\u9762\u5199\u7684SlopeOne\u7b97\u6cd5\u3002 class MovieRecommendation ( SlopeOne ): def __init__ ( self , data , movie ): super ( MovieRecommendation , self ) . __init__ ( data ) self . movie = movie def recommend_movie ( self , user ): movies = self . recommendation ( user )[: 10 ] return list ( map ( lambda x : self . movie [ x ][ title ], movies ))","title":"Example: MovieLens"},{"location":"bigdata/gdm/ch2/#_6","text":"http://www.diva-portal.se/smash/get/diva2:811049/FULLTEXT01.pdf https://dzone.com/articles/slope-one-recommender https://www.slideshare.net/irecsys/slope-one-recommender-on-hadoop-15199798?from_action=save#","title":"\u8fdb\u4e00\u6b65\u9605\u8bfb"},{"location":"bigdata/gdm/ch3/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 3 \u5206\u7c7b \u8bd5\u60f3\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff1a\u4e00\u4e2a\u65b0\u4e50\u961f\u53d1\u5e03\u4e86\u4e13\u8f91\uff0c\u8fd9\u5f20\u4e13\u8f91\u8fd8\u6ca1\u6709\u88ab\u4efb\u4f55\u7528\u6237\u8bc4\u4ef7\u6216\u8d2d\u4e70\u8fc7\uff0c\u5982\u679c\u662f\u7528\u534f\u540c\u8fc7\u6ee4\u7684\u8bdd\uff0c\u90a3\u5b83\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u5728\u63a8\u8350\u5217\u8868\u4e2d\u3002 \u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5 \u6839\u636e\u7269\u54c1\u7279\u5f81\u8fdb\u884c\u5206\u7c7b \u3002 \u6765\u770b\u4e00\u4e0b \u6f58\u591a\u62c9\u97f3\u4e50\u76d2 \u7684\u4f8b\u5b50\u3002\u5728\u8fd9\u4e2a\u7ad9\u70b9\u4e0a\u4f60\u53ef\u4ee5\u8bbe\u7acb\u5404\u79cd\u97f3\u4e50\u9891\u9053\uff0c\u53ea\u9700\u4e3a\u8fd9\u4e2a\u9891\u9053\u6dfb\u52a0\u4e00\u4e2a\u6b4c\u624b\uff0c\u6f58\u591a\u62c9\u5c31\u4f1a\u64ad\u653e\u548c\u8fd9\u4e2a\u6b4c\u624b\u98ce\u683c\u76f8\u7c7b\u4f3c\u7684\u6b4c\u66f2\u3002\u539f\u56e0\u5728\u4e8e\u6f58\u591a\u62c9\u7f51\u7ad9\u7684\u63a8\u8350\u7cfb\u7edf\u662f\u57fa\u4e8e\u4e00\u4e2a\u540d\u4e3a\u97f3\u4e50\u57fa\u56e0\u7684\u9879\u76ee\u3002 \u4ed6\u4eec\u96c7\u4f63\u4e86\u4e13\u4e1a\u7684\u97f3\u4e50\u5bb6\u5bf9\u6b4c\u66f2\u8fdb\u884c\u5206\u7c7b\uff08\u63d0\u53d6\u5b83\u4eec\u7684\u201c\u57fa\u56e0\u201d\uff09\uff1b\u8fd9\u4e9b\u4e13\u5bb6\u8981\u7504\u522b400\u591a\u79cd\u97f3\u4e50\u7279\u5f81\u3002 \u5177\u4f53\u65b9\u6cd5\u662f\u5c06\u6bcf\u79cd\u6b4c\u66f2\u7c7b\u578b\u62c6\u5206\u6210\u5355\u72ec\u7684\u7279\u5f81\uff0c\u5e76\u5bf9\u6b64\u8fdb\u884c\u6253\u5206\u3002\u6bcf\u4e2a\u7279\u5f81\u90fd\u662f1\u52305\u5206\u7684\u5c3a\u5ea6\uff0c0.5\u5206\u4e3a\u4e00\u6863\u30021\u5206\u8868\u793a\u5b8c\u5168\u4e0d\u7b26\u5408\uff0c5\u5206\u5219\u8868\u793a\u5f88\u76f8\u7b26\u3002 \u4e0b\u8868\u4f7f\u7528\u4e00\u4e9b\u97f3\u4e50\u7279\u5f81(\u4f7f\u7528\u94a2\u7434\u7684\u7a0b\u5ea6\u3001\u4f7f\u7528\u7f8e\u58f0\u7684\u7a0b\u5ea6\u3001\u8282\u594f\u7b49)\u5bf9\u6b4c\u66f2\u8fdb\u884c\u8bc4\u5206\uff1a \u53ef\u4ee5\u5c06\u4e0a\u8868\u5b58\u6210\u4e8c\u7ef4HashTable\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7b2c\u4e00\u7ae0\u4e2d\u7684\u5404\u79cd\u8ddd\u79bb\u8ba1\u7b97\u516c\u5f0f\u8ba1\u7b97\u6b4c\u66f2\u4e4b\u95f4\u7684\u8ddd\u79bb\u6765\u8fdb\u884c\u63a8\u8350\u3002\u6309\u6211\u7684\u7406\u89e3\uff0c\u53ef\u4ee5\u8fd9\u4e48\u770b\u5f85\u95ee\u9898\uff0c\u6216\u8bb8\u66f4\u52a0\u5bb9\u6613\u7406\u89e3\uff1a\u628a\u8fd9\u4e9b\u7279\u5f81(piano, vocals, driving beat)\u770b\u6210\u662f\u7528\u6237\uff0c\u5404\u4e2a\u7279\u5f81\u4e0a\u7684\u8bc4\u5206\u53ef\u4ee5\u770b\u6210\u662f\u7528\u6237\u8bc4\u5206\uff0c\u628a\u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u770b\u6210\u662f\u57fa\u4e8e\u7279\u5f81\u7684\u534f\u540c\u8fc7\u6ee4\u3002 \u8bc4\u5206\u6807\u51c6 \u5047\u5982\u6211\u60f3\u589e\u52a0\u4e00\u79cd\u97f3\u4e50\u7279\u5f81\u2014\u2014\u6bcf\u5206\u949f\u7684\u9f13\u70b9\u6570\uff08bpm\uff09\uff0c\u7528\u6765\u5224\u65ad\u8fd9\u662f\u4e00\u9996\u5feb\u6b4c\u8fd8\u662f\u6162\u6b4c\u3002\u7531\u4e8ebpm\u53d6\u503c\u8303\u56f4(100~200\u5de6\u53f3)\u4e0e\u524d\u9762(1~5)\u7684\u4e0d\u4e00\u81f4\uff0c\u5bfc\u81f4bpm\u57fa\u672c\u51b3\u5b9a\u4e86\u4e24\u9996\u6b4c\u7684\u8ddd\u79bb\u3002 \u8bc4\u5206\u6807\u51c6\u4e0d\u4e00\u662f\u6240\u6709\u63a8\u8350\u7cfb\u7edf\u7684\u5927\u654c\uff01\u8ba9\u6570\u636e\u53d8\u5f97\u53ef\u7528\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c \u6807\u51c6\u5316 (normalization)\u3002 Rescaling/Min-max normalization \u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u5c06\u6240\u6709\u6570\u636e\u90fd\u8f6c\u5316\u4e3a0\u52301\u4e4b\u95f4\u7684\u503c\uff1a \u5c06\u6bcf\u4e2a\u503c\u51cf\u53bb\u6700\u5c0f\u503c\uff0c\u5e76\u9664\u4ee5\u8303\u56f4\uff1a \\frac{x_i-\\min}{\\max-\\min} \\frac{x_i-\\min}{\\max-\\min} z-score normalization/Standardization \u8fd8\u53ef\u4ee5\u4f7f\u7528 \u6807\u51c6\u5206 (z-score or standard score)\uff1a\u5206\u503c\u504f\u79bb\u5747\u503c\u7684\u7a0b\u5ea6\uff0c \\text{standard score} = \\frac{x_i-\\bar x}{\\sigma} \\text{standard score} = \\frac{x_i-\\bar x}{\\sigma} Modified Z-Score \u6807\u51c6\u5206\u7684\u95ee\u9898\u5728\u4e8e\u5b83\u4f1a\u53d7\u5f02\u5e38\u503c\u7684\u5f71\u54cd\u3002 \u6bd4\u5982\u8bf4\u4e00\u5bb6\u516c\u53f8\u6709100\u540d\u5458\u5de5\uff0c\u666e\u901a\u5458\u5de5\u6bcf\u5c0f\u65f6\u8d5a10\u7f8e\u5143\uff0c\u800cCEO\u4e00\u5e74\u80fd\u8d5a600\u4e07\uff0c\u90a3\u5168\u516c\u53f8\u7684\u5e73\u5747\u65f6\u85aa\u4e3a38\u7f8e\u5143\u3002\u5728\u4fee\u6b63\u7684\u6807\u51c6\u5206(Modified Z-Score)\u4e2d\uff0c\u5c06\u6807\u51c6\u5206\u516c\u5f0f\u4e2d\u7684\u5747\u503c\u6539\u4e3a\u4e2d\u4f4d\u6570(median)\uff0c\u5c06\u6807\u51c6\u5dee\u6539\u4e3a \u5e73\u5747\u7edd\u5bf9\u504f\u5dee (MAD, Mean Absolute Deviation[ wiki ])\u3002 \\text{modified z-score}= \\frac{x_i-\\text{median}}{\\text{MAD}} \\text{modified z-score}= \\frac{x_i-\\text{median}}{\\text{MAD}} \\text{mean absolute deviation(MAD)} = \\frac{\\sum_i |x_i-\\text{median}|}{\\text{card}(x)} \\text{mean absolute deviation(MAD)} = \\frac{\\sum_i |x_i-\\text{median}|}{\\text{card}(x)} \u662f\u5426\u9700\u8981\u6807\u51c6\u5316\uff1f \u9700\u8981\u8fdb\u884c\u6807\u51c6\u5316\u7684\u60c5\u5f62\uff1a \u6211\u4eec\u9700\u8981\u901a\u8fc7\u7269\u54c1\u7279\u6027\u6765\u8ba1\u7b97\u8ddd\u79bb\uff1b \u4e0d\u540c\u7279\u6027\u4e4b\u95f4\u7684\u5c3a\u5ea6\u76f8\u5dee\u5f88\u5927\u3002 Python\u6570\u636e\u683c\u5f0f \u4e0a\u9762\u6211\u4eec\u7528\u4e8c\u7ef4HashTable\u7684\u5f62\u5f0f\u6765\u5b58\u50a8\u6b4c\u66f2\u7684\u7279\u5f81\u6570\u636e\uff0c\u8fd9\u6837\u505a\u867d\u7136\u53ef\u884c\uff0c\u4f46\u5374\u6bd4\u8f83\u7e41\u7410\uff0cpiano\u3001vocals\u8fd9\u6837\u7684\u952e\u540d\u9700\u8981\u91cd\u590d\u5f88\u591a\u6b21\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7b80\u5316\u4e3a\u5411\u91cf\uff0c\u5373Python\u4e2d\u7684\u6570\u7ec4\u7c7b\u578b\uff1a # \u7269\u54c1\u5411\u91cf\u4e2d\u7684\u7279\u5f81\u4f9d\u6b21\u4e3a\uff1apiano, vocals, beat, blues, guitar, backup vocals, rap items = { Dr Dog/Fate : [ 2.5 , 4 , 3.5 , 3 , 5 , 4 , 1 ], Phoenix/Lisztomania : [ 2 , 5 , 5 , 3 , 2 , 1 , 1 ], Heartless Bastards/Out : [ 1 , 5 , 4 , 2 , 4 , 1 , 1 ], Black Eyed Peas/Rock That Body : [ 2 , 5 , 5 , 1 , 2 , 2 , 4 ], Lady Gaga/Alejandro : [ 1 , 5 , 3 , 2 , 1 , 2 , 1 ] } \u90a3\u4e48\u7528\u6237\u201c\u8d5e\u201d\u548c\u201c\u8e29\u201d\u7684\u6570\u636e\u7528\u4ec0\u4e48\u8868\u793a\u5462\uff1f\u7531\u4e8e\u7528\u6237\u5e76\u4e0d\u4f1a\u5bf9\u6240\u6709\u7684\u6b4c\u66f2\u90fd\u505a\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u6240\u4ee5\u7528\u5d4c\u5957\u7684\u5b57\u5178\u6765\u8868\u793a\u6bd4\u8f83\u65b9\u4fbf\uff1a users = { Angelica : { Dr Dog/Fate : L , Phoenix/Lisztomania : L , Mike Posner : D , Black Eyed Peas/Rock That Body : D , Lady Gaga/Alejandro : L }, Bill : { Dr Dog/Fate : L , Phoenix/Lisztomania : L , Heartless Bastards/Out at Sea : L , Black Eyed Peas/Rock That Body : D , Lady Gaga/Alejandro : D }} \u8fd9\u91cc\u4f7f\u7528L\u548cD\u4e24\u4e2a\u5b57\u6bcd\u6765\u8868\u793a\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u3002 \u5206\u7c7b\u5668 \u5206\u7c7b\u5668\u662f\u6307\u901a\u8fc7\u7269\u54c1\u7279\u5f81\u6765\u5224\u65ad\u5b83\u5e94\u8be5\u5c5e\u4e8e\u54ea\u4e2a\u7ec4\u6216\u7c7b\u522b\u7684\u7a0b\u5e8f\u3002\u5206\u7c7b\u5668\u7a0b\u5e8f\u4f1a\u57fa\u4e8e\u4e00\u7ec4\u5df2\u7ecf\u505a\u8fc7\u5206\u7c7b\u7684\u7269\u54c1\u8fdb\u884c\u5b66\u4e60\uff0c\u4ece\u800c\u5224\u65ad\u65b0\u7269\u54c1\u7684\u6240\u5c5e\u7c7b\u522b\u3002 \u5efa\u7acb\u4e00\u4e2a\u5206\u7c7b\u51fd\u6570\uff0c\u7528\u6765\u9884\u6d4b\u7528\u6237\u5bf9\u4e00\u4e2a\u65b0\u7269\u54c1\u7684\u559c\u597d;\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5148\u8ba1\u7b97\u51fa\u4e0e\u8fd9\u4e2a\u7269\u54c1\u8ddd\u79bb\u6700\u8fd1\u7684\u7269\u54c1\uff0c\u7136\u540e\u627e\u5230\u7528\u6237\u5bf9\u8fd9\u4e2a\u6700\u8fd1\u7269\u54c1\u7684\u8bc4\u4ef7\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u65b0\u7269\u54c1\u7684\u9884\u6d4b\u503c\u3002 class simple_classifier : def __init__ ( self , users , items ): self . users = users self . items = items def computeNearestNeighbor ( self , itemName , itemVector , items ): \u6309\u7167\u8ddd\u79bb\u6392\u5e8f\uff0c\u8fd4\u56de\u90bb\u8fd1\u7269\u54c1\u5217\u8868 :param itemName :param itemVector :param items distances = [] for otherItem in items : if otherItem != itemName : distance = DistanceVector . manhattan ( itemVector , items [ otherItem ]) distances . append (( distance , otherItem )) # \u6700\u8fd1\u7684\u6392\u5728\u524d\u9762 distances . sort () return distances def classify ( self , user , itemName , itemVector ): nearest = self . computeNearestNeighbor ( itemName , itemVector , self . items )[ 0 ][ 1 ] rating = self . users [ user ][ nearest ] return rating \u8ba9\u6211\u4eec\u8bd5\u7528\u4e00\u4e0b\uff1a classify ( Angelica , Chris Cagle/I Breathe In. I Breathe Out , [ 1 , 5 , 2.5 , 1 , 1 , 5 , 1 ]) L \u5176\u5b9e\u6211\u4eec\u505a\u7684\u662f\u4e00\u4e2a\u5206\u7c7b\u5668\uff0c\u5c06\u6b4c\u66f2\u5206\u4e3a\u4e86\u7528\u6237\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u4e2a\u7c7b\u522b\u3002 Example:\u8fd0\u52a8\u9879\u76ee \u5148\u770b\u4e00\u4e2a\u8f83\u4e3a\u7b80\u5355\u7684\u4f8b\u5b50\u2014\u2014\u6839\u636e\u5973\u8fd0\u52a8\u5458\u7684\u8eab\u9ad8\u548c\u4f53\u91cd\u6765\u5224\u65ad\u5979\u4eec\u662f\u4ece\u4e8b\u4ec0\u4e48\u8fd0\u52a8\u9879\u76ee\u7684\u3002\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u522b\u6765\u81eaathletesTrainingSet.txt\u548cathletesTestSet.txt\u3002\u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a comment class num num Asuka Teramoto Gymnastics 54 66 Brittainey Raven Basketball 72 162 \u6570\u636e\u683c\u5f0f \u5728Python\u4e2d\u5e94\u8be5\u5982\u4f55\u5408\u9002\u7684\u8868\u793a\u8fd9\u4e9b\u6570\u636e\u5462\uff1f\u7531\u4e8e\u5206\u7c7b\u5668\u7a0b\u5e8f\u6839\u672c\u4e0d\u4f1a\u4f7f\u7528\u5230\u59d3\u540d\uff0c\u6240\u4ee5\u7528\u59d3\u540d\u4f5c\u4e3a\u952e\u503c\u7684\u5b57\u5178\u662f\u4e0d\u5408\u9002\u7684\u3002\u7531\u4e8e\u6211\u4eec\u9700\u8981\u904d\u5386\u6587\u4ef6\u7684\u6570\u636e\uff0c\u6240\u4ee5\u4f7f\u7528list\u7c7b\u578b\u662f\u5408\u7406\u7684\u3002\u5982\u4e0b\u662f\u6700\u5408\u7406\u7684\uff1a [( Gymnastics , [ 54 , 66 ], [ Asuka Termoto ]), ( Basketball , [ 72 , 162 ], [ Brittainey Raven ]), ... ] \u5b83\u5c06\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u533a\u522b\u5f00\u6765\u4e86\uff0c\u4f9d\u6b21\u662f\u5206\u7c7b\u3001\u7279\u5f81\u3001\u5907\u6ce8\u3002 Python\u4ee3\u7801 class AthleteClassifier : def __init__ ( self , filename = None , format = None , header = True ): initialize :param format: num, comment, class :param filename: filename for training data :param header: whether header line exist # format self . format = format # self.data format: class, fields, comments self . data = None # a list of median self . medians = [] # mean absolute deviation self . mad = [] # test result self . test_result = None # classes self . classes = set () # training data if a file is provided if filename and format : # data self . data = self . pre_processing ( filename , header ) # mad self . mean_absolute_deviation () # normalize self . normalizeColumn () def pre_processing ( self , filename , header = True ): read file and transform to data format :param filename: filename for training data :param header: whether header line exist file = codecs . open ( filename , mode = r , encoding = utf-8 ) # skip header if header : file . readline () data = [] n = len ( self . format ) for line in file . readlines (): fields = line . strip ( \\n ) . split ( \\t ) if len ( fields ) != n : raise ( Exception ( Input File Format Error )) vector , comment , classification = ([], , None ) for i in range ( n ): field , field_format = fields [ i ], self . format [ i ] if field_format == num : vector . append ( float ( field )) elif field_format == class : classification = field self . classes . add ( field ) elif field_format == comment : comment += ( field + ) data . append ([ classification , vector , comment . strip ()]) return data def mean_absolute_deviation ( self ): calculate mean absolute deviation of each fields for data for i in range ( len ( self . data [ 0 ][ 1 ])): # calculate median field = list ( map ( lambda x : x [ 1 ][ i ], self . data )) self . medians . append ( np . median ( field )) self . mad . append ( sum ( abs ( np . array ( field ) - self . medians [ i ])) / len ( field )) def normalizeColumn ( self ): given a column number, normalize that column in self.data using the Modified Standard Score Modified Standard Score = score - median /(maxScore - minScore) for item in self . data : for j in range ( len ( item [ 1 ])): item [ 1 ][ j ] = ( item [ 1 ][ j ] - self . medians [ j ]) / self . mad [ j ] def normalizeVector ( self , itemVector ): given a vector, having the same format as the vector in the self.data[0][1], normalize it using a modified z-score :param itemVector: a vector, size of fields in self.data :return: a vector normazalied return [( itemVector [ j ] - self . medians [ j ]) / self . mad [ j ] for j in range ( len ( itemVector ))] def nearest_neighbor ( self , itemVector ): find nearest neighbor :param itemVector: a vector :return: nearest neighbor and the distance between them distance = [( DistanceVector . manhattan ( np . array ( itemVector ), np . array ( item [ 1 ])), item ) for item in self . data ] return min ( distance ) def classify ( self , itemVector ): \u9884\u6d4bitemVector\u7684\u5206\u7c7b :return: the result of the classification return self . nearest_neighbor ( self . normalizeVector ( itemVector ))[ 1 ][ 0 ] def initialize_test_result ( self ): initialize test result self . test_result = {} classes = list ( self . classes ) classes . sort () for class_name in classes : self . test_result . setdefault ( class_name , {}) for another_class_name in classes : self . test_result [ class_name ][ another_class_name ] = 0 def test ( self , testfile , header = True ): test file, return accuracy :param testfile: a file :param header: whether header line exist :return: double, accuracy accurate = 0 # check if test result is initialized if not self . test_result : self . initialize_test_result () test_data = self . pre_processing ( testfile , header ) for item in test_data : classify_result = self . classify ( item [ 1 ]) self . test_result [ item [ 0 ]][ classify_result ] += 1 if classify_result == item [ 0 ]: accurate += 1 #else: #print(item, not equals , classify_result) return round ( accurate / float ( len ( test_data )) * 100 , 1 ) \u7ed3\u679c\u6d4b\u8bd5\u51c6\u786e\u7387\u4e3a84%\u3002 classifier = AthleteClassifier ( training_file , [ comment , class , num , num ], header = True ) print ( classifier . test ( test_file , header = True )) #84.2 Example: \u9e22\u5c3e\u82b1 \u9e22\u5c3e\u82b1\u6570\u636e\u96c6\u5728\u6570\u636e\u6316\u6398\u9886\u57df\u662f\u6bd4\u8f83\u6709\u540d\u7684\u3002 \u5b83\u662f20\u4e16\u7eaa30\u5e74\u4ee3Ronald Fisher\u5bf9\u4e09\u79cd\u9e22\u5c3e\u82b1\u768450\u4e2a\u6837\u672c\u505a\u7684\u6d4b\u91cf\u6570\u636e(\u843c\u7247\u548c\u82b1\u74e3)\u3002\u8bad\u7ec3\u96c6\u4e2d\u6709120\u6761\u6570\u636e\uff0c\u6d4b\u8bd5\u96c6\u4e2d\u670930\u6761\uff0c\u4e24\u8005\u6ca1\u6709\u4ea4\u96c6\u3002 \u6d4b\u8bd5\u7ed3\u679c\u8868\u660e\u4f7f\u7528\u540c\u6837\u7684\u5206\u7c7b\u5668\u670993.1\u7684\u6b63\u786e\u7387\u3002\u5982\u679c\u8ba1\u7b97\u8ddd\u79bb\u65f6\uff0c\u4f7f\u7528\u6b27\u5f0f\u8ddd\u79bb\uff0c\u5206\u7c7b\u5668\u670996.6%\u7684\u6b63\u786e\u7387\u3002 classifier = AthleteClassifier ( training_file , [ num , num , num , num , class ], header = True ) classifier . test ( test_file , header = False ) # 93.1% correct Example: \u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570 \u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7edf\u8ba1\u7684\u6c7d\u8f66\u71c3\u6cb9\u6d88\u8017\u548c\u516c\u91cc\u6570\u6570\u636e\u4e5f\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u96c6\u3002\u5927\u81f4\u683c\u5f0f\u5982\u4e0b\uff1a \u6839\u636e\u6c7d\u7f38\u6570\u3001\u6392\u6c14\u91cf\u3001\u9a6c\u529b\u3001\u91cd\u91cf\u3001 \u52a0\u901f\u5ea6\u7b49\u6570\u636e\u9884\u6d4b\u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570(mpg)\u3002\u5982\u679c\u4e0d\u8fdb\u884c\u6807\u51c6\u5316\uff0c\u51c6\u786e\u7387\u5c06\u53ea\u670932%\u3002\u6807\u51c6\u5316\u4e4b\u540e\u670955%\u51c6\u786e\u7387\u3002","title":"Chapter 3: \u5206\u7c7b"},{"location":"bigdata/gdm/ch3/#-3","text":"\u8bd5\u60f3\u4e00\u4e2a\u6781\u7aef\u7684\u4f8b\u5b50\uff1a\u4e00\u4e2a\u65b0\u4e50\u961f\u53d1\u5e03\u4e86\u4e13\u8f91\uff0c\u8fd9\u5f20\u4e13\u8f91\u8fd8\u6ca1\u6709\u88ab\u4efb\u4f55\u7528\u6237\u8bc4\u4ef7\u6216\u8d2d\u4e70\u8fc7\uff0c\u5982\u679c\u662f\u7528\u534f\u540c\u8fc7\u6ee4\u7684\u8bdd\uff0c\u90a3\u5b83\u5c06\u6c38\u8fdc\u4e0d\u4f1a\u51fa\u73b0\u5728\u63a8\u8350\u5217\u8868\u4e2d\u3002 \u8fd9\u65f6\u6211\u4eec\u53ef\u4ee5 \u6839\u636e\u7269\u54c1\u7279\u5f81\u8fdb\u884c\u5206\u7c7b \u3002 \u6765\u770b\u4e00\u4e0b \u6f58\u591a\u62c9\u97f3\u4e50\u76d2 \u7684\u4f8b\u5b50\u3002\u5728\u8fd9\u4e2a\u7ad9\u70b9\u4e0a\u4f60\u53ef\u4ee5\u8bbe\u7acb\u5404\u79cd\u97f3\u4e50\u9891\u9053\uff0c\u53ea\u9700\u4e3a\u8fd9\u4e2a\u9891\u9053\u6dfb\u52a0\u4e00\u4e2a\u6b4c\u624b\uff0c\u6f58\u591a\u62c9\u5c31\u4f1a\u64ad\u653e\u548c\u8fd9\u4e2a\u6b4c\u624b\u98ce\u683c\u76f8\u7c7b\u4f3c\u7684\u6b4c\u66f2\u3002\u539f\u56e0\u5728\u4e8e\u6f58\u591a\u62c9\u7f51\u7ad9\u7684\u63a8\u8350\u7cfb\u7edf\u662f\u57fa\u4e8e\u4e00\u4e2a\u540d\u4e3a\u97f3\u4e50\u57fa\u56e0\u7684\u9879\u76ee\u3002 \u4ed6\u4eec\u96c7\u4f63\u4e86\u4e13\u4e1a\u7684\u97f3\u4e50\u5bb6\u5bf9\u6b4c\u66f2\u8fdb\u884c\u5206\u7c7b\uff08\u63d0\u53d6\u5b83\u4eec\u7684\u201c\u57fa\u56e0\u201d\uff09\uff1b\u8fd9\u4e9b\u4e13\u5bb6\u8981\u7504\u522b400\u591a\u79cd\u97f3\u4e50\u7279\u5f81\u3002 \u5177\u4f53\u65b9\u6cd5\u662f\u5c06\u6bcf\u79cd\u6b4c\u66f2\u7c7b\u578b\u62c6\u5206\u6210\u5355\u72ec\u7684\u7279\u5f81\uff0c\u5e76\u5bf9\u6b64\u8fdb\u884c\u6253\u5206\u3002\u6bcf\u4e2a\u7279\u5f81\u90fd\u662f1\u52305\u5206\u7684\u5c3a\u5ea6\uff0c0.5\u5206\u4e3a\u4e00\u6863\u30021\u5206\u8868\u793a\u5b8c\u5168\u4e0d\u7b26\u5408\uff0c5\u5206\u5219\u8868\u793a\u5f88\u76f8\u7b26\u3002 \u4e0b\u8868\u4f7f\u7528\u4e00\u4e9b\u97f3\u4e50\u7279\u5f81(\u4f7f\u7528\u94a2\u7434\u7684\u7a0b\u5ea6\u3001\u4f7f\u7528\u7f8e\u58f0\u7684\u7a0b\u5ea6\u3001\u8282\u594f\u7b49)\u5bf9\u6b4c\u66f2\u8fdb\u884c\u8bc4\u5206\uff1a \u53ef\u4ee5\u5c06\u4e0a\u8868\u5b58\u6210\u4e8c\u7ef4HashTable\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u7b2c\u4e00\u7ae0\u4e2d\u7684\u5404\u79cd\u8ddd\u79bb\u8ba1\u7b97\u516c\u5f0f\u8ba1\u7b97\u6b4c\u66f2\u4e4b\u95f4\u7684\u8ddd\u79bb\u6765\u8fdb\u884c\u63a8\u8350\u3002\u6309\u6211\u7684\u7406\u89e3\uff0c\u53ef\u4ee5\u8fd9\u4e48\u770b\u5f85\u95ee\u9898\uff0c\u6216\u8bb8\u66f4\u52a0\u5bb9\u6613\u7406\u89e3\uff1a\u628a\u8fd9\u4e9b\u7279\u5f81(piano, vocals, driving beat)\u770b\u6210\u662f\u7528\u6237\uff0c\u5404\u4e2a\u7279\u5f81\u4e0a\u7684\u8bc4\u5206\u53ef\u4ee5\u770b\u6210\u662f\u7528\u6237\u8bc4\u5206\uff0c\u628a\u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u770b\u6210\u662f\u57fa\u4e8e\u7279\u5f81\u7684\u534f\u540c\u8fc7\u6ee4\u3002","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 3 \u5206\u7c7b"},{"location":"bigdata/gdm/ch3/#_1","text":"\u5047\u5982\u6211\u60f3\u589e\u52a0\u4e00\u79cd\u97f3\u4e50\u7279\u5f81\u2014\u2014\u6bcf\u5206\u949f\u7684\u9f13\u70b9\u6570\uff08bpm\uff09\uff0c\u7528\u6765\u5224\u65ad\u8fd9\u662f\u4e00\u9996\u5feb\u6b4c\u8fd8\u662f\u6162\u6b4c\u3002\u7531\u4e8ebpm\u53d6\u503c\u8303\u56f4(100~200\u5de6\u53f3)\u4e0e\u524d\u9762(1~5)\u7684\u4e0d\u4e00\u81f4\uff0c\u5bfc\u81f4bpm\u57fa\u672c\u51b3\u5b9a\u4e86\u4e24\u9996\u6b4c\u7684\u8ddd\u79bb\u3002 \u8bc4\u5206\u6807\u51c6\u4e0d\u4e00\u662f\u6240\u6709\u63a8\u8350\u7cfb\u7edf\u7684\u5927\u654c\uff01\u8ba9\u6570\u636e\u53d8\u5f97\u53ef\u7528\u6211\u4eec\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c \u6807\u51c6\u5316 (normalization)\u3002","title":"\u8bc4\u5206\u6807\u51c6"},{"location":"bigdata/gdm/ch3/#rescalingmin-max-normalization","text":"\u6700\u5e38\u7528\u7684\u65b9\u6cd5\u662f\u5c06\u6240\u6709\u6570\u636e\u90fd\u8f6c\u5316\u4e3a0\u52301\u4e4b\u95f4\u7684\u503c\uff1a \u5c06\u6bcf\u4e2a\u503c\u51cf\u53bb\u6700\u5c0f\u503c\uff0c\u5e76\u9664\u4ee5\u8303\u56f4\uff1a \\frac{x_i-\\min}{\\max-\\min} \\frac{x_i-\\min}{\\max-\\min}","title":"Rescaling/Min-max normalization"},{"location":"bigdata/gdm/ch3/#z-score-normalizationstandardization","text":"\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u6807\u51c6\u5206 (z-score or standard score)\uff1a\u5206\u503c\u504f\u79bb\u5747\u503c\u7684\u7a0b\u5ea6\uff0c \\text{standard score} = \\frac{x_i-\\bar x}{\\sigma} \\text{standard score} = \\frac{x_i-\\bar x}{\\sigma}","title":"z-score normalization/Standardization"},{"location":"bigdata/gdm/ch3/#modified-z-score","text":"\u6807\u51c6\u5206\u7684\u95ee\u9898\u5728\u4e8e\u5b83\u4f1a\u53d7\u5f02\u5e38\u503c\u7684\u5f71\u54cd\u3002 \u6bd4\u5982\u8bf4\u4e00\u5bb6\u516c\u53f8\u6709100\u540d\u5458\u5de5\uff0c\u666e\u901a\u5458\u5de5\u6bcf\u5c0f\u65f6\u8d5a10\u7f8e\u5143\uff0c\u800cCEO\u4e00\u5e74\u80fd\u8d5a600\u4e07\uff0c\u90a3\u5168\u516c\u53f8\u7684\u5e73\u5747\u65f6\u85aa\u4e3a38\u7f8e\u5143\u3002\u5728\u4fee\u6b63\u7684\u6807\u51c6\u5206(Modified Z-Score)\u4e2d\uff0c\u5c06\u6807\u51c6\u5206\u516c\u5f0f\u4e2d\u7684\u5747\u503c\u6539\u4e3a\u4e2d\u4f4d\u6570(median)\uff0c\u5c06\u6807\u51c6\u5dee\u6539\u4e3a \u5e73\u5747\u7edd\u5bf9\u504f\u5dee (MAD, Mean Absolute Deviation[ wiki ])\u3002 \\text{modified z-score}= \\frac{x_i-\\text{median}}{\\text{MAD}} \\text{modified z-score}= \\frac{x_i-\\text{median}}{\\text{MAD}} \\text{mean absolute deviation(MAD)} = \\frac{\\sum_i |x_i-\\text{median}|}{\\text{card}(x)} \\text{mean absolute deviation(MAD)} = \\frac{\\sum_i |x_i-\\text{median}|}{\\text{card}(x)}","title":"Modified Z-Score"},{"location":"bigdata/gdm/ch3/#_2","text":"\u9700\u8981\u8fdb\u884c\u6807\u51c6\u5316\u7684\u60c5\u5f62\uff1a \u6211\u4eec\u9700\u8981\u901a\u8fc7\u7269\u54c1\u7279\u6027\u6765\u8ba1\u7b97\u8ddd\u79bb\uff1b \u4e0d\u540c\u7279\u6027\u4e4b\u95f4\u7684\u5c3a\u5ea6\u76f8\u5dee\u5f88\u5927\u3002","title":"\u662f\u5426\u9700\u8981\u6807\u51c6\u5316\uff1f"},{"location":"bigdata/gdm/ch3/#python","text":"\u4e0a\u9762\u6211\u4eec\u7528\u4e8c\u7ef4HashTable\u7684\u5f62\u5f0f\u6765\u5b58\u50a8\u6b4c\u66f2\u7684\u7279\u5f81\u6570\u636e\uff0c\u8fd9\u6837\u505a\u867d\u7136\u53ef\u884c\uff0c\u4f46\u5374\u6bd4\u8f83\u7e41\u7410\uff0cpiano\u3001vocals\u8fd9\u6837\u7684\u952e\u540d\u9700\u8981\u91cd\u590d\u5f88\u591a\u6b21\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u7b80\u5316\u4e3a\u5411\u91cf\uff0c\u5373Python\u4e2d\u7684\u6570\u7ec4\u7c7b\u578b\uff1a # \u7269\u54c1\u5411\u91cf\u4e2d\u7684\u7279\u5f81\u4f9d\u6b21\u4e3a\uff1apiano, vocals, beat, blues, guitar, backup vocals, rap items = { Dr Dog/Fate : [ 2.5 , 4 , 3.5 , 3 , 5 , 4 , 1 ], Phoenix/Lisztomania : [ 2 , 5 , 5 , 3 , 2 , 1 , 1 ], Heartless Bastards/Out : [ 1 , 5 , 4 , 2 , 4 , 1 , 1 ], Black Eyed Peas/Rock That Body : [ 2 , 5 , 5 , 1 , 2 , 2 , 4 ], Lady Gaga/Alejandro : [ 1 , 5 , 3 , 2 , 1 , 2 , 1 ] } \u90a3\u4e48\u7528\u6237\u201c\u8d5e\u201d\u548c\u201c\u8e29\u201d\u7684\u6570\u636e\u7528\u4ec0\u4e48\u8868\u793a\u5462\uff1f\u7531\u4e8e\u7528\u6237\u5e76\u4e0d\u4f1a\u5bf9\u6240\u6709\u7684\u6b4c\u66f2\u90fd\u505a\u8fd9\u4e9b\u64cd\u4f5c\uff0c\u6240\u4ee5\u7528\u5d4c\u5957\u7684\u5b57\u5178\u6765\u8868\u793a\u6bd4\u8f83\u65b9\u4fbf\uff1a users = { Angelica : { Dr Dog/Fate : L , Phoenix/Lisztomania : L , Mike Posner : D , Black Eyed Peas/Rock That Body : D , Lady Gaga/Alejandro : L }, Bill : { Dr Dog/Fate : L , Phoenix/Lisztomania : L , Heartless Bastards/Out at Sea : L , Black Eyed Peas/Rock That Body : D , Lady Gaga/Alejandro : D }} \u8fd9\u91cc\u4f7f\u7528L\u548cD\u4e24\u4e2a\u5b57\u6bcd\u6765\u8868\u793a\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u3002","title":"Python\u6570\u636e\u683c\u5f0f"},{"location":"bigdata/gdm/ch3/#_3","text":"\u5206\u7c7b\u5668\u662f\u6307\u901a\u8fc7\u7269\u54c1\u7279\u5f81\u6765\u5224\u65ad\u5b83\u5e94\u8be5\u5c5e\u4e8e\u54ea\u4e2a\u7ec4\u6216\u7c7b\u522b\u7684\u7a0b\u5e8f\u3002\u5206\u7c7b\u5668\u7a0b\u5e8f\u4f1a\u57fa\u4e8e\u4e00\u7ec4\u5df2\u7ecf\u505a\u8fc7\u5206\u7c7b\u7684\u7269\u54c1\u8fdb\u884c\u5b66\u4e60\uff0c\u4ece\u800c\u5224\u65ad\u65b0\u7269\u54c1\u7684\u6240\u5c5e\u7c7b\u522b\u3002 \u5efa\u7acb\u4e00\u4e2a\u5206\u7c7b\u51fd\u6570\uff0c\u7528\u6765\u9884\u6d4b\u7528\u6237\u5bf9\u4e00\u4e2a\u65b0\u7269\u54c1\u7684\u559c\u597d;\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5148\u8ba1\u7b97\u51fa\u4e0e\u8fd9\u4e2a\u7269\u54c1\u8ddd\u79bb\u6700\u8fd1\u7684\u7269\u54c1\uff0c\u7136\u540e\u627e\u5230\u7528\u6237\u5bf9\u8fd9\u4e2a\u6700\u8fd1\u7269\u54c1\u7684\u8bc4\u4ef7\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u65b0\u7269\u54c1\u7684\u9884\u6d4b\u503c\u3002 class simple_classifier : def __init__ ( self , users , items ): self . users = users self . items = items def computeNearestNeighbor ( self , itemName , itemVector , items ): \u6309\u7167\u8ddd\u79bb\u6392\u5e8f\uff0c\u8fd4\u56de\u90bb\u8fd1\u7269\u54c1\u5217\u8868 :param itemName :param itemVector :param items distances = [] for otherItem in items : if otherItem != itemName : distance = DistanceVector . manhattan ( itemVector , items [ otherItem ]) distances . append (( distance , otherItem )) # \u6700\u8fd1\u7684\u6392\u5728\u524d\u9762 distances . sort () return distances def classify ( self , user , itemName , itemVector ): nearest = self . computeNearestNeighbor ( itemName , itemVector , self . items )[ 0 ][ 1 ] rating = self . users [ user ][ nearest ] return rating \u8ba9\u6211\u4eec\u8bd5\u7528\u4e00\u4e0b\uff1a classify ( Angelica , Chris Cagle/I Breathe In. I Breathe Out , [ 1 , 5 , 2.5 , 1 , 1 , 5 , 1 ]) L \u5176\u5b9e\u6211\u4eec\u505a\u7684\u662f\u4e00\u4e2a\u5206\u7c7b\u5668\uff0c\u5c06\u6b4c\u66f2\u5206\u4e3a\u4e86\u7528\u6237\u559c\u6b22\u548c\u4e0d\u559c\u6b22\u4e24\u4e2a\u7c7b\u522b\u3002","title":"\u5206\u7c7b\u5668"},{"location":"bigdata/gdm/ch3/#example","text":"\u5148\u770b\u4e00\u4e2a\u8f83\u4e3a\u7b80\u5355\u7684\u4f8b\u5b50\u2014\u2014\u6839\u636e\u5973\u8fd0\u52a8\u5458\u7684\u8eab\u9ad8\u548c\u4f53\u91cd\u6765\u5224\u65ad\u5979\u4eec\u662f\u4ece\u4e8b\u4ec0\u4e48\u8fd0\u52a8\u9879\u76ee\u7684\u3002\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u522b\u6765\u81eaathletesTrainingSet.txt\u548cathletesTestSet.txt\u3002\u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a comment class num num Asuka Teramoto Gymnastics 54 66 Brittainey Raven Basketball 72 162","title":"Example:\u8fd0\u52a8\u9879\u76ee"},{"location":"bigdata/gdm/ch3/#_4","text":"\u5728Python\u4e2d\u5e94\u8be5\u5982\u4f55\u5408\u9002\u7684\u8868\u793a\u8fd9\u4e9b\u6570\u636e\u5462\uff1f\u7531\u4e8e\u5206\u7c7b\u5668\u7a0b\u5e8f\u6839\u672c\u4e0d\u4f1a\u4f7f\u7528\u5230\u59d3\u540d\uff0c\u6240\u4ee5\u7528\u59d3\u540d\u4f5c\u4e3a\u952e\u503c\u7684\u5b57\u5178\u662f\u4e0d\u5408\u9002\u7684\u3002\u7531\u4e8e\u6211\u4eec\u9700\u8981\u904d\u5386\u6587\u4ef6\u7684\u6570\u636e\uff0c\u6240\u4ee5\u4f7f\u7528list\u7c7b\u578b\u662f\u5408\u7406\u7684\u3002\u5982\u4e0b\u662f\u6700\u5408\u7406\u7684\uff1a [( Gymnastics , [ 54 , 66 ], [ Asuka Termoto ]), ( Basketball , [ 72 , 162 ], [ Brittainey Raven ]), ... ] \u5b83\u5c06\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u533a\u522b\u5f00\u6765\u4e86\uff0c\u4f9d\u6b21\u662f\u5206\u7c7b\u3001\u7279\u5f81\u3001\u5907\u6ce8\u3002","title":"\u6570\u636e\u683c\u5f0f"},{"location":"bigdata/gdm/ch3/#python_1","text":"class AthleteClassifier : def __init__ ( self , filename = None , format = None , header = True ): initialize :param format: num, comment, class :param filename: filename for training data :param header: whether header line exist # format self . format = format # self.data format: class, fields, comments self . data = None # a list of median self . medians = [] # mean absolute deviation self . mad = [] # test result self . test_result = None # classes self . classes = set () # training data if a file is provided if filename and format : # data self . data = self . pre_processing ( filename , header ) # mad self . mean_absolute_deviation () # normalize self . normalizeColumn () def pre_processing ( self , filename , header = True ): read file and transform to data format :param filename: filename for training data :param header: whether header line exist file = codecs . open ( filename , mode = r , encoding = utf-8 ) # skip header if header : file . readline () data = [] n = len ( self . format ) for line in file . readlines (): fields = line . strip ( \\n ) . split ( \\t ) if len ( fields ) != n : raise ( Exception ( Input File Format Error )) vector , comment , classification = ([], , None ) for i in range ( n ): field , field_format = fields [ i ], self . format [ i ] if field_format == num : vector . append ( float ( field )) elif field_format == class : classification = field self . classes . add ( field ) elif field_format == comment : comment += ( field + ) data . append ([ classification , vector , comment . strip ()]) return data def mean_absolute_deviation ( self ): calculate mean absolute deviation of each fields for data for i in range ( len ( self . data [ 0 ][ 1 ])): # calculate median field = list ( map ( lambda x : x [ 1 ][ i ], self . data )) self . medians . append ( np . median ( field )) self . mad . append ( sum ( abs ( np . array ( field ) - self . medians [ i ])) / len ( field )) def normalizeColumn ( self ): given a column number, normalize that column in self.data using the Modified Standard Score Modified Standard Score = score - median /(maxScore - minScore) for item in self . data : for j in range ( len ( item [ 1 ])): item [ 1 ][ j ] = ( item [ 1 ][ j ] - self . medians [ j ]) / self . mad [ j ] def normalizeVector ( self , itemVector ): given a vector, having the same format as the vector in the self.data[0][1], normalize it using a modified z-score :param itemVector: a vector, size of fields in self.data :return: a vector normazalied return [( itemVector [ j ] - self . medians [ j ]) / self . mad [ j ] for j in range ( len ( itemVector ))] def nearest_neighbor ( self , itemVector ): find nearest neighbor :param itemVector: a vector :return: nearest neighbor and the distance between them distance = [( DistanceVector . manhattan ( np . array ( itemVector ), np . array ( item [ 1 ])), item ) for item in self . data ] return min ( distance ) def classify ( self , itemVector ): \u9884\u6d4bitemVector\u7684\u5206\u7c7b :return: the result of the classification return self . nearest_neighbor ( self . normalizeVector ( itemVector ))[ 1 ][ 0 ] def initialize_test_result ( self ): initialize test result self . test_result = {} classes = list ( self . classes ) classes . sort () for class_name in classes : self . test_result . setdefault ( class_name , {}) for another_class_name in classes : self . test_result [ class_name ][ another_class_name ] = 0 def test ( self , testfile , header = True ): test file, return accuracy :param testfile: a file :param header: whether header line exist :return: double, accuracy accurate = 0 # check if test result is initialized if not self . test_result : self . initialize_test_result () test_data = self . pre_processing ( testfile , header ) for item in test_data : classify_result = self . classify ( item [ 1 ]) self . test_result [ item [ 0 ]][ classify_result ] += 1 if classify_result == item [ 0 ]: accurate += 1 #else: #print(item, not equals , classify_result) return round ( accurate / float ( len ( test_data )) * 100 , 1 ) \u7ed3\u679c\u6d4b\u8bd5\u51c6\u786e\u7387\u4e3a84%\u3002 classifier = AthleteClassifier ( training_file , [ comment , class , num , num ], header = True ) print ( classifier . test ( test_file , header = True )) #84.2","title":"Python\u4ee3\u7801"},{"location":"bigdata/gdm/ch3/#example_1","text":"\u9e22\u5c3e\u82b1\u6570\u636e\u96c6\u5728\u6570\u636e\u6316\u6398\u9886\u57df\u662f\u6bd4\u8f83\u6709\u540d\u7684\u3002 \u5b83\u662f20\u4e16\u7eaa30\u5e74\u4ee3Ronald Fisher\u5bf9\u4e09\u79cd\u9e22\u5c3e\u82b1\u768450\u4e2a\u6837\u672c\u505a\u7684\u6d4b\u91cf\u6570\u636e(\u843c\u7247\u548c\u82b1\u74e3)\u3002\u8bad\u7ec3\u96c6\u4e2d\u6709120\u6761\u6570\u636e\uff0c\u6d4b\u8bd5\u96c6\u4e2d\u670930\u6761\uff0c\u4e24\u8005\u6ca1\u6709\u4ea4\u96c6\u3002 \u6d4b\u8bd5\u7ed3\u679c\u8868\u660e\u4f7f\u7528\u540c\u6837\u7684\u5206\u7c7b\u5668\u670993.1\u7684\u6b63\u786e\u7387\u3002\u5982\u679c\u8ba1\u7b97\u8ddd\u79bb\u65f6\uff0c\u4f7f\u7528\u6b27\u5f0f\u8ddd\u79bb\uff0c\u5206\u7c7b\u5668\u670996.6%\u7684\u6b63\u786e\u7387\u3002 classifier = AthleteClassifier ( training_file , [ num , num , num , num , class ], header = True ) classifier . test ( test_file , header = False ) # 93.1% correct","title":"Example: \u9e22\u5c3e\u82b1"},{"location":"bigdata/gdm/ch3/#example_2","text":"\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7edf\u8ba1\u7684\u6c7d\u8f66\u71c3\u6cb9\u6d88\u8017\u548c\u516c\u91cc\u6570\u6570\u636e\u4e5f\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u96c6\u3002\u5927\u81f4\u683c\u5f0f\u5982\u4e0b\uff1a \u6839\u636e\u6c7d\u7f38\u6570\u3001\u6392\u6c14\u91cf\u3001\u9a6c\u529b\u3001\u91cd\u91cf\u3001 \u52a0\u901f\u5ea6\u7b49\u6570\u636e\u9884\u6d4b\u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570(mpg)\u3002\u5982\u679c\u4e0d\u8fdb\u884c\u6807\u51c6\u5316\uff0c\u51c6\u786e\u7387\u5c06\u53ea\u670932%\u3002\u6807\u51c6\u5316\u4e4b\u540e\u670955%\u51c6\u786e\u7387\u3002","title":"Example: \u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570"},{"location":"bigdata/gdm/ch4/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 4 \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b \u6548\u679c\u8bc4\u4f30\u7b97\u6cd5\u548ckNN \u5f53\u6211\u4eec\u6784\u5efa\u5b8c\u4e00\u4e2a\u5206\u7c7b\u5668\u540e\uff0c\u5e94\u8be5\u95ee\u4ee5\u4e0b\u95ee\u9898\uff1a\u5206\u7c7b\u5668\u7684\u51c6\u786e\u5ea6\u5982\u4f55\uff1f \u7ed3\u679c\u7406\u60f3\u5417\uff1f \u5982\u4f55\u4e0e\u5176\u5b83\u5206\u7c7b\u5668\u505a\u6bd4\u8f83\uff1f \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6 \u6570\u636e\u96c6\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u7528\u6765\u6784\u9020\u5206\u7c7b\u5668\uff0c\u79f0\u4e3a \u8bad\u7ec3\u96c6 \uff1b\u53e6\u4e00\u90e8\u5206\u7528\u6765\u8bc4\u4f30\u5206\u7c7b\u5668\u7684\u7ed3\u679c\uff0c\u79f0\u4e3a \u6d4b\u8bd5\u96c6 \u3002 k\u6298\u4ea4\u53c9\u9a8c\u8bc1 \u4e0d\u8fc7\uff0c\u8fd9\u79cd\u4e0a\u9762\u8fd9\u79cd\u7b80\u5355\u3001\u76f4\u63a5\u7684\u505a\u6cd5\u4f3c\u4e4e\u6709\u95ee\u9898\uff1a\u5982\u679c\u5206\u5272\u7684\u65f6\u5019\u4e0d\u51d1\u5de7\uff0c\u5c31\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u6bd4\u5982\uff0c\u82e5\u6d4b\u8bd5\u96c6\u4e2d\u7684\u7bee\u7403\u8fd0\u52a8\u5458\u6070\u5de7\u90fd\u5f88\u77ee\uff0c\u5979\u4eec\u5c31\u4f1a\u88ab\u5f52\u4e3a\u9a6c\u62c9\u677e\u8fd0\u52a8\u5458\u3002\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u5c06\u6570\u636e\u96c6\u6309\u4e0d\u540c\u7684\u65b9\u5f0f\u62c6\u5206\uff0c\u6d4b\u8bd5\u591a\u6b21\uff0c\u53d6\u7ed3\u679c\u7684\u5e73\u5747\u503c\u3002 \u5982\u679c\u5c06\u6570\u636e\u96c6\u5206\u6210 k k \u4efd\uff0c\u7528 k-1 k-1 \u4efd\u6765\u505a\u8bad\u7ec3\u96c6\uff0c\u53e6\u4e00\u4efd\u6765\u505a\u6d4b\u8bd5\u96c6\uff0c\u5e76\u8fed\u4ee3 k k \u6b21\uff0c\u53eb\u505a k k \u6298\u4ea4\u53c9\u9a8c\u8bc1 ( k k -fold cross validation)\u3002\u5728\u6570\u636e\u6316\u6398\u4e2d\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u5c06\u6570\u636e\u96c6\u62c6\u5206\u6210\u5341\u4efd\uff0c\u79f0\u4e3a \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 \u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u793a\u4f8b\uff1a\u5047\u8bbe\u6709\u4e00\u4e2a\u5206\u7c7b\u5668\u80fd\u5224\u65ad\u67d0\u4e2a\u4eba\u662f\u5426\u662f\u7bee\u7403\u8fd0\u52a8\u5458\uff0c\u6570\u636e\u96c6\u5305\u542b500\u4e2a\u8fd0\u52a8\u5458\u548c500\u4e2a\u666e\u901a\u4eba\u3002 \u7b2c\u4e00\u6b65\uff1a\u5c06\u6570\u636e\u5206\u621010\u4efd\uff0c\u6bcf\u4efd\u5305\u542b50\u4e2a\u7bee\u7403\u8fd0\u52a8\u5458\uff0c50\u4e2a\u666e\u901a\u4eba \u7b2c\u4e8c\u6b65\uff1a\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa410\u6b21 \u6bcf\u6b21\u8fed\u4ee3\u6211\u4eec\u4fdd\u7559\u4e00\u4efd\uff0c\u6bd4\u5982\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4fdd\u7559\u7b2c1\u4efd\uff0c\u7b2c\u4e8c\u6b21\u4fdd\u7559\u7b2c2\u4efd\u3002 \u6211\u4eec\u4f7f\u7528\u5269\u4f59\u76849\u4efd\u6765\u8bad\u7ec3\u5206\u7c7b\u5668\uff0c\u6bd4\u5982\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4f7f\u7528\u7b2c2\u81f310\u4efd\u6765\u8bad\u7ec3\u3002 \u6211\u4eec\u7528\u521a\u624d\u4fdd\u7559\u7684\u4e00\u4efd\u6765\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5e76\u8bb0\u5f55\u7ed3\u679c\uff0c\u6bd4\u5982\uff1a35\u4e2a\u7bee\u7403\u8fd0\u52a8\u5458\u5206\u7c7b\u6b63\u786e\uff0c 29\u4e2a\u666e\u901a\u4eba\u5206\u7c7b\u6b63\u786e\u3002 \u7b2c\u4e09\u6b65\uff1a\u5408\u5e76\u7ed3\u679c \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u5f20\u8868\u683c\u6765\u5c55\u793a\u7ed3\u679c(\u5c31\u662f\u9a6c\u4e0a\u8981\u63d0\u5230\u7684\u6df7\u6dc6\u77e9\u9635)\uff1a \u901a\u8fc7\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u7684\u8bc4\u4ef7\u7ed3\u679c\u80af\u5b9a\u4f1a\u6bd4\u4e8c\u6298\u6216\u8005\u4e09\u6298\u6765\u5f97\u51c6\u786e\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u66f4\u591a\u7684\u8bad\u7ec3\u6570\u636e\u3002 \u7559\u4e00\u6cd5 \u65e2\u7136\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u6548\u679c\u90a3\u4e48\u597d\uff0c\u6211\u4eec\u4e3a\u4f55\u4e0d\u505a\u4e00\u4e2a N N \u6298\u4ea4\u53c9\u9a8c\u8bc1\uff1f N N \u5373\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u91cf\u3002\u5728\u6570\u636e\u6316\u6398\u9886\u57df\uff0c N N \u6298\u4ea4\u53c9\u9a8c\u8bc1\u53c8\u79f0\u4e3a \u7559\u4e00\u6cd5 \u3002 \u4f18\u70b9\uff1a \u51e0\u4e4e\u6240\u6709\u7684\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\u3002 \u786e\u5b9a\u6027\u3002 \u7f3a\u70b9\uff1a \u6700\u5927\u7684\u7f3a\u70b9\u662f\u8ba1\u7b97\u65f6\u95f4\u5f88\u957f\u3002 \u5206\u5c42\u95ee\u9898 \u5728\u7559\u4e00\u6cd5\u4e2d\uff0c\u6240\u6709\u7684\u6d4b\u8bd5\u96c6\u90fd\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e(\u5206\u5c42\u95ee\u9898)\u3002\u6240\u4ee5\u8bf4\uff0c\u7559\u4e00\u6cd5\u5bf9\u5c0f\u6570\u636e\u96c6\u662f\u5408\u9002\u7684\uff0c\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u9009\u62e9\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 \u6df7\u6dc6\u77e9\u9635 \u6df7\u6dc6\u77e9\u9635(confusion matrix)\u53ef\u4ee5\u5c55\u73b0\u66f4\u4e3a\u8be6\u7ec6\u7684\u8bc4\u4ef7\u7ed3\u679c\u3002\u6df7\u6dc6\u77e9\u9635\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u8bc6\u522b\u51fa\u5206\u7c7b\u5668\u5230\u5e95\u5728\u54ea\u4e9b\u7c7b\u522b\u4e0a\u53d1\u751f\u4e86\u6df7\u6dc6\uff0c\u56e0\u6b64\u5f97\u540d\u3002\u8868\u683c\u7684\u884c\u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\u5b9e\u9645\u6240\u5c5e\u7684\u7c7b\u522b\uff0c\u5217\u5219\u8868\u793a\u5206\u7c7b\u5668\u7684\u5224\u65ad\u7ed3\u679c\u3002 \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u7c7b\u5668\u53ef\u4ee5\u5f88\u597d\u5730\u533a\u5206\u4f53\u64cd\u8fd0\u52a8\u5458\u548c\u7bee\u7403\u8fd0\u52a8\u5458\uff0c\u800c\u9a6c\u62c9\u677e\u8fd0\u52a8\u5458\u5219\u6bd4\u8f83\u5bb9\u6613\u548c\u5176\u4ed6\u4e24\u4e2a\u7c7b\u522b\u53d1\u751f\u6df7\u6dc6\u3002 Application: \u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570 \u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7edf\u8ba1\u7684\u6c7d\u8f66\u71c3\u6cb9\u6d88\u8017\u548c\u516c\u91cc\u6570\u6570\u636e\u4e5f\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u96c6\u3002\u5728 \u524d\u9762\u4e00\u7ae0 \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u3002 \u6839\u636e\u6c7d\u7f38\u6570\u3001\u6392\u6c14\u91cf\u3001\u9a6c\u529b\u3001\u91cd\u91cf\u3001 \u52a0\u901f\u5ea6\u7b49\u6570\u636e\u9884\u6d4b\u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570(mpg)\u3002392\u6761\u6570\u636e\u90fd\u5b58\u653e\u5728mpgData.txt\u6587\u4ef6\u4e2d\uff0c\u5e76\u7528\u4e0b\u9762\u8fd9\u6bb5Python\u4ee3\u7801\u5c06\u8fd9\u4e9b\u6570\u636e\u6309\u5c42\u6b21\u7b49\u5206\u6210\u5341\u4efd\uff1a # divide data into 10 buckets import random def buckets ( filename , bucket_name , separator , class_column ): @param filename: file name of the original data. @param bucket_name: the prefix for all the bucket names. @param separator: the character that divides the columns. @param class_column: column that indicates the class, start from 0 # put the data in 10 buckets number_of_buckets = 10 data = {} # first read in the data and divide by category with open ( filename ) as f : lines = f . readlines () for line in lines : if separator != \\t : line = line . replace ( separator , \\t ) # first get the category category = line . split ()[ class_column ] data . setdefault ( category , []) data [ category ] . append ( line ) # initialize the buckets buckets = [] for i in range ( number_of_buckets ): buckets . append ([]) # now for each category put the data into the buckets for k in data . keys (): # randomize order of instances for each class random . shuffle ( data [ k ]) bNum = 0 # divide into buckets for item in data [ k ]: buckets [ bNum ] . append ( item ) bNum = ( bNum + 1 ) % number_of_buckets # write to file for bNum in range ( number_of_buckets ): f = open ( %s - %02i % ( bucket_name , bNum + 1 ), w ) for item in buckets [ bNum ]: f . write ( item ) f . close () # example of how to use this code buckets ( mpgTrainingSet , mpgData , \\t , 1 ) \u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u540e\u4f1a\u751f\u621010\u4e2a\u6587\u4ef6\uff1ampgData01\u3001mpgData02\u7b49\u3002\u7136\u540e\u9700\u8981\u4fee\u6539\u4e0a\u4e00\u7ae0\u7684\u8fd1\u90bb\u7b97\u6cd5\u7a0b\u5e8f\uff0c\u8ba9AthleteClassifier.test()\u51fd\u6570\u80fd\u591f\u6267\u884c\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 def ten_fold_cross_validation ( self , bucket_name , separator , format , header = True ): 10-fold cross validation :param bucket_name: the prefix for all the bucket names. :param separator: the character that divides the columns. :param format: num, comment, class :param header: whether header line exist :return: accuracy self . format = format self . test_result = {} accuracy = [] # repeat 10 times, select test bucket for test for test_bucket_number in range ( 10 ): # select remaining 9 bucket for training training_data = [] for bucket_number in range ( 10 ): if test_bucket_number != bucket_number : training_filename = %s%s%02i % ( bucket_name , separator , bucket_number + 1 ) training_data . extend ( self . pre_processing ( training_filename , header )) self . data = training_data # normalize self . mean_absolute_deviation () self . normalizeColumn () # test test_filename = %s%s%02i % ( bucket_name , separator , test_bucket_number + 1 ) accuracy . append ( self . test ( test_filename , header )) # print output print ( , end = ) for actual in self . test_result . keys (): print ( %5s % actual , end = ) print ( \\n , +---- * len ( self . classes ), + ) for actual , test_results in self . test_result . items (): print ( %3s % actual , end = | ) for accuracy_count in test_results . values (): print ( %3s % accuracy_count , end = | ) print ( \\n ) print ( , +---- * len ( self . classes ), + ) avg_accuracy = np . average ( accuracy ) print ( accuray is , avg_accuracy ) return avg_accuracy Kappa\u6307\u6807 Kappa\u6307\u6807\u53ef\u4ee5\u7528\u6765\u8bc4\u4ef7\u5206\u7c7b\u5668\u7684\u6548\u679c\u6bd4\u968f\u673a\u5206\u7c7b\u8981\u597d\u591a\u5c11\uff0c\u516c\u5f0f\u4e3a \\kappa = \\frac{P(c)-P(r)}{1-P(r)} \\kappa = \\frac{P(c)-P(r)}{1-P(r)} P(c) P(c) \u8868\u793a\u5206\u7c7b\u5668\u7684\u51c6\u786e\u7387\uff0c P(r) P(r) \u8868\u793a\u968f\u673a\u5206\u7c7b\u5668\u7684\u51c6\u786e\u7387\u3002\u53ef\u4ee5\u53c2\u8003\u4e0b\u5217\u7ecf\u9a8c\u7ed3\u679c\uff1a kNN\u7b97\u6cd5 \u5176\u5b9ekNN\u7b97\u6cd5\u5df2\u7ecf\u5728 \u7b2c\u4e00\u7ae0 \u91cc\u53d9\u8ff0\u5e76\u4f7f\u7528\u4e86\u3002\u5f53\u65f6\u8ba1\u7b97\u8ddd\u79bb\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u76ae\u5c14\u68ee\u76f8\u5173\u7cfb\u6570\u3002\u90a3\u4e48\uff0c\u5982\u679c\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u5462\uff1f\u9996\u5148\uff0c\u5c06\u8ddd\u79bb\u53d6\u5012\u6570\uff0c\u7136\u540e\u628a\u6240\u6709\u7684\u8ddd\u79bb\u5012\u6570\u9664\u4ee5\u8ddd\u79bb\u5012\u6570\u7684\u548c\uff0c\u4ece\u800c\u5f97\u5230\u8bc4\u5206\u7684\u6743\u91cd\uff0c\u6700\u540e\u52a0\u6743\u5e73\u5747\u5f97\u5230\u8bc4\u5206\u3002 \u5176\u5b9e\u628a\u8ddd\u79bb\u7684\u5012\u6570\u770b\u6210\u662f\u76f8\u4f3c\u5ea6\uff0c\u5c31\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u4e86\u3002 Example: \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5 \u8fd9\u4e00\u8282\u5206\u6790\u7531\u7f8e\u56fd\u56fd\u5bb6\u7cd6\u5c3f\u75c5\u3001\u6d88\u5316\u548c\u80be\u810f\u75be\u75c5\u7814\u7a76\u6240\u63d0\u4f9b\u7684\u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6( \u4e0b\u8f7d )\u3002\u6570\u636e\u96c6\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\u4ee3\u8868\u4e00\u540d21\u5c81\u4ee5\u4e0a\u7684\u6bd4\u9a6c\u5973\u6027\uff0c\u5979\u4eec\u5206\u7c7b\u4e24\u7c7b\uff1a\u4e94\u5e74\u5185\u67e5\u51fa\u60a3\u6709\u7cd6\u5c3f\u75c5\uff0c\u4ee5\u53ca\u6ca1\u6709\u5f97\u75c5\u3002\u6570\u636e\u96c6\u4e2d\u5305\u542b\u4e868\u4e2a\u7279\u5f81\uff0c\u5982\u6000\u5b55\u6b21\u6570\uff0c\u8212\u5f20\u538b\u7b49\u3002 \u6570\u636e\u96c6\u524d\u516b\u5217\u662f\u7279\u5f81\uff0c\u6700\u540e\u4e00\u5217\u662f\u5206\u7c7b\uff081-\u60a3\u75c5\uff0c0-\u5065\u5eb7\uff09\u3002 \u7ed3\u679c\u5982\u4e0b\uff1a","title":"Chapter 4: \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b"},{"location":"bigdata/gdm/ch4/#-4","text":"","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 4 \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b"},{"location":"bigdata/gdm/ch4/#knn","text":"\u5f53\u6211\u4eec\u6784\u5efa\u5b8c\u4e00\u4e2a\u5206\u7c7b\u5668\u540e\uff0c\u5e94\u8be5\u95ee\u4ee5\u4e0b\u95ee\u9898\uff1a\u5206\u7c7b\u5668\u7684\u51c6\u786e\u5ea6\u5982\u4f55\uff1f \u7ed3\u679c\u7406\u60f3\u5417\uff1f \u5982\u4f55\u4e0e\u5176\u5b83\u5206\u7c7b\u5668\u505a\u6bd4\u8f83\uff1f","title":"\u6548\u679c\u8bc4\u4f30\u7b97\u6cd5\u548ckNN"},{"location":"bigdata/gdm/ch4/#_1","text":"\u6570\u636e\u96c6\u53ef\u4ee5\u5206\u4e3a\u4e24\u4e2a\u90e8\u5206\uff0c\u7b2c\u4e00\u90e8\u5206\u7528\u6765\u6784\u9020\u5206\u7c7b\u5668\uff0c\u79f0\u4e3a \u8bad\u7ec3\u96c6 \uff1b\u53e6\u4e00\u90e8\u5206\u7528\u6765\u8bc4\u4f30\u5206\u7c7b\u5668\u7684\u7ed3\u679c\uff0c\u79f0\u4e3a \u6d4b\u8bd5\u96c6 \u3002","title":"\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6"},{"location":"bigdata/gdm/ch4/#k","text":"\u4e0d\u8fc7\uff0c\u8fd9\u79cd\u4e0a\u9762\u8fd9\u79cd\u7b80\u5355\u3001\u76f4\u63a5\u7684\u505a\u6cd5\u4f3c\u4e4e\u6709\u95ee\u9898\uff1a\u5982\u679c\u5206\u5272\u7684\u65f6\u5019\u4e0d\u51d1\u5de7\uff0c\u5c31\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u6bd4\u5982\uff0c\u82e5\u6d4b\u8bd5\u96c6\u4e2d\u7684\u7bee\u7403\u8fd0\u52a8\u5458\u6070\u5de7\u90fd\u5f88\u77ee\uff0c\u5979\u4eec\u5c31\u4f1a\u88ab\u5f52\u4e3a\u9a6c\u62c9\u677e\u8fd0\u52a8\u5458\u3002\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u5c06\u6570\u636e\u96c6\u6309\u4e0d\u540c\u7684\u65b9\u5f0f\u62c6\u5206\uff0c\u6d4b\u8bd5\u591a\u6b21\uff0c\u53d6\u7ed3\u679c\u7684\u5e73\u5747\u503c\u3002 \u5982\u679c\u5c06\u6570\u636e\u96c6\u5206\u6210 k k \u4efd\uff0c\u7528 k-1 k-1 \u4efd\u6765\u505a\u8bad\u7ec3\u96c6\uff0c\u53e6\u4e00\u4efd\u6765\u505a\u6d4b\u8bd5\u96c6\uff0c\u5e76\u8fed\u4ee3 k k \u6b21\uff0c\u53eb\u505a k k \u6298\u4ea4\u53c9\u9a8c\u8bc1 ( k k -fold cross validation)\u3002\u5728\u6570\u636e\u6316\u6398\u4e2d\uff0c\u901a\u5e38\u7684\u505a\u6cd5\u662f\u5c06\u6570\u636e\u96c6\u62c6\u5206\u6210\u5341\u4efd\uff0c\u79f0\u4e3a \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 \u3002 \u6211\u4eec\u6765\u770b\u4e00\u4e2a\u793a\u4f8b\uff1a\u5047\u8bbe\u6709\u4e00\u4e2a\u5206\u7c7b\u5668\u80fd\u5224\u65ad\u67d0\u4e2a\u4eba\u662f\u5426\u662f\u7bee\u7403\u8fd0\u52a8\u5458\uff0c\u6570\u636e\u96c6\u5305\u542b500\u4e2a\u8fd0\u52a8\u5458\u548c500\u4e2a\u666e\u901a\u4eba\u3002 \u7b2c\u4e00\u6b65\uff1a\u5c06\u6570\u636e\u5206\u621010\u4efd\uff0c\u6bcf\u4efd\u5305\u542b50\u4e2a\u7bee\u7403\u8fd0\u52a8\u5458\uff0c50\u4e2a\u666e\u901a\u4eba \u7b2c\u4e8c\u6b65\uff1a\u91cd\u590d\u4ee5\u4e0b\u6b65\u9aa410\u6b21 \u6bcf\u6b21\u8fed\u4ee3\u6211\u4eec\u4fdd\u7559\u4e00\u4efd\uff0c\u6bd4\u5982\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4fdd\u7559\u7b2c1\u4efd\uff0c\u7b2c\u4e8c\u6b21\u4fdd\u7559\u7b2c2\u4efd\u3002 \u6211\u4eec\u4f7f\u7528\u5269\u4f59\u76849\u4efd\u6765\u8bad\u7ec3\u5206\u7c7b\u5668\uff0c\u6bd4\u5982\u7b2c\u4e00\u6b21\u8fed\u4ee3\u4f7f\u7528\u7b2c2\u81f310\u4efd\u6765\u8bad\u7ec3\u3002 \u6211\u4eec\u7528\u521a\u624d\u4fdd\u7559\u7684\u4e00\u4efd\u6765\u8fdb\u884c\u6d4b\u8bd5\uff0c\u5e76\u8bb0\u5f55\u7ed3\u679c\uff0c\u6bd4\u5982\uff1a35\u4e2a\u7bee\u7403\u8fd0\u52a8\u5458\u5206\u7c7b\u6b63\u786e\uff0c 29\u4e2a\u666e\u901a\u4eba\u5206\u7c7b\u6b63\u786e\u3002 \u7b2c\u4e09\u6b65\uff1a\u5408\u5e76\u7ed3\u679c \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u5f20\u8868\u683c\u6765\u5c55\u793a\u7ed3\u679c(\u5c31\u662f\u9a6c\u4e0a\u8981\u63d0\u5230\u7684\u6df7\u6dc6\u77e9\u9635)\uff1a \u901a\u8fc7\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230\u7684\u8bc4\u4ef7\u7ed3\u679c\u80af\u5b9a\u4f1a\u6bd4\u4e8c\u6298\u6216\u8005\u4e09\u6298\u6765\u5f97\u51c6\u786e\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86\u66f4\u591a\u7684\u8bad\u7ec3\u6570\u636e\u3002","title":"k\u6298\u4ea4\u53c9\u9a8c\u8bc1"},{"location":"bigdata/gdm/ch4/#_2","text":"\u65e2\u7136\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u6548\u679c\u90a3\u4e48\u597d\uff0c\u6211\u4eec\u4e3a\u4f55\u4e0d\u505a\u4e00\u4e2a N N \u6298\u4ea4\u53c9\u9a8c\u8bc1\uff1f N N \u5373\u6570\u636e\u96c6\u4e2d\u7684\u6570\u636e\u91cf\u3002\u5728\u6570\u636e\u6316\u6398\u9886\u57df\uff0c N N \u6298\u4ea4\u53c9\u9a8c\u8bc1\u53c8\u79f0\u4e3a \u7559\u4e00\u6cd5 \u3002 \u4f18\u70b9\uff1a \u51e0\u4e4e\u6240\u6709\u7684\u6570\u636e\u8fdb\u884c\u8bad\u7ec3\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\u3002 \u786e\u5b9a\u6027\u3002 \u7f3a\u70b9\uff1a \u6700\u5927\u7684\u7f3a\u70b9\u662f\u8ba1\u7b97\u65f6\u95f4\u5f88\u957f\u3002 \u5206\u5c42\u95ee\u9898 \u5728\u7559\u4e00\u6cd5\u4e2d\uff0c\u6240\u6709\u7684\u6d4b\u8bd5\u96c6\u90fd\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e(\u5206\u5c42\u95ee\u9898)\u3002\u6240\u4ee5\u8bf4\uff0c\u7559\u4e00\u6cd5\u5bf9\u5c0f\u6570\u636e\u96c6\u662f\u5408\u9002\u7684\uff0c\u4f46\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u6211\u4eec\u4f1a\u9009\u62e9\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002","title":"\u7559\u4e00\u6cd5"},{"location":"bigdata/gdm/ch4/#_3","text":"\u6df7\u6dc6\u77e9\u9635(confusion matrix)\u53ef\u4ee5\u5c55\u73b0\u66f4\u4e3a\u8be6\u7ec6\u7684\u8bc4\u4ef7\u7ed3\u679c\u3002\u6df7\u6dc6\u77e9\u9635\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u5feb\u901f\u8bc6\u522b\u51fa\u5206\u7c7b\u5668\u5230\u5e95\u5728\u54ea\u4e9b\u7c7b\u522b\u4e0a\u53d1\u751f\u4e86\u6df7\u6dc6\uff0c\u56e0\u6b64\u5f97\u540d\u3002\u8868\u683c\u7684\u884c\u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\u5b9e\u9645\u6240\u5c5e\u7684\u7c7b\u522b\uff0c\u5217\u5219\u8868\u793a\u5206\u7c7b\u5668\u7684\u5224\u65ad\u7ed3\u679c\u3002 \u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u7684\u5206\u7c7b\u5668\u53ef\u4ee5\u5f88\u597d\u5730\u533a\u5206\u4f53\u64cd\u8fd0\u52a8\u5458\u548c\u7bee\u7403\u8fd0\u52a8\u5458\uff0c\u800c\u9a6c\u62c9\u677e\u8fd0\u52a8\u5458\u5219\u6bd4\u8f83\u5bb9\u6613\u548c\u5176\u4ed6\u4e24\u4e2a\u7c7b\u522b\u53d1\u751f\u6df7\u6dc6\u3002","title":"\u6df7\u6dc6\u77e9\u9635"},{"location":"bigdata/gdm/ch4/#application","text":"\u5361\u5185\u57fa\u6885\u9686\u5927\u5b66\u7edf\u8ba1\u7684\u6c7d\u8f66\u71c3\u6cb9\u6d88\u8017\u548c\u516c\u91cc\u6570\u6570\u636e\u4e5f\u662f\u4e00\u4e2a\u5e7f\u6cdb\u4f7f\u7528\u7684\u6570\u636e\u96c6\u3002\u5728 \u524d\u9762\u4e00\u7ae0 \u4e2d\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u3002 \u6839\u636e\u6c7d\u7f38\u6570\u3001\u6392\u6c14\u91cf\u3001\u9a6c\u529b\u3001\u91cd\u91cf\u3001 \u52a0\u901f\u5ea6\u7b49\u6570\u636e\u9884\u6d4b\u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570(mpg)\u3002392\u6761\u6570\u636e\u90fd\u5b58\u653e\u5728mpgData.txt\u6587\u4ef6\u4e2d\uff0c\u5e76\u7528\u4e0b\u9762\u8fd9\u6bb5Python\u4ee3\u7801\u5c06\u8fd9\u4e9b\u6570\u636e\u6309\u5c42\u6b21\u7b49\u5206\u6210\u5341\u4efd\uff1a # divide data into 10 buckets import random def buckets ( filename , bucket_name , separator , class_column ): @param filename: file name of the original data. @param bucket_name: the prefix for all the bucket names. @param separator: the character that divides the columns. @param class_column: column that indicates the class, start from 0 # put the data in 10 buckets number_of_buckets = 10 data = {} # first read in the data and divide by category with open ( filename ) as f : lines = f . readlines () for line in lines : if separator != \\t : line = line . replace ( separator , \\t ) # first get the category category = line . split ()[ class_column ] data . setdefault ( category , []) data [ category ] . append ( line ) # initialize the buckets buckets = [] for i in range ( number_of_buckets ): buckets . append ([]) # now for each category put the data into the buckets for k in data . keys (): # randomize order of instances for each class random . shuffle ( data [ k ]) bNum = 0 # divide into buckets for item in data [ k ]: buckets [ bNum ] . append ( item ) bNum = ( bNum + 1 ) % number_of_buckets # write to file for bNum in range ( number_of_buckets ): f = open ( %s - %02i % ( bucket_name , bNum + 1 ), w ) for item in buckets [ bNum ]: f . write ( item ) f . close () # example of how to use this code buckets ( mpgTrainingSet , mpgData , \\t , 1 ) \u6267\u884c\u8fd9\u4e2a\u7a0b\u5e8f\u540e\u4f1a\u751f\u621010\u4e2a\u6587\u4ef6\uff1ampgData01\u3001mpgData02\u7b49\u3002\u7136\u540e\u9700\u8981\u4fee\u6539\u4e0a\u4e00\u7ae0\u7684\u8fd1\u90bb\u7b97\u6cd5\u7a0b\u5e8f\uff0c\u8ba9AthleteClassifier.test()\u51fd\u6570\u80fd\u591f\u6267\u884c\u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1\u3002 def ten_fold_cross_validation ( self , bucket_name , separator , format , header = True ): 10-fold cross validation :param bucket_name: the prefix for all the bucket names. :param separator: the character that divides the columns. :param format: num, comment, class :param header: whether header line exist :return: accuracy self . format = format self . test_result = {} accuracy = [] # repeat 10 times, select test bucket for test for test_bucket_number in range ( 10 ): # select remaining 9 bucket for training training_data = [] for bucket_number in range ( 10 ): if test_bucket_number != bucket_number : training_filename = %s%s%02i % ( bucket_name , separator , bucket_number + 1 ) training_data . extend ( self . pre_processing ( training_filename , header )) self . data = training_data # normalize self . mean_absolute_deviation () self . normalizeColumn () # test test_filename = %s%s%02i % ( bucket_name , separator , test_bucket_number + 1 ) accuracy . append ( self . test ( test_filename , header )) # print output print ( , end = ) for actual in self . test_result . keys (): print ( %5s % actual , end = ) print ( \\n , +---- * len ( self . classes ), + ) for actual , test_results in self . test_result . items (): print ( %3s % actual , end = | ) for accuracy_count in test_results . values (): print ( %3s % accuracy_count , end = | ) print ( \\n ) print ( , +---- * len ( self . classes ), + ) avg_accuracy = np . average ( accuracy ) print ( accuray is , avg_accuracy ) return avg_accuracy","title":"Application: \u6bcf\u52a0\u4ed1\u71c3\u6cb9\u516c\u91cc\u6570"},{"location":"bigdata/gdm/ch4/#kappa","text":"Kappa\u6307\u6807\u53ef\u4ee5\u7528\u6765\u8bc4\u4ef7\u5206\u7c7b\u5668\u7684\u6548\u679c\u6bd4\u968f\u673a\u5206\u7c7b\u8981\u597d\u591a\u5c11\uff0c\u516c\u5f0f\u4e3a \\kappa = \\frac{P(c)-P(r)}{1-P(r)} \\kappa = \\frac{P(c)-P(r)}{1-P(r)} P(c) P(c) \u8868\u793a\u5206\u7c7b\u5668\u7684\u51c6\u786e\u7387\uff0c P(r) P(r) \u8868\u793a\u968f\u673a\u5206\u7c7b\u5668\u7684\u51c6\u786e\u7387\u3002\u53ef\u4ee5\u53c2\u8003\u4e0b\u5217\u7ecf\u9a8c\u7ed3\u679c\uff1a","title":"Kappa\u6307\u6807"},{"location":"bigdata/gdm/ch4/#knn_1","text":"\u5176\u5b9ekNN\u7b97\u6cd5\u5df2\u7ecf\u5728 \u7b2c\u4e00\u7ae0 \u91cc\u53d9\u8ff0\u5e76\u4f7f\u7528\u4e86\u3002\u5f53\u65f6\u8ba1\u7b97\u8ddd\u79bb\u65f6\uff0c\u4f7f\u7528\u7684\u662f\u76ae\u5c14\u68ee\u76f8\u5173\u7cfb\u6570\u3002\u90a3\u4e48\uff0c\u5982\u679c\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u5462\uff1f\u9996\u5148\uff0c\u5c06\u8ddd\u79bb\u53d6\u5012\u6570\uff0c\u7136\u540e\u628a\u6240\u6709\u7684\u8ddd\u79bb\u5012\u6570\u9664\u4ee5\u8ddd\u79bb\u5012\u6570\u7684\u548c\uff0c\u4ece\u800c\u5f97\u5230\u8bc4\u5206\u7684\u6743\u91cd\uff0c\u6700\u540e\u52a0\u6743\u5e73\u5747\u5f97\u5230\u8bc4\u5206\u3002 \u5176\u5b9e\u628a\u8ddd\u79bb\u7684\u5012\u6570\u770b\u6210\u662f\u76f8\u4f3c\u5ea6\uff0c\u5c31\u975e\u5e38\u5bb9\u6613\u7406\u89e3\u4e86\u3002","title":"kNN\u7b97\u6cd5"},{"location":"bigdata/gdm/ch4/#example","text":"\u8fd9\u4e00\u8282\u5206\u6790\u7531\u7f8e\u56fd\u56fd\u5bb6\u7cd6\u5c3f\u75c5\u3001\u6d88\u5316\u548c\u80be\u810f\u75be\u75c5\u7814\u7a76\u6240\u63d0\u4f9b\u7684\u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6( \u4e0b\u8f7d )\u3002\u6570\u636e\u96c6\u4e2d\u7684\u4e00\u6761\u8bb0\u5f55\u4ee3\u8868\u4e00\u540d21\u5c81\u4ee5\u4e0a\u7684\u6bd4\u9a6c\u5973\u6027\uff0c\u5979\u4eec\u5206\u7c7b\u4e24\u7c7b\uff1a\u4e94\u5e74\u5185\u67e5\u51fa\u60a3\u6709\u7cd6\u5c3f\u75c5\uff0c\u4ee5\u53ca\u6ca1\u6709\u5f97\u75c5\u3002\u6570\u636e\u96c6\u4e2d\u5305\u542b\u4e868\u4e2a\u7279\u5f81\uff0c\u5982\u6000\u5b55\u6b21\u6570\uff0c\u8212\u5f20\u538b\u7b49\u3002 \u6570\u636e\u96c6\u524d\u516b\u5217\u662f\u7279\u5f81\uff0c\u6700\u540e\u4e00\u5217\u662f\u5206\u7c7b\uff081-\u60a3\u75c5\uff0c0-\u5065\u5eb7\uff09\u3002 \u7ed3\u679c\u5982\u4e0b\uff1a","title":"Example: \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5"},{"location":"bigdata/gdm/ch5/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 5 \u6734\u7d20\u8d1d\u53f6\u65af 1 \u6734\u7d20\u8d1d\u53f6\u65af \u4f7f\u7528\u8fd1\u90bb\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u5f88\u96be\u5bf9\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\u8fdb\u884c\u91cf\u5316\u3002\u4f46\u5982\u679c\u4f7f\u7528\u7684\u662f\u57fa\u4e8e\u6982\u7387\u7684\u5206\u7c7b\u7b97\u6cd5\u2014\u2014\u8d1d\u53f6\u65af\u7b97\u6cd5\u2014\u2014\u90a3\u5c31\u53ef\u4ee5\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u53ef\u80fd\u6027\u4e86\uff1a\u8fd9\u540d\u8fd0\u52a8\u5458\u670980%\u7684\u51e0\u7387\u662f\u7bee\u7403\u8fd0\u52a8\u5458\u3002 \u8fd1\u90bb\u7b97\u6cd5\u53c8\u79f0\u4e3a \u88ab\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u8fd9\u79cd\u7b97\u6cd5\u53ea\u662f\u5c06\u8bad\u7ec3\u96c6\u7684\u6570\u636e\u4fdd\u5b58\u8d77\u6765\uff0c\u5728\u6536\u5230\u6d4b\u8bd5\u6570\u636e\u65f6\u624d\u4f1a\u8fdb\u884c\u8ba1\u7b97\u3002\u5982\u679c\u6211\u4eec\u670910\u4e07\u9996\u97f3\u4e50\uff0c\u90a3\u6bcf\u8fdb\u884c\u4e00\u6b21\u5206\u7c7b\uff0c\u90fd\u9700\u8981\u904d\u5386\u8fd910\u4e07\u6761\u8bb0\u5f55\u624d\u884c\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u5219\u662f\u4e00\u79cd \u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u5b83\u4f1a\u6839\u636e\u8bad\u7ec3\u96c6\u6784\u5efa\u8d77\u4e00\u4e2a\u6a21\u578b\uff0c\u5e76\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u5bf9\u65b0\u7684\u8bb0\u5f55\u8fdb\u884c\u5206\u7c7b\uff0c\u56e0\u6b64\u901f\u5ea6\u4f1a\u5feb\u5f88\u591a\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u7684\u4e24\u4e2a\u4f18\u70b9\u5373\uff1a \u80fd\u591f\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\uff1b \u5b83\u662f\u4e00\u79cd\u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5\u3002 \u6982\u7387 \u6211\u4eec\u7528 P(h|D) P(h|D) \u6765\u8868\u793a D D \u6761\u4ef6\u4e0b\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\u3002 P(h) P(h) \u8868\u793a\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\uff0c\u79f0\u4e3ah\u7684\u5148\u9a8c\u6982\u7387\u3002 P(h|d) P(h|d) \u79f0\u4e3a\u540e\u9a8c\u6982\u7387\uff0c\u8868\u793a\u5728\u89c2\u5bdf\u4e86\u6570\u636e\u96c6 d d \u4e4b\u540e\uff0c h h \u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\u662f\u591a\u5c11\u3002\u540e\u9a8c\u6982\u7387\u53c8\u79f0\u4e3a\u6761\u4ef6\u6982\u7387\u3002 \u8d1d\u53f6\u65af\u6cd5\u5219 \u8d1d\u53f6\u65af\u6cd5\u5219\u63cf\u8ff0\u4e86 P(h) P(h) \u3001 P(h|D) P(h|D) \u3001 P(D) P(D) \u3001\u4ee5\u53ca P(D|h) P(D|h) \u8fd9\u56db\u4e2a\u6982\u7387\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a P(h|D) = \\frac{P(D|h)P(h)}{P(D)} P(h|D) = \\frac{P(D|h)P(h)}{P(D)} \u5982\u679c\u6211\u4eec\u6709 h_1, h_2,...h_n h_1, h_2,...h_n \u7b49\u4e8b\u4ef6\u3002\u8ba1\u7b97\u4e0d\u540c\u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\uff0c P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} \u9009\u53d6\u6700\u5927\u7684\u6982\u7387\uff0c\u5c31\u80fd\u7528\u4f5c\u5206\u7c7b\u4e86\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u6700\u5927\u540e\u9a8c\u4f30\u8ba1\uff0c\u8bb0\u4e3a h_{MAP} h_{MAP} \uff1a h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} H H \u8868\u793a\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u6240\u4ee5 h\\in H h\\in H \u8868\u793a\u201c\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\u201d\u3002\u6574\u4e2a\u516c\u5f0f\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8ba1\u7b97\u51fa P(h|D) P(h|D) \u7684\u503c\uff0c\u5e76\u53d6\u6700\u5927\u7684\u7ed3\u679c\u3002 \u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u516c\u5f0f\u4e2d\u7684\u5206\u6bcd\u90fd\u662f P(D) P(D) \uff0c\u56e0\u6b64\u5373\u4fbf\u53ea\u8ba1\u7b97 P(D|h)P(h) P(D|h)P(h) \uff0c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6700\u5927\u7684\u7ed3\u679c\u3002\u90a3\u4e48\u8fd9\u4e2a\u516c\u5f0f\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h) h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h) Example: \u624b\u73af\u63a8\u8350 \u73b0\u5728\u6211\u4eec\u8981\u4e3aiHealth\u516c\u53f8\u53d1\u4e00\u5957\u63a8\u8350\u7cfb\u7edf\u3002iHealth\u65b0\u51fa\u4ea7\u4e86\u4e24\u4ef6\u5546\u54c1\uff1ai100\u548ci500\u3002\u4e3a\u4e86\u6536\u96c6\u6570\u636e\uff0c\u8ba9\u8d2d\u4e70\u7684\u7528\u6237\u586b\u5199\u8c03\u67e5\u95ee\u5377\uff0c\u6bcf\u4e2a\u95ee\u9898\u90fd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5f81\uff1a \u5df2\u77e5\u4e00\u4f4d\u5ba2\u6237\u7684\u8fd0\u52a8\u76ee\u7684\u3001\u5f53\u524d\u8fd0\u52a8\u6c34\u5e73\u3001\u5bf9\u5065\u8eab\u7684\u70ed\u60c5\u3001\u662f\u5426\u9002\u5e94\u9ad8\u79d1\u6280\u4ea7\u54c1\uff0c\u8bf7\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u6765\u63a8\u8350\u624b\u73af\u578b\u53f7\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u8bad\u7ec3\u548c\u5206\u7c7b\u3002 \u8bad\u7ec3 \u8bad\u7ec3\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\uff1a \u5148\u9a8c\u6982\u7387\uff0c\u5982 P(i100) = 0.4 P(i100) = 0.4 \u6761\u4ef6\u6982\u7387\uff0c\u5982 P(\u5065\u5eb7|i100) = 0.167 P(\u5065\u5eb7|i100) = 0.167 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u8868\u793a\u5148\u9a8c\u6982\u7387\uff1a self . prior = { i500 : 0.6 , i100 : 0.4 } \u6761\u4ef6\u6982\u7387\u7684\u8868\u793a\u6709\u4e9b\u590d\u6742\uff0c\u7528\u5d4c\u5957\u7684\u5b57\u5178\u6765\u5b9e\u73b0\uff1a { i500 : { 1 : { appearance : 0.3333333333333333 , health : 0.4444444444444444 , both : 0.2222222222222222 }, 2 : { active : 0.4444444444444444 , sedentary : 0.2222222222222222 , moderate : 0.3333333333333333 }, 3 : { aggressive : 0.6666666666666666 , moderate : 0.3333333333333333 }, 4 : { yes : 0.6666666666666666 , no : 0.3333333333333333 }}, i100 : { 1 : { both : 0.5 , health : 0.16666666666666666 , appearance : 0.3333333333333333 }, 2 : { active : 0.3333333333333333 , sedentary : 0.5 , moderate : 0.16666666666666666 }, 3 : { aggressive : 0.16666666666666666 , moderate : 0.8333333333333334 }, 4 : { yes : 0.3333333333333333 , no : 0.6666666666666666 }}} 1\u30012\u30013\u30014\u8868\u793a\u7b2c\u51e0\u5217\uff0c\u6240\u4ee5\u7b2c\u4e00\u884c\u53ef\u4ee5\u89e3\u91ca\u4e3a\u8d2d\u4e70i500\u7684\u987e\u5ba2\u4e2d\u8fd0\u52a8\u76ee\u7684\u662f\u5916\u8868\u7684\u6982\u7387\u662f 0.333\u3002 \u4e3a\u4e86\u8ba1\u7b97\u6982\u7387\uff0c\u8981\u8fdb\u884c\u8ba1\u6570\uff0c\u53ef\u4ee5\u7528\u5b57\u5178\u6765\u7edf\u8ba1\u6bcf\u4e2a\u578b\u53f7\u7684\u6b21\u6570\u3002 \u4ee5\u4e0b\u662f\u8bad\u7ec3\u7528\u7684Python\u4ee3\u7801\uff1a class NavieBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u603b\u6761\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] for i in range ( len ( fields )): if self . format [ i ] == num : vector . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) self . tmp = counts def classify ( self , itemVector ): \u8fd4\u56deitemVector\u6240\u5c5e\u7c7b\u522b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob = prob * self . conditional [ category ][ col ][ attrValue ] col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] if __name__ == __main__ : c = NavieBayes ( iHealth/i , 10 , attr \\t attr \\t attr \\t attr \\t class ) print ( c . classify ([ health moderate , moderate , yes ])) Example: \u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e \u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e \uff0c\u5176\u4e2d\u6bcf\u6761\u8bb0\u5f55\u4ee3\u8868\u4e00\u4e2a\u9009\u6c11\uff0c\u7b2c\u4e00\u5217\u662f\u5206\u7c7b\u540d\u79f0\uff08democrat, republican\uff09\uff0c\u4e4b\u540e\u662f16\u6761\u6cd5\u6848\uff0c\u7528y\u548cn\u8868\u793a\u8be5\u4eba\u662f\u5426\u652f\u6301\u3002 \u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a democrat y n y n n y y y y y n n y n n y democrat y y y n n y y y y n n n n n y y republican y y n y y y n n n y n y y y n n \u5728\u8c03\u7528\u4e0a\u4e00\u8282\u7f16\u5199\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\u4f7f\u7528\u4ee5\u4e0bdataFormat\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86\uff1a class\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\t attr\\tattr\\tattr \u6982\u7387\u503c\u4e3a0 \u4f46\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\u3002 \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u5176\u5b9e\u662f\u771f\u5b9e\u6982\u7387\u7684\u4e00\u79cd\u4f30\u8ba1\uff0c\u800c\u771f\u5b9e\u6982\u7387\u662f\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u5f97\u5230\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6240\u6709\u4eba\u90fd\u505a\u8840\u6db2\u6d4b\u8bd5\uff0c\u624d\u80fd\u5f97\u5230\u5065\u5eb7\u4eba\u8fd4\u56de\u9634\u6027\u7ed3\u679c\u7684\u771f\u5b9e\u6982\u7387\u3002\u663e\u7136\uff0c\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u9009\u53d6\u4e00\u4e2a\u6837\u672c\uff0c\u59821000\u4eba\uff0c\u5bf9\u4ed6\u4eec\u8fdb\u884c\u6d4b\u8bd5\u5e76\u8ba1\u7b97\u6982\u7387\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u4f30\u8ba1\u90fd\u662f\u63a5\u8fd1\u4e8e\u771f\u5b9e\u6982\u7387\u7684\u3002\u4f46\u5f53\u771f\u5b9e\u6982\u7387\u975e\u5e38\u5c0f\u65f6\uff0c\u8fd9\u79cd\u62bd\u6837\u7edf\u8ba1\u7684\u505a\u6cd5\u5c31\u4f1a\u6709\u95ee\u9898\u4e86\u3002\u6bd4\u5982\u8bf4\uff0c\u6c11\u4e3b\u515a\u5bf9\u7f51\u7edc\u975e\u6cd5\u4f20\u64ad\u6cd5\u6848\u7684\u5426\u51b3\u7387\u662f0.03\uff0c\u5373 P(S=no|\u6c11\u4e3b\u515a) = 0.03 P(S=no|\u6c11\u4e3b\u515a) = 0.03 \u3002\u5982\u679c\u6211\u4eec \u5206\u522b\u9009\u53d6\u5341\u4e2a\u6c11\u4e3b\u515a\u548c\u5171\u548c\u515a\u4eba\uff0c\u770b\u4ed6\u4eec\u5bf9\u8be5\u6cd5\u6848\u7684\u6295\u7968\u60c5\u51b5\uff0c\u4f60\u89c9\u5f97\u5f97\u5230\u7684\u6982\u7387\u4f1a\u662f\u4ec0\u4e48\uff1f\u7b54\u6848\u5f88\u53ef\u80fd\u662f0\u3002 \u5728\u6734\u7d20\u8d1d\u53f6\u65af\u4e2d\uff0c\u6982\u7387\u4e3a0\u7684\u5f71\u54cd\u662f\u5f88\u5927\u7684\u3002\u5982\u679c\u5176\u4e2d\u2f00\u4e2a\u6982\u7387\u503c\u4e3a0\uff0c\u90a3\u4e48\u6700\u540e\u7684\u4e58\u79ef\u4e5f\u4e3a0\u3002 \u4e3a\u4e86\u8868\u793a\u65b9\u4fbf\uff0c\u6211\u4eec\u91c7\u7528\u4ee5\u4e0b\u516c\u5f0f\uff1a P(x|y)=\\frac{n_c}{n} P(x|y)=\\frac{n_c}{n} \u5176\u4e2d, n n \u8868\u793a\u8bad\u7ec3\u96c6\u4e2dy\u7c7b\u522b\u7684\u8bb0\u5f55\u6570\uff1b n_c n_c \u8868\u793a y y \u7c7b\u522b\u4e2d\u503c\u4e3a x x \u7684\u8bb0\u5f55\u6570\u3002\u6211\u4eec\u7684\u95ee\u9898\u662f n_c n_c \u53ef\u80fd\u4e3a0\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u516c\u793a\u53d8\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a P(x|y)=\\frac{n_c+mp}{n+m} P(x|y)=\\frac{n_c+mp}{n+m} m m \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u8868\u793a\u7b49\u6548\u6837\u672c\u5927\u5c0f\u3002\u51b3\u5b9a\u5e38\u6570 m m \u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u503c\u7684\u7c7b\u522b\u6570\u76ee\u6765\u4f5c\u4e3a m m \uff0c\u6bd4\u5982\u6295\u7968\u6709\u8d5e\u6210\u548c\u5426\u51b3\u4e24\u79cd\u7c7b\u522b\uff0c\u6240\u4ee5 m m \u5c31\u4e3a2\u3002 p p \u5219\u662f\u76f8\u5e94\u7684\u5148\u9a8c\u6982\u7387\uff0c\u6bd4\u5982\u8bf4\u8d5e\u6210\u548c\u5426\u51b3\u7684\u6982\u7387\u5206\u522b\u662f0.5\uff0c\u90a3 p p \u5c31\u662f0.5\u3002 2 \u6570\u503c\u578b\u6570\u636e \u5728\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e2d\uff0c\u4e4b\u524d\u6211\u4eec\u5bf9\u4e8b\u7269\u8fdb\u884c\u4e86\u8ba1\u6570\uff0c\u8fd9\u79cd\u8ba1\u6570\u5219\u662f\u53ef\u4ee5\u5ea6\u91cf\u7684\u3002\u5bf9\u4e8e\u6570\u503c\u578b\u7684\u6570\u636e\u8981\u5982\u4f55\u8ba1\u6570\u5462\uff1f\u901a\u5e38\u6709\u4e24\u79cd\u505a\u6cd5\uff1a\u533a\u5206\u7c7b\u522b\u548c\u9ad8\u65af\u5206\u5e03\u3002 \u533a\u5206\u7c7b\u522b \u6211\u4eec\u53ef\u4ee5\u5212\u5b9a\u51e0\u4e2a\u8303\u56f4\u4f5c\u4e3a\u5206\u7c7b\uff0c\u5982\uff1a \u5e74\u9f84 18 18 - 22 23 - 30 31 - 40 40 \u5e74\u85aa $200,000 150,000 - 200,000 100,000 - 150,000 60,000 - 100,000 40,000 - 60,000 \u5212\u5206\u7c7b\u522b\u540e\uff0c\u5c31\u53ef\u4ee5\u5e94\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e86\u3002 \u9ad8\u65af\u5206\u5e03 \u5c5e\u4e8e\u7c7b\u522b y_i y_i \u7684\u7279\u5f81 x_i x_i \u7684\u6982\u7387\u4e3a P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} \u4e3a\u4e86\u4e3e\u4f8b\uff0c\u6211\u4eec\u4e3a\u4e0a\u9762\u8bb2\u8ff0\u7684\u624b\u73af\u7684\u4f8b\u5b50\u589e\u52a0\u4e00\u5217\u6536\u5165\u5c5e\u6027\u3002\u5047\u8bbe\u6211\u4eec\u8981\u8ba1\u7b97 P(100k|i500) P(100k|i500) \u7684\u6982\u7387\uff0c\u5373\u8d2d\u4e70i500\u7684\u7528\u6237\u4e2d\u6536\u5165\u662f100,000\u7f8e\u5143\u7684\u6982\u7387\u3002\u90a3\u4e48\u8fd9\u91cc u_{ij}, \\sigma_{ij} u_{ij}, \\sigma_{ij} \u5206\u522b\u5bf9\u5e94\u7684\u662f\u8d2d\u4e70i500\u7684\u7528\u6237\u7684\u5e73\u5747\u6536\u5165\u548c\u6536\u5165\u7684\u6807\u51c6\u5dee\u3002 \u6837\u672c\u6807\u51c6\u5dee\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \u6ce8\u610f\u5206\u6bcd\u4e2d\u7684\u662f \\text{card}(x)-1 \\text{card}(x)-1 \u4e0d\u662f \\text{card}(x) \\text{card}(x) \u3002 \u5728\u8bad\u7ec3\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u5c5e\u6027\u7684\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u51fa\u6765\uff0c\u800c\u5206\u7c7b\u9636\u6bb5\u4f7f\u7528\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff1a def pdf ( mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart Example: \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5 \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6\u5728 \u524d\u4e00\u7ae0 \u5df2\u7ecf\u8fdb\u884c\u4e86\u8be6\u7ec6\u63cf\u8ff0\u3002\u8be5\u6570\u636e\u96c6\u5305\u542b\u4e86\u6570\u503c\u578b\u7279\u5f81\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528\u4e0a\u4e00\u8282\u4ee3\u7801\u3002\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u76f4\u63a5\u7528\u8ba1\u6570\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u67d0\u4e2a\u5177\u4f53\u7279\u5f81\u7684\u503c\u51fa\u73b0\u7684\u6982\u7387\uff0c\u800c\u662f\u8981\u7528\u9ad8\u65af\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u8ba1\u7b97\u3002 import math import numpy as np class NaiveBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u5bf9\u6570\u503c\u578b\u6570\u636e\u8fdb\u884c\u6c42\u548c totals = {} numericValues = {} # \u5bf9\u5206\u7c7b\u578b\u6570\u636e\u8fdb\u884c\u8ba1\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u5206\u7c7b\u578b\u6570\u636e # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u5904\u7406\u6570\u503c\u578b\u6570\u636e col = 0 # column number totals . setdefault ( category , {}) numericValues . setdefault ( category , {}) for columnValue in nums : col += 1 totals [ category ] . setdefault ( col , 0 ) totals [ category ][ col ] += columnValue numericValues [ category ] . setdefault ( col , []) numericValues [ category ][ col ] . append ( columnValue ) # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) # \u8ba1\u7b97\u5e73\u5747\u6570\u548c\u6837\u672c\u6807\u51c6\u5dee self . means = {} self . standard_deviation = {} for category , columns in totals . items (): self . means . setdefault ( category , {}) self . standard_deviation . setdefault ( category , {}) for col , sums in columns . items (): self . means [ category ][ col ] = sums / len ( numericValues [ category ][ col ]) self . standard_deviation [ category ][ col ] = np . sqrt ( np . sum ( np . power ( ( np . array ( numericValues [ category ][ col ]) - self . means [ category ][ col ]), 2 )) / ( len ( numericValues [ category ][ col ]) - 1.0 )) def pdf ( self , mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart def classify ( self , itemVector , numVector ): \u6839\u636eitemVector\u548cnumVector\u8fdb\u884c\u5206\u7c7b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob *= self . conditional [ category ][ col ][ attrValue ] col += 1 col = 1 for numValue in numVector : #\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u5206\u5e03 prob *= self . pdf ( self . means [ category ][ col ], self . standard_deviation [ category ][ col ], numValue ) col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] def testBucket ( self , bucketPrefix , i ): \u6d4b\u8bd5 :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param i: \u7f16\u53f7 :return: \u6d4b\u8bd5\u7ed3\u679c filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () results = {} for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] test_result = self . classify ( vector , nums ) results . setdefault ( category , {}) results [ category ] . setdefault ( test_result , 0 ) results [ category ][ test_result ] += 1 return results def tenfold ( bucketPrefix , dataFormat ): results = {} for i in range ( 1 , 11 ): c = NaiveBayes ( bucketPrefix , i , dataFormat ) t = c . testBucket ( bucketPrefix , i ) for ( key , value ) in t . items (): results . setdefault ( key , {}) for ( ckey , cvalue ) in value . items (): results [ key ] . setdefault ( ckey , 0 ) results [ key ][ ckey ] += cvalue # now print results categories = list ( results . keys ()) categories . sort () print ( \\n Classified as: ) header = subheader = + for category in categories : header += % 2s % category subheader += -----+ print ( header ) print ( subheader ) total = 0.0 correct = 0.0 for category in categories : row = %s | % category for c2 in categories : if c2 in results [ category ]: count = results [ category ][ c2 ] else : count = 0 row += %3i | % count total += count if c2 == category : correct += count print ( row ) print ( subheader ) print ( \\n %5.3f percent correct % (( correct * 100 ) / total )) print ( total of %i instances % total ) if __name__ == __main__ : tenfold ( pimaSmall/pimaSmall , num \\t num \\t num \\t num \\t num \\t num \\t num \\t num \\t class ) \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a Classified as: 0 1 +-----+-----+ 0 | 46 | 13 | 1 | 15 | 26 | +-----+-----+ 72.000 percent correct total of 100 instances \u4e0ekNN\u76f8\u6bd4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u51c6\u786e\u7387\u66f4\u597d\uff0c\u800c\u4e14\u8ba1\u7b97\u66f4\u5feb\u3002 \u4e3a\u4ec0\u4e48\u8981\u53eb\u201c\u6734\u7d20\u8d1d\u53f6\u65af\u201d\u5462\uff1f \u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u5c06\u591a\u4e2a\u6982\u7387\u8fdb\u884c\u76f8\u4e58\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6982\u7387\u90fd\u662f\u5177\u6709\u72ec\u7acb\u6027\u7684\u3002\u5173\u4e8e\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u53ef\u4ee5\u53c2\u89c1 \u6982\u7387\u5bfc\u8bba \u3002 In simple terms, a naive Bayes classifier assumes that the presence (or absence) of a particular feature of a class is unrelated to the presence (or absence) of any other feature, given the class variable. For example, a fruit may be considered to be an apple if it is red, round, and about 4\" in diameter. Even if these features depend on each other or upon the existence of the other features, a naive Bayes classifier considers all of these properties to independently contribute to the probability that this fruit is an apple. [ ref ] \u4f46\u662f\u5728\u73b0\u5b9e\u6570\u636e\u6316\u6398\u573a\u666f\u4e2d\uff0c\u8fd9\u79cd\u7279\u5f81\u53d8\u91cf\u4e4b\u95f4\u5f80\u5f80\u4e0d\u76f8\u4e92\u72ec\u7acb\u3002 \u8fd0\u52a8\u5458\u4f8b\u5b50\u4e2d\uff0c\u8eab\u9ad8\u548c\u4f53\u91cd\u4e0d\u662f\u4e92\u76f8\u72ec\u7acb\u7684\uff0c\u56e0\u4e3a\u9ad8\u7684\u4eba\u4f53\u91cd\u4e5f\u4f1a\u8f83\u9ad8\u3002 \u5730\u533a\u90ae\u7f16\u3001\u6536\u5165\u3001\u5e74\u9f84\uff0c\u8fd9\u4e9b\u7279\u5f81\u4e5f\u4e0d\u5b8c\u5168\u72ec\u7acb\uff0c\u4e00\u4e9b\u5730\u533a\u7684\u623f\u5c4b\u90fd\u5f88\u6602\u8d35\uff0c\u4e00\u4e9b\u5730\u533a\u5219\u53ea\u6709\u623f\u8f66\uff1a\u52a0\u5dde\u5e15\u7f57\u5965\u56fe\u5927\u591a\u662f20\u5c81\u7684\u5e74\u8f7b\u4eba\uff0c\u800c\u4e9a\u5229\u6851\u90a3\u5dde\u5219\u591a\u662f\u9000\u4f11\u4eba\u5458\u3002 \u5728\u97f3\u4e50\u57fa\u56e0\u5de5\u7a0b\u4e2d\uff0c\u5f88\u591a\u7279\u5f81\u4e5f\u662f\u4e0d\u72ec\u7acb\u7684\uff0c\u5982\u679c\u97f3\u4e50\u4e2d\u6709\u5f88\u591a\u53d8\u97f3\u5409\u4ed6\uff0c\u90a3\u5c0f\u63d0\u7434\u7684 \u6982\u7387\u5c31\u964d\u4f4e\u4e86\u3002 \u8840\u6db2\u68c0\u9a8c\u7684\u7ed3\u679c\u4e2d\uff0cT4\u548cTSH\u8fd9\u4e24\u4e2a\u6307\u6807\u901a\u5e38\u662f\u5448\u53cd\u6bd4\u7684\u3002 \u6240\u4ee5\uff0c\u5728\u4f7f\u7528\u8d1d\u53f6\u65af\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e92\u76f8\u72ec\u7acb\u7684\u7279\u5f81\uff0c\u4f46\u73b0\u5b9e\u751f\u6d3b\u4e2d\u5f88\u96be\u627e\u5230\u8fd9\u6837\u7684\u5e94\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u80fd\u5047\u8bbe\u4ed6\u4eec\u662f\u72ec\u7acb\u7684\u4e86\uff01\u6211\u4eec\u5b8c\u5168\u5ffd\u7565\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64\u624d\u79f0\u4e3a\u201c\u6734\u7d20\u7684\u201d\uff08\u5929\u771f\u7684\uff09\u8d1d\u53f6\u65af\u65b9\u6cd5\u3002\u4e0d\u8fc7\u4e8b\u5b9e\u8bc1\u660e\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u6548\u679c\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\u3002","title":"Chapter 5: \u6982\u7387\u548c\u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"bigdata/gdm/ch5/#-5","text":"","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 5 \u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"bigdata/gdm/ch5/#1","text":"\u4f7f\u7528\u8fd1\u90bb\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u5f88\u96be\u5bf9\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\u8fdb\u884c\u91cf\u5316\u3002\u4f46\u5982\u679c\u4f7f\u7528\u7684\u662f\u57fa\u4e8e\u6982\u7387\u7684\u5206\u7c7b\u7b97\u6cd5\u2014\u2014\u8d1d\u53f6\u65af\u7b97\u6cd5\u2014\u2014\u90a3\u5c31\u53ef\u4ee5\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u53ef\u80fd\u6027\u4e86\uff1a\u8fd9\u540d\u8fd0\u52a8\u5458\u670980%\u7684\u51e0\u7387\u662f\u7bee\u7403\u8fd0\u52a8\u5458\u3002 \u8fd1\u90bb\u7b97\u6cd5\u53c8\u79f0\u4e3a \u88ab\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u8fd9\u79cd\u7b97\u6cd5\u53ea\u662f\u5c06\u8bad\u7ec3\u96c6\u7684\u6570\u636e\u4fdd\u5b58\u8d77\u6765\uff0c\u5728\u6536\u5230\u6d4b\u8bd5\u6570\u636e\u65f6\u624d\u4f1a\u8fdb\u884c\u8ba1\u7b97\u3002\u5982\u679c\u6211\u4eec\u670910\u4e07\u9996\u97f3\u4e50\uff0c\u90a3\u6bcf\u8fdb\u884c\u4e00\u6b21\u5206\u7c7b\uff0c\u90fd\u9700\u8981\u904d\u5386\u8fd910\u4e07\u6761\u8bb0\u5f55\u624d\u884c\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u5219\u662f\u4e00\u79cd \u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u5b83\u4f1a\u6839\u636e\u8bad\u7ec3\u96c6\u6784\u5efa\u8d77\u4e00\u4e2a\u6a21\u578b\uff0c\u5e76\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u5bf9\u65b0\u7684\u8bb0\u5f55\u8fdb\u884c\u5206\u7c7b\uff0c\u56e0\u6b64\u901f\u5ea6\u4f1a\u5feb\u5f88\u591a\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u7684\u4e24\u4e2a\u4f18\u70b9\u5373\uff1a \u80fd\u591f\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\uff1b \u5b83\u662f\u4e00\u79cd\u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5\u3002","title":"1 \u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"bigdata/gdm/ch5/#_1","text":"\u6211\u4eec\u7528 P(h|D) P(h|D) \u6765\u8868\u793a D D \u6761\u4ef6\u4e0b\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\u3002 P(h) P(h) \u8868\u793a\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\uff0c\u79f0\u4e3ah\u7684\u5148\u9a8c\u6982\u7387\u3002 P(h|d) P(h|d) \u79f0\u4e3a\u540e\u9a8c\u6982\u7387\uff0c\u8868\u793a\u5728\u89c2\u5bdf\u4e86\u6570\u636e\u96c6 d d \u4e4b\u540e\uff0c h h \u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\u662f\u591a\u5c11\u3002\u540e\u9a8c\u6982\u7387\u53c8\u79f0\u4e3a\u6761\u4ef6\u6982\u7387\u3002","title":"\u6982\u7387"},{"location":"bigdata/gdm/ch5/#_2","text":"\u8d1d\u53f6\u65af\u6cd5\u5219\u63cf\u8ff0\u4e86 P(h) P(h) \u3001 P(h|D) P(h|D) \u3001 P(D) P(D) \u3001\u4ee5\u53ca P(D|h) P(D|h) \u8fd9\u56db\u4e2a\u6982\u7387\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a P(h|D) = \\frac{P(D|h)P(h)}{P(D)} P(h|D) = \\frac{P(D|h)P(h)}{P(D)} \u5982\u679c\u6211\u4eec\u6709 h_1, h_2,...h_n h_1, h_2,...h_n \u7b49\u4e8b\u4ef6\u3002\u8ba1\u7b97\u4e0d\u540c\u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\uff0c P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} \u9009\u53d6\u6700\u5927\u7684\u6982\u7387\uff0c\u5c31\u80fd\u7528\u4f5c\u5206\u7c7b\u4e86\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u6700\u5927\u540e\u9a8c\u4f30\u8ba1\uff0c\u8bb0\u4e3a h_{MAP} h_{MAP} \uff1a h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} H H \u8868\u793a\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u6240\u4ee5 h\\in H h\\in H \u8868\u793a\u201c\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\u201d\u3002\u6574\u4e2a\u516c\u5f0f\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8ba1\u7b97\u51fa P(h|D) P(h|D) \u7684\u503c\uff0c\u5e76\u53d6\u6700\u5927\u7684\u7ed3\u679c\u3002 \u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u516c\u5f0f\u4e2d\u7684\u5206\u6bcd\u90fd\u662f P(D) P(D) \uff0c\u56e0\u6b64\u5373\u4fbf\u53ea\u8ba1\u7b97 P(D|h)P(h) P(D|h)P(h) \uff0c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6700\u5927\u7684\u7ed3\u679c\u3002\u90a3\u4e48\u8fd9\u4e2a\u516c\u5f0f\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h) h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h)","title":"\u8d1d\u53f6\u65af\u6cd5\u5219"},{"location":"bigdata/gdm/ch5/#example","text":"\u73b0\u5728\u6211\u4eec\u8981\u4e3aiHealth\u516c\u53f8\u53d1\u4e00\u5957\u63a8\u8350\u7cfb\u7edf\u3002iHealth\u65b0\u51fa\u4ea7\u4e86\u4e24\u4ef6\u5546\u54c1\uff1ai100\u548ci500\u3002\u4e3a\u4e86\u6536\u96c6\u6570\u636e\uff0c\u8ba9\u8d2d\u4e70\u7684\u7528\u6237\u586b\u5199\u8c03\u67e5\u95ee\u5377\uff0c\u6bcf\u4e2a\u95ee\u9898\u90fd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5f81\uff1a \u5df2\u77e5\u4e00\u4f4d\u5ba2\u6237\u7684\u8fd0\u52a8\u76ee\u7684\u3001\u5f53\u524d\u8fd0\u52a8\u6c34\u5e73\u3001\u5bf9\u5065\u8eab\u7684\u70ed\u60c5\u3001\u662f\u5426\u9002\u5e94\u9ad8\u79d1\u6280\u4ea7\u54c1\uff0c\u8bf7\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u6765\u63a8\u8350\u624b\u73af\u578b\u53f7\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u8bad\u7ec3\u548c\u5206\u7c7b\u3002 \u8bad\u7ec3 \u8bad\u7ec3\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\uff1a \u5148\u9a8c\u6982\u7387\uff0c\u5982 P(i100) = 0.4 P(i100) = 0.4 \u6761\u4ef6\u6982\u7387\uff0c\u5982 P(\u5065\u5eb7|i100) = 0.167 P(\u5065\u5eb7|i100) = 0.167 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u8868\u793a\u5148\u9a8c\u6982\u7387\uff1a self . prior = { i500 : 0.6 , i100 : 0.4 } \u6761\u4ef6\u6982\u7387\u7684\u8868\u793a\u6709\u4e9b\u590d\u6742\uff0c\u7528\u5d4c\u5957\u7684\u5b57\u5178\u6765\u5b9e\u73b0\uff1a { i500 : { 1 : { appearance : 0.3333333333333333 , health : 0.4444444444444444 , both : 0.2222222222222222 }, 2 : { active : 0.4444444444444444 , sedentary : 0.2222222222222222 , moderate : 0.3333333333333333 }, 3 : { aggressive : 0.6666666666666666 , moderate : 0.3333333333333333 }, 4 : { yes : 0.6666666666666666 , no : 0.3333333333333333 }}, i100 : { 1 : { both : 0.5 , health : 0.16666666666666666 , appearance : 0.3333333333333333 }, 2 : { active : 0.3333333333333333 , sedentary : 0.5 , moderate : 0.16666666666666666 }, 3 : { aggressive : 0.16666666666666666 , moderate : 0.8333333333333334 }, 4 : { yes : 0.3333333333333333 , no : 0.6666666666666666 }}} 1\u30012\u30013\u30014\u8868\u793a\u7b2c\u51e0\u5217\uff0c\u6240\u4ee5\u7b2c\u4e00\u884c\u53ef\u4ee5\u89e3\u91ca\u4e3a\u8d2d\u4e70i500\u7684\u987e\u5ba2\u4e2d\u8fd0\u52a8\u76ee\u7684\u662f\u5916\u8868\u7684\u6982\u7387\u662f 0.333\u3002 \u4e3a\u4e86\u8ba1\u7b97\u6982\u7387\uff0c\u8981\u8fdb\u884c\u8ba1\u6570\uff0c\u53ef\u4ee5\u7528\u5b57\u5178\u6765\u7edf\u8ba1\u6bcf\u4e2a\u578b\u53f7\u7684\u6b21\u6570\u3002 \u4ee5\u4e0b\u662f\u8bad\u7ec3\u7528\u7684Python\u4ee3\u7801\uff1a class NavieBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u603b\u6761\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] for i in range ( len ( fields )): if self . format [ i ] == num : vector . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) self . tmp = counts def classify ( self , itemVector ): \u8fd4\u56deitemVector\u6240\u5c5e\u7c7b\u522b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob = prob * self . conditional [ category ][ col ][ attrValue ] col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] if __name__ == __main__ : c = NavieBayes ( iHealth/i , 10 , attr \\t attr \\t attr \\t attr \\t class ) print ( c . classify ([ health moderate , moderate , yes ]))","title":"Example: \u624b\u73af\u63a8\u8350"},{"location":"bigdata/gdm/ch5/#example_1","text":"\u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e \uff0c\u5176\u4e2d\u6bcf\u6761\u8bb0\u5f55\u4ee3\u8868\u4e00\u4e2a\u9009\u6c11\uff0c\u7b2c\u4e00\u5217\u662f\u5206\u7c7b\u540d\u79f0\uff08democrat, republican\uff09\uff0c\u4e4b\u540e\u662f16\u6761\u6cd5\u6848\uff0c\u7528y\u548cn\u8868\u793a\u8be5\u4eba\u662f\u5426\u652f\u6301\u3002 \u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a democrat y n y n n y y y y y n n y n n y democrat y y y n n y y y y n n n n n y y republican y y n y y y n n n y n y y y n n \u5728\u8c03\u7528\u4e0a\u4e00\u8282\u7f16\u5199\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\u4f7f\u7528\u4ee5\u4e0bdataFormat\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86\uff1a class\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\t attr\\tattr\\tattr \u6982\u7387\u503c\u4e3a0 \u4f46\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\u3002 \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u5176\u5b9e\u662f\u771f\u5b9e\u6982\u7387\u7684\u4e00\u79cd\u4f30\u8ba1\uff0c\u800c\u771f\u5b9e\u6982\u7387\u662f\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u5f97\u5230\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6240\u6709\u4eba\u90fd\u505a\u8840\u6db2\u6d4b\u8bd5\uff0c\u624d\u80fd\u5f97\u5230\u5065\u5eb7\u4eba\u8fd4\u56de\u9634\u6027\u7ed3\u679c\u7684\u771f\u5b9e\u6982\u7387\u3002\u663e\u7136\uff0c\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u9009\u53d6\u4e00\u4e2a\u6837\u672c\uff0c\u59821000\u4eba\uff0c\u5bf9\u4ed6\u4eec\u8fdb\u884c\u6d4b\u8bd5\u5e76\u8ba1\u7b97\u6982\u7387\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u4f30\u8ba1\u90fd\u662f\u63a5\u8fd1\u4e8e\u771f\u5b9e\u6982\u7387\u7684\u3002\u4f46\u5f53\u771f\u5b9e\u6982\u7387\u975e\u5e38\u5c0f\u65f6\uff0c\u8fd9\u79cd\u62bd\u6837\u7edf\u8ba1\u7684\u505a\u6cd5\u5c31\u4f1a\u6709\u95ee\u9898\u4e86\u3002\u6bd4\u5982\u8bf4\uff0c\u6c11\u4e3b\u515a\u5bf9\u7f51\u7edc\u975e\u6cd5\u4f20\u64ad\u6cd5\u6848\u7684\u5426\u51b3\u7387\u662f0.03\uff0c\u5373 P(S=no|\u6c11\u4e3b\u515a) = 0.03 P(S=no|\u6c11\u4e3b\u515a) = 0.03 \u3002\u5982\u679c\u6211\u4eec \u5206\u522b\u9009\u53d6\u5341\u4e2a\u6c11\u4e3b\u515a\u548c\u5171\u548c\u515a\u4eba\uff0c\u770b\u4ed6\u4eec\u5bf9\u8be5\u6cd5\u6848\u7684\u6295\u7968\u60c5\u51b5\uff0c\u4f60\u89c9\u5f97\u5f97\u5230\u7684\u6982\u7387\u4f1a\u662f\u4ec0\u4e48\uff1f\u7b54\u6848\u5f88\u53ef\u80fd\u662f0\u3002 \u5728\u6734\u7d20\u8d1d\u53f6\u65af\u4e2d\uff0c\u6982\u7387\u4e3a0\u7684\u5f71\u54cd\u662f\u5f88\u5927\u7684\u3002\u5982\u679c\u5176\u4e2d\u2f00\u4e2a\u6982\u7387\u503c\u4e3a0\uff0c\u90a3\u4e48\u6700\u540e\u7684\u4e58\u79ef\u4e5f\u4e3a0\u3002 \u4e3a\u4e86\u8868\u793a\u65b9\u4fbf\uff0c\u6211\u4eec\u91c7\u7528\u4ee5\u4e0b\u516c\u5f0f\uff1a P(x|y)=\\frac{n_c}{n} P(x|y)=\\frac{n_c}{n} \u5176\u4e2d, n n \u8868\u793a\u8bad\u7ec3\u96c6\u4e2dy\u7c7b\u522b\u7684\u8bb0\u5f55\u6570\uff1b n_c n_c \u8868\u793a y y \u7c7b\u522b\u4e2d\u503c\u4e3a x x \u7684\u8bb0\u5f55\u6570\u3002\u6211\u4eec\u7684\u95ee\u9898\u662f n_c n_c \u53ef\u80fd\u4e3a0\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u516c\u793a\u53d8\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a P(x|y)=\\frac{n_c+mp}{n+m} P(x|y)=\\frac{n_c+mp}{n+m} m m \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u8868\u793a\u7b49\u6548\u6837\u672c\u5927\u5c0f\u3002\u51b3\u5b9a\u5e38\u6570 m m \u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u503c\u7684\u7c7b\u522b\u6570\u76ee\u6765\u4f5c\u4e3a m m \uff0c\u6bd4\u5982\u6295\u7968\u6709\u8d5e\u6210\u548c\u5426\u51b3\u4e24\u79cd\u7c7b\u522b\uff0c\u6240\u4ee5 m m \u5c31\u4e3a2\u3002 p p \u5219\u662f\u76f8\u5e94\u7684\u5148\u9a8c\u6982\u7387\uff0c\u6bd4\u5982\u8bf4\u8d5e\u6210\u548c\u5426\u51b3\u7684\u6982\u7387\u5206\u522b\u662f0.5\uff0c\u90a3 p p \u5c31\u662f0.5\u3002","title":"Example: \u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e"},{"location":"bigdata/gdm/ch5/#2","text":"\u5728\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e2d\uff0c\u4e4b\u524d\u6211\u4eec\u5bf9\u4e8b\u7269\u8fdb\u884c\u4e86\u8ba1\u6570\uff0c\u8fd9\u79cd\u8ba1\u6570\u5219\u662f\u53ef\u4ee5\u5ea6\u91cf\u7684\u3002\u5bf9\u4e8e\u6570\u503c\u578b\u7684\u6570\u636e\u8981\u5982\u4f55\u8ba1\u6570\u5462\uff1f\u901a\u5e38\u6709\u4e24\u79cd\u505a\u6cd5\uff1a\u533a\u5206\u7c7b\u522b\u548c\u9ad8\u65af\u5206\u5e03\u3002","title":"2 \u6570\u503c\u578b\u6570\u636e"},{"location":"bigdata/gdm/ch5/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u5212\u5b9a\u51e0\u4e2a\u8303\u56f4\u4f5c\u4e3a\u5206\u7c7b\uff0c\u5982\uff1a \u5e74\u9f84 18 18 - 22 23 - 30 31 - 40 40 \u5e74\u85aa $200,000 150,000 - 200,000 100,000 - 150,000 60,000 - 100,000 40,000 - 60,000 \u5212\u5206\u7c7b\u522b\u540e\uff0c\u5c31\u53ef\u4ee5\u5e94\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e86\u3002","title":"\u533a\u5206\u7c7b\u522b"},{"location":"bigdata/gdm/ch5/#_4","text":"\u5c5e\u4e8e\u7c7b\u522b y_i y_i \u7684\u7279\u5f81 x_i x_i \u7684\u6982\u7387\u4e3a P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} \u4e3a\u4e86\u4e3e\u4f8b\uff0c\u6211\u4eec\u4e3a\u4e0a\u9762\u8bb2\u8ff0\u7684\u624b\u73af\u7684\u4f8b\u5b50\u589e\u52a0\u4e00\u5217\u6536\u5165\u5c5e\u6027\u3002\u5047\u8bbe\u6211\u4eec\u8981\u8ba1\u7b97 P(100k|i500) P(100k|i500) \u7684\u6982\u7387\uff0c\u5373\u8d2d\u4e70i500\u7684\u7528\u6237\u4e2d\u6536\u5165\u662f100,000\u7f8e\u5143\u7684\u6982\u7387\u3002\u90a3\u4e48\u8fd9\u91cc u_{ij}, \\sigma_{ij} u_{ij}, \\sigma_{ij} \u5206\u522b\u5bf9\u5e94\u7684\u662f\u8d2d\u4e70i500\u7684\u7528\u6237\u7684\u5e73\u5747\u6536\u5165\u548c\u6536\u5165\u7684\u6807\u51c6\u5dee\u3002 \u6837\u672c\u6807\u51c6\u5dee\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \u6ce8\u610f\u5206\u6bcd\u4e2d\u7684\u662f \\text{card}(x)-1 \\text{card}(x)-1 \u4e0d\u662f \\text{card}(x) \\text{card}(x) \u3002 \u5728\u8bad\u7ec3\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u5c5e\u6027\u7684\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u51fa\u6765\uff0c\u800c\u5206\u7c7b\u9636\u6bb5\u4f7f\u7528\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff1a def pdf ( mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart","title":"\u9ad8\u65af\u5206\u5e03"},{"location":"bigdata/gdm/ch5/#example_2","text":"\u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6\u5728 \u524d\u4e00\u7ae0 \u5df2\u7ecf\u8fdb\u884c\u4e86\u8be6\u7ec6\u63cf\u8ff0\u3002\u8be5\u6570\u636e\u96c6\u5305\u542b\u4e86\u6570\u503c\u578b\u7279\u5f81\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528\u4e0a\u4e00\u8282\u4ee3\u7801\u3002\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u76f4\u63a5\u7528\u8ba1\u6570\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u67d0\u4e2a\u5177\u4f53\u7279\u5f81\u7684\u503c\u51fa\u73b0\u7684\u6982\u7387\uff0c\u800c\u662f\u8981\u7528\u9ad8\u65af\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u8ba1\u7b97\u3002 import math import numpy as np class NaiveBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u5bf9\u6570\u503c\u578b\u6570\u636e\u8fdb\u884c\u6c42\u548c totals = {} numericValues = {} # \u5bf9\u5206\u7c7b\u578b\u6570\u636e\u8fdb\u884c\u8ba1\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u5206\u7c7b\u578b\u6570\u636e # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u5904\u7406\u6570\u503c\u578b\u6570\u636e col = 0 # column number totals . setdefault ( category , {}) numericValues . setdefault ( category , {}) for columnValue in nums : col += 1 totals [ category ] . setdefault ( col , 0 ) totals [ category ][ col ] += columnValue numericValues [ category ] . setdefault ( col , []) numericValues [ category ][ col ] . append ( columnValue ) # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) # \u8ba1\u7b97\u5e73\u5747\u6570\u548c\u6837\u672c\u6807\u51c6\u5dee self . means = {} self . standard_deviation = {} for category , columns in totals . items (): self . means . setdefault ( category , {}) self . standard_deviation . setdefault ( category , {}) for col , sums in columns . items (): self . means [ category ][ col ] = sums / len ( numericValues [ category ][ col ]) self . standard_deviation [ category ][ col ] = np . sqrt ( np . sum ( np . power ( ( np . array ( numericValues [ category ][ col ]) - self . means [ category ][ col ]), 2 )) / ( len ( numericValues [ category ][ col ]) - 1.0 )) def pdf ( self , mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart def classify ( self , itemVector , numVector ): \u6839\u636eitemVector\u548cnumVector\u8fdb\u884c\u5206\u7c7b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob *= self . conditional [ category ][ col ][ attrValue ] col += 1 col = 1 for numValue in numVector : #\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u5206\u5e03 prob *= self . pdf ( self . means [ category ][ col ], self . standard_deviation [ category ][ col ], numValue ) col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] def testBucket ( self , bucketPrefix , i ): \u6d4b\u8bd5 :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param i: \u7f16\u53f7 :return: \u6d4b\u8bd5\u7ed3\u679c filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () results = {} for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] test_result = self . classify ( vector , nums ) results . setdefault ( category , {}) results [ category ] . setdefault ( test_result , 0 ) results [ category ][ test_result ] += 1 return results def tenfold ( bucketPrefix , dataFormat ): results = {} for i in range ( 1 , 11 ): c = NaiveBayes ( bucketPrefix , i , dataFormat ) t = c . testBucket ( bucketPrefix , i ) for ( key , value ) in t . items (): results . setdefault ( key , {}) for ( ckey , cvalue ) in value . items (): results [ key ] . setdefault ( ckey , 0 ) results [ key ][ ckey ] += cvalue # now print results categories = list ( results . keys ()) categories . sort () print ( \\n Classified as: ) header = subheader = + for category in categories : header += % 2s % category subheader += -----+ print ( header ) print ( subheader ) total = 0.0 correct = 0.0 for category in categories : row = %s | % category for c2 in categories : if c2 in results [ category ]: count = results [ category ][ c2 ] else : count = 0 row += %3i | % count total += count if c2 == category : correct += count print ( row ) print ( subheader ) print ( \\n %5.3f percent correct % (( correct * 100 ) / total )) print ( total of %i instances % total ) if __name__ == __main__ : tenfold ( pimaSmall/pimaSmall , num \\t num \\t num \\t num \\t num \\t num \\t num \\t num \\t class ) \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a Classified as: 0 1 +-----+-----+ 0 | 46 | 13 | 1 | 15 | 26 | +-----+-----+ 72.000 percent correct total of 100 instances \u4e0ekNN\u76f8\u6bd4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u51c6\u786e\u7387\u66f4\u597d\uff0c\u800c\u4e14\u8ba1\u7b97\u66f4\u5feb\u3002","title":"Example: \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5"},{"location":"bigdata/gdm/ch5/#_5","text":"\u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u5c06\u591a\u4e2a\u6982\u7387\u8fdb\u884c\u76f8\u4e58\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6982\u7387\u90fd\u662f\u5177\u6709\u72ec\u7acb\u6027\u7684\u3002\u5173\u4e8e\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u53ef\u4ee5\u53c2\u89c1 \u6982\u7387\u5bfc\u8bba \u3002 In simple terms, a naive Bayes classifier assumes that the presence (or absence) of a particular feature of a class is unrelated to the presence (or absence) of any other feature, given the class variable. For example, a fruit may be considered to be an apple if it is red, round, and about 4\" in diameter. Even if these features depend on each other or upon the existence of the other features, a naive Bayes classifier considers all of these properties to independently contribute to the probability that this fruit is an apple. [ ref ] \u4f46\u662f\u5728\u73b0\u5b9e\u6570\u636e\u6316\u6398\u573a\u666f\u4e2d\uff0c\u8fd9\u79cd\u7279\u5f81\u53d8\u91cf\u4e4b\u95f4\u5f80\u5f80\u4e0d\u76f8\u4e92\u72ec\u7acb\u3002 \u8fd0\u52a8\u5458\u4f8b\u5b50\u4e2d\uff0c\u8eab\u9ad8\u548c\u4f53\u91cd\u4e0d\u662f\u4e92\u76f8\u72ec\u7acb\u7684\uff0c\u56e0\u4e3a\u9ad8\u7684\u4eba\u4f53\u91cd\u4e5f\u4f1a\u8f83\u9ad8\u3002 \u5730\u533a\u90ae\u7f16\u3001\u6536\u5165\u3001\u5e74\u9f84\uff0c\u8fd9\u4e9b\u7279\u5f81\u4e5f\u4e0d\u5b8c\u5168\u72ec\u7acb\uff0c\u4e00\u4e9b\u5730\u533a\u7684\u623f\u5c4b\u90fd\u5f88\u6602\u8d35\uff0c\u4e00\u4e9b\u5730\u533a\u5219\u53ea\u6709\u623f\u8f66\uff1a\u52a0\u5dde\u5e15\u7f57\u5965\u56fe\u5927\u591a\u662f20\u5c81\u7684\u5e74\u8f7b\u4eba\uff0c\u800c\u4e9a\u5229\u6851\u90a3\u5dde\u5219\u591a\u662f\u9000\u4f11\u4eba\u5458\u3002 \u5728\u97f3\u4e50\u57fa\u56e0\u5de5\u7a0b\u4e2d\uff0c\u5f88\u591a\u7279\u5f81\u4e5f\u662f\u4e0d\u72ec\u7acb\u7684\uff0c\u5982\u679c\u97f3\u4e50\u4e2d\u6709\u5f88\u591a\u53d8\u97f3\u5409\u4ed6\uff0c\u90a3\u5c0f\u63d0\u7434\u7684 \u6982\u7387\u5c31\u964d\u4f4e\u4e86\u3002 \u8840\u6db2\u68c0\u9a8c\u7684\u7ed3\u679c\u4e2d\uff0cT4\u548cTSH\u8fd9\u4e24\u4e2a\u6307\u6807\u901a\u5e38\u662f\u5448\u53cd\u6bd4\u7684\u3002 \u6240\u4ee5\uff0c\u5728\u4f7f\u7528\u8d1d\u53f6\u65af\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e92\u76f8\u72ec\u7acb\u7684\u7279\u5f81\uff0c\u4f46\u73b0\u5b9e\u751f\u6d3b\u4e2d\u5f88\u96be\u627e\u5230\u8fd9\u6837\u7684\u5e94\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u80fd\u5047\u8bbe\u4ed6\u4eec\u662f\u72ec\u7acb\u7684\u4e86\uff01\u6211\u4eec\u5b8c\u5168\u5ffd\u7565\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64\u624d\u79f0\u4e3a\u201c\u6734\u7d20\u7684\u201d\uff08\u5929\u771f\u7684\uff09\u8d1d\u53f6\u65af\u65b9\u6cd5\u3002\u4e0d\u8fc7\u4e8b\u5b9e\u8bc1\u660e\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u6548\u679c\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u53eb\u201c\u6734\u7d20\u8d1d\u53f6\u65af\u201d\u5462\uff1f"},{"location":"bigdata/gdm/ch6/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 6 \u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u548c\u975e\u7ed3\u6784\u5316\u6587\u672c \u7ed3\u6784\u5316\u6570\u636e \u662f\u6307\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u6761\u6570\u636e\uff08\u4e0a\u8868\u4e2d\u7684\u4e00\u884c\uff09\u7531\u591a\u4e2a\u7279\u5f81\u8fdb\u884c\u63cf\u8ff0\u3002\u4f8b\u5982\u524d\u9762\u7ae0\u8282\u6d89\u53ca\u7684\u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e \u6307\u7684\u662f\u8bf8\u5982\u7535\u5b50\u90ae\u4ef6\u6587\u672c\u3001\u63a8\u7279\u4fe1\u606f\u3001\u535a\u5ba2\u3001\u65b0\u95fb\u7b49\u3002\u8fd9\u4e9b\u6570\u636e\u81f3\u5c11\u7b2c\u4e00\u773c\u770b\u8d77\u6765\u662f\u65e0\u6cd5\u7528\u4e00\u5f20\u8868\u683c\u6765\u5c55\u73b0\u7684\u3002 \u81ea\u52a8\u5224\u522b\u6587\u672c\u4e2d\u7684\u611f\u60c5\u8272\u5f69 \u5047\u8bbe\u6211\u4eec\u8981\u6784\u5efa\u4e00\u4e2a\u81ea\u52a8\u5224\u522b\u6587\u672c\u611f\u60c5\u8272\u5f69\u7684\u7cfb\u7edf\uff0c\u5b83\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u6bd4\u5982\u8bf4\u6709\u5bb6\u516c\u53f8\u662f\u552e\u5356\u5065\u5eb7\u68c0\u6d4b\u8bbe\u5907\u7684\uff0c\u4ed6\u4eec\u60f3\u8981\u77e5\u9053\u4eba\u4eec\u5bf9\u8fd9\u6b3e\u4ea7\u54c1\u7684\u53cd\u54cd\u5982\u4f55\u3002\u4ed6\u4eec\u6295\u653e\u4e86\u5f88\u591a\u5e7f\u544a\uff0c\u987e\u5ba2\u662f\u559c\u6b22(\u6211\u597d\u60f3\u4e70\u4e00\u53f0)\u8fd8\u662f\u8ba8\u538c(\u770b\u8d77\u6765\u5f88\u7cdf\u7cd5)\u5462\uff1f \u5047\u8bbe\u6211\u8981\u4ece\u6587\u672c\u4e2d\u533a\u5206\u987e\u5ba2\u5bf9\u67d0\u4e9b\u98df\u54c1\u7684\u559c\u597d\uff0c\u53ef\u80fd\u5c31\u4f1a\u5217\u51fa\u4e00\u4e9b\u8868\u8fbe\u559c\u6b22\u7684\u8bcd\u8bed\uff0c\u4ee5\u53ca\u8868\u8fbe\u538c\u6076\u7684\u8bcd\uff1a \u8868\u8fbe\u559c\u6b22\u7684\u8bcd\uff1a\u7f8e\u5473\u3001\u597d\u5403\u3001\u4e0d\u9519\u3001\u559c\u6b22\u3001\u53ef\u53e3 \u8868\u8fbe\u538c\u6076\u7684\u8bcd\uff1a\u7cdf\u7cd5\u3001\u96be\u5403\u3001\u4e0d\u597d\u3001\u8ba8\u538c\u3001\u6076\u5fc3 \u6211\u4eec\u7684\u8bad\u7ec3\u96c6\u662f\u4e00\u7ec4\u6587\u672c\uff0c\u53c8\u79f0\u4e3a \u8bed\u6599\u5e93 \u3002\u6bcf\u4e2a\u6587\u672c(\u5373\u6bcf\u6761\u8bb0\u5f55)\u662f\u4e00\u6761\u63a8\u6587\uff0c\u5e76\u88ab\u6807\u8bb0\u4e3a\u559c\u6b22\u548c\u8ba8\u538c\u4e24\u7c7b\u3002 \u8bad\u7ec3\u9636\u6bb5 \u9996\u5148\uff0c\u6211\u4eec\u7edf\u8ba1\u6240\u6709\u6587\u672c\u4e2d\u4e00\u5171\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5355\u8bcd\uff0c\u8bb0\u4f5c\u201c|Vocabulary|\u201d\uff08\u603b\u8bcd\u6c47\u8868\uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd w_k w_k \uff0c\u6211\u4eec\u5c06\u8ba1\u7b97 P(w_k|h_i) P(w_k|h_i) \uff0c\u6bcf\u4e2a h_i h_i (\u559c\u6b22\u548c\u8ba8\u538c\u4e24\u79cd)\u7684\u8ba1\u7b97\u6b65\u9aa4\u5982\u4e0b\uff1a \u5c06\u8be5\u5206\u7c7b\u4e0b\u7684\u6240\u6709\u6587\u7ae0\u5408\u5e76\u5230\u4e00\u8d77\uff1b \u7edf\u8ba1\u6bcf\u4e2a\u5206\u7c7b\u4e2d\u5355\u8bcd\u6570\u91cf\uff0c\u8bb0\u4e3a n_i n_i \uff1b \u5bf9\u4e8e\u603b\u8bcd\u6c47\u8868\u4e2d\u7684\u5355\u8bcd w_k w_k \uff0c\u7edf\u8ba1\u4ed6\u4eec\u5728\u672c\u7c7b\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 n_k n_k \u6700\u540e\u8ba1\u7b97\u6982\u7387\uff1a P(w_k|h_i)=\\large \\frac{n_k+1}{n_i+|\\text{Vocabulary}|} P(w_k|h_i)=\\large \\frac{n_k+1}{n_i+|\\text{Vocabulary}|} \u5206\u7c7b\u9636\u6bb5 \u5206\u7c7b\u9636\u6bb5\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u5e94\u7528\u8d1d\u53f6\u65af\u516c\u5f0f\u5c31\u53ef\u4ee5\u4e86\u3002 \u6bd4\u5982\u4e0b\u9762\u8fd9\u53e5\u8bdd\uff0c\u8981\u5982\u4f55\u5224\u65ad\u5b83\u662f\u6b63\u9762\u8fd8\u662f\u8d1f\u9762\u7684\u5462\uff1f\u201cI am stunned by the hype over gravity.\u201d \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u7684\u662f\u4e0b\u9762\u4e24\u4e2a\u6982\u7387\uff0c\u5e76\u9009\u53d6\u8f83\u9ad8\u7684\u7ed3\u679c\uff1a P(like)\u00d7P(I|like)\u00d7P(am|like)\u00d7P(stunned|like)\u00d7... P(dislike)\u00d7P(I|dislike)\u00d7P(am|dislike)\u00d7P(stunned|dislike)\u00d7... Application: 20 Newsgroups 20newsgroups\u6570\u636e\u96c6\u662f\u7528\u4e8e\u6587\u672c\u5206\u7c7b\u3001\u6587\u672c\u6316\u636e\u548c\u4fe1\u606f\u68c0\u7d22\u7814\u7a76\u7684\u56fd\u9645\u6807\u51c6\u6570\u636e\u96c6\u4e4b\u4e00\u3002\u6570\u636e\u96c6\u6536\u96c6\u4e86\u5927\u7ea620,000\u5de6\u53f3\u7684\u65b0\u95fb\u7ec4\u6587\u6863\uff0c\u5206\u4e3a20\u4e2a\u4e0d\u540c\u4e3b\u9898\u7684\u65b0\u95fb\u7ec4\u96c6\u5408\u3002 \u4e0b\u8f7d\u4e0b\u6765\u540e\uff0c\u6587\u6863\u683c\u5f0f\u5982\u4e0b\uff1a \u505c\u7528\u8bcd \u505c\u7528\u8bcd \u6307\u7684\u662f\u90a3\u4e9b\u6ca1\u6709\u610f\u4e49\u7684\u3001\u7ec4\u6210\u8bed\u6cd5\u7ed3\u6784\u7684\u5355\u8bcd\uff0c\u5b83\u4eec\u4ea7\u751f\u4f1a\u5f88\u591a\u566a\u97f3\u3002\u8fd9\u4e9b\u5355\u8bcd\u4e00\u822c\u5e76\u4e0d\u4f1a\u5bf9\u5206\u7c7b\u7ed3\u679c\u4ea7\u751f\u5927\u7684\u5f71\u54cd\u3002\u6709\u4e13\u95e8\u7684\u505c\u7528\u8bcd\u8868\u53ef\u4f9b\u4f7f\u7528\u3002 \u53bb\u9664\u505c\u7528\u8bcd\u7684\u597d\u5904\uff1a \u80fd\u591f\u51cf\u5c11\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u91cf\uff1b \u8fd9\u4e9b\u8bcd\u7684\u5b58\u5728\u4f1a\u5bf9\u5206\u7c7b\u6548\u679c\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002 \u4e2d\u6587\u7684\u5e38\u7528\u505c\u7528\u8bcd\u8868\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u82f1\u6587\u7684\u505c\u7528\u8bcd\u8868 \u5e38\u7528\u8bcd\u548c\u505c\u8bcd \u867d\u7136\u50cfthe\u3001a\u8fd9\u79cd\u5355\u8bcd\u7684\u786e\u6ca1\u6709\u610f\u4e49\uff0c\u4f46\u6709\u4e9b \u5e38\u7528\u8bcd \u5982work\u3001write\u3001school\u7b49\u5728\u67d0\u4e9b\u573a\u5408\u4e0b\u8fd8\u662f\u6709\u4f5c\u7528\u7684\uff0c\u5982\u679c\u5c06\u4ed6\u4eec\u4e5f\u5217\u8fdb\u505c\u8bcd\u8868\u91cc\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\u3002 Python\u4ee3\u7801 \u5206\u7c7b\u5668\u7684\u521d\u59cb\u5316\u4ee3\u7801\u8981\u5b8c\u6210\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u8bfb\u53d6\u505c\u8bcd\u5217\u8868\uff1b \u83b7\u53d6\u8bad\u7ec3\u96c6\u4e2d\u5404\u76ee\u5f55\uff08\u5206\u7c7b\uff09\u7684\u540d\u79f0\uff1b \u5bf9\u4e8e\u5404\u4e2a\u5206\u7c7b\uff0c\u8c03\u7528train\u65b9\u6cd5\uff0c\u7edf\u8ba1\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1b \u8ba1\u7b97\u5404\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6982\u7387 class BayesText : def __init__ ( self , trainingdir , stopwordlist ): This class implements a naive Bayes approach to text classification. :param trainingdir, is the training data. Each subdirectory of trainingdir is titled with the name of the classification category -- those subdirectories in turn contain the text files for that category. :param stopwordlist, is a list of words (one per line) will be removed before any counting takes place. self . vocabulary = {} self . prob = {} self . totals = {} self . stopwords = {} f = codecs . open ( stopwordlist , mode = r , encoding = utf-8 ) for line in f : self . stopwords [ line . strip ()] = 1 f . close () categories = os . listdir ( trainingdir ) # filter out files that are not directories self . categories = [ filename for filename in categories if os . path . isdir ( trainingdir + filename )] print ( Counting ... ) for category in self . categories : print ( + category ) ( self . prob [ category ], self . totals [ category ]) = self . train ( trainingdir , category ) # I am going to eliminate any word in the vocabulary # that doesn t occur at least 3 times toDelete = [] for word in self . vocabulary : if self . vocabulary [ word ] 3 : # mark word for deletion # can t delete now because you can t delete # from a list you are currently iterating over toDelete . append ( word ) # now delete for word in toDelete : del self . vocabulary [ word ] # now compute probabilities vocabLength = len ( self . vocabulary ) print ( Computing probabilities: ) for category in self . categories : print ( + category ) denominator = self . totals [ category ] + vocabLength for word in self . vocabulary : if word in self . prob [ category ]: count = self . prob [ category ][ word ] else : count = 1 self . prob [ category ][ word ] = ( float ( count + 1 ) / denominator ) print ( DONE TRAINING \\n\\n ) def train ( self , trainingdir , category ): counts word occurrences for a particular category currentdir = trainingdir + category files = os . listdir ( currentdir ) counts = {} total = 0 for file in files : f = codecs . open ( currentdir + / + file , r , iso8859-1 ) for line in f : tokens = line . split () for token in tokens : # get rid of punctuation and lowercase token token = token . strip ( \\ .,?:- ) token = token . lower () if token != and not token in self . stopwords : self . vocabulary . setdefault ( token , 0 ) self . vocabulary [ token ] += 1 counts . setdefault ( token , 0 ) counts [ token ] += 1 total += 1 f . close () return ( counts , total ) def classify ( self , filename ): classify files :param filename: a file :return: classification result results = {} for category in self . categories : results [ category ] = 0 f = codecs . open ( filename , r , iso8859-1 ) for line in f : tokens = line . split () for token in tokens : # print(token) token = token . strip ( \\ .,?:- ) . lower () if token in self . vocabulary : for category in self . categories : if self . prob [ category ][ token ] == 0 : print ( %s %s % ( category , token )) results [ category ] += math . log ( self . prob [ category ][ token ]) f . close () results = list ( results . items ()) results . sort ( key = lambda tuple : tuple [ 1 ], reverse = True ) # for debugging I can change this to give me the entire list return results [ 0 ][ 0 ] def testCategory ( self , directory , category ): test all files for the category in this directory :param directory: a directory containing category :param category: a categeory folder contains files files = os . listdir ( directory ) total = 0 correct = 0 for file in files : total += 1 result = self . classify ( directory + file ) if result == category : correct += 1 return ( correct , total ) def test ( self , testdir ): Test all files in the test directory--that directory is organized into subdirectories--each subdir is a classification category :param testdir: test directory categories = os . listdir ( testdir ) # filter out files that are not directories categories = [ filename for filename in categories if os . path . isdir ( testdir + filename )] correct = 0 total = 0 for category in categories : print ( . , end = ) ( catCorrect , catTotal ) = self . testCategory ( testdir + category + / , category ) correct += catCorrect total += catTotal print ( \\n\\n Accuracy is %f%% ( %i test instances) % (( float ( correct ) / total ) * 100 , total )) \u6734\u7d20\u8d1d\u53f6\u65af\u4e0e\u60c5\u611f\u5206\u6790 \u60c5\u611f\u5206\u6790\u7684\u76ee\u7684\u662f\u5224\u65ad\u4f5c\u8005\u7684\u6001\u5ea6\u6216\u610f\u89c1\u3002\u60c5\u611f\u5206\u6790\u7684\u4f8b\u5b50\u4e4b\u4e00\u662f\u5224\u65ad\u4e00\u7bc7\u8bc4\u8bba\u662f\u6b63\u9762\u7684\u8fd8\u662f\u53cd\u9762\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u6765\u5b9e\u73b0\u3002 Pang Lee 2004\u7684 \u7535\u5f71\u8bc4\u4ef7\u6570\u636e \u96c6\u5305\u542b1000\u4e2a\u6b63\u9762\u548c1000\u4e2a\u8d1f\u9762\u7684\u8bc4\u4ef7\u3002","title":"Chapter 6: \u6734\u7d20\u8d1d\u53f6\u65af\u548c\u6587\u672c\u6570\u636e"},{"location":"bigdata/gdm/ch6/#-6","text":"\u7ed3\u6784\u5316\u6570\u636e \u662f\u6307\u6570\u636e\u96c6\u4e2d\u7684\u6bcf\u6761\u6570\u636e\uff08\u4e0a\u8868\u4e2d\u7684\u4e00\u884c\uff09\u7531\u591a\u4e2a\u7279\u5f81\u8fdb\u884c\u63cf\u8ff0\u3002\u4f8b\u5982\u524d\u9762\u7ae0\u8282\u6d89\u53ca\u7684\u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6\u3002 \u975e\u7ed3\u6784\u5316\u6570\u636e \u6307\u7684\u662f\u8bf8\u5982\u7535\u5b50\u90ae\u4ef6\u6587\u672c\u3001\u63a8\u7279\u4fe1\u606f\u3001\u535a\u5ba2\u3001\u65b0\u95fb\u7b49\u3002\u8fd9\u4e9b\u6570\u636e\u81f3\u5c11\u7b2c\u4e00\u773c\u770b\u8d77\u6765\u662f\u65e0\u6cd5\u7528\u4e00\u5f20\u8868\u683c\u6765\u5c55\u73b0\u7684\u3002","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 6 \u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u548c\u975e\u7ed3\u6784\u5316\u6587\u672c"},{"location":"bigdata/gdm/ch6/#_1","text":"\u5047\u8bbe\u6211\u4eec\u8981\u6784\u5efa\u4e00\u4e2a\u81ea\u52a8\u5224\u522b\u6587\u672c\u611f\u60c5\u8272\u5f69\u7684\u7cfb\u7edf\uff0c\u5b83\u6709\u4ec0\u4e48\u4f5c\u7528\u5462\uff1f\u6bd4\u5982\u8bf4\u6709\u5bb6\u516c\u53f8\u662f\u552e\u5356\u5065\u5eb7\u68c0\u6d4b\u8bbe\u5907\u7684\uff0c\u4ed6\u4eec\u60f3\u8981\u77e5\u9053\u4eba\u4eec\u5bf9\u8fd9\u6b3e\u4ea7\u54c1\u7684\u53cd\u54cd\u5982\u4f55\u3002\u4ed6\u4eec\u6295\u653e\u4e86\u5f88\u591a\u5e7f\u544a\uff0c\u987e\u5ba2\u662f\u559c\u6b22(\u6211\u597d\u60f3\u4e70\u4e00\u53f0)\u8fd8\u662f\u8ba8\u538c(\u770b\u8d77\u6765\u5f88\u7cdf\u7cd5)\u5462\uff1f \u5047\u8bbe\u6211\u8981\u4ece\u6587\u672c\u4e2d\u533a\u5206\u987e\u5ba2\u5bf9\u67d0\u4e9b\u98df\u54c1\u7684\u559c\u597d\uff0c\u53ef\u80fd\u5c31\u4f1a\u5217\u51fa\u4e00\u4e9b\u8868\u8fbe\u559c\u6b22\u7684\u8bcd\u8bed\uff0c\u4ee5\u53ca\u8868\u8fbe\u538c\u6076\u7684\u8bcd\uff1a \u8868\u8fbe\u559c\u6b22\u7684\u8bcd\uff1a\u7f8e\u5473\u3001\u597d\u5403\u3001\u4e0d\u9519\u3001\u559c\u6b22\u3001\u53ef\u53e3 \u8868\u8fbe\u538c\u6076\u7684\u8bcd\uff1a\u7cdf\u7cd5\u3001\u96be\u5403\u3001\u4e0d\u597d\u3001\u8ba8\u538c\u3001\u6076\u5fc3 \u6211\u4eec\u7684\u8bad\u7ec3\u96c6\u662f\u4e00\u7ec4\u6587\u672c\uff0c\u53c8\u79f0\u4e3a \u8bed\u6599\u5e93 \u3002\u6bcf\u4e2a\u6587\u672c(\u5373\u6bcf\u6761\u8bb0\u5f55)\u662f\u4e00\u6761\u63a8\u6587\uff0c\u5e76\u88ab\u6807\u8bb0\u4e3a\u559c\u6b22\u548c\u8ba8\u538c\u4e24\u7c7b\u3002 \u8bad\u7ec3\u9636\u6bb5 \u9996\u5148\uff0c\u6211\u4eec\u7edf\u8ba1\u6240\u6709\u6587\u672c\u4e2d\u4e00\u5171\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a\u4e0d\u540c\u7684\u5355\u8bcd\uff0c\u8bb0\u4f5c\u201c|Vocabulary|\u201d\uff08\u603b\u8bcd\u6c47\u8868\uff09\u3002 \u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd w_k w_k \uff0c\u6211\u4eec\u5c06\u8ba1\u7b97 P(w_k|h_i) P(w_k|h_i) \uff0c\u6bcf\u4e2a h_i h_i (\u559c\u6b22\u548c\u8ba8\u538c\u4e24\u79cd)\u7684\u8ba1\u7b97\u6b65\u9aa4\u5982\u4e0b\uff1a \u5c06\u8be5\u5206\u7c7b\u4e0b\u7684\u6240\u6709\u6587\u7ae0\u5408\u5e76\u5230\u4e00\u8d77\uff1b \u7edf\u8ba1\u6bcf\u4e2a\u5206\u7c7b\u4e2d\u5355\u8bcd\u6570\u91cf\uff0c\u8bb0\u4e3a n_i n_i \uff1b \u5bf9\u4e8e\u603b\u8bcd\u6c47\u8868\u4e2d\u7684\u5355\u8bcd w_k w_k \uff0c\u7edf\u8ba1\u4ed6\u4eec\u5728\u672c\u7c7b\u6587\u7ae0\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 n_k n_k \u6700\u540e\u8ba1\u7b97\u6982\u7387\uff1a P(w_k|h_i)=\\large \\frac{n_k+1}{n_i+|\\text{Vocabulary}|} P(w_k|h_i)=\\large \\frac{n_k+1}{n_i+|\\text{Vocabulary}|} \u5206\u7c7b\u9636\u6bb5 \u5206\u7c7b\u9636\u6bb5\u6bd4\u8f83\u7b80\u5355\uff0c\u76f4\u63a5\u5e94\u7528\u8d1d\u53f6\u65af\u516c\u5f0f\u5c31\u53ef\u4ee5\u4e86\u3002 \u6bd4\u5982\u4e0b\u9762\u8fd9\u53e5\u8bdd\uff0c\u8981\u5982\u4f55\u5224\u65ad\u5b83\u662f\u6b63\u9762\u8fd8\u662f\u8d1f\u9762\u7684\u5462\uff1f\u201cI am stunned by the hype over gravity.\u201d \u6211\u4eec\u9700\u8981\u8ba1\u7b97\u7684\u662f\u4e0b\u9762\u4e24\u4e2a\u6982\u7387\uff0c\u5e76\u9009\u53d6\u8f83\u9ad8\u7684\u7ed3\u679c\uff1a P(like)\u00d7P(I|like)\u00d7P(am|like)\u00d7P(stunned|like)\u00d7... P(dislike)\u00d7P(I|dislike)\u00d7P(am|dislike)\u00d7P(stunned|dislike)\u00d7...","title":"\u81ea\u52a8\u5224\u522b\u6587\u672c\u4e2d\u7684\u611f\u60c5\u8272\u5f69"},{"location":"bigdata/gdm/ch6/#application-20-newsgroups","text":"20newsgroups\u6570\u636e\u96c6\u662f\u7528\u4e8e\u6587\u672c\u5206\u7c7b\u3001\u6587\u672c\u6316\u636e\u548c\u4fe1\u606f\u68c0\u7d22\u7814\u7a76\u7684\u56fd\u9645\u6807\u51c6\u6570\u636e\u96c6\u4e4b\u4e00\u3002\u6570\u636e\u96c6\u6536\u96c6\u4e86\u5927\u7ea620,000\u5de6\u53f3\u7684\u65b0\u95fb\u7ec4\u6587\u6863\uff0c\u5206\u4e3a20\u4e2a\u4e0d\u540c\u4e3b\u9898\u7684\u65b0\u95fb\u7ec4\u96c6\u5408\u3002 \u4e0b\u8f7d\u4e0b\u6765\u540e\uff0c\u6587\u6863\u683c\u5f0f\u5982\u4e0b\uff1a","title":"Application: 20 Newsgroups"},{"location":"bigdata/gdm/ch6/#_2","text":"\u505c\u7528\u8bcd \u6307\u7684\u662f\u90a3\u4e9b\u6ca1\u6709\u610f\u4e49\u7684\u3001\u7ec4\u6210\u8bed\u6cd5\u7ed3\u6784\u7684\u5355\u8bcd\uff0c\u5b83\u4eec\u4ea7\u751f\u4f1a\u5f88\u591a\u566a\u97f3\u3002\u8fd9\u4e9b\u5355\u8bcd\u4e00\u822c\u5e76\u4e0d\u4f1a\u5bf9\u5206\u7c7b\u7ed3\u679c\u4ea7\u751f\u5927\u7684\u5f71\u54cd\u3002\u6709\u4e13\u95e8\u7684\u505c\u7528\u8bcd\u8868\u53ef\u4f9b\u4f7f\u7528\u3002 \u53bb\u9664\u505c\u7528\u8bcd\u7684\u597d\u5904\uff1a \u80fd\u591f\u51cf\u5c11\u9700\u8981\u5904\u7406\u7684\u6570\u636e\u91cf\uff1b \u8fd9\u4e9b\u8bcd\u7684\u5b58\u5728\u4f1a\u5bf9\u5206\u7c7b\u6548\u679c\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002 \u4e2d\u6587\u7684\u5e38\u7528\u505c\u7528\u8bcd\u8868\u53ef\u4ee5\u5728 \u8fd9\u91cc \u627e\u5230\u3002 \u82f1\u6587\u7684\u505c\u7528\u8bcd\u8868","title":"\u505c\u7528\u8bcd"},{"location":"bigdata/gdm/ch6/#_3","text":"\u867d\u7136\u50cfthe\u3001a\u8fd9\u79cd\u5355\u8bcd\u7684\u786e\u6ca1\u6709\u610f\u4e49\uff0c\u4f46\u6709\u4e9b \u5e38\u7528\u8bcd \u5982work\u3001write\u3001school\u7b49\u5728\u67d0\u4e9b\u573a\u5408\u4e0b\u8fd8\u662f\u6709\u4f5c\u7528\u7684\uff0c\u5982\u679c\u5c06\u4ed6\u4eec\u4e5f\u5217\u8fdb\u505c\u8bcd\u8868\u91cc\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\u3002","title":"\u5e38\u7528\u8bcd\u548c\u505c\u8bcd"},{"location":"bigdata/gdm/ch6/#python","text":"\u5206\u7c7b\u5668\u7684\u521d\u59cb\u5316\u4ee3\u7801\u8981\u5b8c\u6210\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u8bfb\u53d6\u505c\u8bcd\u5217\u8868\uff1b \u83b7\u53d6\u8bad\u7ec3\u96c6\u4e2d\u5404\u76ee\u5f55\uff08\u5206\u7c7b\uff09\u7684\u540d\u79f0\uff1b \u5bf9\u4e8e\u5404\u4e2a\u5206\u7c7b\uff0c\u8c03\u7528train\u65b9\u6cd5\uff0c\u7edf\u8ba1\u5355\u8bcd\u51fa\u73b0\u7684\u6b21\u6570\uff1b \u8ba1\u7b97\u5404\u4e2a\u5355\u8bcd\u51fa\u73b0\u7684\u6982\u7387 class BayesText : def __init__ ( self , trainingdir , stopwordlist ): This class implements a naive Bayes approach to text classification. :param trainingdir, is the training data. Each subdirectory of trainingdir is titled with the name of the classification category -- those subdirectories in turn contain the text files for that category. :param stopwordlist, is a list of words (one per line) will be removed before any counting takes place. self . vocabulary = {} self . prob = {} self . totals = {} self . stopwords = {} f = codecs . open ( stopwordlist , mode = r , encoding = utf-8 ) for line in f : self . stopwords [ line . strip ()] = 1 f . close () categories = os . listdir ( trainingdir ) # filter out files that are not directories self . categories = [ filename for filename in categories if os . path . isdir ( trainingdir + filename )] print ( Counting ... ) for category in self . categories : print ( + category ) ( self . prob [ category ], self . totals [ category ]) = self . train ( trainingdir , category ) # I am going to eliminate any word in the vocabulary # that doesn t occur at least 3 times toDelete = [] for word in self . vocabulary : if self . vocabulary [ word ] 3 : # mark word for deletion # can t delete now because you can t delete # from a list you are currently iterating over toDelete . append ( word ) # now delete for word in toDelete : del self . vocabulary [ word ] # now compute probabilities vocabLength = len ( self . vocabulary ) print ( Computing probabilities: ) for category in self . categories : print ( + category ) denominator = self . totals [ category ] + vocabLength for word in self . vocabulary : if word in self . prob [ category ]: count = self . prob [ category ][ word ] else : count = 1 self . prob [ category ][ word ] = ( float ( count + 1 ) / denominator ) print ( DONE TRAINING \\n\\n ) def train ( self , trainingdir , category ): counts word occurrences for a particular category currentdir = trainingdir + category files = os . listdir ( currentdir ) counts = {} total = 0 for file in files : f = codecs . open ( currentdir + / + file , r , iso8859-1 ) for line in f : tokens = line . split () for token in tokens : # get rid of punctuation and lowercase token token = token . strip ( \\ .,?:- ) token = token . lower () if token != and not token in self . stopwords : self . vocabulary . setdefault ( token , 0 ) self . vocabulary [ token ] += 1 counts . setdefault ( token , 0 ) counts [ token ] += 1 total += 1 f . close () return ( counts , total ) def classify ( self , filename ): classify files :param filename: a file :return: classification result results = {} for category in self . categories : results [ category ] = 0 f = codecs . open ( filename , r , iso8859-1 ) for line in f : tokens = line . split () for token in tokens : # print(token) token = token . strip ( \\ .,?:- ) . lower () if token in self . vocabulary : for category in self . categories : if self . prob [ category ][ token ] == 0 : print ( %s %s % ( category , token )) results [ category ] += math . log ( self . prob [ category ][ token ]) f . close () results = list ( results . items ()) results . sort ( key = lambda tuple : tuple [ 1 ], reverse = True ) # for debugging I can change this to give me the entire list return results [ 0 ][ 0 ] def testCategory ( self , directory , category ): test all files for the category in this directory :param directory: a directory containing category :param category: a categeory folder contains files files = os . listdir ( directory ) total = 0 correct = 0 for file in files : total += 1 result = self . classify ( directory + file ) if result == category : correct += 1 return ( correct , total ) def test ( self , testdir ): Test all files in the test directory--that directory is organized into subdirectories--each subdir is a classification category :param testdir: test directory categories = os . listdir ( testdir ) # filter out files that are not directories categories = [ filename for filename in categories if os . path . isdir ( testdir + filename )] correct = 0 total = 0 for category in categories : print ( . , end = ) ( catCorrect , catTotal ) = self . testCategory ( testdir + category + / , category ) correct += catCorrect total += catTotal print ( \\n\\n Accuracy is %f%% ( %i test instances) % (( float ( correct ) / total ) * 100 , total ))","title":"Python\u4ee3\u7801"},{"location":"bigdata/gdm/ch6/#_4","text":"\u60c5\u611f\u5206\u6790\u7684\u76ee\u7684\u662f\u5224\u65ad\u4f5c\u8005\u7684\u6001\u5ea6\u6216\u610f\u89c1\u3002\u60c5\u611f\u5206\u6790\u7684\u4f8b\u5b50\u4e4b\u4e00\u662f\u5224\u65ad\u4e00\u7bc7\u8bc4\u8bba\u662f\u6b63\u9762\u7684\u8fd8\u662f\u53cd\u9762\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u6765\u5b9e\u73b0\u3002 Pang Lee 2004\u7684 \u7535\u5f71\u8bc4\u4ef7\u6570\u636e \u96c6\u5305\u542b1000\u4e2a\u6b63\u9762\u548c1000\u4e2a\u8d1f\u9762\u7684\u8bc4\u4ef7\u3002","title":"\u6734\u7d20\u8d1d\u53f6\u65af\u4e0e\u60c5\u611f\u5206\u6790"},{"location":"bigdata/gdm/ch7/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 7 \u805a\u7c7b","title":"Chapter 7: \u805a\u7c7b"},{"location":"bigdata/gdm/ch7/#-7","text":"","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 7 \u805a\u7c7b"},{"location":"bigdata/hadoop/","text":"HADOOP Chapter 1: Meet Hadoop Chapter 2: MapReduce Chapter 3: The Hadoop Distributed FileSystem Chapter 4: YARN Chapter 5: Hadoop I/O Chapter 6: Developing a MapReduce Application Chapter 7: How MapReduce Works Chapter 8: MapReduce Types and Formats Chapter 9: MapReduce Features Chapter 10: Setting Up a Hadoop Cluster Chapter 11: Adminstering Hadoop Chapter 12: Avro Chapter 13: Parquet Chapter 14: Flume Chapter 15: Sqoop Chapter 16: Pig Chapter 17: Hive Chapter 18: Crunch Chapter 19: Spark Chapter 20: HBase Chapter 21: ZooKeeper Chapter 22: Composable Data at Center Chapter 23: Biological Data Science: Saving Lives with Software Chapter 24: Cascading","title":"Contents"},{"location":"bigdata/hadoop/#hadoop","text":"Chapter 1: Meet Hadoop Chapter 2: MapReduce Chapter 3: The Hadoop Distributed FileSystem Chapter 4: YARN Chapter 5: Hadoop I/O Chapter 6: Developing a MapReduce Application Chapter 7: How MapReduce Works Chapter 8: MapReduce Types and Formats Chapter 9: MapReduce Features Chapter 10: Setting Up a Hadoop Cluster Chapter 11: Adminstering Hadoop Chapter 12: Avro Chapter 13: Parquet Chapter 14: Flume Chapter 15: Sqoop Chapter 16: Pig Chapter 17: Hive Chapter 18: Crunch Chapter 19: Spark Chapter 20: HBase Chapter 21: ZooKeeper Chapter 22: Composable Data at Center Chapter 23: Biological Data Science: Saving Lives with Software Chapter 24: Cascading","title":"HADOOP"},{"location":"bigdata/hadoop/ch1/","text":"Hadoop: The Definitive Guide 1 - Meet Hadoop 1 \u6570\u636e\uff01\u6570\u636e\uff01 \u73b0\u5728\u662f\u6570\u636e\u5927\u7206\u70b8\u65f6\u4ee3\uff0c\u5168\u7403\u6570\u636e\u603b\u91cf\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u5168\u4e16\u754c\u6bcf\u4eba\u4e00\u5757\u786c\u76d8\u4e2d\u6240\u80fd\u4fdd\u5b58\u7684\u6570\u636e\u603b\u91cf\u3002 \u4e2a\u4eba\u4ea7\u751f\u7684\u6570\u636e\u6b63\u5728\u5feb\u901f\u589e\u957f \u4e2a\u4eba\u4fe1\u606f\u6863\u6848\u5c06\u65e5\u76ca\u666e\u53ca\uff08\u7535\u8bdd\u3001\u90ae\u4ef6\u3001\u6587\u4ef6\u3001\u7167\u7247\uff09 \u7269\u8054\u7f51\u7684\u673a\u5668\u8bbe\u5907\u4ea7\u751f\u7684\u6570\u636e\u53ef\u80fd\u8fdc\u8fdc\u8d85\u8fc7\u4e2a\u4eba\u4ea7\u751f\u7684\u6570\u636e \u673a\u5668\u65e5\u5fd7\u3001\u4f20\u611f\u5668\u7f51\u7edc\u3001\u96f6\u552e\u4ea4\u6613\u6570\u636e\u7b49 1.2 \u6570\u636e\u7684\u5b58\u50a8\u4e0e\u5206\u6790 \u9047\u5230\u7684\u95ee\u9898\uff1a\u786c\u76d8\u5b58\u50a8\u5bb9\u91cf\u4e0d\u65ad\u63d0\u5347\uff0c\u8bbf\u95ee\u901f\u5ea6\u6ca1\u6709\u4e0e\u65f6\u4ff1\u8fdb \u8bfb\u5199\u786c\u76d8\u4e2d\u7684\u6570\u636e\u9700\u8981\u66f4\u957f\u65f6\u95f4 \u89e3\u51b3\u65b9\u6cd5\uff1a \u540c\u65f6\u4ece\u591a\u4e2a\u786c\u76d8\u4e0a\u8bfb\u53d6\u6570\u636e\uff0c\u6bcf\u4e2a\u786c\u76d8\u5b58\u50a8\u4e00\u90e8\u5206\u6570\u636e \u867d\u7136\u6d6a\u8d39\u4e86\u786c\u76d8\u5bb9\u91cf\uff0c\u4f46\u662f\u7531\u4e8e\u7528\u6237\u7684\u5206\u6790\u5de5\u4f5c\u90fd\u662f\u5728\u4e0d\u540c\u65f6\u95f4\u70b9\u8fdb\u884c\u7684\uff0c\u6240\u4ee5\u5f7c\u6b64\u4e4b\u95f4\u7684\u5e72\u6270\u5e76\u4e0d\u592a\u5927 \u65b0\u7684\u95ee\u9898\uff1a\u8981\u5bf9\u591a\u4e2a\u786c\u76d8\u4e2d\u7684\u6570\u636e\u5e76\u884c\u8fdb\u884c\u8bfb\u5199\u6570\u636e\uff0c\u8fd8\u6709\u66f4\u591a\u95ee\u9898\u8981\u89e3\u51b3 \u786c\u4ef6\u6545\u969c\u95ee\u9898\uff1a\u6700\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u7cfb\u7edf\u4fdd\u5b58\u6570\u636e\u7684\u526f\u672c(replica) \u5927\u591a\u6570\u5206\u6790\u4efb\u52a1\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7ed3\u5408\u5927\u90e8\u5206\u6570\u636e\u6765\u5171\u540c\u5b8c\u6210\u5206\u6790\uff0c\u4fdd\u8bc1\u5176\u6b63\u786e\u6027\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6311\u6218\uff1aMapReduce 1.3 \u67e5\u8be2\u6240\u6709\u6570\u636e MapReduce\u662f\u4e00\u4e2a \u6279\u91cf\u67e5\u8be2\u5904\u7406\u5668 (batch processing system)\uff0c\u80fd\u591f\u5728\u5408\u7406\u7684\u65f6\u95f4\u8303\u56f4\u5185\u5904\u7406\u9488\u5bf9\u6574\u4e2a\u6570\u636e\u96c6\u7684\u52a8\u6001\u67e5\u8be2\u3002 1.4 \u4e0d\u4ec5\u4ec5\u662f\u6279\u5904\u7406 MapReduce\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u6279\u5904\u7406\u7cfb\u7edf\uff0c\u5e76\u4e0d\u9002\u5408\u4ea4\u4e92\u5f0f\u5206\u6790: \u4f60\u4e0d\u53ef\u80fd\u6267\u884c\u4e00\u6761\u67e5\u8be2\u5e76\u5728\u51e0\u79d2\u5185\u6216\u66f4\u77ed\u65f6\u95f4\u5185\u5f97\u5230\u7ed3\u679c\uff1b\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u6267\u884c\u67e5\u8be2\u9700\u8981\u51e0\u5206\u949f\u6216\u66f4\u591a\u65f6\u95f4\u3002 MapReduce\u66f4\u9002\u5408\u6ca1\u6709\u7528\u6237\u5728\u73b0\u573a\u7b49\u5f85\u67e5\u8be2\u7ed3\u679c\u7684\u79bb\u7ebf\u4f7f\u7528\u573a\u666f\u3002 Hadoop\u7684\u53d1\u5c55\u5df2\u7ecf\u8d85\u8d8a\u4e86\u6279\u5904\u7406\u672c\u8eab\u3002 Hadoop\u6709\u65f6\u88ab\u7528\u4e8e\u6307\u4ee3\u4e00\u4e2a\u66f4\u5927\u7684\u3001\u591a\u4e2a\u9879\u76ee\u7ec4\u6210\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fHDFS\u548cMapReduce HBase\uff1a\u4f7f\u7528HDFS\u505a\u5e95\u5c42\u5b58\u50a8\u7684\u952e\u503c\u5b58\u50a8\u6a21\u578b\u3002 YARN: \u96c6\u7fa4\u8d44\u6e90\u7ba1\u7406\u7cfb\u7edf 1.6 \u53d1\u5c55\u5386\u53f2 Hadoop\u662fDoug Cutting\u521b\u5efa\u7684\uff0c\u8d77\u6e90\u4e8e\u5f00\u6e90\u7f51\u7edc\u641c\u7d22\u5f15\u64ceApache Nutch. Apache Nutch\u662f\u8d77\u59cb\u4e8e2002\u5e74\uff0c\u5e76\u501f\u9274\u4e86\u201c\u8c37\u6b4c\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf(GFS)\"\u548cMapReduce\u3002 2006\u5e74\uff0cDoug Cutting\u52a0\u5165\u96c5\u864e\uff0c\u96c5\u864e\u4e3a\u6b64\u7ec4\u7ec7\u4e86\u4e13\u95e8\u7684\u56e2\u961f\u548c\u8d44\u6e90\uff0c\u5c06Hadoop\u53d1\u5c55\u6210\u80fd\u591f\u4ee5Web\u89c4\u6a21\u8fd0\u884c\u7684\u7cfb\u7edf\u3002 2008\u5e74\uff0cHadoop\u5df2\u7ecf\u6210\u4e3aApache\u7684\u9876\u7ea7\u9879\u76ee\uff0c\u8bc1\u660e\u4e86\u5b83\u7684\u6210\u529f\u3001\u591a\u6837\u5316\u548c\u751f\u547d\u529b\u3002 \u76ee\u524d\uff0cHadoop\u88ab\u4e3b\u6d41\u4f01\u4e1a\u5e7f\u6cdb\u4f7f\u7528\u3002\u5728\u5de5\u4e1a\u754c\uff0cHadoop\u5df2\u7ecf\u662f \u516c\u8ba4\u7684\u5927\u6570\u636e\u901a\u7528\u5b58\u50a8\u548c\u5206\u6790\u5e73\u53f0 \u3002 1.7 Hadoop\u5bb6\u65cf","title":"Chapter 1: Meet Hadoop"},{"location":"bigdata/hadoop/ch1/#hadoop-the-definitive-guide-1-meet-hadoop","text":"","title":"Hadoop: The Definitive Guide 1 - Meet Hadoop"},{"location":"bigdata/hadoop/ch1/#1","text":"\u73b0\u5728\u662f\u6570\u636e\u5927\u7206\u70b8\u65f6\u4ee3\uff0c\u5168\u7403\u6570\u636e\u603b\u91cf\u8fdc\u8fdc\u8d85\u8fc7\u4e86\u5168\u4e16\u754c\u6bcf\u4eba\u4e00\u5757\u786c\u76d8\u4e2d\u6240\u80fd\u4fdd\u5b58\u7684\u6570\u636e\u603b\u91cf\u3002 \u4e2a\u4eba\u4ea7\u751f\u7684\u6570\u636e\u6b63\u5728\u5feb\u901f\u589e\u957f \u4e2a\u4eba\u4fe1\u606f\u6863\u6848\u5c06\u65e5\u76ca\u666e\u53ca\uff08\u7535\u8bdd\u3001\u90ae\u4ef6\u3001\u6587\u4ef6\u3001\u7167\u7247\uff09 \u7269\u8054\u7f51\u7684\u673a\u5668\u8bbe\u5907\u4ea7\u751f\u7684\u6570\u636e\u53ef\u80fd\u8fdc\u8fdc\u8d85\u8fc7\u4e2a\u4eba\u4ea7\u751f\u7684\u6570\u636e \u673a\u5668\u65e5\u5fd7\u3001\u4f20\u611f\u5668\u7f51\u7edc\u3001\u96f6\u552e\u4ea4\u6613\u6570\u636e\u7b49","title":"1 \u6570\u636e\uff01\u6570\u636e\uff01"},{"location":"bigdata/hadoop/ch1/#12","text":"\u9047\u5230\u7684\u95ee\u9898\uff1a\u786c\u76d8\u5b58\u50a8\u5bb9\u91cf\u4e0d\u65ad\u63d0\u5347\uff0c\u8bbf\u95ee\u901f\u5ea6\u6ca1\u6709\u4e0e\u65f6\u4ff1\u8fdb \u8bfb\u5199\u786c\u76d8\u4e2d\u7684\u6570\u636e\u9700\u8981\u66f4\u957f\u65f6\u95f4 \u89e3\u51b3\u65b9\u6cd5\uff1a \u540c\u65f6\u4ece\u591a\u4e2a\u786c\u76d8\u4e0a\u8bfb\u53d6\u6570\u636e\uff0c\u6bcf\u4e2a\u786c\u76d8\u5b58\u50a8\u4e00\u90e8\u5206\u6570\u636e \u867d\u7136\u6d6a\u8d39\u4e86\u786c\u76d8\u5bb9\u91cf\uff0c\u4f46\u662f\u7531\u4e8e\u7528\u6237\u7684\u5206\u6790\u5de5\u4f5c\u90fd\u662f\u5728\u4e0d\u540c\u65f6\u95f4\u70b9\u8fdb\u884c\u7684\uff0c\u6240\u4ee5\u5f7c\u6b64\u4e4b\u95f4\u7684\u5e72\u6270\u5e76\u4e0d\u592a\u5927 \u65b0\u7684\u95ee\u9898\uff1a\u8981\u5bf9\u591a\u4e2a\u786c\u76d8\u4e2d\u7684\u6570\u636e\u5e76\u884c\u8fdb\u884c\u8bfb\u5199\u6570\u636e\uff0c\u8fd8\u6709\u66f4\u591a\u95ee\u9898\u8981\u89e3\u51b3 \u786c\u4ef6\u6545\u969c\u95ee\u9898\uff1a\u6700\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u7cfb\u7edf\u4fdd\u5b58\u6570\u636e\u7684\u526f\u672c(replica) \u5927\u591a\u6570\u5206\u6790\u4efb\u52a1\u9700\u8981\u4ee5\u67d0\u79cd\u65b9\u5f0f\u7ed3\u5408\u5927\u90e8\u5206\u6570\u636e\u6765\u5171\u540c\u5b8c\u6210\u5206\u6790\uff0c\u4fdd\u8bc1\u5176\u6b63\u786e\u6027\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u6311\u6218\uff1aMapReduce","title":"1.2 \u6570\u636e\u7684\u5b58\u50a8\u4e0e\u5206\u6790"},{"location":"bigdata/hadoop/ch1/#13","text":"MapReduce\u662f\u4e00\u4e2a \u6279\u91cf\u67e5\u8be2\u5904\u7406\u5668 (batch processing system)\uff0c\u80fd\u591f\u5728\u5408\u7406\u7684\u65f6\u95f4\u8303\u56f4\u5185\u5904\u7406\u9488\u5bf9\u6574\u4e2a\u6570\u636e\u96c6\u7684\u52a8\u6001\u67e5\u8be2\u3002","title":"1.3 \u67e5\u8be2\u6240\u6709\u6570\u636e"},{"location":"bigdata/hadoop/ch1/#14","text":"MapReduce\u57fa\u672c\u4e0a\u662f\u4e00\u4e2a\u6279\u5904\u7406\u7cfb\u7edf\uff0c\u5e76\u4e0d\u9002\u5408\u4ea4\u4e92\u5f0f\u5206\u6790: \u4f60\u4e0d\u53ef\u80fd\u6267\u884c\u4e00\u6761\u67e5\u8be2\u5e76\u5728\u51e0\u79d2\u5185\u6216\u66f4\u77ed\u65f6\u95f4\u5185\u5f97\u5230\u7ed3\u679c\uff1b\u5178\u578b\u60c5\u51b5\u4e0b\uff0c\u6267\u884c\u67e5\u8be2\u9700\u8981\u51e0\u5206\u949f\u6216\u66f4\u591a\u65f6\u95f4\u3002 MapReduce\u66f4\u9002\u5408\u6ca1\u6709\u7528\u6237\u5728\u73b0\u573a\u7b49\u5f85\u67e5\u8be2\u7ed3\u679c\u7684\u79bb\u7ebf\u4f7f\u7528\u573a\u666f\u3002 Hadoop\u7684\u53d1\u5c55\u5df2\u7ecf\u8d85\u8d8a\u4e86\u6279\u5904\u7406\u672c\u8eab\u3002 Hadoop\u6709\u65f6\u88ab\u7528\u4e8e\u6307\u4ee3\u4e00\u4e2a\u66f4\u5927\u7684\u3001\u591a\u4e2a\u9879\u76ee\u7ec4\u6210\u7684\u751f\u6001\u7cfb\u7edf\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662fHDFS\u548cMapReduce HBase\uff1a\u4f7f\u7528HDFS\u505a\u5e95\u5c42\u5b58\u50a8\u7684\u952e\u503c\u5b58\u50a8\u6a21\u578b\u3002 YARN: \u96c6\u7fa4\u8d44\u6e90\u7ba1\u7406\u7cfb\u7edf","title":"1.4 \u4e0d\u4ec5\u4ec5\u662f\u6279\u5904\u7406"},{"location":"bigdata/hadoop/ch1/#16","text":"Hadoop\u662fDoug Cutting\u521b\u5efa\u7684\uff0c\u8d77\u6e90\u4e8e\u5f00\u6e90\u7f51\u7edc\u641c\u7d22\u5f15\u64ceApache Nutch. Apache Nutch\u662f\u8d77\u59cb\u4e8e2002\u5e74\uff0c\u5e76\u501f\u9274\u4e86\u201c\u8c37\u6b4c\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf(GFS)\"\u548cMapReduce\u3002 2006\u5e74\uff0cDoug Cutting\u52a0\u5165\u96c5\u864e\uff0c\u96c5\u864e\u4e3a\u6b64\u7ec4\u7ec7\u4e86\u4e13\u95e8\u7684\u56e2\u961f\u548c\u8d44\u6e90\uff0c\u5c06Hadoop\u53d1\u5c55\u6210\u80fd\u591f\u4ee5Web\u89c4\u6a21\u8fd0\u884c\u7684\u7cfb\u7edf\u3002 2008\u5e74\uff0cHadoop\u5df2\u7ecf\u6210\u4e3aApache\u7684\u9876\u7ea7\u9879\u76ee\uff0c\u8bc1\u660e\u4e86\u5b83\u7684\u6210\u529f\u3001\u591a\u6837\u5316\u548c\u751f\u547d\u529b\u3002 \u76ee\u524d\uff0cHadoop\u88ab\u4e3b\u6d41\u4f01\u4e1a\u5e7f\u6cdb\u4f7f\u7528\u3002\u5728\u5de5\u4e1a\u754c\uff0cHadoop\u5df2\u7ecf\u662f \u516c\u8ba4\u7684\u5927\u6570\u636e\u901a\u7528\u5b58\u50a8\u548c\u5206\u6790\u5e73\u53f0 \u3002","title":"1.6 \u53d1\u5c55\u5386\u53f2"},{"location":"bigdata/hadoop/ch1/#17-hadoop","text":"","title":"1.7 Hadoop\u5bb6\u65cf"},{"location":"bigdata/hadoop/ch10/","text":"Hadoop: The Definitive Guide 10 - Setting Up a Hadoop Cluster","title":"Chapter 10: Setting Up a Hadoop Cluster"},{"location":"bigdata/hadoop/ch10/#hadoop-the-definitive-guide-10-setting-up-a-hadoop-cluster","text":"","title":"Hadoop: The Definitive Guide 10 - Setting Up a Hadoop Cluster"},{"location":"bigdata/hadoop/ch11/","text":"Hadoop: The Definitive Guide 11 - Adminstering Hadoop","title":"Chapter 11: Adminstering Hadoop"},{"location":"bigdata/hadoop/ch11/#hadoop-the-definitive-guide-11-adminstering-hadoop","text":"","title":"Hadoop: The Definitive Guide 11 - Adminstering Hadoop"},{"location":"bigdata/hadoop/ch12/","text":"Hadoop: The Definitive Guide 12 - Avro Apache Avro is a language-neutral data serialization system. The project was created by Doug Cutting to address the major downside of Hadoop Writables : lack of language portability [see Chapter5 ]. Having a data format that can be processed by many languages makes it easier to share datasets with a wider audience. Avro data is described using a language-independent schema (\u6a21\u5f0f). Schemas are usually written in JSON, and data is usually encoded using a binary format. Geting start This section based on Apache Avro\u2122 Getting Started (Java) . Defining a schema Avro schemas are defined using JSON. Schemas are composed of primitive types (null, boolean, int, long, float, double, bytes, and string) and complex types (record, enum, array, map, union, and fixed). Let's start with a simple schema example, user.avsc : { namespace : example.avro , type : record , name : User , fields : [ { name : name , type : string }, { name : favorite_number , type : [ int , null ]}, { name : favorite_color , type : [ string , null ]} ] } This schema defines a record representing a hypothetical user. (Note that a schema file can only contain a single schema definition.) At minimum, a record definition must include its type, a name, and fields. Fields are defined via an array of objects, each of which defines a name and type; The type attribute of a field is another schema object, which can be either a primitive or complex type. Serializing and deserializing Let's create some users, serialize them to a data file on disk, and then read back the file and deserialize the users objects. Creating users First, we use a Parser to read our schema definition and create a Schema object. Schema schema = new Schema . Parser (). parse ( new File ( user.avsc )); Using this schema, let's create some users. GenericRecord user1 = new GenericData . Record ( schema ); user1 . put ( name , Alyssa ); user1 . put ( favorite_number , 256 ); // Leave favorite color null GenericRecord user2 = new GenericData . Record ( schema ); user2 . put ( name , Ben ); user2 . put ( favorite_number , 7 ); user2 . put ( favorite_color , red ); We use GenericRecords to represent users. GenericRecords uses the schema to verify that we only specify valid fields. If we try to set a non-existent field (e.g., user1.put(\"favorite_animal\", \"cat\")), we'll get an AvroRuntimeException when we run the program. Note that we do not set user1's favorite color. Since that record is of type [\"string\", \"null\"], we can either set it to a string or leave it null; it is essentially optional. Serializing Now that we've created our user objects, we use generic readers and writers to serialize and deserialize them. First we'll serialize our users to a data file on disk. // Serialize user1 and user2 to disk File file = new File ( users.avro ); DatumWriter GenericRecord datumWriter = new GenericDatumWriter GenericRecord ( schema ); DataFileWriter GenericRecord dataFileWriter = new DataFileWriter GenericRecord ( datumWriter ); dataFileWriter . create ( schema , file ); dataFileWriter . append ( user1 ); dataFileWriter . append ( user2 ); dataFileWriter . close (); We create a DatumWriter , which converts Java objects into an in-memory serialized format. GenericDatumWriter requires the schema both to determine how to write the GenericRecords and to verify that all non-nullable fields are present. We also create a DataFileWriter , which writes the serialized records, as well as the schema, to the file specified in the dataFileWriter.create call. We write our users to the file via calls to the dataFileWriter.append method. When we are done writing, we close the data file. Deserializing Finally, we'll deserialize the data file we just created. // Deserialize users from disk DatumReader GenericRecord datumReader = new GenericDatumReader GenericRecord ( schema ); DataFileReader GenericRecord dataFileReader = new DataFileReader GenericRecord ( file , datumReader ); GenericRecord user = null ; while ( dataFileReader . hasNext ()) { // Reuse user object by passing it to next(). This saves us from // allocating and garbage collecting many objects for files with // many items. user = dataFileReader . next ( user ); System . out . println ( user ); } This outputs: { name : Alyssa , favorite_number : 256, favorite_color : null} { name : Ben , favorite_number : 7, favorite_color : red } Deserializing is very similar to serializing. We create a GenericDatumReader , analogous to the GenericDatumWriter we used in serialization, which converts in-memory serialized items into GenericRecords . We pass the DatumReader and the previously created File to a DataFileReader , analogous to the DataFileWriter , which reads the data file on disk. Next, we use the DataFileReader to iterate through the serialized users and print the deserialized object to stdout. Note how we perform the iteration: we create a single GenericRecord object which we store the current deserialized user in, and pass this record object to every call of dataFileReader.next . This is a performance optimization that allows the DataFileReader to reuse the same record object rather than allocating a new GenericRecord for every iteration, which can be very expensive in terms of object allocation and garbage collection if we deserialize a large data file. While this technique is the standard way to iterate through a data file, it's also possible to use for ( GenericRecord user : dataFileReader ) if performance is not a concern. Sort Order Avro defines a sort order for objects. All types except record have preordained rules for their sort order, as described in the Avro specification, that cannot be overridden by the user. For records, however, you can control the sort order by specifying the order attribute for a field. It takes one of three values: ascending (the default), descending (to reverse the order), or ignore (so the field is skipped for comparison purposes) For example, the following schema ( SortedStringPair.avsc ) defines an ordering of StringPair records by the right field in descending order. The left field is ignored for the purposes of ordering, but it is still present in the projection: { type : record , name : StringPair , doc : A pair of strings, sorted by right field descending. , fields : [ { name : left , type : string , order : ignore }, { name : right , type : string , order : descending } ] } Avro implements efficient binary comparisons. That is to say, Avro does not have to deserialize binary data into objects to perform the comparison, because it can instead work directly on the byte streams. Avro provides the comparator for us. Avro MapReduce Avro provides a number of classes for making it easy to run MapReduce programs on Avro data. Let\u2019s rework the MapReduce program for finding the maximum temperature for each year in the weather dataset, this time using the Avro MapReduce API. We will represent weather records using the following schema: { type : record , name : WeatherRecord , doc : A weather reading. , fields : [ { name : year , type : int }, { name : temperature , type : int }, { name : stationId , type : string } ] } There are a couple of differences from the regular Hadoop MapReduce API. The first is the use of wrappers around Avro Java types. The second major difference from regular MapReduce is the use of AvroJob for configuring the job . AvroJob is a convenience class for specifying the Avro schemas for the input, map output, and final output data. Avro Mapreduce //vv AvroGenericMaxTemperature public class AvroGenericMaxTemperature extends Configured implements Tool { private static final Schema SCHEMA = new Schema . Parser (). parse ( { + \\ type\\ : \\ record\\ , + \\ name\\ : \\ WeatherRecord\\ , + \\ doc\\ : \\ A weather reading.\\ , + \\ fields\\ : [ + {\\ name\\ : \\ year\\ , \\ type\\ : \\ int\\ }, + {\\ name\\ : \\ temperature\\ , \\ type\\ : \\ int\\ }, + {\\ name\\ : \\ stationId\\ , \\ type\\ : \\ string\\ } + ] + } ); public static class MaxTemperatureMapper extends Mapper LongWritable , Text , AvroKey Integer , AvroValue GenericRecord { private NcdcRecordParser parser = new NcdcRecordParser (); private GenericRecord record = new GenericData . Record ( SCHEMA ); @Override protected void map ( LongWritable key , Text value , Context context ) throws IOException , InterruptedException { parser . parse ( value . toString ()); if ( parser . isValidTemperature ()) { record . put ( year , parser . getYearInt ()); record . put ( temperature , parser . getAirTemperature ()); record . put ( stationId , parser . getStationId ()); context . write ( new AvroKey Integer ( parser . getYearInt ()), new AvroValue GenericRecord ( record )); } } } public static class MaxTemperatureReducer extends Reducer AvroKey Integer , AvroValue GenericRecord , AvroKey GenericRecord , NullWritable { @Override protected void reduce ( AvroKey Integer key , Iterable AvroValue GenericRecord values , Context context ) throws IOException , InterruptedException { GenericRecord max = null ; for ( AvroValue GenericRecord value : values ) { GenericRecord record = value . datum (); if ( max == null || ( Integer ) record . get ( temperature ) ( Integer ) max . get ( temperature )) { max = newWeatherRecord ( record ); } } context . write ( new AvroKey ( max ), NullWritable . get ()); } private GenericRecord newWeatherRecord ( GenericRecord value ) { GenericRecord record = new GenericData . Record ( SCHEMA ); record . put ( year , value . get ( year )); record . put ( temperature , value . get ( temperature )); record . put ( stationId , value . get ( stationId )); return record ; } } @Override public int run ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . printf ( Usage: %s [generic options] input output \\n , getClass (). getSimpleName ()); ToolRunner . printGenericCommandUsage ( System . err ); return - 1 ; } Job job = new Job ( getConf (), Max temperature ); job . setJarByClass ( getClass ()); job . getConfiguration (). setBoolean ( Job . MAPREDUCE_JOB_USER_CLASSPATH_FIRST , true ); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); AvroJob . setMapOutputKeySchema ( job , Schema . create ( Schema . Type . INT )); AvroJob . setMapOutputValueSchema ( job , SCHEMA ); AvroJob . setOutputKeySchema ( job , SCHEMA ); job . setInputFormatClass ( TextInputFormat . class ); job . setOutputFormatClass ( AvroKeyOutputFormat . class ); job . setMapperClass ( MaxTemperatureMapper . class ); job . setReducerClass ( MaxTemperatureReducer . class ); return job . waitForCompletion ( true ) ? 0 : 1 ; } public static void main ( String [] args ) throws Exception { int exitCode = ToolRunner . run ( new AvroGenericMaxTemperature (), args ); System . exit ( exitCode ); } } Sorting Using Avro MapReduce To sort an Avro datafile, it is simple. The mapper simply emits the input key wrapped in an AvroKey and an AvroValue . The reducer acts as an identity, passing the values through as output keys, which will get written to an Avro datafile. The sorting happens in the MapReduce shuffle, and the sort function is determined by the Avro schema that is passed to the program. See Chapter 7, section Shuffle and Sort for details. Useful resources Apache Avro project page CDH usage page for Avro Avro Specification","title":"Chapter 12: Avro"},{"location":"bigdata/hadoop/ch12/#hadoop-the-definitive-guide-12-avro","text":"Apache Avro is a language-neutral data serialization system. The project was created by Doug Cutting to address the major downside of Hadoop Writables : lack of language portability [see Chapter5 ]. Having a data format that can be processed by many languages makes it easier to share datasets with a wider audience. Avro data is described using a language-independent schema (\u6a21\u5f0f). Schemas are usually written in JSON, and data is usually encoded using a binary format.","title":"Hadoop: The Definitive Guide 12 - Avro"},{"location":"bigdata/hadoop/ch12/#geting-start","text":"This section based on Apache Avro\u2122 Getting Started (Java) .","title":"Geting start"},{"location":"bigdata/hadoop/ch12/#defining-a-schema","text":"Avro schemas are defined using JSON. Schemas are composed of primitive types (null, boolean, int, long, float, double, bytes, and string) and complex types (record, enum, array, map, union, and fixed). Let's start with a simple schema example, user.avsc : { namespace : example.avro , type : record , name : User , fields : [ { name : name , type : string }, { name : favorite_number , type : [ int , null ]}, { name : favorite_color , type : [ string , null ]} ] } This schema defines a record representing a hypothetical user. (Note that a schema file can only contain a single schema definition.) At minimum, a record definition must include its type, a name, and fields. Fields are defined via an array of objects, each of which defines a name and type; The type attribute of a field is another schema object, which can be either a primitive or complex type.","title":"Defining a schema"},{"location":"bigdata/hadoop/ch12/#serializing-and-deserializing","text":"Let's create some users, serialize them to a data file on disk, and then read back the file and deserialize the users objects. Creating users First, we use a Parser to read our schema definition and create a Schema object. Schema schema = new Schema . Parser (). parse ( new File ( user.avsc )); Using this schema, let's create some users. GenericRecord user1 = new GenericData . Record ( schema ); user1 . put ( name , Alyssa ); user1 . put ( favorite_number , 256 ); // Leave favorite color null GenericRecord user2 = new GenericData . Record ( schema ); user2 . put ( name , Ben ); user2 . put ( favorite_number , 7 ); user2 . put ( favorite_color , red ); We use GenericRecords to represent users. GenericRecords uses the schema to verify that we only specify valid fields. If we try to set a non-existent field (e.g., user1.put(\"favorite_animal\", \"cat\")), we'll get an AvroRuntimeException when we run the program. Note that we do not set user1's favorite color. Since that record is of type [\"string\", \"null\"], we can either set it to a string or leave it null; it is essentially optional. Serializing Now that we've created our user objects, we use generic readers and writers to serialize and deserialize them. First we'll serialize our users to a data file on disk. // Serialize user1 and user2 to disk File file = new File ( users.avro ); DatumWriter GenericRecord datumWriter = new GenericDatumWriter GenericRecord ( schema ); DataFileWriter GenericRecord dataFileWriter = new DataFileWriter GenericRecord ( datumWriter ); dataFileWriter . create ( schema , file ); dataFileWriter . append ( user1 ); dataFileWriter . append ( user2 ); dataFileWriter . close (); We create a DatumWriter , which converts Java objects into an in-memory serialized format. GenericDatumWriter requires the schema both to determine how to write the GenericRecords and to verify that all non-nullable fields are present. We also create a DataFileWriter , which writes the serialized records, as well as the schema, to the file specified in the dataFileWriter.create call. We write our users to the file via calls to the dataFileWriter.append method. When we are done writing, we close the data file. Deserializing Finally, we'll deserialize the data file we just created. // Deserialize users from disk DatumReader GenericRecord datumReader = new GenericDatumReader GenericRecord ( schema ); DataFileReader GenericRecord dataFileReader = new DataFileReader GenericRecord ( file , datumReader ); GenericRecord user = null ; while ( dataFileReader . hasNext ()) { // Reuse user object by passing it to next(). This saves us from // allocating and garbage collecting many objects for files with // many items. user = dataFileReader . next ( user ); System . out . println ( user ); } This outputs: { name : Alyssa , favorite_number : 256, favorite_color : null} { name : Ben , favorite_number : 7, favorite_color : red } Deserializing is very similar to serializing. We create a GenericDatumReader , analogous to the GenericDatumWriter we used in serialization, which converts in-memory serialized items into GenericRecords . We pass the DatumReader and the previously created File to a DataFileReader , analogous to the DataFileWriter , which reads the data file on disk. Next, we use the DataFileReader to iterate through the serialized users and print the deserialized object to stdout. Note how we perform the iteration: we create a single GenericRecord object which we store the current deserialized user in, and pass this record object to every call of dataFileReader.next . This is a performance optimization that allows the DataFileReader to reuse the same record object rather than allocating a new GenericRecord for every iteration, which can be very expensive in terms of object allocation and garbage collection if we deserialize a large data file. While this technique is the standard way to iterate through a data file, it's also possible to use for ( GenericRecord user : dataFileReader ) if performance is not a concern.","title":"Serializing and deserializing"},{"location":"bigdata/hadoop/ch12/#sort-order","text":"Avro defines a sort order for objects. All types except record have preordained rules for their sort order, as described in the Avro specification, that cannot be overridden by the user. For records, however, you can control the sort order by specifying the order attribute for a field. It takes one of three values: ascending (the default), descending (to reverse the order), or ignore (so the field is skipped for comparison purposes) For example, the following schema ( SortedStringPair.avsc ) defines an ordering of StringPair records by the right field in descending order. The left field is ignored for the purposes of ordering, but it is still present in the projection: { type : record , name : StringPair , doc : A pair of strings, sorted by right field descending. , fields : [ { name : left , type : string , order : ignore }, { name : right , type : string , order : descending } ] } Avro implements efficient binary comparisons. That is to say, Avro does not have to deserialize binary data into objects to perform the comparison, because it can instead work directly on the byte streams. Avro provides the comparator for us.","title":"Sort Order"},{"location":"bigdata/hadoop/ch12/#avro-mapreduce","text":"Avro provides a number of classes for making it easy to run MapReduce programs on Avro data. Let\u2019s rework the MapReduce program for finding the maximum temperature for each year in the weather dataset, this time using the Avro MapReduce API. We will represent weather records using the following schema: { type : record , name : WeatherRecord , doc : A weather reading. , fields : [ { name : year , type : int }, { name : temperature , type : int }, { name : stationId , type : string } ] } There are a couple of differences from the regular Hadoop MapReduce API. The first is the use of wrappers around Avro Java types. The second major difference from regular MapReduce is the use of AvroJob for configuring the job . AvroJob is a convenience class for specifying the Avro schemas for the input, map output, and final output data. Avro Mapreduce //vv AvroGenericMaxTemperature public class AvroGenericMaxTemperature extends Configured implements Tool { private static final Schema SCHEMA = new Schema . Parser (). parse ( { + \\ type\\ : \\ record\\ , + \\ name\\ : \\ WeatherRecord\\ , + \\ doc\\ : \\ A weather reading.\\ , + \\ fields\\ : [ + {\\ name\\ : \\ year\\ , \\ type\\ : \\ int\\ }, + {\\ name\\ : \\ temperature\\ , \\ type\\ : \\ int\\ }, + {\\ name\\ : \\ stationId\\ , \\ type\\ : \\ string\\ } + ] + } ); public static class MaxTemperatureMapper extends Mapper LongWritable , Text , AvroKey Integer , AvroValue GenericRecord { private NcdcRecordParser parser = new NcdcRecordParser (); private GenericRecord record = new GenericData . Record ( SCHEMA ); @Override protected void map ( LongWritable key , Text value , Context context ) throws IOException , InterruptedException { parser . parse ( value . toString ()); if ( parser . isValidTemperature ()) { record . put ( year , parser . getYearInt ()); record . put ( temperature , parser . getAirTemperature ()); record . put ( stationId , parser . getStationId ()); context . write ( new AvroKey Integer ( parser . getYearInt ()), new AvroValue GenericRecord ( record )); } } } public static class MaxTemperatureReducer extends Reducer AvroKey Integer , AvroValue GenericRecord , AvroKey GenericRecord , NullWritable { @Override protected void reduce ( AvroKey Integer key , Iterable AvroValue GenericRecord values , Context context ) throws IOException , InterruptedException { GenericRecord max = null ; for ( AvroValue GenericRecord value : values ) { GenericRecord record = value . datum (); if ( max == null || ( Integer ) record . get ( temperature ) ( Integer ) max . get ( temperature )) { max = newWeatherRecord ( record ); } } context . write ( new AvroKey ( max ), NullWritable . get ()); } private GenericRecord newWeatherRecord ( GenericRecord value ) { GenericRecord record = new GenericData . Record ( SCHEMA ); record . put ( year , value . get ( year )); record . put ( temperature , value . get ( temperature )); record . put ( stationId , value . get ( stationId )); return record ; } } @Override public int run ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . printf ( Usage: %s [generic options] input output \\n , getClass (). getSimpleName ()); ToolRunner . printGenericCommandUsage ( System . err ); return - 1 ; } Job job = new Job ( getConf (), Max temperature ); job . setJarByClass ( getClass ()); job . getConfiguration (). setBoolean ( Job . MAPREDUCE_JOB_USER_CLASSPATH_FIRST , true ); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); AvroJob . setMapOutputKeySchema ( job , Schema . create ( Schema . Type . INT )); AvroJob . setMapOutputValueSchema ( job , SCHEMA ); AvroJob . setOutputKeySchema ( job , SCHEMA ); job . setInputFormatClass ( TextInputFormat . class ); job . setOutputFormatClass ( AvroKeyOutputFormat . class ); job . setMapperClass ( MaxTemperatureMapper . class ); job . setReducerClass ( MaxTemperatureReducer . class ); return job . waitForCompletion ( true ) ? 0 : 1 ; } public static void main ( String [] args ) throws Exception { int exitCode = ToolRunner . run ( new AvroGenericMaxTemperature (), args ); System . exit ( exitCode ); } }","title":"Avro MapReduce"},{"location":"bigdata/hadoop/ch12/#sorting-using-avro-mapreduce","text":"To sort an Avro datafile, it is simple. The mapper simply emits the input key wrapped in an AvroKey and an AvroValue . The reducer acts as an identity, passing the values through as output keys, which will get written to an Avro datafile. The sorting happens in the MapReduce shuffle, and the sort function is determined by the Avro schema that is passed to the program. See Chapter 7, section Shuffle and Sort for details.","title":"Sorting Using Avro MapReduce"},{"location":"bigdata/hadoop/ch12/#useful-resources","text":"Apache Avro project page CDH usage page for Avro Avro Specification","title":"Useful resources"},{"location":"bigdata/hadoop/ch13/","text":"Hadoop: The Definitive Guide 13 - Parquet Apache Parquet is a columnar storage format that can efficiently store nested data.","title":"Chapter 13: Parquet"},{"location":"bigdata/hadoop/ch13/#hadoop-the-definitive-guide-13-parquet","text":"Apache Parquet is a columnar storage format that can efficiently store nested data.","title":"Hadoop: The Definitive Guide 13 - Parquet"},{"location":"bigdata/hadoop/ch14/","text":"Hadoop: The Definitive Guide 14 - Flume Flume is designed for high-volume ingestion into Hadoop of event-based data. The canonical example is using Flume to collect logfiles from a bank of web servers, then moving the log events from those files into new aggregated files in HDFS for processing. To use Flume, we need to run a Flume agent , which is a long-lived Java process that runs source s and sink s, connected by channel s. A source in Flume produces events and delivers them to the channel, which stores the events until they are forwarded to the sink. 1. An Example To show how Flume works, let\u2019s start with a setup that: Watches a local directory for new text files Sends each line of each file to the console as files are added Flume configuration using a spooling directory source and a logger sink agent1.sources = source1 agent1.sinks = sink1 agent1.channels = channel1 agent1.sources.source1.channels = channel1 agent1.sinks.sink1.channel = channel1 agent1.sources.source1.type = spooldir agent1.sources.source1.spoolDir = /tmp/spooldir agent1.sinks.sink1.type = logger agent1.channels.channel1.type = file Here, a spooldir is a spooling directory source that monitors a spooling directory for new files; a logger sink is a sink for logging events to the console. Source and sink must be connected to channel( agent1.sources.source1.channels = channel1 ). # create the spooling directory on the local filesystem: $ mkdir /tmp/spooldir # start the Flume agent using the flume-ng command: $ flume-ng agent \\ --conf-file spool-to-logger.properties \\ --name agent1 \\ --conf $F LUME_HOME/conf \\ -Dflume.root.logger = INFO,console # on another terminal, create a file in the spooling directory. $ echo Hello Flume /tmp/spooldir/.file1.txt $ ~ mv /tmp/spooldir/.file1.txt /tmp/spooldir/file1.txt 2. Transactions and Reliability Flume uses separate transactions to guarantee delivery from the source to the channel and from the channel to the sink. In the example in the previous section, the spooling directory source creates an event for each line in the file. The source will only mark the file as completed once the transactions encapsulating the delivery of the events to the channel have been successfully committed. Similarly, a transaction is used for the delivery of the events from the channel to the sink. If for some unlikely reason the events could not be logged, the transaction would be rolled back and the events would remain in the channel for later redelivery. 3. The HDFS Sink Events may delivered to the HDFS sink and written to a file. Files in the process of being written to have a .tmp in-use suffix (default, set by hdfs.inUsePrefix , see below) added to their name to indicate that they are not yet complete. Flume configuration using a spooling directory source and an HDFS sink: agent1.sources = source1 agent1.sinks = sink1 agent1.channels = channel1 agent1.sources.source1.channels = channel1 agent1.sinks.sink1.channel = channel1 agent1.sources.source1.type = spooldir agent1.sources.source1.spoolDir = /tmp/spooldir agent1.sinks.sink1.type = hdfs agent1.sinks.sink1.hdfs.path = /tmp/flume agent1.sinks.sink1.hdfs.filePrefix = events agent1.sinks.sink1.hdfs.fileSuffix = .log agent1.sinks.sink1.hdfs.inUsePrefix = _ agent1.sinks.sink1.hdfs.fileType = DataStream agent1.channels.channel1.type = file Partitioning and Interceptors 4 Fan Out Fan out is the term for delivering events from one source to multiple channels, so they reach multiple sinks. Flume configuration using a spooling directory source, fanning out to an HDFS sink and a logger sink: agent1.sources = source1 agent1.sinks = sink1a sink1b agent1.channels = channel1a channel1b agent1.sources.source1.channels = channel1a channel1b agent1.sinks.sink1a.channel = channel1a agent1.sinks.sink1b.channel = channel1b agent1.sources.source1.type = spooldir agent1.sources.source1.spoolDir = /tmp/spooldir agent1.sinks.sink1a.type = hdfs agent1.sinks.sink1a.hdfs.path = /tmp/flume agent1.sinks.sink1a.hdfs.filePrefix = events agent1.sinks.sink1a.hdfs.fileSuffix = .log agent1.sinks.sink1a.hdfs.fileType = DataStream agent1.sinks.sink1b.type = logger agent1.channels.channel1a.type = file agent1.channels.channel1b.type = memory Delivery Guarantees Flume uses a separate transaction to deliver each batch of events from the spooling directory source to each channel. If either of these transactions fails (if a channel is full, for example), then the events will not be removed from the source, and will be retried later. 3 Distribution: Agent Tiers Aggregating Flume events is achieved by having tiers of Flume agents. The first tier collects events from the original sources (such as web servers) and sends them to a smaller set of agents in the second tier, which aggregate events from the first tier before writing them to HDFS. Further tiers may be warranted for very large numbers of source nodes. 4 Sink Groups A sink group allows multiple sinks to be treated as one, for failover(\u6545\u969c\u8f6c\u79fb) or load-balancing purposes. If a second-tier agent is unavailable, then events will be delivered to another second-tier agent and on to HDFS without disruption. 5 Useful resources Flume main page Flume user guide Flume Getting Started guide","title":"Chapter 14: Flume"},{"location":"bigdata/hadoop/ch14/#hadoop-the-definitive-guide-14-flume","text":"Flume is designed for high-volume ingestion into Hadoop of event-based data. The canonical example is using Flume to collect logfiles from a bank of web servers, then moving the log events from those files into new aggregated files in HDFS for processing. To use Flume, we need to run a Flume agent , which is a long-lived Java process that runs source s and sink s, connected by channel s. A source in Flume produces events and delivers them to the channel, which stores the events until they are forwarded to the sink.","title":"Hadoop: The Definitive Guide 14 - Flume"},{"location":"bigdata/hadoop/ch14/#1-an-example","text":"To show how Flume works, let\u2019s start with a setup that: Watches a local directory for new text files Sends each line of each file to the console as files are added Flume configuration using a spooling directory source and a logger sink agent1.sources = source1 agent1.sinks = sink1 agent1.channels = channel1 agent1.sources.source1.channels = channel1 agent1.sinks.sink1.channel = channel1 agent1.sources.source1.type = spooldir agent1.sources.source1.spoolDir = /tmp/spooldir agent1.sinks.sink1.type = logger agent1.channels.channel1.type = file Here, a spooldir is a spooling directory source that monitors a spooling directory for new files; a logger sink is a sink for logging events to the console. Source and sink must be connected to channel( agent1.sources.source1.channels = channel1 ). # create the spooling directory on the local filesystem: $ mkdir /tmp/spooldir # start the Flume agent using the flume-ng command: $ flume-ng agent \\ --conf-file spool-to-logger.properties \\ --name agent1 \\ --conf $F LUME_HOME/conf \\ -Dflume.root.logger = INFO,console # on another terminal, create a file in the spooling directory. $ echo Hello Flume /tmp/spooldir/.file1.txt $ ~ mv /tmp/spooldir/.file1.txt /tmp/spooldir/file1.txt","title":"1. An Example"},{"location":"bigdata/hadoop/ch14/#2-transactions-and-reliability","text":"Flume uses separate transactions to guarantee delivery from the source to the channel and from the channel to the sink. In the example in the previous section, the spooling directory source creates an event for each line in the file. The source will only mark the file as completed once the transactions encapsulating the delivery of the events to the channel have been successfully committed. Similarly, a transaction is used for the delivery of the events from the channel to the sink. If for some unlikely reason the events could not be logged, the transaction would be rolled back and the events would remain in the channel for later redelivery.","title":"2. Transactions and Reliability"},{"location":"bigdata/hadoop/ch14/#3-the-hdfs-sink","text":"Events may delivered to the HDFS sink and written to a file. Files in the process of being written to have a .tmp in-use suffix (default, set by hdfs.inUsePrefix , see below) added to their name to indicate that they are not yet complete. Flume configuration using a spooling directory source and an HDFS sink: agent1.sources = source1 agent1.sinks = sink1 agent1.channels = channel1 agent1.sources.source1.channels = channel1 agent1.sinks.sink1.channel = channel1 agent1.sources.source1.type = spooldir agent1.sources.source1.spoolDir = /tmp/spooldir agent1.sinks.sink1.type = hdfs agent1.sinks.sink1.hdfs.path = /tmp/flume agent1.sinks.sink1.hdfs.filePrefix = events agent1.sinks.sink1.hdfs.fileSuffix = .log agent1.sinks.sink1.hdfs.inUsePrefix = _ agent1.sinks.sink1.hdfs.fileType = DataStream agent1.channels.channel1.type = file","title":"3. The HDFS Sink"},{"location":"bigdata/hadoop/ch14/#partitioning-and-interceptors","text":"","title":"Partitioning and Interceptors"},{"location":"bigdata/hadoop/ch14/#4-fan-out","text":"Fan out is the term for delivering events from one source to multiple channels, so they reach multiple sinks. Flume configuration using a spooling directory source, fanning out to an HDFS sink and a logger sink: agent1.sources = source1 agent1.sinks = sink1a sink1b agent1.channels = channel1a channel1b agent1.sources.source1.channels = channel1a channel1b agent1.sinks.sink1a.channel = channel1a agent1.sinks.sink1b.channel = channel1b agent1.sources.source1.type = spooldir agent1.sources.source1.spoolDir = /tmp/spooldir agent1.sinks.sink1a.type = hdfs agent1.sinks.sink1a.hdfs.path = /tmp/flume agent1.sinks.sink1a.hdfs.filePrefix = events agent1.sinks.sink1a.hdfs.fileSuffix = .log agent1.sinks.sink1a.hdfs.fileType = DataStream agent1.sinks.sink1b.type = logger agent1.channels.channel1a.type = file agent1.channels.channel1b.type = memory","title":"4 Fan Out"},{"location":"bigdata/hadoop/ch14/#delivery-guarantees","text":"Flume uses a separate transaction to deliver each batch of events from the spooling directory source to each channel. If either of these transactions fails (if a channel is full, for example), then the events will not be removed from the source, and will be retried later.","title":"Delivery Guarantees"},{"location":"bigdata/hadoop/ch14/#3-distribution-agent-tiers","text":"Aggregating Flume events is achieved by having tiers of Flume agents. The first tier collects events from the original sources (such as web servers) and sends them to a smaller set of agents in the second tier, which aggregate events from the first tier before writing them to HDFS. Further tiers may be warranted for very large numbers of source nodes.","title":"3 Distribution: Agent Tiers"},{"location":"bigdata/hadoop/ch14/#4-sink-groups","text":"A sink group allows multiple sinks to be treated as one, for failover(\u6545\u969c\u8f6c\u79fb) or load-balancing purposes. If a second-tier agent is unavailable, then events will be delivered to another second-tier agent and on to HDFS without disruption.","title":"4 Sink Groups"},{"location":"bigdata/hadoop/ch14/#5-useful-resources","text":"Flume main page Flume user guide Flume Getting Started guide","title":"5 Useful resources"},{"location":"bigdata/hadoop/ch15/","text":"Hadoop: The Definitive Guide 15 - Sqoop","title":"Chapter 15: Sqoop"},{"location":"bigdata/hadoop/ch15/#hadoop-the-definitive-guide-15-sqoop","text":"","title":"Hadoop: The Definitive Guide 15 - Sqoop"},{"location":"bigdata/hadoop/ch16/","text":"Hadoop: The Definitive Guide 16 - Pig","title":"Chapter 16: Pig"},{"location":"bigdata/hadoop/ch16/#hadoop-the-definitive-guide-16-pig","text":"","title":"Hadoop: The Definitive Guide 16 - Pig"},{"location":"bigdata/hadoop/ch17/","text":"Hadoop: The Definitive Guide 17 - Hive Hive is a data warehousing system to store structured data on Hadoop file system. It provide an easy query these data by execution Hadoop MapReduce plans 1 . 2 Running Hive Hive Services Hive clients Hive project page Getting Started","title":"Chapter 17: Hive"},{"location":"bigdata/hadoop/ch17/#hadoop-the-definitive-guide-17-hive","text":"Hive is a data warehousing system to store structured data on Hadoop file system. It provide an easy query these data by execution Hadoop MapReduce plans 1 .","title":"Hadoop: The Definitive Guide 17 - Hive"},{"location":"bigdata/hadoop/ch17/#2-running-hive","text":"","title":"2 Running Hive"},{"location":"bigdata/hadoop/ch17/#hive-services","text":"Hive clients Hive project page Getting Started","title":"Hive Services"},{"location":"bigdata/hadoop/ch18/","text":"Hadoop: The Definitive Guide 18 - Crunch","title":"Chapter 18: Crunch"},{"location":"bigdata/hadoop/ch18/#hadoop-the-definitive-guide-18-crunch","text":"","title":"Hadoop: The Definitive Guide 18 - Crunch"},{"location":"bigdata/hadoop/ch19/","text":"Hadoop: The Definitive Guide 19 - Spark","title":"Chapter 19: Spark"},{"location":"bigdata/hadoop/ch19/#hadoop-the-definitive-guide-19-spark","text":"","title":"Hadoop: The Definitive Guide 19 - Spark"},{"location":"bigdata/hadoop/ch2/","text":"Hadoop: The Definitive Guide 2 - MapReduce MapReduce is a programming model for data processing. MapReduce programs are inherently parallel, thus putting very large-scale data analysis into the hands of anyone with enough machines at their disposal. 1 A Weather Dataset For our example, we will write a program that mines weather data. The data we will use is from the National Climatic Data Center. It is stored using a line-oriented ASCII format, in which each line is a record. Analyzing the Data with Hadoop MapReduce works by breaking the processing into two phases: the map phase and the reduce phase. Each phase has key-value pairs as input and output, the types of which may be chosen by the programmer. The programmer also specifies two functions: the map function and the reduce function. MAPINPUT: Key: the offset of the beginning of the line from the beginning of the file. (no need here, just ignore it) Value: raw NCDC data (0, 0067011990999991950051507004\u20269999999N9+00001+99999999999\u2026) (106, 0043011990999991950051512004\u20269999999N9+00221+99999999999\u2026) (212, 0043011990999991950051518004\u20269999999N9-00111+99999999999\u2026) (318, 0043012650999991949032412004\u20260500001N9+01111+99999999999\u2026) (424, 0043012650999991949032418004\u20260500001N9+00781+99999999999\u2026) MAPOUTPUT: The map function merely extracts the year and the air temperature , and emits them as output. Key: year Calue: air temperature (1950, 0) (1950, 22) (1950, \u221211) (1949, 111) (1949, 78) The output from the map function is processed by the MapReduce framework before being sent to the reduce function. This processing sorts and groups the key-value pairs by key. (1949, [111, 78]) (1950, [0, 22, \u221211]) All the reduce function has to do now is iterate through the list and pick up the maximum reading: (1949, 111) (1950, 22) Java MapReduce We need three things: a map function, a reduce function, and some code to run the job. Map The map function is represented by the Mapper class, which declares an abstract map() method. The Mapper class is a generic type, with four formal type parameters that specify the input key, input value, output key, and output value types of the map function. public class Mapper KEYIN , VALUEIN , KEYOUT , VALUEOUT {} Rather than using built-in Java types, Hadoop provides its own set of basic types that are optimized for network serialization. These are found in the org.apache.hadoop.io package. Here we use LongWritable , which corresponds to a Java Long , Text (like Java String ), and IntWritable (like Java Integer ). import org.apache.hadoop.io.IntWritable ; import org.apache.hadoop.io.LongWritable ; import org.apache.hadoop.io.Text ; import org.apache.hadoop.mapreduce.Mapper ; import java.io.IOException ; public class MaxTemperatureMapper extends Mapper LongWritable , Text , Text , IntWritable { private static final int MISSING = 9999 ; @Override protected void map ( LongWritable key , Text value , Context context ) throws IOException , InterruptedException { String line = value . toString (); String year = line . substring ( 15 , 19 ); int airTemperature ; if ( line . charAt ( 87 ) == + ){ //parseInt doesn t like leading plus signs airTemperature = Integer . parseInt ( line . substring ( 88 , 92 )); } else { airTemperature = Integer . parseInt ( line . substring ( 87 , 92 )); } String quality = line . substring ( 92 , 93 ); if ( airTemperature != MISSING quality . matches ( [01459]] )) { context . write ( new Text ( year ), new IntWritable ( airTemperature )); } } } Reduce The reduce function is similarly defined using a Reducer . import org.apache.hadoop.io.IntWritable ; import org.apache.hadoop.io.Text ; import org.apache.hadoop.mapreduce.Reducer ; import java.io.IOException ; public class MaxTemperatureReducer extends Reducer Text , IntWritable , Text , IntWritable { @Override protected void reduce ( Text key , Iterable IntWritable values , Context context ) throws IOException , InterruptedException { int maxValue = Integer . MIN_VALUE ; for ( IntWritable value : values ) { maxValue = Math . max ( maxValue , value . get ()); } context . write ( key , new IntWritable ( maxValue )); } } MapReduce Job The third piece of code runs the MapReduce job import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IntWritable ; import org.apache.hadoop.io.Text ; import org.apache.hadoop.mapreduce.Job ; import org.apache.hadoop.mapreduce.lib.input.FileInputFormat ; import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat ; public class MaxTemperature { public static void main ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . println ( Usage: MaxTempeature intput path output path ); System . exit (- 1 ); } Job job = new Job (); job . setJarByClass ( MaxTemperature . class ); job . setJobName ( Max Temperature ); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); job . setMapperClass ( MaxTemperatureMapper . class ); job . setReducerClass ( MaxTemperatureReducer . class ); job . setOutputKeyClass ( Text . class ); job . setOutputValueClass ( IntWritable . class ); System . exit ( job . waitForCompletion ( true ) ? 0 : 1 ); } } A Job object forms the specification of the job and gives you control over how the job is run. Rather than explicitly specifying the name of the JAR file, we can pass a class in the Job\u2019s setJarByClass() method, which Hadoop will use to locate the relevant JAR file by looking for the JAR file containing this class. A test run $ export HADOOP_CLASSPATH = /Users/larry/JavaProject/out/artifacts/MaxTemperature/MaxTemperature.jar $ hadoop com.definitivehadoop.weatherdata.MaxTemperature resources/HadoopBook/ncdc/sample.txt output When the hadoop command is invoked with a classname as the first argument, it launches a Java virtual machine (JVM) to run the class. The hadoop command adds the Hadoop libraries (and their dependencies) to the classpath and picks up the Hadoop configuration, too. To add the application classes to the classpath, we\u2019ve defined an environment variable called HADOOP_CLASSPATH , which the hadoop script picks up. //OUTPUT 18:20:18,944 INFO mapreduce.Job: Counters: 30 File System Counters FILE: Number of bytes read=148485300 FILE: Number of bytes written=150614384 FILE: Number of read operations=0 FILE: Number of large read operations=0 FILE: Number of write operations=0 Map-Reduce Framework Map input records=5 Map output records=0 Map output bytes=0 Map output materialized bytes=6 Input split bytes=131 Combine input records=0 Combine output records=0 Reduce input groups=0 Reduce shuffle bytes=6 Reduce input records=0 Reduce output records=0 Spilled Records=0 Shuffled Maps =1 Failed Shuffles=0 Merged Map outputs=1 GC time elapsed (ms)=5 Total committed heap usage (bytes)=406847488 Shuffle Errors BAD_ID=0 CONNECTION=0 IO_ERROR=0 WRONG_LENGTH=0 WRONG_MAP=0 WRONG_REDUCE=0 File Input Format Counters Bytes Read=529 File Output Format Counters Bytes Written=8 The last section of the output, titled \u201cCounters,\u201d shows the statistics that Hadoop generates for each job it runs. These are very useful for checking whether the amount of data processed is what you expected. 2 Scaling Out To scale out, we need to store the data in a distributed filesystem (typically HDFS). This allows Hadoop to move the MapReduce computation to each machine hosting a part of the data, using Hadoop\u2019s resource management system, YARN. Data Flow A MapReduce job (\u4f5c\u4e1a) is a unit of work that the client wants to be performed: it consists of the input data, the MapReduce program, and configuration information. Hadoop runs the job by dividing it into tasks (\u4efb\u52a1), of which there are two types: map tasks and reduce tasks . The tasks are scheduled using YARN and run on nodes in the cluster. Hadoop divides the input to a MapReduce job into fixed-size pieces called input splits (\u8f93\u5165\u5206\u7247), or just splits (\u5206\u7247). Hadoop creates one map task for each split, which runs the user-defined map function for each record in the split. So if we are processing the splits in parallel, the processing is better load balanced when the splits are small. On the other hand, if splits are too small, the overhead of managing the splits and map task creation begins to dominate the total job execution time. Hadoop does its best to run the map task on a node where the input data resides in HDFS, because it doesn\u2019t use valuable cluster bandwidth. This is called the data locality optimization (\u6570\u636e\u672c\u5730\u4f18\u5316). Map tasks write their output to the local disk, not to HDFS. Why is this? Map output is intermediate output: it\u2019s processed by reduce tasks to produce the final output, and once the job is complete, the map output can be thrown away. So, storing it in HDFS with replication would be overkill. The data flow for the general case of multiple reduce tasks is illustrated in figure below. This diagram makes it clear why the data flow between map and reduce tasks is colloquially known as \u201cthe shuffle,\u201d as each reduce task is fed by many map tasks. Combiner Functions Many MapReduce jobs are limited by the bandwidth available on the cluster, so it pays to minimize the data transferred between map and reduce tasks. Hadoop allows the user to specify a combiner function to be run on the map output, and the combiner function\u2019s output forms the input to the reduce function. For max temperature problem described above, the combiner function is the same implementation as the reduce function in MaxTemperatureReducer . The only change we need to make is to set the combiner class on the Job. job . setMapperClass ( MaxTemperatureMapper . class ); job . setCombinerClass ( MaxTemperatureReducer . class ); job . setReducerClass ( MaxTemperatureReducer . class ); A part of output information for running MaxTemperatureReducer is: Map input records=5 Map output records=5 Map output bytes=45 Map output materialized bytes=28 Input split bytes=131 Combine input records=5 Combine output records=2 Reduce input groups=2 Reduce shuffle bytes=28 Reduce input records=2 Reduce output records=2 3 Hadoop Streaming Hadoop provides an API to MapReduce that allows you to write your map and reduce functions in languages other than Java. Hadoop Streaming uses Unix standard streams (Unix\u6807\u51c6\u6d41) as the interface between Hadoop and your program, so you can use any language that can read standard input and write to standard output to write your MapReduce program. Streaming is naturally suited for text processing. Map input data is passed over standard input to map function. A map output key-value pair is written as a single tab-delimited line. The reduce function reads lines from standard input, which the framework guarantees are sorted by key, and writes its results to standard output. Here, We take Python as an example. Python Map #!/Users/larry/anaconda3/bin/python import re import sys for line in sys . stdin : val = line . strip () ( year , temp , q ) = ( val [ 15 : 19 ], val [ 87 : 92 ], val [ 92 : 93 ]) if ( temp != +9999 and re . match ( [01459] , q )): print ( %s \\t %s % ( year , temp )) Reduce #!/Users/larry/anaconda3/bin/python import sys ( last_key , max_val ) = ( None , - sys . maxsize ) for line in sys . stdin : ( key , val ) = line . strip () . split ( \\t ) if last_key and last_key != key : print ( %s \\t %s % ( last_key , max_val )) ( last_key , max_val ) = ( key , int ( val )) else : ( last_key , max_val ) = ( key , max ( max_val , int ( val ))) if last_key : print ( %s \\t %s % ( last_key , max_val )) For example, to run a test: $ cat sample.txt | ./max_temperature_map.py | sort | ./max_temperature_reduce.py 1949 111 1950 22 The hadoop command doesn\u2019t support a Streaming option; instead, you specify the Streaming JAR file along with the jar option. Options to the Streaming program specify the input and output paths and the map and reduce scripts. $hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-3.1.0.jar \\ -input sample.txt \\ -output output \\ -mapper max_temperature_map.py \\ -reducer max_temperature_reduce.py","title":"Chapter 2: MapReduce"},{"location":"bigdata/hadoop/ch2/#hadoop-the-definitive-guide-2-mapreduce","text":"MapReduce is a programming model for data processing. MapReduce programs are inherently parallel, thus putting very large-scale data analysis into the hands of anyone with enough machines at their disposal.","title":"Hadoop: The Definitive Guide 2 - MapReduce"},{"location":"bigdata/hadoop/ch2/#1-a-weather-dataset","text":"For our example, we will write a program that mines weather data. The data we will use is from the National Climatic Data Center. It is stored using a line-oriented ASCII format, in which each line is a record.","title":"1 A Weather Dataset"},{"location":"bigdata/hadoop/ch2/#analyzing-the-data-with-hadoop","text":"MapReduce works by breaking the processing into two phases: the map phase and the reduce phase. Each phase has key-value pairs as input and output, the types of which may be chosen by the programmer. The programmer also specifies two functions: the map function and the reduce function. MAPINPUT: Key: the offset of the beginning of the line from the beginning of the file. (no need here, just ignore it) Value: raw NCDC data (0, 0067011990999991950051507004\u20269999999N9+00001+99999999999\u2026) (106, 0043011990999991950051512004\u20269999999N9+00221+99999999999\u2026) (212, 0043011990999991950051518004\u20269999999N9-00111+99999999999\u2026) (318, 0043012650999991949032412004\u20260500001N9+01111+99999999999\u2026) (424, 0043012650999991949032418004\u20260500001N9+00781+99999999999\u2026) MAPOUTPUT: The map function merely extracts the year and the air temperature , and emits them as output. Key: year Calue: air temperature (1950, 0) (1950, 22) (1950, \u221211) (1949, 111) (1949, 78) The output from the map function is processed by the MapReduce framework before being sent to the reduce function. This processing sorts and groups the key-value pairs by key. (1949, [111, 78]) (1950, [0, 22, \u221211]) All the reduce function has to do now is iterate through the list and pick up the maximum reading: (1949, 111) (1950, 22)","title":"Analyzing the Data with Hadoop"},{"location":"bigdata/hadoop/ch2/#java-mapreduce","text":"We need three things: a map function, a reduce function, and some code to run the job. Map The map function is represented by the Mapper class, which declares an abstract map() method. The Mapper class is a generic type, with four formal type parameters that specify the input key, input value, output key, and output value types of the map function. public class Mapper KEYIN , VALUEIN , KEYOUT , VALUEOUT {} Rather than using built-in Java types, Hadoop provides its own set of basic types that are optimized for network serialization. These are found in the org.apache.hadoop.io package. Here we use LongWritable , which corresponds to a Java Long , Text (like Java String ), and IntWritable (like Java Integer ). import org.apache.hadoop.io.IntWritable ; import org.apache.hadoop.io.LongWritable ; import org.apache.hadoop.io.Text ; import org.apache.hadoop.mapreduce.Mapper ; import java.io.IOException ; public class MaxTemperatureMapper extends Mapper LongWritable , Text , Text , IntWritable { private static final int MISSING = 9999 ; @Override protected void map ( LongWritable key , Text value , Context context ) throws IOException , InterruptedException { String line = value . toString (); String year = line . substring ( 15 , 19 ); int airTemperature ; if ( line . charAt ( 87 ) == + ){ //parseInt doesn t like leading plus signs airTemperature = Integer . parseInt ( line . substring ( 88 , 92 )); } else { airTemperature = Integer . parseInt ( line . substring ( 87 , 92 )); } String quality = line . substring ( 92 , 93 ); if ( airTemperature != MISSING quality . matches ( [01459]] )) { context . write ( new Text ( year ), new IntWritable ( airTemperature )); } } } Reduce The reduce function is similarly defined using a Reducer . import org.apache.hadoop.io.IntWritable ; import org.apache.hadoop.io.Text ; import org.apache.hadoop.mapreduce.Reducer ; import java.io.IOException ; public class MaxTemperatureReducer extends Reducer Text , IntWritable , Text , IntWritable { @Override protected void reduce ( Text key , Iterable IntWritable values , Context context ) throws IOException , InterruptedException { int maxValue = Integer . MIN_VALUE ; for ( IntWritable value : values ) { maxValue = Math . max ( maxValue , value . get ()); } context . write ( key , new IntWritable ( maxValue )); } } MapReduce Job The third piece of code runs the MapReduce job import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IntWritable ; import org.apache.hadoop.io.Text ; import org.apache.hadoop.mapreduce.Job ; import org.apache.hadoop.mapreduce.lib.input.FileInputFormat ; import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat ; public class MaxTemperature { public static void main ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . println ( Usage: MaxTempeature intput path output path ); System . exit (- 1 ); } Job job = new Job (); job . setJarByClass ( MaxTemperature . class ); job . setJobName ( Max Temperature ); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); job . setMapperClass ( MaxTemperatureMapper . class ); job . setReducerClass ( MaxTemperatureReducer . class ); job . setOutputKeyClass ( Text . class ); job . setOutputValueClass ( IntWritable . class ); System . exit ( job . waitForCompletion ( true ) ? 0 : 1 ); } } A Job object forms the specification of the job and gives you control over how the job is run. Rather than explicitly specifying the name of the JAR file, we can pass a class in the Job\u2019s setJarByClass() method, which Hadoop will use to locate the relevant JAR file by looking for the JAR file containing this class. A test run $ export HADOOP_CLASSPATH = /Users/larry/JavaProject/out/artifacts/MaxTemperature/MaxTemperature.jar $ hadoop com.definitivehadoop.weatherdata.MaxTemperature resources/HadoopBook/ncdc/sample.txt output When the hadoop command is invoked with a classname as the first argument, it launches a Java virtual machine (JVM) to run the class. The hadoop command adds the Hadoop libraries (and their dependencies) to the classpath and picks up the Hadoop configuration, too. To add the application classes to the classpath, we\u2019ve defined an environment variable called HADOOP_CLASSPATH , which the hadoop script picks up. //OUTPUT 18:20:18,944 INFO mapreduce.Job: Counters: 30 File System Counters FILE: Number of bytes read=148485300 FILE: Number of bytes written=150614384 FILE: Number of read operations=0 FILE: Number of large read operations=0 FILE: Number of write operations=0 Map-Reduce Framework Map input records=5 Map output records=0 Map output bytes=0 Map output materialized bytes=6 Input split bytes=131 Combine input records=0 Combine output records=0 Reduce input groups=0 Reduce shuffle bytes=6 Reduce input records=0 Reduce output records=0 Spilled Records=0 Shuffled Maps =1 Failed Shuffles=0 Merged Map outputs=1 GC time elapsed (ms)=5 Total committed heap usage (bytes)=406847488 Shuffle Errors BAD_ID=0 CONNECTION=0 IO_ERROR=0 WRONG_LENGTH=0 WRONG_MAP=0 WRONG_REDUCE=0 File Input Format Counters Bytes Read=529 File Output Format Counters Bytes Written=8 The last section of the output, titled \u201cCounters,\u201d shows the statistics that Hadoop generates for each job it runs. These are very useful for checking whether the amount of data processed is what you expected.","title":"Java MapReduce"},{"location":"bigdata/hadoop/ch2/#2-scaling-out","text":"To scale out, we need to store the data in a distributed filesystem (typically HDFS). This allows Hadoop to move the MapReduce computation to each machine hosting a part of the data, using Hadoop\u2019s resource management system, YARN.","title":"2 Scaling Out"},{"location":"bigdata/hadoop/ch2/#data-flow","text":"A MapReduce job (\u4f5c\u4e1a) is a unit of work that the client wants to be performed: it consists of the input data, the MapReduce program, and configuration information. Hadoop runs the job by dividing it into tasks (\u4efb\u52a1), of which there are two types: map tasks and reduce tasks . The tasks are scheduled using YARN and run on nodes in the cluster. Hadoop divides the input to a MapReduce job into fixed-size pieces called input splits (\u8f93\u5165\u5206\u7247), or just splits (\u5206\u7247). Hadoop creates one map task for each split, which runs the user-defined map function for each record in the split. So if we are processing the splits in parallel, the processing is better load balanced when the splits are small. On the other hand, if splits are too small, the overhead of managing the splits and map task creation begins to dominate the total job execution time. Hadoop does its best to run the map task on a node where the input data resides in HDFS, because it doesn\u2019t use valuable cluster bandwidth. This is called the data locality optimization (\u6570\u636e\u672c\u5730\u4f18\u5316). Map tasks write their output to the local disk, not to HDFS. Why is this? Map output is intermediate output: it\u2019s processed by reduce tasks to produce the final output, and once the job is complete, the map output can be thrown away. So, storing it in HDFS with replication would be overkill. The data flow for the general case of multiple reduce tasks is illustrated in figure below. This diagram makes it clear why the data flow between map and reduce tasks is colloquially known as \u201cthe shuffle,\u201d as each reduce task is fed by many map tasks.","title":"Data Flow"},{"location":"bigdata/hadoop/ch2/#combiner-functions","text":"Many MapReduce jobs are limited by the bandwidth available on the cluster, so it pays to minimize the data transferred between map and reduce tasks. Hadoop allows the user to specify a combiner function to be run on the map output, and the combiner function\u2019s output forms the input to the reduce function. For max temperature problem described above, the combiner function is the same implementation as the reduce function in MaxTemperatureReducer . The only change we need to make is to set the combiner class on the Job. job . setMapperClass ( MaxTemperatureMapper . class ); job . setCombinerClass ( MaxTemperatureReducer . class ); job . setReducerClass ( MaxTemperatureReducer . class ); A part of output information for running MaxTemperatureReducer is: Map input records=5 Map output records=5 Map output bytes=45 Map output materialized bytes=28 Input split bytes=131 Combine input records=5 Combine output records=2 Reduce input groups=2 Reduce shuffle bytes=28 Reduce input records=2 Reduce output records=2","title":"Combiner Functions"},{"location":"bigdata/hadoop/ch2/#3-hadoop-streaming","text":"Hadoop provides an API to MapReduce that allows you to write your map and reduce functions in languages other than Java. Hadoop Streaming uses Unix standard streams (Unix\u6807\u51c6\u6d41) as the interface between Hadoop and your program, so you can use any language that can read standard input and write to standard output to write your MapReduce program. Streaming is naturally suited for text processing. Map input data is passed over standard input to map function. A map output key-value pair is written as a single tab-delimited line. The reduce function reads lines from standard input, which the framework guarantees are sorted by key, and writes its results to standard output. Here, We take Python as an example.","title":"3 Hadoop Streaming"},{"location":"bigdata/hadoop/ch2/#python","text":"Map #!/Users/larry/anaconda3/bin/python import re import sys for line in sys . stdin : val = line . strip () ( year , temp , q ) = ( val [ 15 : 19 ], val [ 87 : 92 ], val [ 92 : 93 ]) if ( temp != +9999 and re . match ( [01459] , q )): print ( %s \\t %s % ( year , temp )) Reduce #!/Users/larry/anaconda3/bin/python import sys ( last_key , max_val ) = ( None , - sys . maxsize ) for line in sys . stdin : ( key , val ) = line . strip () . split ( \\t ) if last_key and last_key != key : print ( %s \\t %s % ( last_key , max_val )) ( last_key , max_val ) = ( key , int ( val )) else : ( last_key , max_val ) = ( key , max ( max_val , int ( val ))) if last_key : print ( %s \\t %s % ( last_key , max_val )) For example, to run a test: $ cat sample.txt | ./max_temperature_map.py | sort | ./max_temperature_reduce.py 1949 111 1950 22 The hadoop command doesn\u2019t support a Streaming option; instead, you specify the Streaming JAR file along with the jar option. Options to the Streaming program specify the input and output paths and the map and reduce scripts. $hadoop jar $HADOOP_HOME/share/hadoop/tools/lib/hadoop-streaming-3.1.0.jar \\ -input sample.txt \\ -output output \\ -mapper max_temperature_map.py \\ -reducer max_temperature_reduce.py","title":"Python"},{"location":"bigdata/hadoop/ch20/","text":"Hadoop: The Definitive Guide 20 - HBase Use Apache HBase\u2122 when you need random , realtime read/write access to your Big Data. It's goal is the hosting of very large tables -- billions of rows X millions of columns -- atop clusters of commodity hardware. Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google's Bigtable. [ Apache HBase ] 0 Getting Started From Apache HBase \u2122 Reference Guide The bin/start-hbase.sh script is provided as a convenient way to start HBase. Before start, make sure to start Hadoop hdfs, yarn, and zookeeper. start-all.sh #hdfs, yarn zkServer.sh start # zookeeper 1 Concepts Whirlwind Tour of the Data Model Applications store data in labeled tables. Tables are made of rows and columns. Table cells \u2014 the intersection of row and column coordinates \u2014 are versioned. By default, their version is a timestamp auto-assigned by HBase at the time of cell insertion. A cell\u2019s content is an uninterpreted array of bytes. Table row keys are also byte arrays, so theoretically anything can serve as a row key, from strings to binary representations of long or even serialized data structures. Table rows are sorted by row key, aka the table\u2019s primary key. The sort is byte-ordered. All table accesses are via the primary key. Row columns are grouped into column families . All column family members have a common prefix, so, for example, the columns info:format and info:geo are both members of the info column family, whereas contents:image belongs to the contents family. In synopsis, HBase tables are like those in an RDBMS, only cells are versioned, rows are sorted, and columns can be added on the fly by the client as long as the column family they belong to preexists. Regions Tables are automatically partitioned horizontally by HBase into regions . Each region comprises a subset of a table\u2019s rows. A region is denoted by the table it belongs to, its first row (inclusive), and its last row (exclusive). Initially, a table comprises a single region, but as the region grows it eventually crosses a configurable size threshold, at which point it splits at a row boundary into two new regions of approximately equal size. Until this first split happens, all loading will be against the single server hosting the original region. As the table grows, the number of its regions grows. Regions are the units that get distributed over an HBase cluster. Locking Row updates are atomic, no matter how many row columns constitute the row-level transaction. This keeps the locking model simple. Implementation HBase made up of an HBase master node orchestrating a cluster of one or more regionserver workers. The HBase master is responsible for bootstrapping a virgin install, for assigning regions to registered regionservers, and for recovering regionserver failures. The regionservers carry zero or more regions and field client read/write requests. Clients Java","title":"Chapter 20: HBase"},{"location":"bigdata/hadoop/ch20/#hadoop-the-definitive-guide-20-hbase","text":"Use Apache HBase\u2122 when you need random , realtime read/write access to your Big Data. It's goal is the hosting of very large tables -- billions of rows X millions of columns -- atop clusters of commodity hardware. Apache HBase is an open-source, distributed, versioned, non-relational database modeled after Google's Bigtable. [ Apache HBase ]","title":"Hadoop: The Definitive Guide 20 - HBase"},{"location":"bigdata/hadoop/ch20/#0-getting-started","text":"From Apache HBase \u2122 Reference Guide The bin/start-hbase.sh script is provided as a convenient way to start HBase. Before start, make sure to start Hadoop hdfs, yarn, and zookeeper. start-all.sh #hdfs, yarn zkServer.sh start # zookeeper","title":"0 Getting Started"},{"location":"bigdata/hadoop/ch20/#1-concepts","text":"","title":"1 Concepts"},{"location":"bigdata/hadoop/ch20/#whirlwind-tour-of-the-data-model","text":"Applications store data in labeled tables. Tables are made of rows and columns. Table cells \u2014 the intersection of row and column coordinates \u2014 are versioned. By default, their version is a timestamp auto-assigned by HBase at the time of cell insertion. A cell\u2019s content is an uninterpreted array of bytes. Table row keys are also byte arrays, so theoretically anything can serve as a row key, from strings to binary representations of long or even serialized data structures. Table rows are sorted by row key, aka the table\u2019s primary key. The sort is byte-ordered. All table accesses are via the primary key. Row columns are grouped into column families . All column family members have a common prefix, so, for example, the columns info:format and info:geo are both members of the info column family, whereas contents:image belongs to the contents family. In synopsis, HBase tables are like those in an RDBMS, only cells are versioned, rows are sorted, and columns can be added on the fly by the client as long as the column family they belong to preexists. Regions Tables are automatically partitioned horizontally by HBase into regions . Each region comprises a subset of a table\u2019s rows. A region is denoted by the table it belongs to, its first row (inclusive), and its last row (exclusive). Initially, a table comprises a single region, but as the region grows it eventually crosses a configurable size threshold, at which point it splits at a row boundary into two new regions of approximately equal size. Until this first split happens, all loading will be against the single server hosting the original region. As the table grows, the number of its regions grows. Regions are the units that get distributed over an HBase cluster. Locking Row updates are atomic, no matter how many row columns constitute the row-level transaction. This keeps the locking model simple.","title":"Whirlwind Tour of the Data Model"},{"location":"bigdata/hadoop/ch20/#implementation","text":"HBase made up of an HBase master node orchestrating a cluster of one or more regionserver workers. The HBase master is responsible for bootstrapping a virgin install, for assigning regions to registered regionservers, and for recovering regionserver failures. The regionservers carry zero or more regions and field client read/write requests.","title":"Implementation"},{"location":"bigdata/hadoop/ch20/#clients","text":"","title":"Clients"},{"location":"bigdata/hadoop/ch20/#java","text":"","title":"Java"},{"location":"bigdata/hadoop/ch21/","text":"Hadoop: The Definitive Guide 21 - ZooKeeper Resources Apache ZooKeeper ZooKeeper Wiki ZooKeeper Getting Started Guide","title":"Chapter 21: ZooKeeper"},{"location":"bigdata/hadoop/ch21/#hadoop-the-definitive-guide-21-zookeeper","text":"","title":"Hadoop: The Definitive Guide 21 - ZooKeeper"},{"location":"bigdata/hadoop/ch21/#resources","text":"Apache ZooKeeper ZooKeeper Wiki ZooKeeper Getting Started Guide","title":"Resources"},{"location":"bigdata/hadoop/ch22/","text":"Hadoop: The Definitive Guide 22 - Composable Data at Center","title":"Chapter 22: Composable Data at Center"},{"location":"bigdata/hadoop/ch22/#hadoop-the-definitive-guide-22-composable-data-at-center","text":"","title":"Hadoop: The Definitive Guide 22 - Composable Data at Center"},{"location":"bigdata/hadoop/ch23/","text":"Hadoop: The Definitive Guide 23 - Biological Data Science: Saving Lives with Software","title":"Chapter 23: Biological Data Science: Saving Lives with Software"},{"location":"bigdata/hadoop/ch23/#hadoop-the-definitive-guide-23-biological-data-science-saving-lives-with-software","text":"","title":"Hadoop: The Definitive Guide 23 - Biological Data Science: Saving Lives with Software"},{"location":"bigdata/hadoop/ch24/","text":"Hadoop: The Definitive Guide 24 - Cascading","title":"Chapter 24: Cascading"},{"location":"bigdata/hadoop/ch24/#hadoop-the-definitive-guide-24-cascading","text":"","title":"Hadoop: The Definitive Guide 24 - Cascading"},{"location":"bigdata/hadoop/ch3/","text":"Hadoop: The Definitive Guide 3 - The Hadoop Distributed FileSystem Filesystems that manage the storage across a network of machines are called distributed filesystems . Hadoop comes with a distributed filesystem called HDFS, which stands for Hadoop Distributed Filesystem . 1 The Design of HDFS HDFS is a filesystem designed for storing very large files with streaming data access patterns, running on clusters of commodity hardware. Very large files: files that are hundreds of megabytes, gigabytes, or terabytes in size. Streaming data access: HDFS is built around the idea that the most efficient data processing pattern is a write-once, read-many-times pattern. Commodity hardware: It\u2019s designed to run on clusters of commodity hardware. These are areas where HDFS is not a good fit today: Low-latency data access Lots of small files Multiple writers, arbitrary file modifications 2 HDFS Concepts Blocks A disk has a block size, which is the minimum amount of data that it can read or write. Filesystems for a single disk build on this by dealing with data in blocks, which are an integral multiple of the disk block size. HDFS, too, has the concept of a block , but it is a much larger unit \u2014 128 MB by default (typically a few kilobytes for ordinary file system). Unlike a filesystem for a single disk, a file in HDFS that is smaller than a single block does not occupy a full block\u2019s worth of underlying storage. (For example, a 1 MB file stored with a block size of 128 MB uses 1 MB of disk space, not 128 MB.) Question WHY IS A BLOCK IN HDFS SO LARGE? To minimize the cost of seeks. Having a block abstraction for a distributed filesystem brings several benefits. A file can be larger than any single disk in the network. Making the unit of abstraction a block rather than a file simplifies the storage subsystem. storage management: because blocks are a fixed size, it is easy to calculate how many can be stored on a given disk. metadata concerns: because blocks are just chunks of data to be stored, file metadata such as permissions information does not need to be stored with the blocks. Blocks fit well with replication for providing fault tolerance and availability. To insure against corrupted blocks and disk and machine failure, each block is replicated to a small number of physically separate machines (typically three). Namenodes and Datanodes An HDFS cluster has two types of nodes: a namenode (the master) and a number of datanodes (workers). The namenode manages the filesystem namespace. It maintains the filesystem tree and the metadata for all the files and directories in the tree. This information is stored persistently on the local disk in the form of two files: the namespace image and the edit log. The namenode also knows the datanodes on which all the blocks for a given file are located; Datanodes are the workhorses of the filesystem. They store and retrieve blocks when they are told to (by clients or the namenode), and they report back to the namenode periodically with lists of blocks that they are storing. If the machine running the namenode were obliterated, all the files on the filesystem would be lost since there would be no way of knowing how to reconstruct the files from the blocks on the datanodes. Possible solution: to back up the files that make up the persistent state of the filesystem metadata. to run a secondary namenode, which keeps a copy of the merged namespace image. Block Caching For frequently accessed files, the blocks may be explicitly cached in the datanode\u2019s memory, in an off-heap block cache. Users or applications instruct the namenode which files to cache (and for how long) by adding a cache directive to a cache pool . HDFS Federation Problem: On very large clusters with many files, memory becomes the limiting factor for scaling, since namenode keeps a reference to every file and block in the filesystem in memory. For example, a 200-node cluster with 24 TB of disk space per node, a block size of 128 MB, and a replication factor of 3 has room for about 2 million blocks (or more): 200\\times 24TB\u2044(128MB\u00d73) 200\\times 24TB\u2044(128MB\u00d73) , So in this case, setting the namenode memory to 12,000 MB would be a good starting point. Solution: HDFS federation, allows a cluster to scale by adding namenodes, each of which manages a portion of the filesystem namespace. HDFS High Availability To remedy a failed namenode, a pair of namenodes in an active-standby configuration is introduced in Hadoop 2. In the event of the failure of the active namenode, the standby takes over its duties to continue servicing client requests without a significant interruption. 3 The Command-Line Interface Basic Filesystem Operations Hadoop\u2019s filesystem shell command is fs , which supports a number of subcommands (type hadoop fs -help to get detailed help). Copying a file from the local filesystem to HDFS: #The local file is copied tothe HDFS instance running on localhost. $ hadoop fs -copyFromLocal test.copy /test.copy # works as the same $ hadoop fs -copyFromLocal test.copy hdfs://localhost:9000/test2.copy Copying the file from the HDFS to the local filesystem: $ hadoop fs -copyToLocal /test.copy test.copy.txt 4 Hadoop Filesystems Hadoop has an abstract notion of filesystems, of which HDFS is just one implementation. The Java abstract class org.apache.hadoop.fs.FileSystem represents the client interface to a filesystem in Hadoop, and there are several concrete implementations. Filesystem URI scheme Java implementation Description Local file fs.LocalFileSystem A filesystem for a locally connected disk with client-side checksums HDFS hfs hdfs.DistributedFileSystem Hadoop\u2019s distributed filesystem WebHDFS webhdfs hdfs.web.WebHdfsFileSystem Providing authenticated read/write access to HDFS over HTTP. Secure WebHDFS swebhdfs hdfs.web.SWebHdfsFileSystem The HTTPS version of WebHDFS. When you are processing large volumes of data you should choose a distributed filesystem that has the data locality optimization, notably HDFS. HTTP The HTTP REST API exposed by the WebHDFS protocol makes it easier for other languages to interact with HDFS. Note that the HTTP interface is slower than the native Java client, so should be avoided for very large data transfers if possible. There are two ways of accessing HDFS over HTTP: Directly, where the HDFS daemons serve HTTP requests to clients; Via a proxy (or proxies), which accesses HDFS on the client\u2019s behalf using the usual DistributedFileSystem API. HDFS proxy allows for stricter firewall and bandwidth-limiting policies to be put in place. It\u2019s common to use a proxy for transfers between Hadoop clusters located in different data centers, or when accessing a Hadoop cluster running in the cloud from an external network. 5 The Java Interface Hadoop FileSystem class is the API for interacting with one of Hadoop\u2019s filesystems. In general you should strive to write your code against the FileSystem abstract class , to retain portability across filesystems. This is very useful when testing your program, for example, because you can rapidly run tests using data stored on the local filesystem. Reading Data from a Hadoop URL NOT recommended, because setURLStreamHandlerFactory() method can be called only once per JVM, which means that if some other part of your program sets it, you won't be able to use. Reading Data Using the FileSystem API A file in a Hadoop filesystem is represented by a Hadoop Path object( org.apache.hadoop.fs.Path , not java.io.File ). You can think of a Path as a Hadoop filesystem URI, such as hdfs://localhost/user/tom/test.copy Since FileSystem is a general filesystem API, so the first step is to retrieve an instance for the filesystem we want. There are several static factory methods for getting a FileSystem instance: // Returns the default filesystem public static FileSystem get ( Configuration conf ) throws IOException // Uses the given URI\u2019s scheme and authority to determine the filesystem to use public static FileSystem get ( URI uri , Configuration conf ) throws IOException // Retrieves the filesystem as the given user public static FileSystem get ( URI uri , Configuration conf , String user ) throws IOException // Retrieves a local filesystem instance public static LocalFileSystem getLocal ( Configuration conf ) throws IOException A Configuration object encapsulates a client or server's configuration, which is set using configuration files read from the classpath, such as etc/hadoop/core-site.xml . With a FileSystem instance in hand, we invoke an open() method to get the input stream for a file: // Uses a default buffer size of 4 KB public FSDataInputStream open ( Path f ) throws IOException // Uses a buffer size of bufferSize public abstract FSDataInputStream open ( Path f , int bufferSize ) throws IOException Displaying files from a Hadoop filesystem on standard output by using the FileSystem directly: // $ hdfs://localhost:9000/test2.copy import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.fs.FileSystem ; import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IOUtils ; import java.io.InputStream ; import java.net.URI ; public class FileSystemCat { public static void main ( String [] args ) throws Exception { String uri = args [ 0 ]; Configuration conf = new Configuration (); FileSystem fs = FileSystem . get ( URI . create ( uri ), conf ); InputStream in = null ; try { in = fs . open ( new Path ( uri )); IOUtils . copyBytes ( in , System . out , 4096 , false ); } finally { IOUtils . closeStream ( in ); } } } FSDataInputStream The open() method on FileSystem actually returns an FSDataInputStream rather than a standard java.io class. This class is a specialization of java.io.DataInputStream with support for random access, so you can read from any part of the stream: The Seekable interface permits seeking to a position in the file and provides a query method for the current offset from the start of the file ( getPos() ): public interface Seekable { void seek ( long pos ) throws IOException ; long getPos () throws IOException ; } Displaying files from a Hadoop filesystem on standard output twice, by using seek() : // hdfs://localhost:9000/test2.copy import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.fs.FSDataInputStream ; import org.apache.hadoop.fs.FileSystem ; import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IOUtils ; import java.net.URI ; public class FileSystemDoubleCat { public static void main ( String [] args ) throws Exception { String uri = args [ 0 ]; Configuration conf = new Configuration (); FileSystem fs = FileSystem . get ( URI . create ( uri ), conf ); FSDataInputStream in = null ; try { in = fs . open ( new Path ( uri )); IOUtils . copyBytes ( in , System . out , 4096 , false ); in . seek ( 0 ); // go back to the start of the file IOUtils . copyBytes ( in , System . out , 4096 , false ); } catch ( Exception ex ) { ex . printStackTrace (); } finally { IOUtils . closeStream ( in ); } } } Writing Data The FileSystem class has a number of methods for creating a file. // takes a Path object for the file to be created and returns an output stream to write to public FSDataOutputStream create ( Path f ) throws IOException // appends to an existing file public FSDataOutputStream append ( Path f ) throws IOException Warning The create() methods create any parent directories of the file to be written that don\u2019t already exist. There\u2019s an overloaded method of for passing a callback interface, Progressable /C, so your application can be notified of the progress of the data being written to the datanodes: public interface Progressable { public void progress(); } Here, we illustrate progress by printing a period every time the progress() method is called by Hadoop, which is after each 64 KB packet of data is written to the datanode pipeline. // args: /Users/larry/test.copy hdfs://localhost:9000/test4.copy import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.fs.FileSystem ; import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IOUtils ; import org.apache.hadoop.util.Progressable ; import java.io.* ; import java.net.URI ; // Copying a local file to a Hadoop filesystem public class FileCopyWithProgress { public static void main ( String [] args ) throws Exception { String localsrc = args [ 0 ]; String dstsrc = args [ 1 ]; BufferedInputStream in = new BufferedInputStream ( new FileInputStream ( localsrc )); Configuration conf = new Configuration (); FileSystem fs = FileSystem . get ( URI . create ( dstsrc ), conf ); try { OutputStream out = fs . create ( new Path ( dstsrc ), new Progressable () { @Override public void progress () { System . out . println ( . ); } }); IOUtils . copyBytes ( in , out , 4096 , true ); } finally { IOUtils . closeStream ( in ); } //end try } // end main } FSDataOutputStream The create() method on FileSystem returns an FSDataOutputStream , which, like FSDataInputStream , has a method for querying the current position in the file: public class FSDataOutputStream extends DataOutputStream implements Syncable { public long getPos () throws IOException { // implementation elided } // implementation elided } However, because HDFS allows only sequential writes to an open file or appends to an already written file, FSDataOutputStream does not permit seeking. Directories FileSystem provides a method to create a directory: public boolean mkdirs ( Path f ) throws IOException This method creates all of the necessary parent directories if they don\u2019t already exist. Querying the Filesystem File metadata: FileStatus Listing files File patterns Deleting Data Use the delete() method on FileSystem to permanently remove files or directories: public boolean delete ( Path f , boolean recursive ) throws IOException If f is a file or an empty directory, the value of recursive is ignored. 6 Data Flow Anatomy of a File Read The figure below shows the main sequence of events when reading a file. step 1: The client opens the file it wishes to read by calling open() on the FileSystem object, which for HDFS is an instance of DistributedFileSystem . step 2: DistributedFileSystem calls the namenode, using remote procedure calls (RPCs), to determine the locations of the first few blocks in the file. step 3: For each block, the namenode returns the addresses of the datanodes that have a copy of that block. Furthermore, the datanodes are sorted according to their proximity to the client. If the client is itself a datanode, the client will read from the local datanode if that datanode hosts a copy of the block. The DistributedFileSystem returns an FSDataInputStream to the client for it to read data from. FSDataInputStream in turn wraps a DFSInputStream , which manages the datanode and namenode I/O. The client then calls read() on the stream. step 4: DFSInputStream , which has stored the datanode addresses for the first few blocks in the file, then connects to the first (closest) datanode for the first block in the file. Data is streamed from the datanode back to the client, which calls read() repeatedly on the stream. step 5: When the end of the block is reached, DFSInputStream will close the connection to the datanode, then find the best datanode for the next block. step 6: This happens transparently to the client, which from its point of view is just reading a continuous stream. Blocks are read in order, with the DFSInputStream opening new connections to datanodes as the client reads through the stream. It will also call the namenode to retrieve the datanode locations for the next batch of blocks as needed. When the client has finished reading, it calls close() on the FSDataInputStream . Anatomy of a File Write The figure below illustrates the case of creating a new file, writing data to it, then closing the file. step 1: The client creates the file by calling create() on DistributedFileSystem . step 2: DistributedFileSystem makes an RPC call to the namenode to create a new file in the filesystem\u2019s namespace, with no blocks associated with it. The namenode performs various checks to make sure the file doesn\u2019t already exist and that the client has the right permissions to create the file. If these checks pass, the namenode makes a record of the new file; otherwise, file creation fails and the client is thrown an IOException . The DistributedFileSystem returns an FSDataOutputStream for the client to start writing data to. Just as in the read case, FSDataOutputStream wraps a DFSOutputStream , which handles communication with the datanodes and namenode. step 3: As the client writes data, the DFSOutputStream splits it into packets, which it writes to an internal queue called the data queue . The data queue is consumed by the DataStreamer , which is responsible for asking the namenode to allocate new blocks by picking a list of suitable datanodes to store the replicas. step 4: The list of datanodes forms a pipeline, and here we\u2019ll assume the replication level is three, so there are three nodes in the pipeline. The DataStreamer streams the packets to the first datanode in the pipeline, which stores each packet and forwards it to the second datanode in the pipeline. Similarly, the second datanode stores the packet and forwards it to the third (and last) datanode in the pipeline . step 5: The DFSOutputStream also maintains an internal queue of packets that are waiting to be acknowledged by datanodes, called the ack queue . A packet is removed from the ack queue only when it has been acknowledged by all the datanodes in the pipeline. step 6: When the client has finished writing data, it calls close() on the stream. This action flushes all the remaining packets to the datanode pipeline. step 7: It waits for acknowledgments before contacting the namenode to signal that the file is complete. Coherency Model A coherency model for a filesystem describes the data visibility of reads and writes for a file. Any content written to the file is not guaranteed to be visible, even if the stream is flushed. Once more than a block\u2019s worth of data has been written, the first block will be visible to new readers. The FSDataOutputStream.hflush() method force all buffers to be flushed to the datanodes. The hflush() guarantees that the data written up to that point in the file has reached all the datanodes in the write pipeline and is visible to all new readers. But it does not guarantee that the datanodes have written the data to disk, only that it\u2019s in the datanodes\u2019 memory. Closing a file in HDFS performs an implicit hflush() . The hsync() method syncs to disk for a file descriptor. FileOutputStream out = new FileOutputStream ( localFile ); out . write ( content . getBytes ( UTF-8 )); out . flush (); // flush to operating system out . getFD (). sync (); // sync to disk assertThat ( localFile . length (), is ((( long ) content . length ()))); Consequences for application design You should call hflush() at suitable points, such as after writing a certain number of records or number of bytes. 7 Parallel Copying with distcp The program distcp copys data to and from Hadoop filesystems in parallel. $ hadoop distcp file1 file2 distcp is implemented as a MapReduce job where the work of copying is done by the maps that run in parallel across the cluster, with no reducers.","title":"Chapter 3: The Hadoop Distributed FileSystem"},{"location":"bigdata/hadoop/ch3/#hadoop-the-definitive-guide-3-the-hadoop-distributed-filesystem","text":"Filesystems that manage the storage across a network of machines are called distributed filesystems . Hadoop comes with a distributed filesystem called HDFS, which stands for Hadoop Distributed Filesystem .","title":"Hadoop: The Definitive Guide 3 - The Hadoop Distributed FileSystem"},{"location":"bigdata/hadoop/ch3/#1-the-design-of-hdfs","text":"HDFS is a filesystem designed for storing very large files with streaming data access patterns, running on clusters of commodity hardware. Very large files: files that are hundreds of megabytes, gigabytes, or terabytes in size. Streaming data access: HDFS is built around the idea that the most efficient data processing pattern is a write-once, read-many-times pattern. Commodity hardware: It\u2019s designed to run on clusters of commodity hardware. These are areas where HDFS is not a good fit today: Low-latency data access Lots of small files Multiple writers, arbitrary file modifications","title":"1 The Design of HDFS"},{"location":"bigdata/hadoop/ch3/#2-hdfs-concepts","text":"","title":"2 HDFS Concepts"},{"location":"bigdata/hadoop/ch3/#blocks","text":"A disk has a block size, which is the minimum amount of data that it can read or write. Filesystems for a single disk build on this by dealing with data in blocks, which are an integral multiple of the disk block size. HDFS, too, has the concept of a block , but it is a much larger unit \u2014 128 MB by default (typically a few kilobytes for ordinary file system). Unlike a filesystem for a single disk, a file in HDFS that is smaller than a single block does not occupy a full block\u2019s worth of underlying storage. (For example, a 1 MB file stored with a block size of 128 MB uses 1 MB of disk space, not 128 MB.) Question WHY IS A BLOCK IN HDFS SO LARGE? To minimize the cost of seeks. Having a block abstraction for a distributed filesystem brings several benefits. A file can be larger than any single disk in the network. Making the unit of abstraction a block rather than a file simplifies the storage subsystem. storage management: because blocks are a fixed size, it is easy to calculate how many can be stored on a given disk. metadata concerns: because blocks are just chunks of data to be stored, file metadata such as permissions information does not need to be stored with the blocks. Blocks fit well with replication for providing fault tolerance and availability. To insure against corrupted blocks and disk and machine failure, each block is replicated to a small number of physically separate machines (typically three).","title":"Blocks"},{"location":"bigdata/hadoop/ch3/#namenodes-and-datanodes","text":"An HDFS cluster has two types of nodes: a namenode (the master) and a number of datanodes (workers). The namenode manages the filesystem namespace. It maintains the filesystem tree and the metadata for all the files and directories in the tree. This information is stored persistently on the local disk in the form of two files: the namespace image and the edit log. The namenode also knows the datanodes on which all the blocks for a given file are located; Datanodes are the workhorses of the filesystem. They store and retrieve blocks when they are told to (by clients or the namenode), and they report back to the namenode periodically with lists of blocks that they are storing. If the machine running the namenode were obliterated, all the files on the filesystem would be lost since there would be no way of knowing how to reconstruct the files from the blocks on the datanodes. Possible solution: to back up the files that make up the persistent state of the filesystem metadata. to run a secondary namenode, which keeps a copy of the merged namespace image.","title":"Namenodes and Datanodes"},{"location":"bigdata/hadoop/ch3/#block-caching","text":"For frequently accessed files, the blocks may be explicitly cached in the datanode\u2019s memory, in an off-heap block cache. Users or applications instruct the namenode which files to cache (and for how long) by adding a cache directive to a cache pool .","title":"Block Caching"},{"location":"bigdata/hadoop/ch3/#hdfs-federation","text":"Problem: On very large clusters with many files, memory becomes the limiting factor for scaling, since namenode keeps a reference to every file and block in the filesystem in memory. For example, a 200-node cluster with 24 TB of disk space per node, a block size of 128 MB, and a replication factor of 3 has room for about 2 million blocks (or more): 200\\times 24TB\u2044(128MB\u00d73) 200\\times 24TB\u2044(128MB\u00d73) , So in this case, setting the namenode memory to 12,000 MB would be a good starting point. Solution: HDFS federation, allows a cluster to scale by adding namenodes, each of which manages a portion of the filesystem namespace.","title":"HDFS Federation"},{"location":"bigdata/hadoop/ch3/#hdfs-high-availability","text":"To remedy a failed namenode, a pair of namenodes in an active-standby configuration is introduced in Hadoop 2. In the event of the failure of the active namenode, the standby takes over its duties to continue servicing client requests without a significant interruption.","title":"HDFS High Availability"},{"location":"bigdata/hadoop/ch3/#3-the-command-line-interface","text":"","title":"3 The Command-Line Interface"},{"location":"bigdata/hadoop/ch3/#basic-filesystem-operations","text":"Hadoop\u2019s filesystem shell command is fs , which supports a number of subcommands (type hadoop fs -help to get detailed help). Copying a file from the local filesystem to HDFS: #The local file is copied tothe HDFS instance running on localhost. $ hadoop fs -copyFromLocal test.copy /test.copy # works as the same $ hadoop fs -copyFromLocal test.copy hdfs://localhost:9000/test2.copy Copying the file from the HDFS to the local filesystem: $ hadoop fs -copyToLocal /test.copy test.copy.txt","title":"Basic Filesystem Operations"},{"location":"bigdata/hadoop/ch3/#4-hadoop-filesystems","text":"Hadoop has an abstract notion of filesystems, of which HDFS is just one implementation. The Java abstract class org.apache.hadoop.fs.FileSystem represents the client interface to a filesystem in Hadoop, and there are several concrete implementations. Filesystem URI scheme Java implementation Description Local file fs.LocalFileSystem A filesystem for a locally connected disk with client-side checksums HDFS hfs hdfs.DistributedFileSystem Hadoop\u2019s distributed filesystem WebHDFS webhdfs hdfs.web.WebHdfsFileSystem Providing authenticated read/write access to HDFS over HTTP. Secure WebHDFS swebhdfs hdfs.web.SWebHdfsFileSystem The HTTPS version of WebHDFS. When you are processing large volumes of data you should choose a distributed filesystem that has the data locality optimization, notably HDFS.","title":"4 Hadoop Filesystems"},{"location":"bigdata/hadoop/ch3/#http","text":"The HTTP REST API exposed by the WebHDFS protocol makes it easier for other languages to interact with HDFS. Note that the HTTP interface is slower than the native Java client, so should be avoided for very large data transfers if possible. There are two ways of accessing HDFS over HTTP: Directly, where the HDFS daemons serve HTTP requests to clients; Via a proxy (or proxies), which accesses HDFS on the client\u2019s behalf using the usual DistributedFileSystem API. HDFS proxy allows for stricter firewall and bandwidth-limiting policies to be put in place. It\u2019s common to use a proxy for transfers between Hadoop clusters located in different data centers, or when accessing a Hadoop cluster running in the cloud from an external network.","title":"HTTP"},{"location":"bigdata/hadoop/ch3/#5-the-java-interface","text":"Hadoop FileSystem class is the API for interacting with one of Hadoop\u2019s filesystems. In general you should strive to write your code against the FileSystem abstract class , to retain portability across filesystems. This is very useful when testing your program, for example, because you can rapidly run tests using data stored on the local filesystem.","title":"5 The Java Interface"},{"location":"bigdata/hadoop/ch3/#reading-data-from-a-hadoop-url","text":"NOT recommended, because setURLStreamHandlerFactory() method can be called only once per JVM, which means that if some other part of your program sets it, you won't be able to use.","title":"Reading Data from a Hadoop URL"},{"location":"bigdata/hadoop/ch3/#reading-data-using-the-filesystem-api","text":"A file in a Hadoop filesystem is represented by a Hadoop Path object( org.apache.hadoop.fs.Path , not java.io.File ). You can think of a Path as a Hadoop filesystem URI, such as hdfs://localhost/user/tom/test.copy Since FileSystem is a general filesystem API, so the first step is to retrieve an instance for the filesystem we want. There are several static factory methods for getting a FileSystem instance: // Returns the default filesystem public static FileSystem get ( Configuration conf ) throws IOException // Uses the given URI\u2019s scheme and authority to determine the filesystem to use public static FileSystem get ( URI uri , Configuration conf ) throws IOException // Retrieves the filesystem as the given user public static FileSystem get ( URI uri , Configuration conf , String user ) throws IOException // Retrieves a local filesystem instance public static LocalFileSystem getLocal ( Configuration conf ) throws IOException A Configuration object encapsulates a client or server's configuration, which is set using configuration files read from the classpath, such as etc/hadoop/core-site.xml . With a FileSystem instance in hand, we invoke an open() method to get the input stream for a file: // Uses a default buffer size of 4 KB public FSDataInputStream open ( Path f ) throws IOException // Uses a buffer size of bufferSize public abstract FSDataInputStream open ( Path f , int bufferSize ) throws IOException Displaying files from a Hadoop filesystem on standard output by using the FileSystem directly: // $ hdfs://localhost:9000/test2.copy import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.fs.FileSystem ; import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IOUtils ; import java.io.InputStream ; import java.net.URI ; public class FileSystemCat { public static void main ( String [] args ) throws Exception { String uri = args [ 0 ]; Configuration conf = new Configuration (); FileSystem fs = FileSystem . get ( URI . create ( uri ), conf ); InputStream in = null ; try { in = fs . open ( new Path ( uri )); IOUtils . copyBytes ( in , System . out , 4096 , false ); } finally { IOUtils . closeStream ( in ); } } }","title":"Reading Data Using the FileSystem API"},{"location":"bigdata/hadoop/ch3/#fsdatainputstream","text":"The open() method on FileSystem actually returns an FSDataInputStream rather than a standard java.io class. This class is a specialization of java.io.DataInputStream with support for random access, so you can read from any part of the stream: The Seekable interface permits seeking to a position in the file and provides a query method for the current offset from the start of the file ( getPos() ): public interface Seekable { void seek ( long pos ) throws IOException ; long getPos () throws IOException ; } Displaying files from a Hadoop filesystem on standard output twice, by using seek() : // hdfs://localhost:9000/test2.copy import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.fs.FSDataInputStream ; import org.apache.hadoop.fs.FileSystem ; import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IOUtils ; import java.net.URI ; public class FileSystemDoubleCat { public static void main ( String [] args ) throws Exception { String uri = args [ 0 ]; Configuration conf = new Configuration (); FileSystem fs = FileSystem . get ( URI . create ( uri ), conf ); FSDataInputStream in = null ; try { in = fs . open ( new Path ( uri )); IOUtils . copyBytes ( in , System . out , 4096 , false ); in . seek ( 0 ); // go back to the start of the file IOUtils . copyBytes ( in , System . out , 4096 , false ); } catch ( Exception ex ) { ex . printStackTrace (); } finally { IOUtils . closeStream ( in ); } } }","title":"FSDataInputStream"},{"location":"bigdata/hadoop/ch3/#writing-data","text":"The FileSystem class has a number of methods for creating a file. // takes a Path object for the file to be created and returns an output stream to write to public FSDataOutputStream create ( Path f ) throws IOException // appends to an existing file public FSDataOutputStream append ( Path f ) throws IOException Warning The create() methods create any parent directories of the file to be written that don\u2019t already exist. There\u2019s an overloaded method of for passing a callback interface, Progressable /C, so your application can be notified of the progress of the data being written to the datanodes: public interface Progressable { public void progress(); } Here, we illustrate progress by printing a period every time the progress() method is called by Hadoop, which is after each 64 KB packet of data is written to the datanode pipeline. // args: /Users/larry/test.copy hdfs://localhost:9000/test4.copy import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.fs.FileSystem ; import org.apache.hadoop.fs.Path ; import org.apache.hadoop.io.IOUtils ; import org.apache.hadoop.util.Progressable ; import java.io.* ; import java.net.URI ; // Copying a local file to a Hadoop filesystem public class FileCopyWithProgress { public static void main ( String [] args ) throws Exception { String localsrc = args [ 0 ]; String dstsrc = args [ 1 ]; BufferedInputStream in = new BufferedInputStream ( new FileInputStream ( localsrc )); Configuration conf = new Configuration (); FileSystem fs = FileSystem . get ( URI . create ( dstsrc ), conf ); try { OutputStream out = fs . create ( new Path ( dstsrc ), new Progressable () { @Override public void progress () { System . out . println ( . ); } }); IOUtils . copyBytes ( in , out , 4096 , true ); } finally { IOUtils . closeStream ( in ); } //end try } // end main }","title":"Writing Data"},{"location":"bigdata/hadoop/ch3/#fsdataoutputstream","text":"The create() method on FileSystem returns an FSDataOutputStream , which, like FSDataInputStream , has a method for querying the current position in the file: public class FSDataOutputStream extends DataOutputStream implements Syncable { public long getPos () throws IOException { // implementation elided } // implementation elided } However, because HDFS allows only sequential writes to an open file or appends to an already written file, FSDataOutputStream does not permit seeking.","title":"FSDataOutputStream"},{"location":"bigdata/hadoop/ch3/#directories","text":"FileSystem provides a method to create a directory: public boolean mkdirs ( Path f ) throws IOException This method creates all of the necessary parent directories if they don\u2019t already exist.","title":"Directories"},{"location":"bigdata/hadoop/ch3/#querying-the-filesystem","text":"File metadata: FileStatus Listing files File patterns","title":"Querying the Filesystem"},{"location":"bigdata/hadoop/ch3/#deleting-data","text":"Use the delete() method on FileSystem to permanently remove files or directories: public boolean delete ( Path f , boolean recursive ) throws IOException If f is a file or an empty directory, the value of recursive is ignored.","title":"Deleting Data"},{"location":"bigdata/hadoop/ch3/#6-data-flow","text":"","title":"6 Data Flow"},{"location":"bigdata/hadoop/ch3/#anatomy-of-a-file-read","text":"The figure below shows the main sequence of events when reading a file. step 1: The client opens the file it wishes to read by calling open() on the FileSystem object, which for HDFS is an instance of DistributedFileSystem . step 2: DistributedFileSystem calls the namenode, using remote procedure calls (RPCs), to determine the locations of the first few blocks in the file. step 3: For each block, the namenode returns the addresses of the datanodes that have a copy of that block. Furthermore, the datanodes are sorted according to their proximity to the client. If the client is itself a datanode, the client will read from the local datanode if that datanode hosts a copy of the block. The DistributedFileSystem returns an FSDataInputStream to the client for it to read data from. FSDataInputStream in turn wraps a DFSInputStream , which manages the datanode and namenode I/O. The client then calls read() on the stream. step 4: DFSInputStream , which has stored the datanode addresses for the first few blocks in the file, then connects to the first (closest) datanode for the first block in the file. Data is streamed from the datanode back to the client, which calls read() repeatedly on the stream. step 5: When the end of the block is reached, DFSInputStream will close the connection to the datanode, then find the best datanode for the next block. step 6: This happens transparently to the client, which from its point of view is just reading a continuous stream. Blocks are read in order, with the DFSInputStream opening new connections to datanodes as the client reads through the stream. It will also call the namenode to retrieve the datanode locations for the next batch of blocks as needed. When the client has finished reading, it calls close() on the FSDataInputStream .","title":"Anatomy of a File Read"},{"location":"bigdata/hadoop/ch3/#anatomy-of-a-file-write","text":"The figure below illustrates the case of creating a new file, writing data to it, then closing the file. step 1: The client creates the file by calling create() on DistributedFileSystem . step 2: DistributedFileSystem makes an RPC call to the namenode to create a new file in the filesystem\u2019s namespace, with no blocks associated with it. The namenode performs various checks to make sure the file doesn\u2019t already exist and that the client has the right permissions to create the file. If these checks pass, the namenode makes a record of the new file; otherwise, file creation fails and the client is thrown an IOException . The DistributedFileSystem returns an FSDataOutputStream for the client to start writing data to. Just as in the read case, FSDataOutputStream wraps a DFSOutputStream , which handles communication with the datanodes and namenode. step 3: As the client writes data, the DFSOutputStream splits it into packets, which it writes to an internal queue called the data queue . The data queue is consumed by the DataStreamer , which is responsible for asking the namenode to allocate new blocks by picking a list of suitable datanodes to store the replicas. step 4: The list of datanodes forms a pipeline, and here we\u2019ll assume the replication level is three, so there are three nodes in the pipeline. The DataStreamer streams the packets to the first datanode in the pipeline, which stores each packet and forwards it to the second datanode in the pipeline. Similarly, the second datanode stores the packet and forwards it to the third (and last) datanode in the pipeline . step 5: The DFSOutputStream also maintains an internal queue of packets that are waiting to be acknowledged by datanodes, called the ack queue . A packet is removed from the ack queue only when it has been acknowledged by all the datanodes in the pipeline. step 6: When the client has finished writing data, it calls close() on the stream. This action flushes all the remaining packets to the datanode pipeline. step 7: It waits for acknowledgments before contacting the namenode to signal that the file is complete.","title":"Anatomy of a File Write"},{"location":"bigdata/hadoop/ch3/#coherency-model","text":"A coherency model for a filesystem describes the data visibility of reads and writes for a file. Any content written to the file is not guaranteed to be visible, even if the stream is flushed. Once more than a block\u2019s worth of data has been written, the first block will be visible to new readers. The FSDataOutputStream.hflush() method force all buffers to be flushed to the datanodes. The hflush() guarantees that the data written up to that point in the file has reached all the datanodes in the write pipeline and is visible to all new readers. But it does not guarantee that the datanodes have written the data to disk, only that it\u2019s in the datanodes\u2019 memory. Closing a file in HDFS performs an implicit hflush() . The hsync() method syncs to disk for a file descriptor. FileOutputStream out = new FileOutputStream ( localFile ); out . write ( content . getBytes ( UTF-8 )); out . flush (); // flush to operating system out . getFD (). sync (); // sync to disk assertThat ( localFile . length (), is ((( long ) content . length ()))); Consequences for application design You should call hflush() at suitable points, such as after writing a certain number of records or number of bytes.","title":"Coherency Model"},{"location":"bigdata/hadoop/ch3/#7-parallel-copying-with-distcp","text":"The program distcp copys data to and from Hadoop filesystems in parallel. $ hadoop distcp file1 file2 distcp is implemented as a MapReduce job where the work of copying is done by the maps that run in parallel across the cluster, with no reducers.","title":"7 Parallel Copying with distcp"},{"location":"bigdata/hadoop/ch4/","text":"Hadoop: The Definitive Guide 4 - YARN Apache YARN(Yet Another Resource Negotiator) is Hadoop s cluster resource management system. YARN provides APIs for requesting and working with cluster resources, but these APIs are not typically used directly by user code. Distributed computing frameworks (MapReduce, Spark, and so on) running as YARN applications on the cluster compute layer (YARN) and the cluster storage layer (HDFS and HBase). 1 Anatomy of a YARN Application Run YARN provides its core services via two types of long-running daemon: a resource manager (one per cluster) to manage the use of resources across the cluster, node managers running on all the nodes in the cluster to launch and monitor containers . step1 : To run an application on YARN, a client contacts the resource manager and asks it to run an application master process. steps 2a and 2b: The resource manager then finds a node manager that can launch the application master in a container. It could simply run a computation in the container it is running in and return the result to the client. step 3: Or it could request more containers from the resource managers steps 4a and 4b: use them to run a distributed computation. The ApplicationMaster is an instance of a framework-specific library that negotiates resources from the ResourceManager and works with the NodeManager to execute and monitor the granted resources (bundled as containers) for a given application. The ApplicationMaster runs in a container like any other application. Resource Requests A YARN application can make resource requests at any time while it is running. Spark starts a fixed number of executors on the cluster (i.e. make all of requests up front). MapReduce, has two phases: the map task containers are requested up front, but the reduce task containers are not started until later. (i.e. take a more dynamic approach whereby it requests more resources dynamically to meet the changing needs of the application). Application Lifespan The lifespan of a YARN application can vary dramatically. Rather than look at how long the application runs for, it s useful to categorize applications in terms of how they map to the jobs that users run. The simplest case is one application per user job, which is the approach that MapReduce takes. The second model is to run one application per workflow or user session of (possibly unrelated) jobs, which is the approach that Spark takes. This approach can be more efficient than the first, since containers can be reused between jobs, and there is also the potential to cache intermediate data between jobs. The third model is a long-running application that is shared by different users, which is the approach that Apache Slider takes. Building YARN Applications Writing a YARN application from scratch is fairly involved, but in many cases is not necessary, as it is often possible to use an existing application that fits the bill. 2 YARN Compared to MapReduce 1 The distributed implementation of MapReduce in the original version of Hadoop is sometimes referred to as MapReduce 1 to distinguish it from MapReduce 2, the implementation that uses YARN. A comparison of MapReduce 1 and YARN components: MapReduce1 YARN Jobtracker Resource manager, application master, timeline server TaskTracker Node manager Slot Container The Timeline Server addresses the problem of the storage and retrieval of application s current and historic information in a generic fashion. 3 Scheduling in YARN The job of the YARN scheduler to allocate resources to applications according to some defined policy. Scheduling in general is a difficult problem and there is no one \"best\" policy , which is why YARN provides a choice of schedulers and configurable policies. Scheduler Options Three schedulers are available in YARN: the FIFO, Capacity, and Fair Schedulers. The FIFO: places applications in a queue and runs them in the order of submission (first in, first out) Not suitable for shared clusters, because large applications will use all the resources in a cluster, so each application has to wait its turn. Capacity Scheduler: a separate dedicated queue allows the small job to start as soon as it is submitted, since the queue capacity is reserved for jobs in that queue. Fair Scheduler: dynamically balance resources between all running jobs, each job is using its fair share of resources. There is a lag between the time the second job starts and when it receives its fair share, since it has to wait for resources to free up as containers used by the first job complete. After the small job completes and no longer requires resources, the large job goes back to using the full cluster capacity again.","title":"Chapter 4: YARN"},{"location":"bigdata/hadoop/ch4/#hadoop-the-definitive-guide-4-yarn","text":"Apache YARN(Yet Another Resource Negotiator) is Hadoop s cluster resource management system. YARN provides APIs for requesting and working with cluster resources, but these APIs are not typically used directly by user code. Distributed computing frameworks (MapReduce, Spark, and so on) running as YARN applications on the cluster compute layer (YARN) and the cluster storage layer (HDFS and HBase).","title":"Hadoop: The Definitive Guide 4 - YARN"},{"location":"bigdata/hadoop/ch4/#1-anatomy-of-a-yarn-application-run","text":"YARN provides its core services via two types of long-running daemon: a resource manager (one per cluster) to manage the use of resources across the cluster, node managers running on all the nodes in the cluster to launch and monitor containers . step1 : To run an application on YARN, a client contacts the resource manager and asks it to run an application master process. steps 2a and 2b: The resource manager then finds a node manager that can launch the application master in a container. It could simply run a computation in the container it is running in and return the result to the client. step 3: Or it could request more containers from the resource managers steps 4a and 4b: use them to run a distributed computation. The ApplicationMaster is an instance of a framework-specific library that negotiates resources from the ResourceManager and works with the NodeManager to execute and monitor the granted resources (bundled as containers) for a given application. The ApplicationMaster runs in a container like any other application.","title":"1 Anatomy of a YARN Application Run"},{"location":"bigdata/hadoop/ch4/#resource-requests","text":"A YARN application can make resource requests at any time while it is running. Spark starts a fixed number of executors on the cluster (i.e. make all of requests up front). MapReduce, has two phases: the map task containers are requested up front, but the reduce task containers are not started until later. (i.e. take a more dynamic approach whereby it requests more resources dynamically to meet the changing needs of the application).","title":"Resource Requests"},{"location":"bigdata/hadoop/ch4/#application-lifespan","text":"The lifespan of a YARN application can vary dramatically. Rather than look at how long the application runs for, it s useful to categorize applications in terms of how they map to the jobs that users run. The simplest case is one application per user job, which is the approach that MapReduce takes. The second model is to run one application per workflow or user session of (possibly unrelated) jobs, which is the approach that Spark takes. This approach can be more efficient than the first, since containers can be reused between jobs, and there is also the potential to cache intermediate data between jobs. The third model is a long-running application that is shared by different users, which is the approach that Apache Slider takes.","title":"Application Lifespan"},{"location":"bigdata/hadoop/ch4/#building-yarn-applications","text":"Writing a YARN application from scratch is fairly involved, but in many cases is not necessary, as it is often possible to use an existing application that fits the bill.","title":"Building YARN Applications"},{"location":"bigdata/hadoop/ch4/#2-yarn-compared-to-mapreduce-1","text":"The distributed implementation of MapReduce in the original version of Hadoop is sometimes referred to as MapReduce 1 to distinguish it from MapReduce 2, the implementation that uses YARN. A comparison of MapReduce 1 and YARN components: MapReduce1 YARN Jobtracker Resource manager, application master, timeline server TaskTracker Node manager Slot Container The Timeline Server addresses the problem of the storage and retrieval of application s current and historic information in a generic fashion.","title":"2 YARN Compared to MapReduce 1"},{"location":"bigdata/hadoop/ch4/#3-scheduling-in-yarn","text":"The job of the YARN scheduler to allocate resources to applications according to some defined policy. Scheduling in general is a difficult problem and there is no one \"best\" policy , which is why YARN provides a choice of schedulers and configurable policies.","title":"3 Scheduling in YARN"},{"location":"bigdata/hadoop/ch4/#scheduler-options","text":"Three schedulers are available in YARN: the FIFO, Capacity, and Fair Schedulers. The FIFO: places applications in a queue and runs them in the order of submission (first in, first out) Not suitable for shared clusters, because large applications will use all the resources in a cluster, so each application has to wait its turn. Capacity Scheduler: a separate dedicated queue allows the small job to start as soon as it is submitted, since the queue capacity is reserved for jobs in that queue. Fair Scheduler: dynamically balance resources between all running jobs, each job is using its fair share of resources. There is a lag between the time the second job starts and when it receives its fair share, since it has to wait for resources to free up as containers used by the first job complete. After the small job completes and no longer requires resources, the large job goes back to using the full cluster capacity again.","title":"Scheduler Options"},{"location":"bigdata/hadoop/ch5/","text":"Hadoop: The Definitive Guide 5 - Hadoop I/O 1 Data Integrity The usual way of detecting corrupted data is by computing a checksum (\u6821\u9a8c\u548c) for the data when it first enters the system, and again whenever it is transmitted across a channel that is unreliable and hence capable of corrupting the data. A commonly used error-detecting code is CRC-32 (32-bit cyclic redundancy check, \u5faa\u73af\u5197\u4f59\u6821\u9a8c), which computes a 32-bit integer checksum for input of any size. CRC32 is used for checksumming in Hadoop's checksumFileSystem , while HDFS uses a more efficient variant called CRC-32C. Data Integrity in HDFS HDFS transparently checksums all data written to it and by default verifies checksums when reading data. A separate checksum is created for every ChecksumFileSystem.bytesPerChecksum (default 512) bytes of data. Datanodes are responsible for verifying the data they receive before storing the data and its checksum. When clients read data from datanodes, they verify checksums as well. In addition to block verification on client reads, each datanode runs a DataBlockScanner in a background thread that periodically verifies all the blocks stored on the datanode. You can find a file\u2019s checksum with hadoop fs -checksum . LocalFileSystem The Hadoop LocalFileSystem performs client-side checksumming. It is possible to disable checksums, by using RawLocalFileSystem in place of LocalFileSystem . ChecksumFileSystem LocalFileSystem extends ChecksumFileSystem , and ChecksumFileSystem is also a wrapper around FileSystem (uses decorator pattern here). The general idiom is as follows: FileSystem rawFs = ... FileSystem checksummedFs = new ChecksumFileSystem ( rawFs ); 2 Compression File compression brings two major benefits: it reduces the space needed to store files, and it speeds up data transfer across the network or to or from disk. When dealing with large volumes of data, both of these savings can be significant. A summary of compression formats: Compression format Tools Algorithm File Extension CompressionCodec Splittable? DEFLATE N/A DEFLATE .deflate DefaultCodec No gzip gzip DEFLATE .gz GzipCodec No bzip2 bzip2 bzip2 .bz2 BZip2Codec Yes LZO lzop LZO .lzo LzoCodec No Snappy N/A Snappy .snappy SnappyCodec No All compression algorithm exhibit a space/time trade-off. Splittable compression formats are especially suitable for MapReduce. Codecs A codec is the implementation of a compression-decompression algorithm. In Hadoop, a codec is represented by an implementation of the CompressionCodec interface. So, for example, GzipCodec encapsulates the compression and decompression algorithm for gzip. Compressing and decompressing streams with CompressionCodec Interface CompressionCodec has two methods that allow you to easily compress or decompress data. To compress data being written to an output stream, use the createOutputStream(OutputStream out) method to create a CompressionOutputStream Conversely, to decompress data being read from an input stream, call createInputStream(InputStream in) to obtain a CompressionInputStream . The code below illustrates how to use the API to compress data read from standard input and write it to standard output. import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.io.IOUtils ; import org.apache.hadoop.io.compress.CompressionCodec ; import org.apache.hadoop.io.compress.CompressionOutputStream ; import org.apache.hadoop.util.ReflectionUtils ; // vv StreamCompressor public class StreamCompressor { public static void main ( String [] args ) throws Exception { String codecClassname = args [ 0 ]; Class ? codecClass = Class . forName ( codecClassname ); Configuration conf = new Configuration (); CompressionCodec codec = ( CompressionCodec ) ReflectionUtils . newInstance ( codecClass , conf ); CompressionOutputStream out = codec . createOutputStream ( System . out ); IOUtils . copyBytes ( System . in , out , 4096 , false ); out . finish (); } } We can try it out with the following command line, which compresses the string \u201cText\u201d using the StreamCompressor program with the GzipCodec , then decompresses it from standard input using gunzip : export HADOOP_CLASSPATH = /Users/larry/JavaProject/out/artifacts/StreamCompressor/StreamCompressor.jar echo Text | hadoop com.definitivehadoop.compression.StreamCompressor org.apache.hadoop.io.compress.GzipCodec | gunzip Inferring CompressionCodecs using CompressionCodecFactory CompressionCodecFactory provides a way of mapping a filename extension to a CompressionCodec using its getCodec() method, CodecPool . If you are using a native library and you are doing a lot of compression or decompression in your application, consider using CodecPool , which allows you to reuse compressors and decompressors, thereby amortizing the cost of creating these objects. Compression and Input Splits If a compressed file using a format that does not support splitting, say gzip format, MapReduce will not try to split the gzipped file, at the expense of locality: a single map will process all blocks containing the file, most of which will not be local to the map. For an LZO file, in spite of not supporting splitting, it is possible to preprocess LZO files using an indexer tool that comes with the Hadoop LZO libraries. Using Compression in MapReduce In order to compress the output of a MapReduce, job you can use the static convenience methods on FileOutputFormat to set properties. Application to run the maximum temperature job producing compressed output: Maxtemperaturewithcompression public class MaxTemperatureWithCompression { public static void main ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . println ( Usage: MaxTemperatureWithCompression input path + output path ); System . exit (- 1 ); } Job job = Job . getInstance (); job . setJarByClass ( com . definitivehadoop . weatherdata . MaxTemperature . class ); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); job . setOutputKeyClass ( Text . class ); job . setOutputValueClass ( IntWritable . class ); /*[*/ FileOutputFormat . setCompressOutput ( job , true ); FileOutputFormat . setOutputCompressorClass ( job , GzipCodec . class ); /*]*/ job . setMapperClass ( com . definitivehadoop . weatherdata . MaxTemperatureMapper . class ); job . setCombinerClass ( com . definitivehadoop . weatherdata . MaxTemperatureReducer . class ); job . setReducerClass ( com . definitivehadoop . weatherdata . MaxTemperatureReducer . class ); System . exit ( job . waitForCompletion ( true ) ? 0 : 1 ); } } //^^ MaxTemperatureWithCompression Usage $ export HADOOP_CLASSPATH = /Users/larry/JavaProject/out/artifacts/MaxTemperatureWithCompression/MaxTemperatureWithCompression.jar $ hadoop com.definitivehadoop.compression.MaxTemperatureWithCompression /Users/larry/JavaProject/resources/HadoopBook/ncdc/sample.txt output 3 Serialization See concepts of serialization and deserialization in Head First Java Chapter 14 . Serialization is the process of turning structured objects into a byte stream for transmission over a network or for writing to persistent storage. Deserialization is the reverse process of turning a byte stream back into a series of structured objects. Serialization is used in two quite distinct areas of distributed data processing: for interprocess communication and for persistent storage . In Hadoop, interprocess communication between nodes in the system is implemented using remote procedure calls (RPCs). The RPC protocol uses serialization to render the message into a binary stream to be sent to the remote node, which then deserializes the binary stream into the original message. In general, four desirable properties are crucial for an RPC serialization and persistent storage: Properties PRC Serialization Persistent Storage Compact makes the best use of network bandwidth make efficient use of storage space Fast little performance overhead little overhead in reading or writing Extensible meet new requirements transparently read data of older formats Interoperable support clients written in different languages read/write using different languages Hadoop uses its own serialization format, Writables , which is certainly compact and fast, but not so easy to extend or use from languages other than Java. Avro, a serialization system that was designed to overcome some of the limitations of Writables , is covered in Chapter 12 . The Writable Interface The Writable interface defines two methods \u2014 one for writing its state to a DataOutput binary stream and one for reading its state from a DataInput binary stream (note: DataOutput and DataInput are also inferfaces): package org.apache.hadoop.io ; import java.io.DataOutput ; import java.io.DataInput ; import java.io.IOException ; public interface Writable { void write ( DataOutput out ) throws IOException ; void readFields ( DataInput in ) throws IOException ; } Writable Classes Writable wrappers for Java primitives There are Writable wrappers for all the Java primitive types except char (which can be stored in an IntWritable ). All have a get() and set() method for retrieving and storing the wrapped value. When it comes to encoding integers, there is a choice between the fixed-length formats ( IntWritable and LongWritable ) and the variable-length formats ( VIntWritable and VLongWritable ). Fixed-length encodings are good when the distribution of values is fairly uniform across the whole value space, such as when using a (well-designed) hash function. Most numeric variables tend to have nonuniform distributions, though, and on average, the variable-length encoding will save space. Text Text is a Writable for UTF-8 sequences. It can be thought of as the Writable equivalent of java.lang.String . Indexing for the Text class is in terms of position in the encoded byte sequence, not the Unicode character in the string or the Java char code unit (as it is for String ). For ASCII strings, these three concepts of index position coincide. Another difference from String is that Text is mutable. You can reuse a Text instance by calling one of the set() methods on it. Text t = new Text ( hadoop ); t . set ( pig ); Text doesn\u2019t have as rich an API for manipulating java.lang.String , so in many cases, you need to convert the Text object to a String : Text ( hadoop ). toString () Implementing a Custom Writable Tip If you are considering writing a custom Writable , it may be worth trying another serialization framework, like Avro, that allows you to define custom types declaratively. Serialization Frameworks Any type can be used to serialize, because Hadoop has an API for pluggable serialization frameworks, which is represented by an implementation of Serialization . For instance, WritableSerialization , is the implementation of Serialization for Writable types; AvroSerialization , is the implementation of Serialization for Avro types. public class WritableSerialization extends Configured implements Serialization Writable public abstract class AvroSerialization T extends Configured implements Serialization T A Serialization defines a mapping from types to Serializer instances (for turning an object into a byte stream) and Deserializer instances (for turning a byte stream into an object). public interface Serialization T { // Allows clients to test whether this Serialization // supports the given class. boolean accept ( Class ? c ); // @return a {@link Serializer} for the given class. Serializer T getSerializer ( Class T c ); //return a {@link Deserializer} for the given class. Deserializer T getDeserializer ( Class T c ); } Note Although it makes it convenient to be able to use standard Java types such as Integer or String in MapReduce programs, Java Object Serialization is not as efficient as Writables , so it\u2019s not worth making this trade-off. Serialization IDL Apache Thrift and Google Protocol Buffers are both popular serialization frameworks, and both are commonly used as a format for persistent binary data. Avro is an IDL-based serialization framework designed to work well with large-scale data processing in Hadoop. 4 File-Based Data Structures For some applications, you need a specialized data structure to hold your data. For doing MapReduce-based processing, putting each blob of binary data into its own file doesn\u2019t scale, so Hadoop developed a number of higher-level containers for these situations. SequenceFile Hadoop\u2019s SequenceFile provides a persistent data structure for binary key-value pairs. It is suitable for a log file, where each log record is a new line of text. To use it as a logfile format, you would choose a key, such as timestamp represented by a LongWritable , and the value would be a Writable that represents the quantity being logged. Writing a SequenceFile To create a SequenceFile , use one of its createWriter() static methods, which return a SequenceFile.Writer instance. Then write key-value pairs using the append() method. When you\u2019ve finished, you call the close() method. Displaying a SequenceFile with the command-line interface The hadoop fs command has a -text option to display sequence files in textual form. % hadoop fs - text numbers . seq | head The SequenceFile format A sequence file(\u987a\u5e8f\u6587\u4ef6) consists of a header followed by one or more records. The sync marker(\u540c\u6b65\u6807\u8bc6) is used to allow a reader synchronize to a record boundary from any position in the file, which incurs less than a 1% storage overhead. The internal format of the records depends on whether compression is enabled, and if it is, whether it is record compression(\u8bb0\u5f55\u538b\u7f29) or block compression(\u5757\u538b\u7f29). The format for record compression is almost identical to that for no compression, except the value bytes are compressed using the codec defined in the header. Note that keys are not compressed. Block compression compresses multiple records at once; it is therefore more compact than and should generally be preferred over record compression because it has the opportunity to take advantage of similarities between records. A sync marker is written before the start of every block. The format of a block is a field indicating the number of records in the block, followed by four compressed fields: the key lengths, the keys, the value lengths, and the values. MapFile A MapFile is a sorted SequenceFile with an index to permit lookups by key. The index is itself a SequenceFile that contains a fraction of the keys in the map.","title":"Chapter 5: Hadoop I/O"},{"location":"bigdata/hadoop/ch5/#hadoop-the-definitive-guide-5-hadoop-io","text":"","title":"Hadoop: The Definitive Guide 5 - Hadoop I/O"},{"location":"bigdata/hadoop/ch5/#1-data-integrity","text":"The usual way of detecting corrupted data is by computing a checksum (\u6821\u9a8c\u548c) for the data when it first enters the system, and again whenever it is transmitted across a channel that is unreliable and hence capable of corrupting the data. A commonly used error-detecting code is CRC-32 (32-bit cyclic redundancy check, \u5faa\u73af\u5197\u4f59\u6821\u9a8c), which computes a 32-bit integer checksum for input of any size. CRC32 is used for checksumming in Hadoop's checksumFileSystem , while HDFS uses a more efficient variant called CRC-32C.","title":"1 Data Integrity"},{"location":"bigdata/hadoop/ch5/#data-integrity-in-hdfs","text":"HDFS transparently checksums all data written to it and by default verifies checksums when reading data. A separate checksum is created for every ChecksumFileSystem.bytesPerChecksum (default 512) bytes of data. Datanodes are responsible for verifying the data they receive before storing the data and its checksum. When clients read data from datanodes, they verify checksums as well. In addition to block verification on client reads, each datanode runs a DataBlockScanner in a background thread that periodically verifies all the blocks stored on the datanode. You can find a file\u2019s checksum with hadoop fs -checksum .","title":"Data Integrity in HDFS"},{"location":"bigdata/hadoop/ch5/#localfilesystem","text":"The Hadoop LocalFileSystem performs client-side checksumming. It is possible to disable checksums, by using RawLocalFileSystem in place of LocalFileSystem .","title":"LocalFileSystem"},{"location":"bigdata/hadoop/ch5/#checksumfilesystem","text":"LocalFileSystem extends ChecksumFileSystem , and ChecksumFileSystem is also a wrapper around FileSystem (uses decorator pattern here). The general idiom is as follows: FileSystem rawFs = ... FileSystem checksummedFs = new ChecksumFileSystem ( rawFs );","title":"ChecksumFileSystem"},{"location":"bigdata/hadoop/ch5/#2-compression","text":"File compression brings two major benefits: it reduces the space needed to store files, and it speeds up data transfer across the network or to or from disk. When dealing with large volumes of data, both of these savings can be significant. A summary of compression formats: Compression format Tools Algorithm File Extension CompressionCodec Splittable? DEFLATE N/A DEFLATE .deflate DefaultCodec No gzip gzip DEFLATE .gz GzipCodec No bzip2 bzip2 bzip2 .bz2 BZip2Codec Yes LZO lzop LZO .lzo LzoCodec No Snappy N/A Snappy .snappy SnappyCodec No All compression algorithm exhibit a space/time trade-off. Splittable compression formats are especially suitable for MapReduce.","title":"2 Compression"},{"location":"bigdata/hadoop/ch5/#codecs","text":"A codec is the implementation of a compression-decompression algorithm. In Hadoop, a codec is represented by an implementation of the CompressionCodec interface. So, for example, GzipCodec encapsulates the compression and decompression algorithm for gzip. Compressing and decompressing streams with CompressionCodec Interface CompressionCodec has two methods that allow you to easily compress or decompress data. To compress data being written to an output stream, use the createOutputStream(OutputStream out) method to create a CompressionOutputStream Conversely, to decompress data being read from an input stream, call createInputStream(InputStream in) to obtain a CompressionInputStream . The code below illustrates how to use the API to compress data read from standard input and write it to standard output. import org.apache.hadoop.conf.Configuration ; import org.apache.hadoop.io.IOUtils ; import org.apache.hadoop.io.compress.CompressionCodec ; import org.apache.hadoop.io.compress.CompressionOutputStream ; import org.apache.hadoop.util.ReflectionUtils ; // vv StreamCompressor public class StreamCompressor { public static void main ( String [] args ) throws Exception { String codecClassname = args [ 0 ]; Class ? codecClass = Class . forName ( codecClassname ); Configuration conf = new Configuration (); CompressionCodec codec = ( CompressionCodec ) ReflectionUtils . newInstance ( codecClass , conf ); CompressionOutputStream out = codec . createOutputStream ( System . out ); IOUtils . copyBytes ( System . in , out , 4096 , false ); out . finish (); } } We can try it out with the following command line, which compresses the string \u201cText\u201d using the StreamCompressor program with the GzipCodec , then decompresses it from standard input using gunzip : export HADOOP_CLASSPATH = /Users/larry/JavaProject/out/artifacts/StreamCompressor/StreamCompressor.jar echo Text | hadoop com.definitivehadoop.compression.StreamCompressor org.apache.hadoop.io.compress.GzipCodec | gunzip Inferring CompressionCodecs using CompressionCodecFactory CompressionCodecFactory provides a way of mapping a filename extension to a CompressionCodec using its getCodec() method, CodecPool . If you are using a native library and you are doing a lot of compression or decompression in your application, consider using CodecPool , which allows you to reuse compressors and decompressors, thereby amortizing the cost of creating these objects.","title":"Codecs"},{"location":"bigdata/hadoop/ch5/#compression-and-input-splits","text":"If a compressed file using a format that does not support splitting, say gzip format, MapReduce will not try to split the gzipped file, at the expense of locality: a single map will process all blocks containing the file, most of which will not be local to the map. For an LZO file, in spite of not supporting splitting, it is possible to preprocess LZO files using an indexer tool that comes with the Hadoop LZO libraries.","title":"Compression and Input Splits"},{"location":"bigdata/hadoop/ch5/#using-compression-in-mapreduce","text":"In order to compress the output of a MapReduce, job you can use the static convenience methods on FileOutputFormat to set properties. Application to run the maximum temperature job producing compressed output: Maxtemperaturewithcompression public class MaxTemperatureWithCompression { public static void main ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . println ( Usage: MaxTemperatureWithCompression input path + output path ); System . exit (- 1 ); } Job job = Job . getInstance (); job . setJarByClass ( com . definitivehadoop . weatherdata . MaxTemperature . class ); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); job . setOutputKeyClass ( Text . class ); job . setOutputValueClass ( IntWritable . class ); /*[*/ FileOutputFormat . setCompressOutput ( job , true ); FileOutputFormat . setOutputCompressorClass ( job , GzipCodec . class ); /*]*/ job . setMapperClass ( com . definitivehadoop . weatherdata . MaxTemperatureMapper . class ); job . setCombinerClass ( com . definitivehadoop . weatherdata . MaxTemperatureReducer . class ); job . setReducerClass ( com . definitivehadoop . weatherdata . MaxTemperatureReducer . class ); System . exit ( job . waitForCompletion ( true ) ? 0 : 1 ); } } //^^ MaxTemperatureWithCompression Usage $ export HADOOP_CLASSPATH = /Users/larry/JavaProject/out/artifacts/MaxTemperatureWithCompression/MaxTemperatureWithCompression.jar $ hadoop com.definitivehadoop.compression.MaxTemperatureWithCompression /Users/larry/JavaProject/resources/HadoopBook/ncdc/sample.txt output","title":"Using Compression in MapReduce"},{"location":"bigdata/hadoop/ch5/#3-serialization","text":"See concepts of serialization and deserialization in Head First Java Chapter 14 . Serialization is the process of turning structured objects into a byte stream for transmission over a network or for writing to persistent storage. Deserialization is the reverse process of turning a byte stream back into a series of structured objects. Serialization is used in two quite distinct areas of distributed data processing: for interprocess communication and for persistent storage . In Hadoop, interprocess communication between nodes in the system is implemented using remote procedure calls (RPCs). The RPC protocol uses serialization to render the message into a binary stream to be sent to the remote node, which then deserializes the binary stream into the original message. In general, four desirable properties are crucial for an RPC serialization and persistent storage: Properties PRC Serialization Persistent Storage Compact makes the best use of network bandwidth make efficient use of storage space Fast little performance overhead little overhead in reading or writing Extensible meet new requirements transparently read data of older formats Interoperable support clients written in different languages read/write using different languages Hadoop uses its own serialization format, Writables , which is certainly compact and fast, but not so easy to extend or use from languages other than Java. Avro, a serialization system that was designed to overcome some of the limitations of Writables , is covered in Chapter 12 .","title":"3 Serialization"},{"location":"bigdata/hadoop/ch5/#the-writable-interface","text":"The Writable interface defines two methods \u2014 one for writing its state to a DataOutput binary stream and one for reading its state from a DataInput binary stream (note: DataOutput and DataInput are also inferfaces): package org.apache.hadoop.io ; import java.io.DataOutput ; import java.io.DataInput ; import java.io.IOException ; public interface Writable { void write ( DataOutput out ) throws IOException ; void readFields ( DataInput in ) throws IOException ; }","title":"The Writable Interface"},{"location":"bigdata/hadoop/ch5/#writable-classes","text":"Writable wrappers for Java primitives There are Writable wrappers for all the Java primitive types except char (which can be stored in an IntWritable ). All have a get() and set() method for retrieving and storing the wrapped value. When it comes to encoding integers, there is a choice between the fixed-length formats ( IntWritable and LongWritable ) and the variable-length formats ( VIntWritable and VLongWritable ). Fixed-length encodings are good when the distribution of values is fairly uniform across the whole value space, such as when using a (well-designed) hash function. Most numeric variables tend to have nonuniform distributions, though, and on average, the variable-length encoding will save space. Text Text is a Writable for UTF-8 sequences. It can be thought of as the Writable equivalent of java.lang.String . Indexing for the Text class is in terms of position in the encoded byte sequence, not the Unicode character in the string or the Java char code unit (as it is for String ). For ASCII strings, these three concepts of index position coincide. Another difference from String is that Text is mutable. You can reuse a Text instance by calling one of the set() methods on it. Text t = new Text ( hadoop ); t . set ( pig ); Text doesn\u2019t have as rich an API for manipulating java.lang.String , so in many cases, you need to convert the Text object to a String : Text ( hadoop ). toString ()","title":"Writable Classes"},{"location":"bigdata/hadoop/ch5/#implementing-a-custom-writable","text":"Tip If you are considering writing a custom Writable , it may be worth trying another serialization framework, like Avro, that allows you to define custom types declaratively.","title":"Implementing a Custom Writable"},{"location":"bigdata/hadoop/ch5/#serialization-frameworks","text":"Any type can be used to serialize, because Hadoop has an API for pluggable serialization frameworks, which is represented by an implementation of Serialization . For instance, WritableSerialization , is the implementation of Serialization for Writable types; AvroSerialization , is the implementation of Serialization for Avro types. public class WritableSerialization extends Configured implements Serialization Writable public abstract class AvroSerialization T extends Configured implements Serialization T A Serialization defines a mapping from types to Serializer instances (for turning an object into a byte stream) and Deserializer instances (for turning a byte stream into an object). public interface Serialization T { // Allows clients to test whether this Serialization // supports the given class. boolean accept ( Class ? c ); // @return a {@link Serializer} for the given class. Serializer T getSerializer ( Class T c ); //return a {@link Deserializer} for the given class. Deserializer T getDeserializer ( Class T c ); } Note Although it makes it convenient to be able to use standard Java types such as Integer or String in MapReduce programs, Java Object Serialization is not as efficient as Writables , so it\u2019s not worth making this trade-off. Serialization IDL Apache Thrift and Google Protocol Buffers are both popular serialization frameworks, and both are commonly used as a format for persistent binary data. Avro is an IDL-based serialization framework designed to work well with large-scale data processing in Hadoop.","title":"Serialization Frameworks"},{"location":"bigdata/hadoop/ch5/#4-file-based-data-structures","text":"For some applications, you need a specialized data structure to hold your data. For doing MapReduce-based processing, putting each blob of binary data into its own file doesn\u2019t scale, so Hadoop developed a number of higher-level containers for these situations.","title":"4 File-Based Data Structures"},{"location":"bigdata/hadoop/ch5/#sequencefile","text":"Hadoop\u2019s SequenceFile provides a persistent data structure for binary key-value pairs. It is suitable for a log file, where each log record is a new line of text. To use it as a logfile format, you would choose a key, such as timestamp represented by a LongWritable , and the value would be a Writable that represents the quantity being logged. Writing a SequenceFile To create a SequenceFile , use one of its createWriter() static methods, which return a SequenceFile.Writer instance. Then write key-value pairs using the append() method. When you\u2019ve finished, you call the close() method. Displaying a SequenceFile with the command-line interface The hadoop fs command has a -text option to display sequence files in textual form. % hadoop fs - text numbers . seq | head The SequenceFile format A sequence file(\u987a\u5e8f\u6587\u4ef6) consists of a header followed by one or more records. The sync marker(\u540c\u6b65\u6807\u8bc6) is used to allow a reader synchronize to a record boundary from any position in the file, which incurs less than a 1% storage overhead. The internal format of the records depends on whether compression is enabled, and if it is, whether it is record compression(\u8bb0\u5f55\u538b\u7f29) or block compression(\u5757\u538b\u7f29). The format for record compression is almost identical to that for no compression, except the value bytes are compressed using the codec defined in the header. Note that keys are not compressed. Block compression compresses multiple records at once; it is therefore more compact than and should generally be preferred over record compression because it has the opportunity to take advantage of similarities between records. A sync marker is written before the start of every block. The format of a block is a field indicating the number of records in the block, followed by four compressed fields: the key lengths, the keys, the value lengths, and the values.","title":"SequenceFile"},{"location":"bigdata/hadoop/ch5/#mapfile","text":"A MapFile is a sorted SequenceFile with an index to permit lookups by key. The index is itself a SequenceFile that contains a fraction of the keys in the map.","title":"MapFile"},{"location":"bigdata/hadoop/ch6/","text":"Hadoop: The Definitive Guide 6 - Developing a MapReduce Application 1 The Configuration API Components in Hadoop are configured using Hadoop\u2019s own configuration API. An instance of the org.apache.hadoop.conf.Configuration represents a collection of configuration properties and their values. Configuration s read their properties from XML files, which have a simple structure for defining name-value pairs. Note XML(E x tensible M arkup L anguage, \u53ef\u6269\u5c55\u6807\u8bb0\u8bed\u8a00), is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. Combining Resources When more than one resource is used to define a Configuration , properties added later override the earlier definitions. However, properties that are marked as final cannot be overridden in later definitions. Java Configuration conf = new Configuration (); conf . addResource ( configuration-1.xml ); conf . addResource ( configuration-2.xml ); assertThat ( conf . getInt ( size , 0 ), is ( 12 )); assertThat ( conf . get ( weight ), is ( heavy )); Configuration-1.xml ?xml version= 1.0 ? configuration property name color /name value yellow /value description Color /description /property property name size /name value 10 /value description Size /description /property property name weight /name value heavy /value final true /final description Weight /description /property property name size-weight /name value ${size},${weight} /value description Size and weight /description /property /configuration Configuration-2.xml ?xml version= 1.0 ? configuration property name size /name value 12 /value /property property name weight /name value light /value /property /configuration Variable Expansion Configuration properties can be defined in terms of other properties, or system properties. For example, the property size-weight in configuration-1.xml file is defined as $text {size}$, ${ weight } $ . 2 Setting Up the Development Environment The first step is to create a project so you can build MapReduce programs and run them in local (standalone) mode from the command line or within your IDE. Using the Maven POM to manage your project is an easy way to start. Specifically, for building MapReduce jobs, you only need to have the hadoop-client dependency, which contains all the Hadoop client-side classes needed to interact with HDFS and MapReduce. For running unit tests, use junit , and for writing MapReduce tests, use mrunit . The hadoop-minicluster library contains the \u201cmini-\u201d clusters that are useful for testing with Hadoop clusters running in a single JVM. Managing Configuration When developing Hadoop applications, it is common to switch between running the application locally and running it on a cluster. One way to accommodate these variations is to have different versions of Hadoop configuration files and use them with the -conf command-line switch. For example, the following command shows a directory listing on the HDFS server running in pseudodistributed mode on localhost: $ hadoop fs -conf conf/hadoop-localhost.xml -ls Another way of managing configuration settings is to copy the etc/hadoop directory from your Hadoop installation to another location, place the *-site.xml configuration files there (with appropriate settings), and set the HADOOP_CONF_DIR environment variable to the alternative location. The main advantage of this approach is that you don\u2019t need to specify -conf for every command. GenericOptionsParser, Tool, and ToolRunner It\u2019s more convenient to implement the Tool interface and run your application with the ToolRunner . ToolRunner uses GenericOptionsParser internally, which interprets common Hadoop command-line options and sets them on a Configuration object for your application to use as desired. // A tool interface that supports handling of generic command-line options. public interface Tool extends Configurable { int run ( String [] args ) throws Exception ; } Detailed examples, are \"Application to find the maximum temperature\"[ code ], \"MapReduce program to find the maximum temperature, creating Avro output\"[ code ]. 3 Writing a Unit Test with MRUnit MRUnit is a testing library that makes it easy to pass known inputs to a mapper or a reducer and check that the outputs are as expected. However, MRUnit is DEPRECATED !!! 4 Running Locally on Test Data Running a Job in a Local Job Runner Using the Tool interface, it\u2019s easy to write a driver to run our MapReduce job for finding the maximum temperature by year. public class MaxTemperatureDriver extends Configured implements Tool { @Override public int run ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . printf ( Usage: %s [generic options] input output \\n , getClass (). getSimpleName ()); ToolRunner . printGenericCommandUsage ( System . err ); return - 1 ; } Job job = new Job ( getConf (), Max temperature ); job . setJarByClass ( getClass ()); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); job . setMapperClass ( MaxTemperatureMapper . class ); job . setCombinerClass ( MaxTemperatureReducer . class ); job . setReducerClass ( MaxTemperatureReducer . class ); job . setOutputKeyClass ( Text . class ); job . setOutputValueClass ( IntWritable . class ); return job . waitForCompletion ( true ) ? 0 : 1 ; } public static void main ( String [] args ) throws Exception { int exitCode = ToolRunner . run ( new MaxTemperatureDriver (), args ); System . exit ( exitCode ); } } From the command line, we can run the driver by typing: Testing the Driver 5 Running on a Cluster 6 Tuning a Job 7 MapReduce Workflows","title":"Chapter 6: Developing a MapReduce Application"},{"location":"bigdata/hadoop/ch6/#hadoop-the-definitive-guide-6-developing-a-mapreduce-application","text":"","title":"Hadoop: The Definitive Guide 6 - Developing a MapReduce Application"},{"location":"bigdata/hadoop/ch6/#1-the-configuration-api","text":"Components in Hadoop are configured using Hadoop\u2019s own configuration API. An instance of the org.apache.hadoop.conf.Configuration represents a collection of configuration properties and their values. Configuration s read their properties from XML files, which have a simple structure for defining name-value pairs. Note XML(E x tensible M arkup L anguage, \u53ef\u6269\u5c55\u6807\u8bb0\u8bed\u8a00), is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable.","title":"1 The Configuration API"},{"location":"bigdata/hadoop/ch6/#combining-resources","text":"When more than one resource is used to define a Configuration , properties added later override the earlier definitions. However, properties that are marked as final cannot be overridden in later definitions. Java Configuration conf = new Configuration (); conf . addResource ( configuration-1.xml ); conf . addResource ( configuration-2.xml ); assertThat ( conf . getInt ( size , 0 ), is ( 12 )); assertThat ( conf . get ( weight ), is ( heavy )); Configuration-1.xml ?xml version= 1.0 ? configuration property name color /name value yellow /value description Color /description /property property name size /name value 10 /value description Size /description /property property name weight /name value heavy /value final true /final description Weight /description /property property name size-weight /name value ${size},${weight} /value description Size and weight /description /property /configuration Configuration-2.xml ?xml version= 1.0 ? configuration property name size /name value 12 /value /property property name weight /name value light /value /property /configuration","title":"Combining Resources"},{"location":"bigdata/hadoop/ch6/#variable-expansion","text":"Configuration properties can be defined in terms of other properties, or system properties. For example, the property size-weight in configuration-1.xml file is defined as $text {size}$, ${ weight } $ .","title":"Variable Expansion"},{"location":"bigdata/hadoop/ch6/#2-setting-up-the-development-environment","text":"The first step is to create a project so you can build MapReduce programs and run them in local (standalone) mode from the command line or within your IDE. Using the Maven POM to manage your project is an easy way to start. Specifically, for building MapReduce jobs, you only need to have the hadoop-client dependency, which contains all the Hadoop client-side classes needed to interact with HDFS and MapReduce. For running unit tests, use junit , and for writing MapReduce tests, use mrunit . The hadoop-minicluster library contains the \u201cmini-\u201d clusters that are useful for testing with Hadoop clusters running in a single JVM.","title":"2 Setting Up the Development Environment"},{"location":"bigdata/hadoop/ch6/#managing-configuration","text":"When developing Hadoop applications, it is common to switch between running the application locally and running it on a cluster. One way to accommodate these variations is to have different versions of Hadoop configuration files and use them with the -conf command-line switch. For example, the following command shows a directory listing on the HDFS server running in pseudodistributed mode on localhost: $ hadoop fs -conf conf/hadoop-localhost.xml -ls Another way of managing configuration settings is to copy the etc/hadoop directory from your Hadoop installation to another location, place the *-site.xml configuration files there (with appropriate settings), and set the HADOOP_CONF_DIR environment variable to the alternative location. The main advantage of this approach is that you don\u2019t need to specify -conf for every command.","title":"Managing Configuration"},{"location":"bigdata/hadoop/ch6/#genericoptionsparser-tool-and-toolrunner","text":"It\u2019s more convenient to implement the Tool interface and run your application with the ToolRunner . ToolRunner uses GenericOptionsParser internally, which interprets common Hadoop command-line options and sets them on a Configuration object for your application to use as desired. // A tool interface that supports handling of generic command-line options. public interface Tool extends Configurable { int run ( String [] args ) throws Exception ; } Detailed examples, are \"Application to find the maximum temperature\"[ code ], \"MapReduce program to find the maximum temperature, creating Avro output\"[ code ].","title":"GenericOptionsParser, Tool, and ToolRunner"},{"location":"bigdata/hadoop/ch6/#3-writing-a-unit-test-with-mrunit","text":"MRUnit is a testing library that makes it easy to pass known inputs to a mapper or a reducer and check that the outputs are as expected. However, MRUnit is DEPRECATED !!!","title":"3 Writing a Unit Test with MRUnit"},{"location":"bigdata/hadoop/ch6/#4-running-locally-on-test-data","text":"","title":"4 Running Locally on Test Data"},{"location":"bigdata/hadoop/ch6/#running-a-job-in-a-local-job-runner","text":"Using the Tool interface, it\u2019s easy to write a driver to run our MapReduce job for finding the maximum temperature by year. public class MaxTemperatureDriver extends Configured implements Tool { @Override public int run ( String [] args ) throws Exception { if ( args . length != 2 ) { System . err . printf ( Usage: %s [generic options] input output \\n , getClass (). getSimpleName ()); ToolRunner . printGenericCommandUsage ( System . err ); return - 1 ; } Job job = new Job ( getConf (), Max temperature ); job . setJarByClass ( getClass ()); FileInputFormat . addInputPath ( job , new Path ( args [ 0 ])); FileOutputFormat . setOutputPath ( job , new Path ( args [ 1 ])); job . setMapperClass ( MaxTemperatureMapper . class ); job . setCombinerClass ( MaxTemperatureReducer . class ); job . setReducerClass ( MaxTemperatureReducer . class ); job . setOutputKeyClass ( Text . class ); job . setOutputValueClass ( IntWritable . class ); return job . waitForCompletion ( true ) ? 0 : 1 ; } public static void main ( String [] args ) throws Exception { int exitCode = ToolRunner . run ( new MaxTemperatureDriver (), args ); System . exit ( exitCode ); } } From the command line, we can run the driver by typing:","title":"Running a Job in a Local Job Runner"},{"location":"bigdata/hadoop/ch6/#testing-the-driver","text":"","title":"Testing the Driver"},{"location":"bigdata/hadoop/ch6/#5-running-on-a-cluster","text":"","title":"5 Running on a Cluster"},{"location":"bigdata/hadoop/ch6/#6-tuning-a-job","text":"","title":"6 Tuning a Job"},{"location":"bigdata/hadoop/ch6/#7-mapreduce-workflows","text":"","title":"7 MapReduce Workflows"},{"location":"bigdata/hadoop/ch7/","text":"Hadoop: The Definitive Guide 7 - How MapReduce Works 1 Anatomy of a MapReduce Job Run Job Submission Job Initialization Task Assignment Task Execution Progress and Status Updates Job Completion 2 Failures 3 Shuffle and Sort MapReduce makes the guarantee that the input to every reducer is sorted by key . The process by which the system performs the sort \u2014 and transfers the map outputs to the reducers as inputs \u2014 is known as the shuffle . In many ways, the shuffle is the heart of MapReduce and is where the \u201cmagic\u201d happens. The Map Side Each map task has a circular memory buffer that it writes the output to. When the contents of the buffer reach a certain threshold size, a background thread will start to spill the contents to disk. Before it writes to disk, the thread first divides the data into partitions corresponding to the reducers that they will ultimately be sent to. Within each partition, the background thread performs an in-memory sort by key, and if there is a combiner function, it is run on the output of the sort. Before the task is finished, the spill files are merged into a single partitioned and sorted output file. It is often a good idea to compress the map output as it is written to disk, because doing so makes it faster to write to disk, saves disk space, and reduces the amount of data to transfer to the reducer. The Reduce Side the copy phase of the reduce task: The map tasks may finish at different times, so the reduce task starts copying their outputs as soon as each completes. Map outputs are copied to the reduce task JVM\u2019s memory if they are small enough; otherwise, they are copied to disk. As the copies accumulate on disk, a background thread merges them into larger, sorted files. This saves some time merging later on. When all the map outputs have been copied, the reduce task moves into the sort phase (which should properly be called the merge phase , as the sorting was carried out on the map side), which merges the map outputs, maintaining their sort ordering. This is done in rounds.(Figure below) For the last merge, directly feeding the reduce function in what is the last phase: the reduce phase. The output of the last phase is written directly to the output filesystem, typically HDFS. Configuration Tuning 4 Task Execution","title":"Chapter 7: How MapReduce Works"},{"location":"bigdata/hadoop/ch7/#hadoop-the-definitive-guide-7-how-mapreduce-works","text":"","title":"Hadoop: The Definitive Guide 7 - How MapReduce Works"},{"location":"bigdata/hadoop/ch7/#1-anatomy-of-a-mapreduce-job-run","text":"","title":"1 Anatomy of a MapReduce Job Run"},{"location":"bigdata/hadoop/ch7/#job-submission","text":"","title":"Job Submission"},{"location":"bigdata/hadoop/ch7/#job-initialization","text":"","title":"Job Initialization"},{"location":"bigdata/hadoop/ch7/#task-assignment","text":"","title":"Task Assignment"},{"location":"bigdata/hadoop/ch7/#task-execution","text":"","title":"Task Execution"},{"location":"bigdata/hadoop/ch7/#progress-and-status-updates","text":"","title":"Progress and Status Updates"},{"location":"bigdata/hadoop/ch7/#job-completion","text":"","title":"Job Completion"},{"location":"bigdata/hadoop/ch7/#2-failures","text":"","title":"2 Failures"},{"location":"bigdata/hadoop/ch7/#3-shuffle-and-sort","text":"MapReduce makes the guarantee that the input to every reducer is sorted by key . The process by which the system performs the sort \u2014 and transfers the map outputs to the reducers as inputs \u2014 is known as the shuffle . In many ways, the shuffle is the heart of MapReduce and is where the \u201cmagic\u201d happens.","title":"3 Shuffle and Sort"},{"location":"bigdata/hadoop/ch7/#the-map-side","text":"Each map task has a circular memory buffer that it writes the output to. When the contents of the buffer reach a certain threshold size, a background thread will start to spill the contents to disk. Before it writes to disk, the thread first divides the data into partitions corresponding to the reducers that they will ultimately be sent to. Within each partition, the background thread performs an in-memory sort by key, and if there is a combiner function, it is run on the output of the sort. Before the task is finished, the spill files are merged into a single partitioned and sorted output file. It is often a good idea to compress the map output as it is written to disk, because doing so makes it faster to write to disk, saves disk space, and reduces the amount of data to transfer to the reducer.","title":"The Map Side"},{"location":"bigdata/hadoop/ch7/#the-reduce-side","text":"the copy phase of the reduce task: The map tasks may finish at different times, so the reduce task starts copying their outputs as soon as each completes. Map outputs are copied to the reduce task JVM\u2019s memory if they are small enough; otherwise, they are copied to disk. As the copies accumulate on disk, a background thread merges them into larger, sorted files. This saves some time merging later on. When all the map outputs have been copied, the reduce task moves into the sort phase (which should properly be called the merge phase , as the sorting was carried out on the map side), which merges the map outputs, maintaining their sort ordering. This is done in rounds.(Figure below) For the last merge, directly feeding the reduce function in what is the last phase: the reduce phase. The output of the last phase is written directly to the output filesystem, typically HDFS.","title":"The Reduce Side"},{"location":"bigdata/hadoop/ch7/#configuration-tuning","text":"","title":"Configuration Tuning"},{"location":"bigdata/hadoop/ch7/#4-task-execution","text":"","title":"4 Task Execution"},{"location":"bigdata/hadoop/ch8/","text":"Hadoop: The Definitive Guide 8 - MapReduce Types and Formats","title":"Chapter 8: MapReduce Types and Formats"},{"location":"bigdata/hadoop/ch8/#hadoop-the-definitive-guide-8-mapreduce-types-and-formats","text":"","title":"Hadoop: The Definitive Guide 8 - MapReduce Types and Formats"},{"location":"bigdata/hadoop/ch9/","text":"Hadoop: The Definitive Guide 9 - MapReduce Features","title":"Chapter 9: MapReduce Features"},{"location":"bigdata/hadoop/ch9/#hadoop-the-definitive-guide-9-mapreduce-features","text":"","title":"Hadoop: The Definitive Guide 9 - MapReduce Features"},{"location":"bigdata/mlia/","text":"MLIA Chapter 1: \u673a\u5668\u5b66\u4e60\u57fa\u7840 Chapter 2: k-\u8fd1\u90bb\u7b97\u6cd5 Chapter 3: \u51b3\u7b56\u6811 Chapter 4: \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af Chapter 5: Logistic\u56de\u5f52 Chapter 6: \u652f\u6301\u5411\u91cf\u673a Chapter 7: \u5229\u7528AdaBoost\u5143\u7b97\u6cd5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd Chapter 8: \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52 Chapter 9: \u6811\u56de\u5f52 Chapter 10: \u5229\u7528\uff2b-\u5747\u503c\u805a\u7c7b\u7b97\u6cd5\u5bf9\u672a\u6807\u6ce8\u6570\u636e\u5206\u7ec4 Chapter 11: \u4f7f\u7528Apriori\u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790 Chapter 12: \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6 Chapter 13: \u5229\u7528PCA\u6765\u7b80\u5316\u6570\u636e","title":"Contents"},{"location":"bigdata/mlia/#mlia","text":"Chapter 1: \u673a\u5668\u5b66\u4e60\u57fa\u7840 Chapter 2: k-\u8fd1\u90bb\u7b97\u6cd5 Chapter 3: \u51b3\u7b56\u6811 Chapter 4: \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af Chapter 5: Logistic\u56de\u5f52 Chapter 6: \u652f\u6301\u5411\u91cf\u673a Chapter 7: \u5229\u7528AdaBoost\u5143\u7b97\u6cd5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd Chapter 8: \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52 Chapter 9: \u6811\u56de\u5f52 Chapter 10: \u5229\u7528\uff2b-\u5747\u503c\u805a\u7c7b\u7b97\u6cd5\u5bf9\u672a\u6807\u6ce8\u6570\u636e\u5206\u7ec4 Chapter 11: \u4f7f\u7528Apriori\u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790 Chapter 12: \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6 Chapter 13: \u5229\u7528PCA\u6765\u7b80\u5316\u6570\u636e","title":"MLIA"},{"location":"bigdata/mlia/ch1/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 1 - \u673a\u5668\u5b66\u4e60\u57fa\u7840","title":"Chapter 1: \u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"bigdata/mlia/ch1/#1-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 1 - \u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"bigdata/mlia/ch10/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 10 - \u5229\u7528\uff2b-\u5747\u503c\u805a\u7c7b\u7b97\u6cd5\u5bf9\u672a\u6807\u6ce8\u6570\u636e\u5206\u7ec4","title":"Chapter 10: \u5229\u7528\uff2b-\u5747\u503c\u805a\u7c7b\u7b97\u6cd5\u5bf9\u672a\u6807\u6ce8\u6570\u636e\u5206\u7ec4"},{"location":"bigdata/mlia/ch10/#10-k-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 10 - \u5229\u7528\uff2b-\u5747\u503c\u805a\u7c7b\u7b97\u6cd5\u5bf9\u672a\u6807\u6ce8\u6570\u636e\u5206\u7ec4"},{"location":"bigdata/mlia/ch11/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 11 - \u4f7f\u7528Apriori\u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790","title":"Chapter 12: \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6"},{"location":"bigdata/mlia/ch11/#11-apriori","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 11 - \u4f7f\u7528Apriori\u7b97\u6cd5\u8fdb\u884c\u5173\u8054\u5206\u6790"},{"location":"bigdata/mlia/ch12/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 12 - \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6","title":"Ch12"},{"location":"bigdata/mlia/ch12/#12-fp-growth","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 12 - \u4f7f\u7528FP-growth\u7b97\u6cd5\u6765\u9ad8\u6548\u53d1\u73b0\u9891\u7e41\u9879\u96c6"},{"location":"bigdata/mlia/ch13/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 13 - \u5229\u7528PCA\u6765\u7b80\u5316\u6570\u636e","title":"Chapter 13: \u5229\u7528PCA\u6765\u7b80\u5316\u6570\u636e"},{"location":"bigdata/mlia/ch13/#13-pca","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 13 - \u5229\u7528PCA\u6765\u7b80\u5316\u6570\u636e"},{"location":"bigdata/mlia/ch14/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 1 - \u673a\u5668\u5b66\u4e60\u57fa\u7840","title":"Ch14"},{"location":"bigdata/mlia/ch14/#1-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 1 - \u673a\u5668\u5b66\u4e60\u57fa\u7840"},{"location":"bigdata/mlia/ch2/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 1 - k-\u8fd1\u90bb\u7b97\u6cd5","title":"Chapter 2: k-\u8fd1\u90bb\u7b97\u6cd5"},{"location":"bigdata/mlia/ch2/#1-k-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 1 - k-\u8fd1\u90bb\u7b97\u6cd5"},{"location":"bigdata/mlia/ch3/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 3 - \u51b3\u7b56\u6811","title":"Chapter 3: \u51b3\u7b56\u6811"},{"location":"bigdata/mlia/ch3/#3-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 3 - \u51b3\u7b56\u6811"},{"location":"bigdata/mlia/ch4/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 4 - \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af","title":"Chapter 4: \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"bigdata/mlia/ch4/#4-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 4 - \u57fa\u4e8e\u6982\u7387\u8bba\u7684\u5206\u7c7b\u65b9\u6cd5\uff1a\u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"bigdata/mlia/ch5/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 5 - Logistic\u56de\u5f52","title":"Chapter 5: Logistic\u56de\u5f52"},{"location":"bigdata/mlia/ch5/#5-logistic","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 5 - Logistic\u56de\u5f52"},{"location":"bigdata/mlia/ch6/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 6 - \u652f\u6301\u5411\u91cf\u673a","title":"Chapter 6: \u652f\u6301\u5411\u91cf\u673a"},{"location":"bigdata/mlia/ch6/#6-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 6 - \u652f\u6301\u5411\u91cf\u673a"},{"location":"bigdata/mlia/ch7/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 7 - \u5229\u7528AdaBoost\u5143\u7b97\u6cd5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd","title":"Chapter 7: \u5229\u7528AdaBoost\u5143\u7b97\u6cd5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd"},{"location":"bigdata/mlia/ch7/#7-adaboost","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 7 - \u5229\u7528AdaBoost\u5143\u7b97\u6cd5\u63d0\u9ad8\u5206\u7c7b\u6027\u80fd"},{"location":"bigdata/mlia/ch8/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 8 - \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52","title":"Chapter 8: \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52"},{"location":"bigdata/mlia/ch8/#8-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 8 - \u9884\u6d4b\u6570\u503c\u578b\u6570\u636e\uff1a\u56de\u5f52"},{"location":"bigdata/mlia/ch9/","text":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 9 - \u6811\u56de\u5f52","title":"Chapter 9: \u6811\u56de\u5f52"},{"location":"bigdata/mlia/ch9/#9-","text":"","title":"\u673a\u5668\u5b66\u4e60\u5b9e\u6218 9 - \u6811\u56de\u5f52"},{"location":"bigdata/prob/","text":"PROB Chapter 1: \u6837\u672c\u7a7a\u95f4\u548c\u6982\u7387","title":"Home"},{"location":"bigdata/prob/#prob","text":"Chapter 1: \u6837\u672c\u7a7a\u95f4\u548c\u6982\u7387","title":"PROB"},{"location":"bigdata/prob/ch1/","text":"\u6982\u7387\u5bfc\u8bba 1 - \u6837\u672c\u7a7a\u95f4\u548c\u6982\u7387 1 \u96c6\u5408 \u5c06\u4e00\u4e9b\u7814\u7a76\u5bf9\u8c61\u653e\u5728\u4e00\u8d77\uff0c\u5f62\u6210 \u96c6\u5408 \uff0c\u800c\u8fd9\u4e9b\u5bf9\u8c61\u5c31\u79f0\u4e3a\u96c6\u5408\u7684 \u5143\u7d20 \u3002\u8bbe S S \u662f\u4e00\u4e2a\u96c6\u5408\uff0c x x \u662f S S \u7684\u5143\u7d20\uff0c\u6211\u4eec\u5c06\u5143\u7d20\u548c\u96c6\u5408\u7684\u8fd9\u79cd\u5173\u7cfb\u5199\u6210 x\\in S x\\in S \u3002\u82e5 x x \u4e0d\u662f S S \u7684\u5143\u7d20\uff0c\u5c31\u5199\u6210 x \\notin S x \\notin S . \u4e00\u4e2a\u96c6\u5408\u53ef\u4ee5\u6ca1\u6709\u5143\u7d20\uff0c\u8fd9\u4e2a\u7279\u6b8a\u7684\u96c6\u5408\u5c31\u79f0\u4e3a \u7a7a\u96c6 \u3002 \u5c06\u6211\u4eec\u611f\u5174\u8da3\u7684\u6240\u6709\u5143\u7d20\u653e\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u8fd9\u4e2a\u96c6\u5408\u79f0\u4e3a \u7a7a\u95f4 \uff0c\u8bb0\u505a \\Omega \\Omega \u3002\u5f53 \\Omega \\Omega \u786e\u5b9a\u4ee5\u540e\uff0c\u6211\u4eec\u6240\u8ba8\u8bba\u7684\u96c6\u5408 S S \u90fd\u662f \\Omega \\Omega \u7684\u5b50\u96c6\u3002 2 \u6982\u7387\u6a21\u578b \u6982\u7387\u6a21\u578b\u662f\u5bf9\u4e0d\u786e\u5b9a\u73b0\u8c61\u7684\u6570\u5b66\u63cf\u8ff0\u3002\u6982\u7387\u6a21\u578b\u7684\u57fa\u672c\u6784\u6210\uff1a \u6837\u672c\u7a7a\u95f4 \\Omega \\Omega \uff0c\u8fd9\u662f\u4e00\u4e2a\u8bd5\u9a8c\u7684\u6240\u6709\u53ef\u80fd\u7ed3\u679c\u7684\u96c6\u5408\u3002 \u6982\u7387\u5f8b \uff0c\u6982\u7387\u5f8b\u4e3a\u8bd5\u9a8c\u7ed3\u679c\u7684\u96c6\u5408A\uff08\u79f0\u4e4b\u4e3a \u4e8b\u4ef6 \uff09\u786e\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6570 P(A) P(A) \uff08\u79f0\u4e3a\u4e8b\u4ef6A\u7684 \u6982\u7387 )\u3002 \u6982\u7387\u5f8b \u6982\u7387\u5f8b\u786e\u5b9a\u4e86\u4efb\u4f55\u7ed3\u679c\u6216\u8005\u4efb\u4f55\u7ed3\u679c\u7684\u96c6\u5408(\u79f0\u4e4b\u4e3a\u4e8b\u4ef6)\u7684\u4f3c\u7136\u7a0b\u5ea6\u3002\u66f4\u7cbe\u786e\u4e00\u70b9\u8bf4\uff0c\u5b83\u7ed9\u6bcf\u4e00\u4e2a\u4e8b\u4ef6 A A \uff0c\u786e\u5b9a\u4e00\u4e2a\u6570 P(A) P(A) \uff0c\u79f0\u4e4b\u4e3a\u4e8b\u4ef6 A A \u7684\u6982\u7387\u3002 \u6982\u7387\u516c\u7406(Probability axioms): \u975e\u8d1f\u6027: \u5bf9\u4e00\u5207\u4e8b\u4ef6 A A \uff0c\u6ee1\u8db3 P(A)\\ge 0 P(A)\\ge 0 \u53ef\u52a0\u6027\uff1a \u82e5 A A \u548c B B \u4e3a\u4e92\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6\uff0c\u5219\u5b83\u4eec\u7684\u5e76\u6ee1\u8db3 P(A \\cup B) = P(A)+P(B) P(A \\cup B) = P(A)+P(B) \u5f52\u4e00\u5316\uff1a\u6574\u4e2a\u6837\u672c\u7a7a\u95f4 \\Omega \\Omega \u7684\u6982\u7387\u4e3a1\uff0c\u5373 P(\\Omega)=1 P(\\Omega)=1 \u79bb\u6563\u6a21\u578b \u79bb\u6563\u6982\u7387\u5f8b \uff1a\u8bbe\u6837\u672c\u7a7a\u95f4\u7531\u6709\u9650\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c\u7ec4\u6210\uff0c\u5219\u4e8b\u4ef6\u7684\u6982\u7387\u53ef\u7531\u7ec4\u6210\u8fd9\u4e2a\u4e8b\u4ef6\u7684\u8bd5\u9a8c\u7ed3\u679c\u7684\u6982\u7387\u6240\u51b3\u5b9a\u3002\u4e8b\u4ef6 \\{s_1, s_2,...,s_n\\} \\{s_1, s_2,...,s_n\\} \u7684\u6982\u7387\u662f P(s_i) P(s_i) \u4e4b\u548c\uff0c\u5373 P(\\{s_1,s_2,...,s_n\\}) = P(s_1)+P(s_1)P(s_2)+P(s_n) P(\\{s_1,s_2,...,s_n\\}) = P(s_1)+P(s_1)P(s_2)+P(s_n) \u79bb\u6563\u5747\u5300\u6982\u7387\u5f8b(\u53e4\u5178\u6982\u578b) \uff1a\u8bbe\u6837\u672c\u7a7a\u95f4\u7531 n n \u4e2a\u7b49\u53ef\u80fd\u6027\u7684\u8bd5\u9a8c\u7ed3\u679c\u7ec4\u6210\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u7ec4\u6210\u7684\u4e8b\u4ef6(\u79f0\u4e3a\u57fa\u672c\u4e8b\u4ef6)\u7684\u6982\u7387\u662f\u76f8\u7b49\u7684\u3002\u7531\u6b64\u5f97\u5230 P(A) = \\frac{\\text{\u542b\u4e8e\u4e8b\u4ef6A\u7684\u8bd5\u9a8c\u7ed3\u679c\u6570}}{n} P(A) = \\frac{\\text{\u542b\u4e8e\u4e8b\u4ef6A\u7684\u8bd5\u9a8c\u7ed3\u679c\u6570}}{n} 3 \u6761\u4ef6\u6982\u7387 \u7ed9\u5b9a B B \u53d1\u751f\u4e4b\u4e0b\u4e8b\u4ef6 A A \u7684\u6761\u4ef6\u6982\u7387\uff0c\u8bb0\u505a P(A|B) P(A|B) , P(A|B) = \\frac{P(A\\cap B)}{P(B)} P(A|B) = \\frac{P(A\\cap B)}{P(B)} \u6761\u4ef6\u6982\u7387\u6ee1\u8db3\u6982\u7387\u76843\u6761\u516c\u7406 \u975e\u8d1f\u6027\u548c\u5f52\u4e00\u5316\u662f\u660e\u663e\u7684 \u53ef\u52a0\u6027\uff1a P(A_1\\cup A_2|B) = P(A_1|B) + P(A_2|B) P(A_1\\cup A_2|B) = P(A_1|B) + P(A_2|B) 4 \u5168\u6982\u7387\u5b9a\u7406\u548c\u8d1d\u53f6\u65af\u51c6\u5219 \u5168\u6982\u7387\u5b9a\u7406 \uff1a\u8bbe A_1, A_2,..., A_n A_1, A_2,..., A_n \u662f\u4e00\u7ec4\u4e92\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6\uff0c\u5b83\u5f62\u6210\u6837\u672c\u7a7a\u95f4\u7684\u4e00\u4e2a\u5206\u5272(\u6bcf\u4e00\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u5fc5\u5b9a\u4f7f\u5f97\u5176\u4e2d\u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f!). \u53c8\u5047\u5b9a\u5bf9\u6bcf\u4e00\u4e2a i, P(A_i) 0 i, P(A_i)>0 . \u5219\u5bf9\u4e8e\u4efb\u4f55\u4e8b\u4ef6 B B \uff0c\u4e0b\u5217\u516c\u5f0f\u6210\u7acb\uff1a $$P(B) = P(A_1\\cap B) + ...+ P(A_n\\cap B) = P(A_1)P(B|A_1) + ...+ P(A_n)P(B|A_n)=\\sum P(B|A_i)P(A_i) $$ \u8d1d\u53f6\u65af\u51c6\u5219 \uff1a\u8bbe A_1, A_2,..., A_n A_1, A_2,..., A_n \u662f\u4e00\u7ec4\u4e92\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6\uff0c\u5b83\u5f62\u6210\u6837\u672c\u7a7a\u95f4\u7684\u4e00\u4e2a\u5206\u5272(\u6bcf\u4e00\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u5fc5\u5b9a\u4f7f\u5f97\u5176\u4e2d\u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f!). \u53c8\u5047\u5b9a\u5bf9\u6bcf\u4e00\u4e2a i, P(A_i) 0 i, P(A_i)>0 . \u5219\u5bf9\u4e8e\u4efb\u4f55\u4e8b\u4ef6 B B \uff0c\u53ea\u8981\u5b83\u6ee1\u8db3 P(B) 0 P(B)>0 \uff0c\u4e0b\u5217\u516c\u5f0f\u6210\u7acb\uff1a P(A_i|B) = \\frac{P(A_i)P(B|A_i)}{P(B)} =\\frac{P(A_i)P(B|A_i)}{\\sum P(A_i)P(B|A_i)} P(A_i|B) = \\frac{P(A_i)P(B|A_i)}{P(B)} =\\frac{P(A_i)P(B|A_i)}{\\sum P(A_i)P(B|A_i)} \u4e3a\u8bc1\u660e\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u53ea\u9700\u6ce8\u610f\u5230 P(A_i)P(B|A_i) P(A_i)P(B|A_i) \u4e0e P(A_i|B)P(B) P(A_i|B)P(B) \u662f\u76f8\u7b49\u7684\uff0c\u5b83\u4eec\u90fd\u7b49\u4e8e P(A_i\\cap B) P(A_i\\cap B) \u3002 P(A_i|B) P(A_i|B) \u4e3a\u7531\u4e8e\u4ee3\u8868\u65b0\u8fd1\u5f97\u5230\u7684\u4fe1\u606f B B \u4e4b\u540e A_i A_i \u51fa\u73b0\u7684\u6982\u7387\uff0c\u79f0\u4e4b\u4e3a \u540e\u9a8c\u6982\u7387 \uff0c\u800c\u539f\u6765\u7684 P(A_i) P(A_i) \u5c31\u79f0\u4e3a \u5148\u9a8c\u6982\u7387 \u3002 5 \u72ec\u7acb\u6027 \u5982\u679c P(A|B)=P(A) P(A|B)=P(A) \uff0c\u5219\u79f0\u4e8b\u4ef6 A A \u72ec\u7acb \u4e8e\u4e8b\u4ef6 B B \u3002\u5373\u4e8b\u4ef6 B B \u7684\u53d1\u751f\u5e76\u6ca1\u6709\u7ed9\u4e8b\u4ef6 A A \u5e26\u6765\u65b0\u7684\u4fe1\u606f\uff0c\u6ca1\u6709\u6539\u53d8\u4e8b\u4ef6 A A \u53d1\u751f\u7684\u6982\u7387\u3002 \u6761\u4ef6\u72ec\u7acb\uff1a\u7279\u522b\u5730\uff0c\u5728\u7ed9\u5b9a C C \u4e4b\u4e0b\uff0c\u82e5\u4e8b\u4ef6 A A \u548c\u4e8b\u4ef6 B B \u6ee1\u8db3 P(A\\cap B|C) = P(A|C)P(B|C) P(A\\cap B|C) = P(A|C)P(B|C) \uff0c\u5219\u79f0 A A \u548c B B \u5728\u7ed9\u5b9a C C \u4e4b\u4e0b \u6761\u4ef6\u72ec\u7acb \u3002","title":"Ch1"},{"location":"bigdata/prob/ch1/#1-","text":"","title":"\u6982\u7387\u5bfc\u8bba 1 - \u6837\u672c\u7a7a\u95f4\u548c\u6982\u7387"},{"location":"bigdata/prob/ch1/#1","text":"\u5c06\u4e00\u4e9b\u7814\u7a76\u5bf9\u8c61\u653e\u5728\u4e00\u8d77\uff0c\u5f62\u6210 \u96c6\u5408 \uff0c\u800c\u8fd9\u4e9b\u5bf9\u8c61\u5c31\u79f0\u4e3a\u96c6\u5408\u7684 \u5143\u7d20 \u3002\u8bbe S S \u662f\u4e00\u4e2a\u96c6\u5408\uff0c x x \u662f S S \u7684\u5143\u7d20\uff0c\u6211\u4eec\u5c06\u5143\u7d20\u548c\u96c6\u5408\u7684\u8fd9\u79cd\u5173\u7cfb\u5199\u6210 x\\in S x\\in S \u3002\u82e5 x x \u4e0d\u662f S S \u7684\u5143\u7d20\uff0c\u5c31\u5199\u6210 x \\notin S x \\notin S . \u4e00\u4e2a\u96c6\u5408\u53ef\u4ee5\u6ca1\u6709\u5143\u7d20\uff0c\u8fd9\u4e2a\u7279\u6b8a\u7684\u96c6\u5408\u5c31\u79f0\u4e3a \u7a7a\u96c6 \u3002 \u5c06\u6211\u4eec\u611f\u5174\u8da3\u7684\u6240\u6709\u5143\u7d20\u653e\u5728\u4e00\u8d77\uff0c\u5f62\u6210\u4e00\u4e2a\u96c6\u5408\uff0c\u8fd9\u4e2a\u96c6\u5408\u79f0\u4e3a \u7a7a\u95f4 \uff0c\u8bb0\u505a \\Omega \\Omega \u3002\u5f53 \\Omega \\Omega \u786e\u5b9a\u4ee5\u540e\uff0c\u6211\u4eec\u6240\u8ba8\u8bba\u7684\u96c6\u5408 S S \u90fd\u662f \\Omega \\Omega \u7684\u5b50\u96c6\u3002","title":"1 \u96c6\u5408"},{"location":"bigdata/prob/ch1/#2","text":"\u6982\u7387\u6a21\u578b\u662f\u5bf9\u4e0d\u786e\u5b9a\u73b0\u8c61\u7684\u6570\u5b66\u63cf\u8ff0\u3002\u6982\u7387\u6a21\u578b\u7684\u57fa\u672c\u6784\u6210\uff1a \u6837\u672c\u7a7a\u95f4 \\Omega \\Omega \uff0c\u8fd9\u662f\u4e00\u4e2a\u8bd5\u9a8c\u7684\u6240\u6709\u53ef\u80fd\u7ed3\u679c\u7684\u96c6\u5408\u3002 \u6982\u7387\u5f8b \uff0c\u6982\u7387\u5f8b\u4e3a\u8bd5\u9a8c\u7ed3\u679c\u7684\u96c6\u5408A\uff08\u79f0\u4e4b\u4e3a \u4e8b\u4ef6 \uff09\u786e\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6570 P(A) P(A) \uff08\u79f0\u4e3a\u4e8b\u4ef6A\u7684 \u6982\u7387 )\u3002","title":"2 \u6982\u7387\u6a21\u578b"},{"location":"bigdata/prob/ch1/#_1","text":"\u6982\u7387\u5f8b\u786e\u5b9a\u4e86\u4efb\u4f55\u7ed3\u679c\u6216\u8005\u4efb\u4f55\u7ed3\u679c\u7684\u96c6\u5408(\u79f0\u4e4b\u4e3a\u4e8b\u4ef6)\u7684\u4f3c\u7136\u7a0b\u5ea6\u3002\u66f4\u7cbe\u786e\u4e00\u70b9\u8bf4\uff0c\u5b83\u7ed9\u6bcf\u4e00\u4e2a\u4e8b\u4ef6 A A \uff0c\u786e\u5b9a\u4e00\u4e2a\u6570 P(A) P(A) \uff0c\u79f0\u4e4b\u4e3a\u4e8b\u4ef6 A A \u7684\u6982\u7387\u3002 \u6982\u7387\u516c\u7406(Probability axioms): \u975e\u8d1f\u6027: \u5bf9\u4e00\u5207\u4e8b\u4ef6 A A \uff0c\u6ee1\u8db3 P(A)\\ge 0 P(A)\\ge 0 \u53ef\u52a0\u6027\uff1a \u82e5 A A \u548c B B \u4e3a\u4e92\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6\uff0c\u5219\u5b83\u4eec\u7684\u5e76\u6ee1\u8db3 P(A \\cup B) = P(A)+P(B) P(A \\cup B) = P(A)+P(B) \u5f52\u4e00\u5316\uff1a\u6574\u4e2a\u6837\u672c\u7a7a\u95f4 \\Omega \\Omega \u7684\u6982\u7387\u4e3a1\uff0c\u5373 P(\\Omega)=1 P(\\Omega)=1","title":"\u6982\u7387\u5f8b"},{"location":"bigdata/prob/ch1/#_2","text":"\u79bb\u6563\u6982\u7387\u5f8b \uff1a\u8bbe\u6837\u672c\u7a7a\u95f4\u7531\u6709\u9650\u4e2a\u53ef\u80fd\u7684\u7ed3\u679c\u7ec4\u6210\uff0c\u5219\u4e8b\u4ef6\u7684\u6982\u7387\u53ef\u7531\u7ec4\u6210\u8fd9\u4e2a\u4e8b\u4ef6\u7684\u8bd5\u9a8c\u7ed3\u679c\u7684\u6982\u7387\u6240\u51b3\u5b9a\u3002\u4e8b\u4ef6 \\{s_1, s_2,...,s_n\\} \\{s_1, s_2,...,s_n\\} \u7684\u6982\u7387\u662f P(s_i) P(s_i) \u4e4b\u548c\uff0c\u5373 P(\\{s_1,s_2,...,s_n\\}) = P(s_1)+P(s_1)P(s_2)+P(s_n) P(\\{s_1,s_2,...,s_n\\}) = P(s_1)+P(s_1)P(s_2)+P(s_n) \u79bb\u6563\u5747\u5300\u6982\u7387\u5f8b(\u53e4\u5178\u6982\u578b) \uff1a\u8bbe\u6837\u672c\u7a7a\u95f4\u7531 n n \u4e2a\u7b49\u53ef\u80fd\u6027\u7684\u8bd5\u9a8c\u7ed3\u679c\u7ec4\u6210\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u7ec4\u6210\u7684\u4e8b\u4ef6(\u79f0\u4e3a\u57fa\u672c\u4e8b\u4ef6)\u7684\u6982\u7387\u662f\u76f8\u7b49\u7684\u3002\u7531\u6b64\u5f97\u5230 P(A) = \\frac{\\text{\u542b\u4e8e\u4e8b\u4ef6A\u7684\u8bd5\u9a8c\u7ed3\u679c\u6570}}{n} P(A) = \\frac{\\text{\u542b\u4e8e\u4e8b\u4ef6A\u7684\u8bd5\u9a8c\u7ed3\u679c\u6570}}{n}","title":"\u79bb\u6563\u6a21\u578b"},{"location":"bigdata/prob/ch1/#3","text":"\u7ed9\u5b9a B B \u53d1\u751f\u4e4b\u4e0b\u4e8b\u4ef6 A A \u7684\u6761\u4ef6\u6982\u7387\uff0c\u8bb0\u505a P(A|B) P(A|B) , P(A|B) = \\frac{P(A\\cap B)}{P(B)} P(A|B) = \\frac{P(A\\cap B)}{P(B)} \u6761\u4ef6\u6982\u7387\u6ee1\u8db3\u6982\u7387\u76843\u6761\u516c\u7406 \u975e\u8d1f\u6027\u548c\u5f52\u4e00\u5316\u662f\u660e\u663e\u7684 \u53ef\u52a0\u6027\uff1a P(A_1\\cup A_2|B) = P(A_1|B) + P(A_2|B) P(A_1\\cup A_2|B) = P(A_1|B) + P(A_2|B)","title":"3  \u6761\u4ef6\u6982\u7387"},{"location":"bigdata/prob/ch1/#4","text":"\u5168\u6982\u7387\u5b9a\u7406 \uff1a\u8bbe A_1, A_2,..., A_n A_1, A_2,..., A_n \u662f\u4e00\u7ec4\u4e92\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6\uff0c\u5b83\u5f62\u6210\u6837\u672c\u7a7a\u95f4\u7684\u4e00\u4e2a\u5206\u5272(\u6bcf\u4e00\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u5fc5\u5b9a\u4f7f\u5f97\u5176\u4e2d\u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f!). \u53c8\u5047\u5b9a\u5bf9\u6bcf\u4e00\u4e2a i, P(A_i) 0 i, P(A_i)>0 . \u5219\u5bf9\u4e8e\u4efb\u4f55\u4e8b\u4ef6 B B \uff0c\u4e0b\u5217\u516c\u5f0f\u6210\u7acb\uff1a $$P(B) = P(A_1\\cap B) + ...+ P(A_n\\cap B) = P(A_1)P(B|A_1) + ...+ P(A_n)P(B|A_n)=\\sum P(B|A_i)P(A_i) $$ \u8d1d\u53f6\u65af\u51c6\u5219 \uff1a\u8bbe A_1, A_2,..., A_n A_1, A_2,..., A_n \u662f\u4e00\u7ec4\u4e92\u4e0d\u76f8\u5bb9\u7684\u4e8b\u4ef6\uff0c\u5b83\u5f62\u6210\u6837\u672c\u7a7a\u95f4\u7684\u4e00\u4e2a\u5206\u5272(\u6bcf\u4e00\u4e2a\u8bd5\u9a8c\u7ed3\u679c\u5fc5\u5b9a\u4f7f\u5f97\u5176\u4e2d\u4e00\u4e2a\u4e8b\u4ef6\u53d1\u751f!). \u53c8\u5047\u5b9a\u5bf9\u6bcf\u4e00\u4e2a i, P(A_i) 0 i, P(A_i)>0 . \u5219\u5bf9\u4e8e\u4efb\u4f55\u4e8b\u4ef6 B B \uff0c\u53ea\u8981\u5b83\u6ee1\u8db3 P(B) 0 P(B)>0 \uff0c\u4e0b\u5217\u516c\u5f0f\u6210\u7acb\uff1a P(A_i|B) = \\frac{P(A_i)P(B|A_i)}{P(B)} =\\frac{P(A_i)P(B|A_i)}{\\sum P(A_i)P(B|A_i)} P(A_i|B) = \\frac{P(A_i)P(B|A_i)}{P(B)} =\\frac{P(A_i)P(B|A_i)}{\\sum P(A_i)P(B|A_i)} \u4e3a\u8bc1\u660e\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u53ea\u9700\u6ce8\u610f\u5230 P(A_i)P(B|A_i) P(A_i)P(B|A_i) \u4e0e P(A_i|B)P(B) P(A_i|B)P(B) \u662f\u76f8\u7b49\u7684\uff0c\u5b83\u4eec\u90fd\u7b49\u4e8e P(A_i\\cap B) P(A_i\\cap B) \u3002 P(A_i|B) P(A_i|B) \u4e3a\u7531\u4e8e\u4ee3\u8868\u65b0\u8fd1\u5f97\u5230\u7684\u4fe1\u606f B B \u4e4b\u540e A_i A_i \u51fa\u73b0\u7684\u6982\u7387\uff0c\u79f0\u4e4b\u4e3a \u540e\u9a8c\u6982\u7387 \uff0c\u800c\u539f\u6765\u7684 P(A_i) P(A_i) \u5c31\u79f0\u4e3a \u5148\u9a8c\u6982\u7387 \u3002","title":"4 \u5168\u6982\u7387\u5b9a\u7406\u548c\u8d1d\u53f6\u65af\u51c6\u5219"},{"location":"bigdata/prob/ch1/#5","text":"\u5982\u679c P(A|B)=P(A) P(A|B)=P(A) \uff0c\u5219\u79f0\u4e8b\u4ef6 A A \u72ec\u7acb \u4e8e\u4e8b\u4ef6 B B \u3002\u5373\u4e8b\u4ef6 B B \u7684\u53d1\u751f\u5e76\u6ca1\u6709\u7ed9\u4e8b\u4ef6 A A \u5e26\u6765\u65b0\u7684\u4fe1\u606f\uff0c\u6ca1\u6709\u6539\u53d8\u4e8b\u4ef6 A A \u53d1\u751f\u7684\u6982\u7387\u3002 \u6761\u4ef6\u72ec\u7acb\uff1a\u7279\u522b\u5730\uff0c\u5728\u7ed9\u5b9a C C \u4e4b\u4e0b\uff0c\u82e5\u4e8b\u4ef6 A A \u548c\u4e8b\u4ef6 B B \u6ee1\u8db3 P(A\\cap B|C) = P(A|C)P(B|C) P(A\\cap B|C) = P(A|C)P(B|C) \uff0c\u5219\u79f0 A A \u548c B B \u5728\u7ed9\u5b9a C C \u4e4b\u4e0b \u6761\u4ef6\u72ec\u7acb \u3002","title":"5 \u72ec\u7acb\u6027"},{"location":"bigdata/projects/","text":"Projects SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406","title":"Contents"},{"location":"bigdata/projects/#projects","text":"SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406","title":"Projects"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/","text":"Spark Streaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee \u8be5\u9879\u76ee\u4ece\u5b9e\u65f6\u6570\u636e\u4ea7\u751f\u548c\u6d41\u5411\u7684\u4e0d\u540c\u73af\u8282\u51fa\u53d1\uff0c\u901a\u8fc7\u96c6\u6210\u4e3b\u6d41\u7684\u5206\u5e03\u5f0f\u65e5\u5fd7\u6536\u96c6\u6846\u67b6Flume\u3001\u5206\u5e03\u5f0f\u6d88\u606f\u961f\u5217Kafka\u3001\u5206\u5e03\u5f0f\u5217\u5f0f\u6570\u636e\u5e93HBase\u3001\u4ee5\u53caSpark Streaming\u5b9e\u73b0\u5b9e\u65f6\u6d41\u5904\u7406\u3002 1 \u521d\u8bc6\u5b9e\u65f6\u6d41\u5904\u7406 \u4e1a\u52a1\u73b0\u72b6\u5206\u6790 \u9700\u6c42\uff1a\u7edf\u8ba1\u4e3b\u7ad9\u6bcf\u4e2a\uff08\u6307\u5b9a\uff09\u8bfe\u7a0b\u8bbf\u95ee\u7684\u5ba2\u6237\u7aef\u3001\u5730\u57df\u4fe1\u606f\u5206\u5e03 == \u5982\u4e0a\u4e24\u4e2a\u64cd\u4f5c\uff1a\u91c7\u7528\u79bb\u7ebf\uff08spark/mapreduce\uff09\u7684\u65b9\u5f0f\u8fdb\u884c\u7edf\u8ba1 \u5b9e\u73b0\u6b65\u9aa4\uff1a \u8bfe\u7a0b\u7f16\u53f7\uff0cip\u4fe1\u606f\uff0cuser-agent \u8fdb\u884c\u76f8\u5e94\u7684\u7edf\u8ba1\u5206\u6790\u64cd\u4f5c\uff1aMapReduce/Spark \u9879\u76ee\u67b6\u6784\uff1a \u65e5\u5fd7\u6536\u96c6\uff1aFlume \u79bb\u7ebf\u5206\u6790\uff1aMapReduce/Spark \u7edf\u8ba1\u7ed3\u679c\u56fe\u5f62\u5316\u5c55\u793a \u95ee\u9898\uff1a \u5c0f\u65f6\u7ea7\u522b 10\u5206\u949f \u79d2\u7ea7\u522b \u5b9e\u65f6\u6d41\u5904\u7406\u4ea7\u751f\u80cc\u666f \u65f6\u6548\u6027\u9ad8 \u6570\u636e\u91cf\u5927 \u5b9e\u65f6\u6d41\u5904\u7406\u6982\u8ff0 https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101 \u5b9e\u65f6\u8ba1\u7b97 apache storm \u6d41\u5f0f\u8ba1\u7b97 \u5b9e\u65f6\u6d41\u5f0f\u8ba1\u7b97 \u79bb\u7ebf\u8ba1\u7b97\u4e0e\u5b9e\u65f6\u8ba1\u7b97\u5bf9\u6bd4 \u6570\u636e\u6765\u6e90 \u79bb\u7ebf\uff1a\u6765\u81eaHDFS\u4e0a\u7684\u5386\u53f2\u6570\u636e\uff0c\u6570\u636e\u91cf\u6bd4\u8f83\u5927 \u5b9e\u65f6\uff1a\u6765\u81ea\u6d88\u606f\u961f\u5217(Kafka)\uff0c\u662f\u5b9e\u65f6\u65b0\u589e/\u4fee\u6539\u8bb0\u5f55\u8fc7\u6765\u7684\u67d0\u4e00\u7b14\u6570\u636e \u5904\u7406\u8fc7\u7a0b \u79bb\u7ebf\uff1aMapReduce, map + reduce \u5b9e\u65f6: Spark(DStream/SS) \u5904\u7406\u901f\u5ea6 \u79bb\u7ebf\uff1a\u5e54 \u5b9e\u65f6\uff1a\u5feb\u901f \u8fdb\u7a0b \u79bb\u7ebf\uff1a\u8fdb\u7a0b\u6709\u542f\u52a8+\u9500\u6bc1\u7684\u8fc7\u7a0b \u5b9e\u65f6\uff1a 7*24\u5c0f\u65f6\u8fd0\u884c \u5b9e\u65f6\u6d41\u5904\u7406\u6846\u67b6\u5bf9\u6bd4 Apache Storm Apache Storm is a free and open source distributed realtime computation system. Storm makes it easy to reliably process unbounded streams of data, doing for realtime processing what Hadoop did for batch processing. Storm is simple, can be used with any programming language, and is a lot of fun to use! Apache Spark Streaming \u5b9e\u9645\u4e0a\u662f\u5fae\u6279\u5904\u7406\uff08\u6279\u5904\u7406\u95f4\u9694\u975e\u5e38\u5c0f) Apache kafka Apache Flink Apache Flink is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale. \u5b9e\u65f6\u6d41\u5904\u7406\u67b6\u6784\u548c\u6280\u672f\u9009\u578b \u52a0\u4e00\u5c42flume\u6d88\u606f\u961f\u5217\uff0c\u4e3b\u8981\u4e3a\u4e86\u51cf\u8f7b\u538b\u529b\uff0c\u8d77\u5230\u7f13\u51b2\u4f5c\u7528 \u5b9e\u65f6\u6d41\u5904\u7406\u5728\u4f01\u4e1a\u4e2d\u7684\u5e94\u7528 \u7535\u4fe1\u884c\u4e1a\uff1a \u4f60\u7684\u624b\u673a\u5957\u9910\u6d41\u91cf\u7528\u5b8c\uff0c\u6536\u5230\u77ed\u4fe1\u63d0\u793a \u7535\u5546\u884c\u4e1a\uff1a\u641c\u7d22\u5546\u54c1\u65f6\uff0c\u8fdb\u884c\u63a8\u8350 2 \u5206\u5e03\u5f0f\u65e5\u5fd7\u6536\u96c6\u6846\u67b6Flume see detail in Hadoop: definitive Guide, Chapter 14 \u4e1a\u52a1\u73b0\u72b6\u5206\u6790 You have a lot of servers and systems network devices operating system web servers applications And they generate large amount of logs and other data. Problem: Since you have a business idea, how to implement the idea? OPTION: You may move logs and data generated to hadoop hdfs directly. \u4f46\u662f\u5b58\u5728\u95ee\u9898\uff1a \u5982\u4f55\u505a\u76d1\u63a7 \u5982\u4f55\u4fdd\u8bc1\u65f6\u6548\u6027 \u76f4\u63a5\u4f20\u9001\u6587\u672c\u6570\u636e\uff0c\u5f00\u9500\u592a\u5927 \u5bb9\u9519 \u8d1f\u8f7d\u5747\u8861 SOLUTION: \u4f7f\u7528Flume\uff0c\u57fa\u672c\u4e0a\u5199\u914d\u7f6e\u6587\u4ef6\u5c31OK\u4e86\uff0cFlume\u81ea\u52a8\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\u3002 Flume\u6982\u8ff0 Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data . It has a simple and flexible architecture based on streaming data flows. It is robust and fault tolerant with tunable reliability mechanisms and many failover and recovery mechanisms. It uses a simple extensible data model that allows for online analytic application. [ Apache Flume ] Flume\u67b6\u6784\u53ca\u6838\u5fc3\u7ec4\u4ef6 see detail in Hadoop: definitive Guide, Chapter 14 Flume\u5b9e\u6218 \u9700\u6c42\uff1a \u4ece\u6307\u5b9a\u7f51\u7edc\u7aef\u53e3\u91c7\u96c6\u6570\u636e \u4f7f\u7528Flume\u7684\u5173\u952e\u5c31\u662f\u5199\u914d\u7f6e\u6587\u4ef6 \u914d\u7f6eSource, Channel, Sink \u628a\u4ee5\u4e0a\u4e09\u4e2a\u7ec4\u4ef6\u4e32\u8d77\u6765 http://flume.apache.org/FlumeUserGuide.html#example-2 # example.conf: A single-node Flume configuration # Name the components on this agent a1.sources = r1 a1.sinks = k1 a1.channels = c1 # Describe/configure the source a1.sources.r1.type = netcat a1.sources.r1.bind = localhost a1.sources.r1.port = 44444 # Describe the sink a1.sinks.k1.type = logger # Use a channel which buffers events in memory a1.channels.c1.type = memory a1.channels.c1.capacity = 1000 a1.channels.c1.transactionCapacity = 100 # Bind the source and sink to the channel a1.sources.r1.channels = c1 a1.sinks.k1.channel = c1 netcat source : A netcat-like source that listens on a given port and turns each line of text into an event. It opens a specified port and listens for data. The expectation is that the supplied data is newline separated text. Each line of text is turned into a Flume event and sent via the connected channel. [ NetCat TCP Source ] logger sink : Logs event at INFO level. Typically useful for testing/debugging purpose. [ Logger Sink ] memory channel : The events are stored in an in-memory queue with configurable max size. It\u2019s ideal for flows that need higher throughput and are prepared to lose the staged data in the event of an agent failures. [ memory channel ] ## \u542f\u52a8flume $ flume-ng agent \\ --name a1 \\ # agent name --conf $F LUME_HOME/conf \\ # use configs in conf directory --conf-file example.conf \\ # specify a config file -Dflume.root.logger = INFO,console # sets a Java system property value ## \u5728\u53e6\u5916\u4e00\u4e2aterminal\u7528telnet\u6a21\u62df\u6570\u636e\u6e90 $ telnet localhost 44444 Trying 127.0.0.1... Connected to localhost. Escape character is ^] . hello OK hellomy OK \u9700\u6c42\uff1a \u76d1\u63a7\u4e00\u4e2a\u6587\u4ef6\u5b9e\u65f6\u91c7\u96c6\u65b0\u589e\u7684\u6570\u636e\u8f93\u51fa\u5230\u63a7\u5236\u53f0 Agent\u9009\u578b\uff1a exec source + memory channel + logger sink # filename: exec-memeory-logger.conf # Name the components on this agent a1.sources = r1 a1.sinks = k1 a1.channels = c1 # Describe/configure the source a1.sources.r1.type = exec a1.sources.r1.command = tail -F /tmp/data.log # Describe the sink a1.sinks.k1.type = logger # Use a channel which buffers events in memory a1.channels.c1.type = memory a1.channels.c1.capacity = 1000 a1.channels.c1.transactionCapacity = 100 # Bind the source and sink to the channel a1.sources.r1.channels = c1 a1.sinks.k1.channel = c1 exec source runs a given Unix command on start-up and expects that process to continuously produce data on standard out (stderr is simply discarded, unless property logStdErr is set to true). If the process exits for any reason, the source also exits and will produce no further data. This means configurations such as cat [named pipe] or tail -F [file] are going to produce the desired results where as date will probably not - the former two commands produce streams of data where as the latter produces a single event and exits. [ exec source ] \u5c06\u5185\u5bb9\u8f93\u5165\u5230 /tmp/data.log \u6587\u4ef6\u4e2d\uff1a $ echo hello data.log $ echo hello data.log \u9700\u6c42\uff1a \u5c06A\u670d\u52a1\u5668\u4e0a\u7684\u65e5\u5fd7\u5b9e\u65f6\u91c7\u96c6\u5230B\u670d\u52a1\u5668 \u65e5\u5fd7\u6536\u96c6\u8fc7\u7a0b\uff1a \u673a\u56681\u4e0a\u76d1\u63a7\u4e00\u4e2a\u6587\u4ef6\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee\u4e3b\u7ad9\u65f6\u4f1a\u6709\u7528\u6237\u884c\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u5230 access.log \u4e2d\u3002 avro sink\u628a\u65b0\u4ea7\u751f\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u5bf9\u5e94\u7684avro source\u6307\u5b9a\u7684hostname\u548cport\u4e0a\u3002 \u901a\u8fc7avro\u5bf9\u5e94\u7684agent\u5c06\u6211\u4eec\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 avro sink : forms one half of Flume\u2019s tiered collection support. Flume events sent to this sink are turned into Avro events and sent to the configured hostname / port pair. [ Avro sink ] Exec-Memeory-Avro.conf # filename: exec-memeory-avro.conf # Name the components on this agent a1.sources = exec-source a1.sinks = avro-sink a1.channels = memory-channel # Describe/configure the source a1.sources.exec-source.type = exec a1.sources.exec-source.command = tail -F /tmp/data.log # Describe the sink a1.sinks.avro-sink.type = avro a1.sinks.avro-sink.hostname = localhost a1.sinks.avro-sink.port = 44444 # Use a channel which buffers events in memory a1.channels.memory-channel.type = memory a1.channels.memory-channel.capacity = 1000 a1.channels.memory-channel.transactionCapacity = 100 # Bind the source and sink to the channel a1.sources.exec-source.channels = memory-channel a1.sinks.avro-sink.channel = memory-channel Avro-Memeory-Logger.conf # filename: avro-memeory-logger.conf # Name the components on this agent a2.sources = avro-source a2.sinks = logger-sink a2.channels = memory-channel # Describe/configure the source a2.sources.avro-source.type = avro a2.sources.avro-source.bind = localhost a2.sources.avro-source.port = 44444 # Describe the sink a2.sinks.logger-sink.type = logger # Use a channel which buffers events in memory a2.channels.memory-channel.type = memory a2.channels.memory-channel.capacity = 1000 a2.channels.memory-channel.transactionCapacity = 100 # Bind the source and sink to the channel a2.sources.avro-source.channels = memory-channel a2.sinks.logger-sink.channel = memory-channel \u542f\u52a8flume\uff0c \u6ce8\u610f\u4e24\u4e2aagent\u7684\u542f\u52a8\u987a\u5e8f $ flume-ng agent \\ --name a2 \\ --conf $F LUME-HOME/conf \\ --conf-file avro-memory-logger.conf \\ -Dflume.root.logger = INFO,console $ flume-ng agent \\ --name a1 \\ --conf $F LUME-HOME/conf \\ --conf-file exec-memory-avro.conf \\ -Dflume.root.logger = INFO,console \u5c06\u5185\u5bb9\u8f93\u5165\u5230 /tmp/data.log \u6587\u4ef6\u4e2d\uff1a $ echo welcome data.log $ echo welcome data.log 3 \u5206\u5e03\u5f0f\u6d88\u606f\u961f\u5217Kafka First a few concepts: Kafka is run as a cluster on one or more servers that can span multiple datacenters. The Kafka cluster stores streams of records in categories called topic s. Each record consists of a key, a value, and a timestamp. Broker s are the Kafka processes that manage topics and partitions and serve producer and consumer request. Kafka\u90e8\u7f72\u53ca\u4f7f\u7528 \u5355\u8282\u70b9\u5355Broker\u90e8\u7f72\u53ca\u4f7f\u7528 # \u542f\u52a8Zookeeper $ zkServer.sh start # \u542f\u52a8kafka $ kafka-server-start.sh $KAFKA_HOME/config/server.properties # \u521b\u5efa\u540d\u4e3atest\u7684topic(single partition and only one replica) $ kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test # \u67e5\u770btopic $ kafka-topics.sh --list --zookeeper localhost:2181 ### \u542f\u52a8\u751f\u4ea7\u8005, 9092\u662fserver\u76d1\u542c\u7aef\u53e3 $ kafka-console-producer.sh --broker-list localhost:9092 --topic test This is a message This is another message ### \u542f\u52a8\u6d88\u8d39\u8005 --from-beginning\u4ece\u5934\u5f00\u59cb\u63a5\u6536\u6d88\u606f $ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning This is a message This is another message ### \u67e5\u770b\u6240\u6709topics\u7684\u8be6\u7ec6\u4fe1\u606f $ kafka-topics.sh --describe --zookeeper localhost:2181 ### \u67e5\u770b\u6307\u5b9atopic\u7684\u8be6\u7ec6\u4fe1\u606f $ kafka-topics.sh --describe --zookeeper localhost:2181 --topic test \u5355\u8282\u70b9\u591aBroker\u90e8\u7f72\u53ca\u4f7f\u7528 cp $KAFKA_HOME/config/server.properties $KAFKA_HOME/config/server-1.properties cp $KAFKA_HOME/config/server.properties $KAFKA_HOME/config/server-2.properties \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b config/server-1.properties: broker.id=1 listeners=PLAINTEXT://:9093 log.dirs=/tmp/kafka-logs-1 config/server-2.properties: broker.id=2 listeners=PLAINTEXT://:9094 log.dirs=/tmp/kafka-logs-2 \u542f\u52a8kafka # \u542f\u52a8ZooKeeper $ zkServer.sh start # \u542f\u52a8kafka server $ kafka-server-start.sh $KAFKA_HOME/config/server.properties $ kafka-server-start.sh $KAFKA_HOME/config/server-1.properties $ kafka-server-start.sh $KAFKA_HOME/config/server-2.properties # \u521b\u5efatopic, 1\u4e2a\u5206\u533a\uff0c\u4e09\u4e2a\u526f\u672c $ kafka-topics.sh --create --zookeeper localhost:2181 \\ --replication-factor 3 --partitions 1 --topic my-replicated-topic # \u67e5\u770btopic\u4fe1\u606f $ kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-replicated-topic Topic:my-replicated-topic PartitionCount:1 ReplicationFactor:3 Configs: Topic: my-replicated-topic Partition: 0 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1 # \u542f\u52a8\u751f\u4ea7\u8005 $ kafka-console-producer.sh --broker-list localhost:9092, localhost:9093, localhost:9094 --topic my-replicated-topic # \u542f\u52a8\u6d88\u8d39\u8005 $ kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic my-replicated-topic Kafka Java \u7f16\u7a0b \u4f7f\u7528\u547d\u4ee4\u884c\u603b\u662f\u4e0d\u65b9\u4fbf\u7684\uff0c\u4e0b\u9762\u6211\u4eec\u5c1d\u8bd5\u7740\u4f7f\u7528Kafka Java API\u7f16\u7a0b\uff0c\u5b9e\u9645\u64cd\u4f5c\u5185\u5bb9\u548c\u4e0a\u4e00\u8282\u662f\u4e00\u6478\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u9644\u4e0a\u4ee3\u7801\u4e86\u3002\u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u7684API\u662f0.8.2\u7248\u672c\u4ee5\u540e\u7684\uff0c\u4e4b\u524d\u7248\u672c\u4e0e\u4e4b\u540e\u7248\u672c\u7684API\u76f8\u5dee\u975e\u5e38\u5927\u3002 Producer import org.apache.kafka.clients.producer.KafkaProducer ; import org.apache.kafka.clients.producer.ProducerRecord ; import java.util.Properties ; /** * Kafka\u751f\u4ea7\u8005 * \u89c1\u5b98\u65b9\u6587\u6863 * http://kafka.apache.org/20/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html */ public class MyKafkaProducer implements Runnable { private String topic ; private KafkaProducer String , String producer ; public MyKafkaProducer ( String topic ) { this . topic = topic ; Properties props = new Properties (); props . put ( bootstrap.servers , localhost:9092 ); props . put ( acks , all ); props . put ( key.serializer , org.apache.kafka.common.serialization.StringSerializer ); props . put ( value.serializer , org.apache.kafka.common.serialization.StringSerializer ); producer = new KafkaProducer String , String ( props ); } public void run () { int messageNumber = 1 ; while ( true ) { String message = message + messageNumber ; producer . send ( new ProducerRecord String , String ( topic , message )); messageNumber ++; try { Thread . sleep ( 5000 ); } catch ( Exception ex ) { ex . printStackTrace (); } } } } Consumer import org.apache.kafka.clients.consumer.ConsumerRecord ; import org.apache.kafka.clients.consumer.ConsumerRecords ; import org.apache.kafka.clients.consumer.KafkaConsumer ; import java.time.Duration ; import java.util.Arrays ; import java.util.List ; import java.util.Properties ; import java.util.concurrent.atomic.AtomicBoolean ; /** * Kafka\u6d88\u8d39\u8005 * \u5b98\u65b9\u6587\u6863 * http://kafka.apache.org/20/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html */ public class MyKafkaConsumer implements Runnable { private final AtomicBoolean closed = new AtomicBoolean ( false ); private String topic ; private KafkaConsumer String , String consumer ; private ConsumerRecords String , String records ; public MyKafkaConsumer ( String topic ) { this . topic = topic ; Properties props = new Properties (); // connect to cluster props . put ( bootstrap.servers , localhost:9092 ); // subscribing to the topics- test props . put ( group.id , test ); // offsets are committed automatically props . put ( enable.auto.commit , true ); // specify how to turn bytes into objects props . put ( key.deserializer , org.apache.kafka.common.serialization.StringDeserializer ); props . put ( value.deserializer , org.apache.kafka.common.serialization.StringDeserializer ); consumer = new KafkaConsumer ( props ); } public void run () { try { // subsribes to topic consumer . subscribe ( Arrays . asList ( topic )); while (! closed . get ()) { records = consumer . poll ( Duration . ofMillis ( 10000 )); for ( ConsumerRecord String , String record : records ) System . out . printf ( offset = %d, key = %s, value = %s%n , record . offset (), record . key (), record . value ()); } } catch ( Exception e ) { // Ignore exception if closing if (! closed . get ()) throw e ; } finally { consumer . close (); } } // Shutdown hook which can be called from a separate thread public void shutdown () { closed . set ( true ); consumer . wakeup (); } } Clientapp public class ClientApp { public static void main ( String [] args ) { Thread job = new Thread ( new MyKafkaProducer ( test )); job . start (); Thread job2 = new Thread ( new MyKafkaConsumer ( test )); job2 . start (); } } \u6574\u5408Flume\u548cKafka\u5b8c\u6210\u5b9e\u65f6\u6570\u636e\u91c7\u96c6 \u4e3a\u4e86\u5c06Flume\u7684\u8f93\u51fa\u5230Kafka\uff0c\u53ef\u4ee5\u5c06agent2\u7684logger sink\u66ff\u6362\u6210Kafka Sink\u3002\u7136\u540e\u542f\u52a8\u4e00\u4e2aKafka consumer\u4eceKafka sink\u8ba2\u9605\u6d88\u606f\u3002 kafka sink can publish data to a Kafka topic. One of the objective is to integrate Flume with Kafka so that pull based processing systems can process the data coming through various Flume sources. [ Kafka Sink ] \u4e0b\u9762\u662fagent2\u5bf9\u5e94\u7684Kafka\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u8fd9\u91ccagent2\u6539\u540d\u4e3a avro-memory-kafka \u3002 # filename: avro-memeory-kafka.conf # Name the components on this agent avro-memory-kafka.sources = avro-source avro-memory-kafka.sinks = kafka-sink avro-memory-kafka.channels = memory-channel # Describe/configure the source avro-memory-kafka.sources.avro-source.type = avro avro-memory-kafka.sources.avro-source.bind = localhost avro-memory-kafka.sources.avro-source.port = 44444 # Describe the sink avro-memory-kafka.sinks.kafka-sink.type = org.apache.flume.sink.kafka.KafkaSink avro-memory-kafka.sinks.kafka-sink.kafka.bootstrap.servers = localhost:9092 avro-memory-kafka.sinks.kafka-sink.kafka.topic = test # Use a channel which buffers events in memory avro-memory-kafka.channels.memory-channel.type = memory avro-memory-kafka.channels.memory-channel.capacity = 1000 avro-memory-kafka.channels.memory-channel.transactionCapacity = 100 # Bind the source and sink to the channel avro-memory-kafka.sources.avro-source.channels = memory-channel avro-memory-kafka.sinks.kafka-sink.channel = memory-channel \u4e0b\u9762\u662f\u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b\uff0c\u540c\u6837\u9700\u8981\u6ce8\u610f\u4e24\u4e2aagent\u7684\u542f\u52a8\u987a\u5e8f\uff1a ## \u542f\u52a8zookeeper, kafka\uff0c\u7701\u7565 ## \u542f\u52a8agent $ flume-ng agent \\ --name avro-memory-kafka \\ --conf $F LUME-HOME/conf \\ --conf-file avro-memory-kafka.conf \\ -Dflume.root.logger = INFO,console $ flume-ng agent \\ --name a1 \\ --conf $F LUME-HOME/conf \\ --conf-file exec-memory-avro.conf \\ -Dflume.root.logger = INFO,console ## \u542f\u52a8\u6d88\u8d39\u8005 $ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test 4 Spark Streaming \u5165\u95e8 Spark Streaming is an extension of the core Spark API that enables scalable, high-throughput, fault-tolerant stream processing of live data streams. Data can be ingested from many sources like Kafka, Flume, Kinesis, or TCP sockets, and can be processed using complex algorithms expressed with high-level functions like map , reduce , join and window . Finally, processed data can be pushed out to filesystems, databases, and live dashboards. In fact, you can apply Spark\u2019s machine learning and graph processing algorithms on data streams. [ ref ] Spark Streaming receives live input data streams and divides the data into batches , which are then processed by the Spark engine to generate the final stream of results in batches. \u5e94\u7528\u573a\u666f React to anomalies in sensors in real-time Spark Streaming\u96c6\u6210Spark\u751f\u6001\u7cfb\u7edf\u7684\u4f7f\u7528 Join data streams with static data sets // create data set from hadoop file val dataset = sparkContext . hadoopFile ( file ) // join each batch in stream with the dataset kafakaStream . transform { batchRDD = batchRDD . join ( dataset ). filter (...) } Learn models offline, apply them online //Learn model offline val model = KMeans . train ( dataset ,...) //apply model online on stream kafkaStream . map { event =? model . predict ( event . feature ) } Interactively query streaming data with SQL // Register each batch in stream as table kafkaStream . map { batchRDD =? batchRDD . registerTempTable ( lastestEvents ) } //INteractively query table sqlContext . sql ( select * from latestEvents ) \u53d1\u5c55\u53f2 Example: \u8bcd\u9891\u7edf\u8ba1 spark-submit\u6267\u884c \u4f7f\u7528spark-submit\u6765\u63d0\u4ea4\u5e94\u7528\u7a0b\u5e8f $ spark-submit --master local \\ --class org.apache.spark.examples.streaming.JavaNetworkWordCount \\ --name NetworkWordCount \\ spark-examples_2.11-2.3.1.jar localhost 9999 spark-shell\u6267\u884c \u4f7f\u7528spark-submit\u6765\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f","title":"SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#spark-streaming","text":"\u8be5\u9879\u76ee\u4ece\u5b9e\u65f6\u6570\u636e\u4ea7\u751f\u548c\u6d41\u5411\u7684\u4e0d\u540c\u73af\u8282\u51fa\u53d1\uff0c\u901a\u8fc7\u96c6\u6210\u4e3b\u6d41\u7684\u5206\u5e03\u5f0f\u65e5\u5fd7\u6536\u96c6\u6846\u67b6Flume\u3001\u5206\u5e03\u5f0f\u6d88\u606f\u961f\u5217Kafka\u3001\u5206\u5e03\u5f0f\u5217\u5f0f\u6570\u636e\u5e93HBase\u3001\u4ee5\u53caSpark Streaming\u5b9e\u73b0\u5b9e\u65f6\u6d41\u5904\u7406\u3002","title":"Spark Streaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#1","text":"","title":"1 \u521d\u8bc6\u5b9e\u65f6\u6d41\u5904\u7406"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_1","text":"\u9700\u6c42\uff1a\u7edf\u8ba1\u4e3b\u7ad9\u6bcf\u4e2a\uff08\u6307\u5b9a\uff09\u8bfe\u7a0b\u8bbf\u95ee\u7684\u5ba2\u6237\u7aef\u3001\u5730\u57df\u4fe1\u606f\u5206\u5e03 == \u5982\u4e0a\u4e24\u4e2a\u64cd\u4f5c\uff1a\u91c7\u7528\u79bb\u7ebf\uff08spark/mapreduce\uff09\u7684\u65b9\u5f0f\u8fdb\u884c\u7edf\u8ba1 \u5b9e\u73b0\u6b65\u9aa4\uff1a \u8bfe\u7a0b\u7f16\u53f7\uff0cip\u4fe1\u606f\uff0cuser-agent \u8fdb\u884c\u76f8\u5e94\u7684\u7edf\u8ba1\u5206\u6790\u64cd\u4f5c\uff1aMapReduce/Spark \u9879\u76ee\u67b6\u6784\uff1a \u65e5\u5fd7\u6536\u96c6\uff1aFlume \u79bb\u7ebf\u5206\u6790\uff1aMapReduce/Spark \u7edf\u8ba1\u7ed3\u679c\u56fe\u5f62\u5316\u5c55\u793a \u95ee\u9898\uff1a \u5c0f\u65f6\u7ea7\u522b 10\u5206\u949f \u79d2\u7ea7\u522b","title":"\u4e1a\u52a1\u73b0\u72b6\u5206\u6790"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_2","text":"\u65f6\u6548\u6027\u9ad8 \u6570\u636e\u91cf\u5927","title":"\u5b9e\u65f6\u6d41\u5904\u7406\u4ea7\u751f\u80cc\u666f"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_3","text":"https://www.oreilly.com/ideas/the-world-beyond-batch-streaming-101 \u5b9e\u65f6\u8ba1\u7b97 apache storm \u6d41\u5f0f\u8ba1\u7b97 \u5b9e\u65f6\u6d41\u5f0f\u8ba1\u7b97","title":"\u5b9e\u65f6\u6d41\u5904\u7406\u6982\u8ff0"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_4","text":"\u6570\u636e\u6765\u6e90 \u79bb\u7ebf\uff1a\u6765\u81eaHDFS\u4e0a\u7684\u5386\u53f2\u6570\u636e\uff0c\u6570\u636e\u91cf\u6bd4\u8f83\u5927 \u5b9e\u65f6\uff1a\u6765\u81ea\u6d88\u606f\u961f\u5217(Kafka)\uff0c\u662f\u5b9e\u65f6\u65b0\u589e/\u4fee\u6539\u8bb0\u5f55\u8fc7\u6765\u7684\u67d0\u4e00\u7b14\u6570\u636e \u5904\u7406\u8fc7\u7a0b \u79bb\u7ebf\uff1aMapReduce, map + reduce \u5b9e\u65f6: Spark(DStream/SS) \u5904\u7406\u901f\u5ea6 \u79bb\u7ebf\uff1a\u5e54 \u5b9e\u65f6\uff1a\u5feb\u901f \u8fdb\u7a0b \u79bb\u7ebf\uff1a\u8fdb\u7a0b\u6709\u542f\u52a8+\u9500\u6bc1\u7684\u8fc7\u7a0b \u5b9e\u65f6\uff1a 7*24\u5c0f\u65f6\u8fd0\u884c","title":"\u79bb\u7ebf\u8ba1\u7b97\u4e0e\u5b9e\u65f6\u8ba1\u7b97\u5bf9\u6bd4"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_5","text":"Apache Storm Apache Storm is a free and open source distributed realtime computation system. Storm makes it easy to reliably process unbounded streams of data, doing for realtime processing what Hadoop did for batch processing. Storm is simple, can be used with any programming language, and is a lot of fun to use! Apache Spark Streaming \u5b9e\u9645\u4e0a\u662f\u5fae\u6279\u5904\u7406\uff08\u6279\u5904\u7406\u95f4\u9694\u975e\u5e38\u5c0f) Apache kafka Apache Flink Apache Flink is a framework and distributed processing engine for stateful computations over unbounded and bounded data streams. Flink has been designed to run in all common cluster environments, perform computations at in-memory speed and at any scale.","title":"\u5b9e\u65f6\u6d41\u5904\u7406\u6846\u67b6\u5bf9\u6bd4"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_6","text":"\u52a0\u4e00\u5c42flume\u6d88\u606f\u961f\u5217\uff0c\u4e3b\u8981\u4e3a\u4e86\u51cf\u8f7b\u538b\u529b\uff0c\u8d77\u5230\u7f13\u51b2\u4f5c\u7528","title":"\u5b9e\u65f6\u6d41\u5904\u7406\u67b6\u6784\u548c\u6280\u672f\u9009\u578b"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_7","text":"\u7535\u4fe1\u884c\u4e1a\uff1a \u4f60\u7684\u624b\u673a\u5957\u9910\u6d41\u91cf\u7528\u5b8c\uff0c\u6536\u5230\u77ed\u4fe1\u63d0\u793a \u7535\u5546\u884c\u4e1a\uff1a\u641c\u7d22\u5546\u54c1\u65f6\uff0c\u8fdb\u884c\u63a8\u8350","title":"\u5b9e\u65f6\u6d41\u5904\u7406\u5728\u4f01\u4e1a\u4e2d\u7684\u5e94\u7528"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#2-flume","text":"see detail in Hadoop: definitive Guide, Chapter 14","title":"2 \u5206\u5e03\u5f0f\u65e5\u5fd7\u6536\u96c6\u6846\u67b6Flume"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_8","text":"You have a lot of servers and systems network devices operating system web servers applications And they generate large amount of logs and other data. Problem: Since you have a business idea, how to implement the idea? OPTION: You may move logs and data generated to hadoop hdfs directly. \u4f46\u662f\u5b58\u5728\u95ee\u9898\uff1a \u5982\u4f55\u505a\u76d1\u63a7 \u5982\u4f55\u4fdd\u8bc1\u65f6\u6548\u6027 \u76f4\u63a5\u4f20\u9001\u6587\u672c\u6570\u636e\uff0c\u5f00\u9500\u592a\u5927 \u5bb9\u9519 \u8d1f\u8f7d\u5747\u8861 SOLUTION: \u4f7f\u7528Flume\uff0c\u57fa\u672c\u4e0a\u5199\u914d\u7f6e\u6587\u4ef6\u5c31OK\u4e86\uff0cFlume\u81ea\u52a8\u89e3\u51b3\u4ee5\u4e0a\u95ee\u9898\u3002","title":"\u4e1a\u52a1\u73b0\u72b6\u5206\u6790"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#flume","text":"Flume is a distributed, reliable, and available service for efficiently collecting, aggregating, and moving large amounts of log data . It has a simple and flexible architecture based on streaming data flows. It is robust and fault tolerant with tunable reliability mechanisms and many failover and recovery mechanisms. It uses a simple extensible data model that allows for online analytic application. [ Apache Flume ]","title":"Flume\u6982\u8ff0"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#flume_1","text":"see detail in Hadoop: definitive Guide, Chapter 14","title":"Flume\u67b6\u6784\u53ca\u6838\u5fc3\u7ec4\u4ef6"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#flume_2","text":"\u9700\u6c42\uff1a \u4ece\u6307\u5b9a\u7f51\u7edc\u7aef\u53e3\u91c7\u96c6\u6570\u636e \u4f7f\u7528Flume\u7684\u5173\u952e\u5c31\u662f\u5199\u914d\u7f6e\u6587\u4ef6 \u914d\u7f6eSource, Channel, Sink \u628a\u4ee5\u4e0a\u4e09\u4e2a\u7ec4\u4ef6\u4e32\u8d77\u6765 http://flume.apache.org/FlumeUserGuide.html#example-2 # example.conf: A single-node Flume configuration # Name the components on this agent a1.sources = r1 a1.sinks = k1 a1.channels = c1 # Describe/configure the source a1.sources.r1.type = netcat a1.sources.r1.bind = localhost a1.sources.r1.port = 44444 # Describe the sink a1.sinks.k1.type = logger # Use a channel which buffers events in memory a1.channels.c1.type = memory a1.channels.c1.capacity = 1000 a1.channels.c1.transactionCapacity = 100 # Bind the source and sink to the channel a1.sources.r1.channels = c1 a1.sinks.k1.channel = c1 netcat source : A netcat-like source that listens on a given port and turns each line of text into an event. It opens a specified port and listens for data. The expectation is that the supplied data is newline separated text. Each line of text is turned into a Flume event and sent via the connected channel. [ NetCat TCP Source ] logger sink : Logs event at INFO level. Typically useful for testing/debugging purpose. [ Logger Sink ] memory channel : The events are stored in an in-memory queue with configurable max size. It\u2019s ideal for flows that need higher throughput and are prepared to lose the staged data in the event of an agent failures. [ memory channel ] ## \u542f\u52a8flume $ flume-ng agent \\ --name a1 \\ # agent name --conf $F LUME_HOME/conf \\ # use configs in conf directory --conf-file example.conf \\ # specify a config file -Dflume.root.logger = INFO,console # sets a Java system property value ## \u5728\u53e6\u5916\u4e00\u4e2aterminal\u7528telnet\u6a21\u62df\u6570\u636e\u6e90 $ telnet localhost 44444 Trying 127.0.0.1... Connected to localhost. Escape character is ^] . hello OK hellomy OK \u9700\u6c42\uff1a \u76d1\u63a7\u4e00\u4e2a\u6587\u4ef6\u5b9e\u65f6\u91c7\u96c6\u65b0\u589e\u7684\u6570\u636e\u8f93\u51fa\u5230\u63a7\u5236\u53f0 Agent\u9009\u578b\uff1a exec source + memory channel + logger sink # filename: exec-memeory-logger.conf # Name the components on this agent a1.sources = r1 a1.sinks = k1 a1.channels = c1 # Describe/configure the source a1.sources.r1.type = exec a1.sources.r1.command = tail -F /tmp/data.log # Describe the sink a1.sinks.k1.type = logger # Use a channel which buffers events in memory a1.channels.c1.type = memory a1.channels.c1.capacity = 1000 a1.channels.c1.transactionCapacity = 100 # Bind the source and sink to the channel a1.sources.r1.channels = c1 a1.sinks.k1.channel = c1 exec source runs a given Unix command on start-up and expects that process to continuously produce data on standard out (stderr is simply discarded, unless property logStdErr is set to true). If the process exits for any reason, the source also exits and will produce no further data. This means configurations such as cat [named pipe] or tail -F [file] are going to produce the desired results where as date will probably not - the former two commands produce streams of data where as the latter produces a single event and exits. [ exec source ] \u5c06\u5185\u5bb9\u8f93\u5165\u5230 /tmp/data.log \u6587\u4ef6\u4e2d\uff1a $ echo hello data.log $ echo hello data.log \u9700\u6c42\uff1a \u5c06A\u670d\u52a1\u5668\u4e0a\u7684\u65e5\u5fd7\u5b9e\u65f6\u91c7\u96c6\u5230B\u670d\u52a1\u5668 \u65e5\u5fd7\u6536\u96c6\u8fc7\u7a0b\uff1a \u673a\u56681\u4e0a\u76d1\u63a7\u4e00\u4e2a\u6587\u4ef6\uff0c\u5f53\u6211\u4eec\u8bbf\u95ee\u4e3b\u7ad9\u65f6\u4f1a\u6709\u7528\u6237\u884c\u4e3a\u65e5\u5fd7\u8bb0\u5f55\u5230 access.log \u4e2d\u3002 avro sink\u628a\u65b0\u4ea7\u751f\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u5bf9\u5e94\u7684avro source\u6307\u5b9a\u7684hostname\u548cport\u4e0a\u3002 \u901a\u8fc7avro\u5bf9\u5e94\u7684agent\u5c06\u6211\u4eec\u7684\u65e5\u5fd7\u8f93\u51fa\u5230\u63a7\u5236\u53f0\u3002 avro sink : forms one half of Flume\u2019s tiered collection support. Flume events sent to this sink are turned into Avro events and sent to the configured hostname / port pair. [ Avro sink ] Exec-Memeory-Avro.conf # filename: exec-memeory-avro.conf # Name the components on this agent a1.sources = exec-source a1.sinks = avro-sink a1.channels = memory-channel # Describe/configure the source a1.sources.exec-source.type = exec a1.sources.exec-source.command = tail -F /tmp/data.log # Describe the sink a1.sinks.avro-sink.type = avro a1.sinks.avro-sink.hostname = localhost a1.sinks.avro-sink.port = 44444 # Use a channel which buffers events in memory a1.channels.memory-channel.type = memory a1.channels.memory-channel.capacity = 1000 a1.channels.memory-channel.transactionCapacity = 100 # Bind the source and sink to the channel a1.sources.exec-source.channels = memory-channel a1.sinks.avro-sink.channel = memory-channel Avro-Memeory-Logger.conf # filename: avro-memeory-logger.conf # Name the components on this agent a2.sources = avro-source a2.sinks = logger-sink a2.channels = memory-channel # Describe/configure the source a2.sources.avro-source.type = avro a2.sources.avro-source.bind = localhost a2.sources.avro-source.port = 44444 # Describe the sink a2.sinks.logger-sink.type = logger # Use a channel which buffers events in memory a2.channels.memory-channel.type = memory a2.channels.memory-channel.capacity = 1000 a2.channels.memory-channel.transactionCapacity = 100 # Bind the source and sink to the channel a2.sources.avro-source.channels = memory-channel a2.sinks.logger-sink.channel = memory-channel \u542f\u52a8flume\uff0c \u6ce8\u610f\u4e24\u4e2aagent\u7684\u542f\u52a8\u987a\u5e8f $ flume-ng agent \\ --name a2 \\ --conf $F LUME-HOME/conf \\ --conf-file avro-memory-logger.conf \\ -Dflume.root.logger = INFO,console $ flume-ng agent \\ --name a1 \\ --conf $F LUME-HOME/conf \\ --conf-file exec-memory-avro.conf \\ -Dflume.root.logger = INFO,console \u5c06\u5185\u5bb9\u8f93\u5165\u5230 /tmp/data.log \u6587\u4ef6\u4e2d\uff1a $ echo welcome data.log $ echo welcome data.log","title":"Flume\u5b9e\u6218"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#3-kafka","text":"First a few concepts: Kafka is run as a cluster on one or more servers that can span multiple datacenters. The Kafka cluster stores streams of records in categories called topic s. Each record consists of a key, a value, and a timestamp. Broker s are the Kafka processes that manage topics and partitions and serve producer and consumer request.","title":"3 \u5206\u5e03\u5f0f\u6d88\u606f\u961f\u5217Kafka"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#kafka","text":"\u5355\u8282\u70b9\u5355Broker\u90e8\u7f72\u53ca\u4f7f\u7528 # \u542f\u52a8Zookeeper $ zkServer.sh start # \u542f\u52a8kafka $ kafka-server-start.sh $KAFKA_HOME/config/server.properties # \u521b\u5efa\u540d\u4e3atest\u7684topic(single partition and only one replica) $ kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test # \u67e5\u770btopic $ kafka-topics.sh --list --zookeeper localhost:2181 ### \u542f\u52a8\u751f\u4ea7\u8005, 9092\u662fserver\u76d1\u542c\u7aef\u53e3 $ kafka-console-producer.sh --broker-list localhost:9092 --topic test This is a message This is another message ### \u542f\u52a8\u6d88\u8d39\u8005 --from-beginning\u4ece\u5934\u5f00\u59cb\u63a5\u6536\u6d88\u606f $ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning This is a message This is another message ### \u67e5\u770b\u6240\u6709topics\u7684\u8be6\u7ec6\u4fe1\u606f $ kafka-topics.sh --describe --zookeeper localhost:2181 ### \u67e5\u770b\u6307\u5b9atopic\u7684\u8be6\u7ec6\u4fe1\u606f $ kafka-topics.sh --describe --zookeeper localhost:2181 --topic test \u5355\u8282\u70b9\u591aBroker\u90e8\u7f72\u53ca\u4f7f\u7528 cp $KAFKA_HOME/config/server.properties $KAFKA_HOME/config/server-1.properties cp $KAFKA_HOME/config/server.properties $KAFKA_HOME/config/server-2.properties \u4fee\u6539\u914d\u7f6e\u6587\u4ef6\u5982\u4e0b config/server-1.properties: broker.id=1 listeners=PLAINTEXT://:9093 log.dirs=/tmp/kafka-logs-1 config/server-2.properties: broker.id=2 listeners=PLAINTEXT://:9094 log.dirs=/tmp/kafka-logs-2 \u542f\u52a8kafka # \u542f\u52a8ZooKeeper $ zkServer.sh start # \u542f\u52a8kafka server $ kafka-server-start.sh $KAFKA_HOME/config/server.properties $ kafka-server-start.sh $KAFKA_HOME/config/server-1.properties $ kafka-server-start.sh $KAFKA_HOME/config/server-2.properties # \u521b\u5efatopic, 1\u4e2a\u5206\u533a\uff0c\u4e09\u4e2a\u526f\u672c $ kafka-topics.sh --create --zookeeper localhost:2181 \\ --replication-factor 3 --partitions 1 --topic my-replicated-topic # \u67e5\u770btopic\u4fe1\u606f $ kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-replicated-topic Topic:my-replicated-topic PartitionCount:1 ReplicationFactor:3 Configs: Topic: my-replicated-topic Partition: 0 Leader: 2 Replicas: 2,0,1 Isr: 2,0,1 # \u542f\u52a8\u751f\u4ea7\u8005 $ kafka-console-producer.sh --broker-list localhost:9092, localhost:9093, localhost:9094 --topic my-replicated-topic # \u542f\u52a8\u6d88\u8d39\u8005 $ kafka-console-consumer.sh --bootstrap-server localhost:9092 --from-beginning --topic my-replicated-topic","title":"Kafka\u90e8\u7f72\u53ca\u4f7f\u7528"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#kafka-java","text":"\u4f7f\u7528\u547d\u4ee4\u884c\u603b\u662f\u4e0d\u65b9\u4fbf\u7684\uff0c\u4e0b\u9762\u6211\u4eec\u5c1d\u8bd5\u7740\u4f7f\u7528Kafka Java API\u7f16\u7a0b\uff0c\u5b9e\u9645\u64cd\u4f5c\u5185\u5bb9\u548c\u4e0a\u4e00\u8282\u662f\u4e00\u6478\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u76f4\u63a5\u9644\u4e0a\u4ee3\u7801\u4e86\u3002\u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528\u7684API\u662f0.8.2\u7248\u672c\u4ee5\u540e\u7684\uff0c\u4e4b\u524d\u7248\u672c\u4e0e\u4e4b\u540e\u7248\u672c\u7684API\u76f8\u5dee\u975e\u5e38\u5927\u3002 Producer import org.apache.kafka.clients.producer.KafkaProducer ; import org.apache.kafka.clients.producer.ProducerRecord ; import java.util.Properties ; /** * Kafka\u751f\u4ea7\u8005 * \u89c1\u5b98\u65b9\u6587\u6863 * http://kafka.apache.org/20/javadoc/index.html?org/apache/kafka/clients/producer/KafkaProducer.html */ public class MyKafkaProducer implements Runnable { private String topic ; private KafkaProducer String , String producer ; public MyKafkaProducer ( String topic ) { this . topic = topic ; Properties props = new Properties (); props . put ( bootstrap.servers , localhost:9092 ); props . put ( acks , all ); props . put ( key.serializer , org.apache.kafka.common.serialization.StringSerializer ); props . put ( value.serializer , org.apache.kafka.common.serialization.StringSerializer ); producer = new KafkaProducer String , String ( props ); } public void run () { int messageNumber = 1 ; while ( true ) { String message = message + messageNumber ; producer . send ( new ProducerRecord String , String ( topic , message )); messageNumber ++; try { Thread . sleep ( 5000 ); } catch ( Exception ex ) { ex . printStackTrace (); } } } } Consumer import org.apache.kafka.clients.consumer.ConsumerRecord ; import org.apache.kafka.clients.consumer.ConsumerRecords ; import org.apache.kafka.clients.consumer.KafkaConsumer ; import java.time.Duration ; import java.util.Arrays ; import java.util.List ; import java.util.Properties ; import java.util.concurrent.atomic.AtomicBoolean ; /** * Kafka\u6d88\u8d39\u8005 * \u5b98\u65b9\u6587\u6863 * http://kafka.apache.org/20/javadoc/index.html?org/apache/kafka/clients/consumer/KafkaConsumer.html */ public class MyKafkaConsumer implements Runnable { private final AtomicBoolean closed = new AtomicBoolean ( false ); private String topic ; private KafkaConsumer String , String consumer ; private ConsumerRecords String , String records ; public MyKafkaConsumer ( String topic ) { this . topic = topic ; Properties props = new Properties (); // connect to cluster props . put ( bootstrap.servers , localhost:9092 ); // subscribing to the topics- test props . put ( group.id , test ); // offsets are committed automatically props . put ( enable.auto.commit , true ); // specify how to turn bytes into objects props . put ( key.deserializer , org.apache.kafka.common.serialization.StringDeserializer ); props . put ( value.deserializer , org.apache.kafka.common.serialization.StringDeserializer ); consumer = new KafkaConsumer ( props ); } public void run () { try { // subsribes to topic consumer . subscribe ( Arrays . asList ( topic )); while (! closed . get ()) { records = consumer . poll ( Duration . ofMillis ( 10000 )); for ( ConsumerRecord String , String record : records ) System . out . printf ( offset = %d, key = %s, value = %s%n , record . offset (), record . key (), record . value ()); } } catch ( Exception e ) { // Ignore exception if closing if (! closed . get ()) throw e ; } finally { consumer . close (); } } // Shutdown hook which can be called from a separate thread public void shutdown () { closed . set ( true ); consumer . wakeup (); } } Clientapp public class ClientApp { public static void main ( String [] args ) { Thread job = new Thread ( new MyKafkaProducer ( test )); job . start (); Thread job2 = new Thread ( new MyKafkaConsumer ( test )); job2 . start (); } }","title":"Kafka Java \u7f16\u7a0b"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#flumekafka","text":"\u4e3a\u4e86\u5c06Flume\u7684\u8f93\u51fa\u5230Kafka\uff0c\u53ef\u4ee5\u5c06agent2\u7684logger sink\u66ff\u6362\u6210Kafka Sink\u3002\u7136\u540e\u542f\u52a8\u4e00\u4e2aKafka consumer\u4eceKafka sink\u8ba2\u9605\u6d88\u606f\u3002 kafka sink can publish data to a Kafka topic. One of the objective is to integrate Flume with Kafka so that pull based processing systems can process the data coming through various Flume sources. [ Kafka Sink ] \u4e0b\u9762\u662fagent2\u5bf9\u5e94\u7684Kafka\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u8fd9\u91ccagent2\u6539\u540d\u4e3a avro-memory-kafka \u3002 # filename: avro-memeory-kafka.conf # Name the components on this agent avro-memory-kafka.sources = avro-source avro-memory-kafka.sinks = kafka-sink avro-memory-kafka.channels = memory-channel # Describe/configure the source avro-memory-kafka.sources.avro-source.type = avro avro-memory-kafka.sources.avro-source.bind = localhost avro-memory-kafka.sources.avro-source.port = 44444 # Describe the sink avro-memory-kafka.sinks.kafka-sink.type = org.apache.flume.sink.kafka.KafkaSink avro-memory-kafka.sinks.kafka-sink.kafka.bootstrap.servers = localhost:9092 avro-memory-kafka.sinks.kafka-sink.kafka.topic = test # Use a channel which buffers events in memory avro-memory-kafka.channels.memory-channel.type = memory avro-memory-kafka.channels.memory-channel.capacity = 1000 avro-memory-kafka.channels.memory-channel.transactionCapacity = 100 # Bind the source and sink to the channel avro-memory-kafka.sources.avro-source.channels = memory-channel avro-memory-kafka.sinks.kafka-sink.channel = memory-channel \u4e0b\u9762\u662f\u5177\u4f53\u7684\u64cd\u4f5c\u6d41\u7a0b\uff0c\u540c\u6837\u9700\u8981\u6ce8\u610f\u4e24\u4e2aagent\u7684\u542f\u52a8\u987a\u5e8f\uff1a ## \u542f\u52a8zookeeper, kafka\uff0c\u7701\u7565 ## \u542f\u52a8agent $ flume-ng agent \\ --name avro-memory-kafka \\ --conf $F LUME-HOME/conf \\ --conf-file avro-memory-kafka.conf \\ -Dflume.root.logger = INFO,console $ flume-ng agent \\ --name a1 \\ --conf $F LUME-HOME/conf \\ --conf-file exec-memory-avro.conf \\ -Dflume.root.logger = INFO,console ## \u542f\u52a8\u6d88\u8d39\u8005 $ kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test","title":"\u6574\u5408Flume\u548cKafka\u5b8c\u6210\u5b9e\u65f6\u6570\u636e\u91c7\u96c6"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#4-spark-streaming","text":"Spark Streaming is an extension of the core Spark API that enables scalable, high-throughput, fault-tolerant stream processing of live data streams. Data can be ingested from many sources like Kafka, Flume, Kinesis, or TCP sockets, and can be processed using complex algorithms expressed with high-level functions like map , reduce , join and window . Finally, processed data can be pushed out to filesystems, databases, and live dashboards. In fact, you can apply Spark\u2019s machine learning and graph processing algorithms on data streams. [ ref ] Spark Streaming receives live input data streams and divides the data into batches , which are then processed by the Spark engine to generate the final stream of results in batches.","title":"4 Spark Streaming \u5165\u95e8"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_9","text":"React to anomalies in sensors in real-time","title":"\u5e94\u7528\u573a\u666f"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#spark-streamingspark","text":"Join data streams with static data sets // create data set from hadoop file val dataset = sparkContext . hadoopFile ( file ) // join each batch in stream with the dataset kafakaStream . transform { batchRDD = batchRDD . join ( dataset ). filter (...) } Learn models offline, apply them online //Learn model offline val model = KMeans . train ( dataset ,...) //apply model online on stream kafkaStream . map { event =? model . predict ( event . feature ) } Interactively query streaming data with SQL // Register each batch in stream as table kafkaStream . map { batchRDD =? batchRDD . registerTempTable ( lastestEvents ) } //INteractively query table sqlContext . sql ( select * from latestEvents )","title":"Spark Streaming\u96c6\u6210Spark\u751f\u6001\u7cfb\u7edf\u7684\u4f7f\u7528"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#_10","text":"","title":"\u53d1\u5c55\u53f2"},{"location":"bigdata/projects/SparkStreaming\u5b9e\u65f6\u6d41\u5904\u7406\u9879\u76ee/#example","text":"spark-submit\u6267\u884c \u4f7f\u7528spark-submit\u6765\u63d0\u4ea4\u5e94\u7528\u7a0b\u5e8f $ spark-submit --master local \\ --class org.apache.spark.examples.streaming.JavaNetworkWordCount \\ --name NetworkWordCount \\ spark-examples_2.11-2.3.1.jar localhost 9999 spark-shell\u6267\u884c \u4f7f\u7528spark-submit\u6765\u6d4b\u8bd5\u5e94\u7528\u7a0b\u5e8f","title":"Example: \u8bcd\u9891\u7edf\u8ba1"},{"location":"bigdata/projects/\u4e2d\u6587\u60c5\u611f\u5206\u6790/","text":"\u4e2d\u6587\u60c5\u611f\u5206\u6790","title":"\u4e2d\u6587\u60c5\u611f\u5206\u6790"},{"location":"bigdata/projects/\u4e2d\u6587\u60c5\u611f\u5206\u6790/#_1","text":"","title":"\u4e2d\u6587\u60c5\u611f\u5206\u6790"},{"location":"bigdata/spark/","text":"Spark Chapter 1: Introduction to Data Analysis with Spark Chapter 2: Downloading Spark and Getting Started Chapter 3: Programming with RDDs Chapter 4: Working with Key/Value Pairs Chapter 5: Loading and Saving Your Data Chapter 6: Advanced Spark Programming Chapter 7: Running on a Cluster Chapter 8: Tuning and Debugging Spark Chapter 9: Spark SQL Chapter 10: Spark Streaming Chapter 11: Machine Learning with MLlib","title":"Contents"},{"location":"bigdata/spark/#spark","text":"Chapter 1: Introduction to Data Analysis with Spark Chapter 2: Downloading Spark and Getting Started Chapter 3: Programming with RDDs Chapter 4: Working with Key/Value Pairs Chapter 5: Loading and Saving Your Data Chapter 6: Advanced Spark Programming Chapter 7: Running on a Cluster Chapter 8: Tuning and Debugging Spark Chapter 9: Spark SQL Chapter 10: Spark Streaming Chapter 11: Machine Learning with MLlib","title":"Spark"},{"location":"bigdata/spark/ch1/","text":"Learning Spark 1 - Introduction to Data Analysis with Spark","title":"Chapter 1: Introduction to Data Analysis with Spark"},{"location":"bigdata/spark/ch1/#learning-spark-1-introduction-to-data-analysis-with-spark","text":"","title":"Learning Spark  1 - Introduction to Data Analysis with Spark"},{"location":"bigdata/spark/ch10/","text":"Learning Spark 10 - Spark Streaming","title":"Chapter 10: Spark Streaming"},{"location":"bigdata/spark/ch10/#learning-spark-10-spark-streaming","text":"","title":"Learning Spark 10 - Spark Streaming"},{"location":"bigdata/spark/ch11/","text":"Learning Spark 11 - Machine Learning with MLlib","title":"Chapter 11: Machine Learning with MLlib"},{"location":"bigdata/spark/ch11/#learning-spark-11-machine-learning-with-mllib","text":"","title":"Learning Spark 11 - Machine Learning with MLlib"},{"location":"bigdata/spark/ch2/","text":"Learning Spark 2 - Downloading Spark and Getting Started","title":"Chapter 2: Downloading Spark and Getting Started"},{"location":"bigdata/spark/ch2/#learning-spark-2-downloading-spark-and-getting-started","text":"","title":"Learning Spark 2 - Downloading Spark and Getting Started"},{"location":"bigdata/spark/ch3/","text":"Learning Spark 3 - Programming with RDDs","title":"Chapter 3: Programming with RDDs"},{"location":"bigdata/spark/ch3/#learning-spark-3-programming-with-rdds","text":"","title":"Learning Spark 3 - Programming with RDDs"},{"location":"bigdata/spark/ch4/","text":"Learning Spark 4 - Working with Key/Value Pairs","title":"Chapter 4: Working with Key/Value Pairs"},{"location":"bigdata/spark/ch4/#learning-spark-4-working-with-keyvalue-pairs","text":"","title":"Learning Spark 4 - Working with Key/Value Pairs"},{"location":"bigdata/spark/ch5/","text":"Learning Spark 5 - Loading and Saving Your Data","title":"Chapter 5: Loading and Saving Your Data"},{"location":"bigdata/spark/ch5/#learning-spark-5-loading-and-saving-your-data","text":"","title":"Learning Spark 5 - Loading and Saving Your Data"},{"location":"bigdata/spark/ch6/","text":"Learning Spark 6 - Advanced Spark Programming","title":"Chapter 6: Advanced Spark Programming"},{"location":"bigdata/spark/ch6/#learning-spark-6-advanced-spark-programming","text":"","title":"Learning Spark 6 - Advanced Spark Programming"},{"location":"bigdata/spark/ch7/","text":"Learning Spark 7 - Running on a Cluster","title":"Chapter 7: Running on a Cluster"},{"location":"bigdata/spark/ch7/#learning-spark-7-running-on-a-cluster","text":"","title":"Learning Spark  7 - Running on a Cluster"},{"location":"bigdata/spark/ch8/","text":"Learning Spark 8 - Tuning and Debugging Spark","title":"Chapter 8: Tuning and Debugging Spark"},{"location":"bigdata/spark/ch8/#learning-spark-8-tuning-and-debugging-spark","text":"","title":"Learning Spark 8 - Tuning and Debugging Spark"},{"location":"bigdata/spark/ch9/","text":"Learning Spark 9 - Spark SQL","title":"Chapter 9: Spark SQL"},{"location":"bigdata/spark/ch9/#learning-spark-9-spark-sql","text":"","title":"Learning Spark 9 - Spark SQL"},{"location":"database/","text":"DataBase MySql Chapter Learning MySQL and MariaDB","title":"Contents"},{"location":"database/#database","text":"","title":"DataBase"},{"location":"database/#mysql","text":"Chapter Learning MySQL and MariaDB","title":"MySql"},{"location":"database/mysql/","text":"MySql Chapter Learning MySQL and MariaDB","title":"Contents"},{"location":"database/mysql/#mysql","text":"Chapter Learning MySQL and MariaDB","title":"MySql"},{"location":"database/mysql/LearningMySQLandMariaDB/","text":"Learning MySQL and MariaDB 1 Introduction MySQL is an open source, multithreaded, relational database management system. Many features contribute to MySQL s standing as a superb database system. Its speed is one of its most prominent features. MySQL and MariaDB are remarkably scalable , and are able to handle tens of thousands of tables and billions of rows of data. 2 Installing MySQL You may visit Official website to download mysql community edition. Remember to choose .dmg package, which is easy to configure and start. To finish installation, set a password of your mysql server. Don't forget to export mysql path to your bash configure file. To validate the completion of installation, just go to System Preferences and check whether the option of MySQL exists. Setting Initial Password for root You can change the password for the root user in MySQL in a few ways. One way is to use the administration utility, mysqladmin . Enter the following from the command line: mysqladmin -u root -p flush-privileges password new_pwd 3 The Basics and the mysql Client The mysql Client With the mysql client, you may interact with the MySQL or MariaDB server from the command line. Connecting to the Server Once you know your MySQL username and password, you can connect to the MySQL server with the mysql client. mysql -u root -p 4 Creating Databases and Tables Creating a Database Use the SQL statement CREATE DATABASE. create database database - name ; To validate your creation of the database, show databases ; To delete a database, using the SQL statement DROP DATABASE drop database database - name ; 13 Backing Up and Restoring Databases Making Backups If you have shell or telnet access to your web server, you can backup your MySQL data by using the mysqldump command. $ mysqldump --opt -u [ uname ] -p [ pass ] [ dbname ] [ backupfile.sql ] If you want to back up all the databases in the server at one time you should use the --all-databases option. It tells MySQL to dump all the databases it has in storage. $ mysqldump -u root -p --all-databases alldb_backup.sql Restoring Backups If data is lost in MySQL, but you ve been using mysqldump to make regular backups of the data, you can use the dump files to restore the data. mysql - u [ uname ] - p [ pass ] [ db_to_restore ] [ backupfile . sql ]","title":"Chapter Learning MySQL and MariaDB"},{"location":"database/mysql/LearningMySQLandMariaDB/#learning-mysql-and-mariadb","text":"","title":"Learning MySQL and MariaDB"},{"location":"database/mysql/LearningMySQLandMariaDB/#1-introduction","text":"MySQL is an open source, multithreaded, relational database management system. Many features contribute to MySQL s standing as a superb database system. Its speed is one of its most prominent features. MySQL and MariaDB are remarkably scalable , and are able to handle tens of thousands of tables and billions of rows of data.","title":"1 Introduction"},{"location":"database/mysql/LearningMySQLandMariaDB/#2-installing-mysql","text":"You may visit Official website to download mysql community edition. Remember to choose .dmg package, which is easy to configure and start. To finish installation, set a password of your mysql server. Don't forget to export mysql path to your bash configure file. To validate the completion of installation, just go to System Preferences and check whether the option of MySQL exists.","title":"2 Installing MySQL"},{"location":"database/mysql/LearningMySQLandMariaDB/#setting-initial-password-for-root","text":"You can change the password for the root user in MySQL in a few ways. One way is to use the administration utility, mysqladmin . Enter the following from the command line: mysqladmin -u root -p flush-privileges password new_pwd","title":"Setting Initial Password for root"},{"location":"database/mysql/LearningMySQLandMariaDB/#3-the-basics-and-the-mysql-client","text":"","title":"3 The Basics and the mysql Client"},{"location":"database/mysql/LearningMySQLandMariaDB/#the-mysql-client","text":"With the mysql client, you may interact with the MySQL or MariaDB server from the command line.","title":"The mysql Client"},{"location":"database/mysql/LearningMySQLandMariaDB/#connecting-to-the-server","text":"Once you know your MySQL username and password, you can connect to the MySQL server with the mysql client. mysql -u root -p","title":"Connecting to the Server"},{"location":"database/mysql/LearningMySQLandMariaDB/#4-creating-databases-and-tables","text":"","title":"4 Creating Databases and Tables"},{"location":"database/mysql/LearningMySQLandMariaDB/#creating-a-database","text":"Use the SQL statement CREATE DATABASE. create database database - name ; To validate your creation of the database, show databases ; To delete a database, using the SQL statement DROP DATABASE drop database database - name ;","title":"Creating a Database"},{"location":"database/mysql/LearningMySQLandMariaDB/#13-backing-up-and-restoring-databases","text":"","title":"13 Backing Up and Restoring Databases"},{"location":"database/mysql/LearningMySQLandMariaDB/#making-backups","text":"If you have shell or telnet access to your web server, you can backup your MySQL data by using the mysqldump command. $ mysqldump --opt -u [ uname ] -p [ pass ] [ dbname ] [ backupfile.sql ] If you want to back up all the databases in the server at one time you should use the --all-databases option. It tells MySQL to dump all the databases it has in storage. $ mysqldump -u root -p --all-databases alldb_backup.sql","title":"Making Backups"},{"location":"database/mysql/LearningMySQLandMariaDB/#restoring-backups","text":"If data is lost in MySQL, but you ve been using mysqldump to make regular backups of the data, you can use the dump files to restore the data. mysql - u [ uname ] - p [ pass ] [ db_to_restore ] [ backupfile . sql ]","title":"Restoring Backups"},{"location":"java/","text":"Java HFJ Chapter 1: Dive in A Quick Dip Chapter 2: Classes and Objects Chapter 3: Primitives and References Chapter 4: Methods use Instance Variables Chapter 5: Writing a Program Chapter 6: Get to Know the Java API Chapter 7: Inheritance and Polymorphism Chapter 8: Interfaces and Abstract Classes Chapter 9: Constructors and Garbage Collection Chapter 10: Numbers and Statics Chapter 11: Exception Handling Chapter 12: Getting GUI Chapter 13: Using Swing Chapter 14: Serialization and File I/O Chapter 15: Networking and Threads Chapter 16: Collections and Generics Chapter 17: Packages, Jars and Deployment Chapter 18: Remote deploy with RMI Appendix: The Top Ten Topics HFDP Chapter 1: Strategy Pattern Chapter 2: Observer Pattern Chapter 3: Decorator Pattern Chapter 4: Factory Pattern Chapter 5: Singleton Pattern Chapter 6: Command Pattern Chapter 7: Adapter and Facade Patterns Chapter 8: Template Method Pattern Chapter 9: Iterator and Composite Patterns TIJ Chapter 1: Introduction Chapter 2: Introduction to Objects Chapter 3: Everything is an Object Chapter 4: Opertors Chapter 5: Controlling Execution Chapter 6: Initialization Cleanup Chapter 7: Access Control Chapter 8: Reusing Clases Chapter 9: Polymorphism Chapter 10: Interfaces Chapter 11: Inner Classes Chapter 12: Holding Your Objects Chapter 13: Error Handling with Exceptions Chapter 14: Strings Chapter 15: Type Information Chapter 16: Generics Chapter 17: Arrays Chapter 18: Containers in Depth Chapter 19: I/O Chapter 20: Enumerated Types Chapter 21: Annotations Chapter 22: Concurrency Chapter 23: Graphical User Interfaces UJVM Chapter 1 : \u8d70\u8fdbJava Chapter 2 : Java\u5185\u5b58\u533a\u57df\u4e0e\u5185\u5b58\u6ea2\u51fa\u6b63\u5e38 Chapter 3 : \u5783\u573e\u6536\u96c6\u5668\u4e0e\u5185\u5b58\u5206\u914d\u7b56\u7565 Chapter 4 : \u865a\u62df\u673a\u6027\u80fd\u76d1\u63a7\u4e0e\u6545\u969c\u5904\u7406\u5de5\u5177 Chapter 5 : \u8c03\u4f18\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u6218 Chapter 6 : \u7c7b\u6587\u4ef6\u7ed3\u6784 Chapter 7 : \u865a\u62df\u673a\u7c7b\u52a0\u8f7d\u673a\u5236 Chapter 8 : \u865a\u62df\u673a\u5b57\u8282\u7801\u6267\u884c\u5f15\u64ce Chapter 9 : \u7c7b\u52a0\u8f7d\u53ca\u6267\u884c\u5b50\u7cfb\u7edf\u7684\u6848\u4f8b\u4e0e\u5b9e\u6218 Chapter 10 : \u65e9\u671f(\u7f16\u8bd1\u671f)\u4f18\u5316 Chapter 11 : \u665a\u671f(\u8fd0\u884c\u671f)\u4f18\u5316 Chapter 12 : Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b Chapter 13 : \u7ebf\u7a0b\u5b89\u5168\u4e0e\u9501\u4f18\u5316 Appendix HotSpot\u865a\u62df\u673a\u4e3b\u8981\u53c2\u6570\u5217\u8868","title":"Contents"},{"location":"java/#java","text":"","title":"Java"},{"location":"java/#hfj","text":"Chapter 1: Dive in A Quick Dip Chapter 2: Classes and Objects Chapter 3: Primitives and References Chapter 4: Methods use Instance Variables Chapter 5: Writing a Program Chapter 6: Get to Know the Java API Chapter 7: Inheritance and Polymorphism Chapter 8: Interfaces and Abstract Classes Chapter 9: Constructors and Garbage Collection Chapter 10: Numbers and Statics Chapter 11: Exception Handling Chapter 12: Getting GUI Chapter 13: Using Swing Chapter 14: Serialization and File I/O Chapter 15: Networking and Threads Chapter 16: Collections and Generics Chapter 17: Packages, Jars and Deployment Chapter 18: Remote deploy with RMI Appendix: The Top Ten Topics","title":"HFJ"},{"location":"java/#hfdp","text":"Chapter 1: Strategy Pattern Chapter 2: Observer Pattern Chapter 3: Decorator Pattern Chapter 4: Factory Pattern Chapter 5: Singleton Pattern Chapter 6: Command Pattern Chapter 7: Adapter and Facade Patterns Chapter 8: Template Method Pattern Chapter 9: Iterator and Composite Patterns","title":"HFDP"},{"location":"java/#tij","text":"Chapter 1: Introduction Chapter 2: Introduction to Objects Chapter 3: Everything is an Object Chapter 4: Opertors Chapter 5: Controlling Execution Chapter 6: Initialization Cleanup Chapter 7: Access Control Chapter 8: Reusing Clases Chapter 9: Polymorphism Chapter 10: Interfaces Chapter 11: Inner Classes Chapter 12: Holding Your Objects Chapter 13: Error Handling with Exceptions Chapter 14: Strings Chapter 15: Type Information Chapter 16: Generics Chapter 17: Arrays Chapter 18: Containers in Depth Chapter 19: I/O Chapter 20: Enumerated Types Chapter 21: Annotations Chapter 22: Concurrency Chapter 23: Graphical User Interfaces","title":"TIJ"},{"location":"java/#ujvm","text":"Chapter 1 : \u8d70\u8fdbJava Chapter 2 : Java\u5185\u5b58\u533a\u57df\u4e0e\u5185\u5b58\u6ea2\u51fa\u6b63\u5e38 Chapter 3 : \u5783\u573e\u6536\u96c6\u5668\u4e0e\u5185\u5b58\u5206\u914d\u7b56\u7565 Chapter 4 : \u865a\u62df\u673a\u6027\u80fd\u76d1\u63a7\u4e0e\u6545\u969c\u5904\u7406\u5de5\u5177 Chapter 5 : \u8c03\u4f18\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u6218 Chapter 6 : \u7c7b\u6587\u4ef6\u7ed3\u6784 Chapter 7 : \u865a\u62df\u673a\u7c7b\u52a0\u8f7d\u673a\u5236 Chapter 8 : \u865a\u62df\u673a\u5b57\u8282\u7801\u6267\u884c\u5f15\u64ce Chapter 9 : \u7c7b\u52a0\u8f7d\u53ca\u6267\u884c\u5b50\u7cfb\u7edf\u7684\u6848\u4f8b\u4e0e\u5b9e\u6218 Chapter 10 : \u65e9\u671f(\u7f16\u8bd1\u671f)\u4f18\u5316 Chapter 11 : \u665a\u671f(\u8fd0\u884c\u671f)\u4f18\u5316 Chapter 12 : Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b Chapter 13 : \u7ebf\u7a0b\u5b89\u5168\u4e0e\u9501\u4f18\u5316 Appendix HotSpot\u865a\u62df\u673a\u4e3b\u8981\u53c2\u6570\u5217\u8868","title":"UJVM"},{"location":"java/hfdp/","text":"HFDP Chapter 1: Strategy Pattern Chapter 2: Observer Pattern Chapter 3: Decorator Pattern Chapter 4: Factory Pattern Chapter 5: Singleton Pattern Chapter 6: Command Pattern Chapter 7: Adapter and Facade Patterns Chapter 8: Template Method Pattern Chapter 9: Iterator and Composite Patterns","title":"Contents"},{"location":"java/hfdp/#hfdp","text":"Chapter 1: Strategy Pattern Chapter 2: Observer Pattern Chapter 3: Decorator Pattern Chapter 4: Factory Pattern Chapter 5: Singleton Pattern Chapter 6: Command Pattern Chapter 7: Adapter and Facade Patterns Chapter 8: Template Method Pattern Chapter 9: Iterator and Composite Patterns","title":"HFDP"},{"location":"java/hfdp/ch1/","text":"Head First Design Patterns 1 - Strategy Pattern Instead of code reuse, with patterns you get experience reuse. 1 Problem statement A Duck pond simulation game, SimUDuck , which can show a large variety of Duck species swimming and making quacking sounds. The initial designers of the system used standard OO techniques and created one Duck superclass from which all other Duck types inherit. Now the executives decides that ducks shall fly in the simulator. ONE OPTION: inheritance, add a fly method in the Duck class and then all the ducks will inherit it. HOWEVER, by putting fly in the superclass, you give flying ability to ALL ducks, including those that shouldn't. - you may want to override the fly method in the objects that shouldn't fly, such as rubber duck. HOWEVER, if you add many objects that can't fly ANOTHER OPTION: interface, make a Flyable() interface with a \ufb02y() method, make a Quackable() interface with a quack() method, override \ufb02y() and quack() for every new Duck subclass that\u2019s ever added to the program. HOWEVER, how are you gonna feel when you need to make a little change to the flying behavior... in all of the flying Duck subclasses. 2 Strategy Pattern The Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it. \u7b56\u7565\u6a21\u5f0f\u5b9a\u4e49\u4e86\u7b97\u6cd5\u7c07\uff0c\u5206\u522b\u5c01\u88c5\u8d77\u6765\uff0c\u8ba9\u4ed6\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\u3002\u7b56\u7565\u6a21\u5f0f\u8ba9\u7b97\u6cd5\u7684\u53d8\u5316\u72ec\u7acb\u4e8e\u4f7f\u7528\u7b97\u6cd5\u7684\u5ba2\u6237\u3002 Design Principle : identify the aspects of your application that vary and separate them from what stays the same. \u8bbe\u8ba1\u539f\u5219\uff1a\u627e\u51fa\u5e94\u7528\u4e2d\u53ef\u80fd\u9700\u8981\u53d8\u5316\u4e4b\u5904\uff0c\u628a\u4ed6\u4eec\u72ec\u7acb\u51fa\u6765\uff0c\u4e0d\u8981\u548c\u90a3\u4e9b\u4e0d\u9700\u8981\u53d8\u5316\u7684\u4ee3\u7801\u6df7\u5728\u4e00\u8d77\u3002 All patterns provide a way to let some part of a system vary independently of all other parts . We know that \ufb02y() and quack() are the parts of the Duck class that vary across ducks. To separate these behaviors from the Duck class, we\u2019ll pull both methods out of the Duck class and create a new set of classes to represent each behavior. So how are we going to design the set of classes that implement the \ufb02y and quack behaviors? Design Principle : Program to an interface, not an implementation. An Example: SimUDuck We\u2019ll use an interface to represent each behavior \u2013 for instance, FlyBehavior and QuackBehavior \u2013 and each implementation of a behavior will implement one of those interfaces. With this design, other types of objects can reuse our \ufb02y and quack behaviors because these behaviors are no longer hidden away in our Duck classes! And we can add new behaviors without modifying any of our existing behavior classes or touching any of the Duck classes that use flying behaviors. Duck public abstract class Duck { FlyBehavior flyBehavior ; QuackBehavior quackBehavior ; public Duck () { } public void setFlyBehavior ( FlyBehavior fb ) { flyBehavior = fb ; } public void setQuackBehavior ( QuackBehavior qb ) { quackBehavior = qb ; } abstract void display (); public void performFly () { flyBehavior . fly (); } public void performQuack () { quackBehavior . quack (); } public void swim () { System . out . println ( All ducks float, even decoys! ); } } Flybehavior public interface FlyBehavior { public void fly (); } public class FlyNoWay implements FlyBehavior { public void fly { System . out . println ( I can t fly ); } } public class FlyWithWings implements FlyBehavior { public void fly { System . out . println ( I m flying!! ); } } Quackbehavior public interface QuackBehavior { public void quack (); } public class Quack implements QuackBehavior { public void quack () { System . out . println ( Quack ); } } public class MuteQuack implements QuackBehavior { public void quack () { System . out . println ( Silence ); } } public class Squeak implements QuackBehavior { public void quack () { System . out . println ( Squeak ); } } Mallardduck public class MallardDuck extends Duck { public MallardDuck () { quackBehavior = new Quack (); flyBehavior = new FlyWithWings (); } public void display () { System . out . println ( I m a real Mallard duck ); } } Ducksimulator public class MiniDuckSimulator { public static void main ( String [] args ) { MallardDuck mallard = new MallardDuck (); RubberDuck rubberDuckie = new RubberDuck (); DecoyDuck decoy = new DecoyDuck (); Duck model = new ModelDuck (); mallard . performQuack (); rubberDuckie . performQuack (); decoy . performQuack (); model . performFly (); model . setFlyBehavior ( new FlyRocketPowered ()); model . performFly (); } } The big picture The Big Picture on encapsulated behaviors: HAS-A can be better than IS-A HAS-A can be better than IS-A: The HAS-A relationship is an interesting one: each duck has a FlyBehavior and a QuackBehavior to which it delegates flying and quacking. When you put two classes together like this you\u2019re using composition . Instead of inheriting their behavior, the ducks get their behavior by being composed with the right behavior object. Design Principle : Favor composition over inheritance. An Example: GameCar Car /* Client that can use the algorithms above interchangeably */ public abstract class Car { protected IBrakeBehavior brakeBehavior ; public void applyBrake () { brakeBehavior . brake (); } public void setBrakeBehavior ( final IBrakeBehavior brakeType ) { this . brakeBehavior = brakeType ; } } /* Client 1 uses one algorithm (Brake) in the constructor */ public class Sedan extends Car { public Sedan () { this . brakeBehavior = new Brake (); } } /* Client 2 uses another algorithm (BrakeWithABS) in the constructor */ public class SUV extends Car { public SUV () { this . brakeBehavior = new BrakeWithABS (); } } Ibrakebehavior /* Encapsulated family of Algorithms * Interface and its implementations */ public interface IBrakeBehavior { public void brake (); } public class BrakeWithABS implements IBrakeBehavior { public void brake () { System . out . println ( Brake with ABS applied ); } } public class Brake implements IBrakeBehavior { public void brake () { System . out . println ( Simple Brake applied ); } } Carexample /* Using the Car example */ public class CarExample { public static void main ( final String [] arguments ) { Car sedanCar = new Sedan (); sedanCar . applyBrake (); // This will invoke class Brake Car suvCar = new SUV (); suvCar . applyBrake (); // This will invoke class BrakeWithABS // set brake behavior dynamically suvCar . setBrakeBehavior ( new Brake () ); suvCar . applyBrake (); // This will invoke class Brake } } UML Example: Collections.sort() Collection.sort(List, Comparator) method, where Comparator is Strategy and Collections.sort() is Context. Because of this pattern your sort method can sort any object, the object which doesn't exists when this method was written. As long as, Object will implement Comparator interface (Strategy interface), Collections.sort() method will sort it.","title":"Chapter 1: Strategy Pattern "},{"location":"java/hfdp/ch1/#head-first-design-patterns-1-strategy-pattern","text":"Instead of code reuse, with patterns you get experience reuse.","title":"Head First Design Patterns 1 - Strategy Pattern"},{"location":"java/hfdp/ch1/#1-problem-statement","text":"A Duck pond simulation game, SimUDuck , which can show a large variety of Duck species swimming and making quacking sounds. The initial designers of the system used standard OO techniques and created one Duck superclass from which all other Duck types inherit. Now the executives decides that ducks shall fly in the simulator. ONE OPTION: inheritance, add a fly method in the Duck class and then all the ducks will inherit it. HOWEVER, by putting fly in the superclass, you give flying ability to ALL ducks, including those that shouldn't. - you may want to override the fly method in the objects that shouldn't fly, such as rubber duck. HOWEVER, if you add many objects that can't fly ANOTHER OPTION: interface, make a Flyable() interface with a \ufb02y() method, make a Quackable() interface with a quack() method, override \ufb02y() and quack() for every new Duck subclass that\u2019s ever added to the program. HOWEVER, how are you gonna feel when you need to make a little change to the flying behavior... in all of the flying Duck subclasses.","title":"1 Problem statement"},{"location":"java/hfdp/ch1/#2-strategy-pattern","text":"The Strategy Pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable. Strategy lets the algorithm vary independently from clients that use it. \u7b56\u7565\u6a21\u5f0f\u5b9a\u4e49\u4e86\u7b97\u6cd5\u7c07\uff0c\u5206\u522b\u5c01\u88c5\u8d77\u6765\uff0c\u8ba9\u4ed6\u4eec\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u66ff\u6362\u3002\u7b56\u7565\u6a21\u5f0f\u8ba9\u7b97\u6cd5\u7684\u53d8\u5316\u72ec\u7acb\u4e8e\u4f7f\u7528\u7b97\u6cd5\u7684\u5ba2\u6237\u3002 Design Principle : identify the aspects of your application that vary and separate them from what stays the same. \u8bbe\u8ba1\u539f\u5219\uff1a\u627e\u51fa\u5e94\u7528\u4e2d\u53ef\u80fd\u9700\u8981\u53d8\u5316\u4e4b\u5904\uff0c\u628a\u4ed6\u4eec\u72ec\u7acb\u51fa\u6765\uff0c\u4e0d\u8981\u548c\u90a3\u4e9b\u4e0d\u9700\u8981\u53d8\u5316\u7684\u4ee3\u7801\u6df7\u5728\u4e00\u8d77\u3002 All patterns provide a way to let some part of a system vary independently of all other parts . We know that \ufb02y() and quack() are the parts of the Duck class that vary across ducks. To separate these behaviors from the Duck class, we\u2019ll pull both methods out of the Duck class and create a new set of classes to represent each behavior. So how are we going to design the set of classes that implement the \ufb02y and quack behaviors? Design Principle : Program to an interface, not an implementation.","title":"2 Strategy Pattern"},{"location":"java/hfdp/ch1/#an-example-simuduck","text":"We\u2019ll use an interface to represent each behavior \u2013 for instance, FlyBehavior and QuackBehavior \u2013 and each implementation of a behavior will implement one of those interfaces. With this design, other types of objects can reuse our \ufb02y and quack behaviors because these behaviors are no longer hidden away in our Duck classes! And we can add new behaviors without modifying any of our existing behavior classes or touching any of the Duck classes that use flying behaviors. Duck public abstract class Duck { FlyBehavior flyBehavior ; QuackBehavior quackBehavior ; public Duck () { } public void setFlyBehavior ( FlyBehavior fb ) { flyBehavior = fb ; } public void setQuackBehavior ( QuackBehavior qb ) { quackBehavior = qb ; } abstract void display (); public void performFly () { flyBehavior . fly (); } public void performQuack () { quackBehavior . quack (); } public void swim () { System . out . println ( All ducks float, even decoys! ); } } Flybehavior public interface FlyBehavior { public void fly (); } public class FlyNoWay implements FlyBehavior { public void fly { System . out . println ( I can t fly ); } } public class FlyWithWings implements FlyBehavior { public void fly { System . out . println ( I m flying!! ); } } Quackbehavior public interface QuackBehavior { public void quack (); } public class Quack implements QuackBehavior { public void quack () { System . out . println ( Quack ); } } public class MuteQuack implements QuackBehavior { public void quack () { System . out . println ( Silence ); } } public class Squeak implements QuackBehavior { public void quack () { System . out . println ( Squeak ); } } Mallardduck public class MallardDuck extends Duck { public MallardDuck () { quackBehavior = new Quack (); flyBehavior = new FlyWithWings (); } public void display () { System . out . println ( I m a real Mallard duck ); } } Ducksimulator public class MiniDuckSimulator { public static void main ( String [] args ) { MallardDuck mallard = new MallardDuck (); RubberDuck rubberDuckie = new RubberDuck (); DecoyDuck decoy = new DecoyDuck (); Duck model = new ModelDuck (); mallard . performQuack (); rubberDuckie . performQuack (); decoy . performQuack (); model . performFly (); model . setFlyBehavior ( new FlyRocketPowered ()); model . performFly (); } }","title":"An Example: SimUDuck"},{"location":"java/hfdp/ch1/#the-big-picture","text":"The Big Picture on encapsulated behaviors:","title":"The big picture"},{"location":"java/hfdp/ch1/#has-a-can-be-better-than-is-a","text":"HAS-A can be better than IS-A: The HAS-A relationship is an interesting one: each duck has a FlyBehavior and a QuackBehavior to which it delegates flying and quacking. When you put two classes together like this you\u2019re using composition . Instead of inheriting their behavior, the ducks get their behavior by being composed with the right behavior object. Design Principle : Favor composition over inheritance.","title":"HAS-A can be better than IS-A"},{"location":"java/hfdp/ch1/#an-example-gamecar","text":"Car /* Client that can use the algorithms above interchangeably */ public abstract class Car { protected IBrakeBehavior brakeBehavior ; public void applyBrake () { brakeBehavior . brake (); } public void setBrakeBehavior ( final IBrakeBehavior brakeType ) { this . brakeBehavior = brakeType ; } } /* Client 1 uses one algorithm (Brake) in the constructor */ public class Sedan extends Car { public Sedan () { this . brakeBehavior = new Brake (); } } /* Client 2 uses another algorithm (BrakeWithABS) in the constructor */ public class SUV extends Car { public SUV () { this . brakeBehavior = new BrakeWithABS (); } } Ibrakebehavior /* Encapsulated family of Algorithms * Interface and its implementations */ public interface IBrakeBehavior { public void brake (); } public class BrakeWithABS implements IBrakeBehavior { public void brake () { System . out . println ( Brake with ABS applied ); } } public class Brake implements IBrakeBehavior { public void brake () { System . out . println ( Simple Brake applied ); } } Carexample /* Using the Car example */ public class CarExample { public static void main ( final String [] arguments ) { Car sedanCar = new Sedan (); sedanCar . applyBrake (); // This will invoke class Brake Car suvCar = new SUV (); suvCar . applyBrake (); // This will invoke class BrakeWithABS // set brake behavior dynamically suvCar . setBrakeBehavior ( new Brake () ); suvCar . applyBrake (); // This will invoke class Brake } }","title":"An Example: GameCar"},{"location":"java/hfdp/ch1/#uml","text":"","title":"UML"},{"location":"java/hfdp/ch1/#example-collectionssort","text":"Collection.sort(List, Comparator) method, where Comparator is Strategy and Collections.sort() is Context. Because of this pattern your sort method can sort any object, the object which doesn't exists when this method was written. As long as, Object will implement Comparator interface (Strategy interface), Collections.sort() method will sort it.","title":"Example: Collections.sort()"},{"location":"java/hfdp/ch10/","text":"Head First Design Patterns 10 - State Pattern","title":"Ch10"},{"location":"java/hfdp/ch10/#head-first-design-patterns-10-state-pattern","text":"","title":"Head First Design Patterns 10 - State Pattern"},{"location":"java/hfdp/ch11/","text":"Head First Design Patterns 11 - Proxy Pattern","title":"Ch11"},{"location":"java/hfdp/ch11/#head-first-design-patterns-11-proxy-pattern","text":"","title":"Head First Design Patterns 11 - Proxy Pattern"},{"location":"java/hfdp/ch12/","text":"Head First Design Patterns 12 - Compound Patterns","title":"Ch12"},{"location":"java/hfdp/ch12/#head-first-design-patterns-12-compound-patterns","text":"","title":"Head First Design Patterns 12 - Compound Patterns"},{"location":"java/hfdp/ch13/","text":"Head First Design Patterns 13 - Better Living with Patterns","title":"Ch13"},{"location":"java/hfdp/ch13/#head-first-design-patterns-13-better-living-with-patterns","text":"","title":"Head First Design Patterns 13 - Better Living with Patterns"},{"location":"java/hfdp/ch2/","text":"Head First Design Patterns 2 - Observer Pattern 1 Problem Statement The task is to build an Internet-based weather monitoring station. The weather station will be based on WeatherData object, which tracks current weather conditions. 2 Observer PTTERN Meet the Observer Pattern You know how newspaper or magazine subscriptions work: A newspaper publisher goes into business and begins publishing newspapers. You subscribe to a particular publisher, and every time there\u2019s a new edition it gets delivered to you. As long as you remain a subscriber, you get new newspapers. You unsubscribe when you don\u2019t want papers anymore, and they stop being delivered. While the publisher remains in business, people, hotels, airlines and other businesses constantly subscribe and unsubscribe to the newspaper. Publishers + Subscribers = Observer Pattern The Observer Pattern defined The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically. \u89c2\u5bdf\u8005\u6a21\u5f0f\u5b9a\u4e49\u4e86\u5bf9\u8c61\u4e4b\u95f4\u7684\u4e00\u5bf9\u591a\u4f9d\u8d56\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u6539\u53d8\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u6240\u6709\u4f9d\u8d56\u8005\u90fd\u4f1a\u6536\u5230\u901a\u77e5\u5e76\u81ea\u52a8\u66f4\u65b0\u3002 Class Diagram Objects use Subject interface to register as observers and also to remove themselves from being observers. A concrete Subject always implements the Subject interface. In addition to the register and remove methods, the concrete Subject implements a notifyObserver method that is used to update all the current observers whenever state changes. The concrete Subject may also have methods for setting and getting its state. All potential observers need to implement the Observer interface. This interface just has one method, update() , that gets called when the Subject 's state changes. Loose Coupling When two objects are loosely coupled, they can interact, but have very little knowledge of each other. Loosely coupled designs allow us to build flexible OO systems that can handle change because they minimize the interdependency between objects. The Observer Pattern provides an object design where subjects and observers are loosely coupled. The only thing the Subject knows about an Observer is that it implements a certain interface (the Observer interface). We can add new observers at any time. We never need to modify the Subject to add new types of observers. We can reuse subjects or observers independently of each other. Changes to either the Subject or an Observer will not affect the other. Design Principle : Strive for loosely coupled designs between objects that interact. An Example: A Weather Station Subject public interface Subject { public void registerObserver ( Observer o ); public void removeObserver ( Observer o ); public void notifyObservers (); } public class WeatherData implements Subject { private ArrayList Observer observers ; private float temperature ; private float humidity ; private float pressure ; public WeatherData () { observers = new ArrayList Observer (); } public void registerObserver ( Observer o ) { observers . add ( o ); } public void removeObserver ( Observer o ) { int i = observers . indexOf ( o ); if ( i = 0 ) { observers . remove ( i ); } } public void notifyObservers () { for ( Observer observer : observers ) { observer . update ( temperature , humidity , pressure ); } } public void measurementsChanged () { notifyObservers (); } public void setMeasurements ( float temperature , float humidity , float pressure ) { this . temperature = temperature ; this . humidity = humidity ; this . pressure = pressure ; measurementsChanged (); } public float getTemperature () { return temperature ; } public float getHumidity () { return humidity ; } public float getPressure () { return pressure ; } } Observer public interface Observer { public void update ( float temp , float humidity , float pressure ); } public interface DisplayElement { public void display (); } public class StatisticsDisplay implements Observer , DisplayElement { private float maxTemp = 0.0f ; private float minTemp = 200 ; private float tempSum = 0.0f ; private int numReadings ; private WeatherData weatherData ; public StatisticsDisplay ( WeatherData weatherData ) { this . weatherData = weatherData ; weatherData . registerObserver ( this ); } public void update ( float temp , float humidity , float pressure ) { tempSum += temp ; numReadings ++; if ( temp maxTemp ) { maxTemp = temp ; } if ( temp minTemp ) { minTemp = temp ; } display (); } public void display () { System . out . println ( Avg/Max/Min temperature = + ( tempSum / numReadings ) + / + maxTemp + / + minTemp ); } } Weatherstation public class WeatherStation { public static void main ( String [] args ) { WeatherData weatherData = new WeatherData (); CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay ( weatherData ); StatisticsDisplay statisticsDisplay = new StatisticsDisplay ( weatherData ); ForecastDisplay forecastDisplay = new ForecastDisplay ( weatherData ); weatherData . setMeasurements ( 80 , 65 , 30.4f ); weatherData . setMeasurements ( 82 , 70 , 29.2f ); weatherData . setMeasurements ( 78 , 90 , 29.2f ); } } Java's Buit-in Observer Pattern With Java's built-in support, all you have to do is extend Observable and tell it when to notify the Observers. The API does the rest for you. HOWEVER, it is limited, and DEPRECATED!","title":"Chapter 2: Observer Pattern"},{"location":"java/hfdp/ch2/#head-first-design-patterns-2-observer-pattern","text":"","title":"Head First Design Patterns 2 - Observer Pattern"},{"location":"java/hfdp/ch2/#1-problem-statement","text":"The task is to build an Internet-based weather monitoring station. The weather station will be based on WeatherData object, which tracks current weather conditions.","title":"1 Problem Statement"},{"location":"java/hfdp/ch2/#2-observer-pttern","text":"","title":"2 Observer PTTERN"},{"location":"java/hfdp/ch2/#meet-the-observer-pattern","text":"You know how newspaper or magazine subscriptions work: A newspaper publisher goes into business and begins publishing newspapers. You subscribe to a particular publisher, and every time there\u2019s a new edition it gets delivered to you. As long as you remain a subscriber, you get new newspapers. You unsubscribe when you don\u2019t want papers anymore, and they stop being delivered. While the publisher remains in business, people, hotels, airlines and other businesses constantly subscribe and unsubscribe to the newspaper. Publishers + Subscribers = Observer Pattern","title":"Meet the Observer Pattern"},{"location":"java/hfdp/ch2/#the-observer-pattern-defined","text":"The Observer Pattern defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically. \u89c2\u5bdf\u8005\u6a21\u5f0f\u5b9a\u4e49\u4e86\u5bf9\u8c61\u4e4b\u95f4\u7684\u4e00\u5bf9\u591a\u4f9d\u8d56\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u6539\u53d8\u72b6\u6001\u65f6\uff0c\u5b83\u7684\u6240\u6709\u4f9d\u8d56\u8005\u90fd\u4f1a\u6536\u5230\u901a\u77e5\u5e76\u81ea\u52a8\u66f4\u65b0\u3002","title":"The Observer Pattern defined"},{"location":"java/hfdp/ch2/#class-diagram","text":"Objects use Subject interface to register as observers and also to remove themselves from being observers. A concrete Subject always implements the Subject interface. In addition to the register and remove methods, the concrete Subject implements a notifyObserver method that is used to update all the current observers whenever state changes. The concrete Subject may also have methods for setting and getting its state. All potential observers need to implement the Observer interface. This interface just has one method, update() , that gets called when the Subject 's state changes.","title":"Class Diagram"},{"location":"java/hfdp/ch2/#loose-coupling","text":"When two objects are loosely coupled, they can interact, but have very little knowledge of each other. Loosely coupled designs allow us to build flexible OO systems that can handle change because they minimize the interdependency between objects. The Observer Pattern provides an object design where subjects and observers are loosely coupled. The only thing the Subject knows about an Observer is that it implements a certain interface (the Observer interface). We can add new observers at any time. We never need to modify the Subject to add new types of observers. We can reuse subjects or observers independently of each other. Changes to either the Subject or an Observer will not affect the other. Design Principle : Strive for loosely coupled designs between objects that interact.","title":"Loose Coupling"},{"location":"java/hfdp/ch2/#an-example-a-weather-station","text":"Subject public interface Subject { public void registerObserver ( Observer o ); public void removeObserver ( Observer o ); public void notifyObservers (); } public class WeatherData implements Subject { private ArrayList Observer observers ; private float temperature ; private float humidity ; private float pressure ; public WeatherData () { observers = new ArrayList Observer (); } public void registerObserver ( Observer o ) { observers . add ( o ); } public void removeObserver ( Observer o ) { int i = observers . indexOf ( o ); if ( i = 0 ) { observers . remove ( i ); } } public void notifyObservers () { for ( Observer observer : observers ) { observer . update ( temperature , humidity , pressure ); } } public void measurementsChanged () { notifyObservers (); } public void setMeasurements ( float temperature , float humidity , float pressure ) { this . temperature = temperature ; this . humidity = humidity ; this . pressure = pressure ; measurementsChanged (); } public float getTemperature () { return temperature ; } public float getHumidity () { return humidity ; } public float getPressure () { return pressure ; } } Observer public interface Observer { public void update ( float temp , float humidity , float pressure ); } public interface DisplayElement { public void display (); } public class StatisticsDisplay implements Observer , DisplayElement { private float maxTemp = 0.0f ; private float minTemp = 200 ; private float tempSum = 0.0f ; private int numReadings ; private WeatherData weatherData ; public StatisticsDisplay ( WeatherData weatherData ) { this . weatherData = weatherData ; weatherData . registerObserver ( this ); } public void update ( float temp , float humidity , float pressure ) { tempSum += temp ; numReadings ++; if ( temp maxTemp ) { maxTemp = temp ; } if ( temp minTemp ) { minTemp = temp ; } display (); } public void display () { System . out . println ( Avg/Max/Min temperature = + ( tempSum / numReadings ) + / + maxTemp + / + minTemp ); } } Weatherstation public class WeatherStation { public static void main ( String [] args ) { WeatherData weatherData = new WeatherData (); CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay ( weatherData ); StatisticsDisplay statisticsDisplay = new StatisticsDisplay ( weatherData ); ForecastDisplay forecastDisplay = new ForecastDisplay ( weatherData ); weatherData . setMeasurements ( 80 , 65 , 30.4f ); weatherData . setMeasurements ( 82 , 70 , 29.2f ); weatherData . setMeasurements ( 78 , 90 , 29.2f ); } }","title":"An Example: A Weather Station"},{"location":"java/hfdp/ch2/#javas-buit-in-observer-pattern","text":"With Java's built-in support, all you have to do is extend Observable and tell it when to notify the Observers. The API does the rest for you. HOWEVER, it is limited, and DEPRECATED!","title":"Java's Buit-in Observer Pattern"},{"location":"java/hfdp/ch3/","text":"Head First Design Patterns 3 - Decorator Pattern 1 Starbuzz Coffee Starbuzz Coffee has made a name for itself as the fastest growing coffee shop around. Because they've grown so quickly, they're scrambling to update their ordering systems to match their beverage offerings. When they first went into business they designed their classes like this... In addition to coffee, one can also ask for several condiments like steamed milk, soy, and mocha (otherwise known as chocolate), and have it all topped off with whipped milk. Here\u2019s their first attempt... The Open-Closed Principle Design Principle : Classes should be open for extension, but closed for modification. 2 Decorator Pattern The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality. \u88c5\u9970\u5668\u6a21\u5f0f\u52a8\u6001\u5730\u5c06\u989d\u5916\u7684\u8d23\u4efb\u9644\u52a0\u5230\u5bf9\u8c61\u4e0a\u3002\u88c5\u9970\u5668\u63d0\u4f9b\u4e86\u6bd4\u7ee7\u627f\u529f\u80fd\u66f4\u7075\u6d3b\u7684\u66ff\u4ee3\u65b9\u6848\u3002 Think of decorator objects as \"wrappers\". Decorators have the same supertype as the objects they decorate. You can use one or more decorators to wrap an object. Given that the decorator has the same supertype as the object it decorates, we can pass around a decorated object in place of the original (wrapped) object. The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job. Objects can be decorated at any time, so we can decorate objects dynamically at runtime with as many decorators as we like. Class Diagram Each component can be used on its own, or wrapped by a decorator. The ConcreteComponent is the object we're going to dynamically add new behavior to. It extends component . Each decorator HAS-A (wraps) a component, which means the decorator has an instance variable that holds a reference to a component. Decorators implement the same interface or abstract class as the component they are going to decorate. The ConcreteDecorator has an instance variable for the thing it decorate (the Component the Decorator wraps). Decorators can add new methods; however, new behavior is typically added by doing computation before or after an existing method in the component. decorating beverages Beverage public abstract class Beverage { String description = Unknown Beverage ; public String getDescription () { return description ; } public abstract double cost (); } public class HouseBlend extends Beverage { public HouseBlend () { description = House Blend Coffee ; } public double cost () { return .89 ; } } public class Espresso extends Beverage { public Espresso () { description = Espresso ; } public double cost () { return 1.99 ; } } public class Decaf extends Beverage { public Decaf () { description = Decaf Coffee ; } public double cost () { return 1.05 ; } } Condimentdecorator public abstract class CondimentDecorator extends Beverage { public abstract String getDescription (); } public class Milk extends CondimentDecorator { Beverage beverage ; public Milk ( Beverage beverage ) { this . beverage = beverage ; } public String getDescription () { return beverage . getDescription () + , Milk ; } public double cost () { return .10 + beverage . cost (); } } public class Mocha extends CondimentDecorator { Beverage beverage ; public Mocha ( Beverage beverage ) { this . beverage = beverage ; } public String getDescription () { return beverage . getDescription () + , Mocha ; } public double cost () { return .20 + beverage . cost (); } } Starbuzzcoffee public class StarbuzzCoffee { public static void main ( String args []) { Beverage beverage = new Espresso (); System . out . println ( beverage . getDescription () + $ + beverage . cost ()); Beverage beverage2 = new DarkRoast (); beverage2 = new Mocha ( beverage2 ); beverage2 = new Mocha ( beverage2 ); beverage2 = new Whip ( beverage2 ); System . out . println ( beverage2 . getDescription () + $ + beverage2 . cost ()); Beverage beverage3 = new HouseBlend (); beverage3 = new Soy ( beverage3 ); beverage3 = new Mocha ( beverage3 ); beverage3 = new Whip ( beverage3 ); System . out . println ( beverage3 . getDescription () + $ + beverage3 . cost ()); } } 3 Decorators in Java I/O The java.io package is largely based on decorator. Here\u2019s a typical set of objects that use decorators to add functionality to reading data from a file: Java I/O also points out one of the downsides of the Decorator Pattern: designs using this pattern often result in a large number of small classes that can be overwhelming to a developer trying to use the Decorator-based API.","title":"Chapter 3: Decorator Pattern "},{"location":"java/hfdp/ch3/#head-first-design-patterns-3-decorator-pattern","text":"","title":"Head First Design Patterns 3 - Decorator Pattern"},{"location":"java/hfdp/ch3/#1-starbuzz-coffee","text":"Starbuzz Coffee has made a name for itself as the fastest growing coffee shop around. Because they've grown so quickly, they're scrambling to update their ordering systems to match their beverage offerings. When they first went into business they designed their classes like this... In addition to coffee, one can also ask for several condiments like steamed milk, soy, and mocha (otherwise known as chocolate), and have it all topped off with whipped milk. Here\u2019s their first attempt...","title":"1 Starbuzz Coffee"},{"location":"java/hfdp/ch3/#the-open-closed-principle","text":"Design Principle : Classes should be open for extension, but closed for modification.","title":"The Open-Closed Principle"},{"location":"java/hfdp/ch3/#2-decorator-pattern","text":"The Decorator Pattern attaches additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality. \u88c5\u9970\u5668\u6a21\u5f0f\u52a8\u6001\u5730\u5c06\u989d\u5916\u7684\u8d23\u4efb\u9644\u52a0\u5230\u5bf9\u8c61\u4e0a\u3002\u88c5\u9970\u5668\u63d0\u4f9b\u4e86\u6bd4\u7ee7\u627f\u529f\u80fd\u66f4\u7075\u6d3b\u7684\u66ff\u4ee3\u65b9\u6848\u3002 Think of decorator objects as \"wrappers\". Decorators have the same supertype as the objects they decorate. You can use one or more decorators to wrap an object. Given that the decorator has the same supertype as the object it decorates, we can pass around a decorated object in place of the original (wrapped) object. The decorator adds its own behavior either before and/or after delegating to the object it decorates to do the rest of the job. Objects can be decorated at any time, so we can decorate objects dynamically at runtime with as many decorators as we like.","title":"2 Decorator Pattern"},{"location":"java/hfdp/ch3/#class-diagram","text":"Each component can be used on its own, or wrapped by a decorator. The ConcreteComponent is the object we're going to dynamically add new behavior to. It extends component . Each decorator HAS-A (wraps) a component, which means the decorator has an instance variable that holds a reference to a component. Decorators implement the same interface or abstract class as the component they are going to decorate. The ConcreteDecorator has an instance variable for the thing it decorate (the Component the Decorator wraps). Decorators can add new methods; however, new behavior is typically added by doing computation before or after an existing method in the component.","title":"Class Diagram"},{"location":"java/hfdp/ch3/#decorating-beverages","text":"Beverage public abstract class Beverage { String description = Unknown Beverage ; public String getDescription () { return description ; } public abstract double cost (); } public class HouseBlend extends Beverage { public HouseBlend () { description = House Blend Coffee ; } public double cost () { return .89 ; } } public class Espresso extends Beverage { public Espresso () { description = Espresso ; } public double cost () { return 1.99 ; } } public class Decaf extends Beverage { public Decaf () { description = Decaf Coffee ; } public double cost () { return 1.05 ; } } Condimentdecorator public abstract class CondimentDecorator extends Beverage { public abstract String getDescription (); } public class Milk extends CondimentDecorator { Beverage beverage ; public Milk ( Beverage beverage ) { this . beverage = beverage ; } public String getDescription () { return beverage . getDescription () + , Milk ; } public double cost () { return .10 + beverage . cost (); } } public class Mocha extends CondimentDecorator { Beverage beverage ; public Mocha ( Beverage beverage ) { this . beverage = beverage ; } public String getDescription () { return beverage . getDescription () + , Mocha ; } public double cost () { return .20 + beverage . cost (); } } Starbuzzcoffee public class StarbuzzCoffee { public static void main ( String args []) { Beverage beverage = new Espresso (); System . out . println ( beverage . getDescription () + $ + beverage . cost ()); Beverage beverage2 = new DarkRoast (); beverage2 = new Mocha ( beverage2 ); beverage2 = new Mocha ( beverage2 ); beverage2 = new Whip ( beverage2 ); System . out . println ( beverage2 . getDescription () + $ + beverage2 . cost ()); Beverage beverage3 = new HouseBlend (); beverage3 = new Soy ( beverage3 ); beverage3 = new Mocha ( beverage3 ); beverage3 = new Whip ( beverage3 ); System . out . println ( beverage3 . getDescription () + $ + beverage3 . cost ()); } }","title":"decorating beverages"},{"location":"java/hfdp/ch3/#3-decorators-in-java-io","text":"The java.io package is largely based on decorator. Here\u2019s a typical set of objects that use decorators to add functionality to reading data from a file: Java I/O also points out one of the downsides of the Decorator Pattern: designs using this pattern often result in a large number of small classes that can be overwhelming to a developer trying to use the Decorator-based API.","title":"3 Decorators in Java I/O"},{"location":"java/hfdp/ch4/","text":"Head First Design Patterns 4 - Factory Pattern 1 Simple Factory Let s say you have a pizza shop, and as a cutting-edge pizza store owner in Objectville you might end up writing some code like this: Pizza orderPizza () { // For flexibility, we really want this to be an abstract class or interface, // but we can t directly instantiate either of those. Pizza pizza = new Pizza (); pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } But you need more than one type of pizza... Pizza orderPizza ( String type ) { Pizza pizza ; if ( type . equals ( ldquo ; cheese rdquo ;)) { pizza = new CheesePizza (); } else if ( type . equals ( ldquo ; greek rdquo ;) { pizza = new GreekPizza (); } else if ( type . equals ( ldquo ; pepperoni rdquo ;) { pizza = new PepperoniPizza (); } // Once we have a Pizza, we prepare it // (you know, roll the dough, put on the sauce and add the toppings cheese), // then we bake it, cut it and box it! pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } But the pressure is on to add more pizza types... Encapsulating object creation Factories handle the details of object creation. Once we have a SimplePizzaFactory , our orderPizza() method just becomes a client of that object. Simplepizzafactory public class SimplePizzaFactory { public Pizza createPizza ( String type ) { Pizza pizza = null ; if ( type . equals ( ldquo ; cheese rdquo ;)) { pizza = new CheesePizza (); } else if ( type . equals ( ldquo ; pepperoni rdquo ;)) { pizza = new PepperoniPizza (); } else if ( type . equals ( ldquo ; clam rdquo ;)) { pizza = new ClamPizza (); } else if ( type . equals ( ldquo ; veggie rdquo ;)) { pizza = new VeggiePizza (); } // end if return pizza ; } // end createPizza } Pizzastore public class PizzaStore { // Now we give PizzaStore a reference to a SimplePizzaFactory. SimplePizzaFactory factory ; // PizzaStore gets the factory passes to it in the constructor. public PizzaStore ( SimplePizzaFactory factory ) { this . factory = factory ; } public Pizza orderPizza ( String type ) { Pizza pizza ; pizza = factory . createPizza ( type ); pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } } Class Diagram The Simple Factory is NOT actually a Design Pattern ; it s more of a programming IDIOM. But it is commonly used. 2 Factory Method Pattern Your Objectville PizzaStore has done so well that you ve trounced the competition and now everyone wants a PizzaStore in their own neighborhood. And now each franchise might want to offer different styles of pizzas (New York, Chicago, and California, etc), depending on where the franchise store is located and the tastes of the local pizza connoisseurs. Pizzastore public abstract class PizzaStore { abstract Pizza createPizza ( String item ); public Pizza orderPizza ( String type ) { Pizza pizza = createPizza ( type ); System . out . println ( --- Making a + pizza . getName () + --- ); pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } } public class NYPizzaStore extends PizzaStore { Pizza createPizza ( String item ) { if ( item . equals ( cheese )) { return new NYStyleCheesePizza (); } else if ( item . equals ( veggie )) { return new NYStyleVeggiePizza (); } else if ( item . equals ( clam )) { return new NYStyleClamPizza (); } else if ( item . equals ( pepperoni )) { return new NYStylePepperoniPizza (); } else return null ; } } public class NYPizzaStore extends PizzaStore { Pizza createPizza ( String item ) { if ( item . equals ( cheese )) { return new NYStyleCheesePizza (); } else if ( item . equals ( veggie )) { return new NYStyleVeggiePizza (); } else if ( item . equals ( clam )) { return new NYStyleClamPizza (); } else if ( item . equals ( pepperoni )) { return new NYStylePepperoniPizza (); } else return null ; } } Pizza public abstract class Pizza { String name ; String dough ; String sauce ; ArrayList String toppings = new ArrayList String (); void prepare () { System . out . println ( Prepare + name ); System . out . println ( Tossing dough... ); System . out . println ( Adding sauce... ); System . out . println ( Adding toppings: ); for ( String topping : toppings ) { System . out . println ( + topping ); } } void bake () { System . out . println ( Bake for 25 minutes at 350 ); } void cut () { System . out . println ( Cut the pizza into diagonal slices ); } void box () { System . out . println ( Place pizza in official PizzaStore box ); } public String getName () { return name ; } public String toString () { StringBuffer display = new StringBuffer (); display . append ( ---- + name + ----\\n ); display . append ( dough + \\n ); display . append ( sauce + \\n ); for ( String topping : toppings ) { display . append ( topping + \\n ); } return display . toString (); } } public class NYStyleCheesePizza extends Pizza { public NYStyleCheesePizza () { name = NY Style Sauce and Cheese Pizza ; dough = Thin Crust Dough ; sauce = Marinara Sauce ; toppings . add ( Grated Reggiano Cheese ); } } public class ChicagoStyleClamPizza extends Pizza { public ChicagoStyleClamPizza () { name = Chicago Style Clam Pizza ; dough = Extra Thick Crust Dough ; sauce = Plum Tomato Sauce ; toppings . add ( Shredded Mozzarella Cheese ); toppings . add ( Frozen Clams from Chesapeake Bay ); } void cut () { System . out . println ( Cutting the pizza into square slices ); } } Pizzatestdrive public class PizzaTestDrive { public static void main ( String [] args ) { PizzaStore nyStore = new NYPizzaStore (); PizzaStore chicagoStore = new ChicagoPizzaStore (); Pizza pizza = nyStore . orderPizza ( cheese ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( cheese ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); pizza = nyStore . orderPizza ( clam ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( clam ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); pizza = nyStore . orderPizza ( pepperoni ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( pepperoni ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); pizza = nyStore . orderPizza ( veggie ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( veggie ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); } } Definition The Factory Method Pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses. Class Diagram Example: Calendar java.util.Calendar is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields such as YEAR , MONTH , DAY_OF_MONTH , HOUR , and so on. Calendar provides a class method, getInstance , for getting a generally useful object of this type. Calendar 's getInstance method returns a Calendar object whose calendar fields have been initialized with the current date and time: Calendar rightNow = Calendar . getInstance (); . Dependency inversion principle The Dependency Inversion Principle: Depend upon abstractions. Do not depend upon concrete classes. A few guidelines to help you follow the Principle: No variable should hold a reference to a concrete class. No class should derive from a concrete class. No method should override an implemented method of any of its base classes. 3 Abstract Factory Pattern Definition The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes. Class Diagram Factory Method and Abstract Factory compared","title":"Chapter 4: Factory Pattern"},{"location":"java/hfdp/ch4/#head-first-design-patterns-4-factory-pattern","text":"","title":"Head First Design Patterns 4 - Factory Pattern"},{"location":"java/hfdp/ch4/#1-simple-factory","text":"Let s say you have a pizza shop, and as a cutting-edge pizza store owner in Objectville you might end up writing some code like this: Pizza orderPizza () { // For flexibility, we really want this to be an abstract class or interface, // but we can t directly instantiate either of those. Pizza pizza = new Pizza (); pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } But you need more than one type of pizza... Pizza orderPizza ( String type ) { Pizza pizza ; if ( type . equals ( ldquo ; cheese rdquo ;)) { pizza = new CheesePizza (); } else if ( type . equals ( ldquo ; greek rdquo ;) { pizza = new GreekPizza (); } else if ( type . equals ( ldquo ; pepperoni rdquo ;) { pizza = new PepperoniPizza (); } // Once we have a Pizza, we prepare it // (you know, roll the dough, put on the sauce and add the toppings cheese), // then we bake it, cut it and box it! pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } But the pressure is on to add more pizza types...","title":"1 Simple Factory"},{"location":"java/hfdp/ch4/#encapsulating-object-creation","text":"Factories handle the details of object creation. Once we have a SimplePizzaFactory , our orderPizza() method just becomes a client of that object. Simplepizzafactory public class SimplePizzaFactory { public Pizza createPizza ( String type ) { Pizza pizza = null ; if ( type . equals ( ldquo ; cheese rdquo ;)) { pizza = new CheesePizza (); } else if ( type . equals ( ldquo ; pepperoni rdquo ;)) { pizza = new PepperoniPizza (); } else if ( type . equals ( ldquo ; clam rdquo ;)) { pizza = new ClamPizza (); } else if ( type . equals ( ldquo ; veggie rdquo ;)) { pizza = new VeggiePizza (); } // end if return pizza ; } // end createPizza } Pizzastore public class PizzaStore { // Now we give PizzaStore a reference to a SimplePizzaFactory. SimplePizzaFactory factory ; // PizzaStore gets the factory passes to it in the constructor. public PizzaStore ( SimplePizzaFactory factory ) { this . factory = factory ; } public Pizza orderPizza ( String type ) { Pizza pizza ; pizza = factory . createPizza ( type ); pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } }","title":"Encapsulating object creation"},{"location":"java/hfdp/ch4/#class-diagram","text":"The Simple Factory is NOT actually a Design Pattern ; it s more of a programming IDIOM. But it is commonly used.","title":"Class Diagram"},{"location":"java/hfdp/ch4/#2-factory-method-pattern","text":"Your Objectville PizzaStore has done so well that you ve trounced the competition and now everyone wants a PizzaStore in their own neighborhood. And now each franchise might want to offer different styles of pizzas (New York, Chicago, and California, etc), depending on where the franchise store is located and the tastes of the local pizza connoisseurs. Pizzastore public abstract class PizzaStore { abstract Pizza createPizza ( String item ); public Pizza orderPizza ( String type ) { Pizza pizza = createPizza ( type ); System . out . println ( --- Making a + pizza . getName () + --- ); pizza . prepare (); pizza . bake (); pizza . cut (); pizza . box (); return pizza ; } } public class NYPizzaStore extends PizzaStore { Pizza createPizza ( String item ) { if ( item . equals ( cheese )) { return new NYStyleCheesePizza (); } else if ( item . equals ( veggie )) { return new NYStyleVeggiePizza (); } else if ( item . equals ( clam )) { return new NYStyleClamPizza (); } else if ( item . equals ( pepperoni )) { return new NYStylePepperoniPizza (); } else return null ; } } public class NYPizzaStore extends PizzaStore { Pizza createPizza ( String item ) { if ( item . equals ( cheese )) { return new NYStyleCheesePizza (); } else if ( item . equals ( veggie )) { return new NYStyleVeggiePizza (); } else if ( item . equals ( clam )) { return new NYStyleClamPizza (); } else if ( item . equals ( pepperoni )) { return new NYStylePepperoniPizza (); } else return null ; } } Pizza public abstract class Pizza { String name ; String dough ; String sauce ; ArrayList String toppings = new ArrayList String (); void prepare () { System . out . println ( Prepare + name ); System . out . println ( Tossing dough... ); System . out . println ( Adding sauce... ); System . out . println ( Adding toppings: ); for ( String topping : toppings ) { System . out . println ( + topping ); } } void bake () { System . out . println ( Bake for 25 minutes at 350 ); } void cut () { System . out . println ( Cut the pizza into diagonal slices ); } void box () { System . out . println ( Place pizza in official PizzaStore box ); } public String getName () { return name ; } public String toString () { StringBuffer display = new StringBuffer (); display . append ( ---- + name + ----\\n ); display . append ( dough + \\n ); display . append ( sauce + \\n ); for ( String topping : toppings ) { display . append ( topping + \\n ); } return display . toString (); } } public class NYStyleCheesePizza extends Pizza { public NYStyleCheesePizza () { name = NY Style Sauce and Cheese Pizza ; dough = Thin Crust Dough ; sauce = Marinara Sauce ; toppings . add ( Grated Reggiano Cheese ); } } public class ChicagoStyleClamPizza extends Pizza { public ChicagoStyleClamPizza () { name = Chicago Style Clam Pizza ; dough = Extra Thick Crust Dough ; sauce = Plum Tomato Sauce ; toppings . add ( Shredded Mozzarella Cheese ); toppings . add ( Frozen Clams from Chesapeake Bay ); } void cut () { System . out . println ( Cutting the pizza into square slices ); } } Pizzatestdrive public class PizzaTestDrive { public static void main ( String [] args ) { PizzaStore nyStore = new NYPizzaStore (); PizzaStore chicagoStore = new ChicagoPizzaStore (); Pizza pizza = nyStore . orderPizza ( cheese ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( cheese ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); pizza = nyStore . orderPizza ( clam ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( clam ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); pizza = nyStore . orderPizza ( pepperoni ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( pepperoni ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); pizza = nyStore . orderPizza ( veggie ); System . out . println ( Ethan ordered a + pizza . getName () + \\n ); pizza = chicagoStore . orderPizza ( veggie ); System . out . println ( Joel ordered a + pizza . getName () + \\n ); } }","title":"2 Factory Method Pattern"},{"location":"java/hfdp/ch4/#definition","text":"The Factory Method Pattern defines an interface for creating an object, but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.","title":"Definition"},{"location":"java/hfdp/ch4/#class-diagram_1","text":"","title":"Class Diagram"},{"location":"java/hfdp/ch4/#example-calendar","text":"java.util.Calendar is an abstract class that provides methods for converting between a specific instant in time and a set of calendar fields such as YEAR , MONTH , DAY_OF_MONTH , HOUR , and so on. Calendar provides a class method, getInstance , for getting a generally useful object of this type. Calendar 's getInstance method returns a Calendar object whose calendar fields have been initialized with the current date and time: Calendar rightNow = Calendar . getInstance (); .","title":"Example: Calendar"},{"location":"java/hfdp/ch4/#dependency-inversion-principle","text":"The Dependency Inversion Principle: Depend upon abstractions. Do not depend upon concrete classes. A few guidelines to help you follow the Principle: No variable should hold a reference to a concrete class. No class should derive from a concrete class. No method should override an implemented method of any of its base classes.","title":"Dependency inversion principle"},{"location":"java/hfdp/ch4/#3-abstract-factory-pattern","text":"","title":"3 Abstract Factory Pattern"},{"location":"java/hfdp/ch4/#definition_1","text":"The Abstract Factory Pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.","title":"Definition"},{"location":"java/hfdp/ch4/#class-diagram_2","text":"","title":"Class Diagram"},{"location":"java/hfdp/ch4/#factory-method-and-abstract-factory-compared","text":"","title":"Factory Method and Abstract Factory compared"},{"location":"java/hfdp/ch5/","text":"Head First Design Patterns 5 - Singleton Pattern In many ways, the Singleton Pattern is a convention for ensuring one and only one object is instantiated for a given class. It often used to manage pools of resources, like connection or thread pools. The Singleton Pattern ensures a class has only one instance, and provides a global point of access to it. public class Singleton { // We have a static variable to hold our one instance of the class Singleton. private static Singleton uniqueInstance ; // Our constructor is declared private; only Singleton can instantiate this class! private Singleton () {} // The getInstance() method gives us a way to instantiate the class // and also to return an instance of it. public static Singleton getInstance () { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } return uniqueInstance ; } // other useful methods here public String getDescription () { return I m a classic Singleton! ; } } Dealing with multithreading synchronized method we almost trivially fix it by making getInstance() a synchronized method: public class Singleton { private static Singleton uniqueInstance ; // other useful instance variables here private Singleton () {} public static synchronized Singleton getInstance () { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } return uniqueInstance ; } // other useful methods here public String getDescription () { return I m a thread safe Singleton! ; } } Good point, and it\u2019s actually a little worse than you make out: the only time synchronization is relevant is the first time through this method. Once we\u2019ve set the uniqueInstance variable to an instance of Singleton, we have no further need to synchronize this method. Do nothing if the performance of getInstance() isn\u2019t critical to your application Eagerly Created Or Move to an eagerly created instance(\u997f\u6c49\u5f0f) rather than a lazily created one(\u61d2\u6c49\u5f0f). public class Singleton { private static Singleton uniqueInstance = new Singleton (); private Singleton () {} public static Singleton getInstance () { return uniqueInstance ; } } Double-checked locking With double-checked locking(\u53cc\u91cd\u68c0\u67e5\u9501\u5b9a), we first check to see if an instance is created, and if not, THEN we synchronize. This way, we only synchronize the first time through, just what we want. public class Singleton { private volatile static Singleton uniqueInstance ; private Singleton () {} public static Singleton getInstance () { // check for an instance and if there isn t one, enter a synchronized block // Note we only synchronize the first time through! if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { // Once in the block, check again and // if still null, create an isntance if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } } } return uniqueInstance ; } } Note: Using Singleton.class instead of this here, because getInstance() is a static method.","title":"Chapter 5: Singleton Pattern"},{"location":"java/hfdp/ch5/#head-first-design-patterns-5-singleton-pattern","text":"In many ways, the Singleton Pattern is a convention for ensuring one and only one object is instantiated for a given class. It often used to manage pools of resources, like connection or thread pools. The Singleton Pattern ensures a class has only one instance, and provides a global point of access to it. public class Singleton { // We have a static variable to hold our one instance of the class Singleton. private static Singleton uniqueInstance ; // Our constructor is declared private; only Singleton can instantiate this class! private Singleton () {} // The getInstance() method gives us a way to instantiate the class // and also to return an instance of it. public static Singleton getInstance () { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } return uniqueInstance ; } // other useful methods here public String getDescription () { return I m a classic Singleton! ; } }","title":"Head First Design Patterns 5 - Singleton Pattern"},{"location":"java/hfdp/ch5/#dealing-with-multithreading","text":"","title":"Dealing with multithreading"},{"location":"java/hfdp/ch5/#synchronized-method","text":"we almost trivially fix it by making getInstance() a synchronized method: public class Singleton { private static Singleton uniqueInstance ; // other useful instance variables here private Singleton () {} public static synchronized Singleton getInstance () { if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } return uniqueInstance ; } // other useful methods here public String getDescription () { return I m a thread safe Singleton! ; } } Good point, and it\u2019s actually a little worse than you make out: the only time synchronization is relevant is the first time through this method. Once we\u2019ve set the uniqueInstance variable to an instance of Singleton, we have no further need to synchronize this method. Do nothing if the performance of getInstance() isn\u2019t critical to your application","title":"synchronized method"},{"location":"java/hfdp/ch5/#eagerly-created","text":"Or Move to an eagerly created instance(\u997f\u6c49\u5f0f) rather than a lazily created one(\u61d2\u6c49\u5f0f). public class Singleton { private static Singleton uniqueInstance = new Singleton (); private Singleton () {} public static Singleton getInstance () { return uniqueInstance ; } }","title":"Eagerly Created"},{"location":"java/hfdp/ch5/#double-checked-locking","text":"With double-checked locking(\u53cc\u91cd\u68c0\u67e5\u9501\u5b9a), we first check to see if an instance is created, and if not, THEN we synchronize. This way, we only synchronize the first time through, just what we want. public class Singleton { private volatile static Singleton uniqueInstance ; private Singleton () {} public static Singleton getInstance () { // check for an instance and if there isn t one, enter a synchronized block // Note we only synchronize the first time through! if ( uniqueInstance == null ) { synchronized ( Singleton . class ) { // Once in the block, check again and // if still null, create an isntance if ( uniqueInstance == null ) { uniqueInstance = new Singleton (); } } } return uniqueInstance ; } } Note: Using Singleton.class instead of this here, because getInstance() is a static method.","title":"Double-checked locking"},{"location":"java/hfdp/ch6/","text":"Head First Design Patterns 6 - Command Pattern Definition The Command Pattern(\u547d\u4ee4\u6a21\u5f0f) encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations. Class Diagram The class diagram: The Client is responsible for creating a ConcreateCommand and setting its Receiver . The Receiver knows how to perform the work needed to carry out the request. Any class can act as a Receiver . Command declares an interface for all commands. A command is invoked through its execute() method, which asks a receiver to perform an action. The Invoker holds a command and at some point asks the command to carry out a request by calling its execute method. Example - Remote control The remote control is our Invoker . When a button is pressed, the execute() method is going to be called on the corresponding command, which results in actions being invoked on the receiver (like lights, celling fans). The RemoteLoader creates a number of Command Objects that are loaded into the slots of the Remote Control. Each command object encapsulates a request of a home automation device. The RemoteControl manages a set of Command objects, one per button. When a button is pressed, the corresponding ButtonWasPushed method on the command. All RemoteControl commands implement the Command interface, which consists of one method: execute . Commands encapsulates a set of actions on a specific vendor class. The remote invokes these actions by calling the execute() method. Command public interface Command { public void execute (); public void undo (); } public class LightOffCommand implements Command { private Light light ; public LightOffCommand ( Light light ) { this . light = light ; } public void execute () { light . off (); } public void undo () { light . on ();} } public class LightOnCommand implements Command { private Light light ; public LightOnCommand ( Light light ) { this . light = light ; } public void execute () { light . on (); } public void undo () { light . off ();} } public class NoCommand implements Command { public NoCommand () { } @Override public void execute () { } @Override public void undo () { } } Remotecontrol public class RemoteControl { private final int NUMSLOT = 7 ; private Command [] onCommands ; private Command [] offCommands ; private Command undoCommand ; public RemoteControl () { onCommands = new Command [ NUMSLOT ]; offCommands = new Command [ NUMSLOT ]; for ( int i = 0 ; i NUMSLOT ; i ++) { onCommands [ i ] = new NoCommand (); offCommands [ i ] = new NoCommand (); } undoCommand = new NoCommand (); } public void setCommand ( int slot , Command onCommand , Command offCommand ) { onCommands [ slot ] = onCommand ; offCommands [ slot ] = offCommand ; } public void onButtonWasPushed ( int slot ) { onCommands [ slot ]. execute (); undoCommand = onCommands [ slot ]; } public void offButtonWasPushed ( int slot ) { offCommands [ slot ]. execute (); undoCommand = offCommands [ slot ]; } public void undoButtonWasPushed () { undoCommand . undo (); } public String toString () { StringBuilder descritption = new StringBuilder (); descritption . append ( \\n------ Remote Control -------\\n ); for ( int i = 0 ; i NUMSLOT ; i ++) { descritption . append ( [slot + i + ] + onCommands [ i ]. getClass (). getSimpleName () + + offCommands [ i ]. getClass (). getSimpleName () + \\n ); } return descritption . toString (); } } Remoteloader public class RemoteLoader { public static void main ( String [] args ) { Light light = new Light (); Stereo stereo = new Stereo (); RemoteControl remoteControl = new RemoteControl (); remoteControl . setCommand ( 0 , new LightOnCommand ( light ), new LightOffCommand ( light )); remoteControl . setCommand ( 1 , new StereoOnWithCDCommand ( stereo ), new StereoOffWithCDCommand ( stereo )); System . out . println ( remoteControl ); remoteControl . onButtonWasPushed ( 0 ); remoteControl . offButtonWasPushed ( 0 ); remoteControl . undoButtonWasPushed (); } } Example - Runnable Runnable interface uses command pattern. It allows the thread pool to execute the command even though the thread pool class itself was written without any knowledge of the specific tasks for which it would be used. public interface Runnable { public abstract void run (); } public interface Executor { void execute ( Runnable command ); } class SerialExecutor implements Executor { private final Queue Runnable tasks = new ArrayDeque (); private final Executor executor ; private Runnable active ; SerialExecutor ( Executor executor ) { this . executor = executor ; } public synchronized void execute ( Runnable r ) { tasks . add (() - { try { r . run (); } finally { scheduleNext (); } }); if ( active == null ) { scheduleNext (); } } protected synchronized void scheduleNext () { if (( active = tasks . poll ()) != null ) { executor . execute ( active ); } } }","title":"Chapter 6: Command Pattern"},{"location":"java/hfdp/ch6/#head-first-design-patterns-6-command-pattern","text":"","title":"Head First Design Patterns 6 - Command Pattern"},{"location":"java/hfdp/ch6/#definition","text":"The Command Pattern(\u547d\u4ee4\u6a21\u5f0f) encapsulates a request as an object, thereby letting you parameterize other objects with different requests, queue or log requests, and support undoable operations.","title":"Definition"},{"location":"java/hfdp/ch6/#class-diagram","text":"The class diagram: The Client is responsible for creating a ConcreateCommand and setting its Receiver . The Receiver knows how to perform the work needed to carry out the request. Any class can act as a Receiver . Command declares an interface for all commands. A command is invoked through its execute() method, which asks a receiver to perform an action. The Invoker holds a command and at some point asks the command to carry out a request by calling its execute method.","title":"Class Diagram"},{"location":"java/hfdp/ch6/#example-remote-control","text":"The remote control is our Invoker . When a button is pressed, the execute() method is going to be called on the corresponding command, which results in actions being invoked on the receiver (like lights, celling fans). The RemoteLoader creates a number of Command Objects that are loaded into the slots of the Remote Control. Each command object encapsulates a request of a home automation device. The RemoteControl manages a set of Command objects, one per button. When a button is pressed, the corresponding ButtonWasPushed method on the command. All RemoteControl commands implement the Command interface, which consists of one method: execute . Commands encapsulates a set of actions on a specific vendor class. The remote invokes these actions by calling the execute() method. Command public interface Command { public void execute (); public void undo (); } public class LightOffCommand implements Command { private Light light ; public LightOffCommand ( Light light ) { this . light = light ; } public void execute () { light . off (); } public void undo () { light . on ();} } public class LightOnCommand implements Command { private Light light ; public LightOnCommand ( Light light ) { this . light = light ; } public void execute () { light . on (); } public void undo () { light . off ();} } public class NoCommand implements Command { public NoCommand () { } @Override public void execute () { } @Override public void undo () { } } Remotecontrol public class RemoteControl { private final int NUMSLOT = 7 ; private Command [] onCommands ; private Command [] offCommands ; private Command undoCommand ; public RemoteControl () { onCommands = new Command [ NUMSLOT ]; offCommands = new Command [ NUMSLOT ]; for ( int i = 0 ; i NUMSLOT ; i ++) { onCommands [ i ] = new NoCommand (); offCommands [ i ] = new NoCommand (); } undoCommand = new NoCommand (); } public void setCommand ( int slot , Command onCommand , Command offCommand ) { onCommands [ slot ] = onCommand ; offCommands [ slot ] = offCommand ; } public void onButtonWasPushed ( int slot ) { onCommands [ slot ]. execute (); undoCommand = onCommands [ slot ]; } public void offButtonWasPushed ( int slot ) { offCommands [ slot ]. execute (); undoCommand = offCommands [ slot ]; } public void undoButtonWasPushed () { undoCommand . undo (); } public String toString () { StringBuilder descritption = new StringBuilder (); descritption . append ( \\n------ Remote Control -------\\n ); for ( int i = 0 ; i NUMSLOT ; i ++) { descritption . append ( [slot + i + ] + onCommands [ i ]. getClass (). getSimpleName () + + offCommands [ i ]. getClass (). getSimpleName () + \\n ); } return descritption . toString (); } } Remoteloader public class RemoteLoader { public static void main ( String [] args ) { Light light = new Light (); Stereo stereo = new Stereo (); RemoteControl remoteControl = new RemoteControl (); remoteControl . setCommand ( 0 , new LightOnCommand ( light ), new LightOffCommand ( light )); remoteControl . setCommand ( 1 , new StereoOnWithCDCommand ( stereo ), new StereoOffWithCDCommand ( stereo )); System . out . println ( remoteControl ); remoteControl . onButtonWasPushed ( 0 ); remoteControl . offButtonWasPushed ( 0 ); remoteControl . undoButtonWasPushed (); } }","title":"Example - Remote control"},{"location":"java/hfdp/ch6/#example-runnable","text":"Runnable interface uses command pattern. It allows the thread pool to execute the command even though the thread pool class itself was written without any knowledge of the specific tasks for which it would be used. public interface Runnable { public abstract void run (); } public interface Executor { void execute ( Runnable command ); } class SerialExecutor implements Executor { private final Queue Runnable tasks = new ArrayDeque (); private final Executor executor ; private Runnable active ; SerialExecutor ( Executor executor ) { this . executor = executor ; } public synchronized void execute ( Runnable r ) { tasks . add (() - { try { r . run (); } finally { scheduleNext (); } }); if ( active == null ) { scheduleNext (); } } protected synchronized void scheduleNext () { if (( active = tasks . poll ()) != null ) { executor . execute ( active ); } } }","title":"Example - Runnable"},{"location":"java/hfdp/ch7/","text":"Head First Design Patterns 7 - Adapter and Facade Pattern 1 Adapter Pattern The Adapter Pattern explained Here's an example: Have you ever needed to use an US-made laptop in a European country? Then you\u2019ve probably needed an AC power adapter... You can write a class that adapts the new vendor interface into the one you\u2019re expecting. Adapter Pattern Defined The Adapter Pattern(\u9002\u914d\u5668\u6a21\u5f0f) converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn\u2019t otherwise because of incompatible interfaces. It acts to decouple the client from the implemented interface, and if we expect the interface to change over time, the adapter encapsulates that change so that the client doesn\u2019t have to be modi\ufb01ed each time it needs to operate against a different interface. Class Diagram Example - Collections.enumeration() enumeration() returns an enumeration over the specified collection. This provides interoperability with legacy APIs that require an enumeration as input. //java.utils.Collections public static T Enumeration T enumeration ( final Collection T c ) { return new Enumeration T () { private final Iterator T i = c . iterator (); public boolean hasMoreElements () { return i . hasNext (); } public T nextElement () { return i . next (); } }; } The Enumeration interface is defined as follows: public interface Enumeration E { boolean hasMoreElements (); E nextElement (); default Iterator E asIterator () {... }; } } Example - Arrays.asList() Arrays.asList() returns a fixed-size list backed by the specified array. This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray . // T , the class of the objects in the array // a, the array by which the list will be backed // return a list view of the specified array public static T List T asList ( T ... a ) { return new ArrayList ( a ); } 2 Facade Pattern Facade Pattern Defined The Facade Pattern(\u5916\u89c2\u6a21\u5f0f) provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. Facades don\u2019t \u201cencapsulate\u201d the subsystem classes; they merely provide a simplified interface to their functionality. The subsystem classes still remain available for direct use by clients that need to use more specific interfaces. Adapter Pattern v.s. Facade Pattern The Adapter Pattern changes the interface of one or more classes into one interface that a client is expecting. Likewise, a Facade may provide a simplified interface to a single class with a very complex interface. The intent of the Adapter Pattern is to alter an interface so that it matches one a client is expecting. The intent of the Facade Pattern is to provide a simplified interface to a subsystem. Facade Pattern Class Diagram The Principle of Least Knowledge Principle of Least Knowledge: talk only to your immediate friends. It means when you are designing a system, for any object, be careful of the number of classes it interacts with and also how it comes to interact with those classes. This principle prevents us from creating designs that have a large number of classes coupled together so that changes in one part of the system cascade to other parts. When you build a lot of dependencies between many classes, you are building a fragile system that will be costly to maintain and complex for others to understand. Example - Home Theater You want to build your own home theater. Check out all the components you\u2019ve put together: If you want a movie (the hard way) Pick out a DVD, relax, and get ready for movie magic. Oh, there\u2019s just one thing \u2013 to watch the movie, you need to perform a few tasks: Turn on the popcorn popper Start the popper popping Dim the lights Put the screen down Turn the projector on Set the projector input to DVD Put the projector on wide-screen mode Turn the sound amplifier on Set the amplifier to DVD input Set the amplifier to surround sound Set the amplifier volume to medium Turn the DVD Player on Start the DVD Player playing OK, time to create a Facade for the home theater system. To do this we create a new class HomeTheatherFacade , which exposes a few simple methods such as watchMovie() . Hometheaterfacade public class HomeTheaterFacade { Amplifier amp ; Tuner tuner ; DvdPlayer dvd ; CdPlayer cd ; Projector projector ; TheaterLights lights ; Screen screen ; PopcornPopper popper ; public HomeTheaterFacade ( Amplifier amp , Tuner tuner , DvdPlayer dvd , CdPlayer cd , Projector projector , Screen screen , TheaterLights lights , PopcornPopper popper ) { this . amp = amp ; this . tuner = tuner ; this . dvd = dvd ; this . cd = cd ; this . projector = projector ; this . screen = screen ; this . lights = lights ; this . popper = popper ; } public void watchMovie ( String movie ) { System . out . println ( Get ready to watch a movie... ); popper . on (); popper . pop (); lights . dim ( 10 ); screen . down (); projector . on (); projector . wideScreenMode (); amp . on (); amp . setDvd ( dvd ); amp . setSurroundSound (); amp . setVolume ( 5 ); dvd . on (); dvd . play ( movie ); } public void endMovie () { System . out . println ( Shutting movie theater down... ); popper . off (); lights . on (); screen . up (); projector . off (); amp . off (); dvd . stop (); dvd . eject (); dvd . off (); } public void listenToCd ( String cdTitle ) { System . out . println ( Get ready for an audiopile experence... ); lights . on (); amp . on (); amp . setVolume ( 5 ); amp . setCd ( cd ); amp . setStereoSound (); cd . on (); cd . play ( cdTitle ); } public void endCd () { System . out . println ( Shutting down CD... ); amp . off (); amp . setCd ( cd ); cd . eject (); cd . off (); } public void listenToRadio ( double frequency ) { System . out . println ( Tuning in the airwaves... ); tuner . on (); tuner . setFrequency ( frequency ); amp . on (); amp . setVolume ( 5 ); amp . setTuner ( tuner ); } public void endRadio () { System . out . println ( Shutting down the tuner... ); tuner . off (); amp . off (); } } Hometheatertestdrive public class HomeTheaterTestDrive { public static void main ( String [] args ) { Amplifier amp = new Amplifier ( Top-O-Line Amplifier ); Tuner tuner = new Tuner ( Top-O-Line AM/FM Tuner , amp ); DvdPlayer dvd = new DvdPlayer ( Top-O-Line DVD Player , amp ); CdPlayer cd = new CdPlayer ( Top-O-Line CD Player , amp ); Projector projector = new Projector ( Top-O-Line Projector , dvd ); TheaterLights lights = new TheaterLights ( Theater Ceiling Lights ); Screen screen = new Screen ( Theater Screen ); PopcornPopper popper = new PopcornPopper ( Popcorn Popper ); HomeTheaterFacade homeTheater = new HomeTheaterFacade ( amp , tuner , dvd , cd , projector , screen , lights , popper ); homeTheater . watchMovie ( Raiders of the Lost Ark ); homeTheater . endMovie (); } }","title":"Chapter 7: Adapter and Facade Patterns"},{"location":"java/hfdp/ch7/#head-first-design-patterns-7-adapter-and-facade-pattern","text":"","title":"Head First Design Patterns 7 - Adapter and Facade Pattern"},{"location":"java/hfdp/ch7/#1-adapter-pattern","text":"","title":"1 Adapter Pattern"},{"location":"java/hfdp/ch7/#the-adapter-pattern-explained","text":"Here's an example: Have you ever needed to use an US-made laptop in a European country? Then you\u2019ve probably needed an AC power adapter... You can write a class that adapts the new vendor interface into the one you\u2019re expecting.","title":"The Adapter Pattern explained"},{"location":"java/hfdp/ch7/#adapter-pattern-defined","text":"The Adapter Pattern(\u9002\u914d\u5668\u6a21\u5f0f) converts the interface of a class into another interface the clients expect. Adapter lets classes work together that couldn\u2019t otherwise because of incompatible interfaces. It acts to decouple the client from the implemented interface, and if we expect the interface to change over time, the adapter encapsulates that change so that the client doesn\u2019t have to be modi\ufb01ed each time it needs to operate against a different interface.","title":"Adapter Pattern Defined"},{"location":"java/hfdp/ch7/#class-diagram","text":"","title":"Class Diagram"},{"location":"java/hfdp/ch7/#example-collectionsenumeration","text":"enumeration() returns an enumeration over the specified collection. This provides interoperability with legacy APIs that require an enumeration as input. //java.utils.Collections public static T Enumeration T enumeration ( final Collection T c ) { return new Enumeration T () { private final Iterator T i = c . iterator (); public boolean hasMoreElements () { return i . hasNext (); } public T nextElement () { return i . next (); } }; } The Enumeration interface is defined as follows: public interface Enumeration E { boolean hasMoreElements (); E nextElement (); default Iterator E asIterator () {... }; } }","title":"Example - Collections.enumeration()"},{"location":"java/hfdp/ch7/#example-arraysaslist","text":"Arrays.asList() returns a fixed-size list backed by the specified array. This method acts as bridge between array-based and collection-based APIs, in combination with Collection.toArray . // T , the class of the objects in the array // a, the array by which the list will be backed // return a list view of the specified array public static T List T asList ( T ... a ) { return new ArrayList ( a ); }","title":"Example - Arrays.asList()"},{"location":"java/hfdp/ch7/#2-facade-pattern","text":"","title":"2 Facade Pattern"},{"location":"java/hfdp/ch7/#facade-pattern-defined","text":"The Facade Pattern(\u5916\u89c2\u6a21\u5f0f) provides a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. Facades don\u2019t \u201cencapsulate\u201d the subsystem classes; they merely provide a simplified interface to their functionality. The subsystem classes still remain available for direct use by clients that need to use more specific interfaces. Adapter Pattern v.s. Facade Pattern The Adapter Pattern changes the interface of one or more classes into one interface that a client is expecting. Likewise, a Facade may provide a simplified interface to a single class with a very complex interface. The intent of the Adapter Pattern is to alter an interface so that it matches one a client is expecting. The intent of the Facade Pattern is to provide a simplified interface to a subsystem.","title":"Facade Pattern Defined"},{"location":"java/hfdp/ch7/#facade-pattern-class-diagram","text":"","title":"Facade Pattern Class Diagram"},{"location":"java/hfdp/ch7/#the-principle-of-least-knowledge","text":"Principle of Least Knowledge: talk only to your immediate friends. It means when you are designing a system, for any object, be careful of the number of classes it interacts with and also how it comes to interact with those classes. This principle prevents us from creating designs that have a large number of classes coupled together so that changes in one part of the system cascade to other parts. When you build a lot of dependencies between many classes, you are building a fragile system that will be costly to maintain and complex for others to understand.","title":"The Principle of Least Knowledge"},{"location":"java/hfdp/ch7/#example-home-theater","text":"You want to build your own home theater. Check out all the components you\u2019ve put together: If you want a movie (the hard way) Pick out a DVD, relax, and get ready for movie magic. Oh, there\u2019s just one thing \u2013 to watch the movie, you need to perform a few tasks: Turn on the popcorn popper Start the popper popping Dim the lights Put the screen down Turn the projector on Set the projector input to DVD Put the projector on wide-screen mode Turn the sound amplifier on Set the amplifier to DVD input Set the amplifier to surround sound Set the amplifier volume to medium Turn the DVD Player on Start the DVD Player playing OK, time to create a Facade for the home theater system. To do this we create a new class HomeTheatherFacade , which exposes a few simple methods such as watchMovie() . Hometheaterfacade public class HomeTheaterFacade { Amplifier amp ; Tuner tuner ; DvdPlayer dvd ; CdPlayer cd ; Projector projector ; TheaterLights lights ; Screen screen ; PopcornPopper popper ; public HomeTheaterFacade ( Amplifier amp , Tuner tuner , DvdPlayer dvd , CdPlayer cd , Projector projector , Screen screen , TheaterLights lights , PopcornPopper popper ) { this . amp = amp ; this . tuner = tuner ; this . dvd = dvd ; this . cd = cd ; this . projector = projector ; this . screen = screen ; this . lights = lights ; this . popper = popper ; } public void watchMovie ( String movie ) { System . out . println ( Get ready to watch a movie... ); popper . on (); popper . pop (); lights . dim ( 10 ); screen . down (); projector . on (); projector . wideScreenMode (); amp . on (); amp . setDvd ( dvd ); amp . setSurroundSound (); amp . setVolume ( 5 ); dvd . on (); dvd . play ( movie ); } public void endMovie () { System . out . println ( Shutting movie theater down... ); popper . off (); lights . on (); screen . up (); projector . off (); amp . off (); dvd . stop (); dvd . eject (); dvd . off (); } public void listenToCd ( String cdTitle ) { System . out . println ( Get ready for an audiopile experence... ); lights . on (); amp . on (); amp . setVolume ( 5 ); amp . setCd ( cd ); amp . setStereoSound (); cd . on (); cd . play ( cdTitle ); } public void endCd () { System . out . println ( Shutting down CD... ); amp . off (); amp . setCd ( cd ); cd . eject (); cd . off (); } public void listenToRadio ( double frequency ) { System . out . println ( Tuning in the airwaves... ); tuner . on (); tuner . setFrequency ( frequency ); amp . on (); amp . setVolume ( 5 ); amp . setTuner ( tuner ); } public void endRadio () { System . out . println ( Shutting down the tuner... ); tuner . off (); amp . off (); } } Hometheatertestdrive public class HomeTheaterTestDrive { public static void main ( String [] args ) { Amplifier amp = new Amplifier ( Top-O-Line Amplifier ); Tuner tuner = new Tuner ( Top-O-Line AM/FM Tuner , amp ); DvdPlayer dvd = new DvdPlayer ( Top-O-Line DVD Player , amp ); CdPlayer cd = new CdPlayer ( Top-O-Line CD Player , amp ); Projector projector = new Projector ( Top-O-Line Projector , dvd ); TheaterLights lights = new TheaterLights ( Theater Ceiling Lights ); Screen screen = new Screen ( Theater Screen ); PopcornPopper popper = new PopcornPopper ( Popcorn Popper ); HomeTheaterFacade homeTheater = new HomeTheaterFacade ( amp , tuner , dvd , cd , projector , screen , lights , popper ); homeTheater . watchMovie ( Raiders of the Lost Ark ); homeTheater . endMovie (); } }","title":"Example - Home Theater"},{"location":"java/hfdp/ch8/","text":"Head First Design Patterns 8 - Template Method Pattern 1 Template Method Pattern Template Method Pattern defined The Template Method Pattern(\u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f) defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm\u2019s structure. This pattern is all about creating a template for an algorithm. A template is a method that defines an algorithm as a set of steps. One or more of these steps is de\ufb01ned to be abstract and implemented by a subclass. This ensures the algorithm\u2019s structure stays unchanged, while subclasses provide some part of the implementation. Template Method Pattern Class Diagram The AbstractClass contains the template method. The template method makes use of the primitiveOperation s to implement an algorithm. It is decoupled from the actual implementation of these operations. There may be many ConcreteClasses , each implementing the full set of operations required by the template method. abstract class AbstractClass { // Here s the template method // It s declared final to prevent subclasses from reworking the sequence of steps in the algorithm. final void templateMethod () { // The templateMethod defines the sequence of steps, // each represented by a method. primitiveOperation1 (); primitiveOperation2 (); concreteOperation (); } // In this example, two of the primitive operations // must be implemented by concrete subclasses. abstract void primitiveOperation1 (); abstract void primitiveOperation2 (); // We also have a concrete operation defined in the abstract class. void concreteOperation () { // implementation here } // A concrete method, but it does nothing! // We can also have concrete method, which do nothing by default; // We call these hooks . Subclasses are free to override these, // but don t have to. void hook () {} } Question When to use abstract methods and when to use hooks? Use abstract methods when your subclass MUST provide an implementation of the method or step in the algorithm. Use hooks when that part of the algorithm is optional. With hooks, a subclass may choose to implement that hook, but it doesn\u2019t have to. Example - CaffeineBeverage Tea and coffee are made in very similar ways. Notice that both recipes follow the same algorithm: Boil some water. Use the hot water to extract the coffee or tea. Pour the resulting beverage into a cup. Add the appropriate condiments to the beverage. Caffeinebeverage public abstract class CaffeineBeverage { final void prepareRecipe () { boilWater (); brew (); pourInCup (); addCondiments (); } abstract void brew (); abstract void addCondiments (); void boilWater () { System . out . println ( Boiling water ); } void pourInCup () { System . out . println ( Pouring into cup ); } } Caffee/tea public class Coffee extends CaffeineBeverage { public void brew () { System . out . println ( Dripping Coffee through filter ); } public void addCondiments () { System . out . println ( Adding Sugar and Milk ); } } public class Tea extends CaffeineBeverage { public void brew () { System . out . println ( Steeping the tea ); } public void addCondiments () { System . out . println ( Adding Lemon ); } } Beveragetestdrive public class BeverageTestDrive { public static void main ( String [] args ) { Tea tea = new Tea (); Coffee coffee = new Coffee (); System . out . println ( \\nMaking tea... ); tea . prepareRecipe (); System . out . println ( \\nMaking coffee... ); coffee . prepareRecipe (); TeaWithHook teaHook = new TeaWithHook (); CoffeeWithHook coffeeHook = new CoffeeWithHook (); System . out . println ( \\nMaking tea... ); teaHook . prepareRecipe (); System . out . println ( \\nMaking coffee... ); coffeeHook . prepareRecipe (); } } Example - Arrays.sort() Let\u2019s trace through how the Arrays sort() template method works. First, we need an array of Ducks: Duck [] ducks = { new Duck ( \u201c Daffy \u201d , 8 ), ... }; Then we call the sort() template method in the Array class and pass it our ducks: Arrays.sort(ducks); The sort() method (and its helper mergesort() ) control the sort procedure. To sort an array, you need to compare two items one by one until the entire list is in sorted order. When it comes to comparing two ducks, the sort method relies on the Duck\u2019s compareTo() method to know how to do this. The compareTo() method is called on the first duck and passed the duck to be compared to: ducks[0].compareTo(ducks[1]); If the Ducks are not in sorted order, they\u2019re swapped with the concrete swap() method in Arrays. The sort method continues comparing and swapping Ducks until the array is in the correct order! Ducksort import java.util.Arrays ; public class DuckSortTestDrive { public static void main ( String [] args ) { Duck [] ducks = { new Duck ( Daffy , 8 ), new Duck ( Dewey , 2 ), new Duck ( Howard , 7 ), new Duck ( Louie , 2 ), new Duck ( Donald , 10 ), new Duck ( Huey , 2 ) }; System . out . println ( Before sorting: ); display ( ducks ); Arrays . sort ( ducks ); System . out . println ( \\nAfter sorting: ); display ( ducks ); } public static void display ( Duck [] ducks ) { for ( Duck d : ducks ) { System . out . println ( d ); } } } Duck public class Duck implements Comparable Duck { String name ; int weight ; public Duck ( String name , int weight ) { this . name = name ; this . weight = weight ; } public String toString () { return name + weighs + weight ; } public int compareTo ( Duck object ) { Duck otherDuck = object ; if ( this . weight otherDuck . weight ) { return - 1 ; } else if ( this . weight == otherDuck . weight ) { return 0 ; } else { // this.weight otherDuck.weight return 1 ; } } } Example - InputStream.read() java.io.InputStream has a read() method. Its subclasses must implement and is used by the template method read ( byte b [], int off , int len ) . public abstract class InputStream implements Closeable { ... // Reads the next byte of data from the input stream. public abstract int read () throws IOException ; ... 2 The Hollywood Principle The Hollywood Principle: Don\u2019t call us, we\u2019ll call you. With the Hollywood Principle, we allow low-level components to hook themselves into a system, but the high-level components determine when they are needed, and how. In other words, the high-level components give the low-level components a \u201cdon\u2019t call us, we\u2019ll call you\u201d treatment.","title":"Chapter 8: Template Method Pattern"},{"location":"java/hfdp/ch8/#head-first-design-patterns-8-template-method-pattern","text":"","title":"Head First Design Patterns 8 - Template Method Pattern"},{"location":"java/hfdp/ch8/#1-template-method-pattern","text":"","title":"1 Template Method Pattern"},{"location":"java/hfdp/ch8/#template-method-pattern-defined","text":"The Template Method Pattern(\u6a21\u7248\u65b9\u6cd5\u6a21\u5f0f) defines the skeleton of an algorithm in a method, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm\u2019s structure. This pattern is all about creating a template for an algorithm. A template is a method that defines an algorithm as a set of steps. One or more of these steps is de\ufb01ned to be abstract and implemented by a subclass. This ensures the algorithm\u2019s structure stays unchanged, while subclasses provide some part of the implementation.","title":"Template Method Pattern defined"},{"location":"java/hfdp/ch8/#template-method-pattern-class-diagram","text":"The AbstractClass contains the template method. The template method makes use of the primitiveOperation s to implement an algorithm. It is decoupled from the actual implementation of these operations. There may be many ConcreteClasses , each implementing the full set of operations required by the template method. abstract class AbstractClass { // Here s the template method // It s declared final to prevent subclasses from reworking the sequence of steps in the algorithm. final void templateMethod () { // The templateMethod defines the sequence of steps, // each represented by a method. primitiveOperation1 (); primitiveOperation2 (); concreteOperation (); } // In this example, two of the primitive operations // must be implemented by concrete subclasses. abstract void primitiveOperation1 (); abstract void primitiveOperation2 (); // We also have a concrete operation defined in the abstract class. void concreteOperation () { // implementation here } // A concrete method, but it does nothing! // We can also have concrete method, which do nothing by default; // We call these hooks . Subclasses are free to override these, // but don t have to. void hook () {} } Question When to use abstract methods and when to use hooks? Use abstract methods when your subclass MUST provide an implementation of the method or step in the algorithm. Use hooks when that part of the algorithm is optional. With hooks, a subclass may choose to implement that hook, but it doesn\u2019t have to.","title":"Template Method Pattern Class Diagram"},{"location":"java/hfdp/ch8/#example-caffeinebeverage","text":"Tea and coffee are made in very similar ways. Notice that both recipes follow the same algorithm: Boil some water. Use the hot water to extract the coffee or tea. Pour the resulting beverage into a cup. Add the appropriate condiments to the beverage. Caffeinebeverage public abstract class CaffeineBeverage { final void prepareRecipe () { boilWater (); brew (); pourInCup (); addCondiments (); } abstract void brew (); abstract void addCondiments (); void boilWater () { System . out . println ( Boiling water ); } void pourInCup () { System . out . println ( Pouring into cup ); } } Caffee/tea public class Coffee extends CaffeineBeverage { public void brew () { System . out . println ( Dripping Coffee through filter ); } public void addCondiments () { System . out . println ( Adding Sugar and Milk ); } } public class Tea extends CaffeineBeverage { public void brew () { System . out . println ( Steeping the tea ); } public void addCondiments () { System . out . println ( Adding Lemon ); } } Beveragetestdrive public class BeverageTestDrive { public static void main ( String [] args ) { Tea tea = new Tea (); Coffee coffee = new Coffee (); System . out . println ( \\nMaking tea... ); tea . prepareRecipe (); System . out . println ( \\nMaking coffee... ); coffee . prepareRecipe (); TeaWithHook teaHook = new TeaWithHook (); CoffeeWithHook coffeeHook = new CoffeeWithHook (); System . out . println ( \\nMaking tea... ); teaHook . prepareRecipe (); System . out . println ( \\nMaking coffee... ); coffeeHook . prepareRecipe (); } }","title":"Example - CaffeineBeverage"},{"location":"java/hfdp/ch8/#example-arrayssort","text":"Let\u2019s trace through how the Arrays sort() template method works. First, we need an array of Ducks: Duck [] ducks = { new Duck ( \u201c Daffy \u201d , 8 ), ... }; Then we call the sort() template method in the Array class and pass it our ducks: Arrays.sort(ducks); The sort() method (and its helper mergesort() ) control the sort procedure. To sort an array, you need to compare two items one by one until the entire list is in sorted order. When it comes to comparing two ducks, the sort method relies on the Duck\u2019s compareTo() method to know how to do this. The compareTo() method is called on the first duck and passed the duck to be compared to: ducks[0].compareTo(ducks[1]); If the Ducks are not in sorted order, they\u2019re swapped with the concrete swap() method in Arrays. The sort method continues comparing and swapping Ducks until the array is in the correct order! Ducksort import java.util.Arrays ; public class DuckSortTestDrive { public static void main ( String [] args ) { Duck [] ducks = { new Duck ( Daffy , 8 ), new Duck ( Dewey , 2 ), new Duck ( Howard , 7 ), new Duck ( Louie , 2 ), new Duck ( Donald , 10 ), new Duck ( Huey , 2 ) }; System . out . println ( Before sorting: ); display ( ducks ); Arrays . sort ( ducks ); System . out . println ( \\nAfter sorting: ); display ( ducks ); } public static void display ( Duck [] ducks ) { for ( Duck d : ducks ) { System . out . println ( d ); } } } Duck public class Duck implements Comparable Duck { String name ; int weight ; public Duck ( String name , int weight ) { this . name = name ; this . weight = weight ; } public String toString () { return name + weighs + weight ; } public int compareTo ( Duck object ) { Duck otherDuck = object ; if ( this . weight otherDuck . weight ) { return - 1 ; } else if ( this . weight == otherDuck . weight ) { return 0 ; } else { // this.weight otherDuck.weight return 1 ; } } }","title":"Example - Arrays.sort()"},{"location":"java/hfdp/ch8/#example-inputstreamread","text":"java.io.InputStream has a read() method. Its subclasses must implement and is used by the template method read ( byte b [], int off , int len ) . public abstract class InputStream implements Closeable { ... // Reads the next byte of data from the input stream. public abstract int read () throws IOException ; ...","title":"Example - InputStream.read()"},{"location":"java/hfdp/ch8/#2-the-hollywood-principle","text":"The Hollywood Principle: Don\u2019t call us, we\u2019ll call you. With the Hollywood Principle, we allow low-level components to hook themselves into a system, but the high-level components determine when they are needed, and how. In other words, the high-level components give the low-level components a \u201cdon\u2019t call us, we\u2019ll call you\u201d treatment.","title":"2 The Hollywood Principle"},{"location":"java/hfdp/ch9/","text":"Head First Design Patterns 9 - Iterator and Composite Pattern 1 Iterator Pattern Iterator Pattern Defined The Iterator Pattern(\u8fed\u4ee3\u5668\u6a21\u5f0f) provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. Iterator Pattern takes the responsibility of traversing elements and gives that responsibility to the iterator object, not the aggregate object. Iterator Pattern Class Diagram The ConcreteAggregate has a collection of objects and implements the method that returns an Iterator for its collection. The Iterator interface provides the interface that all iterators must implement, and a set of methods for traversing over elements of a collection. Note Java\u2019s Collection Framework provides another type of iterator interface called java.util.ListIterator . This iterator adds previous() and a few other methods to the standard java.util.Iterator interface. It is supported by any Collection that implements the List interface. Design Principle - Single Responsibility Design Principle - Single Responsibility : A class should have only one reason to change. Every responsibility of a class is an area of potential change. More than one responsibility means more than one area of change. Example - Caf\u00e9 Menu Cafemenu public interface Menu { public Iterator MenuItem createIterator (); } public class CafeMenu implements Menu { HashMap String , MenuItem menuItems = new HashMap String , MenuItem (); public CafeMenu () { addItem ( Veggie Burger and Air Fries , Veggie burger on a whole wheat bun, lettuce, tomato, and fries , true , 3.99 ); addItem ( Soup of the day , A cup of the soup of the day, with a side salad , false , 3.69 ); addItem ( Burrito , A large burrito, with whole pinto beans, salsa, guacamole , true , 4.29 ); } public void addItem ( String name , String description , boolean vegetarian , double price ) { MenuItem menuItem = new MenuItem ( name , description , vegetarian , price ); menuItems . put ( menuItem . getName (), menuItem ); } public Map String , MenuItem getItems () { return menuItems ; } public Iterator MenuItem createIterator () { return menuItems . values (). iterator (); } } Waitress public class Waitress { Menu cafeMenu ; public Waitress ( Menu cafeMenu ) { this . cafeMenu = cafeMenu ; } public void printMenu () { Iterator MenuItem cafeIterator = cafeMenu . createIterator (); printMenu ( cafeIterator ); } private void printMenu ( Iterator MenuItem iterator ) { while ( iterator . hasNext ()) { MenuItem menuItem = iterator . next (); System . out . print ( menuItem . getName () + , ); System . out . print ( menuItem . getPrice () + -- ); System . out . println ( menuItem . getDescription ()); } } } Testdrive public class MenuTestDrive { public static void main ( String args []) { CafeMenu cafeMenu = new CafeMenu (); Waitress waitress = new Waitress ( pancakeHouseMenu , dinerMenu , cafeMenu ); waitress . printMenu (); } } Iterators and Collections Each Collection object knows how to create its own Iterator . Java 5 includes a new form of the for statement, called for/in , that lets you iterate over a collection or an array without creating an iterator explicitly. To use for/in, you use a for statement that looks like: for ( Object obj : collection ) { ... } Iterates over each object in the Collection obj is assigned to the next element in the collection each time through the loop. 2 Composite Pattern Composite Pattern Defined The Composite Pattern(\u7ec4\u5408\u6a21\u5f0f) allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. The Composite Pattern create a part-whole hierarchy; that is, a tree of objects that is made of parts (e.g. menus and menu items) but that can be treated as a whole. (i.e. treat \u201cindividual objects and compositions uniformly.\u201d) Cohesion is a term you\u2019ll hear used as a measure of how closely a class or a module supports a single purpose or responsibility. We say that a module or class has high cohesion when it is designed around a set of related functions, and we say it has low cohesion when it is designed around a set of unrelated functions. Composite Pattern Class Diagram Example - Menus We try to design a menu that support menus with menus. For example, we want to make the dessert menu an element of the DinerMenu collection. Composite pattern gives us a way to create a tree structure that can handle a nested group of menus and menu items in the same structure. The Waitress is going to use the MenuComponent interface to access both Menus and MenuItems . MenuComponent represents the interface for both MenuItem and Menu . We've used an abstract class here because we want to provide default implementations for these methods. Menucomponent /** MenuComponent provides default implementation for every method. * */ public abstract class MenuComponent { public String getName (){ throw new UnsupportedOperationException (); } public String getDescription (){ throw new UnsupportedOperationException (); } public double getPrice () { throw new UnsupportedOperationException (); } public boolean isVegetarian () { throw new UnsupportedOperationException (); } public void print () { throw new UnsupportedOperationException (); } public void add ( MenuComponent menuComponent ) { throw new UnsupportedOperationException (); } public void remove ( MenuComponent menuComponent ) { throw new UnsupportedOperationException (); } public MenuComponent getChild ( int index ) { throw new UnsupportedOperationException (); } } Menuitem public class MenuItem extends MenuComponent { String name ; String description ; boolean isVegetarian ; double price ; public MenuItem ( String name , String description , boolean vegetarian , double price ) { this . name = name ; this . description = description ; this . isVegetarian = vegetarian ; this . price = price ; } @Override public String getName () { return name ; } @Override public String getDescription () { return description ; } @Override public boolean isVegetarian () { return isVegetarian ; } @Override public double getPrice () { return price ; } @Override public void print () { System . out . print ( + getName ()); if ( isVegetarian ()) { System . out . print ( (v) ); } System . out . println ( , + getPrice ()); System . out . println ( -- + getDescription ()); } // END PRINT } Menu public class Menu extends MenuComponent { private String name ; private String description ; private ArrayList MenuComponent menuComponents = new ArrayList (); public Menu ( String name , String description ) { this . name = name ; this . description = description ; } @Override public String getName () { return name ; } @Override public String getDescription () { return description ; } @Override public void add ( MenuComponent menuComponent ) { menuComponents . add ( menuComponent ); } @Override public void remove ( MenuComponent menuComponent ) { menuComponents . remove ( menuComponent ); } @Override public MenuComponent getChild ( int index ) { return menuComponents . get ( index ); } @Override public void print () { System . out . print ( \\n + getName ()); System . out . println ( , + getDescription ()); System . out . println ( --------------------- ); Iterator MenuComponent iterator = menuComponents . iterator (); while ( iterator . hasNext ()) { MenuComponent nextMenuComponent = iterator . next (); nextMenuComponent . print (); } } } Menutestdrive public class MenuTestDrive { public static void main ( String args []) { MenuComponent pancakeHouseMenu = new Menu ( PANCAKE HOUSE MENU , Breakfast ); MenuComponent dinerMenu = new Menu ( DINER MENU , Lunch ); MenuComponent cafeMenu = new Menu ( CAFE MENU , Dinner ); MenuComponent dessertMenu = new Menu ( DESSERT MENU , Dessert of course! ); MenuComponent coffeeMenu = new Menu ( COFFEE MENU , Stuff to go with your afternoon coffee ); MenuComponent allMenus = new Menu ( ALL MENUS , All menus combined ); allMenus . add ( pancakeHouseMenu ); allMenus . add ( dinerMenu ); allMenus . add ( cafeMenu ); pancakeHouseMenu . add ( new MenuItem ( K B s Pancake Breakfast , Pancakes with scrambled eggs, and toast , true , 2.99 )); pancakeHouseMenu . add ( new MenuItem ( Regular Pancake Breakfast , Pancakes with fried eggs, sausage , false , 2.99 )); pancakeHouseMenu . add ( new MenuItem ( Blueberry Pancakes , Pancakes made with fresh blueberries, and blueberry syrup , true , 3.49 )); pancakeHouseMenu . add ( new MenuItem ( Waffles , Waffles, with your choice of blueberries or strawberries , true , 3.59 )); dinerMenu . add ( new MenuItem ( Vegetarian BLT , (Fakin ) Bacon with lettuce tomato on whole wheat , true , 2.99 )); dinerMenu . add ( new MenuItem ( BLT , Bacon with lettuce tomato on whole wheat , false , 2.99 )); dinerMenu . add ( new MenuItem ( Soup of the day , A bowl of the soup of the day, with a side of potato salad , false , 3.29 )); dinerMenu . add ( new MenuItem ( Hotdog , A hot dog, with saurkraut, relish, onions, topped with cheese , false , 3.05 )); dinerMenu . add ( new MenuItem ( Steamed Veggies and Brown Rice , Steamed vegetables over brown rice , true , 3.99 )); dinerMenu . add ( new MenuItem ( Pasta , Spaghetti with Marinara Sauce, and a slice of sourdough bread , true , 3.89 )); dinerMenu . add ( dessertMenu ); dessertMenu . add ( new MenuItem ( Apple Pie , Apple pie with a flakey crust, topped with vanilla icecream , true , 1.59 )); dessertMenu . add ( new MenuItem ( Cheesecake , Creamy New York cheesecake, with a chocolate graham crust , true , 1.99 )); dessertMenu . add ( new MenuItem ( Sorbet , A scoop of raspberry and a scoop of lime , true , 1.89 )); cafeMenu . add ( new MenuItem ( Veggie Burger and Air Fries , Veggie burger on a whole wheat bun, lettuce, tomato, and fries , true , 3.99 )); cafeMenu . add ( new MenuItem ( Soup of the day , A cup of the soup of the day, with a side salad , false , 3.69 )); cafeMenu . add ( new MenuItem ( Burrito , A large burrito, with whole pinto beans, salsa, guacamole , true , 4.29 )); cafeMenu . add ( coffeeMenu ); coffeeMenu . add ( new MenuItem ( Coffee Cake , Crumbly cake topped with cinnamon and walnuts , true , 1.59 )); coffeeMenu . add ( new MenuItem ( Bagel , Flavors include sesame, poppyseed, cinnamon raisin, pumpkin , false , 0.69 )); coffeeMenu . add ( new MenuItem ( Biscotti , Three almond or hazelnut biscotti cookies , true , 0.89 )); Waitress waitress = new Waitress ( allMenus ); waitress . printMenu (); } } Example - java.awt.Container component: Component leaf: Checkbox , Button , Label ... composite: Container java.awt.Container.add() add a Component to a Container . public class Container extends Component { public Component add ( Component comp ) {...} public void remove ( Component comp ) {...}","title":"Chapter 9: Iterator and Composite Patterns"},{"location":"java/hfdp/ch9/#head-first-design-patterns-9-iterator-and-composite-pattern","text":"","title":"Head First Design Patterns 9 - Iterator and Composite Pattern"},{"location":"java/hfdp/ch9/#1-iterator-pattern","text":"","title":"1 Iterator Pattern"},{"location":"java/hfdp/ch9/#iterator-pattern-defined","text":"The Iterator Pattern(\u8fed\u4ee3\u5668\u6a21\u5f0f) provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation. Iterator Pattern takes the responsibility of traversing elements and gives that responsibility to the iterator object, not the aggregate object.","title":"Iterator Pattern Defined"},{"location":"java/hfdp/ch9/#iterator-pattern-class-diagram","text":"The ConcreteAggregate has a collection of objects and implements the method that returns an Iterator for its collection. The Iterator interface provides the interface that all iterators must implement, and a set of methods for traversing over elements of a collection. Note Java\u2019s Collection Framework provides another type of iterator interface called java.util.ListIterator . This iterator adds previous() and a few other methods to the standard java.util.Iterator interface. It is supported by any Collection that implements the List interface.","title":"Iterator Pattern Class Diagram"},{"location":"java/hfdp/ch9/#design-principle-single-responsibility","text":"Design Principle - Single Responsibility : A class should have only one reason to change. Every responsibility of a class is an area of potential change. More than one responsibility means more than one area of change.","title":"Design Principle - Single Responsibility"},{"location":"java/hfdp/ch9/#example-cafe-menu","text":"Cafemenu public interface Menu { public Iterator MenuItem createIterator (); } public class CafeMenu implements Menu { HashMap String , MenuItem menuItems = new HashMap String , MenuItem (); public CafeMenu () { addItem ( Veggie Burger and Air Fries , Veggie burger on a whole wheat bun, lettuce, tomato, and fries , true , 3.99 ); addItem ( Soup of the day , A cup of the soup of the day, with a side salad , false , 3.69 ); addItem ( Burrito , A large burrito, with whole pinto beans, salsa, guacamole , true , 4.29 ); } public void addItem ( String name , String description , boolean vegetarian , double price ) { MenuItem menuItem = new MenuItem ( name , description , vegetarian , price ); menuItems . put ( menuItem . getName (), menuItem ); } public Map String , MenuItem getItems () { return menuItems ; } public Iterator MenuItem createIterator () { return menuItems . values (). iterator (); } } Waitress public class Waitress { Menu cafeMenu ; public Waitress ( Menu cafeMenu ) { this . cafeMenu = cafeMenu ; } public void printMenu () { Iterator MenuItem cafeIterator = cafeMenu . createIterator (); printMenu ( cafeIterator ); } private void printMenu ( Iterator MenuItem iterator ) { while ( iterator . hasNext ()) { MenuItem menuItem = iterator . next (); System . out . print ( menuItem . getName () + , ); System . out . print ( menuItem . getPrice () + -- ); System . out . println ( menuItem . getDescription ()); } } } Testdrive public class MenuTestDrive { public static void main ( String args []) { CafeMenu cafeMenu = new CafeMenu (); Waitress waitress = new Waitress ( pancakeHouseMenu , dinerMenu , cafeMenu ); waitress . printMenu (); } }","title":"Example - Caf\u00e9 Menu"},{"location":"java/hfdp/ch9/#iterators-and-collections","text":"Each Collection object knows how to create its own Iterator . Java 5 includes a new form of the for statement, called for/in , that lets you iterate over a collection or an array without creating an iterator explicitly. To use for/in, you use a for statement that looks like: for ( Object obj : collection ) { ... } Iterates over each object in the Collection obj is assigned to the next element in the collection each time through the loop.","title":"Iterators and Collections"},{"location":"java/hfdp/ch9/#2-composite-pattern","text":"","title":"2 Composite Pattern"},{"location":"java/hfdp/ch9/#composite-pattern-defined","text":"The Composite Pattern(\u7ec4\u5408\u6a21\u5f0f) allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. The Composite Pattern create a part-whole hierarchy; that is, a tree of objects that is made of parts (e.g. menus and menu items) but that can be treated as a whole. (i.e. treat \u201cindividual objects and compositions uniformly.\u201d) Cohesion is a term you\u2019ll hear used as a measure of how closely a class or a module supports a single purpose or responsibility. We say that a module or class has high cohesion when it is designed around a set of related functions, and we say it has low cohesion when it is designed around a set of unrelated functions.","title":"Composite Pattern Defined"},{"location":"java/hfdp/ch9/#composite-pattern-class-diagram","text":"","title":"Composite Pattern Class Diagram"},{"location":"java/hfdp/ch9/#example-menus","text":"We try to design a menu that support menus with menus. For example, we want to make the dessert menu an element of the DinerMenu collection. Composite pattern gives us a way to create a tree structure that can handle a nested group of menus and menu items in the same structure. The Waitress is going to use the MenuComponent interface to access both Menus and MenuItems . MenuComponent represents the interface for both MenuItem and Menu . We've used an abstract class here because we want to provide default implementations for these methods. Menucomponent /** MenuComponent provides default implementation for every method. * */ public abstract class MenuComponent { public String getName (){ throw new UnsupportedOperationException (); } public String getDescription (){ throw new UnsupportedOperationException (); } public double getPrice () { throw new UnsupportedOperationException (); } public boolean isVegetarian () { throw new UnsupportedOperationException (); } public void print () { throw new UnsupportedOperationException (); } public void add ( MenuComponent menuComponent ) { throw new UnsupportedOperationException (); } public void remove ( MenuComponent menuComponent ) { throw new UnsupportedOperationException (); } public MenuComponent getChild ( int index ) { throw new UnsupportedOperationException (); } } Menuitem public class MenuItem extends MenuComponent { String name ; String description ; boolean isVegetarian ; double price ; public MenuItem ( String name , String description , boolean vegetarian , double price ) { this . name = name ; this . description = description ; this . isVegetarian = vegetarian ; this . price = price ; } @Override public String getName () { return name ; } @Override public String getDescription () { return description ; } @Override public boolean isVegetarian () { return isVegetarian ; } @Override public double getPrice () { return price ; } @Override public void print () { System . out . print ( + getName ()); if ( isVegetarian ()) { System . out . print ( (v) ); } System . out . println ( , + getPrice ()); System . out . println ( -- + getDescription ()); } // END PRINT } Menu public class Menu extends MenuComponent { private String name ; private String description ; private ArrayList MenuComponent menuComponents = new ArrayList (); public Menu ( String name , String description ) { this . name = name ; this . description = description ; } @Override public String getName () { return name ; } @Override public String getDescription () { return description ; } @Override public void add ( MenuComponent menuComponent ) { menuComponents . add ( menuComponent ); } @Override public void remove ( MenuComponent menuComponent ) { menuComponents . remove ( menuComponent ); } @Override public MenuComponent getChild ( int index ) { return menuComponents . get ( index ); } @Override public void print () { System . out . print ( \\n + getName ()); System . out . println ( , + getDescription ()); System . out . println ( --------------------- ); Iterator MenuComponent iterator = menuComponents . iterator (); while ( iterator . hasNext ()) { MenuComponent nextMenuComponent = iterator . next (); nextMenuComponent . print (); } } } Menutestdrive public class MenuTestDrive { public static void main ( String args []) { MenuComponent pancakeHouseMenu = new Menu ( PANCAKE HOUSE MENU , Breakfast ); MenuComponent dinerMenu = new Menu ( DINER MENU , Lunch ); MenuComponent cafeMenu = new Menu ( CAFE MENU , Dinner ); MenuComponent dessertMenu = new Menu ( DESSERT MENU , Dessert of course! ); MenuComponent coffeeMenu = new Menu ( COFFEE MENU , Stuff to go with your afternoon coffee ); MenuComponent allMenus = new Menu ( ALL MENUS , All menus combined ); allMenus . add ( pancakeHouseMenu ); allMenus . add ( dinerMenu ); allMenus . add ( cafeMenu ); pancakeHouseMenu . add ( new MenuItem ( K B s Pancake Breakfast , Pancakes with scrambled eggs, and toast , true , 2.99 )); pancakeHouseMenu . add ( new MenuItem ( Regular Pancake Breakfast , Pancakes with fried eggs, sausage , false , 2.99 )); pancakeHouseMenu . add ( new MenuItem ( Blueberry Pancakes , Pancakes made with fresh blueberries, and blueberry syrup , true , 3.49 )); pancakeHouseMenu . add ( new MenuItem ( Waffles , Waffles, with your choice of blueberries or strawberries , true , 3.59 )); dinerMenu . add ( new MenuItem ( Vegetarian BLT , (Fakin ) Bacon with lettuce tomato on whole wheat , true , 2.99 )); dinerMenu . add ( new MenuItem ( BLT , Bacon with lettuce tomato on whole wheat , false , 2.99 )); dinerMenu . add ( new MenuItem ( Soup of the day , A bowl of the soup of the day, with a side of potato salad , false , 3.29 )); dinerMenu . add ( new MenuItem ( Hotdog , A hot dog, with saurkraut, relish, onions, topped with cheese , false , 3.05 )); dinerMenu . add ( new MenuItem ( Steamed Veggies and Brown Rice , Steamed vegetables over brown rice , true , 3.99 )); dinerMenu . add ( new MenuItem ( Pasta , Spaghetti with Marinara Sauce, and a slice of sourdough bread , true , 3.89 )); dinerMenu . add ( dessertMenu ); dessertMenu . add ( new MenuItem ( Apple Pie , Apple pie with a flakey crust, topped with vanilla icecream , true , 1.59 )); dessertMenu . add ( new MenuItem ( Cheesecake , Creamy New York cheesecake, with a chocolate graham crust , true , 1.99 )); dessertMenu . add ( new MenuItem ( Sorbet , A scoop of raspberry and a scoop of lime , true , 1.89 )); cafeMenu . add ( new MenuItem ( Veggie Burger and Air Fries , Veggie burger on a whole wheat bun, lettuce, tomato, and fries , true , 3.99 )); cafeMenu . add ( new MenuItem ( Soup of the day , A cup of the soup of the day, with a side salad , false , 3.69 )); cafeMenu . add ( new MenuItem ( Burrito , A large burrito, with whole pinto beans, salsa, guacamole , true , 4.29 )); cafeMenu . add ( coffeeMenu ); coffeeMenu . add ( new MenuItem ( Coffee Cake , Crumbly cake topped with cinnamon and walnuts , true , 1.59 )); coffeeMenu . add ( new MenuItem ( Bagel , Flavors include sesame, poppyseed, cinnamon raisin, pumpkin , false , 0.69 )); coffeeMenu . add ( new MenuItem ( Biscotti , Three almond or hazelnut biscotti cookies , true , 0.89 )); Waitress waitress = new Waitress ( allMenus ); waitress . printMenu (); } }","title":"Example - Menus"},{"location":"java/hfdp/ch9/#example-javaawtcontainer","text":"component: Component leaf: Checkbox , Button , Label ... composite: Container java.awt.Container.add() add a Component to a Container . public class Container extends Component { public Component add ( Component comp ) {...} public void remove ( Component comp ) {...}","title":"Example - java.awt.Container"},{"location":"java/hfj/","text":"HFJ Chapter 1: Dive in A Quick Dip Chapter 2: Classes and Objects Chapter 3: Primitives and References Chapter 4: Methods use Instance Variables Chapter 5: Writing a Program Chapter 6: Get to Know the Java API Chapter 7: Inheritance and Polymorphism Chapter 8: Interfaces and Abstract Classes Chapter 9: Constructors and Garbage Collection Chapter 10: Numbers and Statics Chapter 11: Exception Handling Chapter 12: Getting GUI Chapter 13: Using Swing Chapter 14: Serialization and File I/O Chapter 15: Networking and Threads Chapter 16: Collections and Generics Chapter 17: Packages, Jars and Deployment Chapter 18: Remote deploy with RMI Appendix: The Top Ten Topics","title":"Contents"},{"location":"java/hfj/#hfj","text":"Chapter 1: Dive in A Quick Dip Chapter 2: Classes and Objects Chapter 3: Primitives and References Chapter 4: Methods use Instance Variables Chapter 5: Writing a Program Chapter 6: Get to Know the Java API Chapter 7: Inheritance and Polymorphism Chapter 8: Interfaces and Abstract Classes Chapter 9: Constructors and Garbage Collection Chapter 10: Numbers and Statics Chapter 11: Exception Handling Chapter 12: Getting GUI Chapter 13: Using Swing Chapter 14: Serialization and File I/O Chapter 15: Networking and Threads Chapter 16: Collections and Generics Chapter 17: Packages, Jars and Deployment Chapter 18: Remote deploy with RMI Appendix: The Top Ten Topics","title":"HFJ"},{"location":"java/hfj/Appendix/","text":"Appendix: The Top Ten Topics 10 Bit Manipulation Bitwise NOT Operator: ~, \"flips all the bits of primitive\" int x = 10 ; // bits are 00001010 x = ~ x ; // bits are now 11110101 Bitwise AND Operator: , returns a value whose bits are turned on only if both original bits are turned on: int a = x y ; //bits are 0000010 Bitwise OR Operator: |, returns a value whose bits are turned on only if either of the original bits are turned on; int a = x | y ; //bits are 00001110 Right Shift Operator: , the sign bit does not change; int y = x 2 ; //bits are 11111101 Unsigned Right Shift Operator: , the sign bit might change: int y = x 2 ; //bits are 00111101 Left Shift Operator: , the sign bit might change. int y = x 2 ; //bits are 11010100 9 Immutability An object is considered immutable if its state cannot change after it is constructed. [ Immutable Object ] For security purposes, and for the sake of conserving memory, String s in Java are immutable. Whenever you make a new String , the JVM puts it into a special part of memory called the \"String pool\". Wrappers are Immutable. There is no setter method for a wrapper object. 8 Assertions Add assertion statements to your code whenever you believe that something must be true . For instance: assert ( height 0 ); // if true, program continues normally // if false, throw an AssertionEror You can add a little more information to the stack trace by saying: assert ( height 0 ) : \u201c height = \u201c + height + \u201c weight = \u201c + weight ; To compile and run with assertions: javac TestDriveGame , java // no command lines options were necesseary java - ea TestDriveGame 7 Block Scope \u7565 6 Linked Invocations \u7565(obvious) 5 Anonymous and Static Nested Classes Any Java class that's defined within the scope of another class is a nested class(\u5d4c\u5957\u7c7b). And non-static class are often referred to as *inner classes(\u5185\u90e8\u7c7b). There are other kinds of inner classes including static and anonymous . static nested classes A static nested class (\u9759\u6001\u5d4c\u5957\u7c7b) is a class enclosed with another, and marked with the static modifier. Because static nested classes are still considered a member of the enclosing/outer class, they still get access to any private members of the outer class.. but only the ones that are also static . public class FooOuter { static class BarInner { void sayIt () { System . out . println ( \u201c method of a static inner class \u201d ); } } } class Test { public static void main ( String [] args ) { FooOuter . BarInner foo . sayIt (); foo = new FooOuter . BarInner (); } } Anonymous inner classes Anonymous (inner) classes(\u533f\u540d\u5185\u90e8\u7c7b) enable you to make your code more concise. They enable you to declare and instantiate a class at the same time. They are like local classes except that they do not have a name. Use them if you need to use a local class only once. button . addActionListener ( new ActionListener () { public void actionPerformed ( ActionEvent ev ) { System . exit ( 0 ); } }); 4 Access Levels and Access Modifiers \u7565 3 String and StringBuffer/StringBuilder Methods StringBuffer is a thread-safe, mutable sequence of characters. A string buffer is like a String , but can be modified. String buffers are safe for use by multiple threads. The methods are synchronized where necessary so that all the operations on any particular instance behave as if they occur in some serial order that is consistent with the order of the method calls made by each of the individual threads involved. [ JavaDOC -StringBuffer ] public synchronized StringBuffer append ( String str ) { toStringCache = null ; super . append ( str ); return this ; } The StringBuilder class is not synchronized, hence with less overhead in a single threaded environment. As of Java 5.0, you should use the StringBuilder class instead of StringBuffer , unless your String manipulations need to be thread-safe, which is uncommon. The StringBuiler StringBuffer classes have: StringBxxxx delete ( int start , int end ); // delete a portion StringBxxxx insert ( int offset , any primitive or a char []); // insert something StringBxxxx replace ( int start , int end , String s ); // replace this part with this String StringBxxx reverse (); // reverse the SB from front to back void setCharAt ( int index , char ch ); // replace a given character 2 Multidimensional Arrays 1 Enumerations An enumeration is a set of valid values. Before Java5.0, you could only do a half-baked job of creating an enumeration in Java: public static final int JERRY = 1 ; public static final int BOBBY = 2 ; public static final int PHIL = 3 ; As of Java 5.0, you can create full-fledged enumerations using enum keyword. public enum Members { JERRY , BOBBY , PHIL }; // The selectedBandMember variable is of type Members , // and can ONLY have a value of JERRY, BOBBY, PHIL. public Members selectedBandMember ; // later in the code if ( selectedBandMember == Members . JERRY ) { // do JERRY related stuff } when you create an enum, you're creating A NEW CLASS, and you're implicitly extending java.lang.Enum . public abstract class Enum E extends Enum E extends Object implements Comparable E , Serializable Using \u201cif\u201d and \u201cswitch\u201d with Enums Using the enum, we can perform branches in our code using either the if or switch statement. Also we can compare enum instances using either == or the .equals() method. Usually == is considered better style. Members n = Members . BOBBY ; if ( n . equals ( Members . JERRY )) System . out . println ( \u201c Jerrrry ! \u201d ); if ( n == Members . BOBBY ) System . out . println ( \u201c Rat Dog \u201d ); Members ifName = Members . PHIL ; switch ( ifName ) { case JERRY : System . out . print ( \u201c make it sing \u201c ); case PHIL : System . out . print ( \u201c go deep \u201c ); case BOBBY : System . out . println ( \u201c Cassidy ! \u201d ); }","title":"Appendix: The Top Ten Topics"},{"location":"java/hfj/Appendix/#appendix-the-top-ten-topics","text":"","title":"Appendix: The Top Ten Topics"},{"location":"java/hfj/Appendix/#10-bit-manipulation","text":"Bitwise NOT Operator: ~, \"flips all the bits of primitive\" int x = 10 ; // bits are 00001010 x = ~ x ; // bits are now 11110101 Bitwise AND Operator: , returns a value whose bits are turned on only if both original bits are turned on: int a = x y ; //bits are 0000010 Bitwise OR Operator: |, returns a value whose bits are turned on only if either of the original bits are turned on; int a = x | y ; //bits are 00001110 Right Shift Operator: , the sign bit does not change; int y = x 2 ; //bits are 11111101 Unsigned Right Shift Operator: , the sign bit might change: int y = x 2 ; //bits are 00111101 Left Shift Operator: , the sign bit might change. int y = x 2 ; //bits are 11010100","title":"10 Bit Manipulation"},{"location":"java/hfj/Appendix/#9-immutability","text":"An object is considered immutable if its state cannot change after it is constructed. [ Immutable Object ] For security purposes, and for the sake of conserving memory, String s in Java are immutable. Whenever you make a new String , the JVM puts it into a special part of memory called the \"String pool\". Wrappers are Immutable. There is no setter method for a wrapper object.","title":"9 Immutability"},{"location":"java/hfj/Appendix/#8-assertions","text":"Add assertion statements to your code whenever you believe that something must be true . For instance: assert ( height 0 ); // if true, program continues normally // if false, throw an AssertionEror You can add a little more information to the stack trace by saying: assert ( height 0 ) : \u201c height = \u201c + height + \u201c weight = \u201c + weight ; To compile and run with assertions: javac TestDriveGame , java // no command lines options were necesseary java - ea TestDriveGame","title":"8 Assertions"},{"location":"java/hfj/Appendix/#7-block-scope","text":"\u7565","title":"7 Block Scope"},{"location":"java/hfj/Appendix/#6-linked-invocations","text":"\u7565(obvious)","title":"6 Linked Invocations"},{"location":"java/hfj/Appendix/#5-anonymous-and-static-nested-classes","text":"Any Java class that's defined within the scope of another class is a nested class(\u5d4c\u5957\u7c7b). And non-static class are often referred to as *inner classes(\u5185\u90e8\u7c7b). There are other kinds of inner classes including static and anonymous .","title":"5 Anonymous and Static Nested Classes"},{"location":"java/hfj/Appendix/#static-nested-classes","text":"A static nested class (\u9759\u6001\u5d4c\u5957\u7c7b) is a class enclosed with another, and marked with the static modifier. Because static nested classes are still considered a member of the enclosing/outer class, they still get access to any private members of the outer class.. but only the ones that are also static . public class FooOuter { static class BarInner { void sayIt () { System . out . println ( \u201c method of a static inner class \u201d ); } } } class Test { public static void main ( String [] args ) { FooOuter . BarInner foo . sayIt (); foo = new FooOuter . BarInner (); } }","title":"static nested classes"},{"location":"java/hfj/Appendix/#anonymous-inner-classes","text":"Anonymous (inner) classes(\u533f\u540d\u5185\u90e8\u7c7b) enable you to make your code more concise. They enable you to declare and instantiate a class at the same time. They are like local classes except that they do not have a name. Use them if you need to use a local class only once. button . addActionListener ( new ActionListener () { public void actionPerformed ( ActionEvent ev ) { System . exit ( 0 ); } });","title":"Anonymous inner classes"},{"location":"java/hfj/Appendix/#4-access-levels-and-access-modifiers","text":"\u7565","title":"4 Access Levels and Access Modifiers"},{"location":"java/hfj/Appendix/#3-string-and-stringbufferstringbuilder-methods","text":"StringBuffer is a thread-safe, mutable sequence of characters. A string buffer is like a String , but can be modified. String buffers are safe for use by multiple threads. The methods are synchronized where necessary so that all the operations on any particular instance behave as if they occur in some serial order that is consistent with the order of the method calls made by each of the individual threads involved. [ JavaDOC -StringBuffer ] public synchronized StringBuffer append ( String str ) { toStringCache = null ; super . append ( str ); return this ; } The StringBuilder class is not synchronized, hence with less overhead in a single threaded environment. As of Java 5.0, you should use the StringBuilder class instead of StringBuffer , unless your String manipulations need to be thread-safe, which is uncommon. The StringBuiler StringBuffer classes have: StringBxxxx delete ( int start , int end ); // delete a portion StringBxxxx insert ( int offset , any primitive or a char []); // insert something StringBxxxx replace ( int start , int end , String s ); // replace this part with this String StringBxxx reverse (); // reverse the SB from front to back void setCharAt ( int index , char ch ); // replace a given character","title":"3 String and StringBuffer/StringBuilder Methods"},{"location":"java/hfj/Appendix/#2-multidimensional-arrays","text":"","title":"2 Multidimensional Arrays"},{"location":"java/hfj/Appendix/#1-enumerations","text":"An enumeration is a set of valid values. Before Java5.0, you could only do a half-baked job of creating an enumeration in Java: public static final int JERRY = 1 ; public static final int BOBBY = 2 ; public static final int PHIL = 3 ; As of Java 5.0, you can create full-fledged enumerations using enum keyword. public enum Members { JERRY , BOBBY , PHIL }; // The selectedBandMember variable is of type Members , // and can ONLY have a value of JERRY, BOBBY, PHIL. public Members selectedBandMember ; // later in the code if ( selectedBandMember == Members . JERRY ) { // do JERRY related stuff } when you create an enum, you're creating A NEW CLASS, and you're implicitly extending java.lang.Enum . public abstract class Enum E extends Enum E extends Object implements Comparable E , Serializable","title":"1 Enumerations"},{"location":"java/hfj/Appendix/#using-if-and-switch-with-enums","text":"Using the enum, we can perform branches in our code using either the if or switch statement. Also we can compare enum instances using either == or the .equals() method. Usually == is considered better style. Members n = Members . BOBBY ; if ( n . equals ( Members . JERRY )) System . out . println ( \u201c Jerrrry ! \u201d ); if ( n == Members . BOBBY ) System . out . println ( \u201c Rat Dog \u201d ); Members ifName = Members . PHIL ; switch ( ifName ) { case JERRY : System . out . print ( \u201c make it sing \u201c ); case PHIL : System . out . print ( \u201c go deep \u201c ); case BOBBY : System . out . println ( \u201c Cassidy ! \u201d ); }","title":"Using \u201cif\u201d and \u201cswitch\u201d with Enums"},{"location":"java/hfj/ch1/","text":"Chapter 1 Dive in A Quick Dip Java has friendly syntax, object-oriented features, memory management, and best of all - the promise of probability ( write-one/run-anywhere ). You type a source code file( .java ). compile it using the javac compiler, then run( java ) the compiled bytecode( .class ) on a java virtual machine. main method Every Java application has to have at least one class, and at least one main method. The main method is where your program starts running. public static void main ( String [] args ){ //your code goes here } Looping Java has three standard looping constructs: while , do-while , and for . while ( ) { } A boolean and an integer are not compatible types in Java. int x=1; while (x) {} //wrong Conditional branching if ( conditional test ) { } else { } Note System.out.println inserts a newline, System.out.print keeps printing to the same line. Strongly-typed language Java is a strongly typed language (\u5f3a\u7c7b\u578b\u8bed\u8a00) and that means I can't allow variables to hold data of the wrong type. Dynamic Binding However, There are some datatype exceptions that can emerge at runtime, but some of those have to be allowed to support one of Java's other important features -- dynamic binding (\u52a8\u6001\u7ed1\u5b9a). Here are a few important differences between static and dynamic binding in Java [ ref ]: Static binding in Java occurs during compile time while dynamic binding occurs during runtime . private , final and static methods and variables use static binding and are bonded by compiler while virtual methods are bonded during runtime based upon runtime object. Static binding uses Type (class in Java) information for binding while dynamic binding uses object to resolve binding. Overloaded methods are bonded using static binding while overridden methods are bonded using dynamic binding at runtime. Static Binding Example in Java: public class StaticBindingTest { public static void main ( String args []) { Collection c = new HashSet (); StaticBindingTest et = new StaticBindingTest (); et . sort ( c ); } //overloaded method takes Collection argument public Collection sort ( Collection c ) { System . out . println ( Inside Collection sort method ); return c ; } //another overloaded method which takes HashSet argument which is sub class public Collection sort ( HashSet hs ) { System . out . println ( Inside HashSet sort method ); return hs ; } } Example of Dynamic Binding in Java: public class DynamicBindingTest { public static void main ( String args []) { Vehicle vehicle = new Car (); //here Type is vehicle but object will be Car vehicle . start (); //Car s start called because start() is overridden method } } class Vehicle { public void start () { System . out . println ( Inside start method of Vehicle ); } } class Car extends Vehicle { @Override public void start () { System . out . println ( Inside start method of Car ); } }","title":"Chapter 1: Dive in A Quick Dip"},{"location":"java/hfj/ch1/#chapter-1-dive-in-a-quick-dip","text":"Java has friendly syntax, object-oriented features, memory management, and best of all - the promise of probability ( write-one/run-anywhere ). You type a source code file( .java ). compile it using the javac compiler, then run( java ) the compiled bytecode( .class ) on a java virtual machine.","title":"Chapter 1 Dive in A Quick Dip"},{"location":"java/hfj/ch1/#main-method","text":"Every Java application has to have at least one class, and at least one main method. The main method is where your program starts running. public static void main ( String [] args ){ //your code goes here }","title":"main method"},{"location":"java/hfj/ch1/#looping","text":"Java has three standard looping constructs: while , do-while , and for . while ( ) { } A boolean and an integer are not compatible types in Java. int x=1; while (x) {} //wrong","title":"Looping"},{"location":"java/hfj/ch1/#conditional-branching","text":"if ( conditional test ) { } else { } Note System.out.println inserts a newline, System.out.print keeps printing to the same line.","title":"Conditional branching"},{"location":"java/hfj/ch1/#strongly-typed-language","text":"Java is a strongly typed language (\u5f3a\u7c7b\u578b\u8bed\u8a00) and that means I can't allow variables to hold data of the wrong type.","title":"Strongly-typed language"},{"location":"java/hfj/ch1/#dynamic-binding","text":"However, There are some datatype exceptions that can emerge at runtime, but some of those have to be allowed to support one of Java's other important features -- dynamic binding (\u52a8\u6001\u7ed1\u5b9a). Here are a few important differences between static and dynamic binding in Java [ ref ]: Static binding in Java occurs during compile time while dynamic binding occurs during runtime . private , final and static methods and variables use static binding and are bonded by compiler while virtual methods are bonded during runtime based upon runtime object. Static binding uses Type (class in Java) information for binding while dynamic binding uses object to resolve binding. Overloaded methods are bonded using static binding while overridden methods are bonded using dynamic binding at runtime. Static Binding Example in Java: public class StaticBindingTest { public static void main ( String args []) { Collection c = new HashSet (); StaticBindingTest et = new StaticBindingTest (); et . sort ( c ); } //overloaded method takes Collection argument public Collection sort ( Collection c ) { System . out . println ( Inside Collection sort method ); return c ; } //another overloaded method which takes HashSet argument which is sub class public Collection sort ( HashSet hs ) { System . out . println ( Inside HashSet sort method ); return hs ; } } Example of Dynamic Binding in Java: public class DynamicBindingTest { public static void main ( String args []) { Vehicle vehicle = new Car (); //here Type is vehicle but object will be Car vehicle . start (); //Car s start called because start() is overridden method } } class Vehicle { public void start () { System . out . println ( Inside start method of Vehicle ); } } class Car extends Vehicle { @Override public void start () { System . out . println ( Inside start method of Car ); } }","title":"Dynamic Binding"},{"location":"java/hfj/ch10/","text":"Chapter 10 Numbers and Statics 1 Static methods Methods in the Math class don't use any instance variable values. Because the methods of Math are 'static', you don't need to have an instance of Math. All you need is the Math class. int x = Math . round ( 42.2 ); int y = Math . min ( 56 , 12 ); int z = Math . abs (- 343 ); If you try to make an instance of class Math: Math mathObject = new Math () You'll get an error: Math() has private access in java.lang.Math This error shows that the Math constructor is marked private! That means you can NEVER say new on the Math class to make a new Math object. The keyword static lets a method run without any instance of the class . public static int min ( int a , int b ) { //return the lesser of a and b } static method v.s. non-static method: Call a static method using a class name (e.g. Math.min(88, 12) ) Call a non-static method using a reference variable name (e.g. t2.play() ) Comparison between abstract class and private constructor Often (although not always), a class with static method is not to be instantiated. But this does not mean that a class with one or more static methods should never be instantiated. In fact, every class you put a main() method in is a class with a static method in it. An abstract class is impossible to be instantiated. And a non-abstract class with private constructor means only code from within the class can invoke the constructor. Usage Static methods can't use non-static methods/variables , because static methods run without knowing about any particular instance of the static method's class. public class Duck { private int size ; public static void main ( String [] args ) { // which Duck? Whose size? System . out . println ( Size of duck is + size ); // Calling getSize() just postpones // the inevitable-getSize() use the size instance varible. System . out . println ( size is + getSize ()); } public void setSize ( int s ) { size = s ; } public int getSize () { return size ; } } 2 Static variable Static variable: value is the same for All instances of the class. Static variables are shared by all instances of a class. In other words, one value per class , instead of one value per instance . public class Duck { private int size ; // The static duckCount variable is initialized // ONLY when the class is first loaded, // NOT each time a new instance is made private static int duckCount = 0 ; public Duck () { // Now it will keep incrementing each time the Duck constructor runs // because duck Count is static and won t reset to 0. duckCount ++; } public void setSize ( int s ) { size = s ; } public int getSize () { return size ; } } Initializing a static variable There are two guarantees about static initialization: Static variables in a class are initialized before any object of that class can be created. Static variables in a class are initialized before any static method of the class runs. If you don't explicitly initialize a static variable, it gets a default value when declared. ( in exactly the same way that instance variables are given default values) Static final Static final variables are constants. A variable marked final means that -- once initialized -- it can never change. In other words, the value of the static final variable will stay the same as long as the class is loaded. For example, Math.PI is declared as public static final double PI = 3.141592653589793 ; Name convection: Constant variables names should be in all caps! final variables in Java must be initialized. final class initialize_final { private int x ; // x will have a default value without initialization. private final int y = 0 ; //y must be initialized. private final int z ; //ERROR! y must be initialized. private static final int h ; //h must be initialized. static { h = 10 ; //static final variable can be initialized here. See details in next section. } } //output: Error: variable z not initialized in the default constructor. Static block A static block (\u9759\u6001\u5757) or static initializer (\u9759\u6001\u521d\u59cb\u5316\u7a0b\u5e8f) is a block of code that runs when a class is loaded, before any other code can use the class , so it's a great place to initialize a static final variable. public class Bar { public static final double BAR_SIGN ; static { // this code runs as soon as the class is loaded, // before any static method is called, // and even before any static variable can be used. BAR_SIGN = ( double ) Math . random (); } } Important Notes: Static blocks will be executed only once as soon the class is loaded in memory . They are executed in the order which they appear in the class. You cannot refer to any instance variables from within the static blocks. You can have as many static blocks as many you want in a class. class StaticSuper { static { System . out . println ( super static block ); } StaticSuper (){ System . out . println ( super constructor ); } } public class StaticTests extends StaticSuper { static int rand ; static { rand = ( int ) ( Math . random ()* 6 ); System . out . println ( static block + rand ); } StaticTests () { System . out . println ( constructor ); } public static void main ( String [] args ) { System . out . println ( int main ); StaticTests st = new StaticTests (); } } output: super static block static block2 int main super constructor constructor Final The keyword final can modify non-static variables, including instance variables, local variables, and even method parameters. In each case, it means the same thing: the value can't be changed . A final variable means you can't change its value. A final method means you can't override the method. A final class means you can't extend the class. Note If the class is final, you don't need to mark the method final. 3 Wrapping a primitive Sometimes you want to treat a primitive like an object. For example, in all versions of Java prior to 5.0, you can't put a primitive directly into a collection like ArrayList or HashMap: int x = 32 ; ArrayList list = new ArrayList (); // ArrayList only has add() methods that // take object references, not primitives. list . add ( x ); When you need to treat a primitive like an object, wrap it. Java provide wrapper classes for every primitive type. Each one is named after the primitive type it wraps, but with the first letter capitalized. Boolean Character // different: char Byte Short Integer // different: int Long Float Double Autoboxing The autoboxing/unboxing (\u81ea\u52a8\u88c5\u7bb1/\u62c6\u7bb1) feature added to Java 5.0 does the conversion from primitive to wrap/unwrap object automatically ! public void doNumsNewWay () { // Make an ArrayList of type Integer ArrayList Integer listOfNumbers = new ArrayList Integer (); // Just add it! listOfNumbers . add ( 3 ); // And the compiler automatically unwraps (unboxes) the Integer object // so you can assign the int value directly to a primitive without // having to call the intValue() method on the Integer object. int num = listOfNumbers . get ( 0 ); } Autoboxing works almost everywhere: Method arguments: void takeNumber(Integer i){} Return values: int giveNumber(){ Integer x = new Integer(42); return x; } Boolean expressions: if (bool) {System.out.println( true );} Option on numbers: Integer i = new Integer(42); i++ Assignments: double x = 10.0; Double d = x; Wrapper method Wrappers have a bunch of really useful static methods. String s = 2 ; int x = Integer . parseInt ( s ); double d = Integer . parseDobule ( 420.24 ); double d = 42.5 ; String doubleString = Double . toString ( d ); 4 Number formatting Java has a powerful and flexible formatting through a Formatter class in java.util . You don't need to create and call methods on the Formatter class yourself, just calling a static String.format() method and passing it the thing you want formatted along with formatting instructions. String s = String . format ( %, d , 1000000000 ); System . out . println ( s ); // output: 1,000,000,000 The format specifier The format specifier (\u683c\u5f0f\u8bf4\u660e\u7b26) is the things that go after the percentage (%) sign. A format specifier can have up to five different parts (not including the \u201c%\u201d). Everything in brackets [ ] below is optional , so only the percent (%) and the type are required. But the order is also mandatory , so any parts you DO use must go in this order. %[argument number][\ufb02ags][width][.precision]type flags : It is for special formatting options like inserting commas, or putting negative numbers in parentheses, or to make the numbers left justified. width : It defines the MINIMUM number of characters that will be used. If the number is longer than the width, it'll still be used in full, but if it's less than the width, it'll be padded with zeros. precision : It defines the precision. It sets the number of decimal places. type : It is mandatory and will usually be \"d\" for a decimal integer or \"f\" for a floating point number. A few examples: %,d : insert commas and format the number as a decimal integer. %,.2f : insert commas and format the number as a floating point with a precision of two decimal places. Date Formatting Date formats use a two-character type that starts with \"t\". import java.util.Date //The complete data and time: %tc String . format ( %tc , new Date ()); //output: Mon Jul 30 16:33:29 CST 2017 // Just the time %tr String . format ( %tr , new Date ()); // output: 04:35:11 PM // Day of the week, month and day %tA %tB %td Date today = new Date (); String . format ( \u201c % tA , % tB % td \u201d , today , today , today ) // output: Sunday, November 28 String . format ( \u201c % tA , % tB % td \u201d , today ); // output: Sunday, November 28 Calendar For a time-stamp of \"now\" use Date. But for everything else, use Calendar (in java . util . Calendar ). Calendar is actually an abstract class, so you can't use new . Instead, use the static getInstance() method, which gives you an instance of a concrete Calendar subclass . Examples of working with a Calendar object: Calendar c = Calendar . getInstance (); c . set ( 2004 , 0 , 7 , 15 , 40 ); // set time to Jan 7, 2004 at 15:40 (Notice the month is zero-based) long day1 = c . getTimeInMillis (); day1 += 1000 * 60 * 60 ; c . setTimeInMillis ( day1 ); System . out . println ( new hour + c . get ( c . HOUR_OF_DAY )); //new hour 16 c . add ( c . DATE , 35 ); System . out . println ( add 35 days + c . getTime ()); // add 35 days Wed Feb 11 16:40:03 CST 2004 c . roll ( c . DATE , 35 ); System . out . println ( roll 35 days + c . getTime ()); // roll 35 days Tue Feb 17 16:40:03 CST 2004 c . set ( c . DATE , 1 ); System . out . println ( set to 1 + c . getTime ()); //set to 1 Sun Feb 01 16:40:03 CST 2004","title":"Chapter 10: Numbers and Statics"},{"location":"java/hfj/ch10/#chapter-10-numbers-and-statics","text":"","title":"Chapter 10 Numbers and Statics"},{"location":"java/hfj/ch10/#1-static-methods","text":"Methods in the Math class don't use any instance variable values. Because the methods of Math are 'static', you don't need to have an instance of Math. All you need is the Math class. int x = Math . round ( 42.2 ); int y = Math . min ( 56 , 12 ); int z = Math . abs (- 343 ); If you try to make an instance of class Math: Math mathObject = new Math () You'll get an error: Math() has private access in java.lang.Math This error shows that the Math constructor is marked private! That means you can NEVER say new on the Math class to make a new Math object. The keyword static lets a method run without any instance of the class . public static int min ( int a , int b ) { //return the lesser of a and b } static method v.s. non-static method: Call a static method using a class name (e.g. Math.min(88, 12) ) Call a non-static method using a reference variable name (e.g. t2.play() )","title":"1 Static methods"},{"location":"java/hfj/ch10/#comparison-between-abstract-class-and-private-constructor","text":"Often (although not always), a class with static method is not to be instantiated. But this does not mean that a class with one or more static methods should never be instantiated. In fact, every class you put a main() method in is a class with a static method in it. An abstract class is impossible to be instantiated. And a non-abstract class with private constructor means only code from within the class can invoke the constructor.","title":"Comparison between abstract class and private constructor"},{"location":"java/hfj/ch10/#usage","text":"Static methods can't use non-static methods/variables , because static methods run without knowing about any particular instance of the static method's class. public class Duck { private int size ; public static void main ( String [] args ) { // which Duck? Whose size? System . out . println ( Size of duck is + size ); // Calling getSize() just postpones // the inevitable-getSize() use the size instance varible. System . out . println ( size is + getSize ()); } public void setSize ( int s ) { size = s ; } public int getSize () { return size ; } }","title":"Usage"},{"location":"java/hfj/ch10/#2-static-variable","text":"Static variable: value is the same for All instances of the class. Static variables are shared by all instances of a class. In other words, one value per class , instead of one value per instance . public class Duck { private int size ; // The static duckCount variable is initialized // ONLY when the class is first loaded, // NOT each time a new instance is made private static int duckCount = 0 ; public Duck () { // Now it will keep incrementing each time the Duck constructor runs // because duck Count is static and won t reset to 0. duckCount ++; } public void setSize ( int s ) { size = s ; } public int getSize () { return size ; } }","title":"2 Static variable"},{"location":"java/hfj/ch10/#initializing-a-static-variable","text":"There are two guarantees about static initialization: Static variables in a class are initialized before any object of that class can be created. Static variables in a class are initialized before any static method of the class runs. If you don't explicitly initialize a static variable, it gets a default value when declared. ( in exactly the same way that instance variables are given default values)","title":"Initializing a static variable"},{"location":"java/hfj/ch10/#static-final","text":"Static final variables are constants. A variable marked final means that -- once initialized -- it can never change. In other words, the value of the static final variable will stay the same as long as the class is loaded. For example, Math.PI is declared as public static final double PI = 3.141592653589793 ; Name convection: Constant variables names should be in all caps! final variables in Java must be initialized. final class initialize_final { private int x ; // x will have a default value without initialization. private final int y = 0 ; //y must be initialized. private final int z ; //ERROR! y must be initialized. private static final int h ; //h must be initialized. static { h = 10 ; //static final variable can be initialized here. See details in next section. } } //output: Error: variable z not initialized in the default constructor.","title":"Static final"},{"location":"java/hfj/ch10/#static-block","text":"A static block (\u9759\u6001\u5757) or static initializer (\u9759\u6001\u521d\u59cb\u5316\u7a0b\u5e8f) is a block of code that runs when a class is loaded, before any other code can use the class , so it's a great place to initialize a static final variable. public class Bar { public static final double BAR_SIGN ; static { // this code runs as soon as the class is loaded, // before any static method is called, // and even before any static variable can be used. BAR_SIGN = ( double ) Math . random (); } } Important Notes: Static blocks will be executed only once as soon the class is loaded in memory . They are executed in the order which they appear in the class. You cannot refer to any instance variables from within the static blocks. You can have as many static blocks as many you want in a class. class StaticSuper { static { System . out . println ( super static block ); } StaticSuper (){ System . out . println ( super constructor ); } } public class StaticTests extends StaticSuper { static int rand ; static { rand = ( int ) ( Math . random ()* 6 ); System . out . println ( static block + rand ); } StaticTests () { System . out . println ( constructor ); } public static void main ( String [] args ) { System . out . println ( int main ); StaticTests st = new StaticTests (); } } output: super static block static block2 int main super constructor constructor","title":"Static block"},{"location":"java/hfj/ch10/#final","text":"The keyword final can modify non-static variables, including instance variables, local variables, and even method parameters. In each case, it means the same thing: the value can't be changed . A final variable means you can't change its value. A final method means you can't override the method. A final class means you can't extend the class. Note If the class is final, you don't need to mark the method final.","title":"Final"},{"location":"java/hfj/ch10/#3-wrapping-a-primitive","text":"Sometimes you want to treat a primitive like an object. For example, in all versions of Java prior to 5.0, you can't put a primitive directly into a collection like ArrayList or HashMap: int x = 32 ; ArrayList list = new ArrayList (); // ArrayList only has add() methods that // take object references, not primitives. list . add ( x ); When you need to treat a primitive like an object, wrap it. Java provide wrapper classes for every primitive type. Each one is named after the primitive type it wraps, but with the first letter capitalized. Boolean Character // different: char Byte Short Integer // different: int Long Float Double","title":"3 Wrapping a primitive"},{"location":"java/hfj/ch10/#autoboxing","text":"The autoboxing/unboxing (\u81ea\u52a8\u88c5\u7bb1/\u62c6\u7bb1) feature added to Java 5.0 does the conversion from primitive to wrap/unwrap object automatically ! public void doNumsNewWay () { // Make an ArrayList of type Integer ArrayList Integer listOfNumbers = new ArrayList Integer (); // Just add it! listOfNumbers . add ( 3 ); // And the compiler automatically unwraps (unboxes) the Integer object // so you can assign the int value directly to a primitive without // having to call the intValue() method on the Integer object. int num = listOfNumbers . get ( 0 ); } Autoboxing works almost everywhere: Method arguments: void takeNumber(Integer i){} Return values: int giveNumber(){ Integer x = new Integer(42); return x; } Boolean expressions: if (bool) {System.out.println( true );} Option on numbers: Integer i = new Integer(42); i++ Assignments: double x = 10.0; Double d = x;","title":"Autoboxing"},{"location":"java/hfj/ch10/#wrapper-method","text":"Wrappers have a bunch of really useful static methods. String s = 2 ; int x = Integer . parseInt ( s ); double d = Integer . parseDobule ( 420.24 ); double d = 42.5 ; String doubleString = Double . toString ( d );","title":"Wrapper method"},{"location":"java/hfj/ch10/#4-number-formatting","text":"Java has a powerful and flexible formatting through a Formatter class in java.util . You don't need to create and call methods on the Formatter class yourself, just calling a static String.format() method and passing it the thing you want formatted along with formatting instructions. String s = String . format ( %, d , 1000000000 ); System . out . println ( s ); // output: 1,000,000,000","title":"4 Number formatting"},{"location":"java/hfj/ch10/#the-format-specifier","text":"The format specifier (\u683c\u5f0f\u8bf4\u660e\u7b26) is the things that go after the percentage (%) sign. A format specifier can have up to five different parts (not including the \u201c%\u201d). Everything in brackets [ ] below is optional , so only the percent (%) and the type are required. But the order is also mandatory , so any parts you DO use must go in this order. %[argument number][\ufb02ags][width][.precision]type flags : It is for special formatting options like inserting commas, or putting negative numbers in parentheses, or to make the numbers left justified. width : It defines the MINIMUM number of characters that will be used. If the number is longer than the width, it'll still be used in full, but if it's less than the width, it'll be padded with zeros. precision : It defines the precision. It sets the number of decimal places. type : It is mandatory and will usually be \"d\" for a decimal integer or \"f\" for a floating point number. A few examples: %,d : insert commas and format the number as a decimal integer. %,.2f : insert commas and format the number as a floating point with a precision of two decimal places.","title":"The format specifier"},{"location":"java/hfj/ch10/#date-formatting","text":"Date formats use a two-character type that starts with \"t\". import java.util.Date //The complete data and time: %tc String . format ( %tc , new Date ()); //output: Mon Jul 30 16:33:29 CST 2017 // Just the time %tr String . format ( %tr , new Date ()); // output: 04:35:11 PM // Day of the week, month and day %tA %tB %td Date today = new Date (); String . format ( \u201c % tA , % tB % td \u201d , today , today , today ) // output: Sunday, November 28 String . format ( \u201c % tA , % tB % td \u201d , today ); // output: Sunday, November 28","title":"Date Formatting"},{"location":"java/hfj/ch10/#calendar","text":"For a time-stamp of \"now\" use Date. But for everything else, use Calendar (in java . util . Calendar ). Calendar is actually an abstract class, so you can't use new . Instead, use the static getInstance() method, which gives you an instance of a concrete Calendar subclass . Examples of working with a Calendar object: Calendar c = Calendar . getInstance (); c . set ( 2004 , 0 , 7 , 15 , 40 ); // set time to Jan 7, 2004 at 15:40 (Notice the month is zero-based) long day1 = c . getTimeInMillis (); day1 += 1000 * 60 * 60 ; c . setTimeInMillis ( day1 ); System . out . println ( new hour + c . get ( c . HOUR_OF_DAY )); //new hour 16 c . add ( c . DATE , 35 ); System . out . println ( add 35 days + c . getTime ()); // add 35 days Wed Feb 11 16:40:03 CST 2004 c . roll ( c . DATE , 35 ); System . out . println ( roll 35 days + c . getTime ()); // roll 35 days Tue Feb 17 16:40:03 CST 2004 c . set ( c . DATE , 1 ); System . out . println ( set to 1 + c . getTime ()); //set to 1 Sun Feb 01 16:40:03 CST 2004","title":"Calendar"},{"location":"java/hfj/ch11/","text":"Chapter 11 Exception Handling 1 Exception Methods in Java use exceptions to tell the calling code, \"Something Bad Happened. I failed.\" If a method can fail at runtime, a method has to declare the exceptions it might throw. You may find a throws clause in the risky(exception-throwing) method'sdeclaration. It's the risky method that throws the exception to you . public static Sequencer getSequencer () throws MidiUnavailableException try/catch If you wrap the risky code in something called a try/catch , the compiler will relax. A try/catch block tells the compiler that you know an exceptional thing could happen in the method you're calling, and that you're prepared to handle it. An exception is an object of type Exception . try { // do risky thing } catch ( Exception ex ) { // its just like declaring a method argument // try to recover // This code only runs if an Exception is throw } Checked and unchecked exceptions The compiler checks for everything except RuntimeExceptions . Exceptions that are NOT subclass of RuntimeException are checked for by the compiler. They're called \" checked exceptions \". The compiler cares about all subclasses of Exception, unless they are a special type, RuntimeException ( unchecked exceptions ). Any exception class that extends RuntimeException gets a free pass . RuntimeExceptions can be thrown anywhere, with or without throws declarations or try/catch blocks. Most RuntimeExceptions come from a problem in your code logic , rather than a condition that fails at runtime in ways that you cannot predict or prevent. e.g. You cannot guarantee the server is up. You cannot guarantee the file is there. But you can make sure your code doesn't index of the end of an array. Flow control in try/catch blocks If the try succeeds , the code below the catch runs. If the try fails , it throws an exception and the rest of the try block doesn't run. And the catch block runs. Finally block A finally block is where you put code that must run regardless of an exception. If the try block fails (an exception), flow control immediately moves to the catch block. When the catch block completes, the finally block runs. If the try block succeeds (no exception), flow control skips over the catch block and moves to the finally block. If the try or catch block has a return statement, finally block will still run! Flow jumps to the finally, then back to the return. // You have to turn off the oven no matter what! try { turnOvenOn (); x . bake (); } catch ( BakingException ex ) { ex . printStackTrace (); } finally { turnOvenOff (); } Multiple exceptions A method can throw multiple exceptions if it needs to. But a method's declaration must declare all the checked exceptions it can throw. Stack the catch blocks under the try , one after the other. public class Laundry { public void doLaundry () throws PantsException , LingerieException { // code that could throw either exception } } public class Foo { public void go () { Laundry laundry = new Laundry (); try { laundry . doLaundry (); } catch ( PantsException pex ) { // recovery code } catch ( LingerieException lex ) { // recovery code } } } Multiple catch blocks must be ordered from smallest to biggest. The higher up the inheritance tree, the bigger the catch \"basket\". (e.g. ClothingExceptions will catch TeeShirtException and ShirtException) With catch blocks, the JVM simply starts at the first one and works its way down until it finds a catch that's broad enough to handle the exception. If your first catch block is `catch(Exception ex), the compiler knows there's no point in adding any others -- they'll never be reached. Polymorphic Exception Exceptions are objects. The benefit for it is that a method doesn't have to explicitly declare every possible exception it might throw; it can declare a superclass of the exceptions. You can DECLARE exceptions using a supertype of the exceptions you throw. public void doLaundry () throws ClothingException { } Same thing with catch blocks. You don't have to write a catch for each possible exception as long as the catch (or catches) you have can handle any exception throw. You can CATCH exceptions using a supertype of the exception thrown. try { laundry . doLaundry (); } catch ( ClothingException cex ) { // can catch any clothingException subclass. // recovery code } The mother of all catch arguments is type Exception ; it will catch any exception, including runtime (unchecked) exceptions, so you probably won't use it outside of testing. Duck exception If you don't want to handle an exception, you can duck it by declaring it. // You don t REALLY throw it, but since you don t have a try/catch // for the risky method you call, you are now the risky method. public void foo () throws ReallyBadException { // call risky method without a try/catch laundry . doLaundry (); } Ducking (by declaring) only delays the inevitable. Sooner or later, somebody has to deal with it. But what if main() ducks the exception? The exception is thrown back to JVM and the JVM shuts down. import java.io.FileReader ; import java.io.IOException ; public class test { public void go () throws IOException { try { String fileName = imdonotexist.file ; FileReader writer = new FileReader ( fileName ); } catch ( IOException ioexcept ) { ioexcept . printStackTrace (); } finally { System . out . println ( Finally.... ); } } public static void main ( String [] args ) throws IOException { test test1 = new test (); test1 . go (); System . out . println ( I m in main. ); } } 2 MIDI Music Player JavaSound is a collection of classes and interfaces added to Java starting with version 1.3. JavaSound is split into two parts: MIDI and Sampled. MIDI stands for Musical Instrument Digital Interface , and is a standard protocol for getting different kinds of electronic sound equipment to communicate. MIDI data doesn't actually include any sound , but it does include the instructions that a MIDI-reading instrument can play back. Making actual sound How it works in JavaSound: Sequencer : It takes all the MIDI data and sends it to the right instruments. It's the thing that plays the music. Think of it like a music CD player . Sequence : It is the Song, the musical piece that the Sequencer will play. Track : The part of the Sequence that holds the actual information. MIDI Event : It is a message that the Sequence can understand. And you need FOUR steps: Get a Sequencer and open it: Sequencer player = MidiSystem . getSequencer (); player . open (); Make a new Sequence : Sequence seq = new Sequence ( timing , 4 ); Get a new Track from the Sequence: Track t = seq . createTrack (); Fill the Track with MidiEvents and give the Sequence to the Sequencer: t . add ( myMidiEvent1 ); player . setSequence ( seq ); import javax.sound.midi.* ; public class MiniMiniMusicApp { // this is the first one public static void main ( String [] args ) { MiniMiniMusicApp mini = new MiniMiniMusicApp (); mini . play (); } public void play () { try { // make (and open) a sequencer, make a sequence and track Sequencer sequencer = MidiSystem . getSequencer (); sequencer . open (); Sequence seq = new Sequence ( Sequence . PPQ , 4 ); Track track = seq . createTrack (); // now make two midi events (containing a midi message) MidiEvent event = null ; // first make the message // then stick the message into a midi event // and add the event to the track ShortMessage a = new ShortMessage (); a . setMessage ( 144 , 1 , 44 , 100 ); MidiEvent noteOn = new MidiEvent ( a , 1 ); //means at tick one, the above event happens track . add ( noteOn ); ShortMessage b = new ShortMessage (); b . setMessage ( 128 , 1 , 44 , 100 ); MidiEvent noteOff = new MidiEvent ( b , 16 ); //means at tick one, the above event happens track . add ( noteOff ); // add the events to the track // add the sequence to the sequencer, set timing, and start sequencer . setSequence ( seq ); sequencer . start (); // new Thread . sleep ( 1000 ); sequencer . close (); System . exit ( 0 ); } catch ( Exception ex ) { ex . printStackTrace ();} } // close play } // close class MidiEvent A MidiEvent says what to do and when to do it. ShortMessage a = new ShortMessage (); a . setMessage ( 144 , 1 , 44 , 100 ); MidiEvent noteOn = new MidiEvent ( a , 1 ); track . add ( noteon ); Explanation for the code above: The instructions are in the message, but the MidiEvent adds the moment in time when the instruction should be triggered. This MidiEvent says to trigger message \"a\" at the first beat (beat 1).","title":"Chapter 11: Exception Handling"},{"location":"java/hfj/ch11/#chapter-11-exception-handling","text":"","title":"Chapter 11 Exception Handling"},{"location":"java/hfj/ch11/#1-exception","text":"Methods in Java use exceptions to tell the calling code, \"Something Bad Happened. I failed.\" If a method can fail at runtime, a method has to declare the exceptions it might throw. You may find a throws clause in the risky(exception-throwing) method'sdeclaration. It's the risky method that throws the exception to you . public static Sequencer getSequencer () throws MidiUnavailableException","title":"1 Exception"},{"location":"java/hfj/ch11/#trycatch","text":"If you wrap the risky code in something called a try/catch , the compiler will relax. A try/catch block tells the compiler that you know an exceptional thing could happen in the method you're calling, and that you're prepared to handle it. An exception is an object of type Exception . try { // do risky thing } catch ( Exception ex ) { // its just like declaring a method argument // try to recover // This code only runs if an Exception is throw }","title":"try/catch"},{"location":"java/hfj/ch11/#checked-and-unchecked-exceptions","text":"The compiler checks for everything except RuntimeExceptions . Exceptions that are NOT subclass of RuntimeException are checked for by the compiler. They're called \" checked exceptions \". The compiler cares about all subclasses of Exception, unless they are a special type, RuntimeException ( unchecked exceptions ). Any exception class that extends RuntimeException gets a free pass . RuntimeExceptions can be thrown anywhere, with or without throws declarations or try/catch blocks. Most RuntimeExceptions come from a problem in your code logic , rather than a condition that fails at runtime in ways that you cannot predict or prevent. e.g. You cannot guarantee the server is up. You cannot guarantee the file is there. But you can make sure your code doesn't index of the end of an array.","title":"Checked and unchecked exceptions"},{"location":"java/hfj/ch11/#flow-control-in-trycatch-blocks","text":"If the try succeeds , the code below the catch runs. If the try fails , it throws an exception and the rest of the try block doesn't run. And the catch block runs.","title":"Flow control in try/catch blocks"},{"location":"java/hfj/ch11/#finally-block","text":"A finally block is where you put code that must run regardless of an exception. If the try block fails (an exception), flow control immediately moves to the catch block. When the catch block completes, the finally block runs. If the try block succeeds (no exception), flow control skips over the catch block and moves to the finally block. If the try or catch block has a return statement, finally block will still run! Flow jumps to the finally, then back to the return. // You have to turn off the oven no matter what! try { turnOvenOn (); x . bake (); } catch ( BakingException ex ) { ex . printStackTrace (); } finally { turnOvenOff (); }","title":"Finally block"},{"location":"java/hfj/ch11/#multiple-exceptions","text":"A method can throw multiple exceptions if it needs to. But a method's declaration must declare all the checked exceptions it can throw. Stack the catch blocks under the try , one after the other. public class Laundry { public void doLaundry () throws PantsException , LingerieException { // code that could throw either exception } } public class Foo { public void go () { Laundry laundry = new Laundry (); try { laundry . doLaundry (); } catch ( PantsException pex ) { // recovery code } catch ( LingerieException lex ) { // recovery code } } } Multiple catch blocks must be ordered from smallest to biggest. The higher up the inheritance tree, the bigger the catch \"basket\". (e.g. ClothingExceptions will catch TeeShirtException and ShirtException) With catch blocks, the JVM simply starts at the first one and works its way down until it finds a catch that's broad enough to handle the exception. If your first catch block is `catch(Exception ex), the compiler knows there's no point in adding any others -- they'll never be reached.","title":"Multiple exceptions"},{"location":"java/hfj/ch11/#polymorphic-exception","text":"Exceptions are objects. The benefit for it is that a method doesn't have to explicitly declare every possible exception it might throw; it can declare a superclass of the exceptions. You can DECLARE exceptions using a supertype of the exceptions you throw. public void doLaundry () throws ClothingException { } Same thing with catch blocks. You don't have to write a catch for each possible exception as long as the catch (or catches) you have can handle any exception throw. You can CATCH exceptions using a supertype of the exception thrown. try { laundry . doLaundry (); } catch ( ClothingException cex ) { // can catch any clothingException subclass. // recovery code } The mother of all catch arguments is type Exception ; it will catch any exception, including runtime (unchecked) exceptions, so you probably won't use it outside of testing.","title":"Polymorphic Exception"},{"location":"java/hfj/ch11/#duck-exception","text":"If you don't want to handle an exception, you can duck it by declaring it. // You don t REALLY throw it, but since you don t have a try/catch // for the risky method you call, you are now the risky method. public void foo () throws ReallyBadException { // call risky method without a try/catch laundry . doLaundry (); } Ducking (by declaring) only delays the inevitable. Sooner or later, somebody has to deal with it. But what if main() ducks the exception? The exception is thrown back to JVM and the JVM shuts down. import java.io.FileReader ; import java.io.IOException ; public class test { public void go () throws IOException { try { String fileName = imdonotexist.file ; FileReader writer = new FileReader ( fileName ); } catch ( IOException ioexcept ) { ioexcept . printStackTrace (); } finally { System . out . println ( Finally.... ); } } public static void main ( String [] args ) throws IOException { test test1 = new test (); test1 . go (); System . out . println ( I m in main. ); } }","title":"Duck exception"},{"location":"java/hfj/ch11/#2-midi-music-player","text":"JavaSound is a collection of classes and interfaces added to Java starting with version 1.3. JavaSound is split into two parts: MIDI and Sampled. MIDI stands for Musical Instrument Digital Interface , and is a standard protocol for getting different kinds of electronic sound equipment to communicate. MIDI data doesn't actually include any sound , but it does include the instructions that a MIDI-reading instrument can play back.","title":"2 MIDI Music Player"},{"location":"java/hfj/ch11/#making-actual-sound","text":"How it works in JavaSound: Sequencer : It takes all the MIDI data and sends it to the right instruments. It's the thing that plays the music. Think of it like a music CD player . Sequence : It is the Song, the musical piece that the Sequencer will play. Track : The part of the Sequence that holds the actual information. MIDI Event : It is a message that the Sequence can understand. And you need FOUR steps: Get a Sequencer and open it: Sequencer player = MidiSystem . getSequencer (); player . open (); Make a new Sequence : Sequence seq = new Sequence ( timing , 4 ); Get a new Track from the Sequence: Track t = seq . createTrack (); Fill the Track with MidiEvents and give the Sequence to the Sequencer: t . add ( myMidiEvent1 ); player . setSequence ( seq ); import javax.sound.midi.* ; public class MiniMiniMusicApp { // this is the first one public static void main ( String [] args ) { MiniMiniMusicApp mini = new MiniMiniMusicApp (); mini . play (); } public void play () { try { // make (and open) a sequencer, make a sequence and track Sequencer sequencer = MidiSystem . getSequencer (); sequencer . open (); Sequence seq = new Sequence ( Sequence . PPQ , 4 ); Track track = seq . createTrack (); // now make two midi events (containing a midi message) MidiEvent event = null ; // first make the message // then stick the message into a midi event // and add the event to the track ShortMessage a = new ShortMessage (); a . setMessage ( 144 , 1 , 44 , 100 ); MidiEvent noteOn = new MidiEvent ( a , 1 ); //means at tick one, the above event happens track . add ( noteOn ); ShortMessage b = new ShortMessage (); b . setMessage ( 128 , 1 , 44 , 100 ); MidiEvent noteOff = new MidiEvent ( b , 16 ); //means at tick one, the above event happens track . add ( noteOff ); // add the events to the track // add the sequence to the sequencer, set timing, and start sequencer . setSequence ( seq ); sequencer . start (); // new Thread . sleep ( 1000 ); sequencer . close (); System . exit ( 0 ); } catch ( Exception ex ) { ex . printStackTrace ();} } // close play } // close class","title":"Making actual sound"},{"location":"java/hfj/ch11/#midievent","text":"A MidiEvent says what to do and when to do it. ShortMessage a = new ShortMessage (); a . setMessage ( 144 , 1 , 44 , 100 ); MidiEvent noteOn = new MidiEvent ( a , 1 ); track . add ( noteon ); Explanation for the code above: The instructions are in the message, but the MidiEvent adds the moment in time when the instruction should be triggered. This MidiEvent says to trigger message \"a\" at the first beat (beat 1).","title":"MidiEvent"},{"location":"java/hfj/ch12/","text":"Chapter 12 Getting GUI 1 Your First GUI A JFrame is the object that represents a window on the screen. It's where you put all the interface things like buttons, checkboxes, text fields, and so on. There are a ton of Swing components( JButton , JRadioButton , JCheckBox , JLabel , JList , JScrollPane , JSlider , JTextArea , JTextField , etc) you can add. A button on a frame: import javax.swing.* ; public class AButton { public static void main ( String [] args ){ // make a frame and a button JFrame frame = new JFrame (); JButton button = new JButton ( Click me ); // Makes the program quit as soon as you close the window // If you leave this out it will just sit there on the screen forever frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); // add the button to the frame s content pane frame . getContentPane (). add ( button ); // give the frame a size, in pixels frame . setSize ( 300 , 300 ); //finally, make it visible // if you forget this step, you won t see anything when you run this code. frame . setVisible ( true ); } } 2 Events, Sources, and Listeners In Java, the process of getting and handling a user event is called *event-handling . There are many different event types in Java, although most involve GUI user actions. e.g. If the user clicks a button, that's an event. Event Listeners If you care about the button\u2019s events, implement an interface that says, \"I\u2019m listening for your events.\" A listener interface is the bridge between the listener and event source . An event source (\u4e8b\u4ef6\u6e90, e.g. a button) is an object that can turn user actions (e.g. click a mouse) into events. An event is an object, and you can scan through java.awt.event package in the API, to find a bunch of event classes. An event source creates an event object when the user does something matters(like click the button). Every event type has a matching listener interface.(e.g. If your class wants to know about a button's ActionEvents, you implement the ActionListener.) Jobs of Listeners, Sources, and Events : As a listener, my job is to implement the interface, register with the button, and provide the event-handling. As an event source, my job is to accept registrations (from listeners), get events from the user. and call the listener\u2019s event-handling method (when the user clicks me). As an event object, I\u2019m the argument to the event call-back method (from the interface) and my job is to carry data about the event back to the listener. 3 Making a drawing panel If you want to put your own graphics on the screen, your best bet is to make your own paintable widget. Make a subclass of JPanel and override one method, paintComponent() . paintComponent() All of your graphics code goes inside the paintComponent() method. Anytime the JVM thinks the display need refreshing , your paintComponent() method will be called. And you never call this method yourself! . However, you can ask the system to refresh the display ( repaint() ), which ultimately leads to paintComponent() being called. The argument to paintComponent() is declared as type Graphics ( java.awt.Graphics ). public void paintComponent ( Graphics g ){} The object referenced by the 'g' parameter is actually an instance of the Graphics2D class. If you need to use a method from the Graphics2D class, you can't use the paintComponent parameter 'g' straight from the method. But you can cast it with a new Graphics2D variable. Graphics2D g2d = ( Graphics2D ) g ; Paint a randomly-colored circle on a black background: import javax.swing.* ; import java.awt.* ; import java.util.Random ; // Make a subclass of JPanel, // a widget that you can add to a frame just like anything else public class RandomColoredCircle extends JPanel { public void paintComponent ( Graphics g ){ Graphics2D g2d = ( Graphics2D ) g ; g2d . setColor ( Color . orange ); // fill the entire panel with black (the default color) g . fillRect ( 0 , 0 , this . getWidth (), this . getHeight ()); Random random = new Random (); Color startColor = new Color ( random . nextInt ( 256 ), random . nextInt ( 256 ), random . nextInt ( 256 )); Color endColor = new Color ( random . nextInt ( 256 ), random . nextInt ( 256 ), random . nextInt ( 256 )); GradientPaint gradient = new GradientPaint ( 70 , 70 , startColor , 150 , 150 , endColor ); g2d . setPaint ( gradient ); g . fillOval ( 70 , 70 , 100 , 100 ); } } public class plot { public static void main ( String [] args ){ RandomColoredCircle coloredCircle = new RandomColoredCircle (); JFrame frame = new JFrame (); frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); frame . getContentPane (). add ( coloredCircle ); frame . setSize ( 300 , 300 ); frame . setVisible ( true ); } } Output: ![example_of_gradient_circle](figures/example_of_gradient_circle.png) 4 Multiple Listeners What if we add a second button in the east region, which changes the text on a label in the west region? So We need to get TWO events. How do you get two events when you have only one actionPerformed() method? Option one - Implement two actionPerformed() methods: You can't. It won't compile. Option two - Register the same listener with both buttons. public void actionPerformed ( ActionEvent event ) { // Query the event object to find out which button actually fired it, and use that to decide what to do if ( event . getSource () == colorButton ) { frame . repaint (); } else { label . setText ( \u201c That hurt ! \u201d ); } } Flaw: this does work, but in most cases it's not very OO. . Usually, it hurts maintainability and extensibility. Option three - Create two separate ActionListener classes. class MyGui { JFrame frame ; JLabel label ; void gui () { // code to instantiate the two listeners and register one // with the color button and the other with the label button } } // close class class ColorButtonListener implements ActionListener { public void actionPerformed ( ActionEvent event ){ frame . repaint (); } } class LabelButtonListener implements ActionListener { public void actionPerformed ( ActionEvent event ) { label . setText ( \u201c That hurt ! \u201d ); } } Flaw: these classes won\u2019t have access to the variables they need to act on, \u2018frame\u2019 and \u2018label\u2019. Inner Class SOLUTION : Inner class to the rescue! All inner class can use all the methods and variables of the outer class, even the private ones . An inner class instance must be tied to an outer class instance. import javax.swing.* ; import java.awt.* ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; public class PLOT { JFrame frame ; JLabel label ; RandomColoredCircle coloredCircle ; public void go (){ // instead of passing (this) to the button s listener registration method, // pass a new instance of the appropriate listener class. JButton colorButton = new JButton ( Change Color ); colorButton . addActionListener ( new ColorButtonListener ()); JButton labelButton = new JButton ( Change Label ); labelButton . addActionListener ( new LabelButtonListener ()); label = new JLabel ( Label ); coloredCircle = new RandomColoredCircle (); frame = new JFrame (); frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); frame . getContentPane (). add ( BorderLayout . CENTER , coloredCircle ); frame . getContentPane (). add ( BorderLayout . SOUTH , colorButton ); frame . getContentPane (). add ( BorderLayout . EAST , labelButton ); frame . getContentPane (). add ( BorderLayout . WEST , label ); frame . setSize ( 400 , 300 ); frame . setVisible ( true ); } public static void main ( String [] args ) { PLOT plt = new PLOT (); plt . go (); } // a button that changes a label class LabelButtonListener implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { label . setText ( Ouch! ); } } // a button that changes the color of an oval class ColorButtonListener implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { frame . repaint (); } } } output:","title":"Chapter 12: Getting GUI"},{"location":"java/hfj/ch12/#chapter-12-getting-gui","text":"","title":"Chapter 12 Getting GUI"},{"location":"java/hfj/ch12/#1-your-first-gui","text":"A JFrame is the object that represents a window on the screen. It's where you put all the interface things like buttons, checkboxes, text fields, and so on. There are a ton of Swing components( JButton , JRadioButton , JCheckBox , JLabel , JList , JScrollPane , JSlider , JTextArea , JTextField , etc) you can add. A button on a frame: import javax.swing.* ; public class AButton { public static void main ( String [] args ){ // make a frame and a button JFrame frame = new JFrame (); JButton button = new JButton ( Click me ); // Makes the program quit as soon as you close the window // If you leave this out it will just sit there on the screen forever frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); // add the button to the frame s content pane frame . getContentPane (). add ( button ); // give the frame a size, in pixels frame . setSize ( 300 , 300 ); //finally, make it visible // if you forget this step, you won t see anything when you run this code. frame . setVisible ( true ); } }","title":"1 Your First GUI"},{"location":"java/hfj/ch12/#2-events-sources-and-listeners","text":"In Java, the process of getting and handling a user event is called *event-handling . There are many different event types in Java, although most involve GUI user actions. e.g. If the user clicks a button, that's an event.","title":"2 Events, Sources, and Listeners"},{"location":"java/hfj/ch12/#event-listeners","text":"If you care about the button\u2019s events, implement an interface that says, \"I\u2019m listening for your events.\" A listener interface is the bridge between the listener and event source . An event source (\u4e8b\u4ef6\u6e90, e.g. a button) is an object that can turn user actions (e.g. click a mouse) into events. An event is an object, and you can scan through java.awt.event package in the API, to find a bunch of event classes. An event source creates an event object when the user does something matters(like click the button). Every event type has a matching listener interface.(e.g. If your class wants to know about a button's ActionEvents, you implement the ActionListener.) Jobs of Listeners, Sources, and Events : As a listener, my job is to implement the interface, register with the button, and provide the event-handling. As an event source, my job is to accept registrations (from listeners), get events from the user. and call the listener\u2019s event-handling method (when the user clicks me). As an event object, I\u2019m the argument to the event call-back method (from the interface) and my job is to carry data about the event back to the listener.","title":"Event Listeners"},{"location":"java/hfj/ch12/#3-making-a-drawing-panel","text":"If you want to put your own graphics on the screen, your best bet is to make your own paintable widget. Make a subclass of JPanel and override one method, paintComponent() .","title":"3 Making a drawing panel"},{"location":"java/hfj/ch12/#paintcomponent","text":"All of your graphics code goes inside the paintComponent() method. Anytime the JVM thinks the display need refreshing , your paintComponent() method will be called. And you never call this method yourself! . However, you can ask the system to refresh the display ( repaint() ), which ultimately leads to paintComponent() being called. The argument to paintComponent() is declared as type Graphics ( java.awt.Graphics ). public void paintComponent ( Graphics g ){} The object referenced by the 'g' parameter is actually an instance of the Graphics2D class. If you need to use a method from the Graphics2D class, you can't use the paintComponent parameter 'g' straight from the method. But you can cast it with a new Graphics2D variable. Graphics2D g2d = ( Graphics2D ) g ; Paint a randomly-colored circle on a black background: import javax.swing.* ; import java.awt.* ; import java.util.Random ; // Make a subclass of JPanel, // a widget that you can add to a frame just like anything else public class RandomColoredCircle extends JPanel { public void paintComponent ( Graphics g ){ Graphics2D g2d = ( Graphics2D ) g ; g2d . setColor ( Color . orange ); // fill the entire panel with black (the default color) g . fillRect ( 0 , 0 , this . getWidth (), this . getHeight ()); Random random = new Random (); Color startColor = new Color ( random . nextInt ( 256 ), random . nextInt ( 256 ), random . nextInt ( 256 )); Color endColor = new Color ( random . nextInt ( 256 ), random . nextInt ( 256 ), random . nextInt ( 256 )); GradientPaint gradient = new GradientPaint ( 70 , 70 , startColor , 150 , 150 , endColor ); g2d . setPaint ( gradient ); g . fillOval ( 70 , 70 , 100 , 100 ); } } public class plot { public static void main ( String [] args ){ RandomColoredCircle coloredCircle = new RandomColoredCircle (); JFrame frame = new JFrame (); frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); frame . getContentPane (). add ( coloredCircle ); frame . setSize ( 300 , 300 ); frame . setVisible ( true ); } } Output: ![example_of_gradient_circle](figures/example_of_gradient_circle.png)","title":"paintComponent()"},{"location":"java/hfj/ch12/#4-multiple-listeners","text":"What if we add a second button in the east region, which changes the text on a label in the west region? So We need to get TWO events. How do you get two events when you have only one actionPerformed() method? Option one - Implement two actionPerformed() methods: You can't. It won't compile. Option two - Register the same listener with both buttons. public void actionPerformed ( ActionEvent event ) { // Query the event object to find out which button actually fired it, and use that to decide what to do if ( event . getSource () == colorButton ) { frame . repaint (); } else { label . setText ( \u201c That hurt ! \u201d ); } } Flaw: this does work, but in most cases it's not very OO. . Usually, it hurts maintainability and extensibility. Option three - Create two separate ActionListener classes. class MyGui { JFrame frame ; JLabel label ; void gui () { // code to instantiate the two listeners and register one // with the color button and the other with the label button } } // close class class ColorButtonListener implements ActionListener { public void actionPerformed ( ActionEvent event ){ frame . repaint (); } } class LabelButtonListener implements ActionListener { public void actionPerformed ( ActionEvent event ) { label . setText ( \u201c That hurt ! \u201d ); } } Flaw: these classes won\u2019t have access to the variables they need to act on, \u2018frame\u2019 and \u2018label\u2019.","title":"4 Multiple Listeners"},{"location":"java/hfj/ch12/#inner-class","text":"SOLUTION : Inner class to the rescue! All inner class can use all the methods and variables of the outer class, even the private ones . An inner class instance must be tied to an outer class instance. import javax.swing.* ; import java.awt.* ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; public class PLOT { JFrame frame ; JLabel label ; RandomColoredCircle coloredCircle ; public void go (){ // instead of passing (this) to the button s listener registration method, // pass a new instance of the appropriate listener class. JButton colorButton = new JButton ( Change Color ); colorButton . addActionListener ( new ColorButtonListener ()); JButton labelButton = new JButton ( Change Label ); labelButton . addActionListener ( new LabelButtonListener ()); label = new JLabel ( Label ); coloredCircle = new RandomColoredCircle (); frame = new JFrame (); frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); frame . getContentPane (). add ( BorderLayout . CENTER , coloredCircle ); frame . getContentPane (). add ( BorderLayout . SOUTH , colorButton ); frame . getContentPane (). add ( BorderLayout . EAST , labelButton ); frame . getContentPane (). add ( BorderLayout . WEST , label ); frame . setSize ( 400 , 300 ); frame . setVisible ( true ); } public static void main ( String [] args ) { PLOT plt = new PLOT (); plt . go (); } // a button that changes a label class LabelButtonListener implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { label . setText ( Ouch! ); } } // a button that changes the color of an oval class ColorButtonListener implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { frame . repaint (); } } } output:","title":"Inner Class"},{"location":"java/hfj/ch13/","text":"Chapter 13 Using Swing 1 Swing components Component is the more correct term for what we've been calling a widiget . Text fields, buttons, scrollable lists, etc. are all components. They all extend javax.swing.JComponent . 2 Layout Managers A layout manager is a Java object associated with a particular component, almost always a background component. Different layout managers have different policies for arranging components. The Big Three layout managers: border , flow , and box . Border layout A BorderLayout manager divides a background component into five regions. You can add only one component per region to a background controlled by a BorderLayout manager. Components laid out by this manager usually don\u2019t get to have their preferred size. BorderLayout is the default layout manager for a frame! BorderLayout cares about five regions: east, west, north, south, and center frame . getContentPane (). add ( BorderLayout . EAST , button ); Flow layout A FlowLayout manager acts kind of like a word processor, except with components instead of words. Each component is the size it wants to be, and they\u2019re laid out left to right in the order that they\u2019re added, with \u201cword-wrap\u201d turned on. So when a component won\u2019t \ufb01t horizontally, it drops to the next \u201cline\u201d in the layout. FlowLayout is the default layout manager for a panel! FlowLayout cares about the \ufb02ow of the components: left to right, top to bottom, in the order they were added. A JPanel \u2019s layout manager is FlowLayout, by default. Anything inside the panel (in other words, components added to the panel by calling panel.add(aComponent) ) are under the panel\u2019s FlowLayout manager\u2019s control. public void go () { JFrame frame = new JFrame (); JPanel panel = new JPanel (); panel . setBackground ( Color . darkGray ); JButton button = new JButton ( \u201c shock me \u201d ); JButton buttonTwo = new JButton ( \u201c bliss \u201d ); panel . add ( button ); panel . add ( buttonTwo ); frame . getContentPane (). add ( BorderLayout . EAST , panel ); frame . setSize ( 250 , 200 ); frame . setVisible ( true ); } Box layout Unlike FlowLayout , BoxLayout can force a \u2018new line\u2019 to make the components wrap to the next line( BoxLayout.Y_AXIS ), even if there\u2019s room for them to \ufb01t horizontally. public void go () { JFrame frame = new JFrame (); JPanel panel = new JPanel (); panel . setBackground ( Color . darkGray ); //Change the layout manager to be a new instance of BoxLayout panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS )); JButton button = new JButton ( \u201c shock me \u201d ); JButton buttonTwo = new JButton ( \u201c bliss \u201d ); panel . add ( button ); panel . add ( buttonTwo ); frame . getContentPane (). add ( BorderLayout . EAST , panel ); frame . setSize ( 250 , 200 ); frame . setVisible ( true ); } 3 Playing with Swing Components The Java Tutorials by Oracle, describes every Swing component with excellent demos, see here . JTextField Constructors JTextField \ufb01eld = new JTextField ( 20 ); JTextField \ufb01eld = new JTextField ( \u201c Your name \u201d ); How to use it? Get text out of it System . out . println ( \ufb01eld . getText ()); Put text in it field . setText ( whatever ); ::: Java field . setText ( ); Get an ActionEvent when the user presses return or enter field.addActionListener(myActionListener); Select/Highlight the text in the \ufb01eld field . selectAll (); Put the cursor back in the \ufb01eld (so the user can just start typing) field . requestFocus (); JTextArea Unlike JTextField , JTextArea can have more than one line of text. To make a JTextArea scroll, you have to stick it in a ScrollPane . Constructor JTextArea textArea = new JTextArea ( 10 , 20 ); Make it have a vertical scrollbar only JScrollPane scroller = new JScrollPane (); scroll . add ( text ) textArea . setColumns ( 20 ); textArea . setLineWrap ( true ); textArea . setRows ( 5 ); textArea . setWrapStyleWord ( true ); textArea . setEditable ( false ); panel . add ( scroller ); Replace the text that\u2019s in it text.setText(\u201cNot all who are lost are wandering\u201d); Append to the text that\u2019s in it text.append(\u201cbutton clicked\u201d); Select/Highlight the text in the \ufb01eld text.selectAll(); Put the cursor back in the \ufb01eld (so the user can just start typing) text.requestFocus();","title":"Chapter 13: Using Swing"},{"location":"java/hfj/ch13/#chapter-13-using-swing","text":"","title":"Chapter 13 Using Swing"},{"location":"java/hfj/ch13/#1-swing-components","text":"Component is the more correct term for what we've been calling a widiget . Text fields, buttons, scrollable lists, etc. are all components. They all extend javax.swing.JComponent .","title":"1 Swing components"},{"location":"java/hfj/ch13/#2-layout-managers","text":"A layout manager is a Java object associated with a particular component, almost always a background component. Different layout managers have different policies for arranging components. The Big Three layout managers: border , flow , and box .","title":"2 Layout Managers"},{"location":"java/hfj/ch13/#border-layout","text":"A BorderLayout manager divides a background component into five regions. You can add only one component per region to a background controlled by a BorderLayout manager. Components laid out by this manager usually don\u2019t get to have their preferred size. BorderLayout is the default layout manager for a frame! BorderLayout cares about five regions: east, west, north, south, and center frame . getContentPane (). add ( BorderLayout . EAST , button );","title":"Border layout"},{"location":"java/hfj/ch13/#flow-layout","text":"A FlowLayout manager acts kind of like a word processor, except with components instead of words. Each component is the size it wants to be, and they\u2019re laid out left to right in the order that they\u2019re added, with \u201cword-wrap\u201d turned on. So when a component won\u2019t \ufb01t horizontally, it drops to the next \u201cline\u201d in the layout. FlowLayout is the default layout manager for a panel! FlowLayout cares about the \ufb02ow of the components: left to right, top to bottom, in the order they were added. A JPanel \u2019s layout manager is FlowLayout, by default. Anything inside the panel (in other words, components added to the panel by calling panel.add(aComponent) ) are under the panel\u2019s FlowLayout manager\u2019s control. public void go () { JFrame frame = new JFrame (); JPanel panel = new JPanel (); panel . setBackground ( Color . darkGray ); JButton button = new JButton ( \u201c shock me \u201d ); JButton buttonTwo = new JButton ( \u201c bliss \u201d ); panel . add ( button ); panel . add ( buttonTwo ); frame . getContentPane (). add ( BorderLayout . EAST , panel ); frame . setSize ( 250 , 200 ); frame . setVisible ( true ); }","title":"Flow layout"},{"location":"java/hfj/ch13/#box-layout","text":"Unlike FlowLayout , BoxLayout can force a \u2018new line\u2019 to make the components wrap to the next line( BoxLayout.Y_AXIS ), even if there\u2019s room for them to \ufb01t horizontally. public void go () { JFrame frame = new JFrame (); JPanel panel = new JPanel (); panel . setBackground ( Color . darkGray ); //Change the layout manager to be a new instance of BoxLayout panel . setLayout ( new BoxLayout ( panel , BoxLayout . Y_AXIS )); JButton button = new JButton ( \u201c shock me \u201d ); JButton buttonTwo = new JButton ( \u201c bliss \u201d ); panel . add ( button ); panel . add ( buttonTwo ); frame . getContentPane (). add ( BorderLayout . EAST , panel ); frame . setSize ( 250 , 200 ); frame . setVisible ( true ); }","title":"Box layout"},{"location":"java/hfj/ch13/#3-playing-with-swing-components","text":"The Java Tutorials by Oracle, describes every Swing component with excellent demos, see here .","title":"3 Playing with Swing Components"},{"location":"java/hfj/ch13/#jtextfield","text":"Constructors JTextField \ufb01eld = new JTextField ( 20 ); JTextField \ufb01eld = new JTextField ( \u201c Your name \u201d ); How to use it? Get text out of it System . out . println ( \ufb01eld . getText ()); Put text in it field . setText ( whatever ); ::: Java field . setText ( ); Get an ActionEvent when the user presses return or enter field.addActionListener(myActionListener); Select/Highlight the text in the \ufb01eld field . selectAll (); Put the cursor back in the \ufb01eld (so the user can just start typing) field . requestFocus ();","title":"JTextField"},{"location":"java/hfj/ch13/#jtextarea","text":"Unlike JTextField , JTextArea can have more than one line of text. To make a JTextArea scroll, you have to stick it in a ScrollPane . Constructor JTextArea textArea = new JTextArea ( 10 , 20 ); Make it have a vertical scrollbar only JScrollPane scroller = new JScrollPane (); scroll . add ( text ) textArea . setColumns ( 20 ); textArea . setLineWrap ( true ); textArea . setRows ( 5 ); textArea . setWrapStyleWord ( true ); textArea . setEditable ( false ); panel . add ( scroller ); Replace the text that\u2019s in it text.setText(\u201cNot all who are lost are wandering\u201d); Append to the text that\u2019s in it text.append(\u201cbutton clicked\u201d); Select/Highlight the text in the \ufb01eld text.selectAll(); Put the cursor back in the \ufb01eld (so the user can just start typing) text.requestFocus();","title":"JTextArea"},{"location":"java/hfj/ch14/","text":"Chapter 14 Serialization and File I/O Saving Objects If your data will be used by only the Java program that generated it: Using serialization (\u5e8f\u5217\u5316): Serialization is an (automatic) way to save and load the state of an object from a stream. The serialized object could then be stored in a file, database or sent over the network. The serialized file is much harder for humans to read , but it's much easier (and safer) to restore objects from serialization. If your data will be used by other programs: Write a plain text file (\u7eaf\u6587\u672c\u6587\u4ef6): Write a file, with delimiters that other programs can parse. Writing a serialized object to a file Make a FileOutputStream FileOutputStream fileStream = new FileOutputStream ( MyGame.ser ); Make an ObjectOutputStream ObjectOutputStream os = new ObjectOutputStream ( fileStream ); Write the object os . writeObject ( characterOne ); Serializes the object referenced by character-One, and writes them to the file \"myGame.ser\". Close the ObjectOutputStream os . close (); Closing the stream at the top closes the ones underneath, so the FileOutputStream (and the file) will close automatically. Streams The Java I/O API has connection streams , that represent connections to destinations and sources such as files or network sockets, and chain streams that work only if chained to other streams. connection streams represent the connection ( FileOutputStream ) chain streams call methods on connection. ( ObjectOutputStream ) FileOutputStream writes bytes to a file. ObjectOutputStream turns objects into data that can be written to a stream. A FileOutputStream is an output stream for writing data to a File or to a FileDescriptor . Note FileOutputStream is meant for writing streams of raw bytes. For writing streams of characters, consider using FileWriter . Saving Serialized Objects Serialization saves the entire object graph . When an object is serialized, all the objects it refers to from instance variables are also serialized. Implement Serializable If you want your class to be serializable, implement Serializable . The Serializable interface is known as a marker or tag interface, because the interface doesn't have any methods to implement. Its sole purpose is to announce that the class implementing it, is serializable . If any superclass of a class is serializable, the subclass is automatically serializable even if the subclass doesn't explicitly declare implements Serializable . A marker interface is an interface that contains NO method declarations, but merely designates (or \"marks\") a class that implements the interface as having some property. [Effective Java, 2nd] The source file of Serializable.java : public interface Serializable { } Serialization is all or nothing : Either the entire object graph is serialized correctly or serialization fails. import java.io.* ; public class Box implements Serializable { // No methods to implement, but when you say implements Serializable , // it says to the JVM, it s OK to serialize objects of this type. private int width ; private int hight ; public void setWidth ( int w ) { width = w ; } public void setHight ( int h ) { hight = h ; } public static void main ( String [] args ) { Box box = new Box (); box . setHight ( 5 ); box . setWidth ( 6 ); try { FileOutputStream outputStream = new FileOutputStream ( foo.ser ); ObjectOutputStream os = new ObjectOutputStream ( outputStream ); os . writeObject ( box ); os . close (); } catch ( IOException ex ) { ex . printStackTrace (); } } // end main } // end class Box transient transient is a variables modifier used in serialization: Mark an instance variable as transient if it can't (or shouldn't) be saved. import java.net.* ; class Chat implements Serializable { // transient says, // don t save this variable during serialization, just skip it . transient String currentID ; String userName ; //more code } Variables may be marked transient to indicate that they are not part of the persistent state of an object. [Java Language Specification, Java SE 7 Edition, Section 8.3.1.3. transient Fields] Note If you serialize an object, a transient reference instance variable will be brought back as null , regardless of the value it had at the time it was saved. Question What happens if two objects in the object graph are the same object? In that case, only one of the objects is saved, and during deserialization, any references to that single object are restored. Deserialization Deserialization (\u53cd\u5e8f\u5217\u5316) is a lot like serialization (\u5e8f\u5217\u5316) in reverse. Make a FileInputStream FileInputStream fileStream = new FileInputStream ( MyGame.ser ); Make an ObjectInputStream ObjectInputStream os = new ObjectInputStream ( fileStream ); Read the object Object one = os . readObject (); Each time you say readObject() , you get the next object in the stream. So you'll read them back in the same order in which they were written. Cast the objects GameCharacter elf = ( GameCharacter ) one ; The return value of readObject() is type Object , so you have to cast it back to the type you know it really is. Close the ObjectInputStream os . close (); Closing the stream at the top closes the ones underneath, so the FileInputStream and the file will close automatically. What happens during deserialization? The object is read from the stream. The JVM determines (through info stored with the serialized object) the object\u2019s class type . The JVM attempts to find and load the object\u2019s class. If the JVM can\u2019t find and/or load the class, the JVM throws an exception and the deserialization fails. A new object is given space on the heap, but the serialized object\u2019s constructor does NOT run ! Obviously, if the constructor ran, it would restore the state of the object back to its original 'new' state, and that\u2019s not what we want. We want the object to be restored to the state it had when it was serialized, not when it was first created. If the object has a non-serializable class somewhere up its inheritance tree, the constructor for that non-serializable class will run along with any constructors above that (even if they\u2019re serializable). Once the constructor chaining begins, you can\u2019t stop it, which means all superclasses, beginning with the first non-serializable one, will reinitialize their state. The object\u2019s instance variables are given the values from the serialized state. Transient variables are given a value of null for object references and defaults (0, false, etc.) for primitives. Note Static variables are NOT serialized. Static means \"one per class\" not \"one per object\". When an object is deserialized, static variables will have whatever static variable its class currently has. serialVersionUID Question : What might happen if you change the class and want to deserialize the object? Result : It may throw an InvalidClassException . Changes to a class that can hurt deserialization: Deleting an instance variable Change the declared type of an instance variable Changing a non-transient instance variable to transient Moving a class up or down the inheritance hierarchy Changing a class from Serializable to not Serializable. Changing an instance variable to static. Each time an object is serialized, the object (including every object in its graph) is 'stamped' with a version ID number for the object's class. The ID is called serialVersionUID . The serialization runtime associates with each serializable class a version number, called a serialVersionUID , which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an InvalidClassException. [Java Docs] SOLUTION TO THE QUESTION : If you think there is ANY possibility that your class might evolve, put a serialVersionUID in your class. As the class evolves, the serialVersionUID will remain the same and the JVM thinks the class is compatible with this serialized object. If a serializable class does not explicitly declare a serialVersionUID , then the serialization runtime will calculate a default serialVersionUID value for that class based on various aspects of the class. However, it is strongly recommended that all serializable classes explicitly declare serialVersionUID values , since the default serialVersionUID computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected InvalidClassExceptions during deserialization. [Java Docs] HOW ? A serializable class can declare its own serialVersionUID explicitly by declaring a field named \"serialVersionUID\" that must be static , final , and of type long : ANY - ACCESS - MODIFIER static final long serialVersionUID = 42L ; Writing Files File Class The java.io.File class represents a file on disk, but doesn't actually represent the contents of the file. Think of a File object as something more like a pathname of a file (or even a directory ) rather than the Actual File Itself. File is an abstract representation of file and directory pathnames. [Java docs] Some things you can do with a File object: Make a file Object representing an existing file File f = new File ( Mycode.txt ); // not actually create a file Create a new, empty file File . createNewFile \u200b ( MyFile.txt ) Make a new directory File dir = new File ( Chapter7 ); dir . mkdir (); List the contents of a directory Javaif (dir.isDirectory()) {String[] dirContents = dir.list();for (int i=0; i dirContents.length; i++) {System.out.println(dirContents[i]);}} Get the absolute path of a file or directory System . out . println ( dir . getAbsolutePath ()); Delete a file or directory (returns true if successful) boolean isDeleted = f . delete (); Writing to a plain text file To write a string: FileWriter . write ( My first String to save ) import java.io.* ; class WriteAFile { public static void main ( String [] args ) { try { // If the file foo.txt does not exist, FileWriter will create it. FileWriter writer = new FileWriter ( \u201c Foo . txt \u201d ); // The write() method takes a String writer . write ( \u201c hello foo ! \u201d ); // Close it when you re done! writer . close (); } catch ( IOException ex ) { ex . printStackTrace (); } } } Buffer Buffers are much more efficient than working without them. BufferedWriter writer = new BufferedWriter ( new FileWriter ( aFile )); FileWriter writes each and every thing you pass to the file each and every time. BufferedWriter will hold all the stuff you write to it until it's full. Only then the buffer is full will the FileWriter actually be told to write to the file on disk . If you do want to send data before the buffer is full, Just Flush It ( writer.flush() ). Reading Files Usually, we use a File Object to represent a file, a FileReader to do the actual reading, and a BufferedReader to make the reading more efficient. import java.io.BufferedReader ; import java.io.File ; import java.io.FileReader ; public class ReadAFile { public static void main ( String [] args ){ try { File myFile = new File ( Foo.text ); // A FileReader is a connection stream for characters, that connects to a text file. FileReader fileReader = new FileReader ( myFile ); //Chain the FileReader to a BufferedReader for more efficient reading. BufferedReader reader = new BufferedReader ( fileReader ); // Make a String variable to hold each line as the line is read. String line = null ; while (( line = reader . readLine ())!= null ) { System . out . println ( line ); } reader . close (); } catch ( Exception ex ) { ex . printStackTrace (); } } } Java NIO When studying both the Java NIO and IO API's, a question quickly pops into mind: When should I use IO and when should I use NIO? IO NIO Stream oriented Buffer oriented Blocking IO Non blocking IO Selectors Main Differences of NIO and IO [ Java NIO vs. IO \uff0c \u7ffb\u8bd1 ] Stream Oriented vs. Buffer Oriented The first big difference between Java NIO and IO is that IO is stream oriented(\u9762\u5411\u6d41), where NIO is buffer oriented(\u9762\u5411\u7f13\u51b2). Java IO being stream oriented means that you read one or more bytes at a time, from a stream. What you do with the read bytes is up to you. They are not cached anywhere. Furthermore, you cannot move forth and back in the data in a stream. If you need to move back and forth in the data read from a stream, you will need to cache it in a buffer first. Java NIO's buffer oriented approach is slightly different. Data is read into a buffer from which it is later processed. You can move forth and back in the buffer as you need to. This gives you a bit more flexibility during processing. However, you also need to check if the buffer contains all the data you need in order to fully process it. And, you need to make sure that when reading more data into the buffer, you do not overwrite data in the buffer you have not yet processed. Blocking vs. Non-blocking IO Java IO's various streams are blocking. That means, that when a thread invokes a read() or write(), that thread is blocked until there is some data to read, or the data is fully written. The thread can do nothing else in the meantime. Java IO: Reading data from a blocking stream. Java NIO's non-blocking mode enables a thread to request reading data from a channel, and only get what is currently available, or nothing at all, if no data is currently available. Rather than remain blocked until data becomes available for reading, the thread can go on with something else. The same is true for non-blocking writing. A thread can request that some data be written to a channel, but not wait for it to be fully written. The thread can then go on and do something else in the mean time. What threads spend their idle time on when not blocked in IO calls, is usually performing IO on other channels in the meantime. That is, a single thread can now manage multiple channels of input and output. If you need to manage thousands of open connections simultaneously, which each only send a little data, for instance a chat server, implementing the server in NIO is probably an advantage. Similarly, if you need to keep a lot of open connections to other computers, e.g. in a P2P network, using a single thread to manage all of your outbound connections might be an advantage. This one thread, multiple connections design is illustrated in this diagram: If you have fewer connections with very high bandwidth, sending a lot of data at a time, perhaps a classic IO server implementation might be the best fit. This diagram illustrates a classic IO server design: Selectors Java NIO's selectors(\u9009\u62e9\u5668) allow a single thread to monitor multiple channels of input. You can register multiple channels with a selector, then use a single thread to \"select\" the channels that have input available for processing, or select the channels that are ready for writing. This selector mechanism makes it easy for a single thread to manage multiple channels. NIO Channel Java NIO Channels are similar to streams with a few differences: You can both read and write to a Channels. Streams are typically one-way (read or write). Channels can be read and written asynchronously. Channels always read from, or write to, a Buffer. Here are the most important Channel implementations in Java NIO: FileChannel reads data from and write to files. DatagramChannel can read and write data over the network via UDP. SocketChannel can read and write data over the network via TCP. ServerSocketChannel allows you to listen for incoming TCP connections, like a web server does. For each incoming connection a SocketChannel is created. RandomAccessFile aFile = new RandomAccessFile ( data/nio-data.txt , rw ); FileChannel inChannel = aFile . getChannel (); ByteBuffer buf = ByteBuffer . allocate ( 48 ); int bytesRead = inChannel . read ( buf ); while ( bytesRead != - 1 ) { System . out . println ( Read + bytesRead ); buf . flip (); while ( buf . hasRemaining ()){ System . out . print (( char ) buf . get ()); } buf . clear (); bytesRead = inChannel . read ( buf ); } aFile . close ();","title":"Chapter 14: Serialization and File I/O"},{"location":"java/hfj/ch14/#chapter-14-serialization-and-file-io","text":"","title":"Chapter 14 Serialization and File I/O"},{"location":"java/hfj/ch14/#saving-objects","text":"If your data will be used by only the Java program that generated it: Using serialization (\u5e8f\u5217\u5316): Serialization is an (automatic) way to save and load the state of an object from a stream. The serialized object could then be stored in a file, database or sent over the network. The serialized file is much harder for humans to read , but it's much easier (and safer) to restore objects from serialization. If your data will be used by other programs: Write a plain text file (\u7eaf\u6587\u672c\u6587\u4ef6): Write a file, with delimiters that other programs can parse.","title":"Saving Objects"},{"location":"java/hfj/ch14/#writing-a-serialized-object-to-a-file","text":"Make a FileOutputStream FileOutputStream fileStream = new FileOutputStream ( MyGame.ser ); Make an ObjectOutputStream ObjectOutputStream os = new ObjectOutputStream ( fileStream ); Write the object os . writeObject ( characterOne ); Serializes the object referenced by character-One, and writes them to the file \"myGame.ser\". Close the ObjectOutputStream os . close (); Closing the stream at the top closes the ones underneath, so the FileOutputStream (and the file) will close automatically.","title":"Writing a serialized object to a file"},{"location":"java/hfj/ch14/#streams","text":"The Java I/O API has connection streams , that represent connections to destinations and sources such as files or network sockets, and chain streams that work only if chained to other streams. connection streams represent the connection ( FileOutputStream ) chain streams call methods on connection. ( ObjectOutputStream ) FileOutputStream writes bytes to a file. ObjectOutputStream turns objects into data that can be written to a stream. A FileOutputStream is an output stream for writing data to a File or to a FileDescriptor . Note FileOutputStream is meant for writing streams of raw bytes. For writing streams of characters, consider using FileWriter .","title":"Streams"},{"location":"java/hfj/ch14/#saving-serialized-objects","text":"Serialization saves the entire object graph . When an object is serialized, all the objects it refers to from instance variables are also serialized.","title":"Saving Serialized Objects"},{"location":"java/hfj/ch14/#implement-serializable","text":"If you want your class to be serializable, implement Serializable . The Serializable interface is known as a marker or tag interface, because the interface doesn't have any methods to implement. Its sole purpose is to announce that the class implementing it, is serializable . If any superclass of a class is serializable, the subclass is automatically serializable even if the subclass doesn't explicitly declare implements Serializable . A marker interface is an interface that contains NO method declarations, but merely designates (or \"marks\") a class that implements the interface as having some property. [Effective Java, 2nd] The source file of Serializable.java : public interface Serializable { } Serialization is all or nothing : Either the entire object graph is serialized correctly or serialization fails. import java.io.* ; public class Box implements Serializable { // No methods to implement, but when you say implements Serializable , // it says to the JVM, it s OK to serialize objects of this type. private int width ; private int hight ; public void setWidth ( int w ) { width = w ; } public void setHight ( int h ) { hight = h ; } public static void main ( String [] args ) { Box box = new Box (); box . setHight ( 5 ); box . setWidth ( 6 ); try { FileOutputStream outputStream = new FileOutputStream ( foo.ser ); ObjectOutputStream os = new ObjectOutputStream ( outputStream ); os . writeObject ( box ); os . close (); } catch ( IOException ex ) { ex . printStackTrace (); } } // end main } // end class Box","title":"Implement Serializable"},{"location":"java/hfj/ch14/#transient","text":"transient is a variables modifier used in serialization: Mark an instance variable as transient if it can't (or shouldn't) be saved. import java.net.* ; class Chat implements Serializable { // transient says, // don t save this variable during serialization, just skip it . transient String currentID ; String userName ; //more code } Variables may be marked transient to indicate that they are not part of the persistent state of an object. [Java Language Specification, Java SE 7 Edition, Section 8.3.1.3. transient Fields] Note If you serialize an object, a transient reference instance variable will be brought back as null , regardless of the value it had at the time it was saved. Question What happens if two objects in the object graph are the same object? In that case, only one of the objects is saved, and during deserialization, any references to that single object are restored.","title":"transient"},{"location":"java/hfj/ch14/#deserialization","text":"Deserialization (\u53cd\u5e8f\u5217\u5316) is a lot like serialization (\u5e8f\u5217\u5316) in reverse. Make a FileInputStream FileInputStream fileStream = new FileInputStream ( MyGame.ser ); Make an ObjectInputStream ObjectInputStream os = new ObjectInputStream ( fileStream ); Read the object Object one = os . readObject (); Each time you say readObject() , you get the next object in the stream. So you'll read them back in the same order in which they were written. Cast the objects GameCharacter elf = ( GameCharacter ) one ; The return value of readObject() is type Object , so you have to cast it back to the type you know it really is. Close the ObjectInputStream os . close (); Closing the stream at the top closes the ones underneath, so the FileInputStream and the file will close automatically. What happens during deserialization? The object is read from the stream. The JVM determines (through info stored with the serialized object) the object\u2019s class type . The JVM attempts to find and load the object\u2019s class. If the JVM can\u2019t find and/or load the class, the JVM throws an exception and the deserialization fails. A new object is given space on the heap, but the serialized object\u2019s constructor does NOT run ! Obviously, if the constructor ran, it would restore the state of the object back to its original 'new' state, and that\u2019s not what we want. We want the object to be restored to the state it had when it was serialized, not when it was first created. If the object has a non-serializable class somewhere up its inheritance tree, the constructor for that non-serializable class will run along with any constructors above that (even if they\u2019re serializable). Once the constructor chaining begins, you can\u2019t stop it, which means all superclasses, beginning with the first non-serializable one, will reinitialize their state. The object\u2019s instance variables are given the values from the serialized state. Transient variables are given a value of null for object references and defaults (0, false, etc.) for primitives. Note Static variables are NOT serialized. Static means \"one per class\" not \"one per object\". When an object is deserialized, static variables will have whatever static variable its class currently has.","title":"Deserialization"},{"location":"java/hfj/ch14/#serialversionuid","text":"Question : What might happen if you change the class and want to deserialize the object? Result : It may throw an InvalidClassException . Changes to a class that can hurt deserialization: Deleting an instance variable Change the declared type of an instance variable Changing a non-transient instance variable to transient Moving a class up or down the inheritance hierarchy Changing a class from Serializable to not Serializable. Changing an instance variable to static. Each time an object is serialized, the object (including every object in its graph) is 'stamped' with a version ID number for the object's class. The ID is called serialVersionUID . The serialization runtime associates with each serializable class a version number, called a serialVersionUID , which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an InvalidClassException. [Java Docs] SOLUTION TO THE QUESTION : If you think there is ANY possibility that your class might evolve, put a serialVersionUID in your class. As the class evolves, the serialVersionUID will remain the same and the JVM thinks the class is compatible with this serialized object. If a serializable class does not explicitly declare a serialVersionUID , then the serialization runtime will calculate a default serialVersionUID value for that class based on various aspects of the class. However, it is strongly recommended that all serializable classes explicitly declare serialVersionUID values , since the default serialVersionUID computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected InvalidClassExceptions during deserialization. [Java Docs] HOW ? A serializable class can declare its own serialVersionUID explicitly by declaring a field named \"serialVersionUID\" that must be static , final , and of type long : ANY - ACCESS - MODIFIER static final long serialVersionUID = 42L ;","title":"serialVersionUID"},{"location":"java/hfj/ch14/#writing-files","text":"","title":"Writing Files"},{"location":"java/hfj/ch14/#file-class","text":"The java.io.File class represents a file on disk, but doesn't actually represent the contents of the file. Think of a File object as something more like a pathname of a file (or even a directory ) rather than the Actual File Itself. File is an abstract representation of file and directory pathnames. [Java docs] Some things you can do with a File object: Make a file Object representing an existing file File f = new File ( Mycode.txt ); // not actually create a file Create a new, empty file File . createNewFile \u200b ( MyFile.txt ) Make a new directory File dir = new File ( Chapter7 ); dir . mkdir (); List the contents of a directory Javaif (dir.isDirectory()) {String[] dirContents = dir.list();for (int i=0; i dirContents.length; i++) {System.out.println(dirContents[i]);}} Get the absolute path of a file or directory System . out . println ( dir . getAbsolutePath ()); Delete a file or directory (returns true if successful) boolean isDeleted = f . delete ();","title":"File Class"},{"location":"java/hfj/ch14/#writing-to-a-plain-text-file","text":"To write a string: FileWriter . write ( My first String to save ) import java.io.* ; class WriteAFile { public static void main ( String [] args ) { try { // If the file foo.txt does not exist, FileWriter will create it. FileWriter writer = new FileWriter ( \u201c Foo . txt \u201d ); // The write() method takes a String writer . write ( \u201c hello foo ! \u201d ); // Close it when you re done! writer . close (); } catch ( IOException ex ) { ex . printStackTrace (); } } }","title":"Writing to a plain text file"},{"location":"java/hfj/ch14/#buffer","text":"Buffers are much more efficient than working without them. BufferedWriter writer = new BufferedWriter ( new FileWriter ( aFile )); FileWriter writes each and every thing you pass to the file each and every time. BufferedWriter will hold all the stuff you write to it until it's full. Only then the buffer is full will the FileWriter actually be told to write to the file on disk . If you do want to send data before the buffer is full, Just Flush It ( writer.flush() ).","title":"Buffer"},{"location":"java/hfj/ch14/#reading-files","text":"Usually, we use a File Object to represent a file, a FileReader to do the actual reading, and a BufferedReader to make the reading more efficient. import java.io.BufferedReader ; import java.io.File ; import java.io.FileReader ; public class ReadAFile { public static void main ( String [] args ){ try { File myFile = new File ( Foo.text ); // A FileReader is a connection stream for characters, that connects to a text file. FileReader fileReader = new FileReader ( myFile ); //Chain the FileReader to a BufferedReader for more efficient reading. BufferedReader reader = new BufferedReader ( fileReader ); // Make a String variable to hold each line as the line is read. String line = null ; while (( line = reader . readLine ())!= null ) { System . out . println ( line ); } reader . close (); } catch ( Exception ex ) { ex . printStackTrace (); } } }","title":"Reading Files"},{"location":"java/hfj/ch14/#java-nio","text":"When studying both the Java NIO and IO API's, a question quickly pops into mind: When should I use IO and when should I use NIO? IO NIO Stream oriented Buffer oriented Blocking IO Non blocking IO Selectors","title":"Java NIO"},{"location":"java/hfj/ch14/#main-differences-of-nio-and-io","text":"[ Java NIO vs. IO \uff0c \u7ffb\u8bd1 ] Stream Oriented vs. Buffer Oriented The first big difference between Java NIO and IO is that IO is stream oriented(\u9762\u5411\u6d41), where NIO is buffer oriented(\u9762\u5411\u7f13\u51b2). Java IO being stream oriented means that you read one or more bytes at a time, from a stream. What you do with the read bytes is up to you. They are not cached anywhere. Furthermore, you cannot move forth and back in the data in a stream. If you need to move back and forth in the data read from a stream, you will need to cache it in a buffer first. Java NIO's buffer oriented approach is slightly different. Data is read into a buffer from which it is later processed. You can move forth and back in the buffer as you need to. This gives you a bit more flexibility during processing. However, you also need to check if the buffer contains all the data you need in order to fully process it. And, you need to make sure that when reading more data into the buffer, you do not overwrite data in the buffer you have not yet processed. Blocking vs. Non-blocking IO Java IO's various streams are blocking. That means, that when a thread invokes a read() or write(), that thread is blocked until there is some data to read, or the data is fully written. The thread can do nothing else in the meantime. Java IO: Reading data from a blocking stream. Java NIO's non-blocking mode enables a thread to request reading data from a channel, and only get what is currently available, or nothing at all, if no data is currently available. Rather than remain blocked until data becomes available for reading, the thread can go on with something else. The same is true for non-blocking writing. A thread can request that some data be written to a channel, but not wait for it to be fully written. The thread can then go on and do something else in the mean time. What threads spend their idle time on when not blocked in IO calls, is usually performing IO on other channels in the meantime. That is, a single thread can now manage multiple channels of input and output. If you need to manage thousands of open connections simultaneously, which each only send a little data, for instance a chat server, implementing the server in NIO is probably an advantage. Similarly, if you need to keep a lot of open connections to other computers, e.g. in a P2P network, using a single thread to manage all of your outbound connections might be an advantage. This one thread, multiple connections design is illustrated in this diagram: If you have fewer connections with very high bandwidth, sending a lot of data at a time, perhaps a classic IO server implementation might be the best fit. This diagram illustrates a classic IO server design: Selectors Java NIO's selectors(\u9009\u62e9\u5668) allow a single thread to monitor multiple channels of input. You can register multiple channels with a selector, then use a single thread to \"select\" the channels that have input available for processing, or select the channels that are ready for writing. This selector mechanism makes it easy for a single thread to manage multiple channels.","title":"Main Differences of NIO and IO"},{"location":"java/hfj/ch14/#nio-channel","text":"Java NIO Channels are similar to streams with a few differences: You can both read and write to a Channels. Streams are typically one-way (read or write). Channels can be read and written asynchronously. Channels always read from, or write to, a Buffer. Here are the most important Channel implementations in Java NIO: FileChannel reads data from and write to files. DatagramChannel can read and write data over the network via UDP. SocketChannel can read and write data over the network via TCP. ServerSocketChannel allows you to listen for incoming TCP connections, like a web server does. For each incoming connection a SocketChannel is created. RandomAccessFile aFile = new RandomAccessFile ( data/nio-data.txt , rw ); FileChannel inChannel = aFile . getChannel (); ByteBuffer buf = ByteBuffer . allocate ( 48 ); int bytesRead = inChannel . read ( buf ); while ( bytesRead != - 1 ) { System . out . println ( Read + bytesRead ); buf . flip (); while ( buf . hasRemaining ()){ System . out . print (( char ) buf . get ()); } buf . clear (); bytesRead = inChannel . read ( buf ); } aFile . close ();","title":"NIO Channel"},{"location":"java/hfj/ch15/","text":"Chapter 15 Networking and Threads All the low-level networking details are taken care of by classes in the java.net library. One of Java's big benefits is that sending and receiving data over a network is just I/O with a slightly different connection stream at the end of the chain. 1 Socket Connections Make a Network Socket Connection To connect to another machine, We need a Socket connection. A Socket ( java.net.Socket is an object that represents a network connection between two machines. A connection is a relationship between two machines, where two pieces of software know about each other. To make a Socket connection, you need to know two things about the server: who it is, and which port it\u2019s running on. In other words, IP address and TCP port number . // 196.164.1.103 is the IP address for the sever // 5000 is TCP port number Socket chatSocket = new Socket ( 196.164.1.103 , 3000 ); A TCP port is just a 16-bit number that identifies a specific program on the server . The TCP port numbers from 0 to 1023 are reserved for well-known services. Don\u2019t use them for your own server programs! Well-known TCP port numbers for common server applications: Reading/Writing From/To a Socket To read data from a Socket , use a BufferedReader . To communicate over a Socket connection, you use regular I/O streams. One of the coolest features in Java is that the most of you I/O work won't care what you high-level chain stream is actually connected to. Make a Socket connection to the server Socket chatSocket = new Socket ( 127.0.0.1 , 3000 ); Make an InputStreamReader chained to the Socket \u2019s low-level (connection) input stream InputStreamReader stream = new InputStreamReader ( chatSocket . getInputStream ()); Make a BufferedReader and read! BufferedReader reader = new BufferedReader ( stream ); String message = reader . readLine (); To write data to a Socket, use a PrintWriter Make a Socket connection to the server ::Java Socket chatSocket = new Socket( 127.0.0.1 , 5000); Make an PrintWriter chained to the Socket \u2019s low-level (connection) input stream PrintWriter writer = new PrintWriter ( chatSocket . getOutputStream ()); Write (print) Something! writer . println ( message to send); writer.print( another message ); Writing a client Client connects to the server and gets an input stream from it Socket socket = new Socket ( 127.0.0.1 , 3000 ) InputStreamReader streamReader = new InputStreamReader ( socket . getInputStream ()); BufferedReader reader = new BufferedReader ( streamReader ) Client reads a message from the server message = reader . readLine (); A simple demo program, which reads index.html from my personal blog \"larryim.cc\", is illustrated below. The format of HTTP Request is discussed in CSAPP . import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.io.PrintWriter ; import java.net.Socket ; public class MyBlog { public void http_request (){ try { Socket s = new Socket ( 192.30.252.153 , 80 ); InputStreamReader streamReader = new InputStreamReader ( s . getInputStream ()); BufferedReader br = new BufferedReader ( streamReader ); //\u6ce8\u610f\u6362\u884c\u7b26\u662f\\r\\n writer . println ( GET /index.html HTTP/1.0 \\r\\n Host: larryim.cc \\r\\n \\r\\n ); String line = null ; while (( line = br . readLine ())!= null ){ System . out . println ( line ); } br . close (); } catch ( Exception ex ){ ex . printStackTrace (); } } public static void main ( String [] args ){ MyBlog client = new MyBlog (); client . http_request (); } } Writing a Simple Server Server application makes a ServerSocket, on a specific port ServerSocket serverSock = new ServerSocket(4242); Client makes a Socket connection to the server application Socket sock = new Socket(\u201c190.165.1.103\u201d, 4242); Server makes a new Socket to communicate with this client Socket sock = serverSock.accept(); 2 Threads To make a thread, make a Thread . A Thread is a java class that represents a thread. You'll create an instance of class Thread each time you want to start up a new thread of execution. A thread is a separate thread of execution. That means a separate stack. Remember, Java is just a process running on your underlying OS. The JVM switches between the new thread (user thread) and the original main thread, until both threads complete . Launching a thread Make a Runnable object (the thread\u2019s job) Runnable threadJob = new MyRunnable (); Runnable is an interface you\u2019ll learn about on the next page. You\u2019ll write a class that implements the Runnable interface, and that class is where you\u2019ll define the work that a thread will perform. In other words, the method that will be run from the thread\u2019s new call stack. Make a Thread object (the worker) and give it a Runnable (the job) Thread myThread = new Thread ( threadJob ); Pass the new Runnable object to the Thread constructor. This tells the new Thread object which method to put on the bottom of the new stack\u2014the Runnable \u2019s run() method. Start the Thread myThread . start (); Nothing happens until you call the Thread \u2019s start() method. That\u2019s when you go from having just a Thread instance to having a new thread of execution. When the new thread starts up, it takes the Runnable object\u2019s run() method and puts it on the bottom of the new thread\u2019s stack. Runnable is to a Thread what a job is to a worker . A Runnable is the job a thread is supposed to run. Runnable interface To make a job for your thread, implement the Runnable interface. // Runnable is in the java.lang package, so you don t need to import it. public class RunThreads implements Runnable { @Override // Runnable has only one method to implement: public void run() (with no arguments) // This is where you put the JOB the thread is suposed to run. // This is the method that goes at the bottom of the new stack() public void run () { for ( int i = 0 ; i 20 ; i ++){ String threadName = Thread . currentThread (). getName (); System . out . println ( threadName + is running. ); } } public static void main ( String [] args ){ RunThreads jobs = new RunThreads (); // Pass the new Runnable instance into the new Thread constructor. // This tells the thread what method to put on the bottom of the new stack. // In other words, the first method that the new thread will run. Thread threadA = new Thread ( jobs ); Thread threadB = new Thread ( jobs ); threadA . setName ( Thread A ); threadB . setName ( Thread B ); // You won t get a new thread of execution until you call start() on the Thread instance. threadA . start (); threadB . start (); } } The three states of a new thread : Once the thread becomes runnable, it can move back and forth between runnable, running, and an additional state: temporarily not runnable (also known as 'blocked'). Typically, a thread moves back and forth between runnable and running, as the JVM thread scheduler selects a thread to run and then kicks it back out so another thread gets a chance. A thread scheduler can move a running thread into a blocked state, for a variety of reasons. See Understanding JVM . Thread Scheduler The thread scheduler makes all the decisions about who runs and who doesn\u2019t. Most importantly, there are no guarantees about scheduling! So DO NOT base your program's correctness on the scheduler working in a particular way! You multi-threaded program must work no matter how the thread scheduler behaves. The thread's sleep() method does come with one guarantee: a sleeping thread will not become the currently-running thread before the length of its sleep time has expired. Note Another way of making a thread is to, make a subclass of Thread and override the Thread 's run() method, instead of Runnable implementation. However, it's rarely a good idea - not a good OO design. Lock The lock works like this: Use the synchronized keyword to modify a method so that only one thread at a time can access it. The synchronized keyword means that a thread needs a key in order to access the synchronized code. Every Java object has a lock. A lock has only one key. Most of the time, the lock is unlocked and nobody cares. But if an object has synchronized methods, a thread can enter one of the synchronized methods ONLY if the key for the object\u2019s lock is available. In other words, only if another thread hasn\u2019t already grabbed the one key. 3 Example: A Simple ChatApp Client package com.headfirstjava.chat ; import javax.swing.* ; import java.awt.* ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.io.* ; import java.net.Socket ; public class ChatClient { JFrame frame ; String out_message ; // message sent to a server ScrollPane scroll ; JTextArea inMessage ; // incoming message from a server JTextField outTextField ; JButton button ; // a button to send message PrintWriter writer ; BufferedReader reader ; Thread backgroundJob = new Thread ( new ReceiveMessage ()); private void establishConnection () { try { Socket socket = new Socket ( 127.0.0.1 , 3000 ); writer = new PrintWriter ( socket . getOutputStream ()); InputStreamReader streamReader = new InputStreamReader ( socket . getInputStream ()); reader = new BufferedReader ( streamReader ); } catch ( IOException ex ) { ex . printStackTrace (); } } private void gui () { frame = new JFrame ( Ludirously Simple Chat Client ); inMessage = new JTextArea ( 7 , 14 ); outTextField = new JTextField ( 18 ); button = new JButton ( Send ); button . setSize ( 300 , 40 ); scroll = new ScrollPane (); scroll . add ( inMessage ); inMessage . setLineWrap ( true ); frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); frame . getContentPane (). add ( BorderLayout . NORTH , scroll ); frame . getContentPane (). add ( BorderLayout . WEST , outTextField ); frame . getContentPane (). add ( BorderLayout . EAST , button ); button . addActionListener ( new ButtonListener ()); frame . setSize ( 300 , 200 ); frame . setVisible ( true ); } class ButtonListener implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { out_message = outTextField . getText (); outTextField . setText ( ); outTextField . requestFocus (); writer . println ( out_message ); writer . flush (); } } class ReceiveMessage implements Runnable { @Override public void run () { while ( true ) { String line = null ; try { while (( line = reader . readLine ())!= null ) { inMessage . append ( line ); } } catch ( IOException ex ) { ex . printStackTrace (); } } // end while } // end run } // end class public void start () { gui (); establishConnection (); backgroundJob . start (); } public static void main ( String [] args ){ ChatClient client = new ChatClient (); client . start (); } } Server package com.headfirstjava.chat ; import java.io.* ; import java.net.* ; import java.util.* ; public class ChatServer { ArrayList clientOutputStreams ; public class ClientHandler implements Runnable { BufferedReader reader ; Socket sock ; public ClientHandler ( Socket clientSocket ) { try { sock = clientSocket ; InputStreamReader isReader = new InputStreamReader ( sock . getInputStream ()); reader = new BufferedReader ( isReader ); } catch ( Exception ex ) { ex . printStackTrace (); } } public void run () { String message ; try { while (( message = reader . readLine ()) != null ) { System . out . println ( read + message ); tellEveryone ( message ); } } catch ( Exception ex ) { ex . printStackTrace (); } } } public static void main ( String [] args ) { new ChatServer (). go (); } public void go () { clientOutputStreams = new ArrayList (); try { ServerSocket serverSock = new ServerSocket ( 3000 ); while ( true ) { Socket clientSocket = serverSock . accept (); PrintWriter writer = new PrintWriter ( clientSocket . getOutputStream ()); clientOutputStreams . add ( writer ); Thread t = new Thread ( new ClientHandler ( clientSocket )); t . start (); System . out . println ( got a connection ); } } catch ( Exception ex ) { ex . printStackTrace (); } } public void tellEveryone ( String message ) { Iterator it = clientOutputStreams . iterator (); while ( it . hasNext ()) { try { PrintWriter writer = ( PrintWriter ) it . next (); writer . println ( message ); writer . flush (); } catch ( Exception ex ) { ex . printStackTrace (); } } } }","title":"Chapter 15: Networking and Threads"},{"location":"java/hfj/ch15/#chapter-15-networking-and-threads","text":"All the low-level networking details are taken care of by classes in the java.net library. One of Java's big benefits is that sending and receiving data over a network is just I/O with a slightly different connection stream at the end of the chain.","title":"Chapter 15 Networking and Threads"},{"location":"java/hfj/ch15/#1-socket-connections","text":"","title":"1 Socket Connections"},{"location":"java/hfj/ch15/#make-a-network-socket-connection","text":"To connect to another machine, We need a Socket connection. A Socket ( java.net.Socket is an object that represents a network connection between two machines. A connection is a relationship between two machines, where two pieces of software know about each other. To make a Socket connection, you need to know two things about the server: who it is, and which port it\u2019s running on. In other words, IP address and TCP port number . // 196.164.1.103 is the IP address for the sever // 5000 is TCP port number Socket chatSocket = new Socket ( 196.164.1.103 , 3000 ); A TCP port is just a 16-bit number that identifies a specific program on the server . The TCP port numbers from 0 to 1023 are reserved for well-known services. Don\u2019t use them for your own server programs! Well-known TCP port numbers for common server applications:","title":"Make a Network Socket Connection"},{"location":"java/hfj/ch15/#readingwriting-fromto-a-socket","text":"To read data from a Socket , use a BufferedReader . To communicate over a Socket connection, you use regular I/O streams. One of the coolest features in Java is that the most of you I/O work won't care what you high-level chain stream is actually connected to. Make a Socket connection to the server Socket chatSocket = new Socket ( 127.0.0.1 , 3000 ); Make an InputStreamReader chained to the Socket \u2019s low-level (connection) input stream InputStreamReader stream = new InputStreamReader ( chatSocket . getInputStream ()); Make a BufferedReader and read! BufferedReader reader = new BufferedReader ( stream ); String message = reader . readLine (); To write data to a Socket, use a PrintWriter Make a Socket connection to the server ::Java Socket chatSocket = new Socket( 127.0.0.1 , 5000); Make an PrintWriter chained to the Socket \u2019s low-level (connection) input stream PrintWriter writer = new PrintWriter ( chatSocket . getOutputStream ()); Write (print) Something! writer . println ( message to send); writer.print( another message );","title":"Reading/Writing From/To a Socket"},{"location":"java/hfj/ch15/#writing-a-client","text":"Client connects to the server and gets an input stream from it Socket socket = new Socket ( 127.0.0.1 , 3000 ) InputStreamReader streamReader = new InputStreamReader ( socket . getInputStream ()); BufferedReader reader = new BufferedReader ( streamReader ) Client reads a message from the server message = reader . readLine (); A simple demo program, which reads index.html from my personal blog \"larryim.cc\", is illustrated below. The format of HTTP Request is discussed in CSAPP . import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.io.PrintWriter ; import java.net.Socket ; public class MyBlog { public void http_request (){ try { Socket s = new Socket ( 192.30.252.153 , 80 ); InputStreamReader streamReader = new InputStreamReader ( s . getInputStream ()); BufferedReader br = new BufferedReader ( streamReader ); //\u6ce8\u610f\u6362\u884c\u7b26\u662f\\r\\n writer . println ( GET /index.html HTTP/1.0 \\r\\n Host: larryim.cc \\r\\n \\r\\n ); String line = null ; while (( line = br . readLine ())!= null ){ System . out . println ( line ); } br . close (); } catch ( Exception ex ){ ex . printStackTrace (); } } public static void main ( String [] args ){ MyBlog client = new MyBlog (); client . http_request (); } }","title":"Writing a client"},{"location":"java/hfj/ch15/#writing-a-simple-server","text":"Server application makes a ServerSocket, on a specific port ServerSocket serverSock = new ServerSocket(4242); Client makes a Socket connection to the server application Socket sock = new Socket(\u201c190.165.1.103\u201d, 4242); Server makes a new Socket to communicate with this client Socket sock = serverSock.accept();","title":"Writing a Simple Server"},{"location":"java/hfj/ch15/#2-threads","text":"To make a thread, make a Thread . A Thread is a java class that represents a thread. You'll create an instance of class Thread each time you want to start up a new thread of execution. A thread is a separate thread of execution. That means a separate stack. Remember, Java is just a process running on your underlying OS. The JVM switches between the new thread (user thread) and the original main thread, until both threads complete .","title":"2 Threads"},{"location":"java/hfj/ch15/#launching-a-thread","text":"Make a Runnable object (the thread\u2019s job) Runnable threadJob = new MyRunnable (); Runnable is an interface you\u2019ll learn about on the next page. You\u2019ll write a class that implements the Runnable interface, and that class is where you\u2019ll define the work that a thread will perform. In other words, the method that will be run from the thread\u2019s new call stack. Make a Thread object (the worker) and give it a Runnable (the job) Thread myThread = new Thread ( threadJob ); Pass the new Runnable object to the Thread constructor. This tells the new Thread object which method to put on the bottom of the new stack\u2014the Runnable \u2019s run() method. Start the Thread myThread . start (); Nothing happens until you call the Thread \u2019s start() method. That\u2019s when you go from having just a Thread instance to having a new thread of execution. When the new thread starts up, it takes the Runnable object\u2019s run() method and puts it on the bottom of the new thread\u2019s stack. Runnable is to a Thread what a job is to a worker . A Runnable is the job a thread is supposed to run.","title":"Launching a thread"},{"location":"java/hfj/ch15/#runnable-interface","text":"To make a job for your thread, implement the Runnable interface. // Runnable is in the java.lang package, so you don t need to import it. public class RunThreads implements Runnable { @Override // Runnable has only one method to implement: public void run() (with no arguments) // This is where you put the JOB the thread is suposed to run. // This is the method that goes at the bottom of the new stack() public void run () { for ( int i = 0 ; i 20 ; i ++){ String threadName = Thread . currentThread (). getName (); System . out . println ( threadName + is running. ); } } public static void main ( String [] args ){ RunThreads jobs = new RunThreads (); // Pass the new Runnable instance into the new Thread constructor. // This tells the thread what method to put on the bottom of the new stack. // In other words, the first method that the new thread will run. Thread threadA = new Thread ( jobs ); Thread threadB = new Thread ( jobs ); threadA . setName ( Thread A ); threadB . setName ( Thread B ); // You won t get a new thread of execution until you call start() on the Thread instance. threadA . start (); threadB . start (); } } The three states of a new thread : Once the thread becomes runnable, it can move back and forth between runnable, running, and an additional state: temporarily not runnable (also known as 'blocked'). Typically, a thread moves back and forth between runnable and running, as the JVM thread scheduler selects a thread to run and then kicks it back out so another thread gets a chance. A thread scheduler can move a running thread into a blocked state, for a variety of reasons. See Understanding JVM .","title":"Runnable interface"},{"location":"java/hfj/ch15/#thread-scheduler","text":"The thread scheduler makes all the decisions about who runs and who doesn\u2019t. Most importantly, there are no guarantees about scheduling! So DO NOT base your program's correctness on the scheduler working in a particular way! You multi-threaded program must work no matter how the thread scheduler behaves. The thread's sleep() method does come with one guarantee: a sleeping thread will not become the currently-running thread before the length of its sleep time has expired. Note Another way of making a thread is to, make a subclass of Thread and override the Thread 's run() method, instead of Runnable implementation. However, it's rarely a good idea - not a good OO design.","title":"Thread Scheduler"},{"location":"java/hfj/ch15/#lock","text":"The lock works like this: Use the synchronized keyword to modify a method so that only one thread at a time can access it. The synchronized keyword means that a thread needs a key in order to access the synchronized code. Every Java object has a lock. A lock has only one key. Most of the time, the lock is unlocked and nobody cares. But if an object has synchronized methods, a thread can enter one of the synchronized methods ONLY if the key for the object\u2019s lock is available. In other words, only if another thread hasn\u2019t already grabbed the one key.","title":"Lock"},{"location":"java/hfj/ch15/#3-example-a-simple-chatapp","text":"Client package com.headfirstjava.chat ; import javax.swing.* ; import java.awt.* ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.io.* ; import java.net.Socket ; public class ChatClient { JFrame frame ; String out_message ; // message sent to a server ScrollPane scroll ; JTextArea inMessage ; // incoming message from a server JTextField outTextField ; JButton button ; // a button to send message PrintWriter writer ; BufferedReader reader ; Thread backgroundJob = new Thread ( new ReceiveMessage ()); private void establishConnection () { try { Socket socket = new Socket ( 127.0.0.1 , 3000 ); writer = new PrintWriter ( socket . getOutputStream ()); InputStreamReader streamReader = new InputStreamReader ( socket . getInputStream ()); reader = new BufferedReader ( streamReader ); } catch ( IOException ex ) { ex . printStackTrace (); } } private void gui () { frame = new JFrame ( Ludirously Simple Chat Client ); inMessage = new JTextArea ( 7 , 14 ); outTextField = new JTextField ( 18 ); button = new JButton ( Send ); button . setSize ( 300 , 40 ); scroll = new ScrollPane (); scroll . add ( inMessage ); inMessage . setLineWrap ( true ); frame . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); frame . getContentPane (). add ( BorderLayout . NORTH , scroll ); frame . getContentPane (). add ( BorderLayout . WEST , outTextField ); frame . getContentPane (). add ( BorderLayout . EAST , button ); button . addActionListener ( new ButtonListener ()); frame . setSize ( 300 , 200 ); frame . setVisible ( true ); } class ButtonListener implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { out_message = outTextField . getText (); outTextField . setText ( ); outTextField . requestFocus (); writer . println ( out_message ); writer . flush (); } } class ReceiveMessage implements Runnable { @Override public void run () { while ( true ) { String line = null ; try { while (( line = reader . readLine ())!= null ) { inMessage . append ( line ); } } catch ( IOException ex ) { ex . printStackTrace (); } } // end while } // end run } // end class public void start () { gui (); establishConnection (); backgroundJob . start (); } public static void main ( String [] args ){ ChatClient client = new ChatClient (); client . start (); } } Server package com.headfirstjava.chat ; import java.io.* ; import java.net.* ; import java.util.* ; public class ChatServer { ArrayList clientOutputStreams ; public class ClientHandler implements Runnable { BufferedReader reader ; Socket sock ; public ClientHandler ( Socket clientSocket ) { try { sock = clientSocket ; InputStreamReader isReader = new InputStreamReader ( sock . getInputStream ()); reader = new BufferedReader ( isReader ); } catch ( Exception ex ) { ex . printStackTrace (); } } public void run () { String message ; try { while (( message = reader . readLine ()) != null ) { System . out . println ( read + message ); tellEveryone ( message ); } } catch ( Exception ex ) { ex . printStackTrace (); } } } public static void main ( String [] args ) { new ChatServer (). go (); } public void go () { clientOutputStreams = new ArrayList (); try { ServerSocket serverSock = new ServerSocket ( 3000 ); while ( true ) { Socket clientSocket = serverSock . accept (); PrintWriter writer = new PrintWriter ( clientSocket . getOutputStream ()); clientOutputStreams . add ( writer ); Thread t = new Thread ( new ClientHandler ( clientSocket )); t . start (); System . out . println ( got a connection ); } } catch ( Exception ex ) { ex . printStackTrace (); } } public void tellEveryone ( String message ) { Iterator it = clientOutputStreams . iterator (); while ( it . hasNext ()) { try { PrintWriter writer = ( PrintWriter ) it . next (); writer . println ( message ); writer . flush (); } catch ( Exception ex ) { ex . printStackTrace (); } } } }","title":"3 Example: A Simple ChatApp"},{"location":"java/hfj/ch16/","text":"Chapter 16 Collections and Generics Collections.sort() Problem: ArrayList class does NOT have a sort() method Solution: you could use the Collections.sort() method Example: sort a list of songs by song title. ArrayList String songList = new ArrayList (); getSongs (); Collections . sort ( songList ); Sorting objects Question: What if you need objects, not just simple Strings . Try: We override toString() method in class . // We override toString(), because when you do a System.out.println(aSongObject), // we want to see the title. // When you do a System.out.println(aListOfSongs), // it calls the toString() method of EACH element in the list. public String toString () { return title ; } Result: However, it won\u2019t compile! That's see the signature of Collection.sort() from Java Doc: public static T extends Comparable ? super T void sort \u200b ( List T list ) The sort method (along with other things in the whole collection framework in Java) makes heavy use of generics . Anytime you see something with angle brackets in Java source code or documentation, it means generics. Generics types Generics means more type safety. Virtually all of the code you write that deals with generics will be collection-related code. The main point of generics is let you write type-safe collections. (e.g. the compiler stop you from putting a Dog into a list of Ducks). Before generics (which means before Java 5.0), the compiler could not care less what you put into a collection, because all collection implementations were declared to hold type Object . You could put anything in any ArrayList ; it was like all ArrayList were declared as ArrayList Object . Learning generics Creating instances of generified classes (like ArrayList ) new ArrayList Song () Declaring and assigning variables of generic types List Song songList = new ArrayList Song () Declaring (and invoking) methods that take generic types void foo ( List Song List ) x . foo ( songList ) Think of E\" as a stand-in for \"the type of element you want this collection to hold and return.\" (E is for Element.) Generic methods A generic class means that the class declaration includes a type parameter. A generic method means that the method declaration uses a type parameter in its signature. You can use type parameters in a method in several different ways: Using a type parameter defined in the class declaration public class ArrayList E extends AbstractList E ... { // You can use the E here ONLY because // it s already defined as part of the class public boolean add ( E o ) Using a type parameter that was NOT defined in the class declaration //Here we can use T because we declared T earlier in the method declaration public T extends Animals void takeThing ArrayList T list ) If the class itself doesn't use a type parameter, you can still specify one for a method, by declaring it in a really unusual space -- before the return type . This method says that T can be \"any type of Animal\". This: public T extends Animals void takeThing ArrayList T list ) Is NOT the same as this: public void takeThing ( ArrayList Animal list ) The first one, means that any ArrayList declared of a type that is Animal or one of Animal 's subtypes, is legal. So you could invoke the top method using an ArrayList , ArrayList or ArrayList . But.. the one on the bottom, means that only an ArrayList is legal. The Collections.sort() method The Collections.sort() method can take only lists of Comparable objects. Song is NOT a subtype of Comparable , so you cannot sort() the list of Songs. Extends In generics, the keyword \"extends\" really means \"is-a\", and works for BOTH classes and interfaces. Comparable interface Comparable is an interface. public interface Comparable T { public int compareTo ( T o ); } The new, improved, comparable Song class We decide we want to sort by title, so we implement the compareTo() method to compare the title of the Song passed to the method against the title of the song on which the compareTo() method was invoked. public class Song implements Comparable Song { String title ; String artist ; String rating ; String bpm ; public Song ( String t , String a , String r , String b ) { title = t ; artist = a ; rating = r ; bpm = b ; } // The sort() method sends a Song to compareTo() // to see how that Song compares to the Song on which the method was invoked. public int compareTo ( Song s ) { // Strings have a compareTo() method return title . compareTo ( s . getTitle ()); } } Comparator interface public interface Comparator T { ... Comparator v.s. Comparable Invoking the one-argument sort(List o) method means the list element\u2019s compareTo() method determines the order. So the elements in the list MUST implement the Comparable interface. Invoking sort(List o, Comparator c) means the list element\u2019s compareTo() method will NOT be called, and the Comparator \u2019s compare() method will be used instead. That means the elements in the list do NOT need to implement the Comparable interface. // Create a class that implements Comparator // its type parameter matches the type we re going to compare - in this case Song objects. class ArtistCompare implements Comparator Song { public int compare ( Song one , Song two ) { // We re letting the String variables (for artist) do the actual comparison. // since Strings already know how to alphabetize themselves. return one . getArtist (). compareTo ( two . getArtist ()); } } // Make an instance of the Comparator ArtistCompare artistCompare = new ArtistCompare (); // Invoke sort(), passing it the list and a reference to the new custom Comparator object. Collections . sort ( songList , artistCompare ); Uh-oh. The sorting all works, but now we have duplicates... We need a Set instead of a List . An Example: SortMountain import java.util.Collections ; import java.util.Comparator ; import java.util.LinkedList ; public class SortMountains { LinkedList Mountain mtn = new LinkedList Mountain (); public static void main ( String [] agrs ) { new SortMountains (). go (); } public void go () { mtn . add ( new Mountain ( Longs , 14255 )); mtn . add ( new Mountain ( Elbert , 14433 )); mtn . add ( new Mountain ( Maroon , 14156 )); mtn . add ( new Mountain ( Castle , 14265 )); System . out . println ( as entered:\\n + mtn ); NameCompare nc = new NameCompare (); Collections . sort ( mtn , nc ); System . out . println ( by name:\\n + mtn ); HeightCompare hc = new HeightCompare (); Collections . sort ( mtn , hc ); System . out . println ( by height:\\n + mtn ); } class NameCompare implements Comparator Mountain { @Override public int compare ( Mountain one , Mountain two ) { return one . getName (). compareTo ( two . getName ()); } } class HeightCompare implements Comparator Mountain { @Override public int compare ( Mountain one , Mountain two ) { return one . getHeight () - two . getHeight (); } } } class Mountain { private String name ; private int height ; public int getHeight () { return this . height ; } public String getName () { return this . name ; } public Mountain ( String name , int height ) { this . name = name ; this . height = height ; } public String toString () { return name + + Integer . toString ( height ); } } Collection The Collection API Note that the Map interface doesn't actually extend the interface, but Map is still considered part of the \"Collection Framework\" (\u96c6\u5408\u6846\u67b6\uff0calso known as the \"Collection API\"). Object equality What makes two objects equal? reference equality v.s. object equality. Reference equality : Two references that refer to the same object on the heap are equal. If you want to know if two references are really referring to the same object, use the == operator, which (remember) compares the bits in the variables. If both references point to the same object, the bits will be identical. Object equality : Two references, two objects on the heap, but the objects are considered meaningfully equivalent . If you want to treat two different objects as equal, you must override both the hashCode() and equals() methods inherited from class Object . Question How a HashSet checks for duplicates: hashCode() and equals() ? When you put an object into a HashSet , it uses the object's hashcode value to determine where to put the object in the Set . But it also compares the object's hashcode to the hashcode of all the other objects of the HashSet , and if there's no matching hashcode, the HashSet assumes that this new object is not a duplicate. If the HashSet finds a matching hashcode for two objects, the HashSet will then call one of the object's equals() methods to see if these hashcode-matched objects really are equal. The Song class with overriden hashcode and equals() . public class Song implements Comparable Song { ... public boolean equals ( Object aSong ) { Song s = ( Song ) aSong ; // Strings have an overriden equals() method. return getTitle (). equals ( s . getTitle ()); } public int hashCode () { //The String class has an overriden hashCode() method, so you can just return the result of calling hashCode() on the title. return title . hashCode (); } ... } // Instantiate a TreeSet TreeSet Song songSet = new TreeSet Song (); // We can add all the songs from the HashSet using addAll(). songSet . addAll ( songList ); Java Object Law For HashCode() and equals() : The API docs for class Object state the rules you MUST follow: If two objects are equal, they MUST have matching hashcodes. If two objects are equal, calling equals() on either object MUST return true. In other words, if ( a . equals ( b )) then ( b . equals ( a )) . If two objects have the same hashcode value, they are NOT required to be equal. But if they\u2019re equal, they MUST have the same hashcode value. So, if you override equals() , you MUST override hashCode() . The default behavior of hashCode() is to generate a unique integer for each object on the heap. So if you don\u2019t override hashCode() in a class, no two objects of that type can EVER be considered equal. The default behavior of equals() is to do an == comparison. In other words, to test whether the two references refer to a single object on the heap. So if you don\u2019t override equals() in a class, no two objects can EVER be considered equal since references to two different objects will always contain a different bit pattern. a.equals(b) must also mean that a.hashCode() == b.hashCode() But a.hashCode() == b.hashCode() does NOT have to mean a.equals(b) How TreeSets sort To use a TreeSet , one of these things must be true: The elements in the list must be of a type that implements Comparable . You use the TreeSet \u2019s overloaded constructor that takes a Comparator . import java.util.Comparator ; import java.util.TreeSet ; class BookCompare implements Comparator Book { public int compare ( Book one , Book two ) { return ( one . title . compareTo ( two . title )); } } public class Book implements Comparable { String title ; public Book ( String t ) { title = t ; } public int compareTo ( Object b ) { Book book = ( Book ) b ; return ( title . compareTo ( book . title )); } public String toString () { return title ; } public static void main ( String [] args ) { Book b1 = new Book ( How Cats Work ); Book b2 = new Book ( Remix your Body ); Book b3 = new Book ( Finding Emo ); BookCompare bCompare = new BookCompare (); TreeSet Book tree = new TreeSet Book ( bCompare ); tree . add ( new Book ( How Cats Work )); tree . add ( new Book ( Finding Emo )); tree . add ( new Book ( Remix your Body )); System . out . println ( tree ); } // end main } Polymorphism and Generics A problem with polymorphism TestGenerics1 shows how polymorphism works with regular arrays. Because of polymorphism, the compiler let us pass a Dog array to a method with an Animal array argument. However, the ArrayList Animal argument WILL NOT accept an ArrayList Dog , as TestGenerics3 shows . Testgenerics1 public class TestGenerics1 { //If a method argument is an array of Animals, it will also take an array of any Animal subtype. //In other words, if a method is declared as: void foo(Animal[] a) { } // Assuming Dog extends Animal, you are free to call both: foo(anAnimalArray); foo(aDogArray); public static void main ( String [] args ) { new TestGenerics1 (). go (); } public void go () { // Declare and create an Animal array, that holds both dogs and cats. Animal [] animals = { new Dog (), new Cat (), new Dog ()}; // Declare and create a Dog array, that holds only Dogs // (the compiler won\u2019t let you put a Cat in). Dog [] dogs = { new Dog (), new Dog (), new Dog ()}; takeAnimals ( animals ); takeAnimals ( dogs ); // } // The crucial point is that the takeAnimals() method can take an Animal[] or a Dog[] // Since Dog IS-A Animal. public void takeAnimals ( Animal [] animals ){ for ( Animal a : animals ) { a . eat (); } // end for } // end takeAnimals } // end class Testgenerics3 import java.util.ArrayList ; public class TestGenerics3 extends TestGenerics1 { @Override public void go () { ArrayList Animal animals = new ArrayList Animal (); animals . add ( new Dog ()); animals . add ( new Cat ()); animals . add ( new Dog ()); takeAnimals ( animals ); // we know this works fine // Make a Dog ArrayList, and put a couple Dog in. ArrayList Dog dogs = new ArrayList Dog (); dogs . add ( new Dog ()); dogs . add ( new Dog ()); // Will this work now that we change from Animal[] to ArrayList Animal takeAnimals ( dogs ); } public void takeAnimals ( ArrayList Animal animals ) { for ( Animal a : animals ) { a . eat (); } } // end method } ... blank line ... If you declare a method to take ArrayList Animal , it can take ONLY an ArrayList Animal , not ArrayList or ArrayList Cat . Question: why they won\u2019t let you pass a ArrayList Dog into a method that takes an ArrayList Animal ? The reason is to stop you from possibly putting a Cat in what was actually a Dog list. public void takeAnimals ( ArrayList Animal animals ) { //Yikes!! We just stuck a Cat in what might be Dogs-only ArrayList. animals . add ( new Cat ()); } Question: Why does it work with arrays?? Because array types are checked again at runtime, but collection type checks happen only when you compile. public void go () { Dog [] dogs = { new Dog (), new Dog (), new Dog ()}; takeAnimals ( dogs ); } public void takeAnimals ( Animal [] animals ) { // We put a new Cat into a Dog array. // The compiler allowed i. // But, JVM stopped it, throw an Exception during run. animals [ 0 ] = new Cat (); } Generic wildcards QUESTION: Wouldn\u2019t it be dreamy if there were a way to still use polymorphic collection types as method arguments, so that my veterinary program could take Dog lists and Cat lists? There is a way to create a method argument that can accept an ArrayList of any Animal subtype. The simplest way is to use a wildcard . public void takeAnimals ( ArrayList ? extends Animal animals ) { for ( Animal a : animals ) { a . eat (); } When you use a wildcard in your method argument, the compiler will STOP you from doing anything that could hurt the list referenced by the method parameter: You can still invoke methods on the elements in the list, but you cannot add elements to the list. In other words, you can do things with the list elements, but you can\u2019t put new things in the list. So you\u2019re safe at runtime, because the compiler won\u2019t let you do anything that might be horrible at runtime. So, this is OK inside takeAnimals() : for ( Animal a : animals ) { a . eat (); } But THIS would not compile: animals . add ( new Cat ()); Two syntax for wildcard: // the results are the same public T extends Animal void takeThing ( ArrayList T list ) public void takeThing ( ArrayList ? extends Animal list ) Bounded Wildcards: ? super/extends T : The syntax ? super T denotes an unknown type that is a supertype of T (or T itself; remember that the supertype relation is reflexive). The syntax ? extends T denotes an unknown type that is a subtype of T. Generic array For historical and technical reasons, generic array creation is disallowed in Java . Instead, we need to use a cast: a = new Item [ cap ] // error a = ( Item []) new Object [ cap ] // use a cast","title":"Chapter 16: Collections and Generics"},{"location":"java/hfj/ch16/#chapter-16-collections-and-generics","text":"","title":"Chapter 16 Collections and Generics"},{"location":"java/hfj/ch16/#collectionssort","text":"Problem: ArrayList class does NOT have a sort() method Solution: you could use the Collections.sort() method Example: sort a list of songs by song title. ArrayList String songList = new ArrayList (); getSongs (); Collections . sort ( songList );","title":"Collections.sort()"},{"location":"java/hfj/ch16/#sorting-objects","text":"Question: What if you need objects, not just simple Strings . Try: We override toString() method in class . // We override toString(), because when you do a System.out.println(aSongObject), // we want to see the title. // When you do a System.out.println(aListOfSongs), // it calls the toString() method of EACH element in the list. public String toString () { return title ; } Result: However, it won\u2019t compile! That's see the signature of Collection.sort() from Java Doc: public static T extends Comparable ? super T void sort \u200b ( List T list ) The sort method (along with other things in the whole collection framework in Java) makes heavy use of generics . Anytime you see something with angle brackets in Java source code or documentation, it means generics.","title":"Sorting objects"},{"location":"java/hfj/ch16/#generics-types","text":"Generics means more type safety. Virtually all of the code you write that deals with generics will be collection-related code. The main point of generics is let you write type-safe collections. (e.g. the compiler stop you from putting a Dog into a list of Ducks). Before generics (which means before Java 5.0), the compiler could not care less what you put into a collection, because all collection implementations were declared to hold type Object . You could put anything in any ArrayList ; it was like all ArrayList were declared as ArrayList Object .","title":"Generics types"},{"location":"java/hfj/ch16/#learning-generics","text":"Creating instances of generified classes (like ArrayList ) new ArrayList Song () Declaring and assigning variables of generic types List Song songList = new ArrayList Song () Declaring (and invoking) methods that take generic types void foo ( List Song List ) x . foo ( songList ) Think of E\" as a stand-in for \"the type of element you want this collection to hold and return.\" (E is for Element.)","title":"Learning generics"},{"location":"java/hfj/ch16/#generic-methods","text":"A generic class means that the class declaration includes a type parameter. A generic method means that the method declaration uses a type parameter in its signature. You can use type parameters in a method in several different ways: Using a type parameter defined in the class declaration public class ArrayList E extends AbstractList E ... { // You can use the E here ONLY because // it s already defined as part of the class public boolean add ( E o ) Using a type parameter that was NOT defined in the class declaration //Here we can use T because we declared T earlier in the method declaration public T extends Animals void takeThing ArrayList T list ) If the class itself doesn't use a type parameter, you can still specify one for a method, by declaring it in a really unusual space -- before the return type . This method says that T can be \"any type of Animal\". This: public T extends Animals void takeThing ArrayList T list ) Is NOT the same as this: public void takeThing ( ArrayList Animal list ) The first one, means that any ArrayList declared of a type that is Animal or one of Animal 's subtypes, is legal. So you could invoke the top method using an ArrayList , ArrayList or ArrayList . But.. the one on the bottom, means that only an ArrayList is legal. The Collections.sort() method The Collections.sort() method can take only lists of Comparable objects. Song is NOT a subtype of Comparable , so you cannot sort() the list of Songs.","title":"Generic methods"},{"location":"java/hfj/ch16/#extends","text":"In generics, the keyword \"extends\" really means \"is-a\", and works for BOTH classes and interfaces.","title":"Extends"},{"location":"java/hfj/ch16/#comparable-interface","text":"Comparable is an interface. public interface Comparable T { public int compareTo ( T o ); } The new, improved, comparable Song class We decide we want to sort by title, so we implement the compareTo() method to compare the title of the Song passed to the method against the title of the song on which the compareTo() method was invoked. public class Song implements Comparable Song { String title ; String artist ; String rating ; String bpm ; public Song ( String t , String a , String r , String b ) { title = t ; artist = a ; rating = r ; bpm = b ; } // The sort() method sends a Song to compareTo() // to see how that Song compares to the Song on which the method was invoked. public int compareTo ( Song s ) { // Strings have a compareTo() method return title . compareTo ( s . getTitle ()); } }","title":"Comparable interface"},{"location":"java/hfj/ch16/#comparator-interface","text":"public interface Comparator T { ... Comparator v.s. Comparable Invoking the one-argument sort(List o) method means the list element\u2019s compareTo() method determines the order. So the elements in the list MUST implement the Comparable interface. Invoking sort(List o, Comparator c) means the list element\u2019s compareTo() method will NOT be called, and the Comparator \u2019s compare() method will be used instead. That means the elements in the list do NOT need to implement the Comparable interface. // Create a class that implements Comparator // its type parameter matches the type we re going to compare - in this case Song objects. class ArtistCompare implements Comparator Song { public int compare ( Song one , Song two ) { // We re letting the String variables (for artist) do the actual comparison. // since Strings already know how to alphabetize themselves. return one . getArtist (). compareTo ( two . getArtist ()); } } // Make an instance of the Comparator ArtistCompare artistCompare = new ArtistCompare (); // Invoke sort(), passing it the list and a reference to the new custom Comparator object. Collections . sort ( songList , artistCompare ); Uh-oh. The sorting all works, but now we have duplicates... We need a Set instead of a List .","title":"Comparator interface"},{"location":"java/hfj/ch16/#an-example-sortmountain","text":"import java.util.Collections ; import java.util.Comparator ; import java.util.LinkedList ; public class SortMountains { LinkedList Mountain mtn = new LinkedList Mountain (); public static void main ( String [] agrs ) { new SortMountains (). go (); } public void go () { mtn . add ( new Mountain ( Longs , 14255 )); mtn . add ( new Mountain ( Elbert , 14433 )); mtn . add ( new Mountain ( Maroon , 14156 )); mtn . add ( new Mountain ( Castle , 14265 )); System . out . println ( as entered:\\n + mtn ); NameCompare nc = new NameCompare (); Collections . sort ( mtn , nc ); System . out . println ( by name:\\n + mtn ); HeightCompare hc = new HeightCompare (); Collections . sort ( mtn , hc ); System . out . println ( by height:\\n + mtn ); } class NameCompare implements Comparator Mountain { @Override public int compare ( Mountain one , Mountain two ) { return one . getName (). compareTo ( two . getName ()); } } class HeightCompare implements Comparator Mountain { @Override public int compare ( Mountain one , Mountain two ) { return one . getHeight () - two . getHeight (); } } } class Mountain { private String name ; private int height ; public int getHeight () { return this . height ; } public String getName () { return this . name ; } public Mountain ( String name , int height ) { this . name = name ; this . height = height ; } public String toString () { return name + + Integer . toString ( height ); } }","title":"An Example: SortMountain"},{"location":"java/hfj/ch16/#collection","text":"","title":"Collection"},{"location":"java/hfj/ch16/#the-collection-api","text":"Note that the Map interface doesn't actually extend the interface, but Map is still considered part of the \"Collection Framework\" (\u96c6\u5408\u6846\u67b6\uff0calso known as the \"Collection API\").","title":"The Collection API"},{"location":"java/hfj/ch16/#object-equality","text":"What makes two objects equal? reference equality v.s. object equality. Reference equality : Two references that refer to the same object on the heap are equal. If you want to know if two references are really referring to the same object, use the == operator, which (remember) compares the bits in the variables. If both references point to the same object, the bits will be identical. Object equality : Two references, two objects on the heap, but the objects are considered meaningfully equivalent . If you want to treat two different objects as equal, you must override both the hashCode() and equals() methods inherited from class Object . Question How a HashSet checks for duplicates: hashCode() and equals() ? When you put an object into a HashSet , it uses the object's hashcode value to determine where to put the object in the Set . But it also compares the object's hashcode to the hashcode of all the other objects of the HashSet , and if there's no matching hashcode, the HashSet assumes that this new object is not a duplicate. If the HashSet finds a matching hashcode for two objects, the HashSet will then call one of the object's equals() methods to see if these hashcode-matched objects really are equal. The Song class with overriden hashcode and equals() . public class Song implements Comparable Song { ... public boolean equals ( Object aSong ) { Song s = ( Song ) aSong ; // Strings have an overriden equals() method. return getTitle (). equals ( s . getTitle ()); } public int hashCode () { //The String class has an overriden hashCode() method, so you can just return the result of calling hashCode() on the title. return title . hashCode (); } ... } // Instantiate a TreeSet TreeSet Song songSet = new TreeSet Song (); // We can add all the songs from the HashSet using addAll(). songSet . addAll ( songList ); Java Object Law For HashCode() and equals() : The API docs for class Object state the rules you MUST follow: If two objects are equal, they MUST have matching hashcodes. If two objects are equal, calling equals() on either object MUST return true. In other words, if ( a . equals ( b )) then ( b . equals ( a )) . If two objects have the same hashcode value, they are NOT required to be equal. But if they\u2019re equal, they MUST have the same hashcode value. So, if you override equals() , you MUST override hashCode() . The default behavior of hashCode() is to generate a unique integer for each object on the heap. So if you don\u2019t override hashCode() in a class, no two objects of that type can EVER be considered equal. The default behavior of equals() is to do an == comparison. In other words, to test whether the two references refer to a single object on the heap. So if you don\u2019t override equals() in a class, no two objects can EVER be considered equal since references to two different objects will always contain a different bit pattern. a.equals(b) must also mean that a.hashCode() == b.hashCode() But a.hashCode() == b.hashCode() does NOT have to mean a.equals(b)","title":"Object equality"},{"location":"java/hfj/ch16/#how-treesets-sort","text":"To use a TreeSet , one of these things must be true: The elements in the list must be of a type that implements Comparable . You use the TreeSet \u2019s overloaded constructor that takes a Comparator . import java.util.Comparator ; import java.util.TreeSet ; class BookCompare implements Comparator Book { public int compare ( Book one , Book two ) { return ( one . title . compareTo ( two . title )); } } public class Book implements Comparable { String title ; public Book ( String t ) { title = t ; } public int compareTo ( Object b ) { Book book = ( Book ) b ; return ( title . compareTo ( book . title )); } public String toString () { return title ; } public static void main ( String [] args ) { Book b1 = new Book ( How Cats Work ); Book b2 = new Book ( Remix your Body ); Book b3 = new Book ( Finding Emo ); BookCompare bCompare = new BookCompare (); TreeSet Book tree = new TreeSet Book ( bCompare ); tree . add ( new Book ( How Cats Work )); tree . add ( new Book ( Finding Emo )); tree . add ( new Book ( Remix your Body )); System . out . println ( tree ); } // end main }","title":"How TreeSets sort"},{"location":"java/hfj/ch16/#polymorphism-and-generics","text":"","title":"Polymorphism and Generics"},{"location":"java/hfj/ch16/#a-problem-with-polymorphism","text":"TestGenerics1 shows how polymorphism works with regular arrays. Because of polymorphism, the compiler let us pass a Dog array to a method with an Animal array argument. However, the ArrayList Animal argument WILL NOT accept an ArrayList Dog , as TestGenerics3 shows . Testgenerics1 public class TestGenerics1 { //If a method argument is an array of Animals, it will also take an array of any Animal subtype. //In other words, if a method is declared as: void foo(Animal[] a) { } // Assuming Dog extends Animal, you are free to call both: foo(anAnimalArray); foo(aDogArray); public static void main ( String [] args ) { new TestGenerics1 (). go (); } public void go () { // Declare and create an Animal array, that holds both dogs and cats. Animal [] animals = { new Dog (), new Cat (), new Dog ()}; // Declare and create a Dog array, that holds only Dogs // (the compiler won\u2019t let you put a Cat in). Dog [] dogs = { new Dog (), new Dog (), new Dog ()}; takeAnimals ( animals ); takeAnimals ( dogs ); // } // The crucial point is that the takeAnimals() method can take an Animal[] or a Dog[] // Since Dog IS-A Animal. public void takeAnimals ( Animal [] animals ){ for ( Animal a : animals ) { a . eat (); } // end for } // end takeAnimals } // end class Testgenerics3 import java.util.ArrayList ; public class TestGenerics3 extends TestGenerics1 { @Override public void go () { ArrayList Animal animals = new ArrayList Animal (); animals . add ( new Dog ()); animals . add ( new Cat ()); animals . add ( new Dog ()); takeAnimals ( animals ); // we know this works fine // Make a Dog ArrayList, and put a couple Dog in. ArrayList Dog dogs = new ArrayList Dog (); dogs . add ( new Dog ()); dogs . add ( new Dog ()); // Will this work now that we change from Animal[] to ArrayList Animal takeAnimals ( dogs ); } public void takeAnimals ( ArrayList Animal animals ) { for ( Animal a : animals ) { a . eat (); } } // end method } ... blank line ... If you declare a method to take ArrayList Animal , it can take ONLY an ArrayList Animal , not ArrayList or ArrayList Cat . Question: why they won\u2019t let you pass a ArrayList Dog into a method that takes an ArrayList Animal ? The reason is to stop you from possibly putting a Cat in what was actually a Dog list. public void takeAnimals ( ArrayList Animal animals ) { //Yikes!! We just stuck a Cat in what might be Dogs-only ArrayList. animals . add ( new Cat ()); } Question: Why does it work with arrays?? Because array types are checked again at runtime, but collection type checks happen only when you compile. public void go () { Dog [] dogs = { new Dog (), new Dog (), new Dog ()}; takeAnimals ( dogs ); } public void takeAnimals ( Animal [] animals ) { // We put a new Cat into a Dog array. // The compiler allowed i. // But, JVM stopped it, throw an Exception during run. animals [ 0 ] = new Cat (); }","title":"A problem with polymorphism"},{"location":"java/hfj/ch16/#generic-wildcards","text":"QUESTION: Wouldn\u2019t it be dreamy if there were a way to still use polymorphic collection types as method arguments, so that my veterinary program could take Dog lists and Cat lists? There is a way to create a method argument that can accept an ArrayList of any Animal subtype. The simplest way is to use a wildcard . public void takeAnimals ( ArrayList ? extends Animal animals ) { for ( Animal a : animals ) { a . eat (); } When you use a wildcard in your method argument, the compiler will STOP you from doing anything that could hurt the list referenced by the method parameter: You can still invoke methods on the elements in the list, but you cannot add elements to the list. In other words, you can do things with the list elements, but you can\u2019t put new things in the list. So you\u2019re safe at runtime, because the compiler won\u2019t let you do anything that might be horrible at runtime. So, this is OK inside takeAnimals() : for ( Animal a : animals ) { a . eat (); } But THIS would not compile: animals . add ( new Cat ()); Two syntax for wildcard: // the results are the same public T extends Animal void takeThing ( ArrayList T list ) public void takeThing ( ArrayList ? extends Animal list ) Bounded Wildcards: ? super/extends T : The syntax ? super T denotes an unknown type that is a supertype of T (or T itself; remember that the supertype relation is reflexive). The syntax ? extends T denotes an unknown type that is a subtype of T.","title":"Generic wildcards"},{"location":"java/hfj/ch16/#generic-array","text":"For historical and technical reasons, generic array creation is disallowed in Java . Instead, we need to use a cast: a = new Item [ cap ] // error a = ( Item []) new Object [ cap ] // use a cast","title":"Generic array"},{"location":"java/hfj/ch17/","text":"Chapter 17 Packages, Jars and Deployment 1 Java deployment Deployment options Local : The entire application runs on the end-user\u2019s computer, as a stand-alone, probably GUI, program, deployed as an executable JAR (we\u2019ll look at JAR in a few pages.) Combination of local and remote : The application is distributed with a client portion running on the user\u2019s local system, connected to a server where other parts of the application are running. Remote : The entire Java application runs on a server system, with the client accessing the system through some non-Java means, probably a web browser. JAR A JAR file is a J ava AR chive. It's based on the pkzip file format, and it lets you bundle all your classes. How do you get it to run? You make the JAR executable . An executable JAR means the end-user doesn't have to pull the class files out before running the program. The user can run the app while the class files are still in the JAR. The trick is to create a manifest file, that goes in the JAR and holds information about the files in the JAR. The manifest file must tell the JVM which class has the main() method ! Making an executable JAR : Make sure all of your class files are in the classes directory Create a manifest.txt file that states which class has the main() method Make a text file named manifest.txt that has a one line: Main-Class: MyApp Press the return key after typing the MainClass line, or your manifest may not work correctly. Put the manifest file into the \u201cclasses\u201d directory. Run the jar tool to create a JAR file that contains everything in the classes directory, plus the manifest. %cd MiniProject/classes %jar -cvmf manifest.txt app1.jar *.class OR %jar -cvmf manifest.txt app1.jar MyApp.class JAR in IntelliJ IDEA Create Artifact: go to File-Project Structure , add new Artifact. Add new manifest file Add resources: click +, and select file you want to add. Build: On the main menu, choose Build | Build Artifact. From the drop-down list, select the desired artifact of the type JAR. Run: Open the Run/Debug Configurations dialog (e.g. Run | Edit Configurations). Click + and select JAR Application. NOTE: \u4e0d\u8981\u4f7f\u7528File\u6765\u5b9a\u4f4d\u6587\u4ef6\uff0c\u4f7f\u7528 InputStream stream = Thread . currentThread (). getContextClassLoader (). getResourceAsStream ( file-to-add ); \u6765\u83b7\u53d6\u6587\u4ef6\u3002 Package Put your classes in packages, because packages prevent class name conflicts. Sun strongly suggests a package naming convention that greatly reduces that risk -- pretend every class with your reverse domain name. com.headfirstjava.projects.Chart To put your class in a package: Choose a package name Put a package statement in your class package com.head\ufb01rstjava; Set up a matching directory structure Keep your source code in a directory structure that matches the package structure, and you\u2019ll avoid a ton of painful headaches down the road. Compiling with the -d (directory) flag %javac - d .. / classes com / headfirstjava / PackageExercise . java Running code %java com . head \ufb01 rstjava . PackageExercise 2 Java Web Start With Java Web Start(JWS), you application is launched for the first time from a Web browser (get it? Web Start?) but it runs as a stand-alone application (well, almost), without the constraints of the browser. And once it's downloaded to the end-user's machine, it stays here. How Java Web Start works A Java Web Start demo from Oracle The client clicks on a Web page link to your JWS application (a .jnlp file). The Web server (HTTP) gets the request and sends back a .jnlp file (this is NOT the JAR). The .jnlp file is an XML document that states the name of the application\u2019s executable JAR file. Java Web Start (a small 'helper app' on the client) is started up by the browser. The JWS helper app reads the .jnlp file, and asks the server for the JAR file. The Web server \u2018serves\u2019 up the requested .jar file. Java Web Start gets the JAR and starts the application by calling the specific main() method (just like an executable JAR). The .jnlp file .jnlp (Java Network Launch Protocol) file describes your application. This is the file the JWS app reads and uses to find your JAR and launch the app. JNLP file for the demo !-- JNLP File for TextDemo -- jnlp spec= 1.0+ codebase= https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/TextFieldDemoProject href= TextFieldDemo.jnlp information title TextFieldDemo /title vendor The Java(tm) Tutorial /vendor homepage href= https://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html#TextFieldDemo / description TextFieldDemo /description description kind= short Uses a text field and a text area. Searches for a text typed in the text field and highlights the found text in the text area. /description offline-allowed/ // The user can run program without being connected to the internet. /information resources j2se version= 1.7+ / jar href= TextFieldDemo.jar / // the name of executable JAR! /resources application-desc main-class= components.TextFieldDemo / /jnlp The 'codebase' tag is where you specify the 'root' of where you web start stuff is on the server. The 'href' is the location of the .jnlp file relative to the codebase. Deploying with JWS Steps for making and deploying a Java Web Start app Make an executable JAR for your application Write a .jnlp file Place your JAR and .jnlp files on your Web server. Add a new mime type to your Web server. Create a Web page with a link to your .jnlp \ufb01le","title":"Chapter 17: Packages, Jars and Deployment"},{"location":"java/hfj/ch17/#chapter-17-packages-jars-and-deployment","text":"","title":"Chapter 17 Packages, Jars and Deployment"},{"location":"java/hfj/ch17/#1-java-deployment","text":"","title":"1 Java deployment"},{"location":"java/hfj/ch17/#deployment-options","text":"Local : The entire application runs on the end-user\u2019s computer, as a stand-alone, probably GUI, program, deployed as an executable JAR (we\u2019ll look at JAR in a few pages.) Combination of local and remote : The application is distributed with a client portion running on the user\u2019s local system, connected to a server where other parts of the application are running. Remote : The entire Java application runs on a server system, with the client accessing the system through some non-Java means, probably a web browser.","title":"Deployment options"},{"location":"java/hfj/ch17/#jar","text":"A JAR file is a J ava AR chive. It's based on the pkzip file format, and it lets you bundle all your classes. How do you get it to run? You make the JAR executable . An executable JAR means the end-user doesn't have to pull the class files out before running the program. The user can run the app while the class files are still in the JAR. The trick is to create a manifest file, that goes in the JAR and holds information about the files in the JAR. The manifest file must tell the JVM which class has the main() method ! Making an executable JAR : Make sure all of your class files are in the classes directory Create a manifest.txt file that states which class has the main() method Make a text file named manifest.txt that has a one line: Main-Class: MyApp Press the return key after typing the MainClass line, or your manifest may not work correctly. Put the manifest file into the \u201cclasses\u201d directory. Run the jar tool to create a JAR file that contains everything in the classes directory, plus the manifest. %cd MiniProject/classes %jar -cvmf manifest.txt app1.jar *.class OR %jar -cvmf manifest.txt app1.jar MyApp.class","title":"JAR"},{"location":"java/hfj/ch17/#jar-in-intellij-idea","text":"Create Artifact: go to File-Project Structure , add new Artifact. Add new manifest file Add resources: click +, and select file you want to add. Build: On the main menu, choose Build | Build Artifact. From the drop-down list, select the desired artifact of the type JAR. Run: Open the Run/Debug Configurations dialog (e.g. Run | Edit Configurations). Click + and select JAR Application. NOTE: \u4e0d\u8981\u4f7f\u7528File\u6765\u5b9a\u4f4d\u6587\u4ef6\uff0c\u4f7f\u7528 InputStream stream = Thread . currentThread (). getContextClassLoader (). getResourceAsStream ( file-to-add ); \u6765\u83b7\u53d6\u6587\u4ef6\u3002","title":"JAR in IntelliJ IDEA"},{"location":"java/hfj/ch17/#package","text":"Put your classes in packages, because packages prevent class name conflicts. Sun strongly suggests a package naming convention that greatly reduces that risk -- pretend every class with your reverse domain name. com.headfirstjava.projects.Chart To put your class in a package: Choose a package name Put a package statement in your class package com.head\ufb01rstjava; Set up a matching directory structure Keep your source code in a directory structure that matches the package structure, and you\u2019ll avoid a ton of painful headaches down the road. Compiling with the -d (directory) flag %javac - d .. / classes com / headfirstjava / PackageExercise . java Running code %java com . head \ufb01 rstjava . PackageExercise","title":"Package"},{"location":"java/hfj/ch17/#2-java-web-start","text":"With Java Web Start(JWS), you application is launched for the first time from a Web browser (get it? Web Start?) but it runs as a stand-alone application (well, almost), without the constraints of the browser. And once it's downloaded to the end-user's machine, it stays here.","title":"2 Java Web Start"},{"location":"java/hfj/ch17/#how-java-web-start-works","text":"A Java Web Start demo from Oracle The client clicks on a Web page link to your JWS application (a .jnlp file). The Web server (HTTP) gets the request and sends back a .jnlp file (this is NOT the JAR). The .jnlp file is an XML document that states the name of the application\u2019s executable JAR file. Java Web Start (a small 'helper app' on the client) is started up by the browser. The JWS helper app reads the .jnlp file, and asks the server for the JAR file. The Web server \u2018serves\u2019 up the requested .jar file. Java Web Start gets the JAR and starts the application by calling the specific main() method (just like an executable JAR).","title":"How Java Web Start works"},{"location":"java/hfj/ch17/#the-jnlp-file","text":".jnlp (Java Network Launch Protocol) file describes your application. This is the file the JWS app reads and uses to find your JAR and launch the app. JNLP file for the demo !-- JNLP File for TextDemo -- jnlp spec= 1.0+ codebase= https://docs.oracle.com/javase/tutorialJWS/samples/uiswing/TextFieldDemoProject href= TextFieldDemo.jnlp information title TextFieldDemo /title vendor The Java(tm) Tutorial /vendor homepage href= https://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html#TextFieldDemo / description TextFieldDemo /description description kind= short Uses a text field and a text area. Searches for a text typed in the text field and highlights the found text in the text area. /description offline-allowed/ // The user can run program without being connected to the internet. /information resources j2se version= 1.7+ / jar href= TextFieldDemo.jar / // the name of executable JAR! /resources application-desc main-class= components.TextFieldDemo / /jnlp The 'codebase' tag is where you specify the 'root' of where you web start stuff is on the server. The 'href' is the location of the .jnlp file relative to the codebase.","title":"The .jnlp file"},{"location":"java/hfj/ch17/#deploying-with-jws","text":"Steps for making and deploying a Java Web Start app Make an executable JAR for your application Write a .jnlp file Place your JAR and .jnlp files on your Web server. Add a new mime type to your Web server. Create a Web page with a link to your .jnlp \ufb01le","title":"Deploying with JWS"},{"location":"java/hfj/ch18/","text":"Chapter 18 Remote deploy with RMI The Java Remote Method Invocation (RMI) system allows an object running in one Java virtual machine to invoke methods on an object running in another Java virtual machine. Java Tutorial RMI client and server helpers A design for remote method calls, Create four things: server, client, server helper, client helper Create client and server apps. The server app is the remote service that has an object with the method that the client wants to invoke. Create client and server helpers . They ll handle all the low-level networking and I/O details so your client and service can pretend like they re in the same heap. The role of the 'helpers': the client calls a method on the client helper, as if the client helper were the actual service. The client helper is a proxy for the Real Thing . Your client object gets to act like it s making remote method calls. But what it s really doing is calling methods on a heap-local 'proxy' object that handles all the low-level details of Sockets and streams. How the method call happens Client object calls doBigThing() on the client helper object Client helper packages up information about the call (arguments, method name, etc.) and ships it over the network to the service helper. Service helper unpacks the information from the client helper, finds out which method to call (and on which object) and invokes the real method on the real service object. In RMI, the client helper is a stub and the server helper is a skeleton . Making the Remote Service Make a Remote Interface Make a Remote Implementation Generate the stubs and ske****letons using rmic Start the RMI registry (rmiregistry) Start the remote service 2 Servlet Servlets are Java programs that run on (and with) an HTTP web server. When a client uses a web browser to interact with a web page, a request is sent back to the web server. If the request needs the help of a Java servlet, the web server runs the servlet code. Jini","title":"Chapter 18: Remote deploy with RMI"},{"location":"java/hfj/ch18/#chapter-18-remote-deploy-with-rmi","text":"The Java Remote Method Invocation (RMI) system allows an object running in one Java virtual machine to invoke methods on an object running in another Java virtual machine. Java Tutorial","title":"Chapter 18 Remote deploy with RMI"},{"location":"java/hfj/ch18/#rmi","text":"","title":"RMI"},{"location":"java/hfj/ch18/#client-and-server-helpers","text":"A design for remote method calls, Create four things: server, client, server helper, client helper Create client and server apps. The server app is the remote service that has an object with the method that the client wants to invoke. Create client and server helpers . They ll handle all the low-level networking and I/O details so your client and service can pretend like they re in the same heap. The role of the 'helpers': the client calls a method on the client helper, as if the client helper were the actual service. The client helper is a proxy for the Real Thing . Your client object gets to act like it s making remote method calls. But what it s really doing is calling methods on a heap-local 'proxy' object that handles all the low-level details of Sockets and streams.","title":"client and server helpers"},{"location":"java/hfj/ch18/#how-the-method-call-happens","text":"Client object calls doBigThing() on the client helper object Client helper packages up information about the call (arguments, method name, etc.) and ships it over the network to the service helper. Service helper unpacks the information from the client helper, finds out which method to call (and on which object) and invokes the real method on the real service object. In RMI, the client helper is a stub and the server helper is a skeleton .","title":"How the method call happens"},{"location":"java/hfj/ch18/#making-the-remote-service","text":"Make a Remote Interface Make a Remote Implementation Generate the stubs and ske****letons using rmic Start the RMI registry (rmiregistry) Start the remote service","title":"Making the Remote Service"},{"location":"java/hfj/ch18/#2-servlet","text":"Servlets are Java programs that run on (and with) an HTTP web server. When a client uses a web browser to interact with a web page, a request is sent back to the web server. If the request needs the help of a Java servlet, the web server runs the servlet code.","title":"2 Servlet"},{"location":"java/hfj/ch18/#jini","text":"","title":"Jini"},{"location":"java/hfj/ch2/","text":"Chapter 2 Classes and Objects Object Oriented What do you like about OO? Some people say... It helps me design in a more natural way. Things have a way of evolving. Not messing around with the code I've already tested, just to add a new feature. Reusing code in other applications. When I write a new class, I can make it flexible enough to be used in something new, later Class A class describes what an object knows (instance variables, \u5b9e\u4f8b\u53d8\u91cf) and what an object does (methods). What's the difference between a class and an object? A class is not an object. A class is the blueprint for an object. A class tells the JVM how to make an object of that particular type. Each object made from that class have its own values for the instance variables of that class. main method The two uses of main method: to test your real class to launch/start your Java application.","title":"Chapter 2: Classes and Objects"},{"location":"java/hfj/ch2/#chapter-2-classes-and-objects","text":"","title":"Chapter 2 Classes and Objects"},{"location":"java/hfj/ch2/#object-oriented","text":"What do you like about OO? Some people say... It helps me design in a more natural way. Things have a way of evolving. Not messing around with the code I've already tested, just to add a new feature. Reusing code in other applications. When I write a new class, I can make it flexible enough to be used in something new, later","title":"Object Oriented"},{"location":"java/hfj/ch2/#class","text":"A class describes what an object knows (instance variables, \u5b9e\u4f8b\u53d8\u91cf) and what an object does (methods). What's the difference between a class and an object? A class is not an object. A class is the blueprint for an object. A class tells the JVM how to make an object of that particular type. Each object made from that class have its own values for the instance variables of that class.","title":"Class"},{"location":"java/hfj/ch2/#main-method","text":"The two uses of main method: to test your real class to launch/start your Java application.","title":"main method"},{"location":"java/hfj/ch3/","text":"Chapter 3 Primitives and references Variables must always be declared with a name and a type . Variables come in two flavors: primitive and reference . Variables can be used in many places: as object state: instance variables variables declared within a method: local variables values sent to a method by the calling code: arguments values sent back to the caller of the method: return types Naming You can name a class, method, or variable according the following rules (the real rules are sightly more flexible, but these will keep you safe: It must start with a letter, underscore (_), or dollar sign ($). You can t start a name with a number. After the first character, you can use numbers as well. Just don t start it with a number. It can be anything you like, subject to those two rules, just so long as it isn t one of Java s reserved words. Primitive Variable A primitive variable value is the bits representing the value. Primitives hold fundamental values. Each primitive variable has a fixed number of bits. Reference variable A reference variable value is the bits representing a way to access an object on the heap. The only way you can access an object is through a reference variable. It doesn t hold the object itself, but it holds something like a pointer. Or an address. A reference variable is like a remote control. Using the dot operator( . ) on a reference variable is like pressing a button on the remote control to access a method or instance variables. A reference variable has a value of null when it is not referencing any object. The three steps of object declaration, creation and assignment . (e.g. Dog myDog = new Dog() ); declare a reference variable: tell the JVM to allocate space for a reference variable, and names that variable myDog create an object: tells the JCM to allocate space for a new Dog object on the heap. Assigns the object to the reference variable. The size of reference variables: All references for a given JVM will be the same size regardless of the objects they reference, but each JVM might have a different way of representing reference, so references on one JVM may be smaller or larger than references on another JVM. Array An array is like a tray of cups: Declare an int array variable. An array variable is a remote control to an array object. int [] nums ; Create a new int array with a length of 7, and assign it to the previously-declared int[] variable nums. nums = new int [ 7 ]; Give each element in the array an int value. nums [ 0 ] = 6 ; An array is always an object, even if the array is declared to hold primitives. Every element in an array is just a variable. If you want to initialize an array, try using Array Initializer: int [] data = { 10 , 20 , 30 , 40 , 50 , 60 , 71 , 80 , 90 , 91 }; // or int [] data ; data = new int [] { 10 , 20 , 30 , 40 , 50 , 60 , 71 , 80 , 90 , 91 };","title":"Chapter 3: Primitives and References"},{"location":"java/hfj/ch3/#chapter-3-primitives-and-references","text":"Variables must always be declared with a name and a type . Variables come in two flavors: primitive and reference . Variables can be used in many places: as object state: instance variables variables declared within a method: local variables values sent to a method by the calling code: arguments values sent back to the caller of the method: return types","title":"Chapter 3 Primitives and references"},{"location":"java/hfj/ch3/#naming","text":"You can name a class, method, or variable according the following rules (the real rules are sightly more flexible, but these will keep you safe: It must start with a letter, underscore (_), or dollar sign ($). You can t start a name with a number. After the first character, you can use numbers as well. Just don t start it with a number. It can be anything you like, subject to those two rules, just so long as it isn t one of Java s reserved words.","title":"Naming"},{"location":"java/hfj/ch3/#primitive-variable","text":"A primitive variable value is the bits representing the value. Primitives hold fundamental values. Each primitive variable has a fixed number of bits.","title":"Primitive Variable"},{"location":"java/hfj/ch3/#reference-variable","text":"A reference variable value is the bits representing a way to access an object on the heap. The only way you can access an object is through a reference variable. It doesn t hold the object itself, but it holds something like a pointer. Or an address. A reference variable is like a remote control. Using the dot operator( . ) on a reference variable is like pressing a button on the remote control to access a method or instance variables. A reference variable has a value of null when it is not referencing any object. The three steps of object declaration, creation and assignment . (e.g. Dog myDog = new Dog() ); declare a reference variable: tell the JVM to allocate space for a reference variable, and names that variable myDog create an object: tells the JCM to allocate space for a new Dog object on the heap. Assigns the object to the reference variable. The size of reference variables: All references for a given JVM will be the same size regardless of the objects they reference, but each JVM might have a different way of representing reference, so references on one JVM may be smaller or larger than references on another JVM.","title":"Reference variable"},{"location":"java/hfj/ch3/#array","text":"An array is like a tray of cups: Declare an int array variable. An array variable is a remote control to an array object. int [] nums ; Create a new int array with a length of 7, and assign it to the previously-declared int[] variable nums. nums = new int [ 7 ]; Give each element in the array an int value. nums [ 0 ] = 6 ; An array is always an object, even if the array is declared to hold primitives. Every element in an array is just a variable. If you want to initialize an array, try using Array Initializer: int [] data = { 10 , 20 , 30 , 40 , 50 , 60 , 71 , 80 , 90 , 91 }; // or int [] data ; data = new int [] { 10 , 20 , 30 , 40 , 50 , 60 , 71 , 80 , 90 , 91 };","title":"Array"},{"location":"java/hfj/ch4/","text":"Chapter 4 Methods use instance variables 1 Methods A class define what an object knows and what an object does . Things an object knows are its instance variables (state), things an object does are its methods (behavior). Method Parameters A method uses parameters . A caller passes arguments . Arguments are the things you pass into the methods. If a method takes a parameters, you must pass it something. Methods can return values. Every method is declared is declared with a return type. If you declare a method to return a value, you must return a value of the declared type or a value that is compatible with the declared type. Java is pass-by-value , which means pass-by-copy . Method Return Methods can return values. Every method is declared with a return type. A void return type means the method doesn't give anything back. If you declare a method to return a value, you must return a value of the declared type! (or a value that is compatible with the declared type.) 2 Getters and setters Getters and setters let you, well, get and set things . A Getter's sole purpose in life is to send back, as a return value, the value of whatever it is that particular Getter is supposed to be Getting. 3 Encapsulation By forcing everybody to call a setter method, we can protect variables from unacceptable changes. theCat . height = 0 //yikes! we can t let this happen public void setHeight ( int ht ){ if ( ht 9 ){ // we put in checks to guarantee a minimum cat height. height = ht ; } } An encapsulation starter rule of thumb: mark your instances variables private , and provide public getters and setters for access control. Encapsulations puts a force-field around instance variables, so nobody can set them to something inappropriate . The point to setters (and getters, too) is that you can change your mind later, without breaking anybody else s code ! In object oriented programming languages, encapsulation is used to refer to one of two related but distinct notions, and sometimes to the combination thereof: (1) A language mechanism for restricting direct access to some of the object's components.(2) A language construct that facilitates the bundling of data with the methods operating on that data. [ wiki ] Advantages of Encapsulation : Data Hiding : The user will have no idea about the inner implementation of the class. It will not be visible to the user that how the class is storing values in the variables. He only knows that we are passing the values to a setter method and variables are getting initialized with that value. Increased Flexibility : We can make the variables of the class as read-only or write-only depending on our requirement. If we wish to make the variables as read-only then we have to omit the setter methods like setName() , setAge() etc. from the above program or if we wish to make the variables as write-only then we have to omit the get methods like getName( ), getAge() etc. from the above program Reusability : Encapsulation also improves the re-usability and easy to change with new requirements. Testing code is easy : Encapsulated code is easy to test for unit testing. class GoodDog { private int size ; //Make the instance variable private public int getSize () { // make the getter methods public return size ; } public void setSize ( int s ) { // make the setter methods public size = s ; } // even though the methods don t really add new functionality, // the cool thing is that you can change your mind later. // you can come back and make a method safer, faster, better void bark () { if ( size 60 ) { System . out . println ( ldquo ; Wooof ! Wooof ! rdquo ;); } else if ( size 14 ) { System . out . println ( ldquo ; Ruff ! Ruff ! rdquo ;); } else { System . out . println ( ldquo ; Yip ! Yip ! rdquo ;); } } } 4 Instance variables You don't have to initialize instance variables, because they always have a default value: intergers: 0 floating points: 0.0 booleans: false references: null Instance v.s. local variables The difference between instance and local variables: Instance variables are declared inside a class but not within a method. Local variables are declares within a method . Local variables must be initialized before use. class AddThing { int a ; // instance variable: it have a default value. int b = 12 ; // instance variable public int add () { int total = a + b ; // local variable: it must be initialized before use! return total ; } } 5 Comparing variables If you want to know if the value of two objects are equal , you need the .equal () method. // These two have the same value new String ( test ). equals ( test ) // -- true To see if two reference are the same (which means they refer to the same object on the heap) use the == operator. Foo a = new Foo (); Foo b = new Foo (); Foo c = a ; if ( a == b ) { // false } if ( a == c ) { // true } if ( b == c ) { // false } To compare two primitives, use the == operator. Operator == doesn't care about the size of the variable, so all the extra zeros on the left end don't matter. int a = 3 ; byte b = 3 ; if ( a == b ){ //true} Summary == tests for reference equality (whether they are the same object). .equals () tests for value equality (whether they are logically \"equal\").","title":"Chapter 4: Methods use Instance Variables"},{"location":"java/hfj/ch4/#chapter-4-methods-use-instance-variables","text":"","title":"Chapter 4 Methods use instance variables"},{"location":"java/hfj/ch4/#1-methods","text":"A class define what an object knows and what an object does . Things an object knows are its instance variables (state), things an object does are its methods (behavior).","title":"1 Methods"},{"location":"java/hfj/ch4/#method-parameters","text":"A method uses parameters . A caller passes arguments . Arguments are the things you pass into the methods. If a method takes a parameters, you must pass it something. Methods can return values. Every method is declared is declared with a return type. If you declare a method to return a value, you must return a value of the declared type or a value that is compatible with the declared type. Java is pass-by-value , which means pass-by-copy .","title":"Method Parameters"},{"location":"java/hfj/ch4/#method-return","text":"Methods can return values. Every method is declared with a return type. A void return type means the method doesn't give anything back. If you declare a method to return a value, you must return a value of the declared type! (or a value that is compatible with the declared type.)","title":"Method Return"},{"location":"java/hfj/ch4/#2-getters-and-setters","text":"Getters and setters let you, well, get and set things . A Getter's sole purpose in life is to send back, as a return value, the value of whatever it is that particular Getter is supposed to be Getting.","title":"2 Getters and setters"},{"location":"java/hfj/ch4/#3-encapsulation","text":"By forcing everybody to call a setter method, we can protect variables from unacceptable changes. theCat . height = 0 //yikes! we can t let this happen public void setHeight ( int ht ){ if ( ht 9 ){ // we put in checks to guarantee a minimum cat height. height = ht ; } } An encapsulation starter rule of thumb: mark your instances variables private , and provide public getters and setters for access control. Encapsulations puts a force-field around instance variables, so nobody can set them to something inappropriate . The point to setters (and getters, too) is that you can change your mind later, without breaking anybody else s code ! In object oriented programming languages, encapsulation is used to refer to one of two related but distinct notions, and sometimes to the combination thereof: (1) A language mechanism for restricting direct access to some of the object's components.(2) A language construct that facilitates the bundling of data with the methods operating on that data. [ wiki ] Advantages of Encapsulation : Data Hiding : The user will have no idea about the inner implementation of the class. It will not be visible to the user that how the class is storing values in the variables. He only knows that we are passing the values to a setter method and variables are getting initialized with that value. Increased Flexibility : We can make the variables of the class as read-only or write-only depending on our requirement. If we wish to make the variables as read-only then we have to omit the setter methods like setName() , setAge() etc. from the above program or if we wish to make the variables as write-only then we have to omit the get methods like getName( ), getAge() etc. from the above program Reusability : Encapsulation also improves the re-usability and easy to change with new requirements. Testing code is easy : Encapsulated code is easy to test for unit testing. class GoodDog { private int size ; //Make the instance variable private public int getSize () { // make the getter methods public return size ; } public void setSize ( int s ) { // make the setter methods public size = s ; } // even though the methods don t really add new functionality, // the cool thing is that you can change your mind later. // you can come back and make a method safer, faster, better void bark () { if ( size 60 ) { System . out . println ( ldquo ; Wooof ! Wooof ! rdquo ;); } else if ( size 14 ) { System . out . println ( ldquo ; Ruff ! Ruff ! rdquo ;); } else { System . out . println ( ldquo ; Yip ! Yip ! rdquo ;); } } }","title":"3 Encapsulation"},{"location":"java/hfj/ch4/#4-instance-variables","text":"You don't have to initialize instance variables, because they always have a default value: intergers: 0 floating points: 0.0 booleans: false references: null","title":"4 Instance variables"},{"location":"java/hfj/ch4/#instance-vs-local-variables","text":"The difference between instance and local variables: Instance variables are declared inside a class but not within a method. Local variables are declares within a method . Local variables must be initialized before use. class AddThing { int a ; // instance variable: it have a default value. int b = 12 ; // instance variable public int add () { int total = a + b ; // local variable: it must be initialized before use! return total ; } }","title":"Instance v.s. local variables"},{"location":"java/hfj/ch4/#5-comparing-variables","text":"If you want to know if the value of two objects are equal , you need the .equal () method. // These two have the same value new String ( test ). equals ( test ) // -- true To see if two reference are the same (which means they refer to the same object on the heap) use the == operator. Foo a = new Foo (); Foo b = new Foo (); Foo c = a ; if ( a == b ) { // false } if ( a == c ) { // true } if ( b == c ) { // false } To compare two primitives, use the == operator. Operator == doesn't care about the size of the variable, so all the extra zeros on the left end don't matter. int a = 3 ; byte b = 3 ; if ( a == b ){ //true} Summary == tests for reference equality (whether they are the same object). .equals () tests for value equality (whether they are logically \"equal\").","title":"5 Comparing variables"},{"location":"java/hfj/ch5/","text":"Chapter 5 Writing a Program prep code : a form of pseudocode, to help you focus on the logic without stressing about syntax. \u4e00\u79cd\u4f2a\u4ee3\u7801 test code : a class or methods that will test the real code and validate that it's doing the right thing. \u6d4b\u8bd5\u4ee3\u7801 real code : the actual implementation of the class. \u771f\u5b9e\u4ee3\u7801 Extreme Programming \uff08 \u6781\u9650\u7f16\u7a0b ): Write the test code first Make small, but frequent, releases * Develop in iteration cycles.","title":"Chapter 5: Writing a Program"},{"location":"java/hfj/ch5/#chapter-5-writing-a-program","text":"prep code : a form of pseudocode, to help you focus on the logic without stressing about syntax. \u4e00\u79cd\u4f2a\u4ee3\u7801 test code : a class or methods that will test the real code and validate that it's doing the right thing. \u6d4b\u8bd5\u4ee3\u7801 real code : the actual implementation of the class. \u771f\u5b9e\u4ee3\u7801 Extreme Programming \uff08 \u6781\u9650\u7f16\u7a0b ): Write the test code first Make small, but frequent, releases * Develop in iteration cycles.","title":"Chapter 5 Writing a Program"},{"location":"java/hfj/ch6/","text":"Chapter 6 Get to know the Java API ArrayList ArrayList is a class in the core Java library (the API). boolean add ( Object elem ) : Adds the objects parameter to the list(return true ). boolean remove ( int index ) : Removes the object at the index parameter. Returns true if the element was in the list. boolean remove ( Object elem ) : Removes this object(if it's in the ArrayList). boolean contains ( Object elem ) : Returns true if there's a match for the object parameter. boolean isEmpty () : Returns true if the list has no elements int indexOf ( Object elem ) : Returns either the index of the object parameter, or -1 size () : Return the number of elements currently in the list. Object get ( int index ) : Return the object currently at the index parameter. You have to know the full name of the class you want to use in your code. You have two options: Import: put an import statement at the top of your source code file: import java.util.ArrayList Type: type the full name everywhere in your code. Each time you use it. java . util . ArrayList Dog list = new java . util . ArrayList Dog (); Import An import is not the same as include in C. So the import doesn't make a class bigger. An import statement saves you from typing . That's really it. It simply give Java the full name of a class . You must tell Java the full name of every class you use, unless that class is in the java.lang package.","title":"Chapter 6: Get to Know the Java API"},{"location":"java/hfj/ch6/#chapter-6-get-to-know-the-java-api","text":"","title":"Chapter 6 Get to know the Java API"},{"location":"java/hfj/ch6/#arraylist","text":"ArrayList is a class in the core Java library (the API). boolean add ( Object elem ) : Adds the objects parameter to the list(return true ). boolean remove ( int index ) : Removes the object at the index parameter. Returns true if the element was in the list. boolean remove ( Object elem ) : Removes this object(if it's in the ArrayList). boolean contains ( Object elem ) : Returns true if there's a match for the object parameter. boolean isEmpty () : Returns true if the list has no elements int indexOf ( Object elem ) : Returns either the index of the object parameter, or -1 size () : Return the number of elements currently in the list. Object get ( int index ) : Return the object currently at the index parameter. You have to know the full name of the class you want to use in your code. You have two options: Import: put an import statement at the top of your source code file: import java.util.ArrayList Type: type the full name everywhere in your code. Each time you use it. java . util . ArrayList Dog list = new java . util . ArrayList Dog ();","title":"ArrayList"},{"location":"java/hfj/ch6/#import","text":"An import is not the same as include in C. So the import doesn't make a class bigger. An import statement saves you from typing . That's really it. It simply give Java the full name of a class . You must tell Java the full name of every class you use, unless that class is in the java.lang package.","title":"Import"},{"location":"java/hfj/ch7/","text":"Chapter 7 Inheritance and polymorphism 1 Overriding Overriding (\u91cd\u5199) means that a subclass redefines one of its inherited methods when it needs to change or extend the behavior of that method. In the example as follows, the Amoeba class overrides the methods of the Shape class. Then at runtime, the JVM knows exactly which rotate() method to run when someone tells the Amoeba to rotate. If you want to protect a specific method from being overridden, mark the method with the final modifier. \u5982\u679c\u4f60\u60f3\u8981\u9632\u6b62\u7279\u5b9a\u7684\u65b9\u6cd5\u88ab\u8986\u76d6\uff0c\u53ef\u4ee5\u5c06\u8be5\u65b9\u6cd5\u6807\u8bc6\u6210final\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u8986\u76d6\u3002 Rules for overriding : Arguments must be the same , and return types must be compatible . \u53c2\u6570\u5fc5\u987b\u8981\u4e00\u6837\uff0c\u4e14\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u8981\u517c\u5bb9. The method can't be less accessible(e.g change from public to private). \u4e0d\u80fd\u964d\u4f4e\u65b9\u6cd5\u7684\u8bbf\u95ee\u6743\u9650 2 Inheritance When one class inherits from another, the subclass inherits from the superclass. In Java, we say that the subclass extends the superclass (\u5b50\u7c7b\u7ee7\u627f\u81ea\u7236\u7c7b)\u3002 A class that inherits from another is called a subclass (\u5b50\u7c7b). A class that provides attributes and methods for inheritance by subclasses is called a superclass (\u7236\u7c7b). The subclass inherits the instance variables and methods of the superclass. The subclass can add new methods and instance variables of its own, and it can override the methods it inherits from the superclass. Instance variables are not overridden because they don't need to be. They don't define any special behavior. Advantage : Inheritance avoids duplicating code in subclasses. Inheritances lets you guarantee that all classes grouped under a certain supertype have all the methods that the supertype has. In other words, you define a common protocol for a set of classes related through inheritance. An inheritance example: public class Doctor { boolean worksAtHospital ; void treatPatient () { // perform a checkup } } public class FamilyDoctor extends Doctor { boolean makesHouseCalls ; void giveAdvice () { // give homespun advice } } public class Surgeon extends Doctor { void treatPatient () { // perform surgery } void makeIncision () { // make incision (yikes!) } } Using IS-A When you want to know if one thing should extend another, apply the IS-A test . If class B extends class A, class B IS-A class A. super In a subclass, what if I want to use BOTH the superclass version and my overriding subclass version of a method? In other words, I don't want to completely replace the superclass version, I just want to add more stuff to it. SOLUTION: In your subclass overriding method, you can call the superclass version using the keyword super . // this calls the inherited version on roam(), // then comes back to do your own subclass-specific code public void roam (){ super . roam (); //my own roam stuff } Using the super keyword to invoke a superclass's constructor Access Level Access levels (\u8bbf\u95ee\u6743\u9650) control who sees what , and are crucial to having well-designed, robust Java code. There are four access levels, moving from most restrictive to least, the four access levels are: prive, default, protected, public : public members are inherited. private members are not inherited. Java 8 Interface Change Java 8 interface changes include static methods and default methods in interfaces. Prior to Java 8, we could have only method declarations in the interfaces. But from Java 8, we can have default methods and static methods in the interfaces . 3 Polymorphism With polymorphism, the reference type can be a superclass of the actual object type . \u8fd0\u7528\u591a\u6001\u65f6\uff0c\u5f15\u7528\u7c7b\u578b\u53ef\u4ee5\u662f\u5b9e\u9645\u5bf9\u8c61\u7c7b\u578b\u7684\u7236\u7c7b\u3002 Animal [] animals = new Animal [ 3 ]; // You can put ANY subclass of Animal in the Animal array! animals [ 0 ] = new Dog (); // the reference and the object are different animals [ 1 ] = new Cat (); animals [ 2 ] = new Lion (); // You get to loop through the array and call one of the Animal-class methods, and every object does the right thing! for ( int i = 0 ; i animals . length ; i ++) { animals [ i ]. eat (); animals [ i ]. roam (); } You can have polymorphic arguments and return types. \u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u4e5f\u53ef\u4ee5\u591a\u6001\u3002 class Vet { // The Animal parameter can take ANY Animal type as the argument. public void giveShot ( Animal a ) { a . makeNoise (); } } class PetOwner { public void start () { Vet v = new Vet (); Dog d = new Dog (); Hippo h = new Hippo (); // The vet s giveShot() method can take any Animal you give it. // As long as the object you pass in as the argument is a subclass of Animal, // it ll work. v . giveShot ( d ); v . giveShot ( h ); } SO.... If I write my code using polymorphic arguments, where I declare the method parameter as a superclass type, I can pass in any subclass object at runtime. With polymorphism, you can write code that doesn't have to change when you introduce new subclass types into the program. \u901a\u8fc7\u591a\u6001\uff0c\u4f60\u5c31\u53ef\u4ee5\u7f16\u5199\u51fa\u5f15\u8fdb\u65b0\u578b\u5b50\u7c7b\u65f6\u4e5f\u4e0d\u5fc5\u4fee\u6539\u7684\u7a0b\u5e8f\u3002 CAN'T INHERIT There are three things that can prevent a class from being subclassed. A non-public class can be subclassed only by classes in the same package as the class. Using keyword modifier final to stop a class from being subclassed. \u4f7f\u7528 final \u4fee\u9970\u7b26\u963b\u6b62\u7c7b\u88ab\u7ee7\u627f\u3002 If a class has only private constructors, it can't be subclassed. \u5982\u679c\u7c7b\u53ea\u62e5\u6709 private \u7684\u6784\u9020\u7a0b\u5e8f\uff0c\u5b83\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002 4 Overloading Method overloading (\u65b9\u6cd5\u91cd\u8f7d) is nothing more than having two methods with the same name but different argument lists . \u65b9\u6cd5\u91cd\u8f7d\u5c31\u662f\u65b9\u6cd5\u540d\u79f0\u76f8\u540c\uff0c\u4f46\u53c2\u6570\u5217\u8868\u4e0d\u540c\u3002 Purpose: overloading lets you make multiple versions of a method, with different argument lists, for convenience to the callers. The return types can be different. You can't change only the return type. You can vary the access levels in any direction.","title":"Chapter 7: Inheritance and Polymorphism"},{"location":"java/hfj/ch7/#chapter-7-inheritance-and-polymorphism","text":"","title":"Chapter 7 Inheritance and polymorphism"},{"location":"java/hfj/ch7/#1-overriding","text":"Overriding (\u91cd\u5199) means that a subclass redefines one of its inherited methods when it needs to change or extend the behavior of that method. In the example as follows, the Amoeba class overrides the methods of the Shape class. Then at runtime, the JVM knows exactly which rotate() method to run when someone tells the Amoeba to rotate. If you want to protect a specific method from being overridden, mark the method with the final modifier. \u5982\u679c\u4f60\u60f3\u8981\u9632\u6b62\u7279\u5b9a\u7684\u65b9\u6cd5\u88ab\u8986\u76d6\uff0c\u53ef\u4ee5\u5c06\u8be5\u65b9\u6cd5\u6807\u8bc6\u6210final\u8868\u793a\u6ca1\u6709\u4efb\u4f55\u7684\u65b9\u6cd5\u53ef\u4ee5\u88ab\u8986\u76d6\u3002 Rules for overriding : Arguments must be the same , and return types must be compatible . \u53c2\u6570\u5fc5\u987b\u8981\u4e00\u6837\uff0c\u4e14\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u8981\u517c\u5bb9. The method can't be less accessible(e.g change from public to private). \u4e0d\u80fd\u964d\u4f4e\u65b9\u6cd5\u7684\u8bbf\u95ee\u6743\u9650","title":"1 Overriding"},{"location":"java/hfj/ch7/#2-inheritance","text":"When one class inherits from another, the subclass inherits from the superclass. In Java, we say that the subclass extends the superclass (\u5b50\u7c7b\u7ee7\u627f\u81ea\u7236\u7c7b)\u3002 A class that inherits from another is called a subclass (\u5b50\u7c7b). A class that provides attributes and methods for inheritance by subclasses is called a superclass (\u7236\u7c7b). The subclass inherits the instance variables and methods of the superclass. The subclass can add new methods and instance variables of its own, and it can override the methods it inherits from the superclass. Instance variables are not overridden because they don't need to be. They don't define any special behavior. Advantage : Inheritance avoids duplicating code in subclasses. Inheritances lets you guarantee that all classes grouped under a certain supertype have all the methods that the supertype has. In other words, you define a common protocol for a set of classes related through inheritance. An inheritance example: public class Doctor { boolean worksAtHospital ; void treatPatient () { // perform a checkup } } public class FamilyDoctor extends Doctor { boolean makesHouseCalls ; void giveAdvice () { // give homespun advice } } public class Surgeon extends Doctor { void treatPatient () { // perform surgery } void makeIncision () { // make incision (yikes!) } }","title":"2 Inheritance"},{"location":"java/hfj/ch7/#using-is-a","text":"When you want to know if one thing should extend another, apply the IS-A test . If class B extends class A, class B IS-A class A.","title":"Using IS-A"},{"location":"java/hfj/ch7/#super","text":"In a subclass, what if I want to use BOTH the superclass version and my overriding subclass version of a method? In other words, I don't want to completely replace the superclass version, I just want to add more stuff to it. SOLUTION: In your subclass overriding method, you can call the superclass version using the keyword super . // this calls the inherited version on roam(), // then comes back to do your own subclass-specific code public void roam (){ super . roam (); //my own roam stuff } Using the super keyword to invoke a superclass's constructor","title":"super"},{"location":"java/hfj/ch7/#access-level","text":"Access levels (\u8bbf\u95ee\u6743\u9650) control who sees what , and are crucial to having well-designed, robust Java code. There are four access levels, moving from most restrictive to least, the four access levels are: prive, default, protected, public : public members are inherited. private members are not inherited.","title":"Access Level"},{"location":"java/hfj/ch7/#java-8-interface-change","text":"Java 8 interface changes include static methods and default methods in interfaces. Prior to Java 8, we could have only method declarations in the interfaces. But from Java 8, we can have default methods and static methods in the interfaces .","title":"Java 8 Interface Change"},{"location":"java/hfj/ch7/#3-polymorphism","text":"With polymorphism, the reference type can be a superclass of the actual object type . \u8fd0\u7528\u591a\u6001\u65f6\uff0c\u5f15\u7528\u7c7b\u578b\u53ef\u4ee5\u662f\u5b9e\u9645\u5bf9\u8c61\u7c7b\u578b\u7684\u7236\u7c7b\u3002 Animal [] animals = new Animal [ 3 ]; // You can put ANY subclass of Animal in the Animal array! animals [ 0 ] = new Dog (); // the reference and the object are different animals [ 1 ] = new Cat (); animals [ 2 ] = new Lion (); // You get to loop through the array and call one of the Animal-class methods, and every object does the right thing! for ( int i = 0 ; i animals . length ; i ++) { animals [ i ]. eat (); animals [ i ]. roam (); } You can have polymorphic arguments and return types. \u53c2\u6570\u548c\u8fd4\u56de\u7c7b\u578b\u4e5f\u53ef\u4ee5\u591a\u6001\u3002 class Vet { // The Animal parameter can take ANY Animal type as the argument. public void giveShot ( Animal a ) { a . makeNoise (); } } class PetOwner { public void start () { Vet v = new Vet (); Dog d = new Dog (); Hippo h = new Hippo (); // The vet s giveShot() method can take any Animal you give it. // As long as the object you pass in as the argument is a subclass of Animal, // it ll work. v . giveShot ( d ); v . giveShot ( h ); } SO.... If I write my code using polymorphic arguments, where I declare the method parameter as a superclass type, I can pass in any subclass object at runtime. With polymorphism, you can write code that doesn't have to change when you introduce new subclass types into the program. \u901a\u8fc7\u591a\u6001\uff0c\u4f60\u5c31\u53ef\u4ee5\u7f16\u5199\u51fa\u5f15\u8fdb\u65b0\u578b\u5b50\u7c7b\u65f6\u4e5f\u4e0d\u5fc5\u4fee\u6539\u7684\u7a0b\u5e8f\u3002","title":"3 Polymorphism"},{"location":"java/hfj/ch7/#cant-inherit","text":"There are three things that can prevent a class from being subclassed. A non-public class can be subclassed only by classes in the same package as the class. Using keyword modifier final to stop a class from being subclassed. \u4f7f\u7528 final \u4fee\u9970\u7b26\u963b\u6b62\u7c7b\u88ab\u7ee7\u627f\u3002 If a class has only private constructors, it can't be subclassed. \u5982\u679c\u7c7b\u53ea\u62e5\u6709 private \u7684\u6784\u9020\u7a0b\u5e8f\uff0c\u5b83\u4e0d\u80fd\u88ab\u7ee7\u627f\u3002","title":"CAN'T INHERIT"},{"location":"java/hfj/ch7/#4-overloading","text":"Method overloading (\u65b9\u6cd5\u91cd\u8f7d) is nothing more than having two methods with the same name but different argument lists . \u65b9\u6cd5\u91cd\u8f7d\u5c31\u662f\u65b9\u6cd5\u540d\u79f0\u76f8\u540c\uff0c\u4f46\u53c2\u6570\u5217\u8868\u4e0d\u540c\u3002 Purpose: overloading lets you make multiple versions of a method, with different argument lists, for convenience to the callers. The return types can be different. You can't change only the return type. You can vary the access levels in any direction.","title":"4 Overloading"},{"location":"java/hfj/ch8/","text":"Chapter 8 Interfaces and Abstract Classes What's an interface? it's a 100% abstract class. What's an abstract class? it's a class that can't be instantiated. 1 Abstract classes Here's where it gets weird: Animal anim = new Animal (); There two are the same type, but what the heck does an Animal object look like? Some classes just should not be instantiated! How? By marking the class as abstract , the compiler will stop any code, anywhere, from ever creating an instance of that type. i.e. prevent a class from ever being instantiated. Making a class abstract before the class declaration: abstract class Caine extends Animal { public void roam () {} } When you're designing your class inheritance structure, you have to decide which classes are abstract and which are concrete . Concrete classes are those that are specific enough to be instantiated. A concrete class just means that it's OK to make objects of that type. An abstract class has virtually no use, no value, no purpose in life, unless it is extended. 2 Abstract methods An abstract method means the method must be overriden , whereas an abstract class means the class must be extended. There isn't any code that would make sense in the abstract method, you won't put in a method body. e.g. public abstract void eat () . If you declare an abstract method, you must mark the class abstract as well. You can't have an abstract method in a non-abstract class. You must implement all abstract methods. 3 The ultimate superclass: Object Every class in Java extends class Object . Class Object is the mother of all classes; it's the superclass of everything. Any class that doesn't explicitly extend another class, implicitly extends Object . Methods of Object class: equals () : tell you if two objects are considered equal. getClass () : Gives you back the class that object was instantiated from. hashCode () : Prints out a hashcode for the object toString () : Prints out a String message with the name of the class and some other number we rarely care about. Object is a non-abstract class because it's got method implementation code that all classes can inherit and use out-of-box, without having to override the methods. The Object class serves two main purpose: To act as a polymorphic type for methods that need to work on any class that you or anyone else makes \u4f5c\u4e3a\u65b9\u6cd5\u7684\u591a\u6001\u7c7b\u578b To provide real method code that all objects in Java need at runtime (and putting them in class Object means all other classes inherit them).\u63d0\u4f9bJava\u5728\u6267\u884c\u671f\u5806\u4efb\u4f55\u5bf9\u8c61\u90fd\u6709\u9700\u8981\u7684\u5b9e\u73b0\u65b9\u6cd5\u4ee3\u7801\u3002 4 Using polymorphic references of type Object has a price When you put an object into an ArrayList Dog , it goes in as a Dog, and comes out as a Dog: // Make an ArrayList declared to hold Dog objects. ArrayList Dog myDogArrayList = new ArrayList Dog (); // Make a Dog Dog aDog = new Dog (); // Add the Dog to the list myDogArrayList . add ( aDog ); //Assign the Dog from the list to a new Dog reference variable Dog d = myDogArrayList . get ( 0 ); Everything comes out of an ArrayList Object as a reference of type Object, regardless of what the actual object is. \u4efb\u4f55\u4ece ArrayList Object \u53d6\u51fa\u7684\u4e1c\u897f\u90fd\u4f1a\u88ab\u5f53\u4f5cObject\u7c7b\u578b\u7684\u5f15\u7528\uff0c\u800c\u4e0d\u7ba1\u5b83\u539f\u6765\u662f\u4ec0\u4e48\u3002 // make an ArrayList declared to hold any type of Object ArrayList Object myDogArrayList = new ArrayList object () // make a Dog Dog aDog = new Dog (); // Add the Dog to the list myDogArrayList . add ( aDog ); // No!! Won t compile!! the get() method returns type Object. // The compiler knows only that the object inherits from Object, // but it doesn t know it s a Dog!! Dog d = myDogArrayList . get ( 0 ) The compiler decides whether you can call a method based on the reference type , not the actual object type. Object o = al . get ( index ); // Class Object has a hashCode() method // so you can call that method on any object in Java int i = o . hashCode (); // Can t do this!! the Object class has no idea what it means to bark(). o . bark (); If you're sure the object is really a Dog, you can make a new Dog reference to it by copying the Object reference, and forcing that copy to go into a Dog reference variable, using a cast (Dog) . Object o = al . get ( index ); // cast the Object back to a Dog we know is there. Dog d = ( Dog ) o ; d . roam (); If you're not sure it's a Dog, you can use the instanceof operator to check. if ( o instanceof Dog ) { Dog d = ( Dog ) o ; } Note Java\u4e2d\u7684instanceof \u7b97\u7b26\u662f\u7528\u6765\u5728\u8fd0\u884c\u65f6\u6307\u51fa\u5bf9\u8c61\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002instanceof\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u6765\u6307\u51fa\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u8fd9\u4e2a\u7279\u5b9a\u7c7b\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 result = object instanceof class 5 Interface Questions: What if you want to add Dog some Pet behaviors? Option one: We take the easy path, and put pet method in class Animal. Pros: All the Animals will instantly inherit the pet behaviors. We won't have to touch the existing Animal subclasses at all. Cons: Some animals like lion, wolf are not a pet. Non-pet Animals running around with pet methods. Option two: We start with option one, putting the pet methods in class Animal, but we make the methods abstract. Pros: All classes must override the methods, but they can make the methods \"do-nothings\". Cons: Waste a lot of time to implement every concrete Animal subclasses. Options three: Put the pet methods Only in the classes where they belong. Pros: The methods are where they belong, and only where they belong. Cons: Firstly, you'd have to agree to a protocol, and all programmers of pet Animal classes now and in the future would have to know about the protocol. Secondly, you don't get to use polymorphism for the pet methods It looks like we need two superclasses at the top. It\u2019s called \" multiple inheritance \"(\u591a\u91cd\u7ee7\u627f) and it can be a Really Bad Thing. Because multiple inheritance has a problem known as The Deadly Diamond of Death (\u81f4\u547d\u7684\u6b7b\u4ea1\u7816\u77f3) Java\u7684\u65b9\u6848: Interface!!! A Java interface (\u63a5\u53e3) solves multiple inheritance problem by giving you much of the polymorphic benefits of multiple inheritance without the pain and suffering from the Deadly Diamond of Death. How? Surprisingly simple: make all the methods abstract A Java interface is like a 100% pure abstract class. To define an interface, use the keyword interface instead of class . //use the keyword interface instead of class public interface Pet {} To implement an interface, use the keyword implements followed by the interface name: // Use the keyword implements followed by the interface name. public class Dog extends Canine implements Pet {} A class can implement multiple interfaces! public class Dog extends Animal implements Pet , Saveable , Paintable {} Classes from different inheritance trees can implement the same interface. How do you know whether to make a class, subclass, an abstract class, or an interface? Make a class that doesn\u2019t extend anything (other than Object) when your new class doesn\u2019t pass the IS-A test for any other type. Make a subclass (in other words, extend a class) only when you need to make a more specific version of a class and need to override or add new behaviors. Use an abstract class when you want to define a template for a group of subclasses, and you have at least some implementation code that all subclasses could use. Make the class abstract when you want to guarantee that nobody can make objects of that type. Use an interface when you want to define a role that other classes can play, regardless of where those classes are in the inheritance tree. Note Abstract class vs Interface Type of methods : Interface can have only abstract methods. Abstract class can have abstract and non-abstract methods. Final Variables : Variables declared in a Java interface are by default final. An abstract class may contain non-final variables. Type of variables : Abstract class can have final, non-final, static and non-static variables. Interface has only static and final variables. Implementation : Abstract class can provide the implementation of interface. Interface can\u2019t provide the implementation of abstract class. Inheritance vs Abstraction : A Java interface can be implemented using keyword implements and abstract class can be extended using keyword extends . Multiple implementation : An interface can extend another Java interface only, an abstract class can extend another Java class and implement multiple Java interfaces. Accessibility of Data Members : Members of a Java interface are public by default. A Java abstract class can have class members like private, protected, etc. Note You can never instantiate an interface in java. However, you can refer to an object that implements an interface by the type of the interface. public interface A {}; class B implements A {}; public void functionC { A test = new B (); } Another example, commonly used as an anonymous implementation class, is as follows: Runnable r = new Runnable () { public void run (){ } }; Note To have a wider picture, an array of interface: JavaAnimal [] Zoo = new Animal[10] ; // is also correct You would need to fill the array with instances of a class(es) that implement that interface. 6 Using super What if you don't want to replace the method with an override in a concrete subclass, but you just want to add to it with some additional specific code? abstract class Report { void runReport () { // set-up report } void printReport () { // generic printing } } class BuzzwordsReport extends Report { void runReport () { // call superclass version, then come back and do some // subclass-specific stuff super . runReport (); buzzwordCompliance (); printReport (); } void buzzwordCompliance () {...} }","title":"Chapter 8: Interfaces and Abstract Classes"},{"location":"java/hfj/ch8/#chapter-8-interfaces-and-abstract-classes","text":"What's an interface? it's a 100% abstract class. What's an abstract class? it's a class that can't be instantiated.","title":"Chapter 8 Interfaces and Abstract Classes"},{"location":"java/hfj/ch8/#1-abstract-classes","text":"Here's where it gets weird: Animal anim = new Animal (); There two are the same type, but what the heck does an Animal object look like? Some classes just should not be instantiated! How? By marking the class as abstract , the compiler will stop any code, anywhere, from ever creating an instance of that type. i.e. prevent a class from ever being instantiated. Making a class abstract before the class declaration: abstract class Caine extends Animal { public void roam () {} } When you're designing your class inheritance structure, you have to decide which classes are abstract and which are concrete . Concrete classes are those that are specific enough to be instantiated. A concrete class just means that it's OK to make objects of that type. An abstract class has virtually no use, no value, no purpose in life, unless it is extended.","title":"1 Abstract classes"},{"location":"java/hfj/ch8/#2-abstract-methods","text":"An abstract method means the method must be overriden , whereas an abstract class means the class must be extended. There isn't any code that would make sense in the abstract method, you won't put in a method body. e.g. public abstract void eat () . If you declare an abstract method, you must mark the class abstract as well. You can't have an abstract method in a non-abstract class. You must implement all abstract methods.","title":"2 Abstract methods"},{"location":"java/hfj/ch8/#3-the-ultimate-superclass-object","text":"Every class in Java extends class Object . Class Object is the mother of all classes; it's the superclass of everything. Any class that doesn't explicitly extend another class, implicitly extends Object . Methods of Object class: equals () : tell you if two objects are considered equal. getClass () : Gives you back the class that object was instantiated from. hashCode () : Prints out a hashcode for the object toString () : Prints out a String message with the name of the class and some other number we rarely care about. Object is a non-abstract class because it's got method implementation code that all classes can inherit and use out-of-box, without having to override the methods. The Object class serves two main purpose: To act as a polymorphic type for methods that need to work on any class that you or anyone else makes \u4f5c\u4e3a\u65b9\u6cd5\u7684\u591a\u6001\u7c7b\u578b To provide real method code that all objects in Java need at runtime (and putting them in class Object means all other classes inherit them).\u63d0\u4f9bJava\u5728\u6267\u884c\u671f\u5806\u4efb\u4f55\u5bf9\u8c61\u90fd\u6709\u9700\u8981\u7684\u5b9e\u73b0\u65b9\u6cd5\u4ee3\u7801\u3002","title":"3 The ultimate superclass: Object"},{"location":"java/hfj/ch8/#4-using-polymorphic-references-of-type-object-has-a-price","text":"When you put an object into an ArrayList Dog , it goes in as a Dog, and comes out as a Dog: // Make an ArrayList declared to hold Dog objects. ArrayList Dog myDogArrayList = new ArrayList Dog (); // Make a Dog Dog aDog = new Dog (); // Add the Dog to the list myDogArrayList . add ( aDog ); //Assign the Dog from the list to a new Dog reference variable Dog d = myDogArrayList . get ( 0 ); Everything comes out of an ArrayList Object as a reference of type Object, regardless of what the actual object is. \u4efb\u4f55\u4ece ArrayList Object \u53d6\u51fa\u7684\u4e1c\u897f\u90fd\u4f1a\u88ab\u5f53\u4f5cObject\u7c7b\u578b\u7684\u5f15\u7528\uff0c\u800c\u4e0d\u7ba1\u5b83\u539f\u6765\u662f\u4ec0\u4e48\u3002 // make an ArrayList declared to hold any type of Object ArrayList Object myDogArrayList = new ArrayList object () // make a Dog Dog aDog = new Dog (); // Add the Dog to the list myDogArrayList . add ( aDog ); // No!! Won t compile!! the get() method returns type Object. // The compiler knows only that the object inherits from Object, // but it doesn t know it s a Dog!! Dog d = myDogArrayList . get ( 0 ) The compiler decides whether you can call a method based on the reference type , not the actual object type. Object o = al . get ( index ); // Class Object has a hashCode() method // so you can call that method on any object in Java int i = o . hashCode (); // Can t do this!! the Object class has no idea what it means to bark(). o . bark (); If you're sure the object is really a Dog, you can make a new Dog reference to it by copying the Object reference, and forcing that copy to go into a Dog reference variable, using a cast (Dog) . Object o = al . get ( index ); // cast the Object back to a Dog we know is there. Dog d = ( Dog ) o ; d . roam (); If you're not sure it's a Dog, you can use the instanceof operator to check. if ( o instanceof Dog ) { Dog d = ( Dog ) o ; } Note Java\u4e2d\u7684instanceof \u7b97\u7b26\u662f\u7528\u6765\u5728\u8fd0\u884c\u65f6\u6307\u51fa\u5bf9\u8c61\u662f\u5426\u662f\u7279\u5b9a\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002instanceof\u901a\u8fc7\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\u6765\u6307\u51fa\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u662f\u5426\u662f\u8fd9\u4e2a\u7279\u5b9a\u7c7b\u6216\u8005\u662f\u5b83\u7684\u5b50\u7c7b\u7684\u4e00\u4e2a\u5b9e\u4f8b\u3002 result = object instanceof class","title":"4 Using polymorphic references of type Object has a price"},{"location":"java/hfj/ch8/#5-interface","text":"Questions: What if you want to add Dog some Pet behaviors? Option one: We take the easy path, and put pet method in class Animal. Pros: All the Animals will instantly inherit the pet behaviors. We won't have to touch the existing Animal subclasses at all. Cons: Some animals like lion, wolf are not a pet. Non-pet Animals running around with pet methods. Option two: We start with option one, putting the pet methods in class Animal, but we make the methods abstract. Pros: All classes must override the methods, but they can make the methods \"do-nothings\". Cons: Waste a lot of time to implement every concrete Animal subclasses. Options three: Put the pet methods Only in the classes where they belong. Pros: The methods are where they belong, and only where they belong. Cons: Firstly, you'd have to agree to a protocol, and all programmers of pet Animal classes now and in the future would have to know about the protocol. Secondly, you don't get to use polymorphism for the pet methods It looks like we need two superclasses at the top. It\u2019s called \" multiple inheritance \"(\u591a\u91cd\u7ee7\u627f) and it can be a Really Bad Thing. Because multiple inheritance has a problem known as The Deadly Diamond of Death (\u81f4\u547d\u7684\u6b7b\u4ea1\u7816\u77f3) Java\u7684\u65b9\u6848: Interface!!! A Java interface (\u63a5\u53e3) solves multiple inheritance problem by giving you much of the polymorphic benefits of multiple inheritance without the pain and suffering from the Deadly Diamond of Death. How? Surprisingly simple: make all the methods abstract A Java interface is like a 100% pure abstract class. To define an interface, use the keyword interface instead of class . //use the keyword interface instead of class public interface Pet {} To implement an interface, use the keyword implements followed by the interface name: // Use the keyword implements followed by the interface name. public class Dog extends Canine implements Pet {} A class can implement multiple interfaces! public class Dog extends Animal implements Pet , Saveable , Paintable {} Classes from different inheritance trees can implement the same interface. How do you know whether to make a class, subclass, an abstract class, or an interface? Make a class that doesn\u2019t extend anything (other than Object) when your new class doesn\u2019t pass the IS-A test for any other type. Make a subclass (in other words, extend a class) only when you need to make a more specific version of a class and need to override or add new behaviors. Use an abstract class when you want to define a template for a group of subclasses, and you have at least some implementation code that all subclasses could use. Make the class abstract when you want to guarantee that nobody can make objects of that type. Use an interface when you want to define a role that other classes can play, regardless of where those classes are in the inheritance tree. Note Abstract class vs Interface Type of methods : Interface can have only abstract methods. Abstract class can have abstract and non-abstract methods. Final Variables : Variables declared in a Java interface are by default final. An abstract class may contain non-final variables. Type of variables : Abstract class can have final, non-final, static and non-static variables. Interface has only static and final variables. Implementation : Abstract class can provide the implementation of interface. Interface can\u2019t provide the implementation of abstract class. Inheritance vs Abstraction : A Java interface can be implemented using keyword implements and abstract class can be extended using keyword extends . Multiple implementation : An interface can extend another Java interface only, an abstract class can extend another Java class and implement multiple Java interfaces. Accessibility of Data Members : Members of a Java interface are public by default. A Java abstract class can have class members like private, protected, etc. Note You can never instantiate an interface in java. However, you can refer to an object that implements an interface by the type of the interface. public interface A {}; class B implements A {}; public void functionC { A test = new B (); } Another example, commonly used as an anonymous implementation class, is as follows: Runnable r = new Runnable () { public void run (){ } }; Note To have a wider picture, an array of interface: JavaAnimal [] Zoo = new Animal[10] ; // is also correct You would need to fill the array with instances of a class(es) that implement that interface.","title":"5 Interface"},{"location":"java/hfj/ch8/#6-using-super","text":"What if you don't want to replace the method with an override in a concrete subclass, but you just want to add to it with some additional specific code? abstract class Report { void runReport () { // set-up report } void printReport () { // generic printing } } class BuzzwordsReport extends Report { void runReport () { // call superclass version, then come back and do some // subclass-specific stuff super . runReport (); buzzwordCompliance (); printReport (); } void buzzwordCompliance () {...} }","title":"6 Using super"},{"location":"java/hfj/ch9/","text":"Chapter 9 Constructors and Garbage Collection 1 Stack and Heap In Java, programmers care about two areas of memory heap: where objects live stack: where method invocations and local variables live Instance variables are declared inside a class but not inside a method. Instance variables live inside the object they belong to. So instance variable live on the Heap, inside the object. Local variables are declared inside a method , including method parameters. They're temporary, and live only as long as the method is on the stack. What about local variables that are objects? If the local variable is a reference to an object, only the variable (the reference/remote control) goes on the stack. public class StackRef { public void foof () { barf (); } public void barf () { Duck d = new Duck ( 24 ); } } 2 Constructor Constructor (\u6784\u9020\u51fd\u6570) is the code that runs when you instantiate an object . They only way to invoke a constructor is with the keyword new followed by the class name. You can write a constructor for your class, but if you don't the compiler writes one for you ! Here is what the compiler default constructor looks like: public Duck (){ } A constructor does look and feel a lot like a method, but it's not a method. How is it different from a method? A constructor's name is the same as the class name. That's mandatory. Constructors have no return type, while a method need a return type. Note Java lets you declare a method with the same name as your class. The thing that separates a method from a constructor is the return type . Constructors are not inherited . The key feature of a constructor is that it runs before the object can be assigned to a reference. Initializing the state of an object Most people use constructors to initialize the state of an object. In other words, to make and assign values to the object's instance variables. And all you need to do is make a constructor with arguments: public class Duck { int size ; // Add an int parameter to the Duck constructor public Duck ( int duckSize ) { System . out . println ( Quack ); // use the argument value to set the size instance variable. size = duckSize ; System . out . println ( size is + size ); } public Duck () { //supply default size size = 27 ; } } public class UseADuck { public static void main ( String [] args ) { // Pass a value to the constructor Duck d = new Duck ( 42 ); } } If you have more than one constructor in a class, it means you have overloaded constructors. The constructors MUST have different arguments lists . Different arguments lists means different variable type (int, Dog, etc.) and order . If you write a constructor that takes arguments, and you still want a no-arg constructor, you'll have to build the no-arg constructor yourself! Because the compiler won't make a default constructor if you have any constructors. constructor chaining When an object is created, the object gets space for all instance variables, from all the way up the inheritance tree. All the constructors in an object's inheritance tree must run when you make a new object. When a constructor runs, it immediately calls its superclass constructor, all the way up the chain until you get to the class Object constructor (called constructor chaining (\u6784\u9020\u51fd\u6570\u94fe)). eg. A new Hippo object also IS-A Animal and IS-A Object. If you want to make a Hippo, you must also make the Animal and Object parts of the Hippo. public class Animal { public Animal () { System . out . println ( \u201c Making an Animal \u201d ); } } public class Hippo extends Animal { public Hippo () { System . out . println ( \u201c Making a Hippo \u201d ); } } public class TestHippo { public static void main ( String [] args { System . out . println ( \u201c Starting ... \u201d ); Hippo h = new Hippo (); } } invoke a superclass constructor The only way to call a superclass constructor is by calling **super() **. public class Duck extends Animal { int size ; public Duck ( int newSize ) { super (); } } A call to super() in your constructor puts the superclass constructor on the top of the Stack. And that superclass constructor calls its superclass constructor. And so it goes until the Object constructor is on the top of the Stack. Once Object() finishes, it's popped off the Stack and goes until the original constructor is on the top of the Stack. Note The compiler will put a call to super() in each of your overloaded constructors, if you do not have calls to super() . The superclass parts of an object have to be fully-formed (completely built) before the subclass parts can be constructed. So the call to Super() must be the first statement in each constructor! this this is a reference to the current object . this() calls the real constructor and let the real constructor finish the job of construction. The call to this() can be used only in a constructor, and must be the first statement in a constructor. A constructor can have a call to super() or this() , but never both! class Mini extends Car { Color color ; public Mini () { // The no-arg constructor supplies a default Color // and calls the overloaded Real Constructor (the one that calls super()) this ( Color . Red ); } public Mini ( Color c ) { // The is the Real Constructor that does the real work of initializing the object super ( \u201c Mini \u201d ); color = c ; // more initialization } public Mini ( int size ) { // Won t work!! Can t have super() and this() in the same constructor // because they each must be the first statement! this ( Color . Red ); super ( size ); } } 3 Object lifespan An Object's life depends entirely on the life of references referring to it. If the reference is considered \"alive\", the object is still alive on the Heap. If the reference dies, the object will die. So if an object's life depends on the reference variable's life, how long does a variable live? A local variable lives only within the method that declared the variable. An instance variable lives as long as the object does. If the object is still alive, so are its instance variables. The difference between life and scope for local variables: Life : a local variable is alive as long as its Stack frame is on the Stack. Scope : a local variable is in scope only within the method in which the variable was declared. You can use a variable only when it is in scope. Object lifecycle An object's life has no value, no meaning, no point, unless somebody has a reference to it. Because if you can't get to it, you can't ask it to do anything and it's just a big fat waste of bits. An object becomes eligible for Garbage Collector(\u5783\u573e\u6536\u96c6\u5668) when its last live reference disappear. Object-killer Reference goes out of scope, permanently. Assign the reference to another object. Explicitly set the reference to null.","title":"Chapter 9: Constructors and Garbage Collection"},{"location":"java/hfj/ch9/#chapter-9-constructors-and-garbage-collection","text":"","title":"Chapter 9 Constructors and Garbage Collection"},{"location":"java/hfj/ch9/#1-stack-and-heap","text":"In Java, programmers care about two areas of memory heap: where objects live stack: where method invocations and local variables live Instance variables are declared inside a class but not inside a method. Instance variables live inside the object they belong to. So instance variable live on the Heap, inside the object. Local variables are declared inside a method , including method parameters. They're temporary, and live only as long as the method is on the stack. What about local variables that are objects? If the local variable is a reference to an object, only the variable (the reference/remote control) goes on the stack. public class StackRef { public void foof () { barf (); } public void barf () { Duck d = new Duck ( 24 ); } }","title":"1 Stack and Heap"},{"location":"java/hfj/ch9/#2-constructor","text":"Constructor (\u6784\u9020\u51fd\u6570) is the code that runs when you instantiate an object . They only way to invoke a constructor is with the keyword new followed by the class name. You can write a constructor for your class, but if you don't the compiler writes one for you ! Here is what the compiler default constructor looks like: public Duck (){ } A constructor does look and feel a lot like a method, but it's not a method. How is it different from a method? A constructor's name is the same as the class name. That's mandatory. Constructors have no return type, while a method need a return type. Note Java lets you declare a method with the same name as your class. The thing that separates a method from a constructor is the return type . Constructors are not inherited . The key feature of a constructor is that it runs before the object can be assigned to a reference.","title":"2 Constructor"},{"location":"java/hfj/ch9/#initializing-the-state-of-an-object","text":"Most people use constructors to initialize the state of an object. In other words, to make and assign values to the object's instance variables. And all you need to do is make a constructor with arguments: public class Duck { int size ; // Add an int parameter to the Duck constructor public Duck ( int duckSize ) { System . out . println ( Quack ); // use the argument value to set the size instance variable. size = duckSize ; System . out . println ( size is + size ); } public Duck () { //supply default size size = 27 ; } } public class UseADuck { public static void main ( String [] args ) { // Pass a value to the constructor Duck d = new Duck ( 42 ); } } If you have more than one constructor in a class, it means you have overloaded constructors. The constructors MUST have different arguments lists . Different arguments lists means different variable type (int, Dog, etc.) and order . If you write a constructor that takes arguments, and you still want a no-arg constructor, you'll have to build the no-arg constructor yourself! Because the compiler won't make a default constructor if you have any constructors.","title":"Initializing the state of an object"},{"location":"java/hfj/ch9/#constructor-chaining","text":"When an object is created, the object gets space for all instance variables, from all the way up the inheritance tree. All the constructors in an object's inheritance tree must run when you make a new object. When a constructor runs, it immediately calls its superclass constructor, all the way up the chain until you get to the class Object constructor (called constructor chaining (\u6784\u9020\u51fd\u6570\u94fe)). eg. A new Hippo object also IS-A Animal and IS-A Object. If you want to make a Hippo, you must also make the Animal and Object parts of the Hippo. public class Animal { public Animal () { System . out . println ( \u201c Making an Animal \u201d ); } } public class Hippo extends Animal { public Hippo () { System . out . println ( \u201c Making a Hippo \u201d ); } } public class TestHippo { public static void main ( String [] args { System . out . println ( \u201c Starting ... \u201d ); Hippo h = new Hippo (); } }","title":"constructor chaining"},{"location":"java/hfj/ch9/#invoke-a-superclass-constructor","text":"The only way to call a superclass constructor is by calling **super() **. public class Duck extends Animal { int size ; public Duck ( int newSize ) { super (); } } A call to super() in your constructor puts the superclass constructor on the top of the Stack. And that superclass constructor calls its superclass constructor. And so it goes until the Object constructor is on the top of the Stack. Once Object() finishes, it's popped off the Stack and goes until the original constructor is on the top of the Stack. Note The compiler will put a call to super() in each of your overloaded constructors, if you do not have calls to super() . The superclass parts of an object have to be fully-formed (completely built) before the subclass parts can be constructed. So the call to Super() must be the first statement in each constructor!","title":"invoke a superclass constructor"},{"location":"java/hfj/ch9/#this","text":"this is a reference to the current object . this() calls the real constructor and let the real constructor finish the job of construction. The call to this() can be used only in a constructor, and must be the first statement in a constructor. A constructor can have a call to super() or this() , but never both! class Mini extends Car { Color color ; public Mini () { // The no-arg constructor supplies a default Color // and calls the overloaded Real Constructor (the one that calls super()) this ( Color . Red ); } public Mini ( Color c ) { // The is the Real Constructor that does the real work of initializing the object super ( \u201c Mini \u201d ); color = c ; // more initialization } public Mini ( int size ) { // Won t work!! Can t have super() and this() in the same constructor // because they each must be the first statement! this ( Color . Red ); super ( size ); } }","title":"this"},{"location":"java/hfj/ch9/#3-object-lifespan","text":"An Object's life depends entirely on the life of references referring to it. If the reference is considered \"alive\", the object is still alive on the Heap. If the reference dies, the object will die. So if an object's life depends on the reference variable's life, how long does a variable live? A local variable lives only within the method that declared the variable. An instance variable lives as long as the object does. If the object is still alive, so are its instance variables. The difference between life and scope for local variables: Life : a local variable is alive as long as its Stack frame is on the Stack. Scope : a local variable is in scope only within the method in which the variable was declared. You can use a variable only when it is in scope.","title":"3 Object lifespan"},{"location":"java/hfj/ch9/#object-lifecycle","text":"An object's life has no value, no meaning, no point, unless somebody has a reference to it. Because if you can't get to it, you can't ask it to do anything and it's just a big fat waste of bits. An object becomes eligible for Garbage Collector(\u5783\u573e\u6536\u96c6\u5668) when its last live reference disappear. Object-killer Reference goes out of scope, permanently. Assign the reference to another object. Explicitly set the reference to null.","title":"Object lifecycle"},{"location":"java/tij/","text":"TIJ Chapter 1: Introduction Chapter 2: Introduction to Objects Chapter 3: Everything is an Object Chapter 4: Opertors Chapter 5: Controlling Execution Chapter 6: Initialization Cleanup Chapter 7: Access Control Chapter 8: Reusing Clases Chapter 9: Polymorphism Chapter 10: Interfaces Chapter 11: Inner Classes Chapter 12: Holding Your Objects Chapter 13: Error Handling with Exceptions Chapter 14: Strings Chapter 15: Type Information Chapter 16: Generics Chapter 17: Arrays Chapter 18: Containers in Depth Chapter 19: I/O Chapter 20: Enumerated Types Chapter 21: Annotations Chapter 22: Concurrency Chapter 23: Graphical User Interfaces","title":"Contents"},{"location":"java/tij/#tij","text":"Chapter 1: Introduction Chapter 2: Introduction to Objects Chapter 3: Everything is an Object Chapter 4: Opertors Chapter 5: Controlling Execution Chapter 6: Initialization Cleanup Chapter 7: Access Control Chapter 8: Reusing Clases Chapter 9: Polymorphism Chapter 10: Interfaces Chapter 11: Inner Classes Chapter 12: Holding Your Objects Chapter 13: Error Handling with Exceptions Chapter 14: Strings Chapter 15: Type Information Chapter 16: Generics Chapter 17: Arrays Chapter 18: Containers in Depth Chapter 19: I/O Chapter 20: Enumerated Types Chapter 21: Annotations Chapter 22: Concurrency Chapter 23: Graphical User Interfaces","title":"TIJ"},{"location":"java/tij/ch1/","text":"Thinking in Java 1 - Introduction","title":"Chapter 1: Introduction"},{"location":"java/tij/ch1/#thinking-in-java-1-introduction","text":"","title":"Thinking in Java 1 - Introduction"},{"location":"java/tij/ch10/","text":"Thinking in Java 10 - Interfaces","title":"Chapter 10: Interfaces"},{"location":"java/tij/ch10/#thinking-in-java-10-interfaces","text":"","title":"Thinking in Java 10 - Interfaces"},{"location":"java/tij/ch11/","text":"Thinking in Java 11 - Inner Classes","title":"Chapter 11: Inner Classes"},{"location":"java/tij/ch11/#thinking-in-java-11-inner-classes","text":"","title":"Thinking in Java 11 - Inner Classes"},{"location":"java/tij/ch12/","text":"Thinking in Java 12 - Holding Your Objects The java.util library has a reasonably complete set of container classes, the basic types of which are List , Set , Queue , and Map . Generics and type-safe containers One of the problems of using pre-Java SE5 containers was that the compiler allowed you to insert an incorrect type into a container. public class ApplesAndOrangesWithoutGenerics { @SuppressWarnings ( unchecked ) public static void main ( String [] args ) { ArrayList apples = new ArrayList (); for ( int i = 0 ; i 3 ; i ++) apples . add ( new Apple ()); // Not prevented from adding an Orange to apples: apples . add ( new Orange ()); for ( int i = 0 ; i apples . size (); i ++) (( Apple ) apples . get ( i )). id (); // Orange is detected only at run time } } //output: Exception in thread main java . lang . ClassCastException : holding . Orange cannot be cast to holding . Apple With generics, you're prevented, at compile time, from putting the wrong type of object into a container. Now the compiler will prevent you from putting an Orange into apples, so it becomes a compile-time error rather than a runtime error. Basic concepts The Java container library takes the idea of \"holding your objects\" and divides it into two distinct concepts, expressed as the basic interfaces of the library: Collection : a sequence of individual elements with one or more rules applied to them. List , Set , Queue The Collection interface generalizes the idea of a sequence \u2014a way of holding a group of objects. Map : a group of key-value object pairs, allowing you to look up a value using a key. Adding groups of elements Arrays.asList() takes either an array or a comma-separated list of elements (using varargs) and turns it into a List object. Collections.addAll() takes a Collection object and either an array or a comma-separated list and adds the elements to the Collection . public class Arrays { ... public static T List T asList ( T ... a ) { return new ArrayList ( a ); } ... Printing containers You must use Arrays.toString() to produce a printable representation of an array, but the containers print nicely without any help. List Lists promise to maintain elements in a particular sequence. The List interface adds a number of methods to Collection that allow insertion and removal of elements in the middle of a List . There are two types of List : The basic ArrayList , which excels at randomly accessing elements, but is slower when inserting and removing elements in the middle of a List. The LinkedList , which provides optimal sequential access, with inexpensive insertions and deletions from the middle of the List. A LinkedList is relatively slow for random access, but it has a larger feature set than the ArrayList . ListIterator The ListIterator is a more powerful subtype of Iterator that is produced only by List classes. While Iterator can only move forward, ListIterator is bidirectional. A ListIterator has no current element; its cursor position always lies between the element that would be returned by a call to previous() and the element that would be returned by a call to next() . An iterator for a list of length n has n+1 possible cursor positions, as illustrated by the carets (^ ) below: Element(0) Element(1) Element(2) ... Element(n-1) cursor positions: ^ ^ ^ ^ An example: public class ListIteration { public static void main ( String [] args ) { List Pet pets = Pets . arrayList ( 8 ); ListIterator Pet it = pets . listIterator (); while ( it . hasNext ()) System . out . print ( it . next () + , + it . nextIndex () + , + it . previousIndex () + ; ); } } } // Output: // Rat, 1, 0; Manx, 2, 1; Cymric, 3, 2; Mutt, 4, 3; Pug, 5, 4; // Cymric, 6, 5; Pug, 7, 6; Manx, 8, 7; Set TreeSet keeps elements sorted into a red-black tree data structure. HashSet uses the hashing function. LinkedHashSet also uses hashing for lookup speed, but appears to maintain elements in insertion order using a linked list. If you want the results to be sorted, one approach is to use a TreeSet instead of a HashSet . Map The HashMap class is roughly equivalent to Hashtable , except: HashMap is unsynchronized , HashTable is synchronized . HashMap permits nulls, HashTable does NOT permite nulls. \u7ee7\u627f\u4e0d\u540c\u3002 public class Hashtable extends Dictionary implements Map public class HashMap extends AbstractMap implements Map Hashtable\u4e2d\u7684\u65b9\u6cd5\u662f\u540c\u6b65\u7684\uff0c\u800cHashMap\u4e2d\u7684\u65b9\u6cd5\u5728\u7f3a\u7701\u60c5\u51b5\u4e0b\u662f\u975e\u540c\u6b65\u7684\u3002\u5728\u591a\u7ebf\u7a0b\u5e76\u53d1\u7684\u73af\u5883\u4e0b\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528Hashtable\uff0c\u4f46\u662f\u8981\u4f7f\u7528HashMap\u7684\u8bdd\u5c31\u8981\u81ea\u5df1\u589e\u52a0\u540c\u6b65\u5904\u7406\u4e86\u3002 Hashtable\u4e2d\uff0ckey\u548cvalue\u90fd\u4e0d\u5141\u8bb8\u51fa\u73b0null\u503c\u3002\u5728HashMap\u4e2d\uff0cnull\u53ef\u4ee5\u4f5c\u4e3a\u952e\uff0c\u8fd9\u6837\u7684\u952e\u53ea\u6709\u4e00\u4e2a\uff1b\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u6240\u5bf9\u5e94\u7684\u503c\u4e3anull\u3002\u5f53get()\u65b9\u6cd5\u8fd4\u56denull\u503c\u65f6\uff0c\u5373\u53ef\u4ee5\u8868\u793a HashMap\u4e2d\u6ca1\u6709\u8be5\u952e\uff0c\u4e5f\u53ef\u4ee5\u8868\u793a\u8be5\u952e\u6240\u5bf9\u5e94\u7684\u503c\u4e3anull\u3002\u56e0\u6b64\uff0c\u5728HashMap\u4e2d\u4e0d\u80fd\u7531get()\u65b9\u6cd5\u6765\u5224\u65adHashMap\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u952e\uff0c \u800c\u5e94\u8be5\u7528containsKey()\u65b9\u6cd5\u6765\u5224\u65ad\u3002 \u4e24\u4e2a\u904d\u5386\u65b9\u5f0f\u7684\u5185\u90e8\u5b9e\u73b0\u4e0a\u4e0d\u540c\u3002Hashtable\u3001HashMap\u90fd\u4f7f\u7528\u4e86 Iterator\u3002\u800c\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cHashtable\u8fd8\u4f7f\u7528\u4e86Enumeration\u7684\u65b9\u5f0f \u3002 \u54c8\u5e0c\u503c\u7684\u4f7f\u7528\u4e0d\u540c\uff0cHashTable\u76f4\u63a5\u4f7f\u7528\u5bf9\u8c61\u7684hashCode\u3002\u800cHashMap\u91cd\u65b0\u8ba1\u7b97hash\u503c\u3002 Hashtable\u548cHashMap\u5b83\u4eec\u4e24\u4e2a\u5185\u90e8\u5b9e\u73b0\u65b9\u5f0f\u7684\u6570\u7ec4\u7684\u521d\u59cb\u5927\u5c0f\u548c\u6269\u5bb9\u7684\u65b9\u5f0f\u3002HashTable\u4e2dhash\u6570\u7ec4\u9ed8\u8ba4\u5927\u5c0f\u662f11\uff0c\u589e\u52a0\u7684\u65b9\u5f0f\u662f old*2+1\u3002HashMap\u4e2dhash\u6570\u7ec4\u7684\u9ed8\u8ba4\u5927\u5c0f\u662f16\uff0c\u800c\u4e14\u4e00\u5b9a\u662f2\u7684\u6307\u6570 Queue LinkedList has methods to support queue behavior and it implements the Queue interface, so a LinkedList can be used as a Queue implementation by upcasting a LinkedList to a Queue . public class LinkedList E extends AbstractSequentialList E implements List E , Deque E , Cloneable , java . io . Serializable Interface Queue : offer() inserts an element at the tail of the queue if it can, or returns false. Both peek() and element() return the head of the queue without removing it, but peek() returns null if the queue is empty and element() throws NoSuchElementException . Both poll() and remove() remove and return the head of the queue, but poll() returns null if the queue is empty, while remove() throws NoSuchElementException . public class QueueDemo { public static void printQ ( Queue queue ) { while ( queue . peek () != null ) System . out . print ( queue . remove () + ); System . out . println (); } public static void main ( String [] args ) { Queue Integer queue = new LinkedList Integer (); Random rand = new Random ( 47 ); for ( int i = 0 ; i 10 ; i ++) queue . offer ( rand . nextInt ( i + 10 )); printQ ( queue ); Queue Character qc = new LinkedList Character (); for ( char c : Brontosaurus . toCharArray ()) qc . offer ( c ); printQ ( qc ); } } /* Output: 8 1 1 1 5 14 3 1 0 1 B r o n t o s a u r u s */ //:~ PriorityQueue The elements of the priority queue are ordered according to their Comparable natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. // natural order PriorityQueue Integer priorityQueue = new PriorityQueue Integer (); // reverse natural order priorityQueue = new PriorityQueue Integer ( ints . size (), Collections . reverseOrder ()); Foreach and iterators Java SE5 introduced a new interface called Iterable which contains an iterator() method to produce an Iterator , and the Iterable interface is what foreach uses to move through a sequence. So if you create any class that implements Iterable , you can use it in a foreach statement. From Java SE5, a number of classes have been made Iterable , primarily all Collection classes (but not Maps ). Map.entrySet() produces a Set of Map.Entry elements, and a Set is Iterable so it can be used in a foreach loop. HashMap String , HashMap selects = new HashMap String , HashMap (); for ( Map . Entry String , HashMap entry : selects . entrySet ()) { String key = entry . getKey (); HashMap value = entry . getValue (); // do what you have to do here // In your case, another loop. }","title":"Chapter 12: Holding Your Objects"},{"location":"java/tij/ch12/#thinking-in-java-12-holding-your-objects","text":"The java.util library has a reasonably complete set of container classes, the basic types of which are List , Set , Queue , and Map .","title":"Thinking in Java 12 - Holding Your Objects"},{"location":"java/tij/ch12/#generics-and-type-safe-containers","text":"One of the problems of using pre-Java SE5 containers was that the compiler allowed you to insert an incorrect type into a container. public class ApplesAndOrangesWithoutGenerics { @SuppressWarnings ( unchecked ) public static void main ( String [] args ) { ArrayList apples = new ArrayList (); for ( int i = 0 ; i 3 ; i ++) apples . add ( new Apple ()); // Not prevented from adding an Orange to apples: apples . add ( new Orange ()); for ( int i = 0 ; i apples . size (); i ++) (( Apple ) apples . get ( i )). id (); // Orange is detected only at run time } } //output: Exception in thread main java . lang . ClassCastException : holding . Orange cannot be cast to holding . Apple With generics, you're prevented, at compile time, from putting the wrong type of object into a container. Now the compiler will prevent you from putting an Orange into apples, so it becomes a compile-time error rather than a runtime error.","title":"Generics and type-safe containers"},{"location":"java/tij/ch12/#basic-concepts","text":"The Java container library takes the idea of \"holding your objects\" and divides it into two distinct concepts, expressed as the basic interfaces of the library: Collection : a sequence of individual elements with one or more rules applied to them. List , Set , Queue The Collection interface generalizes the idea of a sequence \u2014a way of holding a group of objects. Map : a group of key-value object pairs, allowing you to look up a value using a key.","title":"Basic concepts"},{"location":"java/tij/ch12/#adding-groups-of-elements","text":"Arrays.asList() takes either an array or a comma-separated list of elements (using varargs) and turns it into a List object. Collections.addAll() takes a Collection object and either an array or a comma-separated list and adds the elements to the Collection . public class Arrays { ... public static T List T asList ( T ... a ) { return new ArrayList ( a ); } ...","title":"Adding groups of elements"},{"location":"java/tij/ch12/#printing-containers","text":"You must use Arrays.toString() to produce a printable representation of an array, but the containers print nicely without any help.","title":"Printing containers"},{"location":"java/tij/ch12/#list","text":"Lists promise to maintain elements in a particular sequence. The List interface adds a number of methods to Collection that allow insertion and removal of elements in the middle of a List . There are two types of List : The basic ArrayList , which excels at randomly accessing elements, but is slower when inserting and removing elements in the middle of a List. The LinkedList , which provides optimal sequential access, with inexpensive insertions and deletions from the middle of the List. A LinkedList is relatively slow for random access, but it has a larger feature set than the ArrayList .","title":"List"},{"location":"java/tij/ch12/#listiterator","text":"The ListIterator is a more powerful subtype of Iterator that is produced only by List classes. While Iterator can only move forward, ListIterator is bidirectional. A ListIterator has no current element; its cursor position always lies between the element that would be returned by a call to previous() and the element that would be returned by a call to next() . An iterator for a list of length n has n+1 possible cursor positions, as illustrated by the carets (^ ) below: Element(0) Element(1) Element(2) ... Element(n-1) cursor positions: ^ ^ ^ ^ An example: public class ListIteration { public static void main ( String [] args ) { List Pet pets = Pets . arrayList ( 8 ); ListIterator Pet it = pets . listIterator (); while ( it . hasNext ()) System . out . print ( it . next () + , + it . nextIndex () + , + it . previousIndex () + ; ); } } } // Output: // Rat, 1, 0; Manx, 2, 1; Cymric, 3, 2; Mutt, 4, 3; Pug, 5, 4; // Cymric, 6, 5; Pug, 7, 6; Manx, 8, 7;","title":"ListIterator"},{"location":"java/tij/ch12/#set","text":"TreeSet keeps elements sorted into a red-black tree data structure. HashSet uses the hashing function. LinkedHashSet also uses hashing for lookup speed, but appears to maintain elements in insertion order using a linked list. If you want the results to be sorted, one approach is to use a TreeSet instead of a HashSet .","title":"Set"},{"location":"java/tij/ch12/#map","text":"The HashMap class is roughly equivalent to Hashtable , except: HashMap is unsynchronized , HashTable is synchronized . HashMap permits nulls, HashTable does NOT permite nulls. \u7ee7\u627f\u4e0d\u540c\u3002 public class Hashtable extends Dictionary implements Map public class HashMap extends AbstractMap implements Map Hashtable\u4e2d\u7684\u65b9\u6cd5\u662f\u540c\u6b65\u7684\uff0c\u800cHashMap\u4e2d\u7684\u65b9\u6cd5\u5728\u7f3a\u7701\u60c5\u51b5\u4e0b\u662f\u975e\u540c\u6b65\u7684\u3002\u5728\u591a\u7ebf\u7a0b\u5e76\u53d1\u7684\u73af\u5883\u4e0b\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528Hashtable\uff0c\u4f46\u662f\u8981\u4f7f\u7528HashMap\u7684\u8bdd\u5c31\u8981\u81ea\u5df1\u589e\u52a0\u540c\u6b65\u5904\u7406\u4e86\u3002 Hashtable\u4e2d\uff0ckey\u548cvalue\u90fd\u4e0d\u5141\u8bb8\u51fa\u73b0null\u503c\u3002\u5728HashMap\u4e2d\uff0cnull\u53ef\u4ee5\u4f5c\u4e3a\u952e\uff0c\u8fd9\u6837\u7684\u952e\u53ea\u6709\u4e00\u4e2a\uff1b\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u952e\u6240\u5bf9\u5e94\u7684\u503c\u4e3anull\u3002\u5f53get()\u65b9\u6cd5\u8fd4\u56denull\u503c\u65f6\uff0c\u5373\u53ef\u4ee5\u8868\u793a HashMap\u4e2d\u6ca1\u6709\u8be5\u952e\uff0c\u4e5f\u53ef\u4ee5\u8868\u793a\u8be5\u952e\u6240\u5bf9\u5e94\u7684\u503c\u4e3anull\u3002\u56e0\u6b64\uff0c\u5728HashMap\u4e2d\u4e0d\u80fd\u7531get()\u65b9\u6cd5\u6765\u5224\u65adHashMap\u4e2d\u662f\u5426\u5b58\u5728\u67d0\u4e2a\u952e\uff0c \u800c\u5e94\u8be5\u7528containsKey()\u65b9\u6cd5\u6765\u5224\u65ad\u3002 \u4e24\u4e2a\u904d\u5386\u65b9\u5f0f\u7684\u5185\u90e8\u5b9e\u73b0\u4e0a\u4e0d\u540c\u3002Hashtable\u3001HashMap\u90fd\u4f7f\u7528\u4e86 Iterator\u3002\u800c\u7531\u4e8e\u5386\u53f2\u539f\u56e0\uff0cHashtable\u8fd8\u4f7f\u7528\u4e86Enumeration\u7684\u65b9\u5f0f \u3002 \u54c8\u5e0c\u503c\u7684\u4f7f\u7528\u4e0d\u540c\uff0cHashTable\u76f4\u63a5\u4f7f\u7528\u5bf9\u8c61\u7684hashCode\u3002\u800cHashMap\u91cd\u65b0\u8ba1\u7b97hash\u503c\u3002 Hashtable\u548cHashMap\u5b83\u4eec\u4e24\u4e2a\u5185\u90e8\u5b9e\u73b0\u65b9\u5f0f\u7684\u6570\u7ec4\u7684\u521d\u59cb\u5927\u5c0f\u548c\u6269\u5bb9\u7684\u65b9\u5f0f\u3002HashTable\u4e2dhash\u6570\u7ec4\u9ed8\u8ba4\u5927\u5c0f\u662f11\uff0c\u589e\u52a0\u7684\u65b9\u5f0f\u662f old*2+1\u3002HashMap\u4e2dhash\u6570\u7ec4\u7684\u9ed8\u8ba4\u5927\u5c0f\u662f16\uff0c\u800c\u4e14\u4e00\u5b9a\u662f2\u7684\u6307\u6570","title":"Map"},{"location":"java/tij/ch12/#queue","text":"LinkedList has methods to support queue behavior and it implements the Queue interface, so a LinkedList can be used as a Queue implementation by upcasting a LinkedList to a Queue . public class LinkedList E extends AbstractSequentialList E implements List E , Deque E , Cloneable , java . io . Serializable Interface Queue : offer() inserts an element at the tail of the queue if it can, or returns false. Both peek() and element() return the head of the queue without removing it, but peek() returns null if the queue is empty and element() throws NoSuchElementException . Both poll() and remove() remove and return the head of the queue, but poll() returns null if the queue is empty, while remove() throws NoSuchElementException . public class QueueDemo { public static void printQ ( Queue queue ) { while ( queue . peek () != null ) System . out . print ( queue . remove () + ); System . out . println (); } public static void main ( String [] args ) { Queue Integer queue = new LinkedList Integer (); Random rand = new Random ( 47 ); for ( int i = 0 ; i 10 ; i ++) queue . offer ( rand . nextInt ( i + 10 )); printQ ( queue ); Queue Character qc = new LinkedList Character (); for ( char c : Brontosaurus . toCharArray ()) qc . offer ( c ); printQ ( qc ); } } /* Output: 8 1 1 1 5 14 3 1 0 1 B r o n t o s a u r u s */ //:~","title":"Queue"},{"location":"java/tij/ch12/#priorityqueue","text":"The elements of the priority queue are ordered according to their Comparable natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. // natural order PriorityQueue Integer priorityQueue = new PriorityQueue Integer (); // reverse natural order priorityQueue = new PriorityQueue Integer ( ints . size (), Collections . reverseOrder ());","title":"PriorityQueue"},{"location":"java/tij/ch12/#foreach-and-iterators","text":"Java SE5 introduced a new interface called Iterable which contains an iterator() method to produce an Iterator , and the Iterable interface is what foreach uses to move through a sequence. So if you create any class that implements Iterable , you can use it in a foreach statement. From Java SE5, a number of classes have been made Iterable , primarily all Collection classes (but not Maps ). Map.entrySet() produces a Set of Map.Entry elements, and a Set is Iterable so it can be used in a foreach loop. HashMap String , HashMap selects = new HashMap String , HashMap (); for ( Map . Entry String , HashMap entry : selects . entrySet ()) { String key = entry . getKey (); HashMap value = entry . getValue (); // do what you have to do here // In your case, another loop. }","title":"Foreach and iterators"},{"location":"java/tij/ch13/","text":"Thinking in Java 13 - Error Handling with Exceptions","title":"Chapter 13: Error Handling with Exceptions"},{"location":"java/tij/ch13/#thinking-in-java-13-error-handling-with-exceptions","text":"","title":"Thinking in Java 13 - Error Handling with Exceptions"},{"location":"java/tij/ch14/","text":"Thinking in Java 14 - String","title":"Chapter 14: Strings"},{"location":"java/tij/ch14/#thinking-in-java-14-string","text":"","title":"Thinking in Java 14 - String"},{"location":"java/tij/ch15/","text":"Thinking in Java 15 - Type Information","title":"Chapter 15: Type Information"},{"location":"java/tij/ch15/#thinking-in-java-15-type-information","text":"","title":"Thinking in Java 15 - Type Information"},{"location":"java/tij/ch16/","text":"Thinking in Java 16- Generics","title":"Chapter 16: Generics"},{"location":"java/tij/ch16/#thinking-in-java-16-generics","text":"","title":"Thinking in Java 16- Generics"},{"location":"java/tij/ch17/","text":"Thinking in Java 17 - Arrays","title":"Chapter 17: Arrays"},{"location":"java/tij/ch17/#thinking-in-java-17-arrays","text":"","title":"Thinking in Java 17 - Arrays"},{"location":"java/tij/ch18/","text":"Thinking in Java 18 - Containers in Depth","title":"Chapter 18: Containers in Depth"},{"location":"java/tij/ch18/#thinking-in-java-18-containers-in-depth","text":"","title":"Thinking in Java 18 - Containers in Depth"},{"location":"java/tij/ch19/","text":"Thinking in Java 19 - I/O","title":"Chapter 19: I/O"},{"location":"java/tij/ch19/#thinking-in-java-19-io","text":"","title":"Thinking in Java 19 - I/O"},{"location":"java/tij/ch2/","text":"Thinking in Java 2 - Introduction to Objects","title":"Chapter 2: Introduction to Objects"},{"location":"java/tij/ch2/#thinking-in-java-2-introduction-to-objects","text":"","title":"Thinking in Java 2 - Introduction to Objects"},{"location":"java/tij/ch20/","text":"Thinking in Java 20 - Enumerated Types When you create an enum , an associated class is produced for you by the compiler. This class is automatically inherited from java.lang.Enum . public abstract class Enum E extends Enum E implements Comparable E , Serializable The definition means that the type argument for enum has to derive from an enum which itself has the same type argument. So if I've got an enum called StatusCode, it would be equivalent to [ ref ]: public class StatusCode extends Enum StatusCode Using static imports with enums The static import brings all the enum instance identifiers into the local namespace, so they don\u2019t need to be qualified. // Spiciness.java public enum Spiciness { NOT , MILD , MEDIUM , HOT , FLAMING } // Burrito.java import static Spiciness .*; public class Burrito { Spiciness degree ; public Burrito ( Spiciness degree ) { this . degree = degree ;} public String toString () { return Burrito is + degree ;} public static void main ( String [] args ) { System . out . println ( new Burrito ( NOT )); System . out . println ( new Burrito ( HOT )); } } Adding methods to an enum Except for the fact that you can\u2019t inherit from it, an enum can be treated much like a regular class. This means that you can add methods to an enum . It\u2019s even possible for an enum to have a main() . Notice that if you are going to define methods you must end the sequence of enum instances with a semicolon. public enum OzWitch { // Instances must be defined first, before methods: WEST ( Miss Gulch, aka the Wicked Witch of the West ), SOUTH ( Good by inference, but missing ); private String description ; // Constructor must be package or private access: private OzWitch ( String description ) { this . description = description ; } public String getDescription () { return description ; } public static void main ( String [] args ) { for ( OzWitch witch : OzWitch . values ()) print ( witch + : + witch . getDescription ()); } } Also you can overriding enum methods. The mystery of values() The method values() is a static method that is added by the compiler. The compiler automatically adds some special methods when it creates an enum. For example, they have a static values method that returns an array containing all of the values of the enum in the order they are declared. This method is commonly used in combination with the for-each construct to iterate over the values of an enum type. [ Java Tutorials - Enum Type ] Implements, not inherits All enum s extend java.lang.Enum . Since Java does not support multiple inheritance, this means that you cannot create an enum via inheritance. However, it is possible to create an enum that implements one or more interfaces. Using EnumSet instead of flags The EnumSet was added to Java SE5 to work in concert with enum s to create a replacement for traditional int-based \"bit flags.\" The EnumSet is designed for speed, because it must compete effectively with bit flags. Internally, it is represented by (if possible) a single long that is treated as a bit-vector, so it\u2019s extremely fast and efficient. package java.util ; public abstract class EnumSet E extends Enum E extends AbstractSet E implements Cloneable , java . io . Serializable EnumSet s are built on top of long s, a long is 64 bits, and each enum instance requires one bit to indicate presence or absence. This means you can have an EnumSet for an enum of up to 64 elements without going beyond the use of a single long . EnumSet \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7 new \u65b0\u5efa\uff0c\u4e0d\u8fc7\u63d0\u4f9b\u4e86\u82e5\u5e72\u9759\u6001\u5de5\u5382\u65b9\u6cd5( noneof , allof \u7b49)\u3002 \u5f53 EnumSet \u5927\u4e8e64\u4e2a\u65f6\uff0c\u91c7\u7528 JumboEnumSet \uff0c\u5426\u5219\u91c7\u7528 RegularEnumSet : // The class of all the elements of this set. final Class E elementType ; // All of the values comprising T. (Cached for performance.) final Enum ? [] universe ; // Creates an empty enum set with the specified element type. public static E extends Enum E EnumSet E noneOf ( Class E elementType ) { Enum ? [] universe = getUniverse ( elementType ); if ( universe == null ) throw new ClassCastException ( elementType + not an enum ); if ( universe . length = 64 ) return new RegularEnumSet ( elementType , universe ); else return new JumboEnumSet ( elementType , universe ); } \u5bf9\u4e8e RegularEnumSet \uff0c\u5b83\u7528\u4e00\u4e2a long \u7c7b\u578b\u8868\u793a\u4f4d\u5411\u91cf;\u5bf9\u4e8e JumboEnumSet \uff0c\u5b83\u7528\u4e00\u4e2a long \u6570\u7ec4\u8868\u793a\u3002 // RegularEnumSet.java // Bit vector representation of this set. // The 2^k bit indicates the presence of universe[k] in this set. private long elements = 0 L ; // JumboEnumSet.java // Bit vector representation of this set. The ith bit of the jth // element of this array represents the presence of universe[64*j +i] // in this set. private long elements []; Using EnumMap An EnumMap is a specialized Map that requires that its keys be from a single enum . Because of the constraints on an enum , an EnumMap can be implemented internally as an array. Thus they are extremely fast, so you can freely use EnumMaps for enum-based lookups. public class EnumMap K extends Enum K , V extends AbstractMap K , V implements java . io . Serializable , Cloneable private final Class K keyType ; // Array representation of this map. private transient Object [] vals ; key \u5176\u5b9e\u5c31\u662f Enum.ordinal() \uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a EnumMaps \u5c31\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u8981\u67e5\u8be2\u67d0\u4e2a key \u662f\u5426\u5b58\u5728\uff1a public boolean containsKey ( Object key ) { return isValidKey ( key ) vals [(( Enum ? ) key ). ordinal ()] != null ; } \u518d\u6765\u770b\u770b put() \u65b9\u6cd5\uff1a public V put ( K key , V value ) { typeCheck ( key ); int index = key . ordinal (); Object oldValue = vals [ index ]; vals [ index ] = maskNull ( value ); if ( oldValue == null ) size ++; return unmaskNull ( oldValue ); }","title":"Chapter 20: Enumerated Types"},{"location":"java/tij/ch20/#thinking-in-java-20-enumerated-types","text":"When you create an enum , an associated class is produced for you by the compiler. This class is automatically inherited from java.lang.Enum . public abstract class Enum E extends Enum E implements Comparable E , Serializable The definition means that the type argument for enum has to derive from an enum which itself has the same type argument. So if I've got an enum called StatusCode, it would be equivalent to [ ref ]: public class StatusCode extends Enum StatusCode","title":"Thinking in Java 20 - Enumerated Types"},{"location":"java/tij/ch20/#using-static-imports-with-enums","text":"The static import brings all the enum instance identifiers into the local namespace, so they don\u2019t need to be qualified. // Spiciness.java public enum Spiciness { NOT , MILD , MEDIUM , HOT , FLAMING } // Burrito.java import static Spiciness .*; public class Burrito { Spiciness degree ; public Burrito ( Spiciness degree ) { this . degree = degree ;} public String toString () { return Burrito is + degree ;} public static void main ( String [] args ) { System . out . println ( new Burrito ( NOT )); System . out . println ( new Burrito ( HOT )); } }","title":"Using static imports with enums"},{"location":"java/tij/ch20/#adding-methods-to-an-enum","text":"Except for the fact that you can\u2019t inherit from it, an enum can be treated much like a regular class. This means that you can add methods to an enum . It\u2019s even possible for an enum to have a main() . Notice that if you are going to define methods you must end the sequence of enum instances with a semicolon. public enum OzWitch { // Instances must be defined first, before methods: WEST ( Miss Gulch, aka the Wicked Witch of the West ), SOUTH ( Good by inference, but missing ); private String description ; // Constructor must be package or private access: private OzWitch ( String description ) { this . description = description ; } public String getDescription () { return description ; } public static void main ( String [] args ) { for ( OzWitch witch : OzWitch . values ()) print ( witch + : + witch . getDescription ()); } } Also you can overriding enum methods.","title":"Adding methods to an enum"},{"location":"java/tij/ch20/#the-mystery-of-values","text":"The method values() is a static method that is added by the compiler. The compiler automatically adds some special methods when it creates an enum. For example, they have a static values method that returns an array containing all of the values of the enum in the order they are declared. This method is commonly used in combination with the for-each construct to iterate over the values of an enum type. [ Java Tutorials - Enum Type ]","title":"The mystery of values()"},{"location":"java/tij/ch20/#implements-not-inherits","text":"All enum s extend java.lang.Enum . Since Java does not support multiple inheritance, this means that you cannot create an enum via inheritance. However, it is possible to create an enum that implements one or more interfaces.","title":"Implements, not inherits"},{"location":"java/tij/ch20/#using-enumset-instead-of-flags","text":"The EnumSet was added to Java SE5 to work in concert with enum s to create a replacement for traditional int-based \"bit flags.\" The EnumSet is designed for speed, because it must compete effectively with bit flags. Internally, it is represented by (if possible) a single long that is treated as a bit-vector, so it\u2019s extremely fast and efficient. package java.util ; public abstract class EnumSet E extends Enum E extends AbstractSet E implements Cloneable , java . io . Serializable EnumSet s are built on top of long s, a long is 64 bits, and each enum instance requires one bit to indicate presence or absence. This means you can have an EnumSet for an enum of up to 64 elements without going beyond the use of a single long . EnumSet \u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u4e0d\u80fd\u76f4\u63a5\u901a\u8fc7 new \u65b0\u5efa\uff0c\u4e0d\u8fc7\u63d0\u4f9b\u4e86\u82e5\u5e72\u9759\u6001\u5de5\u5382\u65b9\u6cd5( noneof , allof \u7b49)\u3002 \u5f53 EnumSet \u5927\u4e8e64\u4e2a\u65f6\uff0c\u91c7\u7528 JumboEnumSet \uff0c\u5426\u5219\u91c7\u7528 RegularEnumSet : // The class of all the elements of this set. final Class E elementType ; // All of the values comprising T. (Cached for performance.) final Enum ? [] universe ; // Creates an empty enum set with the specified element type. public static E extends Enum E EnumSet E noneOf ( Class E elementType ) { Enum ? [] universe = getUniverse ( elementType ); if ( universe == null ) throw new ClassCastException ( elementType + not an enum ); if ( universe . length = 64 ) return new RegularEnumSet ( elementType , universe ); else return new JumboEnumSet ( elementType , universe ); } \u5bf9\u4e8e RegularEnumSet \uff0c\u5b83\u7528\u4e00\u4e2a long \u7c7b\u578b\u8868\u793a\u4f4d\u5411\u91cf;\u5bf9\u4e8e JumboEnumSet \uff0c\u5b83\u7528\u4e00\u4e2a long \u6570\u7ec4\u8868\u793a\u3002 // RegularEnumSet.java // Bit vector representation of this set. // The 2^k bit indicates the presence of universe[k] in this set. private long elements = 0 L ; // JumboEnumSet.java // Bit vector representation of this set. The ith bit of the jth // element of this array represents the presence of universe[64*j +i] // in this set. private long elements [];","title":"Using EnumSet instead of flags"},{"location":"java/tij/ch20/#using-enummap","text":"An EnumMap is a specialized Map that requires that its keys be from a single enum . Because of the constraints on an enum , an EnumMap can be implemented internally as an array. Thus they are extremely fast, so you can freely use EnumMaps for enum-based lookups. public class EnumMap K extends Enum K , V extends AbstractMap K , V implements java . io . Serializable , Cloneable private final Class K keyType ; // Array representation of this map. private transient Object [] vals ; key \u5176\u5b9e\u5c31\u662f Enum.ordinal() \uff0c\u6240\u4ee5\u5b9e\u9645\u4e0a EnumMaps \u5c31\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u8981\u67e5\u8be2\u67d0\u4e2a key \u662f\u5426\u5b58\u5728\uff1a public boolean containsKey ( Object key ) { return isValidKey ( key ) vals [(( Enum ? ) key ). ordinal ()] != null ; } \u518d\u6765\u770b\u770b put() \u65b9\u6cd5\uff1a public V put ( K key , V value ) { typeCheck ( key ); int index = key . ordinal (); Object oldValue = vals [ index ]; vals [ index ] = maskNull ( value ); if ( oldValue == null ) size ++; return unmaskNull ( oldValue ); }","title":"Using EnumMap"},{"location":"java/tij/ch21/","text":"Thinking in Java 21 - Annotations Annotations (also known as metadata ) provide a formalized way to add information to your code so that you can easily use that data at some later point. The syntax of annotations is reasonably simple and consists mainly of the addition of the @symbol to the language. Java SE5 contains three general purpose built-in annotations, defined in java.lang @ Override , to indicate that a method definition is intended to override a method in the base class. This generates a compiler error if you accidentally misspell the method name or give an improper signature. @ Deprecated , to produce a compiler warning if this element is used. @ SuppressWarnings , to turn off inappropriate compiler warnings. 1 Basic syntax Defining annotations Annotation definitions look a lot like interface definitions. In fact, they compile to class files like any other Java interface: @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) public @interface Test {} An annotation definition also requires the meta-annotations @Target and @Retention . @Target defines where you can apply this annotation (a method or a field, for example). @Retention defines whether the annotations are available in the source code, in the class files, or at run time. Annotations will usually contain elements to specify values in your annotations. An annotation without any elements, such as @Test above, is called a marker annotation . Here is a simple annotation that tracks use cases in a project. id and description are elements, which resemble method declarations. @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) public @interface UseCase { public int id (); public String description () default no description ; } Here is a class with three methods annotated as use cases: public class PasswordUtils { @UseCase ( id = 47 , description = Passwords must contain at least one numeric ) public boolean validatePassword ( String password ) { return ( password . matches ( \\\\w*\\\\d\\\\w* )); } @UseCase ( id = 48 ) public String encryptPassword ( String password ) { return new StringBuilder ( password ). reverse (). toString (); } @UseCase ( id = 49 , description = New passwords can t equal previously used ones ) public boolean checkForNewPassword ( List String prevPasswords , String password ) { return ! prevPasswords . contains ( password ); } } Note that values of the annotation elements are expressed as name-value pairs in parentheses. Meta-annotations There are currently only three standard annotations (described earlier) and four meta-annotations defined in the Java language. The meta-annotations are for annotating annotations: @Target : Where this annotation can be applied. The possible ElementType arguments are: CONSTRUCTOR : Constructor declaration FIELD : Field declaration (includes enum constants) LOCAL_VARIABLE : Local variable declaration METHOD : Method declaration PACKAGE : Package declaration PARAMETER : Parameter declaration TYPE : Class, interface (including annotation type), or enum declaration @Retention : How long the annotation information is kept. The possible RetentionPolicy arguments are: SOURCE : Annotations are discarded by the compiler. CLASS : Annotations are available in the class file by the compiler but can be discarded by the VM. RUNTIME : Annotations are retained by the VM at run time, so they may be read reflectively. @Documented : Include this annotation in the Javadocs. @Inherited : Allow subclasses to inherit parent annotations. 2 Writing annotation processors Here is a very simple annotation processor that reads the annotated PasswordUtils class and uses reflection to look for @UseCase tags. Given a list of id values, it lists the use cases it finds and reports any that are missing: public class UseCaseTracker { public static void trackUseCases ( List Integer useCases , Class ? cl ) { for ( Method m : cl . getDeclaredMethods ()) { UseCase uc = m . getAnnotation ( UseCase . class ); if ( uc != null ) { System . out . println ( Found Use Case: + uc . id () + + uc . description ()); useCases . remove ( new Integer ( uc . id ())); } } for ( int i : useCases ) { System . out . println ( Warning: Missing use case- + i ); } } public static void main ( String [] args ) { List Integer useCases = new ArrayList Integer (); Collections . addAll ( useCases , 47 , 48 , 49 , 50 ); trackUseCases ( useCases , PasswordUtils . class ); } }","title":"Chapter 21: Annotations"},{"location":"java/tij/ch21/#thinking-in-java-21-annotations","text":"Annotations (also known as metadata ) provide a formalized way to add information to your code so that you can easily use that data at some later point. The syntax of annotations is reasonably simple and consists mainly of the addition of the @symbol to the language. Java SE5 contains three general purpose built-in annotations, defined in java.lang @ Override , to indicate that a method definition is intended to override a method in the base class. This generates a compiler error if you accidentally misspell the method name or give an improper signature. @ Deprecated , to produce a compiler warning if this element is used. @ SuppressWarnings , to turn off inappropriate compiler warnings.","title":"Thinking in Java 21 - Annotations"},{"location":"java/tij/ch21/#1-basic-syntax","text":"","title":"1 Basic syntax"},{"location":"java/tij/ch21/#defining-annotations","text":"Annotation definitions look a lot like interface definitions. In fact, they compile to class files like any other Java interface: @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) public @interface Test {} An annotation definition also requires the meta-annotations @Target and @Retention . @Target defines where you can apply this annotation (a method or a field, for example). @Retention defines whether the annotations are available in the source code, in the class files, or at run time. Annotations will usually contain elements to specify values in your annotations. An annotation without any elements, such as @Test above, is called a marker annotation . Here is a simple annotation that tracks use cases in a project. id and description are elements, which resemble method declarations. @Target ( ElementType . METHOD ) @Retention ( RetentionPolicy . RUNTIME ) public @interface UseCase { public int id (); public String description () default no description ; } Here is a class with three methods annotated as use cases: public class PasswordUtils { @UseCase ( id = 47 , description = Passwords must contain at least one numeric ) public boolean validatePassword ( String password ) { return ( password . matches ( \\\\w*\\\\d\\\\w* )); } @UseCase ( id = 48 ) public String encryptPassword ( String password ) { return new StringBuilder ( password ). reverse (). toString (); } @UseCase ( id = 49 , description = New passwords can t equal previously used ones ) public boolean checkForNewPassword ( List String prevPasswords , String password ) { return ! prevPasswords . contains ( password ); } } Note that values of the annotation elements are expressed as name-value pairs in parentheses.","title":"Defining annotations"},{"location":"java/tij/ch21/#meta-annotations","text":"There are currently only three standard annotations (described earlier) and four meta-annotations defined in the Java language. The meta-annotations are for annotating annotations: @Target : Where this annotation can be applied. The possible ElementType arguments are: CONSTRUCTOR : Constructor declaration FIELD : Field declaration (includes enum constants) LOCAL_VARIABLE : Local variable declaration METHOD : Method declaration PACKAGE : Package declaration PARAMETER : Parameter declaration TYPE : Class, interface (including annotation type), or enum declaration @Retention : How long the annotation information is kept. The possible RetentionPolicy arguments are: SOURCE : Annotations are discarded by the compiler. CLASS : Annotations are available in the class file by the compiler but can be discarded by the VM. RUNTIME : Annotations are retained by the VM at run time, so they may be read reflectively. @Documented : Include this annotation in the Javadocs. @Inherited : Allow subclasses to inherit parent annotations.","title":"Meta-annotations"},{"location":"java/tij/ch21/#2-writing-annotation-processors","text":"Here is a very simple annotation processor that reads the annotated PasswordUtils class and uses reflection to look for @UseCase tags. Given a list of id values, it lists the use cases it finds and reports any that are missing: public class UseCaseTracker { public static void trackUseCases ( List Integer useCases , Class ? cl ) { for ( Method m : cl . getDeclaredMethods ()) { UseCase uc = m . getAnnotation ( UseCase . class ); if ( uc != null ) { System . out . println ( Found Use Case: + uc . id () + + uc . description ()); useCases . remove ( new Integer ( uc . id ())); } } for ( int i : useCases ) { System . out . println ( Warning: Missing use case- + i ); } } public static void main ( String [] args ) { List Integer useCases = new ArrayList Integer (); Collections . addAll ( useCases , 47 , 48 , 49 , 50 ); trackUseCases ( useCases , PasswordUtils . class ); } }","title":"2 Writing annotation processors"},{"location":"java/tij/ch22/","text":"Thinking in Java 22 - Concurrency The many faces of concurrency Basic Threading Sharing resources","title":"Chapter 22: Concurrency"},{"location":"java/tij/ch22/#thinking-in-java-22-concurrency","text":"","title":"Thinking in Java 22 - Concurrency"},{"location":"java/tij/ch22/#the-many-faces-of-concurrency","text":"","title":"The many faces of concurrency"},{"location":"java/tij/ch22/#basic-threading","text":"","title":"Basic Threading"},{"location":"java/tij/ch22/#sharing-resources","text":"","title":"Sharing resources"},{"location":"java/tij/ch23/","text":"Thinking in Java 23 - Graphical User Interfaces","title":"Chapter 23: Graphical User Interfaces"},{"location":"java/tij/ch23/#thinking-in-java-23-graphical-user-interfaces","text":"","title":"Thinking in Java 23 - Graphical User Interfaces"},{"location":"java/tij/ch3/","text":"Thinking in Java 3 - Everything is an Object","title":"Chapter 3: Everything is an Object"},{"location":"java/tij/ch3/#thinking-in-java-3-everything-is-an-object","text":"","title":"Thinking in Java 3 - Everything is an Object"},{"location":"java/tij/ch4/","text":"Thinking in Java 4 - Operators","title":"Chapter 4: Opertors"},{"location":"java/tij/ch4/#thinking-in-java-4-operators","text":"","title":"Thinking in Java 4 - Operators"},{"location":"java/tij/ch5/","text":"Thinking in Java 5 - Controlling Execution","title":"Chapter 5: Controlling Execution"},{"location":"java/tij/ch5/#thinking-in-java-5-controlling-execution","text":"","title":"Thinking in Java 5 - Controlling Execution"},{"location":"java/tij/ch6/","text":"Thinking in Java 6 - Initialization Cleanup Enumerated types The enum keyword, makes much easier to group together and to use a set of enumerated types . Since instances of enumerate types are constants, they are in all capital letters by convention. In fact, enum s are classes and have their own methods. The compiler automatically adds useful methods( toString() , ordinal , values() when you create an enum . The ordinal() method indicates the declaration order of a particular enum constant, and a static values() method that produces an array of values of the enum constants in the order that they were declared. An especially nice feature is the way that enum s can be used inside switch statements. public enum Spiciness { NOT , MILD , MEDIUM , HOT , FLAMING } public class Burrito { Spiciness degree ; public Burrito ( Spiciness degree ) { this . degree = degree ;} public void describe () { System . out . print ( This burrito is ); switch ( degree ) { case NOT : System . out . println ( not spicy at all. ); break ; case MILD : case MEDIUM : System . out . println ( a little hot. ); break ; case HOT : case FLAMING : default : System . out . println ( maybe too hot. ); } } }","title":"Chapter 6: Initialization & Cleanup"},{"location":"java/tij/ch6/#thinking-in-java-6-initialization-cleanup","text":"","title":"Thinking in Java 6 - Initialization &amp; Cleanup"},{"location":"java/tij/ch6/#enumerated-types","text":"The enum keyword, makes much easier to group together and to use a set of enumerated types . Since instances of enumerate types are constants, they are in all capital letters by convention. In fact, enum s are classes and have their own methods. The compiler automatically adds useful methods( toString() , ordinal , values() when you create an enum . The ordinal() method indicates the declaration order of a particular enum constant, and a static values() method that produces an array of values of the enum constants in the order that they were declared. An especially nice feature is the way that enum s can be used inside switch statements. public enum Spiciness { NOT , MILD , MEDIUM , HOT , FLAMING } public class Burrito { Spiciness degree ; public Burrito ( Spiciness degree ) { this . degree = degree ;} public void describe () { System . out . print ( This burrito is ); switch ( degree ) { case NOT : System . out . println ( not spicy at all. ); break ; case MILD : case MEDIUM : System . out . println ( a little hot. ); break ; case HOT : case FLAMING : default : System . out . println ( maybe too hot. ); } } }","title":"Enumerated types"},{"location":"java/tij/ch7/","text":"Thinking in Java 7 - Access Control","title":"Chapter 7: Access Control"},{"location":"java/tij/ch7/#thinking-in-java-7-access-control","text":"","title":"Thinking in Java 7 - Access Control"},{"location":"java/tij/ch8/","text":"Thinking in Java 8 - Reusing Classes","title":"Chapter 8: Reusing Clases"},{"location":"java/tij/ch8/#thinking-in-java-8-reusing-classes","text":"","title":"Thinking in Java 8 - Reusing Classes"},{"location":"java/tij/ch9/","text":"Thinking in Java 9 - Polymorphism","title":"Chapter 9: Polymorphism"},{"location":"java/tij/ch9/#thinking-in-java-9-polymorphism","text":"","title":"Thinking in Java 9 - Polymorphism"},{"location":"java/ujvm/","text":"UJVM Chapter 1 : \u8d70\u8fdbJava Chapter 2 : Java\u5185\u5b58\u533a\u57df\u4e0e\u5185\u5b58\u6ea2\u51fa\u6b63\u5e38 Chapter 3 : \u5783\u573e\u6536\u96c6\u5668\u4e0e\u5185\u5b58\u5206\u914d\u7b56\u7565 Chapter 4 : \u865a\u62df\u673a\u6027\u80fd\u76d1\u63a7\u4e0e\u6545\u969c\u5904\u7406\u5de5\u5177 Chapter 5 : \u8c03\u4f18\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u6218 Chapter 6 : \u7c7b\u6587\u4ef6\u7ed3\u6784 Chapter 7 : \u865a\u62df\u673a\u7c7b\u52a0\u8f7d\u673a\u5236 Chapter 8 : \u865a\u62df\u673a\u5b57\u8282\u7801\u6267\u884c\u5f15\u64ce Chapter 9 : \u7c7b\u52a0\u8f7d\u53ca\u6267\u884c\u5b50\u7cfb\u7edf\u7684\u6848\u4f8b\u4e0e\u5b9e\u6218 Chapter 10 : \u65e9\u671f(\u7f16\u8bd1\u671f)\u4f18\u5316 Chapter 11 : \u665a\u671f(\u8fd0\u884c\u671f)\u4f18\u5316 Chapter 12 : Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b Chapter 13 : \u7ebf\u7a0b\u5b89\u5168\u4e0e\u9501\u4f18\u5316 Appendix HotSpot\u865a\u62df\u673a\u4e3b\u8981\u53c2\u6570\u5217\u8868","title":"Contents"},{"location":"java/ujvm/#ujvm","text":"Chapter 1 : \u8d70\u8fdbJava Chapter 2 : Java\u5185\u5b58\u533a\u57df\u4e0e\u5185\u5b58\u6ea2\u51fa\u6b63\u5e38 Chapter 3 : \u5783\u573e\u6536\u96c6\u5668\u4e0e\u5185\u5b58\u5206\u914d\u7b56\u7565 Chapter 4 : \u865a\u62df\u673a\u6027\u80fd\u76d1\u63a7\u4e0e\u6545\u969c\u5904\u7406\u5de5\u5177 Chapter 5 : \u8c03\u4f18\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u6218 Chapter 6 : \u7c7b\u6587\u4ef6\u7ed3\u6784 Chapter 7 : \u865a\u62df\u673a\u7c7b\u52a0\u8f7d\u673a\u5236 Chapter 8 : \u865a\u62df\u673a\u5b57\u8282\u7801\u6267\u884c\u5f15\u64ce Chapter 9 : \u7c7b\u52a0\u8f7d\u53ca\u6267\u884c\u5b50\u7cfb\u7edf\u7684\u6848\u4f8b\u4e0e\u5b9e\u6218 Chapter 10 : \u65e9\u671f(\u7f16\u8bd1\u671f)\u4f18\u5316 Chapter 11 : \u665a\u671f(\u8fd0\u884c\u671f)\u4f18\u5316 Chapter 12 : Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b Chapter 13 : \u7ebf\u7a0b\u5b89\u5168\u4e0e\u9501\u4f18\u5316 Appendix HotSpot\u865a\u62df\u673a\u4e3b\u8981\u53c2\u6570\u5217\u8868","title":"UJVM"},{"location":"java/ujvm/AppendixC/","text":"HotSpot\u865a\u62df\u673a\u4e3b\u8981\u53c2\u6570\u5217\u8868 Java HotSpot VM Options \u672c\u53c2\u6570\u8868\u4ee5JDK 1.6\u4e3a\u57fa\u7840\u7f16\u5199\uff0cJDK 1.6\u7684HotSpot\u865a\u62df\u673a\u6709\u5f88\u591a\u975e\u7a33\u5b9a\u53c2\u6570\uff08Unstable Options\uff0c\u5373\u4ee5-XX\uff1a\u5f00\u5934\u7684\u53c2\u6570\uff0cJDK 1.6\u7684\u865a\u62df\u673a\u4e2d\u5927\u6982\u6709660\u591a\u4e2a\uff09\uff0c\u4f7f\u7528 -XX\uff1a+PrintFlagsFinal \u53c2\u6570\u53ef\u4ee5\u8f93\u51fa\u6240\u6709\u53c2\u6570\u7684\u540d\u79f0\u53ca\u9ed8\u8ba4\u503c\uff08\u9ed8\u8ba4\u4e0d\u5305\u62ecDiagnostic\u548cExperimental\u7684\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u914d\u5408 -XX\uff1a+UnlockDiagnosticVMOptions / -XX\uff1a+UnlockExperimentalVMOptions \u4e00\u8d77\u4f7f\u7528\uff09\uff0c\u4e0b\u9762\u7684\u5404\u4e2a\u8868\u683c\u53ea\u5305\u542b\u4e86\u5176\u4e2d\u6700\u5e38\u7528\u7684\u90e8\u5206\u3002\u53c2\u6570\u4f7f\u7528\u7684\u65b9\u5f0f\u6709\u5982\u4e0b3\u79cd\uff1a -XX:+ option : \u5f00\u542foption\u53c2\u6570\u3002 - XX :- option : \u5173\u95edoption\u53c2\u6570\u3002 -XX: option = value : \u5c06option\u53c2\u6570\u7684\u503c\u8bbe\u7f6e\u4e3avalue\u3002 \u5185\u5b58\u7ba1\u7406\u53c2\u6570 \u5373\u65f6\u7f16\u8bd1\u53c2\u6570 \u7c7b\u578b\u52a0\u8f7d\u53c2\u6570 \u591a\u7ebf\u7a0b\u76f8\u5173\u53c2\u6570 \u6027\u80fd\u53c2\u6570 \u8c03\u8bd5\u53c2\u6570","title":"Appendix HotSpot\u865a\u62df\u673a\u4e3b\u8981\u53c2\u6570\u5217\u8868"},{"location":"java/ujvm/AppendixC/#hotspot","text":"Java HotSpot VM Options \u672c\u53c2\u6570\u8868\u4ee5JDK 1.6\u4e3a\u57fa\u7840\u7f16\u5199\uff0cJDK 1.6\u7684HotSpot\u865a\u62df\u673a\u6709\u5f88\u591a\u975e\u7a33\u5b9a\u53c2\u6570\uff08Unstable Options\uff0c\u5373\u4ee5-XX\uff1a\u5f00\u5934\u7684\u53c2\u6570\uff0cJDK 1.6\u7684\u865a\u62df\u673a\u4e2d\u5927\u6982\u6709660\u591a\u4e2a\uff09\uff0c\u4f7f\u7528 -XX\uff1a+PrintFlagsFinal \u53c2\u6570\u53ef\u4ee5\u8f93\u51fa\u6240\u6709\u53c2\u6570\u7684\u540d\u79f0\u53ca\u9ed8\u8ba4\u503c\uff08\u9ed8\u8ba4\u4e0d\u5305\u62ecDiagnostic\u548cExperimental\u7684\u53c2\u6570\uff0c\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u914d\u5408 -XX\uff1a+UnlockDiagnosticVMOptions / -XX\uff1a+UnlockExperimentalVMOptions \u4e00\u8d77\u4f7f\u7528\uff09\uff0c\u4e0b\u9762\u7684\u5404\u4e2a\u8868\u683c\u53ea\u5305\u542b\u4e86\u5176\u4e2d\u6700\u5e38\u7528\u7684\u90e8\u5206\u3002\u53c2\u6570\u4f7f\u7528\u7684\u65b9\u5f0f\u6709\u5982\u4e0b3\u79cd\uff1a -XX:+ option : \u5f00\u542foption\u53c2\u6570\u3002 - XX :- option : \u5173\u95edoption\u53c2\u6570\u3002 -XX: option = value : \u5c06option\u53c2\u6570\u7684\u503c\u8bbe\u7f6e\u4e3avalue\u3002","title":"HotSpot\u865a\u62df\u673a\u4e3b\u8981\u53c2\u6570\u5217\u8868"},{"location":"java/ujvm/AppendixC/#_1","text":"","title":"\u5185\u5b58\u7ba1\u7406\u53c2\u6570"},{"location":"java/ujvm/AppendixC/#_2","text":"","title":"\u5373\u65f6\u7f16\u8bd1\u53c2\u6570"},{"location":"java/ujvm/AppendixC/#_3","text":"","title":"\u7c7b\u578b\u52a0\u8f7d\u53c2\u6570"},{"location":"java/ujvm/AppendixC/#_4","text":"","title":"\u591a\u7ebf\u7a0b\u76f8\u5173\u53c2\u6570"},{"location":"java/ujvm/AppendixC/#_5","text":"","title":"\u6027\u80fd\u53c2\u6570"},{"location":"java/ujvm/AppendixC/#_6","text":"","title":"\u8c03\u8bd5\u53c2\u6570"},{"location":"java/ujvm/ch1/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 1 - \u8d70\u8fdbJava Java\u4e0d\u4ec5\u4ec5\u662f\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u8fd8\u662f\u4e00\u4e2a\u7531\u4e00\u7cfb\u5217\u8ba1\u7b97\u673a\u8f6f\u4ef6\u548c\u89c4\u8303\u5f62\u6210\u7684\u6280\u672f\u4f53\u7cfb\uff0c\u8fd9\u4e2a\u6280\u672f\u4f53\u7cfb\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u7528\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u548c\u8de8\u5e73\u53f0\u90e8\u7f72\u7684\u652f\u6301\u73af\u5883\u3002 \u6309\u7167\u6280\u672f\u6240\u670d\u52a1\u7684\u9886\u57df \u6765\u5212\u5206\uff0cJava\u6280\u672f\u4f53\u7cfb\u53ef\u4ee5\u5206\u4e3a4\u4e2a\u5e73\u53f0\uff0c\u5206\u522b\u4e3a\uff1a Java Card\uff1a\u652f\u6301\u4e00\u4e9bJava\u5c0f\u7a0b\u5e8f\uff08Applets\uff09\u8fd0\u884c\u5728\u5c0f\u5185\u5b58\u8bbe\u5907\uff08\u5982\u667a\u80fd\u5361\uff09\u4e0a\u7684\u5e73\u53f0\u3002 Java ME\uff08Micro Edition\uff09\uff1a\u652f\u6301Java\u7a0b\u5e8f\u8fd0\u884c\u5728\u79fb\u52a8\u7ec8\u7aef\uff08\u624b\u673a\u3001PDA\uff09\u4e0a\u7684\u5e73\u53f0\uff0c\u5bf9Java API\u6709\u6240\u7cbe\u7b80\uff0c\u5e76\u52a0\u5165\u4e86\u9488\u5bf9\u79fb\u52a8\u7ec8\u7aef\u7684\u652f\u6301\uff0c\u8fd9\u4e2a\u7248\u672c\u4ee5\u524d\u79f0\u4e3aJ2ME\u3002 Java SE \uff08Standard Edition\uff09\uff1a\u652f\u6301\u9762\u5411\u684c\u9762\u7ea7\u5e94\u7528\uff08\u5982Windows\u4e0b\u7684\u5e94\u7528\u7a0b\u5e8f\uff09\u7684Java\u5e73\u53f0\uff0c\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684Java\u6838\u5fc3API\uff0c\u8fd9\u4e2a\u7248\u672c\u4ee5\u524d\u79f0\u4e3aJ2SE\u3002 Java EE \uff08Enterprise Edition\uff09\uff1a\u652f\u6301\u4f7f\u7528\u591a\u5c42\u67b6\u6784\u7684\u4f01\u4e1a\u5e94\u7528\uff08\u5982ERP\u3001CRM\u5e94\u7528\uff09\u7684Java\u5e73\u53f0\uff0c\u9664\u4e86\u63d0\u4f9bJava SE API\u5916\uff0c\u8fd8\u5bf9\u5176\u505a\u4e86\u5927\u91cf\u7684\u6269\u5145\u5e76\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u90e8\u7f72\u652f\u6301\uff0c\u8fd9\u4e2a\u7248\u672c\u4ee5\u524d\u79f0\u4e3aJ2EE\u3002 Java\u53d1\u5c55\u53f2 JDK 1.0: Java\u865a\u62df\u673a\u3001Applet\u3001AWT\u7b49\uff1b JDK 1.1\uff1aJAR\u6587\u4ef6\u683c\u5f0f\u3001JDBC\u3001JavaBeans\u3001RMI\u3001\u5185\u90e8\u7c7b\u3001\u53cd\u5c04\uff1b JDK 1.2\uff1a\u62c6\u5206\u4e3aJ2SE/J2EE/J2ME\u3001\u5185\u7f6eJIT\u7f16\u8bd1\u5668\u3001\u4e00\u7cfb\u5217Collections\u96c6\u5408\u7c7b\uff1b JDK 1.3\uff1aJNDI\u670d\u52a1\u3001\u4f7f\u7528CORBA IIOP\u5b9e\u73b0RMI\u901a\u4fe1\u534f\u8bae\u3001Java 2D\u6539\u8fdb\uff1b JDK 1.4\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u5f02\u5e38\u94fe\u3001NIO\u3001\u65e5\u5fd7\u7c7b\u3001XML\u89e3\u6790\u5668\u548cXSLT\u8f6c\u6362\u5668\uff1b JDK 1.5\uff1a\u81ea\u52a8\u88c5\u7bb1\u3001\u6cdb\u578b\u3001\u52a8\u6001\u6ce8\u89e3\u3001\u679a\u4e3e\u3001\u53ef\u53d8\u53c2\u6570\u3001\u904d\u5386\u5faa\u73af\u3001\u6539\u8fdb\u4e86Java\u5185\u5b58\u6a21\u578b\u3001\u63d0\u4f9b\u4e86java.util.concurrent\u5e76\u53d1\u5305\uff1b JDK 1.6\uff1a\u63d0\u4f9b\u52a8\u6001\u8bed\u8a00\u652f\u6301\u3001\u63d0\u4f9b\u7f16\u8bd1API\u548c\u5fae\u578bHTTP\u670d\u52a1\u5668API\u3001\u865a\u62df\u673a\u4f18\u5316\uff08\u9501\u4e0e\u540c\u6b65\u3001\u5783\u573e\u6536\u96c6\u3001\u7c7b\u52a0\u8f7d\u7b49\uff09\uff1b JDK 1.7\uff1aG1\u6536\u96c6\u5668\u3001\u52a0\u5f3a\u5bf9Java\u8bed\u8a00\u7684\u8c03\u7528\u652f\u6301\u3001\u5347\u7ea7\u7c7b\u52a0\u8f7d\u67b6\u6784\uff1b JDK 1.8\uff1aLambda\u8868\u8fbe\u5f0f\u7b49\uff1b Java\u865a\u62df\u673a\u53d1\u5c55\u53f2 Sun Classic/Exact VM Sun Classic/Exact VM\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u6b3e\u5546\u7528Java\u865a\u62df\u673a\u3002\u8fd9\u6b3e\u865a\u62df\u673a\u53ea\u80fd\u4f7f\u7528\u7eaf\u89e3\u91ca\u5668\u65b9\u5f0f\u6765\u6267\u884cJava\u4ee3\u7801\uff0c\u5982\u679c\u8981\u4f7f\u7528 JIT \u7f16\u8bd1\u5668\uff0c\u5c31\u5fc5\u987b\u8fdb\u884c\u5916\u6302\u3002\u4f46\u662f\u5047\u5982\u5916\u6302\u4e86JIT\u7f16\u8bd1\u5668\uff0c JIT\u7f16\u8bd1\u5668\u5c31\u5b8c\u5168\u63a5\u7ba1\u4e86\u865a\u62df\u673a\u7684\u6267\u884c\u7cfb\u7edf\uff0c\u89e3\u91ca\u5668\u4fbf\u4e0d\u518d\u5de5\u4f5c\u4e86\u3002Class VM\u5728JDK 1.2\u4e4b\u524d\u662f Sun JDK\u4e2d\u552f\u4e00\u7684\u865a\u62df\u673a\uff0c\u5728JDK 1.2\u65f6\uff0c\u5b83\u4e0eHotSpot VM\u5e76\u5b58\uff0c\u4f46\u9ed8\u8ba4\u4f7f\u7528\u7684\u662fClassic VM\u3002 Sun HotSpot VM HotSpot VM\u662fSun JDK\u548cOpenJDK\u4e2d\u6240\u5e26\u7684\u865a\u62df\u673a\uff0c\u4e5f\u662f\u2f6c\u524d\u4f7f\u2f64\u8303\u56f4\u6700\u2f34\u7684Java\u865a\u62df\u673a\u3002 HotSpot VM\u6700\u521d\u7531\u2f00\u5bb6\u540d\u4e3a\u201cLongview Technologies\u201d\u7684\u2f29\u516c\u53f8\u8bbe\u8ba1\u7684\uff0c\u540e\u6765\u88abSun\u6536\u8d2d\u3002 HotSpot VM\u65e2\u7ee7\u627f\u4e86Sun\u4e4b\u524d\u4e24\u6b3e\u5546\u7528\u865a\u62df\u673a\u7684\u4f18\u70b9(\u51c6\u786e\u5f0f\u5185\u5b58\u7ba1\u7406)\uff0c\u4e5f\u6709\u8bb8\u591a\u81ea\u5df1\u65b0\u7684\u6280\u672f\u4f18\u52bf\u3002HotSpot VM\u7684\u70ed\u70b9\u4ee3\u7801\u63a2\u6d4b\u80fd\u529b(\u8fd9\u662f\u4e3a\u4ec0\u4e48\u53ebhotspot\u7684\u539f\u56e0)\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u8ba1\u6570\u5668\u627e\u51fa\u6700\u5177\u6709\u7f16\u8bd1\u4ef7\u503c\u7684\u4ee3\u7801\uff0c\u7136\u540e\u901a\u77e5JIT\u7f16\u8bd1\u5668\u4ee5\u65b9\u6cd5\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u8bd1\u3002\u5982\u679c\u2f00\u4e2a\u2f45\u6cd5\u88ab\u9891\u7e41\u8c03\u2f64\uff0c\u6216\u2f45\u6cd5\u4e2d\u6709\u6548\u5faa\u73af\u6b21\u6570\u5f88\u591a\uff0c\u5c06\u4f1a\u5206\u522b\u89e6\u53d1\u6807\u51c6\u7f16\u8bd1\u548cOSR(\u6808\u4e0a\u66ff\u6362)\u7f16\u8bd1\u52a8\u4f5c\u3002\u901a\u8fc7\u7f16\u8bd1\u5668\u4e0e\u89e3\u91ca\u5668\u6070\u5f53\u5730\u534f\u540c\u2f2f\u4f5c\uff0c\u53ef\u4ee5\u5728\u6700\u4f18\u5316\u7684\u7a0b\u5e8f\u54cd\u5e94\u65f6\u95f4\u4e0e\u6700\u4f73\u6267\u2f8f\u6027\u80fd\u4e2d\u53d6\u5f97\u5e73\u8861\uff0c\u2f7d\u4e14\u2f46\u987b\u7b49\u5f85\u672c\u5730\u4ee3\u7801\u8f93\u51fa\u624d\u80fd\u6267\u2f8f\u7a0b\u5e8f\uff0c\u5373\u65f6\u7f16\u8bd1\u7684\u65f6\u95f4\u538b\u2f12\u4e5f\u76f8\u5bf9\u51cf\u2f29\uff0c\u8fd9\u6837\u6709\u52a9\u4e8e\u5f15\u2f0a\u66f4\u591a\u7684\u4ee3\u7801\u4f18\u5316\u6280\u672f\uff0c\u8f93\u51fa\u8d28\u91cf\u66f4\u2fbc\u7684\u672c\u5730\u4ee3\u7801\u3002 Sun Mobile-Embedded VM/Meta-Circular VM Sun\u516c\u53f8\u6240\u7814\u53d1\u7684\u865a\u62df\u673a\u53ef\u4e0d\u4ec5\u6709\u524d\u2faf\u4ecb\u7ecd\u7684\u670d\u52a1\u5668\u3001\u684c\u2faf\u9886\u57df\u7684\u5546 \u2f64\u865a\u62df\u673a\uff0c\u9664\u6b64\u4e4b\u5916\uff0cSun\u516c\u53f8\u2faf\u5bf9\u79fb\u52a8\u548c\u5d4c\u2f0a\u5f0f\u5e02\u573a\uff0c\u4e5f\u53d1\u5e03\u8fc7\u865a\u62df\u673a\u4ea7\u54c1\u3002\u5e38\u89c1\u7684\u6709KVM\uff0cCDC/CLDC HotSpot Implementation\u7b49\u3002 BEA JRockit/IBM J9 VM \u9664\u4e86Sun\u516c\u53f8\u4ee5\u5916\uff0c\u5176\u4ed6\u7ec4\u7ec7\u3001\u516c \u53f8\u4e5f\u7814\u53d1\u8fc7\u4e0d\u5c11\u865a\u62df\u673a\u5b9e\u73b0\uff0c\u5176\u4e2d\u89c4\u6a21\u6700\u2f24\u3001\u6700\u8457\u540d\u7684\u5c31\u662fBEA\u548cIBM\u516c\u53f8\u4e86\u3002 JRockit VM\u66fe\u7ecf\u53f7\u79f0\u201c\u4e16\u754c\u4e0a\u901f\u5ea6\u6700\u5feb\u7684Java\u865a\u62df\u673a\u201d\u3002\u5b83\u662f\u2f00\u6b3e\u4e13\u95e8\u4e3a\u670d\u52a1\u5668\u786c\u4ef6\u548c\u670d\u52a1\u5668\u7aef\u5e94\u2f64\u573a\u666f\u2fbc\u5ea6\u4f18\u5316\u7684\u865a\u62df\u673a\uff0c\u4e13\u6ce8\u4e8e\u670d\u52a1\u5668\u7aef\u5e94\u7528\uff0c\u4e0d\u592a\u5173\u6ce8\u7a0b\u5e8f\u542f\u52a8\u901f\u5ea6\uff0c\u56e0\u6b64JRockit\u5185\u90e8\u4e0d\u5305\u542b\u89e3\u6790\u5668\u5b9e\u73b0\uff0c\u5168\u90e8\u4ee3\u7801\u90fd\u9760\u5373\u65f6\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u6267\u884c\u3002\u9664\u6b64\u4e4b\u5916\uff0c JRockit\u7684\u5783\u573e\u6536\u96c6\u5668\u548c MissionControl\u670d\u52a1\u5957\u4ef6\u7b49\u90e8\u5206\u7684\u5b9e\u73b0\uff0c\u5728\u4f17\u591aJava\u865a\u62df\u673a\u4e2d\u4e5f\u4e00\u76f4\u5904\u4e8e\u9886\u5148\u6c34\u5e73\u3002 IBM J9\u7684\u5e02\u573a\u5b9a\u4f4d\u4e0eSun HotSpot\u6bd4\u8f83\u63a5\u8fd1\uff0c\u5b83\u662f\u4e00\u6b3e\u8bbe\u8ba1\u4e0a\u4ece\u670d\u52a1\u5668\u7aef\u5230\u684c\u9762\u5e94\u7528\u518d\u5230\u5d4c\u5165\u5f0f\u90fd\u5168\u9762\u8003\u8651\u7684\u591a\u7528\u9014\u865a\u62df\u673a\u3002 Azul VM/BEA Liquid VM Azul VM \u548c BEA Liquid VM\u662f\u7279\u5b9a\u786c\u4ef6\u5e73\u53f0\u4e13\u6709\u7684\u865a\u62df\u673a\uff0c\u5b83\u4eec\u5f80\u5f80\u6709\u66f4\u9ad8\u7684\u6027\u80fd\u3002 Azul VM\u662f\u5728HotSpot\u57fa\u7840\u4e0a\u8fdb\u2f8f\u2f24\u91cf\u6539\u8fdb\uff0c\u8fd0\u2f8f\u4e8e Azul Systems\u516c\u53f8\u7684\u4e13\u6709\u786c\u4ef6Vega\u7cfb\u7edf\u4e0a\u7684Java\u865a\u62df\u673a\uff0c\u6bcf\u4e2aAzul VM\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u7ba1\u7406\u2f84\u5c11\u6570\u2f17\u4e2aCPU\u548c\u6570\u767eGB\u5185\u5b58\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u5e76\u63d0\u4f9b\u5728\u5de8\u2f24\u5185\u5b58\u8303\u56f4\u5185\u5b9e\u73b0\u53ef\u63a7\u7684GC\u65f6\u95f4\u7684\u5783\u573e\u6536\u96c6\u5668\u3001\u4e3a\u4e13\u6709\u786c\u4ef6\u4f18\u5316\u7684\u7ebf\u7a0b\u8c03\u5ea6\u7b49\u4f18\u79c0\u7279\u6027\u3002 Liquid VM\u53ef\u4ee5\u76f4\u63a5\u8fd0\u2f8f\u5728\u2f83\u5bb6Hypervisor\u7cfb\u7edf\u4e0a\u7684JRockit VM\u7684\u865a\u62df\u5316\u7248\u672c\uff0c Liquid VM\u4e0d\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u7684\u2f40\u6301\uff0c\u6216\u8005\u8bf4\u5b83\u2f83\u2f30\u672c\u2f9d\u5b9e\u73b0\u4e86\u2f00\u4e2a\u4e13\u2f64\u64cd\u4f5c\u7cfb\u7edf\u7684\u5fc5\u8981\u529f\u80fd\uff0c\u5982\u2f42\u4ef6\u7cfb\u7edf\u3001\u2f79\u7edc\u2f40\u6301\u7b49\u3002\u7531\u865a\u62df\u673a\u8d8a\u8fc7\u901a\u2f64\u64cd\u4f5c\u7cfb \u7edf\u76f4\u63a5\u63a7\u5236\u786c\u4ef6\u53ef\u4ee5\u83b7\u5f97\u5f88\u591a\u597d\u5904\uff0c\u5982\u5728\u7ebf\u7a0b\u8c03\u5ea6\u65f6\uff0c\u4e0d\u9700\u8981\u518d\u8fdb\u2f8f\u5185\u6838\u6001/\u2f64\u6237\u6001\u7684\u5207\u6362\u7b49\uff0c\u8fd9\u6837\u53ef\u4ee5\u6700\u2f24\u9650\u5ea6\u5730\u53d1\u6325\u786c\u4ef6\u7684\u80fd\u2f12\uff0c\u63d0\u5347Java\u7a0b\u5e8f \u7684\u6267\u2f8f\u6027\u80fd\u3002","title":"Chapter 1 : \u8d70\u8fdbJava"},{"location":"java/ujvm/ch1/#java-1-java","text":"Java\u4e0d\u4ec5\u4ec5\u662f\u4e00\u95e8\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u8fd8\u662f\u4e00\u4e2a\u7531\u4e00\u7cfb\u5217\u8ba1\u7b97\u673a\u8f6f\u4ef6\u548c\u89c4\u8303\u5f62\u6210\u7684\u6280\u672f\u4f53\u7cfb\uff0c\u8fd9\u4e2a\u6280\u672f\u4f53\u7cfb\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684\u7528\u4e8e\u8f6f\u4ef6\u5f00\u53d1\u548c\u8de8\u5e73\u53f0\u90e8\u7f72\u7684\u652f\u6301\u73af\u5883\u3002 \u6309\u7167\u6280\u672f\u6240\u670d\u52a1\u7684\u9886\u57df \u6765\u5212\u5206\uff0cJava\u6280\u672f\u4f53\u7cfb\u53ef\u4ee5\u5206\u4e3a4\u4e2a\u5e73\u53f0\uff0c\u5206\u522b\u4e3a\uff1a Java Card\uff1a\u652f\u6301\u4e00\u4e9bJava\u5c0f\u7a0b\u5e8f\uff08Applets\uff09\u8fd0\u884c\u5728\u5c0f\u5185\u5b58\u8bbe\u5907\uff08\u5982\u667a\u80fd\u5361\uff09\u4e0a\u7684\u5e73\u53f0\u3002 Java ME\uff08Micro Edition\uff09\uff1a\u652f\u6301Java\u7a0b\u5e8f\u8fd0\u884c\u5728\u79fb\u52a8\u7ec8\u7aef\uff08\u624b\u673a\u3001PDA\uff09\u4e0a\u7684\u5e73\u53f0\uff0c\u5bf9Java API\u6709\u6240\u7cbe\u7b80\uff0c\u5e76\u52a0\u5165\u4e86\u9488\u5bf9\u79fb\u52a8\u7ec8\u7aef\u7684\u652f\u6301\uff0c\u8fd9\u4e2a\u7248\u672c\u4ee5\u524d\u79f0\u4e3aJ2ME\u3002 Java SE \uff08Standard Edition\uff09\uff1a\u652f\u6301\u9762\u5411\u684c\u9762\u7ea7\u5e94\u7528\uff08\u5982Windows\u4e0b\u7684\u5e94\u7528\u7a0b\u5e8f\uff09\u7684Java\u5e73\u53f0\uff0c\u63d0\u4f9b\u4e86\u5b8c\u6574\u7684Java\u6838\u5fc3API\uff0c\u8fd9\u4e2a\u7248\u672c\u4ee5\u524d\u79f0\u4e3aJ2SE\u3002 Java EE \uff08Enterprise Edition\uff09\uff1a\u652f\u6301\u4f7f\u7528\u591a\u5c42\u67b6\u6784\u7684\u4f01\u4e1a\u5e94\u7528\uff08\u5982ERP\u3001CRM\u5e94\u7528\uff09\u7684Java\u5e73\u53f0\uff0c\u9664\u4e86\u63d0\u4f9bJava SE API\u5916\uff0c\u8fd8\u5bf9\u5176\u505a\u4e86\u5927\u91cf\u7684\u6269\u5145\u5e76\u63d0\u4f9b\u4e86\u76f8\u5173\u7684\u90e8\u7f72\u652f\u6301\uff0c\u8fd9\u4e2a\u7248\u672c\u4ee5\u524d\u79f0\u4e3aJ2EE\u3002","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 1 - \u8d70\u8fdbJava"},{"location":"java/ujvm/ch1/#java","text":"JDK 1.0: Java\u865a\u62df\u673a\u3001Applet\u3001AWT\u7b49\uff1b JDK 1.1\uff1aJAR\u6587\u4ef6\u683c\u5f0f\u3001JDBC\u3001JavaBeans\u3001RMI\u3001\u5185\u90e8\u7c7b\u3001\u53cd\u5c04\uff1b JDK 1.2\uff1a\u62c6\u5206\u4e3aJ2SE/J2EE/J2ME\u3001\u5185\u7f6eJIT\u7f16\u8bd1\u5668\u3001\u4e00\u7cfb\u5217Collections\u96c6\u5408\u7c7b\uff1b JDK 1.3\uff1aJNDI\u670d\u52a1\u3001\u4f7f\u7528CORBA IIOP\u5b9e\u73b0RMI\u901a\u4fe1\u534f\u8bae\u3001Java 2D\u6539\u8fdb\uff1b JDK 1.4\uff1a\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u5f02\u5e38\u94fe\u3001NIO\u3001\u65e5\u5fd7\u7c7b\u3001XML\u89e3\u6790\u5668\u548cXSLT\u8f6c\u6362\u5668\uff1b JDK 1.5\uff1a\u81ea\u52a8\u88c5\u7bb1\u3001\u6cdb\u578b\u3001\u52a8\u6001\u6ce8\u89e3\u3001\u679a\u4e3e\u3001\u53ef\u53d8\u53c2\u6570\u3001\u904d\u5386\u5faa\u73af\u3001\u6539\u8fdb\u4e86Java\u5185\u5b58\u6a21\u578b\u3001\u63d0\u4f9b\u4e86java.util.concurrent\u5e76\u53d1\u5305\uff1b JDK 1.6\uff1a\u63d0\u4f9b\u52a8\u6001\u8bed\u8a00\u652f\u6301\u3001\u63d0\u4f9b\u7f16\u8bd1API\u548c\u5fae\u578bHTTP\u670d\u52a1\u5668API\u3001\u865a\u62df\u673a\u4f18\u5316\uff08\u9501\u4e0e\u540c\u6b65\u3001\u5783\u573e\u6536\u96c6\u3001\u7c7b\u52a0\u8f7d\u7b49\uff09\uff1b JDK 1.7\uff1aG1\u6536\u96c6\u5668\u3001\u52a0\u5f3a\u5bf9Java\u8bed\u8a00\u7684\u8c03\u7528\u652f\u6301\u3001\u5347\u7ea7\u7c7b\u52a0\u8f7d\u67b6\u6784\uff1b JDK 1.8\uff1aLambda\u8868\u8fbe\u5f0f\u7b49\uff1b","title":"Java\u53d1\u5c55\u53f2"},{"location":"java/ujvm/ch1/#java_1","text":"","title":"Java\u865a\u62df\u673a\u53d1\u5c55\u53f2"},{"location":"java/ujvm/ch1/#sun-classicexact-vm","text":"Sun Classic/Exact VM\u662f\u4e16\u754c\u4e0a\u7b2c\u4e00\u6b3e\u5546\u7528Java\u865a\u62df\u673a\u3002\u8fd9\u6b3e\u865a\u62df\u673a\u53ea\u80fd\u4f7f\u7528\u7eaf\u89e3\u91ca\u5668\u65b9\u5f0f\u6765\u6267\u884cJava\u4ee3\u7801\uff0c\u5982\u679c\u8981\u4f7f\u7528 JIT \u7f16\u8bd1\u5668\uff0c\u5c31\u5fc5\u987b\u8fdb\u884c\u5916\u6302\u3002\u4f46\u662f\u5047\u5982\u5916\u6302\u4e86JIT\u7f16\u8bd1\u5668\uff0c JIT\u7f16\u8bd1\u5668\u5c31\u5b8c\u5168\u63a5\u7ba1\u4e86\u865a\u62df\u673a\u7684\u6267\u884c\u7cfb\u7edf\uff0c\u89e3\u91ca\u5668\u4fbf\u4e0d\u518d\u5de5\u4f5c\u4e86\u3002Class VM\u5728JDK 1.2\u4e4b\u524d\u662f Sun JDK\u4e2d\u552f\u4e00\u7684\u865a\u62df\u673a\uff0c\u5728JDK 1.2\u65f6\uff0c\u5b83\u4e0eHotSpot VM\u5e76\u5b58\uff0c\u4f46\u9ed8\u8ba4\u4f7f\u7528\u7684\u662fClassic VM\u3002","title":"Sun Classic/Exact VM"},{"location":"java/ujvm/ch1/#sun-hotspot-vm","text":"HotSpot VM\u662fSun JDK\u548cOpenJDK\u4e2d\u6240\u5e26\u7684\u865a\u62df\u673a\uff0c\u4e5f\u662f\u2f6c\u524d\u4f7f\u2f64\u8303\u56f4\u6700\u2f34\u7684Java\u865a\u62df\u673a\u3002 HotSpot VM\u6700\u521d\u7531\u2f00\u5bb6\u540d\u4e3a\u201cLongview Technologies\u201d\u7684\u2f29\u516c\u53f8\u8bbe\u8ba1\u7684\uff0c\u540e\u6765\u88abSun\u6536\u8d2d\u3002 HotSpot VM\u65e2\u7ee7\u627f\u4e86Sun\u4e4b\u524d\u4e24\u6b3e\u5546\u7528\u865a\u62df\u673a\u7684\u4f18\u70b9(\u51c6\u786e\u5f0f\u5185\u5b58\u7ba1\u7406)\uff0c\u4e5f\u6709\u8bb8\u591a\u81ea\u5df1\u65b0\u7684\u6280\u672f\u4f18\u52bf\u3002HotSpot VM\u7684\u70ed\u70b9\u4ee3\u7801\u63a2\u6d4b\u80fd\u529b(\u8fd9\u662f\u4e3a\u4ec0\u4e48\u53ebhotspot\u7684\u539f\u56e0)\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u8ba1\u6570\u5668\u627e\u51fa\u6700\u5177\u6709\u7f16\u8bd1\u4ef7\u503c\u7684\u4ee3\u7801\uff0c\u7136\u540e\u901a\u77e5JIT\u7f16\u8bd1\u5668\u4ee5\u65b9\u6cd5\u4e3a\u5355\u4f4d\u8fdb\u884c\u7f16\u8bd1\u3002\u5982\u679c\u2f00\u4e2a\u2f45\u6cd5\u88ab\u9891\u7e41\u8c03\u2f64\uff0c\u6216\u2f45\u6cd5\u4e2d\u6709\u6548\u5faa\u73af\u6b21\u6570\u5f88\u591a\uff0c\u5c06\u4f1a\u5206\u522b\u89e6\u53d1\u6807\u51c6\u7f16\u8bd1\u548cOSR(\u6808\u4e0a\u66ff\u6362)\u7f16\u8bd1\u52a8\u4f5c\u3002\u901a\u8fc7\u7f16\u8bd1\u5668\u4e0e\u89e3\u91ca\u5668\u6070\u5f53\u5730\u534f\u540c\u2f2f\u4f5c\uff0c\u53ef\u4ee5\u5728\u6700\u4f18\u5316\u7684\u7a0b\u5e8f\u54cd\u5e94\u65f6\u95f4\u4e0e\u6700\u4f73\u6267\u2f8f\u6027\u80fd\u4e2d\u53d6\u5f97\u5e73\u8861\uff0c\u2f7d\u4e14\u2f46\u987b\u7b49\u5f85\u672c\u5730\u4ee3\u7801\u8f93\u51fa\u624d\u80fd\u6267\u2f8f\u7a0b\u5e8f\uff0c\u5373\u65f6\u7f16\u8bd1\u7684\u65f6\u95f4\u538b\u2f12\u4e5f\u76f8\u5bf9\u51cf\u2f29\uff0c\u8fd9\u6837\u6709\u52a9\u4e8e\u5f15\u2f0a\u66f4\u591a\u7684\u4ee3\u7801\u4f18\u5316\u6280\u672f\uff0c\u8f93\u51fa\u8d28\u91cf\u66f4\u2fbc\u7684\u672c\u5730\u4ee3\u7801\u3002","title":"Sun HotSpot VM"},{"location":"java/ujvm/ch1/#sun-mobile-embedded-vmmeta-circular-vm","text":"Sun\u516c\u53f8\u6240\u7814\u53d1\u7684\u865a\u62df\u673a\u53ef\u4e0d\u4ec5\u6709\u524d\u2faf\u4ecb\u7ecd\u7684\u670d\u52a1\u5668\u3001\u684c\u2faf\u9886\u57df\u7684\u5546 \u2f64\u865a\u62df\u673a\uff0c\u9664\u6b64\u4e4b\u5916\uff0cSun\u516c\u53f8\u2faf\u5bf9\u79fb\u52a8\u548c\u5d4c\u2f0a\u5f0f\u5e02\u573a\uff0c\u4e5f\u53d1\u5e03\u8fc7\u865a\u62df\u673a\u4ea7\u54c1\u3002\u5e38\u89c1\u7684\u6709KVM\uff0cCDC/CLDC HotSpot Implementation\u7b49\u3002","title":"Sun Mobile-Embedded VM/Meta-Circular VM"},{"location":"java/ujvm/ch1/#bea-jrockitibm-j9-vm","text":"\u9664\u4e86Sun\u516c\u53f8\u4ee5\u5916\uff0c\u5176\u4ed6\u7ec4\u7ec7\u3001\u516c \u53f8\u4e5f\u7814\u53d1\u8fc7\u4e0d\u5c11\u865a\u62df\u673a\u5b9e\u73b0\uff0c\u5176\u4e2d\u89c4\u6a21\u6700\u2f24\u3001\u6700\u8457\u540d\u7684\u5c31\u662fBEA\u548cIBM\u516c\u53f8\u4e86\u3002 JRockit VM\u66fe\u7ecf\u53f7\u79f0\u201c\u4e16\u754c\u4e0a\u901f\u5ea6\u6700\u5feb\u7684Java\u865a\u62df\u673a\u201d\u3002\u5b83\u662f\u2f00\u6b3e\u4e13\u95e8\u4e3a\u670d\u52a1\u5668\u786c\u4ef6\u548c\u670d\u52a1\u5668\u7aef\u5e94\u2f64\u573a\u666f\u2fbc\u5ea6\u4f18\u5316\u7684\u865a\u62df\u673a\uff0c\u4e13\u6ce8\u4e8e\u670d\u52a1\u5668\u7aef\u5e94\u7528\uff0c\u4e0d\u592a\u5173\u6ce8\u7a0b\u5e8f\u542f\u52a8\u901f\u5ea6\uff0c\u56e0\u6b64JRockit\u5185\u90e8\u4e0d\u5305\u542b\u89e3\u6790\u5668\u5b9e\u73b0\uff0c\u5168\u90e8\u4ee3\u7801\u90fd\u9760\u5373\u65f6\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u6267\u884c\u3002\u9664\u6b64\u4e4b\u5916\uff0c JRockit\u7684\u5783\u573e\u6536\u96c6\u5668\u548c MissionControl\u670d\u52a1\u5957\u4ef6\u7b49\u90e8\u5206\u7684\u5b9e\u73b0\uff0c\u5728\u4f17\u591aJava\u865a\u62df\u673a\u4e2d\u4e5f\u4e00\u76f4\u5904\u4e8e\u9886\u5148\u6c34\u5e73\u3002 IBM J9\u7684\u5e02\u573a\u5b9a\u4f4d\u4e0eSun HotSpot\u6bd4\u8f83\u63a5\u8fd1\uff0c\u5b83\u662f\u4e00\u6b3e\u8bbe\u8ba1\u4e0a\u4ece\u670d\u52a1\u5668\u7aef\u5230\u684c\u9762\u5e94\u7528\u518d\u5230\u5d4c\u5165\u5f0f\u90fd\u5168\u9762\u8003\u8651\u7684\u591a\u7528\u9014\u865a\u62df\u673a\u3002","title":"BEA JRockit/IBM J9 VM"},{"location":"java/ujvm/ch1/#azul-vmbea-liquid-vm","text":"Azul VM \u548c BEA Liquid VM\u662f\u7279\u5b9a\u786c\u4ef6\u5e73\u53f0\u4e13\u6709\u7684\u865a\u62df\u673a\uff0c\u5b83\u4eec\u5f80\u5f80\u6709\u66f4\u9ad8\u7684\u6027\u80fd\u3002 Azul VM\u662f\u5728HotSpot\u57fa\u7840\u4e0a\u8fdb\u2f8f\u2f24\u91cf\u6539\u8fdb\uff0c\u8fd0\u2f8f\u4e8e Azul Systems\u516c\u53f8\u7684\u4e13\u6709\u786c\u4ef6Vega\u7cfb\u7edf\u4e0a\u7684Java\u865a\u62df\u673a\uff0c\u6bcf\u4e2aAzul VM\u5b9e\u4f8b\u90fd\u53ef\u4ee5\u7ba1\u7406\u2f84\u5c11\u6570\u2f17\u4e2aCPU\u548c\u6570\u767eGB\u5185\u5b58\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u5e76\u63d0\u4f9b\u5728\u5de8\u2f24\u5185\u5b58\u8303\u56f4\u5185\u5b9e\u73b0\u53ef\u63a7\u7684GC\u65f6\u95f4\u7684\u5783\u573e\u6536\u96c6\u5668\u3001\u4e3a\u4e13\u6709\u786c\u4ef6\u4f18\u5316\u7684\u7ebf\u7a0b\u8c03\u5ea6\u7b49\u4f18\u79c0\u7279\u6027\u3002 Liquid VM\u53ef\u4ee5\u76f4\u63a5\u8fd0\u2f8f\u5728\u2f83\u5bb6Hypervisor\u7cfb\u7edf\u4e0a\u7684JRockit VM\u7684\u865a\u62df\u5316\u7248\u672c\uff0c Liquid VM\u4e0d\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u7684\u2f40\u6301\uff0c\u6216\u8005\u8bf4\u5b83\u2f83\u2f30\u672c\u2f9d\u5b9e\u73b0\u4e86\u2f00\u4e2a\u4e13\u2f64\u64cd\u4f5c\u7cfb\u7edf\u7684\u5fc5\u8981\u529f\u80fd\uff0c\u5982\u2f42\u4ef6\u7cfb\u7edf\u3001\u2f79\u7edc\u2f40\u6301\u7b49\u3002\u7531\u865a\u62df\u673a\u8d8a\u8fc7\u901a\u2f64\u64cd\u4f5c\u7cfb \u7edf\u76f4\u63a5\u63a7\u5236\u786c\u4ef6\u53ef\u4ee5\u83b7\u5f97\u5f88\u591a\u597d\u5904\uff0c\u5982\u5728\u7ebf\u7a0b\u8c03\u5ea6\u65f6\uff0c\u4e0d\u9700\u8981\u518d\u8fdb\u2f8f\u5185\u6838\u6001/\u2f64\u6237\u6001\u7684\u5207\u6362\u7b49\uff0c\u8fd9\u6837\u53ef\u4ee5\u6700\u2f24\u9650\u5ea6\u5730\u53d1\u6325\u786c\u4ef6\u7684\u80fd\u2f12\uff0c\u63d0\u5347Java\u7a0b\u5e8f \u7684\u6267\u2f8f\u6027\u80fd\u3002","title":"Azul VM/BEA Liquid VM"},{"location":"java/ujvm/ch10/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 10 - \u65e9\u671f(\u7f16\u8bd1\u671f)\u4f18\u5316","title":"Chapter 10 : \u65e9\u671f(\u7f16\u8bd1\u671f)\u4f18\u5316"},{"location":"java/ujvm/ch10/#java-10-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 10 - \u65e9\u671f(\u7f16\u8bd1\u671f)\u4f18\u5316"},{"location":"java/ujvm/ch11/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 11 - \u665a\u671f(\u8fd0\u884c\u671f)\u4f18\u5316","title":"Chapter 11 : \u665a\u671f(\u8fd0\u884c\u671f)\u4f18\u5316"},{"location":"java/ujvm/ch11/#java-11-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 11 - \u665a\u671f(\u8fd0\u884c\u671f)\u4f18\u5316"},{"location":"java/ujvm/ch12/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 12 - Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b \u5e76\u53d1\u5904\u7406\u7684\u5e7f\u6cdb\u5e94\u7528\u662f\u4f7f\u5f97Amdahl\u5b9a\u5f8b\u4ee3\u66ff\u6469\u5c14\u5b9a\u5f8b\u6210\u4e3a\u8ba1\u7b97\u673a\u6027\u80fd\u53d1\u5c55\u6e90\u52a8\u529b\u7684\u6839\u672c\u539f\u56e0\uff0c\u4e5f\u662f\u4eba\u7c7b\u201c\u538b\u69a8\u201d\u8ba1\u7b97\u673a\u8fd0\u7b97\u80fd\u529b\u7684\u6700\u6709\u529b\u6b66\u5668\u3002 1 \u6982\u8ff0 \u591a\u4efb\u52a1\u5904\u7406\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u51e0\u4e4e\u5df2\u662f\u4e00\u9879\u5fc5\u5907\u7684\u529f\u80fd\u4e86\uff1b \u9664\u4e86\u5145\u5206\u5229\u7528\u8ba1\u7b97\u673a\u5904\u7406\u5668\u7684\u80fd\u529b\u5916\uff0c\u4e00\u4e2a\u670d\u52a1\u7aef\u540c\u65f6\u5bf9\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u670d\u52a1\u5219\u662f\u53e6\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u5e76\u53d1\u5e94\u7528\u573a\u666f\uff1b\u670d\u52a1\u7aef\u662fJava\u8bed\u8a00\u6700\u64c5\u957f\u7684\u9886\u57df\u4e4b\u4e00\uff0c\u4e0d\u8fc7\u5982\u4f55\u5199\u597d\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\u5374\u53c8\u662f\u670d\u52a1\u7aef\u7a0b\u5e8f\u5f00\u53d1\u7684\u96be\u70b9\u4e4b\u4e00\uff0c\u5904\u7406\u597d\u5e76\u53d1\u65b9\u9762\u7684\u95ee\u9898\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684\u7f16\u7801\u7ecf\u9a8c\u6765\u652f\u6301\uff0c\u5e78\u597dJava\u8bed\u8a00\u548c\u865a\u62df\u673a\u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\uff0c\u628a\u5e76\u53d1\u7f16\u7801\u7684\u95e8\u69db\u964d\u4f4e\u4e86\u4e0d\u5c11\uff1b 2 \u786c\u4ef6\u7684\u6548\u7387\u4e0e\u4e00\u81f4\u6027 \u7f13\u5b58\u4e00\u81f4\u6027 \u57fa\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5b58\u50a8\u4ea4\u4e92\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u5904\u7406\u5668\u4e0e\u5185\u5b58\u7684\u901f\u5ea6\u77db\u76fe\uff0c\u4f46\u662f\u4e5f\u4e3a\u8ba1\u7b97\u673a\u7cfb\u7edf\u5e26\u6765\u66f4\u9ad8\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5b83\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff1a \u7f13\u5b58\u4e00\u81f4\u6027 (Cache Coherence)\u3002\u5728\u591a\u5904\u7406\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u6709\u81ea\u5df1\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u800c\u5b83\u4eec\u6709\u5171\u4eab\u540c\u4e00\u4e3b\u5185\u5b58(Main memory)\u3002 Cache coherence is the uniformity of shared resource data that ends up stored in multiple local caches. \u7f13\u5b58\u4e00\u81f4\u6027\u662f\u5b58\u50a8\u5728\u591a\u4e2a\u5c40\u90e8\u7f13\u5b58\u4e2d\u7684\u5171\u4eab\u8d44\u6e90\u7684\u4e00\u81f4\u6027\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e00\u81f4\u6027\u7684\u95ee\u9898\uff0c\u9700\u8981\u5404\u4e2a\u5904\u7406\u5668\u8bbf\u95ee\u7f13\u5b58\u65f6\u90fd\u9075\u5faa\u4e00\u4e9b\u534f\u8bae\uff0c\u5728\u8bfb\u5199\u65f6\u8981\u6839\u636e\u534f\u8bae\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u7c7b\u534f\u8bae\u6709MSI\u3001MESI\u3001MOSI\u3001Synapse\u3001Firefly\u53caDragon Protocol\u7b49\uff1bJava\u865a\u62df\u673a\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5185\u5b58\u8bbf\u95ee\u64cd\u4f5c\u4e0e\u786c\u4ef6\u7684\u7f13\u5b58\u8bbf\u95ee\u64cd\u4f5c\u662f\u5177\u6709\u53ef\u6bd4\u6027\u7684\u3002 \u4e71\u5e8f\u6267\u884c \u9664\u4e86\u589e\u52a0\u9ad8\u901f\u7f13\u5b58\u4e4b\u5916\uff0c\u4e3a\u4e86\u4f7f\u5f97\u5904\u7406\u5668\u5185\u90e8\u7684\u8fd0\u7b97\u5355\u5143\u80fd\u5c3d\u91cf\u88ab\u5145\u5206\u5229\u7528\uff0c\u5904\u7406\u5668\u53ef\u80fd\u4f1a\u5bf9\u8f93\u5165\u4ee3\u7801\u8fdb\u884c \u4e71\u5e8f\u6267\u884c (Out-Of-Order Execution)\u4f18\u5316\uff0c\u5904\u7406\u5668\u4f1a\u5728\u8ba1\u7b97\u4e4b\u540e\u5c06\u4e71\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u91cd\u7ec4\uff0c\u4fdd\u8bc1\u8be5\u7ed3\u679c\u4e0e\u987a\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684\uff1b\u4e0e\u5904\u7406\u5668\u7684\u4e71\u5e8f\u6267\u884c\u4f18\u5316\u7c7b\u4f3c\uff0cJava\u865a\u62df\u673a\u7684\u5373\u65f6\u7f16\u8bd1\u5668\u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684 \u6307\u4ee4\u91cd\u6392\u5e8f (Instruction Reorder)\u4f18\u5316\u3002 In-order v.s. Out-of-order Execution CSE P 548: Computer Architecture, University of Washington In-order execution \u987a\u5e8f\u6267\u884c instructions are fetched, executed and completed in compiler-generated order one stalls, they all stall instructions are statically scheduled Out-Of-Order execution \u4e71\u5e8f\u6267\u884c instructions are fetched in compiler-generated order instruction completion is in-oder. instructions are dynamically scheduled Dynamic Scheduling: CMU Computer Architecture In-order pipeline Problem : A true data dependency stalls dispatch of younger instructions into functional (execution) units Dispatch: Act of sending an instruction to a functional unit Out-of-order Execution (Dynamic Scheduling) Idea: Move the dependent instructions out of the way of independent ones Rest areas for dependent instructions: Reservation stations 3 Java\u5185\u5b58\u6a21\u578b Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u89c6\u56fe\u5b9a\u4e49\u4e00\u79cd Java\u5185\u5b58\u6a21\u578b (Java Memory Model, JMM\uff09\u6765\u5c4f\u853d\u6389\u5404\u79cd\u786c\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\u8bbf\u95ee\u5dee\u5f02\uff0c\u4ee5\u5b9e\u73b0\u8ba9Java\u7a0b\u5e8f\u5728\u5404\u79cd\u5e73\u53f0\u4e0b\u90fd\u80fd\u8fbe\u5230\u4e00\u81f4\u7684\u5185\u5b58\u8bbf\u95ee\u6548\u679c\u3002 Princeton COS 597C Memory model is a formal specification of how the memory system will appear to the programmer, eliminating the gap between the behavior expected by the programmer and the actual behavior supported by a system . [Adve's 1995] Memory model specifies: How Threads interact through memory What value a read can return When does a value update become visible to other Threads What assumptions are allowed to make about memory when writing a program or applying some program optimization \u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58 Java\u5185\u5b58\u6a21\u578b\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u5b9a\u4e49\u7a0b\u5e8f\u4e2d \u5404\u4e2a\u53d8\u91cf\u7684\u8bbf\u95ee\u89c4\u5219 \uff0c\u5373\u5728\u865a\u62df\u673a\u4e2d\u5c06\u53d8\u91cf\u5b58\u50a8\u5230\u5185\u5b58\u548c\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u53d8\u91cf\u8fd9\u6837\u7684\u5e95\u5c42\u7ec6\u8282.\u6b64\u5904\u7684\u53d8\u91cf\u4e0eJava\u7f16\u7a0b\u4e2d\u6240\u8bf4\u7684\u53d8\u91cf\u6709\u6240\u533a\u522b\uff0c\u5b83\u5305\u62ec\u4e86\u5b9e\u4f8b\u5b57\u6bb5\u3001\u9759\u6001\u5b57\u6bb5\u548c\u6784\u6210\u6570\u7ec4\u5bf9\u8c61\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u4e0e\u65b9\u6cd5\u53c2\u6570\uff0c\u56e0\u4e3a\u540e\u8005\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\uff0c\u4e0d\u4f1a\u88ab\u5171\u4eab\uff1b Java\u5185\u5b58\u6a21\u578b\u89c4\u5b9a\u4e86\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 \u4e3b\u5185\u5b58 (Main Meory)\u4e2d(\u6b64\u5904\u7684\u4e3b\u5185\u5b58\u4e0e\u4ecb\u7ecd\u7269\u7406\u786c\u4ef6\u65f6\u7684\u4e3b\u5185\u5b58\u540d\u5b57\u4e00\u6837\uff0c\u4e24\u8005\u4e5f\u53ef\u4ee5\u76f8\u4e92\u7c7b\u6bd4\uff0c\u4f46\u6b64\u5904\u4ec5\u662f\u865a\u62df\u673a\u5185\u5b58\u7684\u4e00\u90e8\u5206)\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8fd8\u6709\u81ea\u5df1\u7684 \u5de5\u4f5c\u5185\u5b58 (Working Memory, \u53ef\u4e0e\u524d\u9762\u6240\u8bb2\u7684\u5904\u7406\u5668\u9ad8\u901f\u7f13\u5b58\u7c7b\u6bd4)\uff0c\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e86\u88ab\u8be5\u7ebf\u7a0b\u4f7f\u7528\u5230\u7684\u53d8\u91cf\u7684\u4e3b\u5185\u5b58\u526f\u672c\u62f7\u8d1d\uff0c\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5fc5\u987b\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u5199\u4e3b\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u3002 \u5185\u5b58\u95f4\u4ea4\u4e92\u64cd\u4f5c \u5173\u4e8e\u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58\u4e4b\u95f4\u5177\u4f53\u7684\u4ea4\u4e92\u534f\u8bae\uff0c\u5373\u4e00\u4e2a\u53d8\u91cf\u5982\u4f55\u4ece\u4e3b\u5185\u5b58\u62f7\u8d1d\u5230\u5de5\u4f5c\u5185\u5b58\u3001\u5982\u4f55\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e4b\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\uff0cJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u516b\u79cd\u64cd\u4f5c\u6765\u5b8c\u6210\uff0c\u865a\u62df\u673a\u5b9e\u73b0\u65f6\u5fc5\u987b\u4fdd\u8bc1\u4e0b\u9762\u63d0\u53ca\u7684\u6bcf\u4e00\u79cd\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\u3001\u4e0d\u53ef\u518d\u5206\u7684\uff08\u5bf9\u4e8e double \u548c long \u7c7b\u578b\u7684\u53d8\u91cf\u7684\u67d0\u4e9b\u64cd\u4f5c\u5728\u67d0\u4e9b\u5e73\u53f0\u5141\u8bb8\u6709\u4f8b\u5916\uff09\uff1a lock (\u9501\u5b9a)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u6807\u8bc6\u4e3a\u4e00\u6761\u7ebf\u7a0b\u72ec\u5360\u7684\u72b6\u6001\u3002 unlock (\u89e3\u9501)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u5904\u7406\u9501\u5b9a\u7684\u72b6\u6001\u7684\u53d8\u91cf\u91ca\u653e\u51fa\u6765,\u91ca\u653e\u540e\u7684\u53d8\u91cf\u624d\u53ef\u4ee5\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\uff0c unlock \u4e4b\u524d\u5fc5\u987b\u5c06\u53d8\u91cf\u503c\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 read (\u8bfb\u53d6)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4ece\u4e3b\u5185\u5b58\u4f20\u8f93\u5230\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 load \u52a8\u4f5c\u4f7f\u7528\u3002 load (\u8f7d\u5165)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a read \u64cd\u4f5c\u4ece\u4e3b\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\u526f\u672c\u4e2d\u3002 use (\u4f7f\u7528)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9012\u7ed9\u6267\u884c\u5f15\u64ce\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u9700\u8981\u4f7f\u7528\u5230\u53d8\u91cf\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u5c06\u4f1a\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 assign (\u8d4b\u503c)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u4ece\u6267\u884c\u5f15\u64ce\u63a5\u5230\u7684\u503c\u8d4b\u503c\u7ed9\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 store (\u5b58\u50a8)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9001\u5230\u4e3b\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 write \u64cd\u4f5c\u4f7f\u7528\u3002 write (\u5199\u5165)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a store \u64cd\u4f5c\u4ece\u5de5\u4f5c\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\u4e2d\u3002 \u5982\u679c\u8981\u628a\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u590d\u5236\u5230\u5de5\u4f5c\u5185\u5b58\uff0c\u90a3\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c read \u548c load \u64cd\u4f5c\uff0c\u5982\u679c\u8981\u628a\u53d8\u91cf\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\uff0c\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c store \u548c write \u64cd\u4f5c\u3002Java\u5185\u5b58\u6a21\u578b\u53ea\u662f\u8981\u6c42\u4e0a\u8ff0\u4e24\u4e2a\u64cd\u4f5c\u5fc5\u987b\u6309\u987a\u5e8f\u6267\u884c\uff0c\u800c\u6ca1\u6709\u4fdd\u8bc1\u5fc5\u987b\u662f\u8fde\u7eed\u6267\u884c\u3002\u4e5f\u5c31\u662f\u8bf4 read \u4e0e load \u4e4b\u95f4\u3001 store \u4e0e write \u4e4b\u95f4\u662f\u53ef\u4ee5\u63d2\u5165\u5176\u5b83\u6307\u4ee4\u7684\uff0c\u5982\u679c\u5bf9\u4e3b\u5728\u5185\u4e2d\u7684\u53d8\u91cfa,b\u8fdb\u884c\u8bbf\u95ee\u65f6\uff0c\u4e00\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u987a\u5e8f\u662f read a\u3001 read b\u3001 load b\u3001 load a\u3002\u9664\u6b64\u4e4b\u5916\uff0cJava\u5185\u5b58\u6a21\u578b\u8fd8\u89c4\u5b9a\u4e86\u6267\u884c\u4e0a\u8ff0\u516b\u79cd\u57fa\u7840\u64cd\u4f5c\u65f6\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u89c4\u5219\uff1a \u4e0d\u5141\u8bb8 read \u548c load \u3001 store \u548c write \u64cd\u4f5c\u4e4b\u4e00\u5355\u72ec\u51fa\u73b0\uff0c\u5373\u4e0d\u5141\u8bb8\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u8bfb\u53d6\u4e86\u4f46\u5de5\u4f5c\u5185\u5b58\u4e0d\u63a5\u53d7\uff0c\u6216\u8005\u4ece\u5de5\u4f5c\u5185\u5b58\u53d1\u8d77\u56de\u5199\u4f46\u4e3b\u5185\u5b58\u4e0d\u63a5\u53d7\u7684\u60c5\u51b5\u51fa\u73b0\u3002 \u4e0d\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u4e22\u5f03\u5b83\u7684\u6700\u8fd1\u7684 assign \u64cd\u4f5c\uff0c\u5373\u53d8\u91cf\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u6539\u53d8(\u4e3a\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\u8d4b\u503c)\u4e86\u4e4b\u540e\u5fc5\u987b\u628a\u8be5\u53d8\u5316\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 \u4e00\u4e2a\u65b0\u53d8\u91cf\u53ea\u80fd\u5728\u4e3b\u5185\u5b58\u4e2d\u201c\u8bde\u751f\u201d\uff0c\u4e0d\u5141\u8bb8\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u672a\u88ab\u521d\u59cb\u5316( load \u548c assign )\u7684\u53d8\u91cf\uff0c\u6362\u8bdd\u8bf4\u5c31\u662f\u4e00\u4e2a\u53d8\u91cf\u5728\u5b9e\u65bd use \u548c store \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u6267\u884c\u8fc7\u4e86 assign \u548c load \u64cd\u4f5c\u3002 \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u4e8b\u5148\u6ca1\u6709\u88ab load \u64cd\u4f5c\u9501\u5b9a\uff0c\u5219\u4e0d\u5141\u8bb8\u5bf9\u5b83\u6267\u884c unlock \u64cd\u4f5c\uff1a\u4e5f\u4e0d\u5141\u8bb8\u53bb unlock \u4e00\u4e2a\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\u7684\u53d8\u91cf\u3002 \u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884c unlock \u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d(\u6267\u884c store \u548c write \u64cd\u4f5c)\u3002 \u5bf9\u4e8evolatile\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219 \u5173\u952e\u5b57 volatile \u53ef\u4ee5\u8bf4\u662fJava\u865a\u62df\u673a\u63d0\u4f9b\u7684\u6700\u8f7b\u91cf\u7ea7\u7684\u540c\u6b65\u673a\u5236\uff1b\u5f53\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e3a volatile \u4e4b\u540e\uff0c\u5b83\u5c06\u5177\u5907\u4e24\u79cd\u7279\u6027\uff1a\u7b2c\u4e00\u662f\u4fdd\u8bc1\u6b64\u53d8\u91cf\u5bf9\u6240\u6709\u7ebf\u7a0b\u7684 \u53ef\u89c1\u6027 \uff0c\u8fd9\u91cc\u7684\u53ef\u89c1\u6027\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u65b0\u7684\u503c\u5bf9\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u6765\u8bf4\u662f\u53ef\u4ee5\u7acb\u5373\u5f97\u77e5\u7684\uff0c\u800c\u666e\u901a\u7684\u53d8\u91cf\u7684\u503c\u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\u5747\u9700\u8981\u901a\u8fc7\u4e3b\u5185\u5b58\u6765\u5b8c\u6210\uff1b\u53e6\u5916\u4e00\u4e2a\u662f \u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316 \uff0c\u666e\u901a\u7684\u53d8\u91cf\u4ec5\u4ec5\u4f1a\u4fdd\u8bc1\u5728\u8be5\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u6240\u6709\u4f9d\u8d56\u8d4b\u503c\u7ed3\u679c\u7684\u5730\u65b9\u90fd\u80fd\u83b7\u53d6\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u80fd\u4fdd\u8bc1\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u7684\u987a\u5e8f\u4e0e\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u4e00\u81f4\uff1b volatile \u53d8\u91cf\u5728\u5404\u4e2a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e0d\u5b58\u5728\u4e00\u81f4\u6027\u95ee\u9898\u3002\u4f46\u4e0d\u80fd\u8bf4\u201c\u57fa\u4e8evolatile\u53d8\u91cf\u7684\u8fd0\u7b97\u5728\u5e76\u53d1\u4e0b\u65f6\u5b89\u5168\u7684\u201d\u3002 \u7531\u4e8e volatile \u53d8\u91cf\u53ea\u80fd\u4fdd\u8bc1\u53ef\u89c1\u6027\uff0c\u5728\u4e0d\u7b26\u5408\u4ee5\u4e0b\u4e24\u6761\u89c4\u5219\u7684\u8fd0\u7b97\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u4ecd\u7136\u8981\u901a\u8fc7\u52a0\u9501\u6765\u4fdd\u8bc1\u539f\u5b50\u6027\uff1a \u8fd0\u7b97\u7ed3\u679c\u5e76\u4e0d\u4f9d\u8d56\u53d8\u91cf\u7684\u5f53\u524d\u503c\u6216\u8005\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u5355\u4e00\u7684\u7ebf\u7a0b\u4fee\u6539\u53d8\u91cf\u7684\u503c \u53d8\u91cf\u4e0d\u9700\u8981\u4e0e\u5176\u4ed6\u7684\u72b6\u6001\u53d8\u91cf\u5171\u540c\u53c2\u4e0e\u4e0d\u53d8\u7ea6\u675f\uff1b \u4ee5\u4e0b\u573a\u666f\u5f88\u9002\u5408\u7528 volatile \u53d8\u91cf\u6765\u63a7\u5236\u5e76\u53d1\uff0c\u5f53 shutdown() \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u80fd\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u7684 doWork() \u65b9\u6cd5\u90fd\u7acb\u523b\u505c\u4e0b\u6765\u3002 volatile boolean shutdownRequested ; public void shutdown () { shutdownRequested = true ; } public void doWork () { while (! shutdownRequested ) { // do stuff } } volatile \u53d8\u91cf\u8bfb\u64cd\u4f5c\u7684\u6027\u80fd\u6d88\u8017\u4e0e\u666e\u901a\u53d8\u91cf\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u5dee\u522b\uff0c\u4f46\u662f\u5199\u64cd\u4f5c\u5219\u53ef\u80fd\u4f1a\u6162\u4e00\u4e9b\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u672c\u5730\u4ee3\u7801\u4e2d\u63d2\u5165\u8bb8\u591a\u5185\u5b58\u5c4f\u969c(Memory Barrier)\u6307\u4ee4\u6765\u4fdd\u8bc1\u5904\u7406\u5668\u4e0d\u53d1\u751f\u4e71\u5e8f\u6267\u884c\uff1b\u4e0d\u8fc7\u5927\u591a\u6570\u573a\u666f\u4e0b volatile \u7684\u603b\u5f00\u9500\u4ecd\u7136\u8981\u6bd4\u9501\u4f4e\uff0c\u6211\u4eec\u5728 volatile \u4e0e\u9501\u4e4b\u4e2d\u9009\u62e9\u7684\u552f\u4e00\u4f9d\u636e\u4ec5\u4ec5\u662f volatile \u7684\u8bed\u4e49\u80fd\u5426\u6ee1\u8db3\u4f7f\u7528\u573a\u666f\u7684\u9700\u6c42\uff1b Java\u5185\u5b58\u6a21\u578b\u4e2d\u5bf9 volatile \u53d8\u91cf\u5b9a\u4e49\u7684\u7279\u6b8a\u89c4\u5219(\u5047\u8bbeV\u8868\u793a volatile \u884c\u53d8\u91cf)\uff1a \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4f7f\u7528V\u524d\u90fd\u5fc5\u987b\u5148\u4ece\u4e3b\u5185\u5b58\u5237\u65b0\u6700\u65b0\u7684\u503c\uff0c\u7528\u4e8e\u4fdd\u8bc1\u80fd\u770b\u5230\u5176\u4ed6\u7ebf\u7a0b\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539\u540e\u7684\u503c \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4fee\u6539V\u4e4b\u540e\u90fd\u5fc5\u987b\u7acb\u523b\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\uff0c\u7528\u4e8e\u4fdd\u8bc1\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539 \u8981\u6c42V\u4e0d\u4f1a\u88ab\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316\uff0c\u4fdd\u8bc1\u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\u548c\u7a0b\u5e8f\u7684\u987a\u5e8f\u76f8\u540c\u3002 \u5bf9\u4e8elong\u548cdouble\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219 Java\u5185\u5b58\u6a21\u578b\u8981\u6c42 lock \u3001 unlock \u3001 read \u3001 load \u3001 assign \u3001 use \u3001 store \u3001 write \u8fd9\u516b\u4e2a\u64cd\u4f5c\u90fd\u5177\u6709\u539f\u5b50\u6027\u3002 \u4f46\u662f\u5bf9\u4e8e64\u4f4d\u7684\u6570\u636e\u7c7b\u578b(long\u548cdouble): \u5141\u8bb8\u865a\u62df\u673a\u5c06\u6ca1\u6709\u88ab volatile \u4fee\u9970\u768464\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u5212\u5206\u4e3a\u4e24\u6b2132\u4f4d\u7684\u64cd\u4f5c\u6765\u8fdb\u884c\uff0c\u5373\u5141\u8bb8\u865a\u62df\u673a\u5b9e\u73b0\u9009\u62e9\u53ef\u4ee5\u4e0d\u4fdd\u8bc164\u4f4d\u6570\u636e\u7c7b\u578b\u7684 read \u3001 load \u3001 store \u3001 write \u8fd94\u4e2a\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u8fd9\u70b9\u5c31\u662f\u6240\u8c13\u7684 long\u548cdouble\u7684\u975e\u539f\u5b50\u6027\u534f\u5b9a (Nonatomic Treatment of double and long Variables)\uff1b \u4f46\u5141\u8bb8\u865a\u62df\u673a\u9009\u62e9\u628a\u8fd9\u4e9b\u64cd\u4f5c\u5b9e\u73b0\u4e3a\u5177\u6709\u539f\u5b50\u6027\u7684\u64cd\u4f5c\uff0c\u76ee\u524d\u5404\u79cd\u5e73\u53f0\u4e0b\u7684\u5546\u7528\u865a\u62df\u673a\u51e0\u4e4e\u90fd\u9009\u62e9\u628a64\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u4f5c\u4e3a\u539f\u5b50\u64cd\u4f5c\u6765\u5bf9\u5f85\u3002 \u539f\u5b50\u6027\u3001\u53ef\u89c1\u6027\u4e0e\u6709\u5e8f\u6027 \u539f\u5b50\u6027 (Atomicity): \u7531Java\u5185\u5b58\u6a21\u578b\u6765\u76f4\u63a5\u4fdd\u8bc1\u7684\u539f\u5b50\u6027\u53d8\u91cf\u64cd\u4f5c\u5305\u62ec read \u3001 load \u3001 assign \u3001 use \u3001 store \u548cC write \u8fd9\u516d\u4e2a\u3002 lock \u3001 unlock \u64cd\u4f5c\u672a\u76f4\u63a5\u5f00\u653e\u7ed9\u7528\u6237\u4f7f\u7528, \u800c\u53cd\u6620\u5728\u540c\u6b65\u5757\u4e2d \u2014\u2014 synchronized \u5757\u4e4b\u95f4\u7684\u64cd\u4f5c\u4e5f\u5177\u5907\u539f\u5b50\u6027\uff1b \u53ef\u89c1\u6027 (Visibility)\uff1a\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u5171\u4eab\u53d8\u91cf\u7684\u503c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u80fd\u591f\u7acb\u5373\u5f97\u77e5\u8fd9\u4e2a\u4fee\u6539\u3002 volatile \u3001 synchronized \u548c final \u5173\u952e\u5b57\u80fd\u5b9e\u73b0\u53ef\u89c1\u6027\u3002 synchronized \u540c\u6b65\u5757\u7684\u53ef\u89c1\u6027\u662f\u7531\u201c\u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884cun lock \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\u201c\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\u3002 final \u5173\u952e\u5b57\u7684\u53ef\u89c1\u6027\u662f\u6307\uff0c\u88ab final \u4fee\u9970\u7684\u5b57\u6bb5\u5728\u6784\u9020\u5668\u4e2d\u4e00\u65e6\u88ab\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u5e76\u4e14\u6784\u9020\u5668\u6ca1\u6709\u628a\"this\"\u7684\u5f15\u7528\u4f20\u9012\u51fa\u53bb\uff0c\u90a3\u4e48\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u5c31\u80fd\u770b\u89c1 final \u5b57\u6bb5\u7684\u503c\u3002 \u6709\u5e8f\u6027 (Ordering)\uff1a\u5982\u679c\u5728\u672c\u7ebf\u7a0b\u5185\u89c2\u5bdf\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u6709\u5e8f\u7684\uff1b\u5982\u679c\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u89c2\u5bdf\u53e6\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u65e0\u5e8f\u7684\u3002Java\u8bed\u8a00\u63d0\u4f9b\u4e86 volatile \u548c synchronized \u4e24\u4e2a\u5173\u952e\u5b57\u6765\u4fdd\u8bc1\u7ebf\u7a0b\u4e4b\u95f4\u64cd\u4f5c\u7684\u6709\u5e8f\u6027, volatile \u5173\u952e\u5b57\u672c\u8eab\u5c31\u5305\u542b\u4e86\u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u7684\u8bed\u610f\uff0c\u800c synchronized \u662f\u7531\u201c\u4e00\u4e2a\u53d8\u91cf\u5728\u540c\u4e00\u65f6\u523b\u53ea\u5141\u8bb8\u4e00\u6761\u7ebf\u7a0b\u5bf9\u5176\u8fdb\u884c lock \u64cd\u4f5c\u201d\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\uff0c\u8fd9\u4e2a\u89c4\u5219\u51b3\u5b9a\u4e86\u6301\u6709\u540c\u4e00\u4e2a\u9501\u7684\u4e24\u4e2a\u540c\u6b65\u5757\u53ea\u80fd\u4e32\u884c\u7684\u8fdb\u5165\u3002 \u5148\u884c\u53d1\u751f\u539f\u5219 \u5148\u884c\u53d1\u751f (happens-before)\u539f\u5219\u662f\u5224\u65ad\u6570\u636e\u662f\u5426\u5b58\u5728\u7ade\u4e89\u3001\u7ebf\u7a0b\u662f\u5426\u5b89\u5168\u7684\u4e3b\u8981\u4f9d\u636e\u3002 \u5148\u884c\u53d1\u751f(happens-before)\u662fJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u4e24\u9879\u64cd\u4f5c\u4e4b\u95f4\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u5982\u679c\u8bf4\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u5176\u5b9e\u5c31\u662f\u8bf4\u5728\u53d1\u751f\u64cd\u4f5cB\u4e4b\u524d\uff0c\u64cd\u4f5cA\u4ea7\u751f\u7684\u5f71\u54cd\u80fd\u88ab\u64cd\u4f5cB\u89c2\u5bdf\u5230\uff0c\u5f71\u54cd\u5305\u62ec\u4e86\u4fee\u6539\u4e86\u5185\u5b58\u4e2d\u5171\u4eab\u53d8\u91cf\u7684\u503c\u3001\u53d1\u9001\u4e86\u6d88\u606f\u3001\u8c03\u7528\u4e86\u65b9\u6cd5\u7b49. \u4e0b\u9762\u662fJava\u5185\u5b58\u6a21\u578b\u4e0b\u4e00\u4e9b\u5929\u7136\u7684 \u5148\u884c\u53d1\u751f\u5173\u7cfb \u3002\u8fd9\u4e9b\u5148\u884c\u53d1\u751f\u5173\u7cfb\u65e0\u9700\u4efb\u4f55\u540c\u6b65\u5668\u534f\u52a9\u5c31\u53ef\u4ee5\u5b58\u5728\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u7684\u5173\u7cfb\u4e0d\u5728\u6b64\u5217\uff0c\u5e76\u4e14\u65e0\u6cd5\u4ece\u4ee5\u4e0b\u89c4\u5219\u63a8\u5bfc\u51fa\u6765\u7684\u8bdd\uff0c\u5b83\u4eec\u5c31\u6ca1\u6709\u987a\u5e8f\u6027\u4fdd\u969c\uff0c\u865a\u62df\u673a\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u968f\u610f\u7684\u91cd\u6392\u5e8f\uff1a \u7a0b\u5e8f\u6b21\u5e8f\u89c4\u5219 (Pragram Order Rule)\uff1a \u5728\u4e00\u4e2a\u7ebf\u7a0b\u5185 \uff0c\u6309\u7167\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u4e66\u5199\u5728\u524d\u9762\u7684\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u4e66\u5199\u5728\u540e\u9762\u7684\u64cd\u4f5c\u3002\u51c6\u786e\u5730\u8bf4\u5e94\u8be5\u662f\u63a7\u5236\u6d41\u987a\u5e8f\u800c\u4e0d\u662f\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u8003\u8651\u5206\u652f\u3001\u5faa\u73af\u7ed3\u6784\u3002 \u7ba1\u7a0b\u9501\u5b9a\u89c4\u5219 (Monitor lock Rule)\uff1a\u4e00\u4e2a unlock \u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u540c\u4e00\u4e2a\u9501\u7684 lock \u64cd\u4f5c\u3002\u8fd9\u91cc\u5fc5\u987b\u5f3a\u8c03\u7684\u662f\u540c\u4e00\u4e2a\u9501\uff0c\u800c\u201d\u540e\u9762\u201c\u662f\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 volatile \u53d8\u91cf\u89c4\u5219 (Volatile Variable Rule)\uff1a\u5bf9\u4e00\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u8bfb\u53d6\u64cd\u4f5c\uff0c\u8fd9\u91cc\u7684\u201d\u540e\u9762\u201c\u540c\u6837\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 \u7ebf\u7a0b\u542f\u52a8\u89c4\u5219 (Thread Start Rule)\uff1a Thread\u5bf9\u8c61\u7684 start() \u65b9\u6cd5\u5148\u884c\u53d1\u751f\u4e8e\u6b64\u7ebf\u7a0b\u7684\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u3002 \u7ebf\u7a0b\u7ec8\u6b62\u89c4\u5219 (Thread Termination Rule)\uff1a\u7ebf\u7a0b\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5148\u884c\u53d1\u751f\u4e8e\u5bf9\u6b64\u7ebf\u7a0b\u7684\u7ec8\u6b62\u68c0\u6d4b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Thread.join() \u65b9\u6cd5\u7ed3\u675f\uff0c Thread.isAlive() \u7684\u8fd4\u56de\u503c\u7b49\u4f5c\u6bb5\u68c0\u6d4b\u5230\u7ebf\u7a0b\u5df2\u7ecf\u7ec8\u6b62\u6267\u884c\u3002 \u7ebf\u7a0b\u4e2d\u65ad\u89c4 \u5219(Thread Interruption Rule)\uff1a\u5bf9\u7ebf\u7a0b interrupt() \u65b9\u6cd5\u7684\u8c03\u7528\u5148\u884c\u53d1\u751f\u4e8e\u88ab\u4e2d\u65ad\u7ebf\u7a0b\u7684\u4ee3\u7801\u68c0\u6d4b\u5230\u4e2d\u65ad\u4e8b\u4ef6\u7684\u53d1\u751f\uff0c\u53ef\u4ee5\u901a\u8fc7 Thread.interrupted() \u65b9\u6cd5\u68c0\u6d4b\u662f\u5426\u6709\u4e2d\u65ad\u53d1\u751f\u3002 \u5bf9\u8c61\u7ec8\u7ed3\u89c4\u5219 (Finalizer Rule)\uff1a\u4e00\u4e2a\u5bf9\u8c61\u521d\u59cb\u5316\u5b8c\u6210(\u6784\u9020\u65b9\u6cd5\u6267\u884c\u5b8c\u6210)\u5148\u884c\u53d1\u751f\u4e8e\u5b83\u7684 finalize() \u65b9\u6cd5\u7684\u5f00\u59cb\u3002 \u4f20\u9012\u6027 (Transitivity)\uff1a\u5982\u679c\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u64cd\u4f5cB\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\uff0c\u90a3\u5c31\u53ef\u4ee5\u5f97\u51fa\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\u7684\u7ed3\u8bba\u3002 \u65f6\u95f4\u5148\u540e\u987a\u5e8f\u4e0e\u5148\u884c\u53d1\u751f\u539f\u5219\u4e4b\u95f4\u57fa\u672c\u6ca1\u6709\u592a\u5927\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u8861\u91cf\u5e76\u53d1\u5b89\u5168\u95ee\u9898\u7684\u65f6\u5019\u4e0d\u8981\u53d7\u5230\u65f6\u95f4\u987a\u5e8f\u7684\u5e72\u6270\uff0c\u4e00\u5207\u5fc5\u987b\u4ee5\u5148\u884c\u53d1\u751f\u539f\u5219\u4e3a\u51c6\uff1b 4 Java\u4e0e\u7ebf\u7a0b \u7ebf\u7a0b\u7684\u5b9e\u73b0 \u7ebf\u7a0b\u662f\u6bd4\u8fdb\u7a0b\u66f4\u8f7b\u91cf\u7ea7\u7684\u8c03\u5ea6\u6267\u884c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u7684\u5f15\u5165\u53ef\u4ee5\u628a\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u5206\u914d\u548c\u6267\u884c\u8c03\u5ea6\u5206\u5f00\uff0c\u5404\u4e2a\u7ebf\u7a0b\u65e2\u53ef\u4ee5\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90\u53c8\u53ef\u4ee5\u72ec\u7acb\u8c03\u5ea6\u3002 Thread\u7c7b\u4e0e\u5927\u90e8\u5206\u7684Java API\u6709\u663e\u8457\u7684\u5dee\u522b\uff0c\u5b83\u7684\u6240\u6709\u5173\u952e\u65b9\u6cd5\u90fd\u662f\u58f0\u660e\u4e3a native \u7684\u3002Java\u7ebf\u7a0b\u662f\u57fa\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u539f\u751f\u7ebf\u7a0b\u6a21\u578b\u6765\u5b9e\u73b0\u7684\u3002 Note native \u4fee\u9970\u8bcd\u8bf4\u660e\uff0c\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u662f\u7528\u5176\u4ed6\u8bed\u8a00(C/C++)\u5b9e\u73b0\u7684\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7Java Native Interface (JNI, Java\u672c\u5730\u63a5\u53e3)\u8c03\u7528\u672c\u5730\u4ee3\u7801\u3002 Java\u7ebf\u7a0b\u8c03\u5ea6 Java\u8bed\u8a00\u4e00\u5171\u8bbe\u7f6e\u4e8610\u4e2a\u7ea7\u522b\u7684\u7ebf\u7a0b\u4f18\u5148\u7ea7( Thread.MIN_PRIORITY - Thread.MAX_PRIORITY )\u3002 /* The minimum priority that a Thread can have.*/ public static final int MIN_PRIORITY = 1 ; /* The default priority that is C assign /C ed to a Thread.*/ public static final int NORM_PRIORITY = 5 ; /* The maximum priority that a Thread can have. */ public static final int MAX_PRIORITY = 10 ; \u72b6\u6001\u8f6c\u6362 Java\u8bed\u8a00\u5b9a\u4e49\u4e86\u4e94\u79cd\u7ebf\u7a0b\u72b6\u6001\uff0c\u5728\u4efb\u610f\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e14\u53ea\u6709\u5176\u4e2d\u4e00\u79cd\u72b6\u6001\uff0c\u5206\u522b\u662f \u65b0\u5efa(New): Thread state for a Thread which has not yet started. \u8fd0\u884c(Runnable): Thread state for a runnable Thread. A Thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as processor. \u963b\u585e(Blocked): Thread state for a Thread blocked waiting for a monitor lock . A Thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait . \u65e0\u9650\u671f\u7b49\u5f85(Waiting): A Thread that is waiting indefinitely for another Thread to perform a particular action is in this state. wait() join() lock Support.park() \u9650\u671f\u7b49\u5f85(Timed Waiting): A Thread that is waiting for another Thread to perform an action for up to a specified waiting time is in this state. sleep() wait(long) join(long) lock Support.parkNanos(long) lock Support.parkUntil() \u7ed3\u675f(Terminated): A Thread that has exited is in this state.","title":"Chapter 12 : Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b"},{"location":"java/ujvm/ch12/#java-12-java","text":"\u5e76\u53d1\u5904\u7406\u7684\u5e7f\u6cdb\u5e94\u7528\u662f\u4f7f\u5f97Amdahl\u5b9a\u5f8b\u4ee3\u66ff\u6469\u5c14\u5b9a\u5f8b\u6210\u4e3a\u8ba1\u7b97\u673a\u6027\u80fd\u53d1\u5c55\u6e90\u52a8\u529b\u7684\u6839\u672c\u539f\u56e0\uff0c\u4e5f\u662f\u4eba\u7c7b\u201c\u538b\u69a8\u201d\u8ba1\u7b97\u673a\u8fd0\u7b97\u80fd\u529b\u7684\u6700\u6709\u529b\u6b66\u5668\u3002","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 12 - Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b"},{"location":"java/ujvm/ch12/#1","text":"\u591a\u4efb\u52a1\u5904\u7406\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u51e0\u4e4e\u5df2\u662f\u4e00\u9879\u5fc5\u5907\u7684\u529f\u80fd\u4e86\uff1b \u9664\u4e86\u5145\u5206\u5229\u7528\u8ba1\u7b97\u673a\u5904\u7406\u5668\u7684\u80fd\u529b\u5916\uff0c\u4e00\u4e2a\u670d\u52a1\u7aef\u540c\u65f6\u5bf9\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u670d\u52a1\u5219\u662f\u53e6\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u5e76\u53d1\u5e94\u7528\u573a\u666f\uff1b\u670d\u52a1\u7aef\u662fJava\u8bed\u8a00\u6700\u64c5\u957f\u7684\u9886\u57df\u4e4b\u4e00\uff0c\u4e0d\u8fc7\u5982\u4f55\u5199\u597d\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\u5374\u53c8\u662f\u670d\u52a1\u7aef\u7a0b\u5e8f\u5f00\u53d1\u7684\u96be\u70b9\u4e4b\u4e00\uff0c\u5904\u7406\u597d\u5e76\u53d1\u65b9\u9762\u7684\u95ee\u9898\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684\u7f16\u7801\u7ecf\u9a8c\u6765\u652f\u6301\uff0c\u5e78\u597dJava\u8bed\u8a00\u548c\u865a\u62df\u673a\u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\uff0c\u628a\u5e76\u53d1\u7f16\u7801\u7684\u95e8\u69db\u964d\u4f4e\u4e86\u4e0d\u5c11\uff1b","title":"1 \u6982\u8ff0"},{"location":"java/ujvm/ch12/#2","text":"","title":"2 \u786c\u4ef6\u7684\u6548\u7387\u4e0e\u4e00\u81f4\u6027"},{"location":"java/ujvm/ch12/#_1","text":"\u57fa\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5b58\u50a8\u4ea4\u4e92\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u5904\u7406\u5668\u4e0e\u5185\u5b58\u7684\u901f\u5ea6\u77db\u76fe\uff0c\u4f46\u662f\u4e5f\u4e3a\u8ba1\u7b97\u673a\u7cfb\u7edf\u5e26\u6765\u66f4\u9ad8\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5b83\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff1a \u7f13\u5b58\u4e00\u81f4\u6027 (Cache Coherence)\u3002\u5728\u591a\u5904\u7406\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u6709\u81ea\u5df1\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u800c\u5b83\u4eec\u6709\u5171\u4eab\u540c\u4e00\u4e3b\u5185\u5b58(Main memory)\u3002 Cache coherence is the uniformity of shared resource data that ends up stored in multiple local caches. \u7f13\u5b58\u4e00\u81f4\u6027\u662f\u5b58\u50a8\u5728\u591a\u4e2a\u5c40\u90e8\u7f13\u5b58\u4e2d\u7684\u5171\u4eab\u8d44\u6e90\u7684\u4e00\u81f4\u6027\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e00\u81f4\u6027\u7684\u95ee\u9898\uff0c\u9700\u8981\u5404\u4e2a\u5904\u7406\u5668\u8bbf\u95ee\u7f13\u5b58\u65f6\u90fd\u9075\u5faa\u4e00\u4e9b\u534f\u8bae\uff0c\u5728\u8bfb\u5199\u65f6\u8981\u6839\u636e\u534f\u8bae\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u7c7b\u534f\u8bae\u6709MSI\u3001MESI\u3001MOSI\u3001Synapse\u3001Firefly\u53caDragon Protocol\u7b49\uff1bJava\u865a\u62df\u673a\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5185\u5b58\u8bbf\u95ee\u64cd\u4f5c\u4e0e\u786c\u4ef6\u7684\u7f13\u5b58\u8bbf\u95ee\u64cd\u4f5c\u662f\u5177\u6709\u53ef\u6bd4\u6027\u7684\u3002","title":"\u7f13\u5b58\u4e00\u81f4\u6027"},{"location":"java/ujvm/ch12/#_2","text":"\u9664\u4e86\u589e\u52a0\u9ad8\u901f\u7f13\u5b58\u4e4b\u5916\uff0c\u4e3a\u4e86\u4f7f\u5f97\u5904\u7406\u5668\u5185\u90e8\u7684\u8fd0\u7b97\u5355\u5143\u80fd\u5c3d\u91cf\u88ab\u5145\u5206\u5229\u7528\uff0c\u5904\u7406\u5668\u53ef\u80fd\u4f1a\u5bf9\u8f93\u5165\u4ee3\u7801\u8fdb\u884c \u4e71\u5e8f\u6267\u884c (Out-Of-Order Execution)\u4f18\u5316\uff0c\u5904\u7406\u5668\u4f1a\u5728\u8ba1\u7b97\u4e4b\u540e\u5c06\u4e71\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u91cd\u7ec4\uff0c\u4fdd\u8bc1\u8be5\u7ed3\u679c\u4e0e\u987a\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684\uff1b\u4e0e\u5904\u7406\u5668\u7684\u4e71\u5e8f\u6267\u884c\u4f18\u5316\u7c7b\u4f3c\uff0cJava\u865a\u62df\u673a\u7684\u5373\u65f6\u7f16\u8bd1\u5668\u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684 \u6307\u4ee4\u91cd\u6392\u5e8f (Instruction Reorder)\u4f18\u5316\u3002 In-order v.s. Out-of-order Execution CSE P 548: Computer Architecture, University of Washington In-order execution \u987a\u5e8f\u6267\u884c instructions are fetched, executed and completed in compiler-generated order one stalls, they all stall instructions are statically scheduled Out-Of-Order execution \u4e71\u5e8f\u6267\u884c instructions are fetched in compiler-generated order instruction completion is in-oder. instructions are dynamically scheduled Dynamic Scheduling: CMU Computer Architecture In-order pipeline Problem : A true data dependency stalls dispatch of younger instructions into functional (execution) units Dispatch: Act of sending an instruction to a functional unit Out-of-order Execution (Dynamic Scheduling) Idea: Move the dependent instructions out of the way of independent ones Rest areas for dependent instructions: Reservation stations","title":"\u4e71\u5e8f\u6267\u884c"},{"location":"java/ujvm/ch12/#3-java","text":"Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u89c6\u56fe\u5b9a\u4e49\u4e00\u79cd Java\u5185\u5b58\u6a21\u578b (Java Memory Model, JMM\uff09\u6765\u5c4f\u853d\u6389\u5404\u79cd\u786c\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\u8bbf\u95ee\u5dee\u5f02\uff0c\u4ee5\u5b9e\u73b0\u8ba9Java\u7a0b\u5e8f\u5728\u5404\u79cd\u5e73\u53f0\u4e0b\u90fd\u80fd\u8fbe\u5230\u4e00\u81f4\u7684\u5185\u5b58\u8bbf\u95ee\u6548\u679c\u3002 Princeton COS 597C Memory model is a formal specification of how the memory system will appear to the programmer, eliminating the gap between the behavior expected by the programmer and the actual behavior supported by a system . [Adve's 1995] Memory model specifies: How Threads interact through memory What value a read can return When does a value update become visible to other Threads What assumptions are allowed to make about memory when writing a program or applying some program optimization","title":"3 Java\u5185\u5b58\u6a21\u578b"},{"location":"java/ujvm/ch12/#_3","text":"Java\u5185\u5b58\u6a21\u578b\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u5b9a\u4e49\u7a0b\u5e8f\u4e2d \u5404\u4e2a\u53d8\u91cf\u7684\u8bbf\u95ee\u89c4\u5219 \uff0c\u5373\u5728\u865a\u62df\u673a\u4e2d\u5c06\u53d8\u91cf\u5b58\u50a8\u5230\u5185\u5b58\u548c\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u53d8\u91cf\u8fd9\u6837\u7684\u5e95\u5c42\u7ec6\u8282.\u6b64\u5904\u7684\u53d8\u91cf\u4e0eJava\u7f16\u7a0b\u4e2d\u6240\u8bf4\u7684\u53d8\u91cf\u6709\u6240\u533a\u522b\uff0c\u5b83\u5305\u62ec\u4e86\u5b9e\u4f8b\u5b57\u6bb5\u3001\u9759\u6001\u5b57\u6bb5\u548c\u6784\u6210\u6570\u7ec4\u5bf9\u8c61\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u4e0e\u65b9\u6cd5\u53c2\u6570\uff0c\u56e0\u4e3a\u540e\u8005\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\uff0c\u4e0d\u4f1a\u88ab\u5171\u4eab\uff1b Java\u5185\u5b58\u6a21\u578b\u89c4\u5b9a\u4e86\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 \u4e3b\u5185\u5b58 (Main Meory)\u4e2d(\u6b64\u5904\u7684\u4e3b\u5185\u5b58\u4e0e\u4ecb\u7ecd\u7269\u7406\u786c\u4ef6\u65f6\u7684\u4e3b\u5185\u5b58\u540d\u5b57\u4e00\u6837\uff0c\u4e24\u8005\u4e5f\u53ef\u4ee5\u76f8\u4e92\u7c7b\u6bd4\uff0c\u4f46\u6b64\u5904\u4ec5\u662f\u865a\u62df\u673a\u5185\u5b58\u7684\u4e00\u90e8\u5206)\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8fd8\u6709\u81ea\u5df1\u7684 \u5de5\u4f5c\u5185\u5b58 (Working Memory, \u53ef\u4e0e\u524d\u9762\u6240\u8bb2\u7684\u5904\u7406\u5668\u9ad8\u901f\u7f13\u5b58\u7c7b\u6bd4)\uff0c\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e86\u88ab\u8be5\u7ebf\u7a0b\u4f7f\u7528\u5230\u7684\u53d8\u91cf\u7684\u4e3b\u5185\u5b58\u526f\u672c\u62f7\u8d1d\uff0c\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5fc5\u987b\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u5199\u4e3b\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u3002","title":"\u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58"},{"location":"java/ujvm/ch12/#_4","text":"\u5173\u4e8e\u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58\u4e4b\u95f4\u5177\u4f53\u7684\u4ea4\u4e92\u534f\u8bae\uff0c\u5373\u4e00\u4e2a\u53d8\u91cf\u5982\u4f55\u4ece\u4e3b\u5185\u5b58\u62f7\u8d1d\u5230\u5de5\u4f5c\u5185\u5b58\u3001\u5982\u4f55\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e4b\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\uff0cJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u516b\u79cd\u64cd\u4f5c\u6765\u5b8c\u6210\uff0c\u865a\u62df\u673a\u5b9e\u73b0\u65f6\u5fc5\u987b\u4fdd\u8bc1\u4e0b\u9762\u63d0\u53ca\u7684\u6bcf\u4e00\u79cd\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\u3001\u4e0d\u53ef\u518d\u5206\u7684\uff08\u5bf9\u4e8e double \u548c long \u7c7b\u578b\u7684\u53d8\u91cf\u7684\u67d0\u4e9b\u64cd\u4f5c\u5728\u67d0\u4e9b\u5e73\u53f0\u5141\u8bb8\u6709\u4f8b\u5916\uff09\uff1a lock (\u9501\u5b9a)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u6807\u8bc6\u4e3a\u4e00\u6761\u7ebf\u7a0b\u72ec\u5360\u7684\u72b6\u6001\u3002 unlock (\u89e3\u9501)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u5904\u7406\u9501\u5b9a\u7684\u72b6\u6001\u7684\u53d8\u91cf\u91ca\u653e\u51fa\u6765,\u91ca\u653e\u540e\u7684\u53d8\u91cf\u624d\u53ef\u4ee5\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\uff0c unlock \u4e4b\u524d\u5fc5\u987b\u5c06\u53d8\u91cf\u503c\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 read (\u8bfb\u53d6)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4ece\u4e3b\u5185\u5b58\u4f20\u8f93\u5230\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 load \u52a8\u4f5c\u4f7f\u7528\u3002 load (\u8f7d\u5165)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a read \u64cd\u4f5c\u4ece\u4e3b\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\u526f\u672c\u4e2d\u3002 use (\u4f7f\u7528)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9012\u7ed9\u6267\u884c\u5f15\u64ce\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u9700\u8981\u4f7f\u7528\u5230\u53d8\u91cf\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u5c06\u4f1a\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 assign (\u8d4b\u503c)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u4ece\u6267\u884c\u5f15\u64ce\u63a5\u5230\u7684\u503c\u8d4b\u503c\u7ed9\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 store (\u5b58\u50a8)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9001\u5230\u4e3b\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 write \u64cd\u4f5c\u4f7f\u7528\u3002 write (\u5199\u5165)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a store \u64cd\u4f5c\u4ece\u5de5\u4f5c\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\u4e2d\u3002 \u5982\u679c\u8981\u628a\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u590d\u5236\u5230\u5de5\u4f5c\u5185\u5b58\uff0c\u90a3\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c read \u548c load \u64cd\u4f5c\uff0c\u5982\u679c\u8981\u628a\u53d8\u91cf\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\uff0c\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c store \u548c write \u64cd\u4f5c\u3002Java\u5185\u5b58\u6a21\u578b\u53ea\u662f\u8981\u6c42\u4e0a\u8ff0\u4e24\u4e2a\u64cd\u4f5c\u5fc5\u987b\u6309\u987a\u5e8f\u6267\u884c\uff0c\u800c\u6ca1\u6709\u4fdd\u8bc1\u5fc5\u987b\u662f\u8fde\u7eed\u6267\u884c\u3002\u4e5f\u5c31\u662f\u8bf4 read \u4e0e load \u4e4b\u95f4\u3001 store \u4e0e write \u4e4b\u95f4\u662f\u53ef\u4ee5\u63d2\u5165\u5176\u5b83\u6307\u4ee4\u7684\uff0c\u5982\u679c\u5bf9\u4e3b\u5728\u5185\u4e2d\u7684\u53d8\u91cfa,b\u8fdb\u884c\u8bbf\u95ee\u65f6\uff0c\u4e00\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u987a\u5e8f\u662f read a\u3001 read b\u3001 load b\u3001 load a\u3002\u9664\u6b64\u4e4b\u5916\uff0cJava\u5185\u5b58\u6a21\u578b\u8fd8\u89c4\u5b9a\u4e86\u6267\u884c\u4e0a\u8ff0\u516b\u79cd\u57fa\u7840\u64cd\u4f5c\u65f6\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u89c4\u5219\uff1a \u4e0d\u5141\u8bb8 read \u548c load \u3001 store \u548c write \u64cd\u4f5c\u4e4b\u4e00\u5355\u72ec\u51fa\u73b0\uff0c\u5373\u4e0d\u5141\u8bb8\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u8bfb\u53d6\u4e86\u4f46\u5de5\u4f5c\u5185\u5b58\u4e0d\u63a5\u53d7\uff0c\u6216\u8005\u4ece\u5de5\u4f5c\u5185\u5b58\u53d1\u8d77\u56de\u5199\u4f46\u4e3b\u5185\u5b58\u4e0d\u63a5\u53d7\u7684\u60c5\u51b5\u51fa\u73b0\u3002 \u4e0d\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u4e22\u5f03\u5b83\u7684\u6700\u8fd1\u7684 assign \u64cd\u4f5c\uff0c\u5373\u53d8\u91cf\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u6539\u53d8(\u4e3a\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\u8d4b\u503c)\u4e86\u4e4b\u540e\u5fc5\u987b\u628a\u8be5\u53d8\u5316\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 \u4e00\u4e2a\u65b0\u53d8\u91cf\u53ea\u80fd\u5728\u4e3b\u5185\u5b58\u4e2d\u201c\u8bde\u751f\u201d\uff0c\u4e0d\u5141\u8bb8\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u672a\u88ab\u521d\u59cb\u5316( load \u548c assign )\u7684\u53d8\u91cf\uff0c\u6362\u8bdd\u8bf4\u5c31\u662f\u4e00\u4e2a\u53d8\u91cf\u5728\u5b9e\u65bd use \u548c store \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u6267\u884c\u8fc7\u4e86 assign \u548c load \u64cd\u4f5c\u3002 \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u4e8b\u5148\u6ca1\u6709\u88ab load \u64cd\u4f5c\u9501\u5b9a\uff0c\u5219\u4e0d\u5141\u8bb8\u5bf9\u5b83\u6267\u884c unlock \u64cd\u4f5c\uff1a\u4e5f\u4e0d\u5141\u8bb8\u53bb unlock \u4e00\u4e2a\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\u7684\u53d8\u91cf\u3002 \u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884c unlock \u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d(\u6267\u884c store \u548c write \u64cd\u4f5c)\u3002","title":"\u5185\u5b58\u95f4\u4ea4\u4e92\u64cd\u4f5c"},{"location":"java/ujvm/ch12/#volatile","text":"\u5173\u952e\u5b57 volatile \u53ef\u4ee5\u8bf4\u662fJava\u865a\u62df\u673a\u63d0\u4f9b\u7684\u6700\u8f7b\u91cf\u7ea7\u7684\u540c\u6b65\u673a\u5236\uff1b\u5f53\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e3a volatile \u4e4b\u540e\uff0c\u5b83\u5c06\u5177\u5907\u4e24\u79cd\u7279\u6027\uff1a\u7b2c\u4e00\u662f\u4fdd\u8bc1\u6b64\u53d8\u91cf\u5bf9\u6240\u6709\u7ebf\u7a0b\u7684 \u53ef\u89c1\u6027 \uff0c\u8fd9\u91cc\u7684\u53ef\u89c1\u6027\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u65b0\u7684\u503c\u5bf9\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u6765\u8bf4\u662f\u53ef\u4ee5\u7acb\u5373\u5f97\u77e5\u7684\uff0c\u800c\u666e\u901a\u7684\u53d8\u91cf\u7684\u503c\u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\u5747\u9700\u8981\u901a\u8fc7\u4e3b\u5185\u5b58\u6765\u5b8c\u6210\uff1b\u53e6\u5916\u4e00\u4e2a\u662f \u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316 \uff0c\u666e\u901a\u7684\u53d8\u91cf\u4ec5\u4ec5\u4f1a\u4fdd\u8bc1\u5728\u8be5\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u6240\u6709\u4f9d\u8d56\u8d4b\u503c\u7ed3\u679c\u7684\u5730\u65b9\u90fd\u80fd\u83b7\u53d6\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u80fd\u4fdd\u8bc1\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u7684\u987a\u5e8f\u4e0e\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u4e00\u81f4\uff1b volatile \u53d8\u91cf\u5728\u5404\u4e2a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e0d\u5b58\u5728\u4e00\u81f4\u6027\u95ee\u9898\u3002\u4f46\u4e0d\u80fd\u8bf4\u201c\u57fa\u4e8evolatile\u53d8\u91cf\u7684\u8fd0\u7b97\u5728\u5e76\u53d1\u4e0b\u65f6\u5b89\u5168\u7684\u201d\u3002 \u7531\u4e8e volatile \u53d8\u91cf\u53ea\u80fd\u4fdd\u8bc1\u53ef\u89c1\u6027\uff0c\u5728\u4e0d\u7b26\u5408\u4ee5\u4e0b\u4e24\u6761\u89c4\u5219\u7684\u8fd0\u7b97\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u4ecd\u7136\u8981\u901a\u8fc7\u52a0\u9501\u6765\u4fdd\u8bc1\u539f\u5b50\u6027\uff1a \u8fd0\u7b97\u7ed3\u679c\u5e76\u4e0d\u4f9d\u8d56\u53d8\u91cf\u7684\u5f53\u524d\u503c\u6216\u8005\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u5355\u4e00\u7684\u7ebf\u7a0b\u4fee\u6539\u53d8\u91cf\u7684\u503c \u53d8\u91cf\u4e0d\u9700\u8981\u4e0e\u5176\u4ed6\u7684\u72b6\u6001\u53d8\u91cf\u5171\u540c\u53c2\u4e0e\u4e0d\u53d8\u7ea6\u675f\uff1b \u4ee5\u4e0b\u573a\u666f\u5f88\u9002\u5408\u7528 volatile \u53d8\u91cf\u6765\u63a7\u5236\u5e76\u53d1\uff0c\u5f53 shutdown() \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u80fd\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u7684 doWork() \u65b9\u6cd5\u90fd\u7acb\u523b\u505c\u4e0b\u6765\u3002 volatile boolean shutdownRequested ; public void shutdown () { shutdownRequested = true ; } public void doWork () { while (! shutdownRequested ) { // do stuff } } volatile \u53d8\u91cf\u8bfb\u64cd\u4f5c\u7684\u6027\u80fd\u6d88\u8017\u4e0e\u666e\u901a\u53d8\u91cf\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u5dee\u522b\uff0c\u4f46\u662f\u5199\u64cd\u4f5c\u5219\u53ef\u80fd\u4f1a\u6162\u4e00\u4e9b\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u672c\u5730\u4ee3\u7801\u4e2d\u63d2\u5165\u8bb8\u591a\u5185\u5b58\u5c4f\u969c(Memory Barrier)\u6307\u4ee4\u6765\u4fdd\u8bc1\u5904\u7406\u5668\u4e0d\u53d1\u751f\u4e71\u5e8f\u6267\u884c\uff1b\u4e0d\u8fc7\u5927\u591a\u6570\u573a\u666f\u4e0b volatile \u7684\u603b\u5f00\u9500\u4ecd\u7136\u8981\u6bd4\u9501\u4f4e\uff0c\u6211\u4eec\u5728 volatile \u4e0e\u9501\u4e4b\u4e2d\u9009\u62e9\u7684\u552f\u4e00\u4f9d\u636e\u4ec5\u4ec5\u662f volatile \u7684\u8bed\u4e49\u80fd\u5426\u6ee1\u8db3\u4f7f\u7528\u573a\u666f\u7684\u9700\u6c42\uff1b Java\u5185\u5b58\u6a21\u578b\u4e2d\u5bf9 volatile \u53d8\u91cf\u5b9a\u4e49\u7684\u7279\u6b8a\u89c4\u5219(\u5047\u8bbeV\u8868\u793a volatile \u884c\u53d8\u91cf)\uff1a \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4f7f\u7528V\u524d\u90fd\u5fc5\u987b\u5148\u4ece\u4e3b\u5185\u5b58\u5237\u65b0\u6700\u65b0\u7684\u503c\uff0c\u7528\u4e8e\u4fdd\u8bc1\u80fd\u770b\u5230\u5176\u4ed6\u7ebf\u7a0b\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539\u540e\u7684\u503c \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4fee\u6539V\u4e4b\u540e\u90fd\u5fc5\u987b\u7acb\u523b\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\uff0c\u7528\u4e8e\u4fdd\u8bc1\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539 \u8981\u6c42V\u4e0d\u4f1a\u88ab\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316\uff0c\u4fdd\u8bc1\u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\u548c\u7a0b\u5e8f\u7684\u987a\u5e8f\u76f8\u540c\u3002","title":"\u5bf9\u4e8evolatile\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219"},{"location":"java/ujvm/ch12/#longdouble","text":"Java\u5185\u5b58\u6a21\u578b\u8981\u6c42 lock \u3001 unlock \u3001 read \u3001 load \u3001 assign \u3001 use \u3001 store \u3001 write \u8fd9\u516b\u4e2a\u64cd\u4f5c\u90fd\u5177\u6709\u539f\u5b50\u6027\u3002 \u4f46\u662f\u5bf9\u4e8e64\u4f4d\u7684\u6570\u636e\u7c7b\u578b(long\u548cdouble): \u5141\u8bb8\u865a\u62df\u673a\u5c06\u6ca1\u6709\u88ab volatile \u4fee\u9970\u768464\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u5212\u5206\u4e3a\u4e24\u6b2132\u4f4d\u7684\u64cd\u4f5c\u6765\u8fdb\u884c\uff0c\u5373\u5141\u8bb8\u865a\u62df\u673a\u5b9e\u73b0\u9009\u62e9\u53ef\u4ee5\u4e0d\u4fdd\u8bc164\u4f4d\u6570\u636e\u7c7b\u578b\u7684 read \u3001 load \u3001 store \u3001 write \u8fd94\u4e2a\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u8fd9\u70b9\u5c31\u662f\u6240\u8c13\u7684 long\u548cdouble\u7684\u975e\u539f\u5b50\u6027\u534f\u5b9a (Nonatomic Treatment of double and long Variables)\uff1b \u4f46\u5141\u8bb8\u865a\u62df\u673a\u9009\u62e9\u628a\u8fd9\u4e9b\u64cd\u4f5c\u5b9e\u73b0\u4e3a\u5177\u6709\u539f\u5b50\u6027\u7684\u64cd\u4f5c\uff0c\u76ee\u524d\u5404\u79cd\u5e73\u53f0\u4e0b\u7684\u5546\u7528\u865a\u62df\u673a\u51e0\u4e4e\u90fd\u9009\u62e9\u628a64\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u4f5c\u4e3a\u539f\u5b50\u64cd\u4f5c\u6765\u5bf9\u5f85\u3002","title":"\u5bf9\u4e8elong\u548cdouble\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219"},{"location":"java/ujvm/ch12/#_5","text":"\u539f\u5b50\u6027 (Atomicity): \u7531Java\u5185\u5b58\u6a21\u578b\u6765\u76f4\u63a5\u4fdd\u8bc1\u7684\u539f\u5b50\u6027\u53d8\u91cf\u64cd\u4f5c\u5305\u62ec read \u3001 load \u3001 assign \u3001 use \u3001 store \u548cC write \u8fd9\u516d\u4e2a\u3002 lock \u3001 unlock \u64cd\u4f5c\u672a\u76f4\u63a5\u5f00\u653e\u7ed9\u7528\u6237\u4f7f\u7528, \u800c\u53cd\u6620\u5728\u540c\u6b65\u5757\u4e2d \u2014\u2014 synchronized \u5757\u4e4b\u95f4\u7684\u64cd\u4f5c\u4e5f\u5177\u5907\u539f\u5b50\u6027\uff1b \u53ef\u89c1\u6027 (Visibility)\uff1a\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u5171\u4eab\u53d8\u91cf\u7684\u503c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u80fd\u591f\u7acb\u5373\u5f97\u77e5\u8fd9\u4e2a\u4fee\u6539\u3002 volatile \u3001 synchronized \u548c final \u5173\u952e\u5b57\u80fd\u5b9e\u73b0\u53ef\u89c1\u6027\u3002 synchronized \u540c\u6b65\u5757\u7684\u53ef\u89c1\u6027\u662f\u7531\u201c\u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884cun lock \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\u201c\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\u3002 final \u5173\u952e\u5b57\u7684\u53ef\u89c1\u6027\u662f\u6307\uff0c\u88ab final \u4fee\u9970\u7684\u5b57\u6bb5\u5728\u6784\u9020\u5668\u4e2d\u4e00\u65e6\u88ab\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u5e76\u4e14\u6784\u9020\u5668\u6ca1\u6709\u628a\"this\"\u7684\u5f15\u7528\u4f20\u9012\u51fa\u53bb\uff0c\u90a3\u4e48\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u5c31\u80fd\u770b\u89c1 final \u5b57\u6bb5\u7684\u503c\u3002 \u6709\u5e8f\u6027 (Ordering)\uff1a\u5982\u679c\u5728\u672c\u7ebf\u7a0b\u5185\u89c2\u5bdf\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u6709\u5e8f\u7684\uff1b\u5982\u679c\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u89c2\u5bdf\u53e6\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u65e0\u5e8f\u7684\u3002Java\u8bed\u8a00\u63d0\u4f9b\u4e86 volatile \u548c synchronized \u4e24\u4e2a\u5173\u952e\u5b57\u6765\u4fdd\u8bc1\u7ebf\u7a0b\u4e4b\u95f4\u64cd\u4f5c\u7684\u6709\u5e8f\u6027, volatile \u5173\u952e\u5b57\u672c\u8eab\u5c31\u5305\u542b\u4e86\u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u7684\u8bed\u610f\uff0c\u800c synchronized \u662f\u7531\u201c\u4e00\u4e2a\u53d8\u91cf\u5728\u540c\u4e00\u65f6\u523b\u53ea\u5141\u8bb8\u4e00\u6761\u7ebf\u7a0b\u5bf9\u5176\u8fdb\u884c lock \u64cd\u4f5c\u201d\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\uff0c\u8fd9\u4e2a\u89c4\u5219\u51b3\u5b9a\u4e86\u6301\u6709\u540c\u4e00\u4e2a\u9501\u7684\u4e24\u4e2a\u540c\u6b65\u5757\u53ea\u80fd\u4e32\u884c\u7684\u8fdb\u5165\u3002","title":"\u539f\u5b50\u6027\u3001\u53ef\u89c1\u6027\u4e0e\u6709\u5e8f\u6027"},{"location":"java/ujvm/ch12/#_6","text":"\u5148\u884c\u53d1\u751f (happens-before)\u539f\u5219\u662f\u5224\u65ad\u6570\u636e\u662f\u5426\u5b58\u5728\u7ade\u4e89\u3001\u7ebf\u7a0b\u662f\u5426\u5b89\u5168\u7684\u4e3b\u8981\u4f9d\u636e\u3002 \u5148\u884c\u53d1\u751f(happens-before)\u662fJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u4e24\u9879\u64cd\u4f5c\u4e4b\u95f4\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u5982\u679c\u8bf4\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u5176\u5b9e\u5c31\u662f\u8bf4\u5728\u53d1\u751f\u64cd\u4f5cB\u4e4b\u524d\uff0c\u64cd\u4f5cA\u4ea7\u751f\u7684\u5f71\u54cd\u80fd\u88ab\u64cd\u4f5cB\u89c2\u5bdf\u5230\uff0c\u5f71\u54cd\u5305\u62ec\u4e86\u4fee\u6539\u4e86\u5185\u5b58\u4e2d\u5171\u4eab\u53d8\u91cf\u7684\u503c\u3001\u53d1\u9001\u4e86\u6d88\u606f\u3001\u8c03\u7528\u4e86\u65b9\u6cd5\u7b49. \u4e0b\u9762\u662fJava\u5185\u5b58\u6a21\u578b\u4e0b\u4e00\u4e9b\u5929\u7136\u7684 \u5148\u884c\u53d1\u751f\u5173\u7cfb \u3002\u8fd9\u4e9b\u5148\u884c\u53d1\u751f\u5173\u7cfb\u65e0\u9700\u4efb\u4f55\u540c\u6b65\u5668\u534f\u52a9\u5c31\u53ef\u4ee5\u5b58\u5728\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u7684\u5173\u7cfb\u4e0d\u5728\u6b64\u5217\uff0c\u5e76\u4e14\u65e0\u6cd5\u4ece\u4ee5\u4e0b\u89c4\u5219\u63a8\u5bfc\u51fa\u6765\u7684\u8bdd\uff0c\u5b83\u4eec\u5c31\u6ca1\u6709\u987a\u5e8f\u6027\u4fdd\u969c\uff0c\u865a\u62df\u673a\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u968f\u610f\u7684\u91cd\u6392\u5e8f\uff1a \u7a0b\u5e8f\u6b21\u5e8f\u89c4\u5219 (Pragram Order Rule)\uff1a \u5728\u4e00\u4e2a\u7ebf\u7a0b\u5185 \uff0c\u6309\u7167\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u4e66\u5199\u5728\u524d\u9762\u7684\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u4e66\u5199\u5728\u540e\u9762\u7684\u64cd\u4f5c\u3002\u51c6\u786e\u5730\u8bf4\u5e94\u8be5\u662f\u63a7\u5236\u6d41\u987a\u5e8f\u800c\u4e0d\u662f\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u8003\u8651\u5206\u652f\u3001\u5faa\u73af\u7ed3\u6784\u3002 \u7ba1\u7a0b\u9501\u5b9a\u89c4\u5219 (Monitor lock Rule)\uff1a\u4e00\u4e2a unlock \u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u540c\u4e00\u4e2a\u9501\u7684 lock \u64cd\u4f5c\u3002\u8fd9\u91cc\u5fc5\u987b\u5f3a\u8c03\u7684\u662f\u540c\u4e00\u4e2a\u9501\uff0c\u800c\u201d\u540e\u9762\u201c\u662f\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 volatile \u53d8\u91cf\u89c4\u5219 (Volatile Variable Rule)\uff1a\u5bf9\u4e00\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u8bfb\u53d6\u64cd\u4f5c\uff0c\u8fd9\u91cc\u7684\u201d\u540e\u9762\u201c\u540c\u6837\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 \u7ebf\u7a0b\u542f\u52a8\u89c4\u5219 (Thread Start Rule)\uff1a Thread\u5bf9\u8c61\u7684 start() \u65b9\u6cd5\u5148\u884c\u53d1\u751f\u4e8e\u6b64\u7ebf\u7a0b\u7684\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u3002 \u7ebf\u7a0b\u7ec8\u6b62\u89c4\u5219 (Thread Termination Rule)\uff1a\u7ebf\u7a0b\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5148\u884c\u53d1\u751f\u4e8e\u5bf9\u6b64\u7ebf\u7a0b\u7684\u7ec8\u6b62\u68c0\u6d4b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Thread.join() \u65b9\u6cd5\u7ed3\u675f\uff0c Thread.isAlive() \u7684\u8fd4\u56de\u503c\u7b49\u4f5c\u6bb5\u68c0\u6d4b\u5230\u7ebf\u7a0b\u5df2\u7ecf\u7ec8\u6b62\u6267\u884c\u3002 \u7ebf\u7a0b\u4e2d\u65ad\u89c4 \u5219(Thread Interruption Rule)\uff1a\u5bf9\u7ebf\u7a0b interrupt() \u65b9\u6cd5\u7684\u8c03\u7528\u5148\u884c\u53d1\u751f\u4e8e\u88ab\u4e2d\u65ad\u7ebf\u7a0b\u7684\u4ee3\u7801\u68c0\u6d4b\u5230\u4e2d\u65ad\u4e8b\u4ef6\u7684\u53d1\u751f\uff0c\u53ef\u4ee5\u901a\u8fc7 Thread.interrupted() \u65b9\u6cd5\u68c0\u6d4b\u662f\u5426\u6709\u4e2d\u65ad\u53d1\u751f\u3002 \u5bf9\u8c61\u7ec8\u7ed3\u89c4\u5219 (Finalizer Rule)\uff1a\u4e00\u4e2a\u5bf9\u8c61\u521d\u59cb\u5316\u5b8c\u6210(\u6784\u9020\u65b9\u6cd5\u6267\u884c\u5b8c\u6210)\u5148\u884c\u53d1\u751f\u4e8e\u5b83\u7684 finalize() \u65b9\u6cd5\u7684\u5f00\u59cb\u3002 \u4f20\u9012\u6027 (Transitivity)\uff1a\u5982\u679c\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u64cd\u4f5cB\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\uff0c\u90a3\u5c31\u53ef\u4ee5\u5f97\u51fa\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\u7684\u7ed3\u8bba\u3002 \u65f6\u95f4\u5148\u540e\u987a\u5e8f\u4e0e\u5148\u884c\u53d1\u751f\u539f\u5219\u4e4b\u95f4\u57fa\u672c\u6ca1\u6709\u592a\u5927\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u8861\u91cf\u5e76\u53d1\u5b89\u5168\u95ee\u9898\u7684\u65f6\u5019\u4e0d\u8981\u53d7\u5230\u65f6\u95f4\u987a\u5e8f\u7684\u5e72\u6270\uff0c\u4e00\u5207\u5fc5\u987b\u4ee5\u5148\u884c\u53d1\u751f\u539f\u5219\u4e3a\u51c6\uff1b","title":"\u5148\u884c\u53d1\u751f\u539f\u5219"},{"location":"java/ujvm/ch12/#4-java","text":"","title":"4 Java\u4e0e\u7ebf\u7a0b"},{"location":"java/ujvm/ch12/#_7","text":"\u7ebf\u7a0b\u662f\u6bd4\u8fdb\u7a0b\u66f4\u8f7b\u91cf\u7ea7\u7684\u8c03\u5ea6\u6267\u884c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u7684\u5f15\u5165\u53ef\u4ee5\u628a\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u5206\u914d\u548c\u6267\u884c\u8c03\u5ea6\u5206\u5f00\uff0c\u5404\u4e2a\u7ebf\u7a0b\u65e2\u53ef\u4ee5\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90\u53c8\u53ef\u4ee5\u72ec\u7acb\u8c03\u5ea6\u3002 Thread\u7c7b\u4e0e\u5927\u90e8\u5206\u7684Java API\u6709\u663e\u8457\u7684\u5dee\u522b\uff0c\u5b83\u7684\u6240\u6709\u5173\u952e\u65b9\u6cd5\u90fd\u662f\u58f0\u660e\u4e3a native \u7684\u3002Java\u7ebf\u7a0b\u662f\u57fa\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u539f\u751f\u7ebf\u7a0b\u6a21\u578b\u6765\u5b9e\u73b0\u7684\u3002 Note native \u4fee\u9970\u8bcd\u8bf4\u660e\uff0c\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u662f\u7528\u5176\u4ed6\u8bed\u8a00(C/C++)\u5b9e\u73b0\u7684\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7Java Native Interface (JNI, Java\u672c\u5730\u63a5\u53e3)\u8c03\u7528\u672c\u5730\u4ee3\u7801\u3002","title":"\u7ebf\u7a0b\u7684\u5b9e\u73b0"},{"location":"java/ujvm/ch12/#java","text":"Java\u8bed\u8a00\u4e00\u5171\u8bbe\u7f6e\u4e8610\u4e2a\u7ea7\u522b\u7684\u7ebf\u7a0b\u4f18\u5148\u7ea7( Thread.MIN_PRIORITY - Thread.MAX_PRIORITY )\u3002 /* The minimum priority that a Thread can have.*/ public static final int MIN_PRIORITY = 1 ; /* The default priority that is C assign /C ed to a Thread.*/ public static final int NORM_PRIORITY = 5 ; /* The maximum priority that a Thread can have. */ public static final int MAX_PRIORITY = 10 ;","title":"Java\u7ebf\u7a0b\u8c03\u5ea6"},{"location":"java/ujvm/ch12/#_8","text":"Java\u8bed\u8a00\u5b9a\u4e49\u4e86\u4e94\u79cd\u7ebf\u7a0b\u72b6\u6001\uff0c\u5728\u4efb\u610f\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e14\u53ea\u6709\u5176\u4e2d\u4e00\u79cd\u72b6\u6001\uff0c\u5206\u522b\u662f \u65b0\u5efa(New): Thread state for a Thread which has not yet started. \u8fd0\u884c(Runnable): Thread state for a runnable Thread. A Thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as processor. \u963b\u585e(Blocked): Thread state for a Thread blocked waiting for a monitor lock . A Thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait . \u65e0\u9650\u671f\u7b49\u5f85(Waiting): A Thread that is waiting indefinitely for another Thread to perform a particular action is in this state. wait() join() lock Support.park() \u9650\u671f\u7b49\u5f85(Timed Waiting): A Thread that is waiting for another Thread to perform an action for up to a specified waiting time is in this state. sleep() wait(long) join(long) lock Support.parkNanos(long) lock Support.parkUntil() \u7ed3\u675f(Terminated): A Thread that has exited is in this state.","title":"\u72b6\u6001\u8f6c\u6362"},{"location":"java/ujvm/ch13/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 13 - \u7ebf\u7a0b\u5b89\u5168\u4e0e\u9501\u4f18\u5316 1\u6982\u8ff0 \u5bf9\u4e8e\u9ad8\u6548\u5e76\u53d1\u6765\u8bb2\uff0c\u9996\u5148\u9700\u8981\u4fdd\u8bc1\u5e76\u53d1\u7684\u6b63\u786e\u6027\uff0c\u7136\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u5b9e\u73b0\u9ad8\u6548\u3002\u672c\u7ae0\u5c31\u5148\u4ece\u5982\u4f55\u4fdd\u8bc1\u5e76\u53d1\u7684\u6b63\u786e\u6027\uff0c\u5982\u4f55\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u8bf4\u8d77\u3002 2 \u7ebf\u7a0b\u5b89\u5168 A class is thread-safe if it behaves correctly when accessed from multiple threads, regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code. [Java Concurrency in Practice] \u5f53\u591a\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u4e00\u4e2a\u7c7b\u65f6\uff0c\u4e0d\u7ba1\u8fd9\u4e9b\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6\u73af\u5883\u4e0b\u7684\u8c03\u5ea6\u548c\u4ea4\u66ff\u6267\u884c\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u540c\u6b65\uff0c\u6216\u8005\u5728\u8c03\u7528\u65b9\u8fdb\u884c\u5176\u4ed6\u7684\u534f\u8c03\u64cd\u4f5c\uff0c\u5b83\u7684\u884c\u4e3a\u8868\u73b0\u6b63\u786e\uff0c\u90a3\u8fd9\u4e2a\u7c7b\u662f \u7ebf\u7a0b\u5b89\u5168 \u7684\u3002 Thread-safe classes encapsulates any needed synchronization so that clients need not provide their own. Java\u8bed\u8a00\u4e2d\u7684\u7ebf\u7a0b\u5b89\u5168 \u6309\u7167\u7ebf\u7a0b\u5b89\u5168\u7684\u201c\u5b89\u5168\u7a0b\u5ea6\u201d\u7531\u5f3a\u81f3\u5f31\u6765\u6392\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06Java\u8bed\u8a00\u4e2d\u5404\u4e2a\u64cd\u4f5c\u5171\u4eab\u7684\u6570\u636e\u5206\u4e3a\u4ee5\u4e0b\u4e94\u7c7b\uff1a\u4e0d\u53ef\u53d8\u3001\u7edd\u5bf9\u7ebf\u7a0b\u5b89\u5168\u3001\u76f8\u5bf9\u7ebf\u7a0b\u5b89\u5168\u3001\u7ebf\u7a0b\u517c\u5bb9\u548c\u7ebf\u7a0b\u5bf9\u7acb\u3002 \u4e0d\u53ef\u53d8 \u4e0d\u53ef\u53d8 (Immutable)\u5bf9\u8c61\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u65e0\u8bba\u662f\u5bf9\u8c61\u7684\u65b9\u6cd5\u5b9e\u73b0\u8fd8\u662f\u65b9\u6cd5\u7684\u8c03\u7528\u8005\uff0c\u90fd\u4e0d\u9700\u8981\u518d\u8fdb\u884c\u4efb\u4f55\u7684\u7ebf\u7a0b\u5b89\u5168\u63aa\u65bd\u3002 Java\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u5171\u4eab\u6570\u636e\u662f\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u90a3\u4e48\u53ea\u8981\u5728\u5b9a\u4e49\u65f6\u4f7f\u7528 final \u5173\u952e\u5b57\u4fee\u9970\u5b83\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u65f6\u4e0d\u53d8\u7684\u3002\u5982\u679c\u5171\u4eab\u6570\u636e\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u5c31\u9700\u8981\u4fdd\u8bc1\u5bf9\u8c61\u7684\u884c\u4e3a\u4e0d\u4f1a\u5bf9\u5176\u72b6\u6001\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u624d\u884c\uff0c\u6bd4\u5982 String \u7c7b\u7684\u5bf9\u8c61\uff0c\u5b83\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6211\u4eec\u8c03\u7528\u5b83\u7684 substring() \u3001 replace() \u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5b83\u539f\u6765\u7684\u503c\uff0c\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u6784\u9020\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5e38\u7528\u7684\u4e0d\u53ef\u53d8\u7c7b\u578b\u8fd8\u6709\u679a\u4e3e\u7c7b\u578b\uff0c\u4ee5\u53ca java.lang.Number \u7684\u90e8\u5206\u5b50\u7c7b\uff0c\u5982 Long \u548c double \u7b49Wrapper\u7c7b\u578b\u3002 \u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168 \u5728Java API\u4e2d\u6807\u6ce8\u81ea\u5df1\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u7c7b\uff0c\u5927\u591a\u6570\u90fd\u4e0d\u662f\u7edd\u5bf9\u7684\u7ebf\u7a0b\u5b89\u5168\u3002 \u76f8\u5bf9\u7ebf\u7a0b\u5b89\u5168 \u7ebf\u7a0b\u76f8\u5bf9\u5b89\u5168 \u5c31\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0a\u6240\u8bb2\u7684\u7ebf\u7a0b\u5b89\u5168\uff0c\u5b83\u9700\u8981\u4fdd\u8bc1\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u5355\u72ec\u7684\u64cd\u4f5c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6211\u4eec\u5728\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981\u505a\u989d\u5916\u7684\u4fdd\u969c\u63aa\u65bd\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u987a\u5e8f\u7684\u8fde\u7eed\u8c03\u7528\uff0c\u5c31\u53ef\u80fd\u9700\u8981\u5728\u8c03\u7528\u7aef\u4f7f\u7528\u989d\u5916\u7684\u540c\u6b65\u624b\u6bb5\u6765\u4fdd\u8bc1\u8c03\u7528\u7684\u6b63\u786e\u6027\u3002 \u5728Java\u8bed\u8a00\u4e2d\uff0c\u5927\u90e8\u5206\u7684\u7ebf\u7a0b\u5b89\u5168\u7c7b\u90fd\u5c5e\u4e8e\u8fd9\u79cd\u7c7b\u578b\u3002 \u7ebf\u7a0b\u517c\u5bb9 \u7ebf\u7a0b\u517c\u5bb9 \u6307\u5bf9\u8c61\u672c\u8eab\u5e76\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5728\u8c03\u7528\u7aef\u6b63\u786e\u5730\u4f7f\u7528\u540c\u6b65\u624b\u6bb5\u6765\u4fdd\u8bc1\u5bf9\u8c61\u5728\u5e76\u53d1\u73af\u5883\u4e2d\u53ef\u4ee5\u5b89\u5168\u5730\u4f7f\u7528\uff1b\u6211\u4eec\u8bf4\u4e00\u4e2a\u7c7b\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u7edd\u5927\u591a\u6570\u65f6\u5019\u6307\u7684\u662f\u8fd9\u4e00\u79cd\u60c5\u51b5\uff1b \u7ebf\u7a0b\u5bf9\u7acb \u7ebf\u7a0b\u5bf9\u7acb \u662f\u6307\u65e0\u8bba\u8c03\u7528\u7aef\u662f\u5426\u91c7\u53d6\u4e86\u540c\u6b65\u63aa\u65bd\uff0c\u90fd\u65e0\u6cd5\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\u5e76\u53d1\u4f7f\u7528\u7684\u4ee3\u7801\uff0cJava\u8bed\u8a00\u4e2d\u5f88\u5c11\u51fa\u73b0\u3002\u5e38\u89c1\u7684\u7ebf\u7a0b\u5bf9\u7acb\u64cd\u4f5c\u8fd8\u6709 System.setIn() , System.setOut() , System.runFinalizersOnExit() \u7b49\u7b49\u3002 \u7ebf\u7a0b\u5b89\u5168\u7684\u5b9e\u73b0\u65b9\u6cd5 Synchronized \u5728Java\u91cc\u9762\uff0c\u6700\u57fa\u672c\u7684\u4e92\u65a5\u540c\u6b65\u624b\u6bb5\u5c31\u662f synchronized \u5173\u952e\u5b57\uff0c synchronized \u5173\u952e\u5b57\u7ecf\u8fc7\u7f16\u8bd1\u4ee5\u540e\uff0c\u4f1a\u5728\u540c\u6b65\u5757\u7684\u524d\u540e\u5206\u522b\u5f62\u6210 monitorenter \u548c monitorexit \u8fd9\u4e24\u4e2a\u5b57\u8282\u7801\u6307\u4ee4\uff0c\u8fd9\u4e24\u4e2a\u5b57\u8282\u7801\u90fd\u9700\u8981\u4e00\u4e2a reference \u7c7b\u578b\u7684\u53c2\u6570\u6765\u6307\u660e\u8981\u9501\u5b9a\u548c\u89e3\u9501\u7684\u5bf9\u8c61\u3002\u5982\u679cJava\u7a0b\u5e8f\u4e2d\u7684 synchronized \u660e\u786e\u5236\u5b9a\u4e86\u5bf9\u8c61\u53c2\u6570\uff0c\u90a3\u5c31\u662f\u8fd9\u4e2a\u5bf9\u8c61\u7684 reference \uff1b\u5982\u679c\u6ca1\u6709\u660e\u786e\u6307\u5b9a\uff0c\u90a3\u5c31\u6839\u636e synchronized \u4fee\u9970\u7684\u662f\u5b9e\u4f8b\u65b9\u6cd5\u8fd8\u662f\u7c7b\u65b9\u6cd5\uff0c\u53bb\u53d6\u5bf9\u5e94\u7684\u5bf9\u8c61\u4f5c\u4e3a\u9501\u5bf9\u8c61\u3002 Java Synchronized The monitorenter/monitorexit mechanism is used by the Java synchronized statement to coordinate access to an object among multiple threads. For example, when you write in Java code: static void Sort ( int [] array ) { // synchronize this operation so that some other thread can t // manipulate the array while we are sorting it. This assumes that other // threads also synchronize their accesses to the array. synchronized ( array ) { // now sort elements in array } } then JVM code like the following is generated: .method static Sort ([ I ) V aload_0 monitorenter ; lock object in local variable 0 ; now sort elements in array aload_0 monitorexit ; finished with object in local variable 0 return .end method \u8fd8\u6709\u4e24\u70b9\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u3002\u9996\u5148 synchronized \u540c\u6b65\u5757\u5bf9\u540c\u4e00\u4e2a\u7ebf\u7a0b\u6765\u8bf4\u662f\u53ef\u91cd\u5165\uff0c\u4e0d\u4f1a\u51fa\u73b0\u81ea\u5df1\u628a\u81ea\u5df1\u9501\u6b7b\u7684\u95ee\u9898\u3002\u5176\u6b21\uff0c\u540c\u6b65\u5757\u5728\u5df2\u8fdb\u5165\u7684\u7ebf\u7a0b\u6267\u884c\u5b8c\u4e4b\u524d\uff0c\u4f1a\u963b\u585e\u540e\u9762\u5176\u4ed6\u7ebf\u7a0b\u7684\u8fdb\u5165\u3002 ReentrantLock \u53e6\u5916\u8fd8\u53ef\u4ee5\u4f7f\u7528 java.util.concurrent \u5305\u4e2d\u7684\u91cd\u5165\u9501\uff08 ReentrantLock \uff09\u6765\u5b9e\u73b0\u540c\u6b65\u3002\u5728\u57fa\u672c\u7528\u6cd5\u4e0a\uff0c ReentrantLock \u4e0e synchronized \u5f88\u76f8\u4f3c\uff0c\u5b83\u4eec\u90fd\u5177\u5907\u4e00\u6837\u7684\u7ebf\u7a0b\u91cd\u5165\u7279\u6027\uff0c\u53ea\u662f\u4ee3\u7801\u5199\u6cd5\u4e0a\u6709\u70b9\u533a\u522b\u3002 \u4e0d\u8fc7 ReentrantLock \u6bd4 synchronized \u589e\u52a0\u4e86\u4e00\u4e9b\u9ad8\u7ea7\u529f\u80fd\uff1a\u7b49\u5f85\u53ef\u4e2d\u65ad\u3001\u53ef\u5b9e\u73b0\u516c\u5e73\u9501\u4ee5\u53ca\u9501\u53ef\u4ee5\u7ed1\u5b9a\u591a\u4e2a\u6761\u4ef6\uff1b \u7b49\u5f85\u53ef\u4e2d\u65ad: \u662f\u6307\u5f53\u6301\u6709\u9501\u7684\u7ebf\u7a0b\u957f\u671f\u4e0d\u91ca\u653e\u9501\u7684\u65f6\u5019\uff0c\u6b63\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\u53ef\u4ee5\u9009\u62e9\u653e\u5f03\u7b49\u5f85\uff0c\u6539\u4e3a\u5904\u7406\u5176\u4ed6\u4e8b\u60c5\uff0c\u53ef\u4e2d\u65ad\u7279\u6027\u5bf9\u5904\u7406\u6267\u884c\u65f6\u95f4\u975e\u5e38\u957f\u7684\u540c\u6b65\u5757\u5f88\u6709\u5e2e\u52a9\u3002 \u516c\u5e73\u9501: \u662f\u6307\u591a\u4e2a\u7ebf\u7a0b\u5728\u7b49\u5f85\u4e00\u4e2a\u540c\u4e00\u4e2a\u9501\u65f6\uff0c\u5fc5\u987b\u6309\u7167\u7533\u8bf7\u7684\u65f6\u95f4\u987a\u5e8f\u6765\u4e00\u6b21\u83b7\u5f97\u9501\uff1b synchronzied \u4e2d\u7684\u9501\u662f\u975e\u516c\u5e73\u7684\uff0c ReentrantLock \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e5f\u662f\u975e\u516c\u5e73\u7684\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5e26\u5e03\u5c14\u503c\u7684\u6784\u9020\u51fd\u6570\u8981\u6c42\u4f7f\u7528\u516c\u5e73\u9501( ReentrantLock \u200b ( boolean fair ) )\u3002 \u7ed1\u5b9a\u591a\u4e2a\u6761\u4ef6: \u662f\u6307\u4e00\u4e2a ReentrantLock \u5bf9\u8c61\u53ef\u4ee5\u540c\u65f6\u7ed1\u5b9a\u591a\u4e2a Condition \u5bf9\u8c61( ReentrantLock . newCondition () )\u3002[ Example ] \u53ef\u91cd\u5165 \u82e5\u4e00\u4e2a\u7a0b\u5e8f\u6216\u5b50\u7a0b\u5e8f\"\u5728\u4efb\u4f55\u65f6\u523b\u88ab\u4e2d\u65ad\uff0c\u7136\u540e\u88ab\u8c03\u5ea6\u6267\u884c\u53e6\u5916\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53c8\u8c03\u7528\u4e86\u8be5\u5b50\u7a0b\u5e8f\u4e0d\u4f1a\u51fa\u9519\", \u5219\u79f0\u5176\u4e3a \u53ef\u91cd\u5165 (Reentrant)\u7684\u3002 wikipedia \u82e5\u4e00\u4e2a\u65b9\u6cd5\u662f\u53ef\u91cd\u5165\u7684\uff0c\u5219\u8be5\u65b9\u6cd5\u5e94\u5f53\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\uff1a \u4e0d\u80fd\u542b\u6709\u9759\u6001\uff08\u5168\u5c40\uff09\u975e\u5e38\u91cf\u6570\u636e\u3002 \u4e0d\u80fd\u8fd4\u56de\u9759\u6001\uff08\u5168\u5c40\uff09\u975e\u5e38\u91cf\u6570\u636e\u7684\u5730\u5740\u3002 \u53ea\u80fd\u5904\u7406\u7531\u8c03\u7528\u8005\u63d0\u4f9b\u7684\u6570\u636e\u3002 \u4e0d\u80fd\u4f9d\u8d56\u4e8e\u5355\u4f8b\u6a21\u5f0f\u8d44\u6e90\u7684\u9501\u3002 \u8c03\u7528\u7684\u51fd\u6570\u4e5f\u5fc5\u9700\u662f\u53ef\u91cd\u5165\u7684\u3002 \u4e0a\u8ff0\u6761\u4ef6\u5c31\u662f\u8981\u6c42\u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728\u8c03\u7528\u6808\u7684\u5f53\u524d\u51fd\u6570\u6808\uff08frame\uff09\u4e0a\uff0c\u56e0\u6b64\u540c\u4e00\u6267\u884c\u7ebf\u7a0b\u91cd\u5165\u6267\u884c\u8be5\u51fd\u6570\u65f6\u52a0\u8f7d\u4e86\u65b0\u7684\u51fd\u6570\u5e27\uff0c\u4e0e\u524d\u4e00\u6b21\u6267\u884c\u8be5\u51fd\u6570\u65f6\u4f7f\u7528\u7684\u51fd\u6570\u5e27\u4e0d\u51b2\u7a81\u3001\u4e0d\u4e92\u76f8\u8986\u76d6\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u53ef\u91cd\u5165\u6267\u884c\u5b89\u5168\u3002 \u4f8b\u5982\u4e00\u4e0b\u4e24\u4e2aC\u51fd\u6570\u90fd\u662f\u53ef\u91cd\u5165\u7684\uff1a int f ( int i ) { return i + 2 ; } int g ( int i ) { return f ( i ) + 2 ; } \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8 \u5982\u679c\u4e00\u6bb5\u4ee3\u7801\u4e2d\u6240\u9700\u8981\u7684\u6570\u636e\u5fc5\u987b\u4e0e\u5176\u4ed6\u4ee3\u7801\u5171\u4eab\uff0c\u90a3\u5c31\u770b\u770b\u8fd9\u4e9b\u5171\u4eab\u6570\u636e\u7684\u4ee3\u7801\u662f\u5426\u80fd\u4fdd\u8bc1\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\uff1f\u5982\u679c\u80fd\u4fdd\u8bc1\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5171\u4eab\u6570\u636e\u7684\u53ef\u89c1\u8303\u56f4\u9650\u5236\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u5185\uff0c\u5b9e\u73b0\u4e86 \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8 (Thread Local Storage, TLS)\u3002\u8fd9\u6837\uff0c\u65e0\u987b\u540c\u6b65\u4e5f\u80fd\u4fdd\u8bc1\u7ebf\u7a0b\u4e4b\u95f4\u4e0d\u51fa\u73b0\u6570\u636e\u4e89\u7528\u7684\u95ee\u9898\u3002 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u90fd\u6709\u4e00\u4efd\u72ec\u7acb\u7684\u62f7\u8d1d\u3002\u901a\u8fc7\u4f7f\u7528\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u6280\u672f\uff0c\u53ef\u4ee5\u907f\u514d\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u95ee\u9898\u3002 \u53ef\u4ee5\u901a\u8fc7 java.lang.ThreadLocal \u7c7b\u6765\u5b9e\u73b0\u7ebf\u7a0b\u672c\u5730\u5b58\u50a8\u7684\u529f\u80fd\u3002 3 \u9501\u4f18\u5316 \u81ea\u65cb\u9501\u4e0e\u81ea\u9002\u5e94\u81ea\u65cb \u81ea\u65cb\u9501 : \u8ba9\u7ebf\u7a0b\u6267\u884c\u4e00\u4e2a\u5faa\u73af(\u5fd9\u7b49\u5f85, busy wait)\u3002 \u81ea\u9002\u5e94\u7684\u81ea\u65cb\u9501 : \u81ea\u65cb\u7684\u65f6\u95f4\u4e0d\u518d\u56fa\u5b9a\uff0c\u800c\u662f\u7531\u524d\u4e00\u6b21\u5728\u540c\u4e00\u4e2a\u9501\u4e0a\u7684\u81ea\u65cb\u65f6\u95f4\u53ca\u9501\u7684\u62e5\u6709\u8005\u7684\u72b6\u6001\u6765\u51b3\u5b9a\uff1b \u9501\u6d88\u9664 \u9501\u6d88\u9664 (Lock Elimination)\u662f\u6307\u865a\u62df\u673a\u5373\u65f6\u7f16\u8bd1\u5668\u5728\u8fd0\u884c\u65f6\uff0c\u5bf9\u4e00\u4e9b\u4ee3\u7801\u4e0a\u8981\u6c42\u540c\u6b65\uff0c\u4f46\u662f\u88ab\u68c0\u6d4b\u5230\u4e0d\u53ef\u80fd\u5b58\u5728\u5171\u4eab\u6570\u636e\u7ade\u4e89\u7684\u9501\u8fdb\u884c\u6d88\u9664\u3002\u9501\u6d88\u9664\u7684\u4e3b\u8981\u5224\u65ad\u4f9d\u636e\u6765\u6e90\u4e8e\u9003\u9038\u5206\u6790\u7684\u6570\u636e\u652f\u6301\u3002 \u9501\u7c97\u5316 \u9501\u7c97\u5316 (Lock Coarsening)\u662f\u6307\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u7d27\u8fde\u5728\u4e00\u8d77\u7684 unlock \uff0c lock \u64cd\u4f5c\uff0c\u5c06\u591a\u4e2a\u8fde\u7eed\u7684\u9501\u6269\u5c55\u6210\u4e00\u4e2a\u8303\u56f4\u66f4\u5927\u7684\u9501\u3002 \u8f7b\u91cf\u7ea7\u9501 \u8f7b\u91cf\u7ea7\u9501 (Lightweight Locking)\u57fa\u4e8e\u8fd9\u6837\u4e00\u79cd\u5047\u8bbe\uff0c\u5373\u5728\u771f\u5b9e\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u7a0b\u5e8f\u4e2d\u7684\u5927\u90e8\u5206\u540c\u6b65\u4ee3\u7801\u4e00\u822c\u90fd\u5904\u4e8e\u65e0\u9501\u7ade\u4e89\u72b6\u6001\uff08\u5373\u5355\u7ebf\u7a0b\u6267\u884c\u73af\u5883\uff09\uff0c\u5728\u65e0\u9501\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\u5b8c\u5168\u53ef\u4ee5\u907f\u514d\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u5c42\u9762\u7684\u91cd\u91cf\u7ea7\u4e92\u65a5\u9501\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u5728 monitorenter \u548c monitorexit \u4e2d\u53ea\u9700\u8981\u4f9d\u9760\u4e00\u6761CAS\u539f\u5b50\u6307\u4ee4\u5c31\u53ef\u4ee5\u5b8c\u6210\u9501\u7684\u83b7\u53d6\u53ca\u91ca\u653e\u3002\u5f53\u5b58\u5728\u9501\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\uff0c\u6267\u884cCAS\u6307\u4ee4\u5931\u8d25\u7684\u7ebf\u7a0b\u5c06\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e92\u65a5\u9501\u8fdb\u5165\u5230\u963b\u585e\u72b6\u6001\uff0c\u5f53\u9501\u88ab\u91ca\u653e\u7684\u65f6\u5019\u88ab\u5524\u9192\u3002 \u5bf9\u4e8e\u7edd\u5927\u90e8\u5206\u7684\u9501\uff0c\u5728\u6574\u4e2a\u540c\u6b65\u5468\u671f\u5185\u90fd\u662f\u4e0d\u5b58\u5728\u7ade\u4e89\u7684\u3002 \u5bf9\u8c61\u5934 \u5728JVM\u4e2d\u521b\u5efa\u5bf9\u8c61\u65f6\u4f1a\u5728\u5bf9\u8c61\u524d\u9762\u52a0\u4e0a\u4e24\u4e2a\u5b57\u5927\u5c0f\u7684\u5bf9\u8c61\u5934(Object Header)\uff0c\u572864\u4f4d\u865a\u62df\u673a\u4e0a\u4e3a64\u4f4d\u3002\u6839\u636e\u4e0d\u540c\u7684\u72b6\u6001\u4f4d\u5bf9\u8c61\u5934\u4e2d\u5b58\u653e\u4e0d\u540c\u7684\u5185\u5bb9\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u5728\u8f7b\u91cf\u7ea7\u9501\u4e2d\uff0c\u5bf9\u8c61\u5934\u88ab\u5206\u6210\u4e24\u90e8\u5206\uff0c\u521a\u5f00\u59cb\u65f6\u5bf9\u8c61\u5934\u4e3a\u88ab\u8bbe\u7f6e\u4e3aHashCode\u3001\u6700\u4f4e\u4e09\u4f4d\u8868\u793aLockWord\u6240\u5904\u7684\u72b6\u6001\uff0c\u521d\u59cb\u72b6\u6001\u4e3a001\u8868\u793a\u65e0\u9501\u72b6\u6001\u3002Klass ptr\u6307\u5411Class\u5b57\u8282\u7801\u5728\u865a\u62df\u673a\u5185\u90e8\u7684\u5bf9\u8c61\u8868\u793a\u7684\u5730\u5740\u3002Fields\u8868\u793a\u8fde\u7eed\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5b57\u6bb5\u3002 \u3002\u3002\u3002\u5f85\u7eed \u504f\u5411\u9501 \u504f\u5411\u9501 (Biased Locking)\u662f\u4e3a\u4e86\u5728\u65e0\u9501\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\u907f\u514d\u5728\u9501\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u6267\u884c\u4e0d\u5fc5\u8981\u7684CAS\u539f\u5b50\u6307\u4ee4\uff0c\u56e0\u4e3aCAS\u539f\u5b50\u6307\u4ee4\u867d\u7136\u76f8\u5bf9\u4e8e\u91cd\u91cf\u7ea7\u9501\u6765\u8bf4\u5f00\u9500\u6bd4\u8f83\u5c0f\u4f46\u8fd8\u662f\u5b58\u5728\u975e\u5e38\u53ef\u89c2\u7684\u672c\u5730\u5ef6\u8fdf\u3002","title":"Chapter 13 : \u7ebf\u7a0b\u5b89\u5168\u4e0e\u9501\u4f18\u5316"},{"location":"java/ujvm/ch13/#java-13-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 13 - \u7ebf\u7a0b\u5b89\u5168\u4e0e\u9501\u4f18\u5316"},{"location":"java/ujvm/ch13/#1","text":"\u5bf9\u4e8e\u9ad8\u6548\u5e76\u53d1\u6765\u8bb2\uff0c\u9996\u5148\u9700\u8981\u4fdd\u8bc1\u5e76\u53d1\u7684\u6b63\u786e\u6027\uff0c\u7136\u540e\u5728\u6b64\u57fa\u7840\u4e0a\u5b9e\u73b0\u9ad8\u6548\u3002\u672c\u7ae0\u5c31\u5148\u4ece\u5982\u4f55\u4fdd\u8bc1\u5e76\u53d1\u7684\u6b63\u786e\u6027\uff0c\u5982\u4f55\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u8bf4\u8d77\u3002","title":"1\u6982\u8ff0"},{"location":"java/ujvm/ch13/#2","text":"A class is thread-safe if it behaves correctly when accessed from multiple threads, regardless of the scheduling or interleaving of the execution of those threads by the runtime environment, and with no additional synchronization or other coordination on the part of the calling code. [Java Concurrency in Practice] \u5f53\u591a\u4e2a\u7ebf\u7a0b\u8bbf\u95ee\u4e00\u4e2a\u7c7b\u65f6\uff0c\u4e0d\u7ba1\u8fd9\u4e9b\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6\u73af\u5883\u4e0b\u7684\u8c03\u5ea6\u548c\u4ea4\u66ff\u6267\u884c\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u8fdb\u884c\u989d\u5916\u7684\u540c\u6b65\uff0c\u6216\u8005\u5728\u8c03\u7528\u65b9\u8fdb\u884c\u5176\u4ed6\u7684\u534f\u8c03\u64cd\u4f5c\uff0c\u5b83\u7684\u884c\u4e3a\u8868\u73b0\u6b63\u786e\uff0c\u90a3\u8fd9\u4e2a\u7c7b\u662f \u7ebf\u7a0b\u5b89\u5168 \u7684\u3002 Thread-safe classes encapsulates any needed synchronization so that clients need not provide their own.","title":"2 \u7ebf\u7a0b\u5b89\u5168"},{"location":"java/ujvm/ch13/#java","text":"\u6309\u7167\u7ebf\u7a0b\u5b89\u5168\u7684\u201c\u5b89\u5168\u7a0b\u5ea6\u201d\u7531\u5f3a\u81f3\u5f31\u6765\u6392\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06Java\u8bed\u8a00\u4e2d\u5404\u4e2a\u64cd\u4f5c\u5171\u4eab\u7684\u6570\u636e\u5206\u4e3a\u4ee5\u4e0b\u4e94\u7c7b\uff1a\u4e0d\u53ef\u53d8\u3001\u7edd\u5bf9\u7ebf\u7a0b\u5b89\u5168\u3001\u76f8\u5bf9\u7ebf\u7a0b\u5b89\u5168\u3001\u7ebf\u7a0b\u517c\u5bb9\u548c\u7ebf\u7a0b\u5bf9\u7acb\u3002 \u4e0d\u53ef\u53d8 \u4e0d\u53ef\u53d8 (Immutable)\u5bf9\u8c61\u4e00\u5b9a\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u65e0\u8bba\u662f\u5bf9\u8c61\u7684\u65b9\u6cd5\u5b9e\u73b0\u8fd8\u662f\u65b9\u6cd5\u7684\u8c03\u7528\u8005\uff0c\u90fd\u4e0d\u9700\u8981\u518d\u8fdb\u884c\u4efb\u4f55\u7684\u7ebf\u7a0b\u5b89\u5168\u63aa\u65bd\u3002 Java\u8bed\u8a00\u4e2d\uff0c\u5982\u679c\u5171\u4eab\u6570\u636e\u662f\u4e00\u4e2a\u57fa\u672c\u6570\u636e\u7c7b\u578b\uff0c\u90a3\u4e48\u53ea\u8981\u5728\u5b9a\u4e49\u65f6\u4f7f\u7528 final \u5173\u952e\u5b57\u4fee\u9970\u5b83\u5c31\u53ef\u4ee5\u4fdd\u8bc1\u5b83\u65f6\u4e0d\u53d8\u7684\u3002\u5982\u679c\u5171\u4eab\u6570\u636e\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u90a3\u5c31\u9700\u8981\u4fdd\u8bc1\u5bf9\u8c61\u7684\u884c\u4e3a\u4e0d\u4f1a\u5bf9\u5176\u72b6\u6001\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u624d\u884c\uff0c\u6bd4\u5982 String \u7c7b\u7684\u5bf9\u8c61\uff0c\u5b83\u662f\u4e00\u4e2a\u5178\u578b\u7684\u4e0d\u53ef\u53d8\u5bf9\u8c61\uff0c\u6211\u4eec\u8c03\u7528\u5b83\u7684 substring() \u3001 replace() \u8fd9\u4e9b\u65b9\u6cd5\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5b83\u539f\u6765\u7684\u503c\uff0c\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u6784\u9020\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\u3002 \u9664\u6b64\u4e4b\u5916\uff0c\u5e38\u7528\u7684\u4e0d\u53ef\u53d8\u7c7b\u578b\u8fd8\u6709\u679a\u4e3e\u7c7b\u578b\uff0c\u4ee5\u53ca java.lang.Number \u7684\u90e8\u5206\u5b50\u7c7b\uff0c\u5982 Long \u548c double \u7b49Wrapper\u7c7b\u578b\u3002 \u7ebf\u7a0b\u7edd\u5bf9\u5b89\u5168 \u5728Java API\u4e2d\u6807\u6ce8\u81ea\u5df1\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\u7c7b\uff0c\u5927\u591a\u6570\u90fd\u4e0d\u662f\u7edd\u5bf9\u7684\u7ebf\u7a0b\u5b89\u5168\u3002 \u76f8\u5bf9\u7ebf\u7a0b\u5b89\u5168 \u7ebf\u7a0b\u76f8\u5bf9\u5b89\u5168 \u5c31\u662f\u6211\u4eec\u901a\u5e38\u610f\u4e49\u4e0a\u6240\u8bb2\u7684\u7ebf\u7a0b\u5b89\u5168\uff0c\u5b83\u9700\u8981\u4fdd\u8bc1\u5bf9\u8fd9\u4e2a\u5bf9\u8c61\u5355\u72ec\u7684\u64cd\u4f5c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u6211\u4eec\u5728\u8c03\u7528\u7684\u65f6\u5019\u4e0d\u9700\u8981\u505a\u989d\u5916\u7684\u4fdd\u969c\u63aa\u65bd\uff0c\u4f46\u662f\u5bf9\u4e8e\u4e00\u4e9b\u7279\u5b9a\u7684\u987a\u5e8f\u7684\u8fde\u7eed\u8c03\u7528\uff0c\u5c31\u53ef\u80fd\u9700\u8981\u5728\u8c03\u7528\u7aef\u4f7f\u7528\u989d\u5916\u7684\u540c\u6b65\u624b\u6bb5\u6765\u4fdd\u8bc1\u8c03\u7528\u7684\u6b63\u786e\u6027\u3002 \u5728Java\u8bed\u8a00\u4e2d\uff0c\u5927\u90e8\u5206\u7684\u7ebf\u7a0b\u5b89\u5168\u7c7b\u90fd\u5c5e\u4e8e\u8fd9\u79cd\u7c7b\u578b\u3002 \u7ebf\u7a0b\u517c\u5bb9 \u7ebf\u7a0b\u517c\u5bb9 \u6307\u5bf9\u8c61\u672c\u8eab\u5e76\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u5728\u8c03\u7528\u7aef\u6b63\u786e\u5730\u4f7f\u7528\u540c\u6b65\u624b\u6bb5\u6765\u4fdd\u8bc1\u5bf9\u8c61\u5728\u5e76\u53d1\u73af\u5883\u4e2d\u53ef\u4ee5\u5b89\u5168\u5730\u4f7f\u7528\uff1b\u6211\u4eec\u8bf4\u4e00\u4e2a\u7c7b\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u7edd\u5927\u591a\u6570\u65f6\u5019\u6307\u7684\u662f\u8fd9\u4e00\u79cd\u60c5\u51b5\uff1b \u7ebf\u7a0b\u5bf9\u7acb \u7ebf\u7a0b\u5bf9\u7acb \u662f\u6307\u65e0\u8bba\u8c03\u7528\u7aef\u662f\u5426\u91c7\u53d6\u4e86\u540c\u6b65\u63aa\u65bd\uff0c\u90fd\u65e0\u6cd5\u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e2d\u5e76\u53d1\u4f7f\u7528\u7684\u4ee3\u7801\uff0cJava\u8bed\u8a00\u4e2d\u5f88\u5c11\u51fa\u73b0\u3002\u5e38\u89c1\u7684\u7ebf\u7a0b\u5bf9\u7acb\u64cd\u4f5c\u8fd8\u6709 System.setIn() , System.setOut() , System.runFinalizersOnExit() \u7b49\u7b49\u3002","title":"Java\u8bed\u8a00\u4e2d\u7684\u7ebf\u7a0b\u5b89\u5168"},{"location":"java/ujvm/ch13/#_1","text":"Synchronized \u5728Java\u91cc\u9762\uff0c\u6700\u57fa\u672c\u7684\u4e92\u65a5\u540c\u6b65\u624b\u6bb5\u5c31\u662f synchronized \u5173\u952e\u5b57\uff0c synchronized \u5173\u952e\u5b57\u7ecf\u8fc7\u7f16\u8bd1\u4ee5\u540e\uff0c\u4f1a\u5728\u540c\u6b65\u5757\u7684\u524d\u540e\u5206\u522b\u5f62\u6210 monitorenter \u548c monitorexit \u8fd9\u4e24\u4e2a\u5b57\u8282\u7801\u6307\u4ee4\uff0c\u8fd9\u4e24\u4e2a\u5b57\u8282\u7801\u90fd\u9700\u8981\u4e00\u4e2a reference \u7c7b\u578b\u7684\u53c2\u6570\u6765\u6307\u660e\u8981\u9501\u5b9a\u548c\u89e3\u9501\u7684\u5bf9\u8c61\u3002\u5982\u679cJava\u7a0b\u5e8f\u4e2d\u7684 synchronized \u660e\u786e\u5236\u5b9a\u4e86\u5bf9\u8c61\u53c2\u6570\uff0c\u90a3\u5c31\u662f\u8fd9\u4e2a\u5bf9\u8c61\u7684 reference \uff1b\u5982\u679c\u6ca1\u6709\u660e\u786e\u6307\u5b9a\uff0c\u90a3\u5c31\u6839\u636e synchronized \u4fee\u9970\u7684\u662f\u5b9e\u4f8b\u65b9\u6cd5\u8fd8\u662f\u7c7b\u65b9\u6cd5\uff0c\u53bb\u53d6\u5bf9\u5e94\u7684\u5bf9\u8c61\u4f5c\u4e3a\u9501\u5bf9\u8c61\u3002 Java Synchronized The monitorenter/monitorexit mechanism is used by the Java synchronized statement to coordinate access to an object among multiple threads. For example, when you write in Java code: static void Sort ( int [] array ) { // synchronize this operation so that some other thread can t // manipulate the array while we are sorting it. This assumes that other // threads also synchronize their accesses to the array. synchronized ( array ) { // now sort elements in array } } then JVM code like the following is generated: .method static Sort ([ I ) V aload_0 monitorenter ; lock object in local variable 0 ; now sort elements in array aload_0 monitorexit ; finished with object in local variable 0 return .end method \u8fd8\u6709\u4e24\u70b9\u9700\u8981\u7279\u522b\u6ce8\u610f\u7684\u3002\u9996\u5148 synchronized \u540c\u6b65\u5757\u5bf9\u540c\u4e00\u4e2a\u7ebf\u7a0b\u6765\u8bf4\u662f\u53ef\u91cd\u5165\uff0c\u4e0d\u4f1a\u51fa\u73b0\u81ea\u5df1\u628a\u81ea\u5df1\u9501\u6b7b\u7684\u95ee\u9898\u3002\u5176\u6b21\uff0c\u540c\u6b65\u5757\u5728\u5df2\u8fdb\u5165\u7684\u7ebf\u7a0b\u6267\u884c\u5b8c\u4e4b\u524d\uff0c\u4f1a\u963b\u585e\u540e\u9762\u5176\u4ed6\u7ebf\u7a0b\u7684\u8fdb\u5165\u3002 ReentrantLock \u53e6\u5916\u8fd8\u53ef\u4ee5\u4f7f\u7528 java.util.concurrent \u5305\u4e2d\u7684\u91cd\u5165\u9501\uff08 ReentrantLock \uff09\u6765\u5b9e\u73b0\u540c\u6b65\u3002\u5728\u57fa\u672c\u7528\u6cd5\u4e0a\uff0c ReentrantLock \u4e0e synchronized \u5f88\u76f8\u4f3c\uff0c\u5b83\u4eec\u90fd\u5177\u5907\u4e00\u6837\u7684\u7ebf\u7a0b\u91cd\u5165\u7279\u6027\uff0c\u53ea\u662f\u4ee3\u7801\u5199\u6cd5\u4e0a\u6709\u70b9\u533a\u522b\u3002 \u4e0d\u8fc7 ReentrantLock \u6bd4 synchronized \u589e\u52a0\u4e86\u4e00\u4e9b\u9ad8\u7ea7\u529f\u80fd\uff1a\u7b49\u5f85\u53ef\u4e2d\u65ad\u3001\u53ef\u5b9e\u73b0\u516c\u5e73\u9501\u4ee5\u53ca\u9501\u53ef\u4ee5\u7ed1\u5b9a\u591a\u4e2a\u6761\u4ef6\uff1b \u7b49\u5f85\u53ef\u4e2d\u65ad: \u662f\u6307\u5f53\u6301\u6709\u9501\u7684\u7ebf\u7a0b\u957f\u671f\u4e0d\u91ca\u653e\u9501\u7684\u65f6\u5019\uff0c\u6b63\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\u53ef\u4ee5\u9009\u62e9\u653e\u5f03\u7b49\u5f85\uff0c\u6539\u4e3a\u5904\u7406\u5176\u4ed6\u4e8b\u60c5\uff0c\u53ef\u4e2d\u65ad\u7279\u6027\u5bf9\u5904\u7406\u6267\u884c\u65f6\u95f4\u975e\u5e38\u957f\u7684\u540c\u6b65\u5757\u5f88\u6709\u5e2e\u52a9\u3002 \u516c\u5e73\u9501: \u662f\u6307\u591a\u4e2a\u7ebf\u7a0b\u5728\u7b49\u5f85\u4e00\u4e2a\u540c\u4e00\u4e2a\u9501\u65f6\uff0c\u5fc5\u987b\u6309\u7167\u7533\u8bf7\u7684\u65f6\u95f4\u987a\u5e8f\u6765\u4e00\u6b21\u83b7\u5f97\u9501\uff1b synchronzied \u4e2d\u7684\u9501\u662f\u975e\u516c\u5e73\u7684\uff0c ReentrantLock \u9ed8\u8ba4\u60c5\u51b5\u4e0b\u4e5f\u662f\u975e\u516c\u5e73\u7684\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u5e26\u5e03\u5c14\u503c\u7684\u6784\u9020\u51fd\u6570\u8981\u6c42\u4f7f\u7528\u516c\u5e73\u9501( ReentrantLock \u200b ( boolean fair ) )\u3002 \u7ed1\u5b9a\u591a\u4e2a\u6761\u4ef6: \u662f\u6307\u4e00\u4e2a ReentrantLock \u5bf9\u8c61\u53ef\u4ee5\u540c\u65f6\u7ed1\u5b9a\u591a\u4e2a Condition \u5bf9\u8c61( ReentrantLock . newCondition () )\u3002[ Example ] \u53ef\u91cd\u5165 \u82e5\u4e00\u4e2a\u7a0b\u5e8f\u6216\u5b50\u7a0b\u5e8f\"\u5728\u4efb\u4f55\u65f6\u523b\u88ab\u4e2d\u65ad\uff0c\u7136\u540e\u88ab\u8c03\u5ea6\u6267\u884c\u53e6\u5916\u4e00\u6bb5\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u53c8\u8c03\u7528\u4e86\u8be5\u5b50\u7a0b\u5e8f\u4e0d\u4f1a\u51fa\u9519\", \u5219\u79f0\u5176\u4e3a \u53ef\u91cd\u5165 (Reentrant)\u7684\u3002 wikipedia \u82e5\u4e00\u4e2a\u65b9\u6cd5\u662f\u53ef\u91cd\u5165\u7684\uff0c\u5219\u8be5\u65b9\u6cd5\u5e94\u5f53\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\uff1a \u4e0d\u80fd\u542b\u6709\u9759\u6001\uff08\u5168\u5c40\uff09\u975e\u5e38\u91cf\u6570\u636e\u3002 \u4e0d\u80fd\u8fd4\u56de\u9759\u6001\uff08\u5168\u5c40\uff09\u975e\u5e38\u91cf\u6570\u636e\u7684\u5730\u5740\u3002 \u53ea\u80fd\u5904\u7406\u7531\u8c03\u7528\u8005\u63d0\u4f9b\u7684\u6570\u636e\u3002 \u4e0d\u80fd\u4f9d\u8d56\u4e8e\u5355\u4f8b\u6a21\u5f0f\u8d44\u6e90\u7684\u9501\u3002 \u8c03\u7528\u7684\u51fd\u6570\u4e5f\u5fc5\u9700\u662f\u53ef\u91cd\u5165\u7684\u3002 \u4e0a\u8ff0\u6761\u4ef6\u5c31\u662f\u8981\u6c42\u53ef\u91cd\u5165\u51fd\u6570\u4f7f\u7528\u7684\u6240\u6709\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728\u8c03\u7528\u6808\u7684\u5f53\u524d\u51fd\u6570\u6808\uff08frame\uff09\u4e0a\uff0c\u56e0\u6b64\u540c\u4e00\u6267\u884c\u7ebf\u7a0b\u91cd\u5165\u6267\u884c\u8be5\u51fd\u6570\u65f6\u52a0\u8f7d\u4e86\u65b0\u7684\u51fd\u6570\u5e27\uff0c\u4e0e\u524d\u4e00\u6b21\u6267\u884c\u8be5\u51fd\u6570\u65f6\u4f7f\u7528\u7684\u51fd\u6570\u5e27\u4e0d\u51b2\u7a81\u3001\u4e0d\u4e92\u76f8\u8986\u76d6\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e86\u53ef\u91cd\u5165\u6267\u884c\u5b89\u5168\u3002 \u4f8b\u5982\u4e00\u4e0b\u4e24\u4e2aC\u51fd\u6570\u90fd\u662f\u53ef\u91cd\u5165\u7684\uff1a int f ( int i ) { return i + 2 ; } int g ( int i ) { return f ( i ) + 2 ; } \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8 \u5982\u679c\u4e00\u6bb5\u4ee3\u7801\u4e2d\u6240\u9700\u8981\u7684\u6570\u636e\u5fc5\u987b\u4e0e\u5176\u4ed6\u4ee3\u7801\u5171\u4eab\uff0c\u90a3\u5c31\u770b\u770b\u8fd9\u4e9b\u5171\u4eab\u6570\u636e\u7684\u4ee3\u7801\u662f\u5426\u80fd\u4fdd\u8bc1\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u6267\u884c\uff1f\u5982\u679c\u80fd\u4fdd\u8bc1\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u5171\u4eab\u6570\u636e\u7684\u53ef\u89c1\u8303\u56f4\u9650\u5236\u5728\u540c\u4e00\u4e2a\u7ebf\u7a0b\u4e4b\u5185\uff0c\u5b9e\u73b0\u4e86 \u7ebf\u7a0b\u672c\u5730\u5b58\u50a8 (Thread Local Storage, TLS)\u3002\u8fd9\u6837\uff0c\u65e0\u987b\u540c\u6b65\u4e5f\u80fd\u4fdd\u8bc1\u7ebf\u7a0b\u4e4b\u95f4\u4e0d\u51fa\u73b0\u6570\u636e\u4e89\u7528\u7684\u95ee\u9898\u3002 \u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6bcf\u4e2a\u53d8\u91cf\u5728\u6bcf\u4e2a\u7ebf\u7a0b\u4e2d\u90fd\u6709\u4e00\u4efd\u72ec\u7acb\u7684\u62f7\u8d1d\u3002\u901a\u8fc7\u4f7f\u7528\u7ebf\u7a0b\u5c40\u90e8\u5b58\u50a8\u6280\u672f\uff0c\u53ef\u4ee5\u907f\u514d\u7ebf\u7a0b\u95f4\u7684\u540c\u6b65\u95ee\u9898\u3002 \u53ef\u4ee5\u901a\u8fc7 java.lang.ThreadLocal \u7c7b\u6765\u5b9e\u73b0\u7ebf\u7a0b\u672c\u5730\u5b58\u50a8\u7684\u529f\u80fd\u3002","title":"\u7ebf\u7a0b\u5b89\u5168\u7684\u5b9e\u73b0\u65b9\u6cd5"},{"location":"java/ujvm/ch13/#3","text":"","title":"3 \u9501\u4f18\u5316"},{"location":"java/ujvm/ch13/#_2","text":"\u81ea\u65cb\u9501 : \u8ba9\u7ebf\u7a0b\u6267\u884c\u4e00\u4e2a\u5faa\u73af(\u5fd9\u7b49\u5f85, busy wait)\u3002 \u81ea\u9002\u5e94\u7684\u81ea\u65cb\u9501 : \u81ea\u65cb\u7684\u65f6\u95f4\u4e0d\u518d\u56fa\u5b9a\uff0c\u800c\u662f\u7531\u524d\u4e00\u6b21\u5728\u540c\u4e00\u4e2a\u9501\u4e0a\u7684\u81ea\u65cb\u65f6\u95f4\u53ca\u9501\u7684\u62e5\u6709\u8005\u7684\u72b6\u6001\u6765\u51b3\u5b9a\uff1b","title":"\u81ea\u65cb\u9501\u4e0e\u81ea\u9002\u5e94\u81ea\u65cb"},{"location":"java/ujvm/ch13/#_3","text":"\u9501\u6d88\u9664 (Lock Elimination)\u662f\u6307\u865a\u62df\u673a\u5373\u65f6\u7f16\u8bd1\u5668\u5728\u8fd0\u884c\u65f6\uff0c\u5bf9\u4e00\u4e9b\u4ee3\u7801\u4e0a\u8981\u6c42\u540c\u6b65\uff0c\u4f46\u662f\u88ab\u68c0\u6d4b\u5230\u4e0d\u53ef\u80fd\u5b58\u5728\u5171\u4eab\u6570\u636e\u7ade\u4e89\u7684\u9501\u8fdb\u884c\u6d88\u9664\u3002\u9501\u6d88\u9664\u7684\u4e3b\u8981\u5224\u65ad\u4f9d\u636e\u6765\u6e90\u4e8e\u9003\u9038\u5206\u6790\u7684\u6570\u636e\u652f\u6301\u3002","title":"\u9501\u6d88\u9664"},{"location":"java/ujvm/ch13/#_4","text":"\u9501\u7c97\u5316 (Lock Coarsening)\u662f\u6307\u51cf\u5c11\u4e0d\u5fc5\u8981\u7684\u7d27\u8fde\u5728\u4e00\u8d77\u7684 unlock \uff0c lock \u64cd\u4f5c\uff0c\u5c06\u591a\u4e2a\u8fde\u7eed\u7684\u9501\u6269\u5c55\u6210\u4e00\u4e2a\u8303\u56f4\u66f4\u5927\u7684\u9501\u3002","title":"\u9501\u7c97\u5316"},{"location":"java/ujvm/ch13/#_5","text":"\u8f7b\u91cf\u7ea7\u9501 (Lightweight Locking)\u57fa\u4e8e\u8fd9\u6837\u4e00\u79cd\u5047\u8bbe\uff0c\u5373\u5728\u771f\u5b9e\u7684\u60c5\u51b5\u4e0b\u6211\u4eec\u7a0b\u5e8f\u4e2d\u7684\u5927\u90e8\u5206\u540c\u6b65\u4ee3\u7801\u4e00\u822c\u90fd\u5904\u4e8e\u65e0\u9501\u7ade\u4e89\u72b6\u6001\uff08\u5373\u5355\u7ebf\u7a0b\u6267\u884c\u73af\u5883\uff09\uff0c\u5728\u65e0\u9501\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\u5b8c\u5168\u53ef\u4ee5\u907f\u514d\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u5c42\u9762\u7684\u91cd\u91cf\u7ea7\u4e92\u65a5\u9501\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f\u5728 monitorenter \u548c monitorexit \u4e2d\u53ea\u9700\u8981\u4f9d\u9760\u4e00\u6761CAS\u539f\u5b50\u6307\u4ee4\u5c31\u53ef\u4ee5\u5b8c\u6210\u9501\u7684\u83b7\u53d6\u53ca\u91ca\u653e\u3002\u5f53\u5b58\u5728\u9501\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\uff0c\u6267\u884cCAS\u6307\u4ee4\u5931\u8d25\u7684\u7ebf\u7a0b\u5c06\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u4e92\u65a5\u9501\u8fdb\u5165\u5230\u963b\u585e\u72b6\u6001\uff0c\u5f53\u9501\u88ab\u91ca\u653e\u7684\u65f6\u5019\u88ab\u5524\u9192\u3002 \u5bf9\u4e8e\u7edd\u5927\u90e8\u5206\u7684\u9501\uff0c\u5728\u6574\u4e2a\u540c\u6b65\u5468\u671f\u5185\u90fd\u662f\u4e0d\u5b58\u5728\u7ade\u4e89\u7684\u3002 \u5bf9\u8c61\u5934 \u5728JVM\u4e2d\u521b\u5efa\u5bf9\u8c61\u65f6\u4f1a\u5728\u5bf9\u8c61\u524d\u9762\u52a0\u4e0a\u4e24\u4e2a\u5b57\u5927\u5c0f\u7684\u5bf9\u8c61\u5934(Object Header)\uff0c\u572864\u4f4d\u865a\u62df\u673a\u4e0a\u4e3a64\u4f4d\u3002\u6839\u636e\u4e0d\u540c\u7684\u72b6\u6001\u4f4d\u5bf9\u8c61\u5934\u4e2d\u5b58\u653e\u4e0d\u540c\u7684\u5185\u5bb9\uff0c\u5982\u4e0a\u56fe\u6240\u793a\u5728\u8f7b\u91cf\u7ea7\u9501\u4e2d\uff0c\u5bf9\u8c61\u5934\u88ab\u5206\u6210\u4e24\u90e8\u5206\uff0c\u521a\u5f00\u59cb\u65f6\u5bf9\u8c61\u5934\u4e3a\u88ab\u8bbe\u7f6e\u4e3aHashCode\u3001\u6700\u4f4e\u4e09\u4f4d\u8868\u793aLockWord\u6240\u5904\u7684\u72b6\u6001\uff0c\u521d\u59cb\u72b6\u6001\u4e3a001\u8868\u793a\u65e0\u9501\u72b6\u6001\u3002Klass ptr\u6307\u5411Class\u5b57\u8282\u7801\u5728\u865a\u62df\u673a\u5185\u90e8\u7684\u5bf9\u8c61\u8868\u793a\u7684\u5730\u5740\u3002Fields\u8868\u793a\u8fde\u7eed\u7684\u5bf9\u8c61\u5b9e\u4f8b\u5b57\u6bb5\u3002 \u3002\u3002\u3002\u5f85\u7eed","title":"\u8f7b\u91cf\u7ea7\u9501"},{"location":"java/ujvm/ch13/#_6","text":"\u504f\u5411\u9501 (Biased Locking)\u662f\u4e3a\u4e86\u5728\u65e0\u9501\u7ade\u4e89\u7684\u60c5\u51b5\u4e0b\u907f\u514d\u5728\u9501\u83b7\u53d6\u8fc7\u7a0b\u4e2d\u6267\u884c\u4e0d\u5fc5\u8981\u7684CAS\u539f\u5b50\u6307\u4ee4\uff0c\u56e0\u4e3aCAS\u539f\u5b50\u6307\u4ee4\u867d\u7136\u76f8\u5bf9\u4e8e\u91cd\u91cf\u7ea7\u9501\u6765\u8bf4\u5f00\u9500\u6bd4\u8f83\u5c0f\u4f46\u8fd8\u662f\u5b58\u5728\u975e\u5e38\u53ef\u89c2\u7684\u672c\u5730\u5ef6\u8fdf\u3002","title":"\u504f\u5411\u9501"},{"location":"java/ujvm/ch2/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 2 - Java\u5185\u5b58\u533a\u57df\u4e0e\u5185\u5b58\u6ea2\u51fa\u6b63\u5e38 1 \u6982\u8ff0 \u672c\u7ae0\u5c06\u4ece\u6982\u5ff5\u4e0a\u4ecb\u7ecdJava\u865a\u62df\u673a\u5185\u5b58\u7684\u5404\u4e2a\u533a\u57df\uff0c\u8bb2\u89e3\u8fd9\u4e9b\u533a\u57df\u7684\u4f5c\u2f64\u3001\u670d\u52a1\u5bf9\u8c61\u4ee5\u53ca\u5176\u4e2d\u53ef\u80fd\u4ea7\u2f63\u7684\u95ee\u9898\u3002 2 \u8fd0\u884c\u65f6\u6570\u636e\u533a\u57df \u6839\u636e\u300aJava\u865a\u62df\u673a\u89c4\u8303(Java SE 7\u7248)\u300b\u7684\u89c4\u5b9a\uff0c Java\u865a\u62df\u673a\u6240\u7ba1\u7406\u7684\u5185\u5b58\u5c06\u4f1a\u5305\u62ec\u4ee5\u4e0b\u2f0f\u4e2a\u8fd0\u2f8f\u65f6\u6570\u636e\u533a\u57df\u3002 [http://blog.jamesdbloom.com/JVMInternals.html] \u7a0b\u5e8f\u8ba1\u6570\u5668 \u7a0b\u5e8f\u8ba1\u6570\u5668(Program Counter Register)\u662f\u4e00\u5757\u8f83\u5c0f\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5b83\u53ef\u4ee5\u770b\u4f5c\u662f\u5f53\u524d\u7ebf\u7a0b\u6240\u6267\u884c\u7684\u5b57\u8282\u7801\u7684\u884c\u53f7\u6307\u793a\u5668\u3002\u6bcf\u6761\u7ebf\u7a0b\u90fd\u6709\u2f00\u4e2a\u72ec\u2f74\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\uff0c\u5404\u6761\u7ebf\u7a0b\u4e4b\u95f4\u8ba1\u6570\u5668\u4e92\u4e0d\u5f71\u54cd\uff0c\u72ec\u2f74\u5b58\u50a8\u3002 \u5982\u679c\u7ebf\u7a0b\u6b63\u5728\u6267\u884c\u7684\u662fJava\u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u6570\u5668\u7684\u503c\u5c31\u662f\u6b63\u5728\u6267\u884c\u7684\u865a\u62df\u673a\u5b57\u8282\u7801\u6307\u4ee4\u7684\u5730\u5740\uff1b\u5982\u679c\u6b63\u5728\u6267\u884c\u7684\u662f Native \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u8ba1\u6570\u5668\u503c\u4e3a\u7a7a(undefined)\u3002\u6b64\u5185\u5b58\u533a\u57df\u662f\u552f\u4e00\u4e00\u4e2a\u5728Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u6ca1\u6709\u89c4\u5b9a\u4efb\u4f55 OutOfMemoryError \u60c5\u51b5\u7684\u533a\u57df\u3002 Java\u865a\u62df\u673a\u6808 Java\u865a\u62df\u673a\u6808\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\uff0c\u5b83\u7684\u751f\u547d\u5468\u671f\u4e0e\u7ebf\u7a0b\u76f8\u540c\u3002\u6bcf\u4e2a\u65b9\u6cd5\u6267\u884c\u7684\u540c\u65f6\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u6808\u5e27(Stack Frame)\u7528\u4e8e\u5b58\u50a8\u5c40\u90e8\u53d8\u91cf\u8868\u3001\u64cd\u4f5c\u6570\u6808\u3001\u52a8\u6001\u94fe\u63a5\u3001\u65b9\u6cd5\u51fa\u53e3\u7b49\u4fe1\u606f\u3002 \u5c40\u90e8\u53d8\u91cf\u8868\u5b58\u653e\u4e86\u7f16\u8bd1\u671f\u53ef\u77e5\u7684\u5404\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b( boolean \u3001 byte \u3001 char \u3001 short \u3001 int \u3001 float \u3001 long \u3001 double )\u3001\u5bf9\u8c61\u5f15\u7528( Reference \u7c7b\u578b)\u548c returnAddress \u7c7b\u578b\uff08\u6307\u5411\u4e86\u4e00\u6761\u5b57\u8282\u7801\u6307\u4ee4\u7684\u5730\u5740\uff09\u3002 \u5176\u4e2d64\u4f4d\u957f\u5ea6\u7684 long \u548c double \u7c7b\u578b\u7684\u6570\u636e\u4f1a\u5360\u75282\u4e2a\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4(Slot)\uff0c\u5176\u4f59\u7684\u6570\u636e\u7c7b\u578b\u53601\u4e2a\u3002\u5c40\u90e8\u53d8\u91cf\u8868\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u5728\u7f16\u8bd1\u671f\u95f4\u5206\u914d\u5b8c\u6210\uff0c\u5f53\u8fdb\u5165\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u5728\u5e27\u4e2d\u5206\u914d\u591a\u5927\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u5728\u65b9\u6cd5\u8fd0\u884c\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u5c40\u90e8\u53d8\u91cf\u8868\u7684\u5927\u5c0f\u3002 \u5728Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\uff0c\u5bf9\u8fd9\u4e2a\u533a\u57df\u89c4\u5b9a\u4e86\u4e24\u79cd\u5f02\u5e38\u72b6\u51b5\uff1a \u5982\u679c\u7ebf\u7a0b\u8bf7\u6c42\u6808\u7684\u6df1\u5ea6\u5927\u4e8e\u865a\u62df\u673a\u6240\u5141\u8bb8\u7684\u6df1\u5ea6\uff0c\u5c06\u629b\u51fa StackOverflowError \u5f02\u5e38\u3002 \u5982\u679c\u865a\u62df\u673a\u6808\u53ef\u4ee5\u52a8\u6001\u6269\u5c55\uff08\u5f53\u524d\u2f24\u90e8\u5206\u7684Java\u865a\u62df\u673a\u90fd\u53ef\u52a8\u6001\u6269\u5c55\uff0c\u53ea\u4e0d\u8fc7Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u4e5f\u5141\u8bb8\u56fa\u5b9a\u957f\u5ea6\u7684\u865a\u62df\u673a\u6808\uff09\uff0c\u5982\u679c\u6269\u5c55\u65f6\u2f46\u6cd5\u7533\u8bf7\u5230\u2f9c\u591f\u7684\u5185\u5b58\uff0c\u5c31\u4f1a\u629b\u51fa\u629b\u51fa OutOfMemoryError \u5f02\u5e38\u3002 \u672c\u5730\u65b9\u6cd5\u6808 \u672c\u5730\u65b9\u6cd5\u6808 (Native Method Stack)\u4e0e\u865a\u62df\u673a\u6808\u6240\u53d1\u6325\u7684\u4f5c\u7528\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\u4e0d\u8fc7\u662f\u865a\u62df\u673a\u6808\u4e3a\u865a\u62df\u673a\u6267\u884cjava\u65b9\u6cd5\uff0c\u800c\u672c\u5730\u6808\u5219\u4e3a\u865a\u62df\u673a\u4f7f\u7528\u5230\u7684 native \u65b9\u6cd5\u670d\u52a1\u3002 Java\u5806 Java \u5806 (Heap)\u662f\u7ebf\u7a0b\u5171\u4eab\u7684\uff0c\u5728\u865a\u62df\u673a\u542f\u52a8\u65f6\u521b\u5efa\u3002Java\u5806\u7684\u552f\u4e00\u76ee\u7684\u5c31\u662f\u5b58\u653e\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u5bf9\u8c61\u5b9e\u4f8b\u90fd\u5728\u8fd9\u91cc\u5206\u914d\u5185\u5b58\u3002 Java\u5806\u662f\u5783\u573e\u6536\u96c6\u5668\u7ba1\u7406\u7684\u4e3b\u8981\u533a\u57df\uff0c\u56e0\u6b64\u5f88\u591a\u65f6\u5019\u4e5f\u88ab\u79f0\u4f5c\"GC\u5806\"(Garbage Collected Heap)\u3002\u7531\u4e8e\u73b0\u5728\u6536\u96c6\u5668\u57fa\u672c\u90fd\u91c7\u7528\u5206\u4ee3\u6536\u96c6\u7b97\u6cd5\uff0c\u6240\u4ee5Java\u5806\u4e2d\u8fd8\u53ef\u4ee5\u7ec6\u5206\u4e3a\uff1a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff1b\u518d\u7ec6\u81f4\u4e00\u70b9\u7684\u6709Eden\u7a7a\u95f4\u3001From Survivor\u7a7a\u95f4\u3001To Survivor\u7a7a\u95f4\u7b49\u3002 Java\u5806\u5728\u5b9e\u73b0\u65f6\uff0c\u65e2\u53ef\u4ee5\u5b9e\u73b0\u6210\u56fa\u5b9a\u5927\u5c0f\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u53ef\u6269\u5c55\u7684\uff0c\u4e0d\u8fc7\u5f53\u524d\u4e3b\u6d41\u7684\u865a\u62df\u673a\u90fd\u662f\u6309\u7167\u53ef\u6269\u5c55\u6765\u5b9e\u73b0\u7684\u3002 \u65b9\u6cd5\u533a\uff08\u6c38\u4e45\u4ee3\uff09 \u2f45\u6cd5\u533a (Method Area)\u662f\u5404\u4e2a\u7ebf\u7a0b\u5171\u4eab\u7684\u5185\u5b58\u533a\u57df\uff0c\u5b83\u2f64\u4e8e\u5b58\u50a8\u5df2\u88ab\u865a\u62df\u673a\u52a0\u8f7d\u7684\u7c7b\u4fe1\u606f\u3001\u5e38\u91cf\u3001\u9759\u6001\u53d8\u91cf\u3001\u5373\u65f6\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u7b49\u6570\u636e\u3002 \u5bf9\u4e8eHotSpot\u865a\u62df\u673a\u6765\u8bf4\uff0c\u5b83\u4e5f\u53eb\u505a \u6c38\u4e45\u4ee3 (Permanent Generation, PermGen )\u3002\u8fd9\u662f\u56e0\u4e3aHotSpot\u865a\u62df\u673a\u628aGC\u5206\u4ee3\u6536\u96c6\u6269\u5c55\u2f84\u2f45\u6cd5\u533a\uff0c\u6216\u8005\u8bf4\u4f7f\u2f64\u6c38\u4e45\u4ee3\u6765\u5b9e\u73b0\u2f45\u6cd5\u533a\uff0c\u8fd9\u6837HotSpot\u7684\u5783\u573e\u6536\u96c6\u5668\u53ef\u4ee5\u50cf\u7ba1\u7406Java\u5806\u2f00\u6837\u7ba1\u7406\u8fd9\u90e8\u5206\u5185\u5b58\uff0c\u80fd\u591f\u7701\u53bb\u4e13\u95e8\u4e3a\u2f45\u6cd5\u533a\u7f16\u5199\u5185\u5b58\u7ba1\u7406\u4ee3\u7801\u7684\u2f2f\u4f5c\u3002\u5bf9\u4e8e\u5176\u4ed6\u865a\u62df\u673a\uff08\u5982BEA JRockit\u3001IBM J9\u7b49\uff09\u6765\u8bf4\u662f\u4e0d\u5b58\u5728\u6c38\u4e45\u4ee3\u7684\u6982\u5ff5\u7684\u3002 \u7531\u4e8e\u6c38\u4e45\u4ee3\u5185\u53ef\u80fd\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u6216\u6ea2\u51fa\u7b49\u95ee\u9898\u800c\u5bfc\u81f4\u7684 java.lang.OutOfMemoryError: PermGen \uff0cJEP\u5c0f\u7ec4\u4eceJDK1.7\u5f00\u59cb\u5c31\u7b79\u5212\u79fb\u9664\u6c38\u4e45\u4ee3( JEP 122: Remove the Permanent Generation )\uff0c\u5e76\u4e14\u5728JDK 1.7\u4e2d\u628a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u7b26\u53f7\u5f15\u7528\u7b49\u79fb\u51fa\u4e86\u6c38\u4e45\u4ee3\u3002\u5230\u4e86Java 8\uff0c\u6c38\u4e45\u4ee3\u88ab\u5f7b\u5e95\u5730\u79fb\u51fa\u4e86JVM\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f \u5143\u7a7a\u95f4 (Metaspace)\uff1a In JDK 8, classes metadata is now stored in the native heap (\u672c\u5730\u5bf9\u5185\u5b58) and this space is called Metaspace . \u6839\u636eJava\u865a\u62df\u673a\u89c4\u8303\u7684\u89c4\u5b9a\uff0c\u5f53\u2f45\u6cd5\u533a\u2f46\u6cd5\u6ee1\u2f9c\u5185\u5b58\u5206\u914d\u9700\u6c42\u65f6\uff0c\u5c06\u629b\u51fa OutOfMemoryError \u5f02\u5e38\u3002 Young Generation \u65b0\u751f\u4ee3 Eden: where new objects get instantiated S0, S1 (Survivor space): hold live objects during minor GC S0: from Survivor S1: to Survivor Old Generation (Tenured) \u8001\u5e74\u4ee3 Permanent Generation \u6c38\u4e45\u4ee3 \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60 \u8fd0\u2f8f\u65f6\u5e38\u91cf\u6c60 (Runtime Constant Pool\uff09\u662f\u2f45\u6cd5\u533a\u7684\u2f00\u90e8\u5206\u3002Class\u6587\u4ef6\u4e2d\u9664\u4e86\u6709\u7c7b\u7684\u7248\u672c\u3001\u5b57\u6bb5\u3001\u65b9\u6cd5\u3001\u63a5\u53e3\u7b49\u63cf\u8ff0\u4fe1\u606f\u5916\uff0c\u8fd8\u6709\u4e00\u9879\u4fe1\u606f\u5c31\u662f\u5e38\u91cf\u6c60(Constant Pool)\uff0c\u7528\u4e8e\u5b58\u653e\u7f16\u8bd1\u671f\u751f\u6210\u7684\u5404\u79cd\u5b57\u9762\u91cf\u548c\u7b26\u53f7\u5f15\u7528\u3002\u8fd9\u90e8\u5206\u5185\u5bb9\u5c06\u5728\u7c7b\u52a0\u8f7d\u540e\u8fdb\u5165\u65b9\u6cd5\u533a\u7684\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u4e2d\u5b58\u653e\u3002 JDK 1.7\u5f00\u59cb\uff0c\u5b57\u7b26\u4e32\u5e38\u91cf\u548c\u7b26\u53f7\u5f15\u7528\u7b49\u5c31\u88ab\u79fb\u51fa\u6c38\u4e45\u4ee3\uff1a \u7b26\u53f7\u5f15\u7528\u8fc1\u79fb\u81f3\u7cfb\u7edf\u5806\u5185\u5b58(Native Heap) \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u8fc1\u79fb\u81f3Java\u5806(Java Heap) Interned String: In JDK 7, interned strings are no longer allocated in the permanent generation of the Java heap, but are instead allocated in the main part of the Java heap (known as the young and old generations), along with the other objects created by the application. This change will result in more data residing in the main Java heap, and less data in the permanent generation, and thus may require heap sizes to be adjusted. Most applications will see only relatively small differences in heap usage due to this change, but larger applications that load many classes or make heavy use of the String.intern() method will see more significant differences. [ Java SE 7 Features and Enhancements ] \u76f4\u63a5\u5185\u5b58 \u76f4\u63a5\u5185\u5b58 (Direct Memory)\u4e0d\u662f\u865a\u62df\u673a\u8fd0\u884c\u65f6\u6570\u636e\u533a\u7684\u4e00\u90e8\u5206\u3002\u4f46\u662f\u8fd9\u90e8\u5206\u5185\u5b58\u4e5f\u88ab\u9891\u7e41\u5730\u4f7f\u7528\uff0c\u800c\u4e14\u4e5f\u53ef\u80fd\u5bfc\u81f4 OutOfMemoryError \u5f02\u5e38\u51fa\u73b0\u3002 \u5728JDK1.4\u4e2d\u65b0\u52a0\u5165\u4e86NIO\u7c7b\uff0c\u5f15\u5165\u4e86\u4e00\u79cd\u57fa\u4e8e\u901a\u9053\u4e0e\u7f13\u5b58\u533a(buffer)\u7684I/O\u65b9\u5f0f\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528 Native \u51fd\u6570\u5e93\u76f4\u63a5\u5206\u914d\u5806\u5916\u5185\u5b58\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5b58\u50a8\u5728Java\u5806\u4e2d\u7684 DirectByteBuffer \u5bf9\u8c61\u4f5c\u4e3a\u8fd9\u5757\u5185\u5b58\u7684\u5f15\u7528\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u6837\u80fd\u5728\u4e00\u4e9b\u573a\u666f\u4e2d\u663e\u8457\u63d0\u9ad8\u6027\u80fd\uff0c\u56e0\u4e3a\u907f\u514d\u4e86\u5728Java\u5806\u548c \u5806\u4e2d\u6765\u56de\u590d\u5236\u6570\u636e\u3002 3 HotSpot\u865a\u62df\u673a\u5bf9\u8c61\u63a2\u79d8 \u672c\u8282\u4ee5\u5e38\u2f64\u7684\u865a\u62df\u673aHotSpot\u548c\u5e38\u2f64\u7684\u5185\u5b58\u533a\u57dfJava\u5806\u4e3a\u4f8b\uff0c\u6df1\u2f0a\u63a2\u8ba8HotSpot\u865a\u62df\u673a\u5728Java\u5806\u4e2d\u5bf9\u8c61\u5206\u914d\u3001\u5e03\u5c40\u548c\u8bbf\u95ee\u7684\u5168\u8fc7\u7a0b\u3002 \u5bf9\u8c61\u7684\u521b\u5efa (1) \u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a new \u6307\u4ee4\u65f6\uff0c\u9996\u5148\u53bb\u68c0\u67e5\u8fd9\u4e2a\u6307\u4ee4\u7684\u53c2\u6570\u662f\u5426\u80fd\u5728\u5e38\u91cf\u6c60\u4e2d\u5b9a\u4f4d\u5230\u4e00\u4e2a\u7c7b\u7684\u7b26\u53f7\u5f15\u7528\uff0c\u5e76\u4e14\u68c0\u67e5\u8fd9\u4e2a\u7b26\u53f7\u5f15\u7528\u4ee3\u8868\u7684\u7c7b\u662f\u5426\u5df2\u7ecf\u88ab\u52a0\u8f7d\u3001\u89e3\u6790\u548c\u521d\u59cb\u5316\u8fc7\u3002\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u5fc5\u987b\u5148\u6267\u884c\u76f8\u5e94\u7684\u7c7b\u52a0\u8f7d\u8fc7\u7a0b\u3002 (2)\u5728\u7c7b\u52a0\u8f7d\u68c0\u67e5\u901a\u8fc7\u540e\uff0c\u63a5\u4e0b\u6765\u865a\u62df\u673a\u5c06\u4e3a\u65b0\u2f63\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002\u5bf9\u8c61\u6240\u9700\u5185\u5b58\u7684\u2f24\u2f29\u5728\u7c7b\u52a0\u8f7d\u5b8c\u6210\u540e\u4fbf\u53ef\u5b8c\u5168\u786e\u5b9a\uff0c\u4e3a\u5bf9\u8c61\u5206\u914d\u7a7a\u95f4\u7684\u4efb\u52a1\u7b49\u540c\u4e8e\u628a\u2f00\u5757\u786e\u5b9a\u2f24\u2f29\u7684\u5185\u5b58\u4eceJava\u5806\u4e2d\u5212\u5206\u51fa\u6765\u3002\u5982\u679cJava\u5806\u662f\u7edd\u5bf9\u89c4\u6574\u7684(\u6240\u6709\u2f64\u8fc7\u7684\u5185\u5b58\u90fd\u653e\u5728\u2f00\u8fb9\uff0c \u7a7a\u95f2\u7684\u5185\u5b58\u653e\u5728\u53e6\u2f00\u8fb9\uff0c\u4e2d\u95f4\u653e\u7740\u2f00\u4e2a\u6307\u9488\u4f5c\u4e3a\u5206\u754c\u70b9\u7684\u6307\u2f70\u5668)\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528 \u6307\u9488\u78b0\u649e (Bump the Pointer)\u7684\u5206\u914d\u65b9\u5f0f: \u628a\u90a3\u4e2a\u6307\u9488\u5411\u7a7a\u95f2\u7a7a\u95f4\u90a3\u8fb9\u632a\u52a8\u2f00\u6bb5\u4e0e\u5bf9\u8c61\u2f24\u2f29\u76f8\u7b49\u7684\u8ddd\u79bb\u3002 \u5982\u679cJava\u5806\u4e2d\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u89c4\u6574\u7684\uff0c\u5df2\u4f7f\u2f64\u7684\u5185\u5b58\u548c\u7a7a\u95f2\u7684\u5185\u5b58\u76f8\u4e92\u4ea4\u9519\uff0c\u90a3\u5c31\u6ca1\u6709\u529e\u6cd5\u7b80\u5355\u5730\u8fdb\u2f8f\u6307\u9488\u78b0\u649e\u4e86\uff0c\u865a\u62df\u673a\u5c31\u5fc5\u987b\u7ef4\u62a4\u2f00\u4e2a\u5217\u8868\uff0c\u8bb0\u5f55\u4e0a\u54ea\u4e9b\u5185\u5b58\u5757\u662f\u53ef\u2f64\u7684\uff0c\u5728\u5206\u914d\u7684\u65f6\u5019\u4ece\u5217\u8868\u4e2d\u627e\u5230\u2f00\u5757\u2f9c\u591f\u2f24\u7684\u7a7a\u95f4\u5212\u5206\u7ed9\u5bf9\u8c61\u5b9e \u4f8b\uff0c\u5e76\u66f4\u65b0\u5217\u8868\u4e0a\u7684\u8bb0\u5f55\uff0c\u8fd9\u79cd\u5206\u914d\u2f45\u5f0f\u79f0\u4e3a \u7a7a\u95f2\u5217\u8868 (Free List)\u3002 \u4f46\u662f\u5185\u5b58\u7684\u5206\u914d\u662f\u540c\u6b65\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u521a\u5206\u914d\u4e00\u4e2a\u5bf9\u8c61\u5185\u5b58\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u4fee\u6539\u6307\u9488\u6240\u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u5bf9\u8c61\u7684\u65f6\u5019\u53ef\u80fd\u5c31\u51fa\u9519\u4e86\u3002\u89e3\u51b3\u65b9\u6cd5\u6709\u4e24\u4e2a: \u5bf9\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u7684\u52a8\u4f5c\u8fdb\u884c\u540c\u6b65\u5904\u7406\uff08CAS\u65b9\u5f0f\uff09\u3002 \u628a\u5185\u5b58\u5206\u914d\u7684\u52a8\u4f5c\u6309\u7167\u7ebf\u7a0b\u5212\u5206\u5728\u4e0d\u540c\u7684\u7a7a\u95f4\u8fdb\u884c\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5728java\u5806\u4e2d\u9884\u5206\u914d\u4e00\u5c0f\u5757\u5185\u5b58\uff0c\u79f0\u4e3a\u672c\u5730\u7ebf\u7a0b\u5206\u914d\u7f13\u51b2(TLAB)\u3002\u53ea\u6709TLAB\u7528\u5b8c\u5e76\u5206\u914d\u65b0\u7684TLAB\u65f6\uff0c\u624d\u9700\u8981\u540c\u6b65\u3002JVM\u662f\u5426\u5f00\u542fTLAB\u529f\u80fd\uff0c\u53ef\u901a\u8fc7-XX:+/-UseTLAB\u53c2\u6570\u6765\u8bbe\u5b9a\u3002 (3) \u5185\u5b58\u5206\u914d\u5b8c\u4e4b\u540e\uff0c\u521d\u59cb\u5316\u96f6\u503c\uff08\u4e0d\u5305\u62ec\u5bf9\u8c61\u5934\uff09\uff0c\u5982\u679c\u4f7f\u7528TLAB\uff0c\u8fd9\u4e00\u5de5\u4f5c\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u63d0\u524d\u81f3TLAB\u5206\u914d\u65f6\u8fdb\u884c\u3002 (4) \u63a5\u4e0b\u6765\uff0cJVM\u5bf9\u5bf9\u8c61\u8fdb\u884c\u5fc5\u8981\u7684\u8bbe\u7f6e\uff0c\u4f8b\u5982\u8fd9\u4e2a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3001\u5982\u4f55\u624d\u80fd\u627e\u5230\u7c7b\u7684\u5143\u6570\u636e\u4fe1\u606f\u3001\u5bf9\u8c61\u7684\u54c8\u5e0c\u7801\u3001\u5bf9\u8c61\u7684GC\u5206\u4ee3\u5e74\u9f84\u7b49\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5b58\u653e\u5728\u5bf9\u8c61\u7684\u5bf9\u8c61\u5934\u4e2d\uff0c\u6839\u636eJVM\u5f53\u524d\u8fd0\u884c\u72b6\u6001\u4e0d\u540c\uff0c\u5982\u662f\u5426\u542f\u7528\u504f\u5411\u9501\u7b49\uff0c\u5bf9\u8c61\u5934\u4f1a\u6709\u4e0d\u540c\u7684\u8bbe\u7f6e\u65b9\u5f0f\u3002 \u5728\u4e0a\u2faf\u2f2f\u4f5c\u90fd\u5b8c\u6210\u4e4b\u540e\uff0c\u4ece\u865a\u62df\u673a\u7684\u89c6\u2f93\u6765\u770b\uff0c\u2f00\u4e2a\u65b0\u7684\u5bf9\u8c61\u5df2\u7ecf\u4ea7\u2f63\u4e86\uff0c\u4f46\u4eceJava\u7a0b\u5e8f\u7684\u89c6\u2f93\u6765\u770b\uff0c\u5bf9\u8c61\u521b\u5efa\u624d\u521a\u521a\u5f00\u59cb\u2014\u2014 \u2f45\u6cd5\u8fd8\u6ca1\u6709\u6267\u2f8f\uff0c\u6240\u6709\u7684\u5b57\u6bb5\u90fd\u8fd8\u4e3a\u96f6\u3002\u6240\u4ee5\uff0c\u2f00\u822c\u6765\u8bf4\uff08\u7531\u5b57\u8282\u7801\u4e2d\u662f\u5426\u8ddf\u968finvokespecial\u6307\u4ee4\u6240\u51b3\u5b9a\uff09\uff0c\u6267\u2f8f new \u6307\u4ee4\u4e4b\u540e\u4f1a\u63a5\u7740\u6267\u2f8f \u2f45\u6cd5\uff0c\u628a\u5bf9\u8c61\u6309\u7167\u7a0b\u5e8f\u5458\u7684\u610f\u613f\u8fdb\u2f8f\u521d\u59cb\u5316\uff0c\u8fd9\u6837\u2f00\u4e2a\u771f\u6b63\u53ef\u2f64\u7684\u5bf9\u8c61\u624d\u7b97\u5b8c\u5168\u4ea7\u2f63\u51fa\u6765\u3002 \u5bf9\u8c61\u7684\u5185\u5b58\u5e03\u5c40 \u5728HotSpot\u865a\u62df\u673a\u4e2d\uff0c\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u5e03\u5c40\u53ef\u4ee5\u5206\u4e3a3\u5757\u533a\u57df\uff1a\u5bf9\u8c61\u5934(Object Header)\u3001\u5b9e\u4f8b\u6570\u636e(Instance Data)\u548c\u5bf9\u9f50\u586b\u5145(Padding)\u3002 HotSpot\u865a\u62df\u673a\u7684\u5bf9\u8c61\u5934\u5305\u62ec\u4e24\u90e8\u5206\u4fe1\u606f: MarkWord: \u7528\u4e8e\u5b58\u50a8\u5bf9\u8c61\u81ea\u8eab\u7684\u8fd0\u884c\u65f6\u6570\u636e\uff08\u54c8\u5e0c\u7801\u3001GC\u5206\u4ee3\u5e74\u9f84\u3001\u9501\u72b6\u6001\u6807\u5fd7\u3001\u7ebf\u7a0b\u6301\u6709\u7684\u9501\u3001\u504f\u5411\u7ebf\u7a0bID\u3001\u504f\u5411\u65f6\u95f4\u6233\u7b49\uff09 Klass pointer: \u7c7b\u578b\u6307\u9488\uff08\u5373\u5bf9\u8c61\u6307\u5411\u5b83\u7684\u7c7b\u5143\u6570\u636e\u7684\u6307\u9488\uff0cJVM\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u6765\u786e\u5b9a\u8fd9\u4e2a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff09\u3002 \u53e6\u5916\uff0c\u5982\u679c\u5bf9\u8c61\u662f\u2f00\u4e2aJava\u6570\u7ec4\uff0c\u90a3\u5728\u5bf9\u8c61\u5934\u4e2d\u8fd8\u5fc5\u987b\u6709\u2f00\u5757\u2f64\u4e8e\u8bb0\u5f55\u6570\u7ec4\u957f\u5ea6\u7684\u6570\u636e\uff0c\u56e0 \u4e3a\u865a\u62df\u673a\u53ef\u4ee5\u901a\u8fc7\u666e\u901aJava\u5bf9\u8c61\u7684\u5143\u6570\u636e\u4fe1\u606f\u786e\u5b9aJava\u5bf9\u8c61\u7684\u2f24\u2f29\uff0c\u4f46\u662f\u4ece\u6570\u7ec4\u7684\u5143\u6570\u636e\u4e2d\u5374\u2f46\u6cd5\u786e\u5b9a\u6570\u7ec4\u7684\u2f24\u2f29\u3002 HotSpot\u865a\u62df\u673a markOop.cpp \u4e2d\u7684\u4ee3\u7801\uff08\u6ce8\u91ca\uff09\u2f5a\u6bb5\uff0c\u5b83\u63cf\u8ff0\u4e8632bit\u4e0bMark Word\u7684\u5b58\u50a8\u72b6\u6001\u3002 source enum { age_bits = 4 , lock_bits = 2 , biased_lock_bits = 1 , max_hash_bits = BitsPerWord - age_bits - lock_bits - biased_lock_bits , hash_bits = max_hash_bits 31 ? 31 : max_hash_bits , cms_bits = LP64_ONLY ( 1 ) NOT_LP64 ( 0 ), epoch_bits = 2 }; \u63a5\u4e0b\u6765\u7684\u5b9e\u4f8b\u6570\u636e\u662f\u5bf9\u8c61\u771f\u6b63\u5b58\u50a8\u7684\u6709\u6548\u4fe1\u606f\uff0c\u4e5f\u662f\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u6240\u5b9a\u4e49\u7684\u5404\u79cd\u7c7b\u578b\u7684\u5b57\u6bb5\u5185\u5bb9\u3002\u2f46\u8bba\u662f\u4ece\u2f57\u7c7b\u7ee7\u627f\u4e0b\u6765\u7684\uff0c\u8fd8\u662f\u5728\u2f26\u7c7b\u4e2d\u5b9a\u4e49\u7684\uff0c\u90fd\u9700\u8981\u8bb0\u5f55\u8d77\u6765\u3002\u5728\u7236\u7c7b\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u4f1a\u51fa\u73b0\u5728\u5b50\u7c7b\u4e4b\u524d\uff0c\u5982\u679cCompactFields\u53c2\u6570\u503c\u4e3atrue\uff0c\u90a3\u4e48\u5b50\u7c7b\u4e2d\u8f83\u7a84\u7684\u53d8\u91cf\u4e5f\u53ef\u80fd\u4f1a\u63d2\u5165\u5230\u7236\u7c7b\u53d8\u91cf\u7684\u7a7a\u9699\u4e4b\u4e2d\u3002 \u5bf9\u9f50\u586b\u5145\u5e76\u4e0d\u662f\u5fc5\u7136\u5b58\u5728\u7684\uff0c\u4e5f\u6ca1\u6709\u7279\u522b\u7684\u542b\u4e49\uff0c\u5b83\u4ec5\u4ec5\u8d77\u7740\u5360\u4f4d\u7b26\u7684\u4f5c\u2f64\u3002\u7531\u4e8eHotSpot VM\u7684\u2f83\u52a8\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u8981\u6c42\u5bf9\u8c61\u8d77\u59cb\u5730\u5740\u5fc5\u987b\u662f8\u5b57\u8282\u7684\u6574\u6570\u500d\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5bf9\u8c61\u7684\u2f24\u2f29\u5fc5\u987b\u662f8\u5b57\u8282\u7684\u6574\u6570\u500d\u3002\u2f7d\u5bf9\u8c61\u5934\u90e8\u5206\u6b63\u597d\u662f8\u5b57\u8282\u7684\u500d\u6570(1\u500d\u6216\u80052\u500d)\uff0c\u56e0\u6b64\uff0c\u5f53\u5bf9\u8c61\u5b9e\u4f8b\u6570\u636e\u90e8\u5206\u6ca1\u6709\u5bf9\u9f50\u65f6\uff0c\u5c31\u9700\u8981\u901a\u8fc7\u5bf9\u9f50\u586b\u5145\u6765\u8865\u5168\u3002 \u5bf9\u8c61\u7684\u8bbf\u95ee\u5b9a\u4f4d \u6211\u4eec\u7684Java\u7a0b\u5e8f\u9700\u8981\u901a\u8fc7\u6808\u4e0a\u7684 Reference \u6570\u636e\u6765\u64cd\u4f5c\u5806\u4e0a\u7684\u5177\u4f53\u5bf9\u8c61\u3002\u76ee\u524d\u4e3b\u6d41\u7684\u5bf9\u8c61\u8bbf\u95ee\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\u53e5\u67c4(handle)\u548c\u76f4\u63a5\u6307\u9488\u3002 \u5982\u679c\u76f4\u63a5\u4f7f\u7528\u53e5\u67c4\u8bbf\u95ee\uff0cjava\u5806\u4e2d\u5c06\u4f1a\u5212\u5206\u51fa\u4e00\u5757\u5185\u5b58\u6765\u4f5c\u4e3a\u53e5\u67c4\u6c60\uff0c Reference \u4e2d\u5b58\u50a8\u7684\u662f\u5bf9\u8c61\u7684\u53e5\u67c4\u5730\u5740\uff0c\u800c\u53e5\u67c4\u4e2d\u5305\u542b\u4e86\u5bf9\u8c61\u6570\u636e\u4e0e\u7c7b\u578b\u6570\u636e\u5404\u81ea\u7684\u5177\u4f53\u5730\u5740\u4fe1\u606f\u3002 In computer programming, a handle is an abstract reference to a resource. \u5982\u679c\u4f7f\u7528\u76f4\u63a5\u6307\u9488\u8bbf\u95ee\uff0c\u90a3\u4e48java\u5806\u5bf9\u8c61\u7684\u5e03\u5c40\u4e2d\u5c31\u5fc5\u987b\u8003\u8651\u5982\u4f55\u653e\u7f6e\u8bbf\u95ee\u7c7b\u578b\u6570\u636e\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u800c Reference \u4e2d\u5b58\u50a8\u7684\u76f4\u63a5\u5c31\u662f\u5bf9\u8c61\u5730\u5740\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u8fd9\u4e24\u79cd\u5bf9\u8c61\u8bbf\u95ee\u65b9\u5f0f\u5404\u6709\u4f18\u52bf\uff1a \u4f7f\u7528\u53e5\u67c4\u6765\u8bbf\u95ee\u7684\u6700\u5927\u597d\u5904\u662f Reference \u4e2d\u5b58\u50a8\u7684\u662f\u7a33\u5b9a\u7684\u53e5\u67c4\u5730\u5740\uff0c\u5728\u5bf9\u8c61\u88ab\u79fb\u52a8\u65f6\u53ea\u4f1a\u6539\u53d8\u53e5\u67c4\u4e2d\u7684\u5b9e\u4f8b\u6570\u636e\u6307\u9488\uff0c\u800c Reference \u672c\u8eab\u4e0d\u9700\u8981\u4fee\u6539\u3002 \u4f7f\u7528\u76f4\u63a5\u6307\u9488\u8bbf\u95ee\u65b9\u5f0f\u7684\u6700\u5927\u597d\u5904\u5c31\u662f\u901f\u5ea6\u66f4\u5feb\uff0c\u5b83\u8282\u7701\u4e86\u4e00\u6b21\u6307\u9488\u5b9a\u4f4d\u7684\u65f6\u95f4\u5f00\u9500\u3002\u7531\u4e8e\u5bf9\u8c61\u7684\u8bbf\u95ee\u5728Java\u4e2d\u2fae\u5e38\u9891\u7e41\uff0c\u56e0\u6b64\u8fd9\u7c7b\u5f00\u9500\u79ef\u5c11\u6210\u591a\u540e\u4e5f\u662f\u2f00\u9879\u2fae\u5e38\u53ef\u89c2\u7684\u6267\u2f8f\u6210\u672c HotSpot\u865a\u62df\u673a\u4f7f\u7528\u7684\u662f\u76f4\u63a5\u6307\u9488\u8bbf\u95ee\u7684\u65b9\u5f0f\u3002\u4f46\u5404\u79cd\u8bed\u2f94\u548c\u6846\u67b6\u4f7f\u2f64\u53e5\u67c4\u6765\u8bbf\u95ee\u7684\u60c5\u51b5\u4e5f\u2f17\u5206\u5e38\u89c1\u3002 4 \u5b9e\u6218\uff1aOutOfMemoryError\u5f02\u5e38 \u4e3b\u8981\u662f\u4e3a\u4e86\u5b66\u4e60\u4e4b\u524d\u5b66\u7684\u5404\u79cd\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9\uff0c\u8fd8\u6709\u5c31\u662f\u4ee5\u540e\u9047\u5230\u5185\u5b58\u9519\u8bef\u7684\u65f6\u5019\uff0c\u80fd\u591f\u6839\u636e\u5f02\u5e38\u7684\u4fe1\u606f\u5feb\u901f\u5224\u8bfb\u662f\u54ea\u4e2a\u533a\u57df\u7684\u5185\u5b58\u6ea2\u51fa\uff0c\u77e5\u9053\u662f\u4ec0\u4e48\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u533a\u57df\u5185\u5b58\u6ea2\u51fa\uff0c\u4ee5\u53ca\u51fa\u73b0\u8fd9\u4e9b\u5f02\u5e38\u540e\uff0c\u8be5\u5982\u4f55\u5904\u7f6e\u3002 Note \u5e38\u89c1\u7684HotSpot JVM\u53c2\u6570 -Xms \u521d\u59cb\u5806\u5927\u5c0f -Xmx \u6700\u5927\u5806\u5927\u5c0f -Xmn \u5e74\u8f7b\u4ee3\u5927\u5c0f -XX: MaxPermSize \u8bbe\u7f6e\u6301\u4e45\u4ee3\u6700\u5927\u503c -Xss \u6bcf\u4e2a\u7ebf\u7a0b\u7684\u5806\u6808\u5927\u5c0f Java\u5806\u6ea2\u51fa Java\u5806\u2f64\u4e8e\u5b58\u50a8\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u53ea\u8981\u4e0d\u65ad\u5730\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u4e14\u4fdd\u8bc1GC Roots\u5230\u5bf9\u8c61\u4e4b\u95f4\u6709\u53ef\u8fbe\u8def\u5f84\u6765\u907f\u514d\u5783\u573e\u56de\u6536\u673a\u5236\u6e05\u9664\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u90a3\u4e48\u5728\u5bf9\u8c61\u6570\u91cf\u5230\u8fbe\u6700\u2f24\u5806\u7684\u5bb9\u91cf\u9650\u5236\u540e\u5c31\u4f1a\u4ea7\u2f63\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u3002 Java\u5806\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u6d4b\u8bd5: //VM Args\uff1a-Xms20m -Xmx20m -XX: +HeapDumpOnOutOfMemoryError // \u9650\u5236Java\u5806\u7684\u2f24\u2f29\u4e3a20MB\uff0c\u4e0d\u53ef\u6269\u5c55\uff08\u5c06\u5806\u7684\u6700\u2f29\u503c-Xms\u53c2\u6570\u4e0e\u6700\u2f24\u503c-Xmx\u53c2\u6570\u8bbe\u7f6e\u4e3a\u2f00\u6837\u5373\u53ef\u907f\u514d\u5806\u2f83\u52a8\u6269\u5c55\uff09 // -XX: +HeapDumpOnOutOfMemoryError\u53ef\u4ee5\u8ba9\u865a\u62df\u673a\u5728\u51fa\u73b0\u5185\u5b58\u6ea2 \u51fa\u5f02\u5e38\u65f6Dump\u51fa\u5f53\u524d\u7684\u5185\u5b58\u5806\u8f6c\u50a8\u5feb\u7167\u4ee5\u4fbf\u4e8b\u540e\u8fdb\u2f8f\u5206\u6790 import java.util.ArrayList ; public class HeapOOM { static class OOMObject { } public static void main ( String [] args ){ ArrayList OOMObject list = new ArrayList OOMObject (); while ( true ){ list . add ( new OOMObject ()); } } } \u7ed3\u679c java.lang.OutOfMemoryError: Java heap space Dumping heap to java_pid46106.hprof ... Heap dump file created [29129293 bytes in 0.350 secs] \u8981\u89e3\u51b3\u8fd9\u4e2a\u533a\u57df\u7684\u5f02\u5e38\uff0c\u2f00\u822c\u7684\u2f3f\u6bb5\u662f\u5148\u901a\u8fc7\u5185\u5b58\u6620\u50cf\u5206\u6790\u2f2f\u5177\u5bf9Dump\u51fa\u6765\u7684\u5806\u8f6c\u50a8\u5feb\u7167\u8fdb\u2f8f\u5206\u6790\uff0c\u91cd\u70b9\u662f\u786e\u8ba4\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u662f\u5426\u662f\u5fc5\u8981\u7684\uff0c\u4e5f\u5c31\u662f\u8981\u5148\u5206\u6e05\u695a\u5230\u5e95\u662f\u51fa\u73b0\u4e86\u5185\u5b58\u6cc4\u6f0f(Memory Leak)\u8fd8\u662f\u5185\u5b58\u6ea2\u51fa(Memory Overflow)\u3002 Note \u53ef\u4ee5\u4f7f\u7528Eclipse Memory Analyzer\u6253\u5f00\u5806\u8f6c\u50a8\u5feb\u7167\u2f42\u4ef6\u3002The Eclipse Memory Analyzer is a fast and feature-rich Java heap analyzer that helps you find memory leaks and reduce memory consumption. Official Website \u5982\u679c\u662f\u5185\u5b58\u6cc4\u6f0f\uff0c\u53ef\u8fdb\u4e00\u6b65\u901a\u8fc7\u5de5\u5177\u67e5\u770b\u6cc4\u6f0f\u5bf9\u8c61\u5230GC Roots\u7684\u5f15\u7528\u94fe\u3002\u4e8e\u662f\u5c31\u80fd\u627e\u5230\u6cc4\u9732\u5bf9\u8c61\u662f\u901a\u8fc7\u600e\u6837\u7684\u8def\u5f84\u4e0eGC Roots\u76f8\u5173\u8054\u5e76\u5bfc\u81f4\u5783\u573e\u6536\u96c6\u5668\u65e0\u6cd5\u81ea\u52a8\u56de\u6536\u5b83\u4eec\u7684\u3002\u638c\u63e1\u4e86\u6cc4\u9732\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u53caGC Roots\u5f15\u7528\u94fe\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u51c6\u786e\u5730\u5b9a\u4f4d\u51fa\u6cc4\u9732\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6cc4\u9732\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u786e\u5b9e\u90fd\u8fd8\u5fc5\u987b\u5b58\u6d3b\u7740\uff0c\u90a3\u5c31\u5e94\u5f53\u68c0\u67e5\u865a\u62df\u673a\u7684\u5806\u53c2\u6570\uff08-Xmx\u4e0e-Xms\uff09\uff0c\u4e0e\u673a\u5668\u7269\u7406\u5185\u5b58\u5bf9\u6bd4\u770b\u662f\u5426\u8fd8\u53ef\u4ee5\u8c03\u5927\uff0c\u4ece\u4ee3\u7801\u4e0a\u68c0\u67e5\u662f\u5426\u5b58\u5728\u67d0\u4e9b\u5bf9\u8c61\u751f\u547d\u671f\u8fc7\u957f\u3001\u6301\u6709\u72b6\u6001\u65f6\u95f4\u8fc7\u957f\u7684\u60c5\u51b5\uff0c\u5c1d\u8bd5\u51cf\u5c11\u7a0b\u5e8f\u8fd0\u884c\u671f\u7684\u5185\u5b58\u6d88\u8017\u3002 \u865a\u62df\u673a\u6808\u548c\u672c\u5730\u65b9\u6cd5\u6808\u6ea2\u51fa \u7531\u4e8eHotSpot\u865a\u62df\u673a\u4e2d\u5e76\u4e0d\u533a\u5206\u865a\u62df\u673a\u6808\u548c\u672c\u5730\u65b9\u6cd5\u6808\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8eHotSpot\u6765\u8bf4\uff0c\u867d\u7136 -Xoss \u53c2\u6570\uff08\u8bbe\u7f6e\u672c\u5730\u65b9\u6cd5\u6808\u5927\u5c0f\uff09\u5b58\u5728\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u6548\u679c\u7684\uff0c\u6808\u5bb9\u91cf\u53ea\u7531 -Xss \u53c2\u6570\u8bbe\u7f6e\u3002\u5173\u4e8e\u865a\u62df\u673a\u6808\u548c\u672c\u5730\u65b9\u6cd5\u6808\uff0c\u5728Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u63cf\u8ff0\u4e86\u4e24\u79cd\u5f02\u5e38\uff1a \u5982\u679c\u7ebf\u7a0b\u8bf7\u6c42\u7684\u6808\u6df1\u5ea6\u5927\u4e8e\u865a\u62df\u673a\u6240\u5141\u8bb8\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u5c06\u629b\u51fa StackOverflowError \u5f02\u5e38\u3002 \u5982\u679c\u865a\u62df\u673a\u5728\u6269\u5c55\u6808\u65f6\u65e0\u6cd5\u7533\u8bf7\u5230\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5c06\u629b\u51fa OutOfMemoryError \u5f02\u5e38\u3002 \u865a\u62df\u673a\u6808\u548c\u672c\u5730\u2f45\u6cd5\u6808OOM\u6d4b\u8bd5\uff08\u4ec5\u4f5c\u4e3a\u7b2c1\u70b9\u6d4b\u8bd5\u7a0b\u5e8f\uff09: \u3000 Java //VM args: -Xss128k // -Xss128k \u51cf\u5c0f\u6808\u5185\u5b58\u81f3128k public class JavaVMStackOverFlowError { private int stackLength = 1 ; public void stackLeak (){ stackLength ++; stackLeak (); } public static void main ( String [] args ){ JavaVMStackOverFlowError sof = new JavaVMStackOverFlowError (); try { sof . stackLeak (); } catch ( Throwable e ){ System . out . println ( stackLength: + sof . stackLength ); throw e ; } } } stackLength : 17600 Exception in thread main java . lang . StackOverflowError at JavaVMStackOverFlowError . stackLeak ( JavaVMStackOverFlowError . java : 5 ) ... \u8fd9\u4e24\u79cd\u5f02\u5e38\u5176\u5b9e\u5b58\u5728\u7740\u4e00\u4e9b\u4e92\u76f8\u91cd\u53e0\u7684\u5730\u65b9\u3002\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff1a\u5728\u5355\u4e2a\u7ebf\u7a0b\u4e0b\uff0c\u65e0\u8bba\u662f\u7531\u4e8e\u6808\u5e27\u592a\u5927\u8fd8\u662f\u865a\u62df\u673a\u6808\u5bb9\u91cf\u592a\u5c0f\uff0c\u5f53\u5185\u5b58\u65e0\u6cd5\u5206\u914d\u7684\u65f6\u5019\uff0c\u865a\u62df\u673a\u629b\u51fa\u7684\u90fd\u662f StackOverflowError \u5f02\u5e38\u3002\u5982\u679c\u6d4b\u8bd5\u65f6\u4e0d\u9650\u4e8e\u5355\u7ebf\u7a0b\uff0c\u901a\u8fc7\u4e0d\u65ad\u5730\u5efa\u7acb\u7ebf\u7a0b\u7684\u65b9\u5f0f\u5012\u662f\u53ef\u4ee5\u4ea7\u751f\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u3002 \u5982\u679c\u662f\u5efa\u7acb\u8fc7\u591a\u7ebf\u7a0b\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\uff0c\u5728\u4e0d\u80fd\u51cf\u5c11\u7ebf\u7a0b\u6570\u6216\u8005\u66f4\u636264\u4f4d\u865a\u62df\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u53ea\u80fd\u901a\u8fc7\u51cf\u5c11\u6700\u5927\u5806\u548c\u51cf\u5c11\u6808\u5bb9\u91cf\u6765\u6362\u53d6\u66f4\u591a\u7684\u7ebf\u7a0b\u3002 \u65b9\u6cd5\u533a\u548c\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u6ea2\u51fa String.intern() \u662f\u4e00\u4e2a Native \u65b9\u6cd5\uff0c\u4ed6\u7684\u4f5c\u7528\u662f\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u4e2d\u5df2\u7ecf\u5305\u542b\u4e00\u4e2a\u7b49\u4e8e\u6b64 String \u5e38\u91cf\u7684\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4ee3\u8868\u6c60\u4e2d\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684 String \u5bf9\u8c61\uff1b\u5426\u5219\uff0c\u5c06\u6b64 String \u5bf9\u8c61\u5305\u542b\u7684\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230\u5e38\u91cf\u6c60\u4e2d\uff0c\u5e76\u4e14\u8fd4\u56de\u6b64 String \u5bf9\u8c61\u7684\u5f15\u7528\u3002\u5728JDK1.6\u53ca\u4e4b\u524d\u7684\u7248\u672c\u4e2d\uff0c\u7531\u4e8e\u5e38\u91cf\u6c60\u5206\u914d\u5728\u6c38\u4e45\u4ee3\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7-XX:PermSize\u548c-XX:MaxPermSize\u9650\u5236\u65b9\u6cd5\u533a\u5927\u5c0f\uff0c\u4ece\u800c\u95f4\u63a5\u9650\u5236\u5176\u4e2d\u7684\u5e38\u91cf\u6c60\u7684\u5bb9\u91cf\u3002 \u8fd9\u610f\u5473\u7740\u91cd\u590d\u8c03\u7528 String.intern() \u5728JDK1.6\u4e4b\u524d\u7684\u7248\u672c\u4e2d\u4f1a\u629b\u51fa\u65b9\u6cd5\u533a(PermGen space) OutOfMemoryError \uff0c\u800c\u5728JDK1.7\u4e2d\uff0c\u4e0d\u4f1a\u51fa\u73b0\u3002 //VM args:-XX:PermSize10M -XX:MaxPermSize=10M // PermSize \u65b9\u6cd5\u533a\u5927\u5c0f import java.util.ArrayList ; import java.util.List ; public class RuntimeContantPoolOutOfMemoryError { public static void main ( String [] args ) { //\u4fdd\u5b58\u5bf9\u5e38\u91cf\u6c60\u5b57\u7b26\u4e32\u7684\u5e94\u7528\uff0c\u907f\u514dFull GC\u56de\u6536\u5e38\u91cf\u6c60\u7684\u884c\u4e3a List String list = new ArrayList String (); //10M\u5728int\u7684\u8303\u56f4\u8db3\u591f\u4ea7\u751fOutOfMemoryError int i = 0 ; while ( true ){ list . add ( String . valueOf ( i ++)); } } } \u672c\u673a\u76f4\u63a5\u5185\u5b58\u6ea2\u51fa DirectMemory \u5bb9\u91cf\u53ef\u4ee5\u901a\u8fc7 -XX:Max C DirectMemory /C Size \u6307\u5b9a\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e0eJava\u5806\u6700\u5927\u503c\uff08 -Xmx \u6307\u5b9a\uff09\u4e00\u6837\u3002\u4ee3\u7801\u6e05\u5355\u8d8a\u8fc7\u4e86 DirectByteBuffer \u7c7b\uff0c\u76f4\u63a5\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6Unsafe\u5b9e\u4f8b\u8fdb\u884c\u5185\u5b58\u5206\u914d\uff08Unsafe\u7c7b\u7684getUnsafe\u65b9\u6cd5\u9650\u5236\u4e86\u53ea\u6709\u5f15\u5bfc\u7c7b\u52a0\u8f7d\u5668\u624d\u4f1a\u8fd4\u56de\u5b9e\u4f8b\uff0c\u4e5f\u5c31\u662f\u8bbe\u8ba1\u8005\u5e0c\u671b\u53ea\u6709 rt.jar \u4e2d\u7684\u7c7b\u624d\u80fd\u4f7f\u7528Unsafe\u7684\u529f\u80fd\uff09\u3002\u56e0\u4e3a\uff0c\u867d\u7136\u4f7f\u7528 DirectByteBuffer \u5206\u914d\u5185\u5b58\u4e5f\u4f1a\u629b\u51fa\u5185\u5b58\u5f02\u5e38\uff0c\u4f46\u5b83\u629b\u51fa\u5f02\u5e38\u65f6\u5e76\u6ca1\u6709\u771f\u6b63\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u5206\u914d\uff0c\u800c\u662f\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e5\u5185\u5b58\u65e0\u6cd5\u5206\u914d\uff0c\u4e8e\u662f\u624b\u52a8\u629b\u51fa\u5f02\u5e38\uff0c\u771f\u6b63\u7533\u8bf7\u5206\u914d\u5185\u5b58\u7684\u65b9\u6cd5\u662f unsafe.allocateMemory . /** * VM Args: -Xmx20M -XX:Max C DirectMemory /C Size=10M */ public class C DirectMemory / C OOM { private static final int _1MB = 1024 * 1024 ; public static void main ( String [] args ) throws IllegalAccessException { Field unsafeField = Unsafe . class . getDeclaredFields ()[ 0 ]; unsafeField . setAccessible ( true ); Unsafe unsafe = ( Unsafe ) unsafeField . get ( null ); while ( true ) { unsafe . allocateMemory ( _1MB ); } } } \u7531 DirectMemory \u5bfc\u81f4\u7684\u5185\u5b58\u6ea2\u51fa\uff0c\u4e00\u4e2a\u660e\u663e\u7684\u7279\u5f81\u662f\u5728Heap Dump\u6587\u4ef6\u4e2d\u4e0d\u4f1a\u770b\u89c1\u660e\u663e\u7684\u5f02\u5e38\uff0c\u5982\u679c\u8bfb\u8005\u53d1\u73b0OOM\u4e4b\u540eDump\u6587\u4ef6\u5f88\u5c0f\uff0c\u800c\u7a0b\u5e8f\u4e2d\u53c8\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u4f7f\u7528\u4e86NIO\uff0c\u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u68c0\u67e5\u4e00\u4e0b\u662f\u4e0d\u662f\u8fd9\u65b9\u9762\u7684\u539f\u56e0\u3002","title":"Chapter 2 : Java\u5185\u5b58\u533a\u57df\u4e0e\u5185\u5b58\u6ea2\u51fa\u6b63\u5e38"},{"location":"java/ujvm/ch2/#java-2-java","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 2 - Java\u5185\u5b58\u533a\u57df\u4e0e\u5185\u5b58\u6ea2\u51fa\u6b63\u5e38"},{"location":"java/ujvm/ch2/#1","text":"\u672c\u7ae0\u5c06\u4ece\u6982\u5ff5\u4e0a\u4ecb\u7ecdJava\u865a\u62df\u673a\u5185\u5b58\u7684\u5404\u4e2a\u533a\u57df\uff0c\u8bb2\u89e3\u8fd9\u4e9b\u533a\u57df\u7684\u4f5c\u2f64\u3001\u670d\u52a1\u5bf9\u8c61\u4ee5\u53ca\u5176\u4e2d\u53ef\u80fd\u4ea7\u2f63\u7684\u95ee\u9898\u3002","title":"1 \u6982\u8ff0"},{"location":"java/ujvm/ch2/#2","text":"\u6839\u636e\u300aJava\u865a\u62df\u673a\u89c4\u8303(Java SE 7\u7248)\u300b\u7684\u89c4\u5b9a\uff0c Java\u865a\u62df\u673a\u6240\u7ba1\u7406\u7684\u5185\u5b58\u5c06\u4f1a\u5305\u62ec\u4ee5\u4e0b\u2f0f\u4e2a\u8fd0\u2f8f\u65f6\u6570\u636e\u533a\u57df\u3002 [http://blog.jamesdbloom.com/JVMInternals.html]","title":"2 \u8fd0\u884c\u65f6\u6570\u636e\u533a\u57df"},{"location":"java/ujvm/ch2/#_1","text":"\u7a0b\u5e8f\u8ba1\u6570\u5668(Program Counter Register)\u662f\u4e00\u5757\u8f83\u5c0f\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5b83\u53ef\u4ee5\u770b\u4f5c\u662f\u5f53\u524d\u7ebf\u7a0b\u6240\u6267\u884c\u7684\u5b57\u8282\u7801\u7684\u884c\u53f7\u6307\u793a\u5668\u3002\u6bcf\u6761\u7ebf\u7a0b\u90fd\u6709\u2f00\u4e2a\u72ec\u2f74\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\uff0c\u5404\u6761\u7ebf\u7a0b\u4e4b\u95f4\u8ba1\u6570\u5668\u4e92\u4e0d\u5f71\u54cd\uff0c\u72ec\u2f74\u5b58\u50a8\u3002 \u5982\u679c\u7ebf\u7a0b\u6b63\u5728\u6267\u884c\u7684\u662fJava\u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8ba1\u6570\u5668\u7684\u503c\u5c31\u662f\u6b63\u5728\u6267\u884c\u7684\u865a\u62df\u673a\u5b57\u8282\u7801\u6307\u4ee4\u7684\u5730\u5740\uff1b\u5982\u679c\u6b63\u5728\u6267\u884c\u7684\u662f Native \u65b9\u6cd5\uff0c\u8fd9\u4e2a\u8ba1\u6570\u5668\u503c\u4e3a\u7a7a(undefined)\u3002\u6b64\u5185\u5b58\u533a\u57df\u662f\u552f\u4e00\u4e00\u4e2a\u5728Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u6ca1\u6709\u89c4\u5b9a\u4efb\u4f55 OutOfMemoryError \u60c5\u51b5\u7684\u533a\u57df\u3002","title":"\u7a0b\u5e8f\u8ba1\u6570\u5668"},{"location":"java/ujvm/ch2/#java","text":"Java\u865a\u62df\u673a\u6808\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\uff0c\u5b83\u7684\u751f\u547d\u5468\u671f\u4e0e\u7ebf\u7a0b\u76f8\u540c\u3002\u6bcf\u4e2a\u65b9\u6cd5\u6267\u884c\u7684\u540c\u65f6\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u6808\u5e27(Stack Frame)\u7528\u4e8e\u5b58\u50a8\u5c40\u90e8\u53d8\u91cf\u8868\u3001\u64cd\u4f5c\u6570\u6808\u3001\u52a8\u6001\u94fe\u63a5\u3001\u65b9\u6cd5\u51fa\u53e3\u7b49\u4fe1\u606f\u3002 \u5c40\u90e8\u53d8\u91cf\u8868\u5b58\u653e\u4e86\u7f16\u8bd1\u671f\u53ef\u77e5\u7684\u5404\u79cd\u57fa\u672c\u6570\u636e\u7c7b\u578b( boolean \u3001 byte \u3001 char \u3001 short \u3001 int \u3001 float \u3001 long \u3001 double )\u3001\u5bf9\u8c61\u5f15\u7528( Reference \u7c7b\u578b)\u548c returnAddress \u7c7b\u578b\uff08\u6307\u5411\u4e86\u4e00\u6761\u5b57\u8282\u7801\u6307\u4ee4\u7684\u5730\u5740\uff09\u3002 \u5176\u4e2d64\u4f4d\u957f\u5ea6\u7684 long \u548c double \u7c7b\u578b\u7684\u6570\u636e\u4f1a\u5360\u75282\u4e2a\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4(Slot)\uff0c\u5176\u4f59\u7684\u6570\u636e\u7c7b\u578b\u53601\u4e2a\u3002\u5c40\u90e8\u53d8\u91cf\u8868\u6240\u9700\u7684\u5185\u5b58\u7a7a\u95f4\u5728\u7f16\u8bd1\u671f\u95f4\u5206\u914d\u5b8c\u6210\uff0c\u5f53\u8fdb\u5165\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u5728\u5e27\u4e2d\u5206\u914d\u591a\u5927\u7684\u5c40\u90e8\u53d8\u91cf\u7a7a\u95f4\u662f\u5b8c\u5168\u786e\u5b9a\u7684\uff0c\u5728\u65b9\u6cd5\u8fd0\u884c\u671f\u95f4\u4e0d\u4f1a\u6539\u53d8\u5c40\u90e8\u53d8\u91cf\u8868\u7684\u5927\u5c0f\u3002 \u5728Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\uff0c\u5bf9\u8fd9\u4e2a\u533a\u57df\u89c4\u5b9a\u4e86\u4e24\u79cd\u5f02\u5e38\u72b6\u51b5\uff1a \u5982\u679c\u7ebf\u7a0b\u8bf7\u6c42\u6808\u7684\u6df1\u5ea6\u5927\u4e8e\u865a\u62df\u673a\u6240\u5141\u8bb8\u7684\u6df1\u5ea6\uff0c\u5c06\u629b\u51fa StackOverflowError \u5f02\u5e38\u3002 \u5982\u679c\u865a\u62df\u673a\u6808\u53ef\u4ee5\u52a8\u6001\u6269\u5c55\uff08\u5f53\u524d\u2f24\u90e8\u5206\u7684Java\u865a\u62df\u673a\u90fd\u53ef\u52a8\u6001\u6269\u5c55\uff0c\u53ea\u4e0d\u8fc7Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u4e5f\u5141\u8bb8\u56fa\u5b9a\u957f\u5ea6\u7684\u865a\u62df\u673a\u6808\uff09\uff0c\u5982\u679c\u6269\u5c55\u65f6\u2f46\u6cd5\u7533\u8bf7\u5230\u2f9c\u591f\u7684\u5185\u5b58\uff0c\u5c31\u4f1a\u629b\u51fa\u629b\u51fa OutOfMemoryError \u5f02\u5e38\u3002","title":"Java\u865a\u62df\u673a\u6808"},{"location":"java/ujvm/ch2/#_2","text":"\u672c\u5730\u65b9\u6cd5\u6808 (Native Method Stack)\u4e0e\u865a\u62df\u673a\u6808\u6240\u53d1\u6325\u7684\u4f5c\u7528\u662f\u975e\u5e38\u76f8\u4f3c\u7684\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\u4e0d\u8fc7\u662f\u865a\u62df\u673a\u6808\u4e3a\u865a\u62df\u673a\u6267\u884cjava\u65b9\u6cd5\uff0c\u800c\u672c\u5730\u6808\u5219\u4e3a\u865a\u62df\u673a\u4f7f\u7528\u5230\u7684 native \u65b9\u6cd5\u670d\u52a1\u3002","title":"\u672c\u5730\u65b9\u6cd5\u6808"},{"location":"java/ujvm/ch2/#java_1","text":"Java \u5806 (Heap)\u662f\u7ebf\u7a0b\u5171\u4eab\u7684\uff0c\u5728\u865a\u62df\u673a\u542f\u52a8\u65f6\u521b\u5efa\u3002Java\u5806\u7684\u552f\u4e00\u76ee\u7684\u5c31\u662f\u5b58\u653e\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u51e0\u4e4e\u6240\u6709\u7684\u5bf9\u8c61\u5b9e\u4f8b\u90fd\u5728\u8fd9\u91cc\u5206\u914d\u5185\u5b58\u3002 Java\u5806\u662f\u5783\u573e\u6536\u96c6\u5668\u7ba1\u7406\u7684\u4e3b\u8981\u533a\u57df\uff0c\u56e0\u6b64\u5f88\u591a\u65f6\u5019\u4e5f\u88ab\u79f0\u4f5c\"GC\u5806\"(Garbage Collected Heap)\u3002\u7531\u4e8e\u73b0\u5728\u6536\u96c6\u5668\u57fa\u672c\u90fd\u91c7\u7528\u5206\u4ee3\u6536\u96c6\u7b97\u6cd5\uff0c\u6240\u4ee5Java\u5806\u4e2d\u8fd8\u53ef\u4ee5\u7ec6\u5206\u4e3a\uff1a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff1b\u518d\u7ec6\u81f4\u4e00\u70b9\u7684\u6709Eden\u7a7a\u95f4\u3001From Survivor\u7a7a\u95f4\u3001To Survivor\u7a7a\u95f4\u7b49\u3002 Java\u5806\u5728\u5b9e\u73b0\u65f6\uff0c\u65e2\u53ef\u4ee5\u5b9e\u73b0\u6210\u56fa\u5b9a\u5927\u5c0f\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u53ef\u6269\u5c55\u7684\uff0c\u4e0d\u8fc7\u5f53\u524d\u4e3b\u6d41\u7684\u865a\u62df\u673a\u90fd\u662f\u6309\u7167\u53ef\u6269\u5c55\u6765\u5b9e\u73b0\u7684\u3002","title":"Java\u5806"},{"location":"java/ujvm/ch2/#_3","text":"\u2f45\u6cd5\u533a (Method Area)\u662f\u5404\u4e2a\u7ebf\u7a0b\u5171\u4eab\u7684\u5185\u5b58\u533a\u57df\uff0c\u5b83\u2f64\u4e8e\u5b58\u50a8\u5df2\u88ab\u865a\u62df\u673a\u52a0\u8f7d\u7684\u7c7b\u4fe1\u606f\u3001\u5e38\u91cf\u3001\u9759\u6001\u53d8\u91cf\u3001\u5373\u65f6\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u7b49\u6570\u636e\u3002 \u5bf9\u4e8eHotSpot\u865a\u62df\u673a\u6765\u8bf4\uff0c\u5b83\u4e5f\u53eb\u505a \u6c38\u4e45\u4ee3 (Permanent Generation, PermGen )\u3002\u8fd9\u662f\u56e0\u4e3aHotSpot\u865a\u62df\u673a\u628aGC\u5206\u4ee3\u6536\u96c6\u6269\u5c55\u2f84\u2f45\u6cd5\u533a\uff0c\u6216\u8005\u8bf4\u4f7f\u2f64\u6c38\u4e45\u4ee3\u6765\u5b9e\u73b0\u2f45\u6cd5\u533a\uff0c\u8fd9\u6837HotSpot\u7684\u5783\u573e\u6536\u96c6\u5668\u53ef\u4ee5\u50cf\u7ba1\u7406Java\u5806\u2f00\u6837\u7ba1\u7406\u8fd9\u90e8\u5206\u5185\u5b58\uff0c\u80fd\u591f\u7701\u53bb\u4e13\u95e8\u4e3a\u2f45\u6cd5\u533a\u7f16\u5199\u5185\u5b58\u7ba1\u7406\u4ee3\u7801\u7684\u2f2f\u4f5c\u3002\u5bf9\u4e8e\u5176\u4ed6\u865a\u62df\u673a\uff08\u5982BEA JRockit\u3001IBM J9\u7b49\uff09\u6765\u8bf4\u662f\u4e0d\u5b58\u5728\u6c38\u4e45\u4ee3\u7684\u6982\u5ff5\u7684\u3002 \u7531\u4e8e\u6c38\u4e45\u4ee3\u5185\u53ef\u80fd\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u6216\u6ea2\u51fa\u7b49\u95ee\u9898\u800c\u5bfc\u81f4\u7684 java.lang.OutOfMemoryError: PermGen \uff0cJEP\u5c0f\u7ec4\u4eceJDK1.7\u5f00\u59cb\u5c31\u7b79\u5212\u79fb\u9664\u6c38\u4e45\u4ee3( JEP 122: Remove the Permanent Generation )\uff0c\u5e76\u4e14\u5728JDK 1.7\u4e2d\u628a\u5b57\u7b26\u4e32\u5e38\u91cf\uff0c\u7b26\u53f7\u5f15\u7528\u7b49\u79fb\u51fa\u4e86\u6c38\u4e45\u4ee3\u3002\u5230\u4e86Java 8\uff0c\u6c38\u4e45\u4ee3\u88ab\u5f7b\u5e95\u5730\u79fb\u51fa\u4e86JVM\uff0c\u53d6\u800c\u4ee3\u4e4b\u7684\u662f \u5143\u7a7a\u95f4 (Metaspace)\uff1a In JDK 8, classes metadata is now stored in the native heap (\u672c\u5730\u5bf9\u5185\u5b58) and this space is called Metaspace . \u6839\u636eJava\u865a\u62df\u673a\u89c4\u8303\u7684\u89c4\u5b9a\uff0c\u5f53\u2f45\u6cd5\u533a\u2f46\u6cd5\u6ee1\u2f9c\u5185\u5b58\u5206\u914d\u9700\u6c42\u65f6\uff0c\u5c06\u629b\u51fa OutOfMemoryError \u5f02\u5e38\u3002 Young Generation \u65b0\u751f\u4ee3 Eden: where new objects get instantiated S0, S1 (Survivor space): hold live objects during minor GC S0: from Survivor S1: to Survivor Old Generation (Tenured) \u8001\u5e74\u4ee3 Permanent Generation \u6c38\u4e45\u4ee3","title":"\u65b9\u6cd5\u533a\uff08\u6c38\u4e45\u4ee3\uff09"},{"location":"java/ujvm/ch2/#_4","text":"\u8fd0\u2f8f\u65f6\u5e38\u91cf\u6c60 (Runtime Constant Pool\uff09\u662f\u2f45\u6cd5\u533a\u7684\u2f00\u90e8\u5206\u3002Class\u6587\u4ef6\u4e2d\u9664\u4e86\u6709\u7c7b\u7684\u7248\u672c\u3001\u5b57\u6bb5\u3001\u65b9\u6cd5\u3001\u63a5\u53e3\u7b49\u63cf\u8ff0\u4fe1\u606f\u5916\uff0c\u8fd8\u6709\u4e00\u9879\u4fe1\u606f\u5c31\u662f\u5e38\u91cf\u6c60(Constant Pool)\uff0c\u7528\u4e8e\u5b58\u653e\u7f16\u8bd1\u671f\u751f\u6210\u7684\u5404\u79cd\u5b57\u9762\u91cf\u548c\u7b26\u53f7\u5f15\u7528\u3002\u8fd9\u90e8\u5206\u5185\u5bb9\u5c06\u5728\u7c7b\u52a0\u8f7d\u540e\u8fdb\u5165\u65b9\u6cd5\u533a\u7684\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u4e2d\u5b58\u653e\u3002 JDK 1.7\u5f00\u59cb\uff0c\u5b57\u7b26\u4e32\u5e38\u91cf\u548c\u7b26\u53f7\u5f15\u7528\u7b49\u5c31\u88ab\u79fb\u51fa\u6c38\u4e45\u4ee3\uff1a \u7b26\u53f7\u5f15\u7528\u8fc1\u79fb\u81f3\u7cfb\u7edf\u5806\u5185\u5b58(Native Heap) \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u8fc1\u79fb\u81f3Java\u5806(Java Heap) Interned String: In JDK 7, interned strings are no longer allocated in the permanent generation of the Java heap, but are instead allocated in the main part of the Java heap (known as the young and old generations), along with the other objects created by the application. This change will result in more data residing in the main Java heap, and less data in the permanent generation, and thus may require heap sizes to be adjusted. Most applications will see only relatively small differences in heap usage due to this change, but larger applications that load many classes or make heavy use of the String.intern() method will see more significant differences. [ Java SE 7 Features and Enhancements ]","title":"\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60"},{"location":"java/ujvm/ch2/#_5","text":"\u76f4\u63a5\u5185\u5b58 (Direct Memory)\u4e0d\u662f\u865a\u62df\u673a\u8fd0\u884c\u65f6\u6570\u636e\u533a\u7684\u4e00\u90e8\u5206\u3002\u4f46\u662f\u8fd9\u90e8\u5206\u5185\u5b58\u4e5f\u88ab\u9891\u7e41\u5730\u4f7f\u7528\uff0c\u800c\u4e14\u4e5f\u53ef\u80fd\u5bfc\u81f4 OutOfMemoryError \u5f02\u5e38\u51fa\u73b0\u3002 \u5728JDK1.4\u4e2d\u65b0\u52a0\u5165\u4e86NIO\u7c7b\uff0c\u5f15\u5165\u4e86\u4e00\u79cd\u57fa\u4e8e\u901a\u9053\u4e0e\u7f13\u5b58\u533a(buffer)\u7684I/O\u65b9\u5f0f\uff0c\u5b83\u53ef\u4ee5\u4f7f\u7528 Native \u51fd\u6570\u5e93\u76f4\u63a5\u5206\u914d\u5806\u5916\u5185\u5b58\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5b58\u50a8\u5728Java\u5806\u4e2d\u7684 DirectByteBuffer \u5bf9\u8c61\u4f5c\u4e3a\u8fd9\u5757\u5185\u5b58\u7684\u5f15\u7528\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u6837\u80fd\u5728\u4e00\u4e9b\u573a\u666f\u4e2d\u663e\u8457\u63d0\u9ad8\u6027\u80fd\uff0c\u56e0\u4e3a\u907f\u514d\u4e86\u5728Java\u5806\u548c \u5806\u4e2d\u6765\u56de\u590d\u5236\u6570\u636e\u3002","title":"\u76f4\u63a5\u5185\u5b58"},{"location":"java/ujvm/ch2/#3-hotspot","text":"\u672c\u8282\u4ee5\u5e38\u2f64\u7684\u865a\u62df\u673aHotSpot\u548c\u5e38\u2f64\u7684\u5185\u5b58\u533a\u57dfJava\u5806\u4e3a\u4f8b\uff0c\u6df1\u2f0a\u63a2\u8ba8HotSpot\u865a\u62df\u673a\u5728Java\u5806\u4e2d\u5bf9\u8c61\u5206\u914d\u3001\u5e03\u5c40\u548c\u8bbf\u95ee\u7684\u5168\u8fc7\u7a0b\u3002","title":"3 HotSpot\u865a\u62df\u673a\u5bf9\u8c61\u63a2\u79d8"},{"location":"java/ujvm/ch2/#_6","text":"(1) \u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a new \u6307\u4ee4\u65f6\uff0c\u9996\u5148\u53bb\u68c0\u67e5\u8fd9\u4e2a\u6307\u4ee4\u7684\u53c2\u6570\u662f\u5426\u80fd\u5728\u5e38\u91cf\u6c60\u4e2d\u5b9a\u4f4d\u5230\u4e00\u4e2a\u7c7b\u7684\u7b26\u53f7\u5f15\u7528\uff0c\u5e76\u4e14\u68c0\u67e5\u8fd9\u4e2a\u7b26\u53f7\u5f15\u7528\u4ee3\u8868\u7684\u7c7b\u662f\u5426\u5df2\u7ecf\u88ab\u52a0\u8f7d\u3001\u89e3\u6790\u548c\u521d\u59cb\u5316\u8fc7\u3002\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u5fc5\u987b\u5148\u6267\u884c\u76f8\u5e94\u7684\u7c7b\u52a0\u8f7d\u8fc7\u7a0b\u3002 (2)\u5728\u7c7b\u52a0\u8f7d\u68c0\u67e5\u901a\u8fc7\u540e\uff0c\u63a5\u4e0b\u6765\u865a\u62df\u673a\u5c06\u4e3a\u65b0\u2f63\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002\u5bf9\u8c61\u6240\u9700\u5185\u5b58\u7684\u2f24\u2f29\u5728\u7c7b\u52a0\u8f7d\u5b8c\u6210\u540e\u4fbf\u53ef\u5b8c\u5168\u786e\u5b9a\uff0c\u4e3a\u5bf9\u8c61\u5206\u914d\u7a7a\u95f4\u7684\u4efb\u52a1\u7b49\u540c\u4e8e\u628a\u2f00\u5757\u786e\u5b9a\u2f24\u2f29\u7684\u5185\u5b58\u4eceJava\u5806\u4e2d\u5212\u5206\u51fa\u6765\u3002\u5982\u679cJava\u5806\u662f\u7edd\u5bf9\u89c4\u6574\u7684(\u6240\u6709\u2f64\u8fc7\u7684\u5185\u5b58\u90fd\u653e\u5728\u2f00\u8fb9\uff0c \u7a7a\u95f2\u7684\u5185\u5b58\u653e\u5728\u53e6\u2f00\u8fb9\uff0c\u4e2d\u95f4\u653e\u7740\u2f00\u4e2a\u6307\u9488\u4f5c\u4e3a\u5206\u754c\u70b9\u7684\u6307\u2f70\u5668)\uff0c\u90a3\u4e48\u5c06\u4f7f\u7528 \u6307\u9488\u78b0\u649e (Bump the Pointer)\u7684\u5206\u914d\u65b9\u5f0f: \u628a\u90a3\u4e2a\u6307\u9488\u5411\u7a7a\u95f2\u7a7a\u95f4\u90a3\u8fb9\u632a\u52a8\u2f00\u6bb5\u4e0e\u5bf9\u8c61\u2f24\u2f29\u76f8\u7b49\u7684\u8ddd\u79bb\u3002 \u5982\u679cJava\u5806\u4e2d\u7684\u5185\u5b58\u5e76\u4e0d\u662f\u89c4\u6574\u7684\uff0c\u5df2\u4f7f\u2f64\u7684\u5185\u5b58\u548c\u7a7a\u95f2\u7684\u5185\u5b58\u76f8\u4e92\u4ea4\u9519\uff0c\u90a3\u5c31\u6ca1\u6709\u529e\u6cd5\u7b80\u5355\u5730\u8fdb\u2f8f\u6307\u9488\u78b0\u649e\u4e86\uff0c\u865a\u62df\u673a\u5c31\u5fc5\u987b\u7ef4\u62a4\u2f00\u4e2a\u5217\u8868\uff0c\u8bb0\u5f55\u4e0a\u54ea\u4e9b\u5185\u5b58\u5757\u662f\u53ef\u2f64\u7684\uff0c\u5728\u5206\u914d\u7684\u65f6\u5019\u4ece\u5217\u8868\u4e2d\u627e\u5230\u2f00\u5757\u2f9c\u591f\u2f24\u7684\u7a7a\u95f4\u5212\u5206\u7ed9\u5bf9\u8c61\u5b9e \u4f8b\uff0c\u5e76\u66f4\u65b0\u5217\u8868\u4e0a\u7684\u8bb0\u5f55\uff0c\u8fd9\u79cd\u5206\u914d\u2f45\u5f0f\u79f0\u4e3a \u7a7a\u95f2\u5217\u8868 (Free List)\u3002 \u4f46\u662f\u5185\u5b58\u7684\u5206\u914d\u662f\u540c\u6b65\u7684\uff0c\u5982\u679c\u4e00\u4e2a\u7ebf\u7a0b\u521a\u5206\u914d\u4e00\u4e2a\u5bf9\u8c61\u5185\u5b58\uff0c\u4f46\u662f\u8fd8\u6ca1\u6709\u4fee\u6539\u6307\u9488\u6240\u6307\u5411\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5206\u914d\u5bf9\u8c61\u7684\u65f6\u5019\u53ef\u80fd\u5c31\u51fa\u9519\u4e86\u3002\u89e3\u51b3\u65b9\u6cd5\u6709\u4e24\u4e2a: \u5bf9\u5206\u914d\u5185\u5b58\u7a7a\u95f4\u7684\u52a8\u4f5c\u8fdb\u884c\u540c\u6b65\u5904\u7406\uff08CAS\u65b9\u5f0f\uff09\u3002 \u628a\u5185\u5b58\u5206\u914d\u7684\u52a8\u4f5c\u6309\u7167\u7ebf\u7a0b\u5212\u5206\u5728\u4e0d\u540c\u7684\u7a7a\u95f4\u8fdb\u884c\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u5728java\u5806\u4e2d\u9884\u5206\u914d\u4e00\u5c0f\u5757\u5185\u5b58\uff0c\u79f0\u4e3a\u672c\u5730\u7ebf\u7a0b\u5206\u914d\u7f13\u51b2(TLAB)\u3002\u53ea\u6709TLAB\u7528\u5b8c\u5e76\u5206\u914d\u65b0\u7684TLAB\u65f6\uff0c\u624d\u9700\u8981\u540c\u6b65\u3002JVM\u662f\u5426\u5f00\u542fTLAB\u529f\u80fd\uff0c\u53ef\u901a\u8fc7-XX:+/-UseTLAB\u53c2\u6570\u6765\u8bbe\u5b9a\u3002 (3) \u5185\u5b58\u5206\u914d\u5b8c\u4e4b\u540e\uff0c\u521d\u59cb\u5316\u96f6\u503c\uff08\u4e0d\u5305\u62ec\u5bf9\u8c61\u5934\uff09\uff0c\u5982\u679c\u4f7f\u7528TLAB\uff0c\u8fd9\u4e00\u5de5\u4f5c\u8fc7\u7a0b\u4e5f\u53ef\u4ee5\u63d0\u524d\u81f3TLAB\u5206\u914d\u65f6\u8fdb\u884c\u3002 (4) \u63a5\u4e0b\u6765\uff0cJVM\u5bf9\u5bf9\u8c61\u8fdb\u884c\u5fc5\u8981\u7684\u8bbe\u7f6e\uff0c\u4f8b\u5982\u8fd9\u4e2a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3001\u5982\u4f55\u624d\u80fd\u627e\u5230\u7c7b\u7684\u5143\u6570\u636e\u4fe1\u606f\u3001\u5bf9\u8c61\u7684\u54c8\u5e0c\u7801\u3001\u5bf9\u8c61\u7684GC\u5206\u4ee3\u5e74\u9f84\u7b49\u4fe1\u606f\u3002\u8fd9\u4e9b\u4fe1\u606f\u5b58\u653e\u5728\u5bf9\u8c61\u7684\u5bf9\u8c61\u5934\u4e2d\uff0c\u6839\u636eJVM\u5f53\u524d\u8fd0\u884c\u72b6\u6001\u4e0d\u540c\uff0c\u5982\u662f\u5426\u542f\u7528\u504f\u5411\u9501\u7b49\uff0c\u5bf9\u8c61\u5934\u4f1a\u6709\u4e0d\u540c\u7684\u8bbe\u7f6e\u65b9\u5f0f\u3002 \u5728\u4e0a\u2faf\u2f2f\u4f5c\u90fd\u5b8c\u6210\u4e4b\u540e\uff0c\u4ece\u865a\u62df\u673a\u7684\u89c6\u2f93\u6765\u770b\uff0c\u2f00\u4e2a\u65b0\u7684\u5bf9\u8c61\u5df2\u7ecf\u4ea7\u2f63\u4e86\uff0c\u4f46\u4eceJava\u7a0b\u5e8f\u7684\u89c6\u2f93\u6765\u770b\uff0c\u5bf9\u8c61\u521b\u5efa\u624d\u521a\u521a\u5f00\u59cb\u2014\u2014 \u2f45\u6cd5\u8fd8\u6ca1\u6709\u6267\u2f8f\uff0c\u6240\u6709\u7684\u5b57\u6bb5\u90fd\u8fd8\u4e3a\u96f6\u3002\u6240\u4ee5\uff0c\u2f00\u822c\u6765\u8bf4\uff08\u7531\u5b57\u8282\u7801\u4e2d\u662f\u5426\u8ddf\u968finvokespecial\u6307\u4ee4\u6240\u51b3\u5b9a\uff09\uff0c\u6267\u2f8f new \u6307\u4ee4\u4e4b\u540e\u4f1a\u63a5\u7740\u6267\u2f8f \u2f45\u6cd5\uff0c\u628a\u5bf9\u8c61\u6309\u7167\u7a0b\u5e8f\u5458\u7684\u610f\u613f\u8fdb\u2f8f\u521d\u59cb\u5316\uff0c\u8fd9\u6837\u2f00\u4e2a\u771f\u6b63\u53ef\u2f64\u7684\u5bf9\u8c61\u624d\u7b97\u5b8c\u5168\u4ea7\u2f63\u51fa\u6765\u3002","title":"\u5bf9\u8c61\u7684\u521b\u5efa"},{"location":"java/ujvm/ch2/#_7","text":"\u5728HotSpot\u865a\u62df\u673a\u4e2d\uff0c\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u5e03\u5c40\u53ef\u4ee5\u5206\u4e3a3\u5757\u533a\u57df\uff1a\u5bf9\u8c61\u5934(Object Header)\u3001\u5b9e\u4f8b\u6570\u636e(Instance Data)\u548c\u5bf9\u9f50\u586b\u5145(Padding)\u3002 HotSpot\u865a\u62df\u673a\u7684\u5bf9\u8c61\u5934\u5305\u62ec\u4e24\u90e8\u5206\u4fe1\u606f: MarkWord: \u7528\u4e8e\u5b58\u50a8\u5bf9\u8c61\u81ea\u8eab\u7684\u8fd0\u884c\u65f6\u6570\u636e\uff08\u54c8\u5e0c\u7801\u3001GC\u5206\u4ee3\u5e74\u9f84\u3001\u9501\u72b6\u6001\u6807\u5fd7\u3001\u7ebf\u7a0b\u6301\u6709\u7684\u9501\u3001\u504f\u5411\u7ebf\u7a0bID\u3001\u504f\u5411\u65f6\u95f4\u6233\u7b49\uff09 Klass pointer: \u7c7b\u578b\u6307\u9488\uff08\u5373\u5bf9\u8c61\u6307\u5411\u5b83\u7684\u7c7b\u5143\u6570\u636e\u7684\u6307\u9488\uff0cJVM\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u6765\u786e\u5b9a\u8fd9\u4e2a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7684\u5b9e\u4f8b\uff09\u3002 \u53e6\u5916\uff0c\u5982\u679c\u5bf9\u8c61\u662f\u2f00\u4e2aJava\u6570\u7ec4\uff0c\u90a3\u5728\u5bf9\u8c61\u5934\u4e2d\u8fd8\u5fc5\u987b\u6709\u2f00\u5757\u2f64\u4e8e\u8bb0\u5f55\u6570\u7ec4\u957f\u5ea6\u7684\u6570\u636e\uff0c\u56e0 \u4e3a\u865a\u62df\u673a\u53ef\u4ee5\u901a\u8fc7\u666e\u901aJava\u5bf9\u8c61\u7684\u5143\u6570\u636e\u4fe1\u606f\u786e\u5b9aJava\u5bf9\u8c61\u7684\u2f24\u2f29\uff0c\u4f46\u662f\u4ece\u6570\u7ec4\u7684\u5143\u6570\u636e\u4e2d\u5374\u2f46\u6cd5\u786e\u5b9a\u6570\u7ec4\u7684\u2f24\u2f29\u3002 HotSpot\u865a\u62df\u673a markOop.cpp \u4e2d\u7684\u4ee3\u7801\uff08\u6ce8\u91ca\uff09\u2f5a\u6bb5\uff0c\u5b83\u63cf\u8ff0\u4e8632bit\u4e0bMark Word\u7684\u5b58\u50a8\u72b6\u6001\u3002 source enum { age_bits = 4 , lock_bits = 2 , biased_lock_bits = 1 , max_hash_bits = BitsPerWord - age_bits - lock_bits - biased_lock_bits , hash_bits = max_hash_bits 31 ? 31 : max_hash_bits , cms_bits = LP64_ONLY ( 1 ) NOT_LP64 ( 0 ), epoch_bits = 2 }; \u63a5\u4e0b\u6765\u7684\u5b9e\u4f8b\u6570\u636e\u662f\u5bf9\u8c61\u771f\u6b63\u5b58\u50a8\u7684\u6709\u6548\u4fe1\u606f\uff0c\u4e5f\u662f\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u6240\u5b9a\u4e49\u7684\u5404\u79cd\u7c7b\u578b\u7684\u5b57\u6bb5\u5185\u5bb9\u3002\u2f46\u8bba\u662f\u4ece\u2f57\u7c7b\u7ee7\u627f\u4e0b\u6765\u7684\uff0c\u8fd8\u662f\u5728\u2f26\u7c7b\u4e2d\u5b9a\u4e49\u7684\uff0c\u90fd\u9700\u8981\u8bb0\u5f55\u8d77\u6765\u3002\u5728\u7236\u7c7b\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u4f1a\u51fa\u73b0\u5728\u5b50\u7c7b\u4e4b\u524d\uff0c\u5982\u679cCompactFields\u53c2\u6570\u503c\u4e3atrue\uff0c\u90a3\u4e48\u5b50\u7c7b\u4e2d\u8f83\u7a84\u7684\u53d8\u91cf\u4e5f\u53ef\u80fd\u4f1a\u63d2\u5165\u5230\u7236\u7c7b\u53d8\u91cf\u7684\u7a7a\u9699\u4e4b\u4e2d\u3002 \u5bf9\u9f50\u586b\u5145\u5e76\u4e0d\u662f\u5fc5\u7136\u5b58\u5728\u7684\uff0c\u4e5f\u6ca1\u6709\u7279\u522b\u7684\u542b\u4e49\uff0c\u5b83\u4ec5\u4ec5\u8d77\u7740\u5360\u4f4d\u7b26\u7684\u4f5c\u2f64\u3002\u7531\u4e8eHotSpot VM\u7684\u2f83\u52a8\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u8981\u6c42\u5bf9\u8c61\u8d77\u59cb\u5730\u5740\u5fc5\u987b\u662f8\u5b57\u8282\u7684\u6574\u6570\u500d\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5bf9\u8c61\u7684\u2f24\u2f29\u5fc5\u987b\u662f8\u5b57\u8282\u7684\u6574\u6570\u500d\u3002\u2f7d\u5bf9\u8c61\u5934\u90e8\u5206\u6b63\u597d\u662f8\u5b57\u8282\u7684\u500d\u6570(1\u500d\u6216\u80052\u500d)\uff0c\u56e0\u6b64\uff0c\u5f53\u5bf9\u8c61\u5b9e\u4f8b\u6570\u636e\u90e8\u5206\u6ca1\u6709\u5bf9\u9f50\u65f6\uff0c\u5c31\u9700\u8981\u901a\u8fc7\u5bf9\u9f50\u586b\u5145\u6765\u8865\u5168\u3002","title":"\u5bf9\u8c61\u7684\u5185\u5b58\u5e03\u5c40"},{"location":"java/ujvm/ch2/#_8","text":"\u6211\u4eec\u7684Java\u7a0b\u5e8f\u9700\u8981\u901a\u8fc7\u6808\u4e0a\u7684 Reference \u6570\u636e\u6765\u64cd\u4f5c\u5806\u4e0a\u7684\u5177\u4f53\u5bf9\u8c61\u3002\u76ee\u524d\u4e3b\u6d41\u7684\u5bf9\u8c61\u8bbf\u95ee\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\u53e5\u67c4(handle)\u548c\u76f4\u63a5\u6307\u9488\u3002 \u5982\u679c\u76f4\u63a5\u4f7f\u7528\u53e5\u67c4\u8bbf\u95ee\uff0cjava\u5806\u4e2d\u5c06\u4f1a\u5212\u5206\u51fa\u4e00\u5757\u5185\u5b58\u6765\u4f5c\u4e3a\u53e5\u67c4\u6c60\uff0c Reference \u4e2d\u5b58\u50a8\u7684\u662f\u5bf9\u8c61\u7684\u53e5\u67c4\u5730\u5740\uff0c\u800c\u53e5\u67c4\u4e2d\u5305\u542b\u4e86\u5bf9\u8c61\u6570\u636e\u4e0e\u7c7b\u578b\u6570\u636e\u5404\u81ea\u7684\u5177\u4f53\u5730\u5740\u4fe1\u606f\u3002 In computer programming, a handle is an abstract reference to a resource. \u5982\u679c\u4f7f\u7528\u76f4\u63a5\u6307\u9488\u8bbf\u95ee\uff0c\u90a3\u4e48java\u5806\u5bf9\u8c61\u7684\u5e03\u5c40\u4e2d\u5c31\u5fc5\u987b\u8003\u8651\u5982\u4f55\u653e\u7f6e\u8bbf\u95ee\u7c7b\u578b\u6570\u636e\u7684\u76f8\u5173\u4fe1\u606f\uff0c\u800c Reference \u4e2d\u5b58\u50a8\u7684\u76f4\u63a5\u5c31\u662f\u5bf9\u8c61\u5730\u5740\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002 \u8fd9\u4e24\u79cd\u5bf9\u8c61\u8bbf\u95ee\u65b9\u5f0f\u5404\u6709\u4f18\u52bf\uff1a \u4f7f\u7528\u53e5\u67c4\u6765\u8bbf\u95ee\u7684\u6700\u5927\u597d\u5904\u662f Reference \u4e2d\u5b58\u50a8\u7684\u662f\u7a33\u5b9a\u7684\u53e5\u67c4\u5730\u5740\uff0c\u5728\u5bf9\u8c61\u88ab\u79fb\u52a8\u65f6\u53ea\u4f1a\u6539\u53d8\u53e5\u67c4\u4e2d\u7684\u5b9e\u4f8b\u6570\u636e\u6307\u9488\uff0c\u800c Reference \u672c\u8eab\u4e0d\u9700\u8981\u4fee\u6539\u3002 \u4f7f\u7528\u76f4\u63a5\u6307\u9488\u8bbf\u95ee\u65b9\u5f0f\u7684\u6700\u5927\u597d\u5904\u5c31\u662f\u901f\u5ea6\u66f4\u5feb\uff0c\u5b83\u8282\u7701\u4e86\u4e00\u6b21\u6307\u9488\u5b9a\u4f4d\u7684\u65f6\u95f4\u5f00\u9500\u3002\u7531\u4e8e\u5bf9\u8c61\u7684\u8bbf\u95ee\u5728Java\u4e2d\u2fae\u5e38\u9891\u7e41\uff0c\u56e0\u6b64\u8fd9\u7c7b\u5f00\u9500\u79ef\u5c11\u6210\u591a\u540e\u4e5f\u662f\u2f00\u9879\u2fae\u5e38\u53ef\u89c2\u7684\u6267\u2f8f\u6210\u672c HotSpot\u865a\u62df\u673a\u4f7f\u7528\u7684\u662f\u76f4\u63a5\u6307\u9488\u8bbf\u95ee\u7684\u65b9\u5f0f\u3002\u4f46\u5404\u79cd\u8bed\u2f94\u548c\u6846\u67b6\u4f7f\u2f64\u53e5\u67c4\u6765\u8bbf\u95ee\u7684\u60c5\u51b5\u4e5f\u2f17\u5206\u5e38\u89c1\u3002","title":"\u5bf9\u8c61\u7684\u8bbf\u95ee\u5b9a\u4f4d"},{"location":"java/ujvm/ch2/#4-outofmemoryerror","text":"\u4e3b\u8981\u662f\u4e3a\u4e86\u5b66\u4e60\u4e4b\u524d\u5b66\u7684\u5404\u79cd\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9\uff0c\u8fd8\u6709\u5c31\u662f\u4ee5\u540e\u9047\u5230\u5185\u5b58\u9519\u8bef\u7684\u65f6\u5019\uff0c\u80fd\u591f\u6839\u636e\u5f02\u5e38\u7684\u4fe1\u606f\u5feb\u901f\u5224\u8bfb\u662f\u54ea\u4e2a\u533a\u57df\u7684\u5185\u5b58\u6ea2\u51fa\uff0c\u77e5\u9053\u662f\u4ec0\u4e48\u6837\u7684\u4ee3\u7801\u53ef\u80fd\u4f1a\u5bfc\u81f4\u8fd9\u4e9b\u533a\u57df\u5185\u5b58\u6ea2\u51fa\uff0c\u4ee5\u53ca\u51fa\u73b0\u8fd9\u4e9b\u5f02\u5e38\u540e\uff0c\u8be5\u5982\u4f55\u5904\u7f6e\u3002 Note \u5e38\u89c1\u7684HotSpot JVM\u53c2\u6570 -Xms \u521d\u59cb\u5806\u5927\u5c0f -Xmx \u6700\u5927\u5806\u5927\u5c0f -Xmn \u5e74\u8f7b\u4ee3\u5927\u5c0f -XX: MaxPermSize \u8bbe\u7f6e\u6301\u4e45\u4ee3\u6700\u5927\u503c -Xss \u6bcf\u4e2a\u7ebf\u7a0b\u7684\u5806\u6808\u5927\u5c0f","title":"4 \u5b9e\u6218\uff1aOutOfMemoryError\u5f02\u5e38"},{"location":"java/ujvm/ch2/#java_2","text":"Java\u5806\u2f64\u4e8e\u5b58\u50a8\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u53ea\u8981\u4e0d\u65ad\u5730\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u4e14\u4fdd\u8bc1GC Roots\u5230\u5bf9\u8c61\u4e4b\u95f4\u6709\u53ef\u8fbe\u8def\u5f84\u6765\u907f\u514d\u5783\u573e\u56de\u6536\u673a\u5236\u6e05\u9664\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u90a3\u4e48\u5728\u5bf9\u8c61\u6570\u91cf\u5230\u8fbe\u6700\u2f24\u5806\u7684\u5bb9\u91cf\u9650\u5236\u540e\u5c31\u4f1a\u4ea7\u2f63\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u3002 Java\u5806\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u6d4b\u8bd5: //VM Args\uff1a-Xms20m -Xmx20m -XX: +HeapDumpOnOutOfMemoryError // \u9650\u5236Java\u5806\u7684\u2f24\u2f29\u4e3a20MB\uff0c\u4e0d\u53ef\u6269\u5c55\uff08\u5c06\u5806\u7684\u6700\u2f29\u503c-Xms\u53c2\u6570\u4e0e\u6700\u2f24\u503c-Xmx\u53c2\u6570\u8bbe\u7f6e\u4e3a\u2f00\u6837\u5373\u53ef\u907f\u514d\u5806\u2f83\u52a8\u6269\u5c55\uff09 // -XX: +HeapDumpOnOutOfMemoryError\u53ef\u4ee5\u8ba9\u865a\u62df\u673a\u5728\u51fa\u73b0\u5185\u5b58\u6ea2 \u51fa\u5f02\u5e38\u65f6Dump\u51fa\u5f53\u524d\u7684\u5185\u5b58\u5806\u8f6c\u50a8\u5feb\u7167\u4ee5\u4fbf\u4e8b\u540e\u8fdb\u2f8f\u5206\u6790 import java.util.ArrayList ; public class HeapOOM { static class OOMObject { } public static void main ( String [] args ){ ArrayList OOMObject list = new ArrayList OOMObject (); while ( true ){ list . add ( new OOMObject ()); } } } \u7ed3\u679c java.lang.OutOfMemoryError: Java heap space Dumping heap to java_pid46106.hprof ... Heap dump file created [29129293 bytes in 0.350 secs] \u8981\u89e3\u51b3\u8fd9\u4e2a\u533a\u57df\u7684\u5f02\u5e38\uff0c\u2f00\u822c\u7684\u2f3f\u6bb5\u662f\u5148\u901a\u8fc7\u5185\u5b58\u6620\u50cf\u5206\u6790\u2f2f\u5177\u5bf9Dump\u51fa\u6765\u7684\u5806\u8f6c\u50a8\u5feb\u7167\u8fdb\u2f8f\u5206\u6790\uff0c\u91cd\u70b9\u662f\u786e\u8ba4\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u662f\u5426\u662f\u5fc5\u8981\u7684\uff0c\u4e5f\u5c31\u662f\u8981\u5148\u5206\u6e05\u695a\u5230\u5e95\u662f\u51fa\u73b0\u4e86\u5185\u5b58\u6cc4\u6f0f(Memory Leak)\u8fd8\u662f\u5185\u5b58\u6ea2\u51fa(Memory Overflow)\u3002 Note \u53ef\u4ee5\u4f7f\u7528Eclipse Memory Analyzer\u6253\u5f00\u5806\u8f6c\u50a8\u5feb\u7167\u2f42\u4ef6\u3002The Eclipse Memory Analyzer is a fast and feature-rich Java heap analyzer that helps you find memory leaks and reduce memory consumption. Official Website \u5982\u679c\u662f\u5185\u5b58\u6cc4\u6f0f\uff0c\u53ef\u8fdb\u4e00\u6b65\u901a\u8fc7\u5de5\u5177\u67e5\u770b\u6cc4\u6f0f\u5bf9\u8c61\u5230GC Roots\u7684\u5f15\u7528\u94fe\u3002\u4e8e\u662f\u5c31\u80fd\u627e\u5230\u6cc4\u9732\u5bf9\u8c61\u662f\u901a\u8fc7\u600e\u6837\u7684\u8def\u5f84\u4e0eGC Roots\u76f8\u5173\u8054\u5e76\u5bfc\u81f4\u5783\u573e\u6536\u96c6\u5668\u65e0\u6cd5\u81ea\u52a8\u56de\u6536\u5b83\u4eec\u7684\u3002\u638c\u63e1\u4e86\u6cc4\u9732\u5bf9\u8c61\u7684\u7c7b\u578b\u4fe1\u606f\u53caGC Roots\u5f15\u7528\u94fe\u7684\u4fe1\u606f\uff0c\u5c31\u53ef\u4ee5\u6bd4\u8f83\u51c6\u786e\u5730\u5b9a\u4f4d\u51fa\u6cc4\u9732\u4ee3\u7801\u7684\u4f4d\u7f6e\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6cc4\u9732\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5185\u5b58\u4e2d\u7684\u5bf9\u8c61\u786e\u5b9e\u90fd\u8fd8\u5fc5\u987b\u5b58\u6d3b\u7740\uff0c\u90a3\u5c31\u5e94\u5f53\u68c0\u67e5\u865a\u62df\u673a\u7684\u5806\u53c2\u6570\uff08-Xmx\u4e0e-Xms\uff09\uff0c\u4e0e\u673a\u5668\u7269\u7406\u5185\u5b58\u5bf9\u6bd4\u770b\u662f\u5426\u8fd8\u53ef\u4ee5\u8c03\u5927\uff0c\u4ece\u4ee3\u7801\u4e0a\u68c0\u67e5\u662f\u5426\u5b58\u5728\u67d0\u4e9b\u5bf9\u8c61\u751f\u547d\u671f\u8fc7\u957f\u3001\u6301\u6709\u72b6\u6001\u65f6\u95f4\u8fc7\u957f\u7684\u60c5\u51b5\uff0c\u5c1d\u8bd5\u51cf\u5c11\u7a0b\u5e8f\u8fd0\u884c\u671f\u7684\u5185\u5b58\u6d88\u8017\u3002","title":"Java\u5806\u6ea2\u51fa"},{"location":"java/ujvm/ch2/#_9","text":"\u7531\u4e8eHotSpot\u865a\u62df\u673a\u4e2d\u5e76\u4e0d\u533a\u5206\u865a\u62df\u673a\u6808\u548c\u672c\u5730\u65b9\u6cd5\u6808\uff0c\u56e0\u6b64\uff0c\u5bf9\u4e8eHotSpot\u6765\u8bf4\uff0c\u867d\u7136 -Xoss \u53c2\u6570\uff08\u8bbe\u7f6e\u672c\u5730\u65b9\u6cd5\u6808\u5927\u5c0f\uff09\u5b58\u5728\uff0c\u4f46\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u6548\u679c\u7684\uff0c\u6808\u5bb9\u91cf\u53ea\u7531 -Xss \u53c2\u6570\u8bbe\u7f6e\u3002\u5173\u4e8e\u865a\u62df\u673a\u6808\u548c\u672c\u5730\u65b9\u6cd5\u6808\uff0c\u5728Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u63cf\u8ff0\u4e86\u4e24\u79cd\u5f02\u5e38\uff1a \u5982\u679c\u7ebf\u7a0b\u8bf7\u6c42\u7684\u6808\u6df1\u5ea6\u5927\u4e8e\u865a\u62df\u673a\u6240\u5141\u8bb8\u7684\u6700\u5927\u6df1\u5ea6\uff0c\u5c06\u629b\u51fa StackOverflowError \u5f02\u5e38\u3002 \u5982\u679c\u865a\u62df\u673a\u5728\u6269\u5c55\u6808\u65f6\u65e0\u6cd5\u7533\u8bf7\u5230\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5c06\u629b\u51fa OutOfMemoryError \u5f02\u5e38\u3002 \u865a\u62df\u673a\u6808\u548c\u672c\u5730\u2f45\u6cd5\u6808OOM\u6d4b\u8bd5\uff08\u4ec5\u4f5c\u4e3a\u7b2c1\u70b9\u6d4b\u8bd5\u7a0b\u5e8f\uff09: \u3000 Java //VM args: -Xss128k // -Xss128k \u51cf\u5c0f\u6808\u5185\u5b58\u81f3128k public class JavaVMStackOverFlowError { private int stackLength = 1 ; public void stackLeak (){ stackLength ++; stackLeak (); } public static void main ( String [] args ){ JavaVMStackOverFlowError sof = new JavaVMStackOverFlowError (); try { sof . stackLeak (); } catch ( Throwable e ){ System . out . println ( stackLength: + sof . stackLength ); throw e ; } } } stackLength : 17600 Exception in thread main java . lang . StackOverflowError at JavaVMStackOverFlowError . stackLeak ( JavaVMStackOverFlowError . java : 5 ) ... \u8fd9\u4e24\u79cd\u5f02\u5e38\u5176\u5b9e\u5b58\u5728\u7740\u4e00\u4e9b\u4e92\u76f8\u91cd\u53e0\u7684\u5730\u65b9\u3002\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff1a\u5728\u5355\u4e2a\u7ebf\u7a0b\u4e0b\uff0c\u65e0\u8bba\u662f\u7531\u4e8e\u6808\u5e27\u592a\u5927\u8fd8\u662f\u865a\u62df\u673a\u6808\u5bb9\u91cf\u592a\u5c0f\uff0c\u5f53\u5185\u5b58\u65e0\u6cd5\u5206\u914d\u7684\u65f6\u5019\uff0c\u865a\u62df\u673a\u629b\u51fa\u7684\u90fd\u662f StackOverflowError \u5f02\u5e38\u3002\u5982\u679c\u6d4b\u8bd5\u65f6\u4e0d\u9650\u4e8e\u5355\u7ebf\u7a0b\uff0c\u901a\u8fc7\u4e0d\u65ad\u5730\u5efa\u7acb\u7ebf\u7a0b\u7684\u65b9\u5f0f\u5012\u662f\u53ef\u4ee5\u4ea7\u751f\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u3002 \u5982\u679c\u662f\u5efa\u7acb\u8fc7\u591a\u7ebf\u7a0b\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\uff0c\u5728\u4e0d\u80fd\u51cf\u5c11\u7ebf\u7a0b\u6570\u6216\u8005\u66f4\u636264\u4f4d\u865a\u62df\u673a\u7684\u60c5\u51b5\u4e0b\uff0c\u5c31\u53ea\u80fd\u901a\u8fc7\u51cf\u5c11\u6700\u5927\u5806\u548c\u51cf\u5c11\u6808\u5bb9\u91cf\u6765\u6362\u53d6\u66f4\u591a\u7684\u7ebf\u7a0b\u3002","title":"\u865a\u62df\u673a\u6808\u548c\u672c\u5730\u65b9\u6cd5\u6808\u6ea2\u51fa"},{"location":"java/ujvm/ch2/#_10","text":"String.intern() \u662f\u4e00\u4e2a Native \u65b9\u6cd5\uff0c\u4ed6\u7684\u4f5c\u7528\u662f\uff1a\u5982\u679c\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u4e2d\u5df2\u7ecf\u5305\u542b\u4e00\u4e2a\u7b49\u4e8e\u6b64 String \u5e38\u91cf\u7684\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56de\u4ee3\u8868\u6c60\u4e2d\u8fd9\u4e2a\u5b57\u7b26\u4e32\u7684 String \u5bf9\u8c61\uff1b\u5426\u5219\uff0c\u5c06\u6b64 String \u5bf9\u8c61\u5305\u542b\u7684\u5b57\u7b26\u4e32\u6dfb\u52a0\u5230\u5e38\u91cf\u6c60\u4e2d\uff0c\u5e76\u4e14\u8fd4\u56de\u6b64 String \u5bf9\u8c61\u7684\u5f15\u7528\u3002\u5728JDK1.6\u53ca\u4e4b\u524d\u7684\u7248\u672c\u4e2d\uff0c\u7531\u4e8e\u5e38\u91cf\u6c60\u5206\u914d\u5728\u6c38\u4e45\u4ee3\u5185\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7-XX:PermSize\u548c-XX:MaxPermSize\u9650\u5236\u65b9\u6cd5\u533a\u5927\u5c0f\uff0c\u4ece\u800c\u95f4\u63a5\u9650\u5236\u5176\u4e2d\u7684\u5e38\u91cf\u6c60\u7684\u5bb9\u91cf\u3002 \u8fd9\u610f\u5473\u7740\u91cd\u590d\u8c03\u7528 String.intern() \u5728JDK1.6\u4e4b\u524d\u7684\u7248\u672c\u4e2d\u4f1a\u629b\u51fa\u65b9\u6cd5\u533a(PermGen space) OutOfMemoryError \uff0c\u800c\u5728JDK1.7\u4e2d\uff0c\u4e0d\u4f1a\u51fa\u73b0\u3002 //VM args:-XX:PermSize10M -XX:MaxPermSize=10M // PermSize \u65b9\u6cd5\u533a\u5927\u5c0f import java.util.ArrayList ; import java.util.List ; public class RuntimeContantPoolOutOfMemoryError { public static void main ( String [] args ) { //\u4fdd\u5b58\u5bf9\u5e38\u91cf\u6c60\u5b57\u7b26\u4e32\u7684\u5e94\u7528\uff0c\u907f\u514dFull GC\u56de\u6536\u5e38\u91cf\u6c60\u7684\u884c\u4e3a List String list = new ArrayList String (); //10M\u5728int\u7684\u8303\u56f4\u8db3\u591f\u4ea7\u751fOutOfMemoryError int i = 0 ; while ( true ){ list . add ( String . valueOf ( i ++)); } } }","title":"\u65b9\u6cd5\u533a\u548c\u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u6ea2\u51fa"},{"location":"java/ujvm/ch2/#_11","text":"DirectMemory \u5bb9\u91cf\u53ef\u4ee5\u901a\u8fc7 -XX:Max C DirectMemory /C Size \u6307\u5b9a\uff0c\u5982\u679c\u4e0d\u6307\u5b9a\uff0c\u5219\u9ed8\u8ba4\u4e0eJava\u5806\u6700\u5927\u503c\uff08 -Xmx \u6307\u5b9a\uff09\u4e00\u6837\u3002\u4ee3\u7801\u6e05\u5355\u8d8a\u8fc7\u4e86 DirectByteBuffer \u7c7b\uff0c\u76f4\u63a5\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6Unsafe\u5b9e\u4f8b\u8fdb\u884c\u5185\u5b58\u5206\u914d\uff08Unsafe\u7c7b\u7684getUnsafe\u65b9\u6cd5\u9650\u5236\u4e86\u53ea\u6709\u5f15\u5bfc\u7c7b\u52a0\u8f7d\u5668\u624d\u4f1a\u8fd4\u56de\u5b9e\u4f8b\uff0c\u4e5f\u5c31\u662f\u8bbe\u8ba1\u8005\u5e0c\u671b\u53ea\u6709 rt.jar \u4e2d\u7684\u7c7b\u624d\u80fd\u4f7f\u7528Unsafe\u7684\u529f\u80fd\uff09\u3002\u56e0\u4e3a\uff0c\u867d\u7136\u4f7f\u7528 DirectByteBuffer \u5206\u914d\u5185\u5b58\u4e5f\u4f1a\u629b\u51fa\u5185\u5b58\u5f02\u5e38\uff0c\u4f46\u5b83\u629b\u51fa\u5f02\u5e38\u65f6\u5e76\u6ca1\u6709\u771f\u6b63\u5411\u64cd\u4f5c\u7cfb\u7edf\u7533\u8bf7\u5185\u5b58\u5206\u914d\uff0c\u800c\u662f\u901a\u8fc7\u8ba1\u7b97\u5f97\u77e5\u5185\u5b58\u65e0\u6cd5\u5206\u914d\uff0c\u4e8e\u662f\u624b\u52a8\u629b\u51fa\u5f02\u5e38\uff0c\u771f\u6b63\u7533\u8bf7\u5206\u914d\u5185\u5b58\u7684\u65b9\u6cd5\u662f unsafe.allocateMemory . /** * VM Args: -Xmx20M -XX:Max C DirectMemory /C Size=10M */ public class C DirectMemory / C OOM { private static final int _1MB = 1024 * 1024 ; public static void main ( String [] args ) throws IllegalAccessException { Field unsafeField = Unsafe . class . getDeclaredFields ()[ 0 ]; unsafeField . setAccessible ( true ); Unsafe unsafe = ( Unsafe ) unsafeField . get ( null ); while ( true ) { unsafe . allocateMemory ( _1MB ); } } } \u7531 DirectMemory \u5bfc\u81f4\u7684\u5185\u5b58\u6ea2\u51fa\uff0c\u4e00\u4e2a\u660e\u663e\u7684\u7279\u5f81\u662f\u5728Heap Dump\u6587\u4ef6\u4e2d\u4e0d\u4f1a\u770b\u89c1\u660e\u663e\u7684\u5f02\u5e38\uff0c\u5982\u679c\u8bfb\u8005\u53d1\u73b0OOM\u4e4b\u540eDump\u6587\u4ef6\u5f88\u5c0f\uff0c\u800c\u7a0b\u5e8f\u4e2d\u53c8\u76f4\u63a5\u6216\u8005\u95f4\u63a5\u4f7f\u7528\u4e86NIO\uff0c\u90a3\u5c31\u53ef\u4ee5\u8003\u8651\u68c0\u67e5\u4e00\u4e0b\u662f\u4e0d\u662f\u8fd9\u65b9\u9762\u7684\u539f\u56e0\u3002","title":"\u672c\u673a\u76f4\u63a5\u5185\u5b58\u6ea2\u51fa"},{"location":"java/ujvm/ch3/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 3 - \u5783\u573e\u6536\u96c6\u5668\u4e0e\u5185\u5b58\u5206\u914d\u7b56\u7565 1\u6982\u8ff0 \u2f6c\u524d\u5185\u5b58\u7684\u52a8\u6001\u5206\u914d\u4e0e\u5185\u5b58\u56de\u6536\u6280\u672f\u5df2\u7ecf\u76f8\u5f53\u6210\u719f\uff0c\u90a3\u4e3a\u4ec0\u4e48\u6211\u4eec\u8fd8\u8981\u53bb\u4e86\u89e3GC\u548c\u5185\u5b58\u5206\u914d\u5462\uff1f\u7b54\u6848\u5f88\u7b80\u5355\uff1a\u5f53\u9700\u8981\u6392\u67e5\u5404\u79cd\u5185\u5b58\u6ea2\u51fa\u3001\u5185\u5b58\u6cc4\u6f0f\u95ee\u9898\u65f6\uff0c\u5f53\u5783\u573e\u6536\u96c6\u6210\u4e3a\u7cfb\u7edf\u8fbe\u5230\u66f4\u2fbc\u5e76\u53d1\u91cf\u7684\u74f6\u9888\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u8fd9\u4e9b\u201c\u2f83\u52a8\u5316\u201d\u7684\u6280\u672f\u5b9e\u65bd\u5fc5\u8981\u7684\u76d1\u63a7\u548c\u8c03\u8282\u3002 \u76d1\u63a7\u548c\u8c03\u8282\u7684\u5fc5\u8981\u6027\uff1a \u4ee5\u4e0b\u51e0\u4e2a\u533a\u57df\u7684\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u90fd\u5177\u5907\u786e\u5b9a\u6027\uff0c\u4e0d\u9700\u8981\u8fc7\u591a\u8003\u8651\u56de\u6536\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u65b9\u6cd5\u7ed3\u675f\u6216\u8005\u7ebf\u7a0b\u7ed3\u675f\uff0c\u5185\u5b58\u81ea\u7136\u5c31\u8ddf\u968f\u7740\u56de\u6536\u4e86\u3002 Java\u5185\u5b58\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u865a\u62df\u673a\u6808\u3001\u672c\u5730\u65b9\u6cd5\u68083\u4e2a\u533a\u57df\u968f\u7ebf\u7a0b\u800c\u751f\uff0c\u968f\u7ebf\u7a0b\u800c\u706d \u6808\u4e2d\u7684\u6808\u5e27\u968f\u7740\u65b9\u6cd5\u7684\u8fdb\u5165\u548c\u9000\u51fa\u800c\u6709\u6761\u4e0d\u7d0a\u5730\u6267\u884c\u7740\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u3002\u6bcf\u4e00\u4e2a\u6808\u5e27\u4e2d\u5206\u914d\u591a\u5c11\u5185\u5b58\u57fa\u672c\u4e0a\u662f\u5728\u7c7b\u7ed3\u6784\u786e\u5b9a\u4e0b\u6765\u65f6\u5c31\u5df2\u77e5\u7684 Java\u5806\u548c\u65b9\u6cd5\u533a\u5219\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u63a5\u53e3\u4e2d\u7684\u591a\u4e2a\u5b9e\u73b0\u7c7b\u9700\u8981\u7684\u5185\u5b58\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u7684\u591a\u4e2a\u5b9e\u73b0\u7c7b\u9700\u8981\u7684\u5185\u5b58\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u7684\u591a\u4e2a\u5206\u652f\u9700\u8981\u7684\u5185\u5b58\u4e5f\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u53ea\u6709\u5728\u7a0b\u5e8f\u5904\u4e8e\u8fd0\u884c\u671f\u95f4\u65f6\u624d\u80fd\u77e5\u9053\u4f1a\u521b\u5efa\u54ea\u4e9b\u5bf9\u8c61\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u7684\u5206\u914d\u548c\u56de\u6536\u662f\u52a8\u6001\u7684\uff0c\u5783\u573e\u6536\u96c6\u5668\u6240\u5173\u6ce8\u7684\u662f\u8fd9\u90e8\u5206\u7684\u5185\u5b58\u3002 2 \u5bf9\u8c61\u5df2\u6b7b\u5417 \u5783\u573e\u6536\u96c6\u5668\u5728\u5bf9\u5806\u8fdb\u2f8f\u56de\u6536\u524d\uff0c\u7b2c\u2f00\u4ef6\u4e8b\u60c5\u5c31\u662f\u8981\u786e\u5b9a\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u4e2d\u54ea\u4e9b\u8fd8\u201c\u5b58\u6d3b\u201d\u7740\uff0c\u54ea\u4e9b\u5df2\u7ecf\u201c\u6b7b\u53bb\u201d\uff08\u5373\u4e0d\u53ef\u80fd\u518d\u88ab\u4efb\u4f55\u9014\u5f84\u4f7f\u2f64\u7684\u5bf9\u8c61\uff09\u3002 \u5f15\u7528\u8ba1\u6570\u7b97\u6cd5 \u5f15\u7528\u8ba1\u6570 (Reference Counting)\u7b97\u6cd5\uff1a \u7ed9\u5bf9\u8c61\u4e2d\u6dfb\u52a0\u2f00\u4e2a\u5f15\u2f64\u8ba1\u6570\u5668\uff0c\u6bcf\u5f53\u6709\u2f00\u4e2a\u5730\u2f45\u5f15\u2f64\u5b83\u65f6\uff0c\u8ba1\u6570\u5668\u503c\u5c31\u52a01\uff1b\u5f53\u5f15\u2f64\u5931\u6548\u65f6\uff0c\u8ba1\u6570\u5668\u503c\u5c31\u51cf1\uff1b\u4efb\u4f55\u65f6\u523b\u8ba1\u6570\u5668\u4e3a0\u7684\u5bf9\u8c61\u5c31\u662f\u4e0d\u53ef\u80fd\u518d\u88ab\u4f7f\u2f64\u7684\u3002\u5b83\u7684\u5b9e\u73b0\u7b80\u5355\uff0c\u5224\u5b9a\u6548\u7387\u4e5f\u5f88\u9ad8\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5b83\u90fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u7b97\u6cd5\u3002 \u4f46\u662f\u81f3\u5c11\u4e3b\u6d41\u7684Java\u865a\u62df\u673a\u91cc\u9762\u6ca1\u6709\u9009\u7528\u8ba1\u6570\u7b97\u6cd5\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u5176\u4e2d\u4e3b\u8981\u539f\u56e0\u662f\u5b83\u5f88\u96be\u89e3\u51b3\u5bf9\u8c61\u4e4b\u95f4\u4e92\u76f8\u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898\u3002 \u53ef\u8fbe\u6027\u5206\u6790\u7b97\u6cd5 \u5728\u4e3b\u6d41\u7684\u5546\u2f64\u7a0b\u5e8f\u8bed\u2f94(Java\u3001C#\uff0c\u751a\u2f84\u5305\u62ec\u524d\u2faf\u63d0\u5230\u7684\u53e4\u2f7c\u7684Lisp)\u7684\u4e3b\u6d41\u5b9e\u73b0\u4e2d\uff0c\u90fd\u662f\u79f0\u901a\u8fc7 \u53ef\u8fbe\u6027\u5206\u6790 (Reachability Analysis)\u6765\u5224\u5b9a\u5bf9\u8c61\u662f\u5426\u5b58\u6d3b\u7684\u3002 \u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u79f0\u4e3a\"GC Roots\"(Garbage Collection Roots)\u7684\u5bf9\u8c61\u4f5c\u4e3a\u8d77\u59cb\u70b9\uff0c\u4ece\u8fd9\u4e9b\u8282\u70b9\u5f00\u59cb\u5411\u4e0b\u641c\u7d22\uff0c\u641c\u7d22\u6240\u8d70\u8fc7\u7684\u8def\u5f84\u79f0\u4e3a \u5f15\u7528\u94fe (Reference Chain)\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5230GC Roots\u6ca1\u6709\u4efb\u4f55\u5f15\u7528\u94fe\u76f8\u8fde\u65f6\uff0c\u5219\u8bc1\u660e\u6b64\u5bf9\u8c61\u662f\u4e0d\u53ef\u7528\u7684\u3002 \u5982\u4e0b\u56fe\u6240\u2f70\uff0c\u5bf9\u8c61object 5\u3001object 6\u3001object 7\u867d\u7136\u4e92 \u76f8\u6709\u5173\u8054\uff0c\u4f46\u662f\u5b83\u4eec\u5230GC Roots\u662f\u4e0d\u53ef\u8fbe\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u5c06\u4f1a\u88ab\u5224\u5b9a\u4e3a\u662f\u53ef\u56de\u6536\u7684\u5bf9\u8c61\u3002 \u5728Java\u8bed\u8a00\u4e2d\uff0c\u53ef\u4f5c\u4e3aGC Roots\u7684\u5bf9\u8c61\u5305\u62ec\u4e0b\u9762\u51e0\u79cd\uff1a \u865a\u62df\u673a\u6808(\u6808\u5e27\u4e2d\u7684\u672c\u5730\u53d8\u91cf\u8868)\u4e2d\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u65b9\u6cd5\u533a\u4e2d\u7c7b\u9759\u6001\u5c5e\u6027\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u65b9\u6cd5\u533a\u4e2d\u5e38\u91cf\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u672c\u5730\u65b9\u6cd5\u6808\u4e2dJNI(Java\u672c\u5730\u63a5\u53e3)\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u518d\u8c08\u5f15\u7528 \u5728JDK1.2\u4e4b\u540e\uff0cJava\u5bf9\u5f15\u7528\u7684\u6982\u5ff5\u8fdb\u884c\u4e86\u6269\u5145\uff0c\u5c06\u5f15\u7528\u5206\u4e3a\u5f3a\u5f15\u7528(Strong Reference)\u3001\u8f6f\u5f15\u7528(Soft Reference)\u3001\u5f31\u5f15\u7528(Weak Reference)\u3001\u865a\u5f15\u7528(Phantom Reference)4\u79cd\uff0c\u8fd94\u79cd\u5f15\u7528\u5f3a\u5ea6\u4f9d\u6b21\u9010\u6e10\u51cf\u5f31\u3002 \u5f3a\u5f15\u7528\u5c31\u662f\u6307\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e4b\u4e2d\u666e\u904d\u5b58\u5728\u7684\uff0c\u7c7b\u4f3c Object obj = new Object () \u8fd9\u7c7b\u7684\u5f15\u7528\uff0c\u53ea\u8981\u5f3a\u5f15\u7528\u8fd8\u5b58\u5728\uff0c\u5783\u573e\u6536\u96c6\u5668\u6c38\u8fdc\u4e0d\u4f1a\u56de\u6536\u6389\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u8f6f\u5f15\u7528\u662f\u7528\u6765\u63cf\u8ff0\u4e00\u4e9b\u8fd8\u6709\u7528\u4f46\u5e76\u975e\u5fc5\u9700\u7684\u5bf9\u8c61\u3002\u5bf9\u4e8e\u8f6f\u5f15\u7528\u5173\u8054\u7740\u7684\u5bf9\u8c61\uff0c\u5728\u7cfb\u7edf\u5c06\u8981\u53d1\u751f\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u4e4b\u524d\uff0c\u5c06\u4f1a\u628a\u8fd9\u4e9b\u5bf9\u8c61\u5217\u8fdb\u56de\u6536\u8303\u56f4\u4e4b\u4e2d\u8fdb\u884c\u7b2c\u4e8c\u6b21\u56de\u6536\u3002\u5982\u679c\u8fd9\u6b21\u56de\u6536\u8fd8\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\uff0c\u624d\u4f1a\u629b\u51fa\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u3002\u7528 SoftReference \u7c7b\u6765\u5b9e\u73b0\u8f6f\u5f15\u7528\u3002 \u5f31\u5f15\u7528\u4e5f\u662f\u7528\u6765\u63cf\u8ff0\u975e\u5fc5\u9700\u5bf9\u8c61\u7684\uff0c\u4f46\u662f\u5b83\u7684\u5f3a\u5ea6\u6bd4\u8f6f\u5f15\u7528\u66f4\u5f31\u4e00\u4e9b\uff0c\u88ab\u5f31\u5f15\u7528\u5173\u8054\u7684\u5bf9\u8c61\u53ea\u80fd\u751f\u5b58\u5230\u4e0b\u4e00\u6b21\u5783\u573e\u6536\u96c6\u53d1\u751f\u4e4b\u524d\u3002\u5f53\u5783\u573e\u6536\u96c6\u5668\u5de5\u4f5c\u65f6\uff0c\u65e0\u8bba\u5f53\u524d\u5185\u5b58\u662f\u5426\u8db3\u591f\uff0c\u90fd\u4f1a\u56de\u6536\u6389\u53ea\u88ab\u5f31\u5f15\u7528\u5173\u8054\u7684\u5bf9\u8c61\u3002\u7528 WeakReference \u7c7b\u6765\u5b9e\u73b0\u5f31\u5f15\u7528\u3002 \u865a\u5f15\u7528\u4e5f\u79f0\u4e3a\u5e7d\u7075\u5f15\u7528\u6216\u8005\u5e7b\u5f71\u5f15\u7528\uff0c\u5b83\u662f\u6700\u5f31\u7684\u4e00\u79cd\u5f15\u7528\u5173\u7cfb\u3002\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u6709\u865a\u5f15\u7528\u7684\u5b58\u5728\uff0c\u5b8c\u5168\u4e0d\u4f1a\u5bf9\u5176\u751f\u5b58\u65f6\u95f4\u6784\u6210\u5f71\u54cd\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u865a\u5f15\u7528\u6765\u53d6\u5f97\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u8bbe\u7f6e\u865a\u5f15\u7528\u5173\u8054\u7684\u552f\u4e00\u76ee\u7684\u5c31\u662f\u80fd\u5728\u8fd9\u4e2a\u5bf9\u8c61\u88ab\u6536\u96c6\u5668\u56de\u6536\u65f6\u6536\u5230\u4e00\u4e2a\u7cfb\u7edf\u901a\u77e5\u3002\u6709 PhantomReference \u7c7b\u6765\u5b9e\u73b0\u865a\u5f15\u7528\u3002 \u751f\u5b58\u8fd8\u662f\u6b7b\u4ea1 \u5373\u4f7f\u5728\u53ef\u8fbe\u6027\u5206\u6790\u7b97\u6cd5\u4e2d\u4e0d\u53ef\u8fbe\u7684\u5bf9\u8c61\uff0c\u4e5f\u5e76\u975e\u662f\u201c\u975e\u6b7b\u4e0d\u53ef\u201d\u7684\uff0c\u8fd9\u65f6\u5019\u5b83\u4eec\u6682\u65f6\u5904\u4e8e\u201c\u7f13\u5211\u201d\u9636\u6bb5\uff0c\u8981\u771f\u6b63\u5ba3\u544a\u4e00\u4e2a\u5bf9\u8c61\u6b7b\u4ea1\uff0c\u81f3\u5c11\u8981\u7ecf\u5386\u4e24\u6b21\u6807\u8bb0\u8fc7\u7a0b\uff1a\u5982\u679c\u5bf9\u8c61\u5728\u8fdb\u884c\u53ef\u8fbe\u6027\u5206\u6790\u540e\u53d1\u73b0\u6ca1\u6709\u4e0eGC Roots\u76f8\u8fde\u63a5\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u88ab\u7b2c\u4e00\u6b21\u6807\u8bb0\u4e14\u8fdb\u884c\u4e00\u6b21\u5237\u9009\uff0c\u5237\u9009\u7684\u6761\u4ef6\u662f\u6b64\u5bf9\u8c61\u662f\u5426\u6709\u5fc5\u8981\u6267\u884c finalize \u65b9\u6cd5\u3002\u5f53\u5bf9\u8c61\u6ca1\u6709\u8986\u76d6 finalize \u65b9\u6cd5\uff0c\u6216\u8005 finalize \u65b9\u6cd5\u5df2\u7ecf\u88ab\u865a\u62df\u673a\u8c03\u7528\u8fc7\uff0c\u865a\u62df\u673a\u5c06\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u89c6\u4e3a\u201c\u6ca1\u6709\u5fc5\u8981\u6267\u884c\u201d\u3002 \u88ab\u5224\u5b9a\u6709\u5fc5\u8981\u6267\u884c finalize \u65b9\u6cd5\u7684\u5bf9\u8c61\u5c06\u88ab\u653e\u7f6e\u4e0eF-Queue\u7684\u961f\u5217\u4e2d\u3002\u5e76\u5728\u7a0d\u540e\u7531\u4e00\u4e2a\u865a\u62df\u673a\u81ea\u52a8\u5efa\u7acb\u7684\u3001\u4f4e\u4f18\u5148\u7ea7\u7684 Finalizer \u7ebf\u7a0b\u53bb\u6267\u884c\u5b83\u3002\u8fd9\u4e2a\u6267\u884c\u5e76\u4e0d\u4f1a\u7b49\u5f85\u5176\u8fd0\u884c\u7ed3\u675f\uff0c\u9632\u6b62\u963b\u585e\u548c\u5d29\u6e83\u3002 finalize() \u65b9\u6cd5\u662f\u5bf9\u8c61\u9003\u8fc7\u6b7b\u4ea1\u547d\u8fd0\u7684\u6700\u540e\u4e00\u6b21\u673a\u4f1a\uff0c\u7a0d\u540eGC\u5c06\u5bf9F-Queue\u4e2d\u7684\u5bf9\u8c61\u8fdb\u884c\u7b2c\u4e8c\u6b21\u5c0f\u89c4\u6a21\u7684\u6807\u8bb0\uff0c\u5982\u679c\u5bf9\u8c61\u8981\u5728 finalize \u65b9\u6cd5\u4e2d\u62ef\u6551\u81ea\u5df1---\u53ea\u8981\u91cd\u65b0\u4e0e\u5f15\u7528\u94fe\u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u5bf9\u8c61\u5efa\u7acb\u5173\u8054\u5373\u53ef\u3002\u4f46\u662f\u4e00\u4e2a\u5bf9\u8c61\u7684 finalize() \u65b9\u6cd5\u53ea\u80fd\u88ab\u6267\u884c\u4e00\u6b21\u3002 /** * \u6b64\u4ee3\u7801\u6f14\u793a\u4e86\u4e24\u70b9\uff1a * 1.\u5bf9\u8c61\u53ef\u4ee5\u5728\u88abGC\u65f6\u81ea\u6211\u62ef\u6551\u3002 * 2.\u8fd9\u79cd\u81ea\u6551\u7684\u673a\u4f1a\u53ea\u6709\u4e00\u6b21\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u7684finalize()\u65b9\u6cd5\u6700\u591a\u53ea\u4f1a\u88ab\u7cfb\u7edf\u81ea\u52a8\u8c03\u7528\u4e00\u6b21 * @author zzm */ public class FinalizeEscapeGC { public static FinalizeEscapeGC SAVE_HOOK = null ; public void isAlive () { System . out . println ( yes, i am still alive :) ); } @Override protected void finalize () throws Throwable { super . finalize (); System . out . println ( finalize method executed! ); FinalizeEscapeGC . SAVE_HOOK = this ; } public static void main ( String [] args ) throws Throwable { SAVE_HOOK = new FinalizeEscapeGC (); //\u5bf9\u8c61\u7b2c\u4e00\u6b21\u6210\u529f\u62ef\u6551\u81ea\u5df1 SAVE_HOOK = null ; System . gc (); // \u56e0\u4e3aFinalizer\u65b9\u6cd5\u4f18\u5148\u7ea7\u5f88\u4f4e\uff0c\u6682\u505c0.5\u79d2\uff0c\u4ee5\u7b49\u5f85\u5b83 Thread . sleep ( 500 ); if ( SAVE_HOOK != null ) { SAVE_HOOK . isAlive (); } else { System . out . println ( no, i am dead :( ); } // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e0e\u4e0a\u9762\u7684\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u662f\u8fd9\u6b21\u81ea\u6551\u5374\u5931\u8d25\u4e86 SAVE_HOOK = null ; System . gc (); // \u56e0\u4e3aFinalizer\u65b9\u6cd5\u4f18\u5148\u7ea7\u5f88\u4f4e\uff0c\u6682\u505c0.5\u79d2\uff0c\u4ee5\u7b49\u5f85\u5b83 Thread . sleep ( 500 ); if ( SAVE_HOOK != null ) { SAVE_HOOK . isAlive (); } else { System . out . println ( no, i am dead :( ); } } } // output: // finalize method executed! // yes, i am still alive :) // no, i am dead :( \u2f24\u5bb6\u5c3d\u91cf\u907f\u514d\u4f7f\u2f64 finalize() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662fC/C++\u4e2d\u7684\u6790\u6784\u51fd\u6570\uff0c\u2f7d\u662fJava\u521a\u8bde\u2f63\u65f6\u4e3a\u4e86\u4f7fC/C++\u7a0b\u5e8f\u5458\u66f4\u5bb9\u6613\u63a5\u53d7\u5b83\u6240\u505a\u51fa\u7684\u2f00\u4e2a\u59a5\u534f\u3002\u5b83\u7684\u8fd0\u2f8f\u4ee3\u4ef7\u2fbc\u6602\uff0c\u4e0d\u786e\u5b9a\u6027\u2f24\uff0c\u2f46\u6cd5\u4fdd\u8bc1\u5404\u4e2a\u5bf9\u8c61\u7684\u8c03\u2f64\u987a\u5e8f\u3002 \u56de\u6536\u65b9\u6cd5\u533a \u6c38\u4e45\u4ee3\u7684\u5783\u573e\u56de\u6536\u4e3b\u8981\u56de\u6536\u4e24\u90e8\u5206\u5185\u5bb9\uff1a\u5e9f\u5f03\u5e38\u91cf\u548c\u65e0\u7528\u7684\u7c7b\u3002 \u56de\u6536\u5e9f\u5f03\u5e38\u91cf\u4e0e\u56de\u6536Java\u5806\u4e2d\u7684\u5bf9\u8c61\u975e\u5e38\u7c7b\u4f3c\u3002\u4ee5\u5e38\u91cf\u6c60\u4e2d\u5b57\u9762\u91cf\u7684\u56de\u6536\u4e3a\u4f8b\uff0c\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5bf9\u8c61\u5f15\u7528\u5e38\u91cf\u6c60\u4e2d\u7684\u5e38\u91cf\uff0c\u4e5f\u6ca1\u6709\u5176\u4ed6\u5730\u65b9\u5f15\u7528\uff0c\u5982\u679c\u8fd9\u662f\u53d1\u751f\u5185\u5b58\u56de\u6536\uff0c\u800c\u4e14\u5fc5\u8981\u7684\u8bdd\uff0c\u5c31\u4f1a\u88ab\u7cfb\u7edf\u6e05\u7406\u51fa\u5e38\u91cf\u6c60\u3002 \u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u201c\u65e0\u7528\u7684\u7c7b\u201d\u7684\u6761\u4ef6\u5219\u76f8\u5bf9\u82db\u523b\u8bb8\u591a\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u97623\u4e2a\u6761\u4ef6\uff1a \u8be5\u7c7b\u6240\u6709\u7684\u5b9e\u4f8b\u90fd\u5df2\u7ecf\u88ab\u56de\u6536\uff0c\u4e5f\u5c31\u662fjava\u5806\u4e2d\u4e0d\u5b58\u5728\u8be5\u7c7b\u7684\u4efb\u4f55\u5b9e\u4f8b\u3002 \u52a0\u8f7d\u8be5\u7c7b\u7684 ClassLoader \u5df2\u7ecf\u88ab\u56de\u6536 \u8be5\u7c7b\u5bf9\u5e94\u7684 Class \u5bf9\u8c61\u6ca1\u6709\u5728\u4efb\u4f55\u5730\u65b9\u88ab\u5f15\u7528\uff0c\u65e0\u6cd5\u5728\u4efb\u4f55\u5730\u65b9\u901a\u8fc7\u53cd\u5c04\u8bbf\u95ee\u8be5\u7c7b\u7684\u65b9\u6cd5\u3002 \u865a\u62df\u673a\u53ef\u4ee5\u5bf9\u6ee1\u2f9c\u4e0a\u8ff03\u4e2a\u6761\u4ef6\u7684\u2f46\u2f64\u7c7b\u8fdb\u2f8f\u56de\u6536\uff0c\u8fd9\u2fa5\u8bf4\u7684\u4ec5\u4ec5\u662f\u201c\u53ef\u4ee5\u201d\uff0c\u2f7d\u5e76\u4e0d\u662f\u548c\u5bf9\u8c61\u2f00\u6837\uff0c\u4e0d\u4f7f\u2f64\u4e86\u5c31\u5fc5\u7136\u4f1a\u56de\u6536\u3002 \u662f\u5426\u5bf9\u7c7b\u8fdb\u884c\u56de\u6536\uff0cHotSpot\u865a\u62df\u673a\u63d0\u4f9b\u4e86 -Xnoclassgc \u53c2\u6570\u8fdb\u884c\u63a7\u5236\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 -verbose:class \u4ee5\u53ca -XX:+TraceClassLoading \u3001 -XX:+TraceClassUnLoading \u67e5\u770b\u7c7b\u52a0\u8f7d\u548c\u5378\u8f7d\u4fe1\u606f\uff0c\uff0c\u5176\u4e2d -verbose:class \u548c -XX:+TraceClassLoading \u53ef\u4ee5\u5728Product\u7248\u7684\u865a\u62df\u673a\u4e2d\u4f7f\u7528\uff0c -XX:+TraceClassUnLoading \u53c2\u6570\u9700\u8981FastDebug\u7248\u7684\u865a\u62df\u673a\u652f\u6301\u3002 \u5728\u5927\u91cf\u4f7f\u7528\u53cd\u5c04\u3001\u52a8\u6001\u4ee3\u7406\u3001CGLib\u7b49ByteCode\u6846\u67b6\u3001\u52a8\u6001\u751f\u6210JSP\u4ee5\u53caOSGi\u8fd9\u7c7b\u9891\u7e41\u81ea\u5b9a\u4e49 ClassLoader \u7684\u573a\u666f\u90fd\u9700\u8981\u865a\u62df\u673a\u5177\u5907\u7c7b\u5378\u8f7d\u7684\u529f\u80fd\uff0c\u4ee5\u4fdd\u8bc1\u6c38\u4e45\u4ee3\u4e0d\u4f1a\u6ea2\u51fa\u3002 3 \u5783\u573e\u6536\u96c6\u7b97\u6cd5 \u6807\u8bb0-\u6e05\u9664\u7b97\u6cd5 \u6700\u57fa\u7840\u7684\u6536\u96c6\u7b97\u6cd5\u662f \u6807\u8bb0-\u6e05\u9664 (Mark-Sweep)\u7b97\u6cd5\u3002\u7b97\u6cd5\u5206\u4e3a\u6807\u8bb0\u548c\u6e05\u9664\u4e24\u4e2a\u9636\u6bb5\uff1a\u9996\u5148\u6807\u8bb0\u51fa\u6240\u6709\u9700\u8981\u56de\u6536\u7684\u5bf9\u8c61\uff0c\u5728\u6807\u8bb0\u5b8c\u6210\u540e\u7edf\u4e00\u56de\u6536\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\uff0c\u5b83\u7684\u6807\u8bb0\u8fc7\u7a0b\u5c31\u662f\u4f7f\u7528\u53ef\u8fbe\u6027\u7b97\u6cd5\u8fdb\u884c\u6807\u8bb0\u7684\u3002 \u5b83\u7684\u4e3b\u8981\u4e0d\u2f9c\u6709\u4e24\u4e2a\uff1a \u6548\u7387\u95ee\u9898\uff0c\u6807\u8bb0\u548c\u6e05\u9664\u4e24\u4e2a\u8fc7\u7a0b\u7684\u6548\u7387\u90fd\u4e0d\u9ad8 \u7a7a\u95f4\u95ee\u9898\uff0c\u6807\u8bb0\u6e05\u9664\u4e4b\u540e\u4f1a\u4ea7\u751f\u5927\u91cf\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u788e\u7247\uff0c\u7a7a\u95f4\u788e\u2f5a\u592a\u591a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4ee5\u540e\u5728\u7a0b\u5e8f\u8fd0\u2f8f\u8fc7\u7a0b\u4e2d\u9700\u8981\u5206\u914d\u8f83\u2f24\u5bf9\u8c61\u65f6\uff0c\u2f46\u6cd5\u627e\u5230\u2f9c\u591f\u7684\u8fde\u7eed\u5185\u5b58\u2f7d\u4e0d\u5f97\u4e0d\u63d0\u524d\u89e6\u53d1\u53e6\u2f00\u6b21\u5783\u573e\u6536\u96c6\u52a8\u4f5c \u590d\u5236\u7b97\u6cd5 \u590d\u5236\u7b97\u6cd5 (Copying)\uff1a\u5c06\u53ef\u7528\u5185\u5b58\u6309\u7167\u5bb9\u91cf\u5206\u4e3a\u5927\u5c0f\u76f8\u7b49\u7684\u4e24\u5757\uff0c\u6bcf\u6b21\u53ea\u4f7f\u7528\u5176\u4e2d\u7684\u4e00\u5757\u3002\u5f53\u8fd9\u4e00\u5757\u7684\u5185\u5b58\u7528\u5b8c\u4e86\uff0c\u5c31\u5c06\u8fd8\u5b58\u6d3b\u7740\u7684\u5bf9\u8c61\u590d\u5236\u5230\u53e6\u4e00\u5757\u4e0a\u9762\uff0c\u7136\u540e\u628a\u5df2\u4f7f\u7528\u8fc7\u7684\u5185\u5b58\u7a7a\u95f4\u4e00\u6b21\u6e05\u7406\u6389\u3002\u8fd9\u6837\u4f7f\u5f97\u6bcf\u6b21\u90fd\u662f\u5bf9\u6574\u4e2a\u534a\u533a\u8fdb\u2f8f\u5185\u5b58\u56de\u6536\uff0c\u5185\u5b58\u5206\u914d\u65f6\u4e5f\u5c31\u4e0d\u2f64\u8003\u8651\u5185\u5b58\u788e\u2f5a\u7b49\u590d\u6742\u60c5\u51b5\uff0c\u53ea\u8981\u79fb\u52a8\u5806\u9876\u6307\u9488\uff0c\u6309\u987a\u5e8f\u5206\u914d\u5185\u5b58\u5373\u53ef\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u8fd0\u2f8f\u2fbc\u6548\u3002\u53ea\u662f\u8fd9\u79cd\u7b97\u6cd5\u7684\u4ee3\u4ef7\u662f\u5c06\u5185\u5b58\u7f29\u2f29\u4e3a\u4e86\u539f\u6765\u7684\u2f00\u534a\uff0c\u672a\u514d\u592a\u2fbc\u4e86\u2f00\u70b9\u3002\u590d\u5236\u6536\u96c6\u7b97\u6cd5\u5728\u5bf9\u8c61\u5b58\u6d3b\u7387\u8f83\u2fbc\u65f6\u5c31\u8981\u8fdb\u2f8f\u8f83\u591a\u7684\u590d\u5236\u64cd\u4f5c\uff0c\u6548\u7387\u5c06\u4f1a\u53d8\u4f4e\u3002 \u73b0\u5728\u7684\u5546\u4e1a\u865a\u62df\u673a\u90fd\u91c7\u2f64\u8fd9\u79cd\u6536\u96c6\u7b97\u6cd5\u6765\u56de\u6536\u65b0\u2f63\u4ee3\uff0cIBM\u516c\u53f8\u7684\u4e13\u95e8\u7814\u7a76\u8868\u660e\uff0c\u65b0\u2f63\u4ee3\u4e2d\u7684\u5bf9\u8c6198%\u662f\u201c\u671d\u2f63\u5915\u6b7b\u201d\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u6309\u71671:1\u7684\u2f50\u4f8b\u6765\u5212\u5206\u5185\u5b58\u7a7a\u95f4\uff0c\u2f7d\u662f\u5c06\u5185\u5b58\u5206\u4e3a\u2f00\u5757\u8f83\u2f24\u7684Eden\u7a7a\u95f4\u548c\u4e24\u5757\u8f83\u2f29\u7684Survivor\u7a7a\u95f4\uff0c\u6bcf\u6b21\u4f7f\u2f64Eden\u548c\u5176\u4e2d\u2f00\u5757Survivor\u3002\u5f53\u56de\u6536\u65f6\uff0c\u5c06Eden \u548cSurvivor\u4e2d\u8fd8\u5b58\u6d3b\u7740\u7684\u5bf9\u8c61\u2f00\u6b21\u6027\u5730\u590d\u5236\u5230\u53e6\u5916\u2f00\u5757Survivor\u7a7a\u95f4\u4e0a\uff0c\u6700\u540e\u6e05\u7406\u6389Eden\u548c\u521a\u624d\u2f64\u8fc7\u7684Survivor\u7a7a\u95f4\u3002HotSpot\u865a\u62df\u673a\u9ed8\u8ba4Eden\u548cSurvivor\u7684\u2f24\u2f29\u2f50\u4f8b\u662f8:1\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u65b0\u2f63\u4ee3\u4e2d\u53ef\u2f64\u5185\u5b58\u7a7a\u95f4\u4e3a\u6574\u4e2a\u65b0\u2f63\u4ee3\u5bb9\u91cf\u768490%\uff0880%+10%\uff09\uff0c\u53ea\u670910%\u7684\u5185\u5b58\u4f1a\u88ab\u201c\u6d6a\u8d39\u201d\u3002 \u5f53Survivor\u7a7a\u95f4\u4e0d\u591f\u2f64\u65f6\uff0c\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u5185\u5b58(\u8fd9\u2fa5\u6307\u2f7c\u5e74\u4ee3)\u8fdb\u2f8f\u5206\u914d\u62c5\u4fdd(Handle Promotion)\u3002\u5982\u679c\u53e6\u5916\u2f00\u5757Survivor\u7a7a\u95f4\u6ca1\u6709\u2f9c\u591f\u7a7a\u95f4\u5b58\u653e\u4e0a\u2f00\u6b21\u65b0\u2f63\u4ee3\u6536\u96c6\u4e0b\u6765\u7684\u5b58\u6d3b\u5bf9\u8c61\u65f6\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5c06\u76f4\u63a5\u901a\u8fc7\u5206\u914d\u62c5\u4fdd\u673a\u5236\u8fdb\u2f0a\u2f7c\u5e74\u4ee3\u3002 \u6807\u8bb0-\u6574\u7406\u7b97\u6cd5 \u6807\u8bb0\u6574\u7406\u7b97\u6cd5 (Mark-Compact)\uff0c\u6807\u8bb0\u8fc7\u7a0b\u4ecd\u7136\u548c\u201c\u6807\u8bb0-\u6e05\u9664\u201d\u4e00\u6837\uff0c\u4f46\u540e\u7eed\u4e0d\u8d70\u4e0d\u662f\u76f4\u63a5\u5bf9\u53ef\u56de\u6536\u5bf9\u8c61\u8fdb\u884c\u6e05\u7406\uff0c\u800c\u662f\u8ba9\u6240\u6709\u5b58\u6d3b\u5bf9\u8c61\u5411\u4e00\u7aef\u79fb\u52a8\uff0c\u7136\u540e\u76f4\u63a5\u6e05\u7406\u6389\u7aef\u8fb9\u754c\u4ee5\u5916\u7684\u5185\u5b58\u3002 \u5206\u4ee3\u6536\u96c6\u7b97\u6cd5 \u5f53\u524d\u5546\u4e1a\u865a\u62df\u673a\u7684\u5783\u573e\u6536\u96c6\u90fd\u91c7\u2f64 \u5206\u4ee3\u6536\u96c6 (Generational Collection)\u7b97\u6cd5\u3002\u6839\u636e\u5bf9\u8c61\u5b58\u6d3b\u5468\u671f\u7684\u4e0d\u540c\u5c06\u5185\u5b58\u5206\u4e3a\u51e0\u5757\u3002\u4e00\u822c\u628aJava\u5806\u5206\u4e3a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff0c\u6839\u636e\u5404\u4e2a\u5e74\u4ee3\u7684\u7279\u70b9\u91c7\u7528\u6700\u5408\u9002\u7684\u6536\u96c6\u7b97\u6cd5\u3002\u5728\u65b0\u751f\u4ee3\u4e2d\uff0c\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u65f6\u6709\u5927\u6279\u5bf9\u8c61\u6b7b\u53bb\uff0c\u53ea\u6709\u5c11\u91cf\u5b58\u6d3b\uff0c\u53ef\u4ee5\u9009\u7528\u590d\u5236\u7b97\u6cd5\u3002\u800c\u8001\u5e74\u4ee3\u5bf9\u8c61\u5b58\u6d3b\u7387\u9ad8\uff0c\u4f7f\u7528\u6807\u8bb0\u6e05\u7406\u6216\u8005\u6807\u8bb0\u6574\u7406\u7b97\u6cd5\u3002 \u5f53\u524d\u5546\u7528\u5b9e\u73b0 \u8fd9\u662f\u73b0\u6709\u7684\u5546\u7528GC\u5bf9\u5e94\u7684\u7b97\u6cd5\uff1a 4 HotSpot\u7684\u7b97\u6cd5\u5b9e\u73b0 \u5728HotSpot\u865a\u62df\u673a\u4e0a\u5b9e\u73b0\u5783\u573e\u56de\u6536\u7b97\u6cd5\u65f6\uff0c\u5fc5\u987b\u5bf9\u7b97\u6cd5\u7684\u6267\u2f8f\u6548\u7387\u6709\u4e25\u683c\u7684\u8003\u91cf\uff0c\u624d\u80fd\u4fdd\u8bc1\u865a\u62df\u673a\u2fbc\u6548\u8fd0\u2f8f\u3002 \u679a\u4e3e\u6839\u8282\u70b9 \u4ece\u53ef\u8fbe\u6027\u5206\u6790\u4e2d\u4eceGC Roots\u8282\u70b9\u627e\u5f15\u2f64\u94fe\u8fd9\u4e2a\u64cd\u4f5c\u4e3a\u4f8b\uff0c\u53ef\u4f5c\u4e3aGC Roots\u7684\u8282\u70b9\u4e3b\u8981\u5728\u5168\u5c40\u6027\u7684\u5f15\u2f64\uff08\u4f8b\u5982\u5e38\u91cf\u6216\u7c7b\u9759\u6001\u5c5e\u6027\uff09\u4e0e\u6267\u2f8f\u4e0a\u4e0b\u2f42 \uff08\u4f8b\u5982\u6808\u5e27\u4e2d\u7684\u672c\u5730\u53d8\u91cf\u8868\uff09\u4e2d\uff0c\u73b0\u5728\u5f88\u591a\u5e94\u2f64\u4ec5\u4ec5\u2f45\u6cd5\u533a\u5c31\u6709\u6570\u767e\u5146\uff0c \u5982\u679c\u8981\u9010\u4e2a\u68c0\u67e5\u8fd9\u2fa5\u2faf\u7684\u5f15\u2f64\uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u6d88\u8017\u5f88\u591a\u65f6\u95f4\u3002 \u53ef\u8fbe\u6027\u5206\u6790\u5bf9\u6267\u2f8f\u65f6\u95f4\u7684\u654f\u611f\u8fd8\u4f53\u73b0\u5728GC\u505c\u987f\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u9879\u5206\u6790\u2f2f\u4f5c\u5fc5\u987b\u5728\u2f00\u4e2a\u80fd\u786e\u4fdd\u2f00\u81f4\u6027\u7684\u5feb\u7167\u4e2d\u8fdb\u2f8f\u2014\u2014\u8fd9\u2fa5 \u2f00\u81f4\u6027 \u7684\u610f\u601d\u662f\u6307\u5728\u6574\u4e2a\u5206\u6790\u671f\u95f4\u6574\u4e2a\u6267\u2f8f\u7cfb\u7edf\u770b\u8d77\u6765\u5c31\u50cf\u88ab\u51bb\u7ed3\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u4e0a\uff0c\u4e0d\u53ef\u4ee5\u51fa\u73b0\u5206\u6790\u8fc7\u7a0b\u4e2d\u5bf9\u8c61\u5f15\u2f64\u5173\u7cfb\u8fd8\u5728\u4e0d\u65ad\u53d8\u5316\u7684\u60c5\u51b5\uff0c\u8be5\u70b9\u4e0d\u6ee1\u2f9c\u7684\u8bdd\u5206\u6790\u7ed3\u679c\u51c6\u786e\u6027\u5c31\u2f46\u6cd5\u5f97\u5230\u4fdd\u8bc1\u3002\u8fd9\u70b9\u662f\u5bfc\u81f4GC\u8fdb\u2f8f\u65f6\u5fc5\u987b\u505c\u987f\u6240\u6709Java\u6267\u2f8f\u7ebf\u7a0b\uff08Sun\u5c06\u8fd9\u4ef6\u4e8b\u60c5\u79f0\u4e3a\u201cStop The World\u201d\uff09\u7684\u5176\u4e2d\u2f00\u4e2a\u91cd\u8981\u539f\u56e0\uff0c\u5373\u4f7f\u662f\u5728\u53f7\u79f0(\u2f0f\u4e4e)\u4e0d\u4f1a\u53d1\u2f63\u505c\u987f\u7684CMS\u6536\u96c6\u5668\u4e2d\uff0c \u679a\u4e3e\u6839\u8282\u70b9\u65f6\u4e5f\u662f\u5fc5\u987b\u8981\u505c\u987f\u7684 \u3002 \u5728HotSpot\u7684\u5b9e\u73b0\u4e2d\uff0c\u662f\u4f7f\u2f64\u2f00\u7ec4\u79f0\u4e3aOopMap\u7684\u6570\u636e\u7ed3\u6784\u6765\u8fbe\u5230\u8fd9\u4e2a\u2f6c\u7684\u7684\uff0c\u5728\u7c7b\u52a0\u8f7d\u5b8c\u6210\u7684 \u65f6\u5019\uff0cHotSpot\u5c31\u628a\u5bf9\u8c61\u5185\u4ec0\u4e48\u504f\u79fb\u91cf\u4e0a\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u6570\u636e\u8ba1\u7b97\u51fa\u6765\uff0c\u5728JIT(\u5373\u65f6\u7f16\u8bd1\u5668)\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u4f1a\u5728\u7279\u5b9a\u7684\u4f4d\u7f6e\u8bb0\u5f55\u4e0b\u6808\u548c\u5bc4\u5b58\u5668\u4e2d\u54ea\u4e9b\u4f4d\u7f6e\u662f\u5f15\u2f64\u3002 \u8fd9\u6837\uff0cGC\u5728\u626b\u63cf\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u77e5\u8fd9\u4e9b\u4fe1\u606f\u4e86\u3002 \u5b89\u5168\u70b9 \u5982\u679c\u4e3a\u6bcf\u2f00\u6761\u6307\u4ee4\u90fd\u2f63\u6210\u5bf9\u5e94\u7684OopMap\uff0c\u90a3\u5c06\u4f1a\u9700\u8981\u2f24\u91cf\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u8fd9\u6837GC\u7684\u7a7a\u95f4\u6210\u672c\u5c06\u4f1a\u53d8\u5f97\u5f88\u2fbc\u3002\u5b9e\u9645\u4e0a\uff0cHotSpot\u6ca1\u6709\u4e3a\u6bcf\u6761\u6307\u4ee4\u90fd\u751f\u6210OopMap\uff0c\u800c\u53ea\u662f\u5728\u201c\u7279\u5b9a\u7684\u4f4d\u7f6e\u201d\u8bb0\u5f55\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u79f0\u4e3a \u5b89\u5168\u70b9 (Safepoint)\uff0c \u5373\u7a0b\u5e8f\u6267\u884c\u65f6\u5e76\u975e\u5728\u6240\u6709\u5730\u65b9\u90fd\u80fd\u505c\u987f\u4e0b\u6765\u5f00\u59cbGC\uff0c\u53ea\u6709\u5728\u5230\u8fbe\u5b89\u5168\u70b9\u65f6\u624d\u80fd\u6682\u505c \u3002Safepoint\u7684\u9009\u5b9a\u65e2\u4e0d\u80fd\u592a\u5c11\u4ee5\u81f3\u4e8e\u8ba9GC\u7b49\u5f85\u65f6\u95f4\u592a\u957f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u4e8e\u9891\u7e41\u4ee5\u81f4\u4e8e\u8fc7\u5206\u589e\u5927\u8fd0\u884c\u65f6\u7684\u8d1f\u8377\u3002\u6240\u4ee5\uff0c\u5b89\u5168\u70b9\u7684\u9009\u5b9a\u57fa\u672c\u4e0a\u662f\u4ee5\u7a0b\u5e8f\u201c\u662f\u5426\u5177\u6709\u8ba9\u7a0b\u5e8f\u957f\u65f6\u95f4\u6267\u884c\u7684\u7279\u5f81\u201d\u4e3a\u6807\u51c6\u9009\u5b9a\u7684----\u56e0\u4e3a\u6bcf\u6761\u6307\u4ee4\u6267\u884c\u7684\u65f6\u95f4\u90fd\u975e\u5e38\u77ed\u6682\uff0c\u7a0b\u5e8f\u4e0d\u592a\u53ef\u80fd\u56e0\u4e3a\u6307\u4ee4\u6d41\u957f\u5ea6\u592a\u957f\u8fd9\u4e2a\u539f\u56e0\u800c\u8fc7\u957f\u65f6\u95f4\u8fd0\u884c\uff0c\u201c\u957f\u65f6\u95f4\u6267\u884c\u201d\u7684\u6700\u660e\u663e\u7279\u5f81\u5c31\u662f\u6307\u4ee4\u5e8f\u5217\u590d\u7528\uff0c\u4f8b\u5982\u65b9\u6cd5\u8c03\u7528\u3001\u5faa\u73af\u8df3\u8f6c\u3001\u5f02\u5e38\u8df3\u8f6c\u7b49\uff0c\u6240\u4ee5\u5177\u6709\u8fd9\u4e9b\u529f\u80fd\u7684\u6307\u4ee4\u624d\u4f1a\u4ea7\u751fSafepoint\u3002 \u7531\u4e8eGC\u65f6\uff0c\u9700\u8981\u6240\u6709\u7ebf\u7a0b\u5728\u5b89\u5168\u70b9\u4e2d\u65ad\uff0c\u4e00\u79cd\u662f\u62a2\u5360\u5f0f\u4e2d\u65ad\uff1b\u53e6\u4e00\u79cd\u662f\u4e3b\u52a8\u5f0f\u4e2d\u65ad\uff0c\u5176\u4e2d\u62a2\u5360\u5f0f\u4e2d\u65ad\u5c31\u662f\u5728GC\u53d1\u751f\u65f6\uff0c\u9996\u5148\u628a\u6240\u6709\u7ebf\u7a0b\u5168\u90e8\u4e2d\u65ad\uff0c\u5982\u679c\u53d1\u73b0\u6709\u7ebf\u7a0b\u4e0d\u5728\u5b89\u5168\u70b9\uff0c\u5c31\u6062\u590d\u7ebf\u7a0b\uff0c\u8ba9\u5b83\u8dd1\u5230\u5b89\u5168\u70b9\u4e0a\u3002\u73b0\u5728\u2f0f\u4e4e\u6ca1\u6709\u865a\u62df\u673a\u5b9e\u73b0\u91c7\u2f64\u62a2\u5148\u5f0f\u4e2d\u65ad\u6765\u6682\u505c\u7ebf\u7a0b\u4ece\u2f7d\u54cd\u5e94GC\u4e8b\u4ef6\u3002\u800c\u4e3b\u52a8\u5f0f\u4e2d\u65ad\u7684\u601d\u60f3\u4e0d\u662f\u76f4\u63a5\u5bf9\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4ec5\u4ec5\u662f\u7b80\u5355\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\uff0c\u5404\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\u4e3b\u52a8\u53bb\u8f6e\u8be2\u8fd9\u4e2a\u6807\u5fd7\uff0c\u53d1\u73b0\u4e2d\u65ad\u6807\u5fd7\u4e3a\u771f\u65f6\u5c31\u81ea\u5df1\u4e2d\u65ad\u6302\u8d77\u3002\u8f6e\u8be2\u6807\u5fd7\u7684\u5730\u65b9\u548c\u5b89\u5168\u70b9\u662f\u91cd\u5408\u7684\u3002 \u5b89\u5168\u533a\u57df \u6709\u4e86\u5b89\u5168\u70b9\u4e4b\u540e\uff0c\u4e5f\u4e0d\u80fd\u5b8c\u7f8e\u5730\u89e3\u51b3GC\u7684\u95ee\u9898\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u5374\u4e0d\u4e00\u5b9a\u3002\u5f53\u7a0b\u5e8f\u6ca1\u6709\u88ab\u5206\u914dcpu\u65f6\u95f4\uff0c\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u7ebf\u7a0b\u5904\u4e8esleep\u6216\u8005blocked\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u7ebf\u7a0b\u65e0\u6cd5\u54cd\u5e94JVM\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u201c\u8d70\u201d\u5230\u5b89\u5168\u70b9\u6302\u8d77\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u5c31\u9700\u8981\u5b89\u5168\u533a\u57df\u6765\u89e3\u51b3\u3002 \u5b89\u5168\u533a\u57df (Safe Region)\u662f\u6307\u5728\u4e00\u6bb5\u4ee3\u7801\u7247\u6bb5\u4e4b\u4e2d\uff0c\u5f15\u7528\u5173\u7cfb\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5728\u8fd9\u4e2a\u533a\u57df\u4e2d\u7684\u4efb\u610f\u5730\u65b9\u5f00\u59cbGC\u90fd\u662f\u5b89\u5168\u7684\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628aSafe Region\u770b\u505a\u662f\u88ab\u6269\u5c55\u7684Safepoint\u3002 5 \u5783\u573e\u6536\u96c6\u5668 \u5982\u679c\u8bf4\u5783\u573e\u6536\u96c6\u7b97\u6cd5\u662f\u5185\u5b58\u56de\u6536\u7684\u2f45\u6cd5\u8bba\uff0c\u90a3\u4e48\u5783\u573e\u6536\u96c6\u5668\u5c31\u662f\u5185\u5b58\u56de\u6536\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u4e0b\u9762\u662fSun HotSpot\u865a\u62df\u673a1.6\u7248\u672cUpdate22\u5305\u542b\u76847\u79cd\u4f5c\u2f64\u4e8e\u4e0d\u540c\u5206\u4ee3\u7684\u6536\u96c6\u5668\u3002\u5982\u679c\u4e24\u4e2a\u6536\u96c6\u5668\u4e4b\u95f4\u5b58\u5728\u8fde\u7ebf\uff0c\u5c31\u8bf4\u660e\u5b83\u4eec\u53ef\u4ee5\u642d\u914d\u4f7f\u2f64\u3002\u865a\u62df\u673a\u6240\u5904\u7684\u533a\u57df\uff0c\u5219\u8868\u2f70\u5b83\u662f\u5c5e\u4e8e\u65b0\u2f63\u4ee3\u6536\u96c6\u5668\u8fd8\u662f\u2f7c\u5e74\u4ee3\u6536\u96c6\u5668\u3002 Serial Collector Serial\u6536\u96c6\u5668\u662f\u5355\u7ebf\u7a0b\u6536\u96c6\u5668\u3002\u5b83\u8fdb\u884c\u5783\u573e\u6536\u96c6\u65f6\uff0c \u5fc5\u987b\u6682\u505c\u5176\u4ed6\u6240\u6709\u7684\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u76f4\u5230\u5b83\u6536\u96c6\u7ed3\u675f \u3002\u5b9e\u9645\u4e0a\u5230\u73b0\u5728\u4e3a\u2f4c\uff0c\u5b83\u4f9d\u7136\u662f\u865a\u62df\u673a\u8fd0\u2f8f\u5728Client\u6a21\u5f0f\u4e0b\u7684\u9ed8\u8ba4\u65b0\u2f63\u4ee3\u6536\u96c6\u5668\u3002 \u5b83\u6709\u7740\u4f18\u4e8e\u5176\u4ed6\u6536\u96c6\u5668\u7684\u5730\u2f45\uff1a\u7b80\u5355\u2f7d\u2fbc\u6548(\u4e0e\u5176\u4ed6\u6536\u96c6\u5668\u7684\u5355\u7ebf\u7a0b\u2f50)\uff0c\u5bf9\u4e8e\u9650\u5b9a\u5355\u4e2aCPU\u7684\u73af\u5883\u6765\u8bf4\uff0c Serial\u6536\u96c6\u5668\u7531\u4e8e\u6ca1\u6709\u7ebf\u7a0b\u4ea4\u4e92\u7684\u5f00\u9500\uff0c\u4e13\u2f3c\u505a\u5783\u573e\u6536\u96c6\u2f83\u7136\u53ef\u4ee5\u83b7\u5f97\u6700\u2fbc\u7684\u5355\u7ebf\u7a0b\u6536\u96c6\u6548\u7387\u3002\u5728\u2f64\u6237\u7684\u684c\u2faf\u5e94\u2f64\u573a\u666f\u4e2d\uff0c\u5206\u914d\u7ed9\u865a\u62df\u673a\u7ba1\u7406\u7684\u5185\u5b58 \u2f00\u822c\u6765\u8bf4\u4e0d\u4f1a\u5f88\u2f24\uff0c\u6536\u96c6\u2f0f\u2f17\u5146\u751a\u2f84\u2f00\u4e24\u767e\u5146\u7684\u65b0\u2f63\u4ee3(\u4ec5\u4ec5\u662f\u65b0\u2f63\u4ee3\u4f7f\u2f64\u7684\u5185\u5b58\uff0c\u684c\u2faf\u5e94\u2f64\u57fa\u672c\u4e0a\u4e0d\u4f1a\u518d\u2f24\u4e86)\uff0c\u505c\u987f\u65f6\u95f4\u5b8c\u5168\u53ef\u4ee5\u63a7\u5236\u5728\u2f0f\u2f17\u6beb\u79d2\u6700\u591a\u2f00\u767e\u591a\u6beb\u79d2\u4ee5\u5185\uff0c\u53ea\u8981\u4e0d\u662f\u9891\u7e41\u53d1\u2f63\uff0c\u8fd9\u70b9\u505c\u987f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u6240\u4ee5\uff0cSerial\u6536\u96c6\u5668\u5bf9\u4e8e\u8fd0\u2f8f\u5728Client\u6a21\u5f0f\u4e0b\u7684\u865a\u62df\u673a\u6765\u8bf4\u662f\u2f00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002 Serial/Serial Old\u6536\u96c6\u5668\u8fd0\u2f8f\u2f70\u610f\u56fe ParNew\u6536\u96c6\u5668 ParNew\u6536\u96c6\u5668\u5176\u5b9e\u5c31\u662fSerial\u6536\u96c6\u5668\u7684\u591a\u7ebf\u7a0b\u7248\u672c\uff0c\u9664\u4e86\u4f7f\u2f64\u591a\u6761\u7ebf\u7a0b\u8fdb\u2f8f\u5783\u573e\u6536\u96c6\u4e4b\u5916\uff0c\u5176\u4f59\u2f8f\u4e3a\u90fd\u4e0eSerial\u6536\u96c6\u5668\u5b8c\u5168\u2f00\u6837\u3002 ParNew/Serial Old\u6536\u96c6\u5668\u8fd0\u2f8f\u2f70\u610f\u56fe\uff1a \u3000 \u5b83\u662f\u8bb8\u591a\u8fd0\u2f8f\u5728Server\u6a21\u5f0f\u4e0b\u7684\u865a\u62df\u673a\u4e2d\u2fb8\u9009\u7684\u65b0\u2f63\u4ee3\u6536\u96c6\u5668\uff0c\u5176\u4e2d\u6709\u2f00\u4e2a\u4e0e\u6027\u80fd\u2f46\u5173\u4f46\u5f88\u91cd\u8981\u7684\u539f\u56e0\u662f\uff0c\u9664\u4e86Serial\u6536\u96c6\u5668\u5916\uff0c\u2f6c\u524d\u53ea\u6709\u5b83\u80fd\u4e0eCMS\u6536\u96c6\u5668\u914d\u5408\u2f2f\u4f5c\u3002 Parallel Scavenge\u6536\u96c6\u5668 Parallel Scavenge\u6536\u96c6\u5668\u7684\u2f6c\u6807\u5219\u662f\u8fbe\u5230\u2f00\u4e2a\u53ef\u63a7\u5236\u7684\u541e\u5410\u91cf(Throughput)\u3002\u6240\u8c13\u541e\u5410\u91cf\u5c31\u662fCPU\u2f64\u4e8e\u8fd0\u2f8f\u2f64\u6237\u4ee3\u7801\u7684\u65f6\u95f4\u4e0eCPU\u603b\u6d88\u8017\u65f6\u95f4\u7684\u2f50\u503c\uff0c\u5373\u541e\u5410\u91cf=\u8fd0\u2f8f\u2f64\u6237\u4ee3\u7801\u65f6\u95f4/\uff08\u8fd0\u2f8f\u2f64\u6237\u4ee3\u7801\u65f6\u95f4+\u5783\u573e\u6536\u96c6\u65f6\u95f4\uff0c\u865a\u62df\u673a\u603b\u5171\u8fd0\u2f8f\u4e86100\u5206\u949f\uff0c\u5176\u4e2d\u5783\u573e\u6536\u96c6\u82b1\u63891\u5206\u949f\uff0c\u90a3\u541e\u5410\u91cf\u5c31\u662f99%\u3002 \u505c\u987f\u65f6\u95f4\u8d8a\u77ed\u5c31\u8d8a\u9002\u5408\u9700\u8981\u4e0e\u2f64\u6237\u4ea4\u4e92\u7684\u7a0b\u5e8f\uff0c\u826f\u597d\u7684\u54cd\u5e94\u901f\u5ea6\u80fd\u63d0\u5347\u2f64\u6237\u4f53\u9a8c\uff0c\u2f7d\u2fbc\u541e\u5410\u91cf\u5219\u53ef\u4ee5\u2fbc\u6548\u7387\u5730\u5229\u2f64CPU\u65f6\u95f4\uff0c\u5c3d\u5feb\u5b8c\u6210\u7a0b\u5e8f\u7684 \u8fd0\u7b97\u4efb\u52a1\uff0c\u4e3b\u8981\u9002\u5408\u5728\u540e\u53f0\u8fd0\u7b97\u2f7d\u4e0d\u9700\u8981\u592a\u591a\u4ea4\u4e92\u7684\u4efb\u52a1\u3002 Serial Old \u6536\u96c6\u5668 Serial Old\u662fSerial\u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\uff0c\u5b83\u540c\u6837\u662f\u5355\u7ebf\u7a0b\u7684\u3002\u4f7f\u7528\u201c\u6807\u8bb0-\u6574\u7406\u201d\u7b97\u6cd5\u3002 \u8fd9\u4e2a\u6536\u96c6\u5668\u7684\u4e3b\u8981\u610f\u4e49\u4e5f\u662f\u5728\u4e8e\u7ed9Client\u6a21\u5f0f\u4e0b\u7684\u865a\u62df\u673a\u4f7f\u2f64\u3002\u5982\u679c\u5728Server\u6a21\u5f0f\u4e0b\uff0c\u90a3\u4e48\u5b83\u4e3b\u8981\u8fd8\u6709\u4e24\u2f24\u2f64\u9014\uff1a\u2f00\u79cd\u2f64\u9014 \u662f\u5728JDK 1.5\u4ee5\u53ca\u4e4b\u524d\u7684\u7248\u672c\u4e2d\u4e0eParallel Scavenge\u6536\u96c6\u5668\u642d\u914d\u4f7f\u2f64 \uff0c\u53e6\u2f00\u79cd\u2f64\u9014\u5c31\u662f\u4f5c\u4e3aCMS\u6536\u96c6\u5668\u7684\u540e\u5907\u9884\u6848\uff0c\u5728\u5e76\u53d1\u6536\u96c6\u53d1\u2f63Concurrent Mode Failure\u65f6\u4f7f\u2f64\u3002 Serial/Serial Old\u6536\u96c6\u5668\u8fd0\u2f8f\u2f70\u610f\u56fe Parallel Old\u6536\u96c6\u5668 Parallel Old\u662fParallel Scavenge\u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\uff0c\u4f7f\u7528\u591a\u7ebf\u7a0b\u548c\u201c\u6807\u8bb0-\u6574\u7406\u201d\u7b97\u6cd5\u3002\u8fd9\u4e2a\u6536\u96c6\u5668\u662f\u5728JDK1.6\u4e2d\u624d\u5f00\u59cb\u63d0\u4f9b\u7684\u3002 CMS\u6536\u96c6\u5668 CMS(Concurrent Mark Sweep)\u6536\u96c6\u5668\u662f\u2f00\u79cd\u4ee5\u83b7\u53d6\u6700\u77ed\u56de\u6536\u505c\u987f\u65f6\u95f4\u4e3a\u2f6c\u6807\u7684\u6536\u96c6\u5668\u3002\u2f6c\u524d\u5f88\u2f24\u2f00\u90e8\u5206\u7684Java\u5e94\u2f64\u96c6\u4e2d\u5728\u4e92\u8054\u2f79\u7ad9\u6216\u8005B/S\u7cfb\u7edf\u7684\u670d\u52a1\u7aef\u4e0a\uff0c\u8fd9\u7c7b\u5e94\u2f64\u5c24\u5176\u91cd\u89c6\u670d\u52a1\u7684\u54cd\u5e94\u901f\u5ea6\uff0c\u5e0c\u671b\u7cfb\u7edf\u505c\u987f\u65f6\u95f4\u6700\u77ed\uff0c\u4ee5\u7ed9\u2f64\u6237\u5e26\u6765\u8f83\u597d\u7684\u4f53\u9a8c\u3002CMS\u6536\u96c6\u5668\u5c31\u2fae\u5e38\u7b26\u5408\u8fd9\u7c7b\u5e94\u2f64\u7684\u9700\u6c42\u3002 CMS\u6536\u96c6\u5668\u662f\u57fa\u4e8e\u201c\u6807\u8bb0\u2014\u6e05\u9664\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u5b83\u7684\u8fd0\u4f5c\u8fc7\u7a0b\u76f8\u5bf9\u4e8e\u524d\u2faf\u2f0f\u79cd\u6536\u96c6\u5668\u6765\u8bf4\u66f4\u590d\u6742\u2f00 \u4e9b\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5206\u4e3a4\u4e2a\u6b65\u9aa4\uff0c\u5305\u62ec\uff1a \u521d\u59cb\u6807\u8bb0(initial mark): \u6807\u8bb0\u2f00\u4e0bGC Roots\u80fd\u76f4\u63a5\u5173\u8054\u5230\u7684\u5bf9\u8c61\uff0c\u901f\u5ea6\u5f88\u5feb\u3002 \u5e76\u53d1\u6807\u8bb0(concurrent marking): \u8fdb\u2f8fGC RootsTracing\u7684\u8fc7\u7a0b\u3002 \u91cd\u65b0\u6807\u8bb0(remark): \u4e3a\u4e86\u4fee\u6b63\u5e76\u53d1\u6807\u8bb0\u671f\u95f4\u56e0\u2f64\u6237\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u4f5c\u2f7d\u5bfc\u81f4\u6807\u8bb0\u4ea7\u2f63\u53d8\u52a8\u7684\u90a3\u2f00\u90e8\u5206\u5bf9\u8c61\u7684\u6807\u8bb0\u8bb0\u5f55 \u5e76\u53d1\u6e05\u7406(concurrent sweep): \u56de\u6536\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5783\u573e\u533a\u57df\u3002\u548c\u7a0b\u5e8f\u540c\u65f6\u8fdb\u884c\u3002 CMS\u662f\u2f00\u6b3e\u4f18\u79c0\u7684\u6536\u96c6\u5668\uff0c\u6709\u5e76\u53d1\u6536\u96c6\u3001\u4f4e\u505c\u987f\u7684\u4f18\u70b9\uff0c\u4f46\u6709\u4e09\u4e2a\u4e3b\u8981\u7f3a\u70b9\uff1a \u5bf9CPU\u8d44\u6e90\u2fae\u5e38\u654f\u611f\u3002\u5728\u5e76\u53d1\u9636\u6bb5\uff0c\u5b83\u867d\u7136\u4e0d\u4f1a\u5bfc\u81f4\u2f64\u6237\u7ebf\u7a0b\u505c\u987f\uff0c\u4f46\u662f\u4f1a\u56e0\u4e3a\u5360\u2f64\u4e86\u2f00\u90e8\u5206\u7ebf\u7a0b\uff08\u6216\u8005\u8bf4CPU\u8d44\u6e90\uff09\u2f7d\u5bfc\u81f4\u5e94\u2f64\u7a0b\u5e8f\u53d8\u6162\uff0c\u603b\u541e\u5410\u91cf\u4f1a\u964d\u4f4e\u3002 \u2f46\u6cd5\u5904\u7406\u6d6e\u52a8\u5783\u573e\uff08Floating Garbage\uff09\uff0c\u53ef\u80fd\u51fa\u73b0\u201cConcurrent Mode Failure\u201d\u5931\u8d25\u2f7d\u5bfc\u81f4\u53e6\u2f00\u6b21Full GC\u7684\u4ea7\u2f63\u3002\u7531\u4e8eCMS\u5e76\u53d1\u6e05\u7406\u9636\u6bb5\u2f64\u6237\u7ebf\u7a0b\u8fd8\u5728\u8fd0\u2f8f\u7740\uff0c\u4f34\u968f\u7a0b\u5e8f\u8fd0\u2f8f\u2f83\u7136\u5c31\u8fd8\u4f1a\u6709\u65b0\u7684\u5783\u573e\u4e0d\u65ad\u4ea7\u2f63\uff0c\u8fd9\u2f00\u90e8\u5206\u5783\u573e\u51fa\u73b0\u5728\u6807\u8bb0\u8fc7\u7a0b\u4e4b\u540e\uff0cCMS\u2f46\u6cd5\u5728\u5f53\u6b21\u6536\u96c6\u4e2d\u5904\u7406 \u6389\u5b83\u4eec\uff0c\u53ea\u597d\u7559\u5f85\u4e0b\u2f00\u6b21GC\u65f6\u518d\u6e05\u7406\u6389\u3002\u8fd9\u2f00\u90e8\u5206\u5783\u573e\u5c31\u79f0\u4e3a\u201c \u6d6e\u52a8\u5783\u573e \u201d\u3002\u4e5f\u662f\u7531\u4e8e\u5728\u5783\u573e\u6536\u96c6\u9636\u6bb5\u2f64\u6237\u7ebf\u7a0b\u8fd8\u9700\u8981\u8fd0\u2f8f\uff0c\u90a3\u4e5f\u5c31\u8fd8\u9700\u8981\u9884\u7559\u6709 \u2f9c\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9\u2f64\u6237\u7ebf\u7a0b\u4f7f\u2f64\uff0c\u56e0\u6b64CMS\u6536\u96c6\u5668\u4e0d\u80fd\u50cf\u5176\u4ed6\u6536\u96c6\u5668\u90a3\u6837 \u7b49\u5230\u2f7c\u5e74\u4ee3\u2f0f\u4e4e\u5b8c\u5168\u88ab\u586b\u6ee1\u4e86\u518d\u8fdb\u2f8f\u6536\u96c6\uff0c\u9700\u8981\u9884\u7559\u2f00\u90e8\u5206\u7a7a\u95f4\u63d0\u4f9b\u5e76\u53d1\u6536\u96c6\u65f6\u7684\u7a0b\u5e8f\u8fd0\u4f5c\u4f7f\u2f64\u3002\u8981\u662fCMS\u8fd0\u2f8f\u671f\u95f4\u9884\u7559\u7684\u5185\u5b58\u2f46\u6cd5\u6ee1\u2f9c\u7a0b\u5e8f\u9700\u8981\uff0c\u5c31\u4f1a\u51fa\u73b0\u2f00\u6b21\u201cConcurrent Mode Failure\u201d\u5931\u8d25\uff0c\u8fd9\u65f6\u865a\u62df\u673a\u5c06\u542f\u52a8\u540e\u5907\u9884\u6848\uff1a\u4e34\u65f6\u542f\u2f64Serial Old\u6536\u96c6\u5668\u6765\u91cd\u65b0\u8fdb\u2f8f\u2f7c\u5e74\u4ee3\u7684\u5783\u573e\u6536\u96c6\uff0c\u8fd9\u6837\u505c\u987f\u65f6\u95f4\u5c31\u5f88\u957f\u4e86\u3002 \u6709\u2f24\u91cf\u7a7a\u95f4\u788e\u2f5a\u4ea7\u2f63\u3002\u7a7a\u95f4\u788e\u2f5a\u8fc7\u591a\u65f6\uff0c\u5c06\u4f1a\u7ed9\u2f24\u5bf9\u8c61\u5206\u914d\u5e26\u6765\u5f88\u2f24\u2fc7\u70e6\uff0c\u5f80\u5f80\u4f1a\u51fa\u73b0\u2f7c\u5e74\u4ee3\u8fd8\u6709\u5f88\u2f24\u7a7a\u95f4\u5269\u4f59\uff0c\u4f46\u662f\u2f46\u6cd5\u627e\u5230\u2f9c\u591f\u2f24\u7684\u8fde\u7eed\u7a7a\u95f4\u6765\u5206\u914d\u5f53\u524d\u5bf9\u8c61\uff0c\u4e0d\u5f97\u4e0d\u63d0\u524d\u89e6\u53d1\u2f00\u6b21Full GC\u3002 G1\u6536\u96c6\u5668 G1\u6536\u96c6\u5668(Garbage-First Garbage Collector)\u662f\u5f53\u4eca\u6536\u96c6\u5668\u6280\u672f\u53d1\u5c55\u7684\u6700\u524d\u6cbf\u6210\u679c\u4e4b\u4e00\u3002G1\u662f\u4e00\u6b3e\u9762\u5411\u670d\u52a1\u7aef\u5e94\u7528\u7684\u5783\u573e\u6536\u96c6\u5668\u3002HotSpot\u5f00\u53d1\u56e2\u961f\u8d4b\u4e88\u5b83\u7684\u4f7f\u547d\u662f\u5728\u672a\u6765\u66ff\u6362CMS\u3002 \u5b83\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u70b9\uff1a \u5e76\u2f8f\u4e0e\u5e76\u53d1\uff1aG1\u80fd\u5145\u5206\u5229\u2f64\u591aCPU\u3001\u591a\u6838\u73af\u5883\u4e0b\u7684\u786c\u4ef6\u4f18\u52bf\uff0c\u4f7f\u2f64\u591a\u4e2aCPU(CPU\u6216\u8005CPU\u6838\u2f3c)\u6765\u7f29\u77edStop-The-World\u505c\u987f\u7684\u65f6\u95f4\uff0c\u90e8\u5206\u5176\u4ed6\u6536\u96c6\u5668\u539f\u672c\u9700\u8981\u505c\u987fJava\u7ebf\u7a0b\u6267\u2f8f\u7684GC\u52a8\u4f5c\uff0cG1\u6536\u96c6\u5668\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u5e76\u53d1\u7684\u2f45\u5f0f\u8ba9Java\u7a0b\u5e8f\u7ee7\u7eed\u6267\u2f8f\u3002 \u5206\u4ee3\u6536\u96c6\uff1a\u4e0e\u5176\u4ed6\u6536\u96c6\u5668\u2f00\u6837\uff0c\u5206\u4ee3\u6982\u5ff5\u5728G1\u4e2d\u4f9d\u7136\u5f97\u4ee5\u4fdd\u7559\u3002\u867d\u7136G1\u53ef\u4ee5\u4e0d\u9700\u8981\u5176\u4ed6\u6536\u96c6\u5668\u914d\u5408\u5c31\u80fd\u72ec\u2f74\u7ba1\u7406\u6574\u4e2aGC\u5806\uff0c\u4f46\u5b83\u80fd\u591f\u91c7\u2f64\u4e0d\u540c\u7684\u2f45\u5f0f\u53bb\u5904\u7406\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u548c\u5df2\u7ecf\u5b58\u6d3b\u4e86\u2f00\u6bb5\u65f6\u95f4\u3001\u71ac\u8fc7\u591a\u6b21GC\u7684\u65e7\u5bf9 \u8c61\u4ee5\u83b7\u53d6\u66f4\u597d\u7684\u6536\u96c6\u6548\u679c\u3002 \u7a7a\u95f4\u6574\u5408\uff1a\u4e0eCMS\u7684\"\u6807\u8bb0\u2014\u6e05\u7406\"\u7b97\u6cd5\u4e0d\u540c\uff0cG1\u4ece\u6574\u4f53\u6765\u770b\u662f\u57fa\u4e8e\"\u6807\u8bb0\u2014\u6574\u7406\"\u7b97\u6cd5\u5b9e\u73b0\u7684\u6536\u96c6\u5668\uff0c\u4ece\u5c40\u90e8(\u4e24\u4e2aRegion\u4e4b\u95f4)\u4e0a\u6765\u770b\u662f\u57fa\u4e8e\u201c\u590d\u5236\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u4f46\u2f46\u8bba\u5982\u4f55\uff0c\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u610f\u5473\u7740G1\u8fd0\u4f5c\u671f\u95f4\u4e0d\u4f1a\u4ea7\u2f63\u5185\u5b58\u7a7a\u95f4\u788e\u2f5a\uff0c\u6536\u96c6\u540e\u80fd\u63d0\u4f9b\u89c4\u6574\u7684\u53ef\u2f64\u5185\u5b58\u3002\u8fd9\u79cd\u7279\u6027\u6709\u5229\u4e8e\u7a0b\u5e8f\u957f\u65f6\u95f4\u8fd0\u2f8f\uff0c\u5206\u914d\u2f24\u5bf9\u8c61\u65f6\u4e0d\u4f1a\u56e0\u4e3a\u2f46\u6cd5\u627e\u5230\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u2f7d\u63d0\u524d\u89e6\u53d1\u4e0b\u2f00\u6b21GC\u3002 \u53ef\u9884\u6d4b\u7684\u505c\u987f\uff1a\u8fd9\u662fG1\u76f8\u5bf9\u4e8eCMS\u7684\u53e6\u2f00\u2f24\u4f18\u52bf\uff0c\u964d\u4f4e\u505c\u987f\u65f6\u95f4\u662fG1\u548cCMS\u5171\u540c\u7684\u5173\u6ce8\u70b9\uff0c\u4f46G1\u9664\u4e86\u8ffd\u6c42\u4f4e\u505c\u987f\u5916\uff0c\u8fd8\u80fd\u5efa\u2f74\u53ef\u9884\u6d4b\u7684\u505c\u987f\u65f6\u95f4\u6a21\u578b\uff0c\u80fd\u8ba9\u4f7f\u2f64\u8005\u660e\u786e\u6307\u5b9a\u5728\u2f00\u4e2a\u957f\u5ea6\u4e3aM\u6beb\u79d2\u7684\u65f6\u95f4\u2f5a\u6bb5\u5185\uff0c\u6d88\u8017\u5728\u5783\u573e\u6536\u96c6\u4e0a\u7684\u65f6\u95f4\u4e0d\u5f97\u8d85\u8fc7N\u6beb\u79d2\uff0c\u8fd9\u2f0f\u4e4e\u5df2\u7ecf\u662f\u5b9eJava(RTSJ)\u7684\u5783\u573e\u6536\u96c6\u5668\u7684\u7279\u5f81\u4e86\u3002 \u5728G1\u4e4b\u524d\u7684\u5176\u4ed6\u6536\u96c6\u5668\u8fdb\u2f8f\u6536\u96c6\u7684\u8303\u56f4\u90fd\u662f\u6574\u4e2a\u65b0\u2f63\u4ee3\u6216\u8005\u2f7c\u5e74\u4ee3\uff0c \u2f7dG1\u4e0d\u518d\u662f\u8fd9\u6837\u3002\u4f7f\u2f64G1\u6536\u96c6\u5668\u65f6\uff0cJava\u5806\u7684\u5185\u5b58\u5e03\u5c40\u5c31\u4e0e\u5176\u4ed6\u6536\u96c6\u5668\u6709\u5f88\u2f24\u5dee\u522b\uff0c\u5b83\u5c06\u6574\u4e2aJava\u5806\u5212\u5206\u4e3a\u591a\u4e2a\u2f24\u2f29\u76f8\u7b49\u7684\u72ec\u2f74\u533a\u57df(Region)\uff0c \u867d\u7136\u8fd8\u4fdd\u7559\u6709\u65b0\u2f63\u4ee3\u548c\u2f7c\u5e74\u4ee3\u7684\u6982\u5ff5\uff0c\u4f46\u65b0\u2f63\u4ee3\u548c\u2f7c\u5e74\u4ee3\u4e0d\u518d\u662f\u7269\u7406\u9694\u79bb \u7684\u4e86\uff0c\u5b83\u4eec\u90fd\u662f\u2f00\u90e8\u5206Region(\u4e0d\u9700\u8981\u8fde\u7eed)\u7684\u96c6\u5408\u3002 G1 partitions the heap into a set of equally sized heap regions, each a contiguous range of virtual memory. A region is the unit of memory allocation and memory reclamation. At any given time, each of these regions can be empty (light gray), or assigned to a particular generation, young or old. As requests for memory comes in, the memory manager hands out free regions. The memory manager assigns them to a generation and then returns them to the application as free space into which it can allocate itself. The young generation contains eden regions (red) and survivor regions (red with \"S\"). These regions provide the same function as the respective contiguous spaces in other collectors, with the difference that in G1 these regions are typically laid out in a noncontiguous pattern in memory. Old regions (light blue) make up the old generation. Old generation regions may be humongous (light blue with \"H\") for objects that span multiple regions. An application always allocates into a young generation, that is, eden regions, with the exception of humongous, objects that are directly allocated as belonging to the old generation. [ HotSpot Virtual Machine Garbage Collection Tuning Guide ] HotSpot Virtual Machine Garbage Collection Tuning Guide The following list describes the phases, their pauses and the transition between the phases of the G1 garbage collection cycle in detail: Young-only phase: This phase starts with a few young-only collections that promote objects into the old generation. The transition between the young-only phase and the space-reclamation phase starts when the old generation occupancy reaches a certain threshold, the Initiating Heap Occupancy threshold. At this time, G1 schedules an Initial Mark young-only collection instead of a regular young-only collection. Initial Mark : This type of collection starts the marking process in addition to performing a regular young-only collection. Concurrent marking determines all currently reachable (live) objects in the old generation regions to be kept for the following space-reclamation phase. While marking hasn\u2019t completely finished, regular young collections may occur. Marking finishes with two special stop-the-world pauses: Remark and Cleanup. Remark: This pause finalizes the marking itself, and performs global reference processing and class unloading. Between Remark and Cleanup G1 calculates a summary of the liveness information concurrently, which will be finalized and used in the Cleanup pause to update internal data structures. Cleanup: This pause also reclaims completely empty regions, and determines whether a space-reclamation phase will actually follow. If a space-reclamation phase follows, the young-only phase completes with a single young-only collection. Space-reclamation phase: This phase consists of multiple mixed collections that in addition to young generation regions, also evacuate live objects of sets of old generation regions. The space-reclamation phase ends when G1 determines that evacuating more old generation regions wouldn't yield enough free space worth the effort. After space-reclamation, the collection cycle restarts with another young-only phase. As backup, if the application runs out of memory while gathering liveness information, G1 performs an in-place stop-the-world full heap compaction (Full GC) like other collectors. \u7406\u89e3GC\u65e5\u5fd7 \u6211\u4eec\u5148\u770b\u4e00\u6bb5GC\u65e5\u5fd7\uff1a [GC [PSYoungGen: 8987K- 1016K(9216K)] 9984K- 5056K(19456K), 0.0569611 secs] [GC [PSYoungGen: 8038K- 1000K(9216K)] 12078K- 10425K(19456K), 0.0709523 secs][Times\uff1auser=0.01 sys=0.00\uff0creal=0.02 secs] [Full GC [PSYoungGen: 1000K- 0K(9216K)] [ParOldGen: 9425K- 8418K(10240K)] 10425K- 8418K(19456K) [PSPermGen: 9678K- 9675K(21504K)], 0.3152834 secs] [Full GC [PSYoungGen: 8192K- 3583K(9216K)] [ParOldGen: 8418K- 9508K(10240K)] 16610K- 13092K(19456K) [PSPermGen: 9675K- 9675K(22016K)], 0.1913859 secs] [Full GC [PSYoungGen: 7716K- 7702K(9216K)] [ParOldGen: 9508K- 9508K(10240K)] 17224K- 17210K(19456K) [PSPermGen: 9675K- 9675K(21504K)], 0.2769775 secs] [Full GC [PSYoungGen: 7702K- 7702K(9216K)] [ParOldGen: 9508K- 9409K(10240K)] 17210K- 17111K(19456K) [PSPermGen: 9675K- 9675K(21504K)], 0.2491993 secs] /small \u201c[GC\u201d\u548c\u201c[full DC\u201d\u8bf4\u660e\u4e86\u8fd9\u6b21\u5783\u573e\u56de\u6536\u7684\u505c\u987f\u7c7b\u578b\u3002\u5982\u679c\u662f\u8c03\u7528 System.gc() \u65b9\u6cd5\u6240\u89e6\u53d1\u7684\u6536\u96c6\uff0c\u90a3\u4e48\u8fd9\u91cc\u663e\u793a\u201c[Full DC(System)\u201d. [DefNew\u3001[Tenured\u3001[Perm \u8868\u793aGC\u53d1\u751f\u7684\u533a\u57df\u3002[DefNew\u8868\u793a\u65b0\u751f\u4ee3\u4f7f\u7528Serial\u4e32\u884cGC\u5783\u573e\u6536\u96c6\u5668\u3002\u5982\u679c\u662fParNew\u6536\u96c6\u5668\uff0c\u65b0\u751f\u4ee3\u540d\u4e3a\u201c[ParNew\u201d\u3002\u5982\u679c\u91c7\u7528Parallel Scavenge\u6536\u96c6\u5668\uff0c\u90a3\u5b83\u914d\u5957\u7684\u65b0\u751f\u4ee3\u540d\u4e3a\"[PSYoungGen\"\u3002\u5bf9\u4e8e\u8001\u5e74\u4ee3\u548c\u6c38\u4e45\u4ee3\u540c\u7406\u3002 [PSYoungGen: 8987K- 1016K(9216K)] 9984K- 5056K(19456K), 0.0569611 secs]\u4e2d\u540e\u9762\u7684\u6570\u5b57\u542b\u4e49\u662f\uff1aGC\u524d\u8be5\u5185\u5b58\u533a\u57df\u5df2\u4f7f\u7528\u5bb9\u91cf- GC\u540eJava\u5806\u5df2\u4f7f\u7528\u5bb9\u91cf\uff08Java\u5806\u603b\u5bb9\u91cf\uff09\u3002\u540e\u9762\u7684\u65f6\u95f4\u662f\u8be5\u533a\u57dfGC\u6240\u5360\u7528\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002 [Times: user=0.03 sys=0.02, real=0.06 secs] \u8fd9\u91cc\u7684user\u3001sys\u548creal\u4e0eLinux\u7684time\u547d\u4ee4\u6240\u8f93\u51fa\u7684\u65f6\u95f4\u542b\u4e49\u4e00\uff0c\u5206\u522b\u4ee3\u8868\u7528\u6237\u6001\u6d88\u8017\u7684CPU\u65f6\u95f4\uff0c\u5185\u6838\u6001\u6d88\u8017\u7684CPU\u65f6\u95f4\u548c\u64cd\u4f5c\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u6240\u7ecf\u8fc7\u7684\u5899\u949f\u65f6\u95f4\u3002 6 \u5185\u5b58\u5206\u914d\u4e0e\u56de\u6536\u7b56\u7565 Java\u6280\u672f\u4f53\u7cfb\u4e2d\u6240\u63d0\u5021\u7684\u2f83\u52a8\u5185\u5b58\u7ba1\u7406\u6700\u7ec8\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u2f83\u52a8\u5316\u5730\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a\u7ed9\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u4ee5\u53ca\u56de\u6536\u5206\u914d\u7ed9\u5bf9\u8c61\u7684\u5185\u5b58\u3002 \u5bf9\u8c61\u7684\u5185\u5b58\u5206\u914d\uff0c\u5f80\u5927\u65b9\u5411\u8bb2\uff0c\u5c31\u662f\u5728\u5806\u4e0a\u5206\u914d\uff08\u4f46\u4e5f\u53ef\u80fd\u7ecf\u8fc7JIT\u7f16\u8bd1\u540e\u88ab\u62c6\u6563\u4e3a\u6807\u91cf\u7c7b\u578b\u5e76\u95f4\u63a5\u5730\u6808\u4e0a\u5206\u914d\uff09\uff0c\u5bf9\u8c61\u4e3b\u8981\u5206\u914d\u5728\u65b0\u751f\u4ee3\u7684Eden\u533a\u4e0a\uff0c\u5982\u679c\u542f\u52a8\u4e86\u672c\u5730\u7ebf\u7a0b\u5206\u914d\u7f13\u51b2\uff0c\u5c06\u6309\u7ebf\u7a0b\u4f18\u5148\u5728TLAB\u4e0a\u5206\u914d\u3002\u5c11\u6570\u60c5\u51b5\u4e0b\u4e5f\u53ef\u80fd\u4f1a\u76f4\u63a5\u5206\u914d\u5728\u8001\u5e74\u4ee3\u4e2d\uff0c\u5206\u914d\u7684\u89c4\u5219\u5e76\u4e0d\u662f\u767e\u5206\u4e4b\u767e\u56fa\u5b9a\u7684\uff0c\u5176\u7ec6\u8282\u53d6\u51b3\u4e8e\u5f53\u524d\u4f7f\u7528\u7684\u662f\u54ea\u4e00\u79cd\u5783\u573e\u6536\u96c6\u5668\u7ec4\u5408\uff0c\u8fd8\u6709\u865a\u62df\u673a\u4e2d\u4e0e\u5185\u5b58\u76f8\u5173\u7684\u53c2\u6570\u7684\u8bbe\u7f6e\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4f1a\u8bb2\u89e3\u51e0\u6761\u6700\u666e\u904d\u7684\u5185\u5b58\u5206\u914d\u89c4\u5219\uff0c\u5e76\u901a\u8fc7\u4ee3\u7801\u53bb\u9a8c\u8bc1\u8fd9\u4e9b\u89c4\u5219\u3002\u672c\u8282\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u6d4b\u8bd5\u65f6\u4f7f\u7528Client\u6a21\u5f0f\u865a\u62df\u673a\u8fd0\u884c\uff0c\u6ca1\u6709\u624b\u5de5\u6307\u5b9a\u6536\u96c6\u5668\u7ec4\u5408\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u9a8c\u8bc1\u7684\u662f\u5728\u4f7f\u7528Serial/Serial Old\u6536\u96c6\u5668\u4e0b(ParNew/Serial Old\u6536\u96c6\u5668\u7ec4\u5408\u7684\u89c4\u5219\u4e5f\u57fa\u672c\u4e00\u81f4)\u7684\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u7b56\u7565\u3002 \u5bf9\u8c61\u4f18\u5148\u5728Eden\u5206\u914d \u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8c61\u5728\u65b0\u751f\u4ee3Eden\u533a\u4e2d\u5206\u914d\u3002\u5f53Eden\u533a\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u8fdb\u884c\u5206\u914d\u65f6\uff0c\u865a\u62df\u673a\u5c06\u53d1\u8d77\u4e00\u6b21 Minor GC \u3002 \u865a\u62df\u673a\u63d0\u4f9b\u4e86 -Xlog:gc* \u8fd9\u4e2a\u6536\u96c6\u5668\u65e5\u5fd7\u53c2\u6570( -XX\uff1a+PrintGCDetails \u5df2\u8fc7\u65f6)\uff0c\u544a\u8bc9\u865a\u62df\u673a\u5728\u53d1\u751f\u5783\u573e\u6536\u96c6\u884c\u4e3a\u65f6\u6253\u5370\u5185\u5b58\u56de\u6536\u65e5\u5fd7\uff0c\u5e76\u4e14\u5728\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\u8f93\u51fa\u5f53\u524d\u7684\u5185\u5b58\u5404\u533a\u57df\u5206\u914d\u60c5\u51b5\u3002 \u5982\u4e0b\u7684 testAllocation() \u65b9\u6cd5\u4e2d\uff0c\u5c1d\u8bd5\u5206\u914d3\u4e2a2MB\u5927\u5c0f\u548c1\u4e2a4MB\u5927\u5c0f\u7684\u5bf9\u8c61\uff0c\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 -Xms20M \u3001 -Xmx20M \u3001 -Xmn10M \u8fd93\u4e2a\u53c2\u6570\u9650\u5236\u4e86Java\u5806\u5927\u5c0f\u4e3a20MB\uff0c\u4e0d\u53ef\u6269\u5c55\uff0c\u5176\u4e2d10MB\u5206\u914d\u7ed9\u65b0\u751f\u4ee3\uff0c\u5269\u4e0b\u768410MB\u5206\u914d\u7ed9\u8001\u5e74\u4ee3\u3002 -XX:SurvivorRatio=8 \u51b3\u5b9a\u4e86\u65b0\u751f\u4ee3\u4e2dEden\u533a\u4e0e\u4e00\u4e2aSurvivor\u533a\u7684\u7a7a\u95f4\u6bd4\u4f8b\u662f8\u22361\uff0c\u4ece\u8f93\u51fa\u7684\u7ed3\u679c\u4e5f\u53ef\u4ee5\u6e05\u6670\u5730\u770b\u5230\"eden space 8192K\u3001from space 1024K\u3001to space 1024K\"\u7684\u4fe1\u606f\uff0c\u65b0\u751f\u4ee3\u603b\u53ef\u7528\u7a7a\u95f4\u4e3a9216KB\uff08Eden\u533a+1\u4e2aSurvivor\u533a\u7684\u603b\u5bb9\u91cf\uff09\u3002 //VM\u53c2\u6570: -Xms20M -Xmx20M -Xmn10M -Xlog:gc* -XX:SurvivorRatio=8 -XX:+UseSerialGC public class TestAllocation { private static final int _1MB = 1024 * 1024 ; public static void main ( String [] args ) { byte [] allocation1 , allocation2 , allocation3 , allocation4 ; allocation1 = new byte [ 2 * _1MB ]; allocation2 = new byte [ 2 * _1MB ]; allocation3 = new byte [ 2 * _1MB ]; allocation4 = new byte [ 4 * _1MB ]; // \u51fa\u73b0\u4e00\u6b21Minor GC } } \u8fd0\u884c\u7ed3\u679c\uff1a [0.035s][info][gc] Using Serial [0.035s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.317s][info][gc,start ] GC(0) Pause Young (Allocation Failure) [0.327s][info][gc,heap ] GC(0) DefNew: 6657K- 865K(9216K) [0.327s][info][gc,heap ] GC(0) Tenured: 0K- 4096K(10240K) [0.327s][info][gc,metaspace ] GC(0) Metaspace: 4995K- 4995K(1056768K) [0.327s][info][gc ] GC(0) Pause Young (Allocation Failure) 6M- 4M(19M) 9.499ms [0.327s][info][gc,cpu ] GC(0) User=0.01s Sys=0.01s Real=0.01s [0.330s][info][gc,heap,exit ] Heap [0.330s][info][gc,heap,exit ] def new generation total 9216K, used 7301K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.330s][info][gc,heap,exit ] eden space 8192K, 78% used [0x00000007bec00000, 0x00000007bf2491f0, 0x00000007bf400000) [0.330s][info][gc,heap,exit ] from space 1024K, 84% used [0x00000007bf500000, 0x00000007bf5d8568, 0x00000007bf600000) [0.330s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) [0.330s][info][gc,heap,exit ] tenured generation total 10240K, used 4096K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.330s][info][gc,heap,exit ] the space 10240K, 40% used [0x00000007bf600000, 0x00000007bfa00020, 0x00000007bfa00200, 0x00000007c0000000) [0.330s][info][gc,heap,exit ] Metaspace used 5035K, capacity 5096K, committed 5376K, reserved 1056768K [0.330s][info][gc,heap,exit ] class space used 448K, capacity 460K, committed 512K, reserved 1048576K \u6267\u884c testAllocation() \u4e2d\u5206\u914d allocation4 \u5bf9\u8c61\u7684\u8bed\u53e5\u65f6\u4f1a\u53d1\u751f\u4e00\u6b21Minor GC\uff0c\u8fd9\u6b21GC\u7684\u7ed3\u679c\u662f\u65b0\u751f\u4ee36657KB\u53d8\u4e3a865K\uff0c\u800c\u603b\u5185\u5b58\u5360\u7528\u91cf\u5219\u51e0\u4e4e\u6ca1\u6709\u51cf\u5c11\uff08\u56e0\u4e3a allocation1 \u3001 allocation2 \u3001 allocation3 \u4e09\u4e2a\u5bf9\u8c61\u90fd\u662f\u5b58\u6d3b\u7684\uff0c\u865a\u62df\u673a\u51e0\u4e4e\u6ca1\u6709\u627e\u5230\u53ef\u56de\u6536\u7684\u5bf9\u8c61\uff09\u3002\u8fd9\u6b21GC\u53d1\u751f\u7684\u539f\u56e0\u662f\u7ed9 allocation4 \u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\uff0c\u53d1\u73b0Eden\u5df2\u7ecf\u88ab\u5360\u7528\u4e866MB\uff0c\u5269\u4f59\u7a7a\u95f4\u5df2\u4e0d\u8db3\u4ee5\u5206\u914d allocation4 \u6240\u9700\u76844MB\u5185\u5b58\uff0c\u56e0\u6b64\u53d1\u751fMinor GC\u3002GC\u671f\u95f4\u865a\u62df\u673a\u53c8\u53d1\u73b0\u5df2\u6709\u76843\u4e2a2MB\u5927\u5c0f\u7684\u5bf9\u8c61\u5168\u90e8\u65e0\u6cd5\u653e\u5165Survivor\u7a7a\u95f4\uff08Survivor\u7a7a\u95f4\u53ea\u67091MB\u5927\u5c0f\uff09\uff0c\u6240\u4ee5\u53ea\u597d\u901a\u8fc7\u5206\u914d\u62c5\u4fdd\u673a\u5236\u63d0\u524d\u8f6c\u79fb\u5230\u8001\u5e74\u4ee3\u53bb\u3002 \u8fd9\u6b21GC\u7ed3\u675f\u540e\uff0c4MB\u7684 allocation4 \u5bf9\u8c61\u987a\u5229\u5206\u914d\u5728Eden\u4e2d\uff0c\u56e0\u6b64\u7a0b\u5e8f\u6267\u884c\u5b8c\u7684\u7ed3\u679c\u662fEden\u5360\u75284MB\uff08\u88ab allocation4 \u5360\u7528\uff09\uff0cSurvivor\u7a7a\u95f2\uff0c\u8001\u5e74\u4ee3\u88ab\u5360\u75286MB\uff08\u88ab allocation1 \u3001 allocation2 \u3001 allocation3 \u5360\u7528\uff09\u3002\u901a\u8fc7GC\u65e5\u5fd7\u53ef\u4ee5\u8bc1\u5b9e\u8fd9\u4e00\u70b9\u3002 \u5927\u5bf9\u8c61\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3 \u6240\u8c13\u7684\u5927\u5bf9\u8c61\u662f\u6307\uff0c\u9700\u8981\u5927\u91cf\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u7684Java\u5bf9\u8c61\uff0c\u6700\u5178\u578b\u7684\u5927\u5bf9\u8c61\u5c31\u662f\u90a3\u79cd\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u4ee5\u53ca\u6570\u7ec4\u3002\u5927\u5bf9\u8c61\u5bf9\u865a\u62df\u673a\u7684\u5185\u5b58\u5206\u914d\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u574f\u6d88\u606f(\u66ffJava\u865a\u62df\u673a\u62b1\u6028\u4e00\u53e5\uff0c\u6bd4\u9047\u5230\u4e00\u4e2a\u5927\u5bf9\u8c61\u66f4\u52a0\u574f\u7684\u6d88\u606f\u5c31\u662f\u9047\u5230\u4e00\u7fa4\u201c\u671d\u751f\u5915\u706d\u201d\u7684\u201c\u77ed\u547d\u5927\u5bf9\u8c61\u201d\uff0c\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\u5e94\u5f53\u907f\u514d)\uff0c\u7ecf\u5e38\u51fa\u73b0\u5927\u5bf9\u8c61\u5bb9\u6613\u5bfc\u81f4\u5185\u5b58\u8fd8\u6709\u4e0d\u5c11\u7a7a\u95f4\u65f6\u5c31\u63d0\u524d\u89e6\u53d1\u5783\u573e\u6536\u96c6\u4ee5\u83b7\u53d6\u8db3\u591f\u7684\u8fde\u7eed\u7a7a\u95f4\u6765\u201c\u5b89\u7f6e\u201d\u5b83\u4eec\u3002 \u865a\u62df\u673a\u63d0\u4f9b\u4e86\u4e00\u4e2a -XX:PretenureSizeThreshold \u53c2\u6570\uff0c\u4ee4\u5927\u4e8e\u8fd9\u4e2a\u8bbe\u7f6e\u503c\u7684\u5bf9\u8c61\u76f4\u63a5\u5728\u8001\u5e74\u4ee3\u5206\u914d\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u907f\u514d\u5728Eden\u533a\u53ca\u4e24\u4e2aSurvivor\u533a\u4e4b\u95f4\u53d1\u751f\u5927\u91cf\u7684\u5185\u5b58\u590d\u5236\uff08\u590d\u4e60\u4e00\u4e0b\uff1a\u65b0\u751f\u4ee3\u91c7\u7528\u590d\u5236\u7b97\u6cd5\u6536\u96c6\u5185\u5b58\uff09\u3002 \u4e0b\u9762\u7684 testPretenureSizeThreshold() \u65b9\u6cd5\u540e\uff0c\u6211\u4eec\u770b\u5230Eden\u7a7a\u95f4\u51e0\u4e4e\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\u800c\u8001\u5e74\u4ee3\u768410MB\u7a7a\u95f4\u88ab\u4f7f\u7528\u4e8640%\uff0c\u4e5f\u5c31\u662f4MB\u7684 allocation \u5bf9\u8c61\u76f4\u63a5\u5c31\u5206\u914d\u5728\u8001\u5e74\u4ee3\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a PretenureSizeThreshold \u88ab\u8bbe\u7f6e\u4e3a3MB\uff08\u5c31\u662f3145728\uff0c\u8fd9\u4e2a\u53c2\u6570\u4e0d\u80fd\u50cf -Xmx \u4e4b\u7c7b\u7684\u53c2\u6570\u4e00\u6837\u76f4\u63a5\u51993MB\uff09\uff0c\u56e0\u6b64\u8d85\u8fc73MB\u7684\u5bf9\u8c61\u90fd\u4f1a\u76f4\u63a5\u5728\u8001\u5e74\u4ee3\u8fdb\u884c\u5206\u914d\u3002 Note PretenureSizeThreshold \u53c2\u6570\u53ea\u5bf9Serial\u548cParNew\u4e24\u6b3e\u6536\u96c6\u5668\u6709\u6548\uff0cParallel Scavenge\u6536\u96c6\u5668\u4e0d\u8ba4\u8bc6\u8fd9\u4e2a\u53c2\u6570\uff0cParallel Scavenge\u6536\u96c6\u5668\u4e00\u822c\u5e76\u4e0d\u9700\u8981\u8bbe\u7f6e\u3002\u5982\u679c\u9047\u5230\u5fc5\u987b\u4f7f\u7528\u6b64\u53c2\u6570\u7684\u573a\u5408\uff0c\u53ef\u4ee5\u8003\u8651ParNew\u52a0CMS\u7684\u6536\u96c6\u5668\u7ec4\u5408\u3002 /** * VM\u53c2\u6570: -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -Xlog:gc* * -XX:+UseSerialGC -XX:PretenureSizeThreshold=3145728 */ public class TestPretenureSIzeThreadhold { private static final int _1MB = 1024 * 1024 ; public static void main ( String [] args ){ byte [] allocation ; allocation = new byte [ 4 * _1MB ]; //\u76f4\u63a5\u5206\u914d\u5728\u8001\u5e74\u4ee3\u4e2d } } \u8fd0\u884c\u7ed3\u679c\uff1a [0.028s][info][gc] Using Serial [0.029s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.309s][info][gc,heap,exit ] Heap [0.310s][info][gc,heap,exit ] def new generation total 9216K, used 2725K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.310s][info][gc,heap,exit ] eden space 8192K, 33% used [0x00000007bec00000, 0x00000007beea95a0, 0x00000007bf400000) [0.310s][info][gc,heap,exit ] from space 1024K, 0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) [0.310s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000) [0.310s][info][gc,heap,exit ] tenured generation total 10240K, used 4096K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.310s][info][gc,heap,exit ] the space 10240K, 40% used [0x00000007bf600000, 0x00000007bfa00010, 0x00000007bfa00200, 0x00000007c0000000) [0.310s][info][gc,heap,exit ] Metaspace used 4968K, capacity 5032K, committed 5120K, reserved 1056768K [0.310s][info][gc,heap,exit ] class space used 442K, capacity 460K, committed 512K, reserved 1048576K \u957f\u671f\u5b58\u6d3b\u7684\u5bf9\u8c61\u5c06\u8fdb\u5165\u8001\u5e74\u4ee3 \u65e2\u7136\u865a\u62df\u673a\u91c7\u7528\u4e86\u5206\u4ee3\u6536\u96c6\u7684\u601d\u60f3\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u5185\u5b58\u56de\u6536\u65f6\u5c31\u5fc5\u987b\u80fd\u8bc6\u522b\u54ea\u4e9b\u5bf9\u8c61\u5e94\u653e\u5728\u65b0\u751f\u4ee3\uff0c\u54ea\u4e9b\u5bf9\u8c61\u5e94\u653e\u5728\u8001\u5e74\u4ee3\u4e2d\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u70b9\uff0c\u865a\u62df\u673a\u7ed9\u6bcf\u4e2a\u5bf9\u8c61\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5bf9\u8c61\u5e74\u9f84(Age)\u8ba1\u6570\u5668\u3002\u5982\u679c\u5bf9\u8c61\u5728Eden\u51fa\u751f\u5e76\u7ecf\u8fc7\u7b2c\u4e00\u6b21Minor GC\u540e\u4ecd\u7136\u5b58\u6d3b\uff0c\u5e76\u4e14\u80fd\u88abSurvivor\u5bb9\u7eb3\u7684\u8bdd\uff0c\u5c06\u88ab\u79fb\u52a8\u5230Survivor\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4e14\u5bf9\u8c61\u5e74\u9f84\u8bbe\u4e3a1\u3002\u5bf9\u8c61\u5728Survivor\u533a\u4e2d\u6bcf\u201c\u71ac\u8fc7\u201d\u4e00\u6b21Minor GC\uff0c\u5e74\u9f84\u5c31\u589e\u52a01\u5c81\uff0c\u5f53\u5b83\u7684\u5e74\u9f84\u589e\u52a0\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff08\u9ed8\u8ba4\u4e3a15\u5c81\uff09\uff0c\u5c31\u5c06\u4f1a\u88ab\u664b\u5347\u5230\u8001\u5e74\u4ee3\u4e2d\u3002\u5bf9\u8c61\u664b\u5347\u8001\u5e74\u4ee3\u7684\u5e74\u9f84\u9608\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 -XX: C MaxTenuringThreshold /C \u8bbe\u7f6e\u3002 \u8bfb\u8005\u53ef\u4ee5\u8bd5\u8bd5\u5206\u522b\u4ee5 -XX: C MaxTenuringThreshold /C =1 \u548c -XX: C MaxTenuringThreshold /C = 15 \u4e24\u79cd\u8bbe\u7f6e\u6765 testTenuringThreshold() \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u4e2d\u7684 allocation1 \u5bf9\u8c61\u9700\u8981256KB\u5185\u5b58\uff0cSurvivor\u7a7a\u95f4\u53ef\u4ee5\u5bb9\u7eb3\u3002\u5f53 C MaxTenuringThreshold /C =1 \u65f6\uff0c allocation1 \u5bf9\u8c61\u5728\u7b2c\u4e8c\u6b21GC\u53d1\u751f\u65f6\u8fdb\u5165\u8001\u5e74\u4ee3\uff0c\u65b0\u751f\u4ee3\u5df2\u4f7f\u7528\u7684\u5185\u5b58GC\u540e\u975e\u5e38\u5e72\u51c0\u5730\u53d8\u62100KB\u3002\u800c C MaxTenuringThreshold /C =15 \u65f6\uff0c\u7b2c\u4e8c\u6b21GC\u53d1\u751f\u540e\uff0c allocation1 \u5bf9\u8c61\u5219\u8fd8\u7559\u5728\u65b0\u751f\u4ee3Survivor\u7a7a\u95f4\uff0c\u8fd9\u65f6\u65b0\u751f\u4ee3\u4ecd\u7136\u6709404KB\u88ab\u5360\u7528\u3002 /** * VM\u53c2\u6570: -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -XX: C MaxTenuringThreshold /C =1 -Xlog:gc* -XX:+UseSerialGC */ public class testTenuringThreshold { private static final int _1MB = 1024 * 1024 ; @SuppressWarnings ( unused ) public static void main ( String [] args ) { byte [] allocation1 , allocation2 , allocation3 ; allocation1 = new byte [ _1MB / 4 ]; // \u4ec0\u4e48\u65f6\u5019\u8fdb\u5165\u8001\u5e74\u4ee3\u53d6\u51b3\u4e8eXX: C MaxTenuringThreshold /C \u8bbe\u7f6e allocation2 = new byte [ 4 * _1MB ]; allocation3 = new byte [ 4 * _1MB ]; allocation3 = null ; allocation3 = new byte [ 4 * _1MB ]; } } \u4ee5 C MaxTenuringThreshold /C =1 \u53c2\u6570\u6765\u8fd0\u884c\u7684\u7ed3\u679c\uff1a [0.030s][info][gc] Using Serial [0.030s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.276s][info][gc,start ] GC(0) Pause Young (Allocation Failure) [0.288s][info][gc,heap ] GC(0) DefNew: 6913K- 1024K(9216K) [0.288s][info][gc,heap ] GC(0) Tenured: 0K- 4192K(10240K) [0.288s][info][gc,metaspace ] GC(0) Metaspace: 4971K- 4971K(1056768K) [0.288s][info][gc ] GC(0) Pause Young (Allocation Failure) 6M- 5M(19M) 11.650ms [0.288s][info][gc,cpu ] GC(0) User=0.01s Sys=0.01s Real=0.01s [0.291s][info][gc,start ] GC(1) Pause Young (Allocation Failure) [0.295s][info][gc,heap ] GC(1) DefNew: 5204K- 0K(9216K) [0.295s][info][gc,heap ] GC(1) Tenured: 4192K- 5216K(10240K) [0.295s][info][gc,metaspace ] GC(1) Metaspace: 4973K- 4973K(1056768K) [0.295s][info][gc ] GC(1) Pause Young (Allocation Failure) 9M- 5M(19M) 4.475ms [0.295s][info][gc,cpu ] GC(1) User=0.00s Sys=0.00s Real=0.01s [0.297s][info][gc,heap,exit ] Heap [0.297s][info][gc,heap,exit ] def new generation total 9216K, used 4234K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.297s][info][gc,heap,exit ] eden space 8192K, 51% used [0x00000007bec00000, 0x00000007bf0225e0, 0x00000007bf400000) [0.297s][info][gc,heap,exit ] from space 1024K, 0% used [0x00000007bf400000, 0x00000007bf400270, 0x00000007bf500000) [0.297s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000) [0.297s][info][gc,heap,exit ] tenured generation total 10240K, used 5216K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.297s][info][gc,heap,exit ] the space 10240K, 50% used [0x00000007bf600000, 0x00000007bfb18188, 0x00000007bfb18200, 0x00000007c0000000) [0.297s][info][gc,heap,exit ] Metaspace used 4996K, capacity 5032K, committed 5120K, reserved 1056768K [0.297s][info][gc,heap,exit ] class space used 443K, capacity 460K, committed 512K, reserved 1048576K \u4ee5 C MaxTenuringThreshold /C =15 \u53c2\u6570\u6765\u8fd0\u884c\u7684\u7ed3\u679c\uff1a [0.033s][info][gc] Using Serial [0.033s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.322s][info][gc,start ] GC(0) Pause Young (Allocation Failure) [0.333s][info][gc,heap ] GC(0) DefNew: 6913K- 1023K(9216K) [0.333s][info][gc,heap ] GC(0) Tenured: 0K- 4195K(10240K) [0.333s][info][gc,metaspace ] GC(0) Metaspace: 5020K- 5020K(1056768K) [0.333s][info][gc ] GC(0) Pause Young (Allocation Failure) 6M- 5M(19M) 10.971ms [0.333s][info][gc,cpu ] GC(0) User=0.01s Sys=0.01s Real=0.01s [0.336s][info][gc,start ] GC(1) Pause Young (Allocation Failure) [0.341s][info][gc,heap ] GC(1) DefNew: 5204K- 4K(9216K) [0.341s][info][gc,heap ] GC(1) Tenured: 4195K- 5219K(10240K) [0.341s][info][gc,metaspace ] GC(1) Metaspace: 5063K- 5063K(1056768K) [0.341s][info][gc ] GC(1) Pause Young (Allocation Failure) 9M- 5M(19M) 5.095ms [0.341s][info][gc,cpu ] GC(1) User=0.00s Sys=0.00s Real=0.01s [0.343s][info][gc,heap,exit ] Heap [0.343s][info][gc,heap,exit ] def new generation total 9216K, used 4238K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.343s][info][gc,heap,exit ] eden space 8192K, 51% used [0x00000007bec00000, 0x00000007bf0227a8, 0x00000007bf400000) [0.343s][info][gc,heap,exit ] from space 1024K, 0% used [0x00000007bf400000, 0x00000007bf401218, 0x00000007bf500000) [0.343s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000) [0.343s][info][gc,heap,exit ] tenured generation total 10240K, used 5219K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.343s][info][gc,heap,exit ] the space 10240K, 50% used [0x00000007bf600000, 0x00000007bfb18ea0, 0x00000007bfb19000, 0x00000007c0000000) [0.343s][info][gc,heap,exit ] Metaspace used 5074K, capacity 5096K, committed 5376K, reserved 1056768K [0.343s][info][gc,heap,exit ] class space used 456K, capacity 460K, committed 512K, reserved 1048576K \u52a8\u6001\u5bf9\u8c61\u5e74\u9f84\u5224\u5b9a \u4e3a\u4e86\u80fd\u66f4\u597d\u5730\u9002\u5e94\u4e0d\u540c\u7a0b\u5e8f\u7684\u5185\u5b58\u72b6\u51b5\uff0c\u865a\u62df\u673a\u5e76\u4e0d\u662f\u6c38\u8fdc\u5730\u8981\u6c42\u5bf9 \u8c61\u7684\u5e74\u9f84\u5fc5\u987b\u8fbe\u5230\u4e86 MaxTenuringThreshold \u624d\u80fd\u664b\u5347\u2f7c\u5e74\u4ee3\uff0c\u5982\u679c\u5728Survivor\u7a7a\u95f4\u4e2d\u76f8\u540c\u5e74\u9f84\u6240\u6709\u5bf9\u8c61\u2f24\u2f29\u7684\u603b\u548c\u2f24\u4e8eSurvivor\u7a7a\u95f4\u7684\u2f00\u534a\uff0c\u5e74\u9f84\u2f24\u4e8e\u6216\u7b49\u4e8e\u8be5\u5e74\u9f84\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u2f0a\u2f7c\u5e74\u4ee3\uff0c\u2f46\u987b\u7b49\u5230 MaxTenuringThreshold \u4e2d\u8981\u6c42\u7684\u5e74\u9f84\u3002 \u7a7a\u95f4\u5206\u914d\u62c5\u4fdd \u5728\u53d1\u2f63Minor GC\u4e4b\u524d\uff0c\u865a\u62df\u673a\u4f1a\u5148\u68c0\u67e5\u2f7c\u5e74\u4ee3\u6700\u2f24\u53ef\u2f64\u7684\u8fde\u7eed\u7a7a\u95f4\u662f\u5426\u2f24\u4e8e\u65b0\u2f63\u4ee3\u6240\u6709\u5bf9\u8c61\u603b\u7a7a\u95f4\uff0c\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u6210\u2f74\uff0c\u90a3\u4e48Minor GC\u53ef\u4ee5\u786e\u4fdd\u662f\u5b89\u5168\u7684\u3002\u5982\u679c\u4e0d\u6210\u2f74\uff0c\u5219\u865a\u62df\u673a\u4f1a\u67e5\u770bHandlePromotionFailure\u8bbe\u7f6e\u503c\u662f\u5426\u5141\u8bb8\u62c5\u4fdd\u5931\u8d25\u3002\u5982\u679c\u5141\u8bb8\uff0c\u90a3\u4e48\u4f1a\u7ee7\u7eed\u68c0\u67e5\u2f7c\u5e74\u4ee3\u6700\u2f24\u53ef\u2f64\u7684\u8fde\u7eed\u7a7a\u95f4\u662f\u5426\u2f24\u4e8e\u5386\u6b21\u664b\u5347\u5230\u2f7c\u5e74\u4ee3\u5bf9\u8c61\u7684\u5e73\u5747\u2f24\u2f29\uff0c\u5982\u679c\u2f24\u4e8e\uff0c\u5c06\u5c1d\u8bd5\u7740\u8fdb\u2f8f\u2f00\u6b21Minor GC\uff0c\u5c3d\u7ba1\u8fd9\u6b21Minor GC\u662f\u6709\u98ce\u9669\u7684\uff1b\u5982\u679c\u2f29\u4e8e\uff0c\u6216\u8005HandlePromotionFailure\u8bbe\u7f6e\u4e0d\u5141\u8bb8\u5192\u9669\uff0c\u90a3\u8fd9\u65f6\u4e5f\u8981\u6539\u4e3a\u8fdb\u2f8f\u2f00\u6b21Full GC\u3002 Minor/Major/Full GC Minor GC vs Major GC vs Full GC Minor GC\uff1a \u6e05\u7406\u5e74\u8f7b\u4ee3(Young Generation, consisting of Eden and Survivor spaces)\u65f6\u3002 Major GC: \u6e05\u7406\u8001\u5e74\u4ee3(Old generation, also tenured space)\u3002 Full GC: \u6e05\u7406\u6574\u4e2a\u5806\u7a7a\u95f4\u2014\u5305\u62ec\u5e74\u8f7b\u4ee3\u548c\u8001\u5e74\u4ee3\u3002","title":"Chapter 3 : \u5783\u573e\u6536\u96c6\u5668\u4e0e\u5185\u5b58\u5206\u914d\u7b56\u7565"},{"location":"java/ujvm/ch3/#java-3-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 3 - \u5783\u573e\u6536\u96c6\u5668\u4e0e\u5185\u5b58\u5206\u914d\u7b56\u7565"},{"location":"java/ujvm/ch3/#1","text":"\u2f6c\u524d\u5185\u5b58\u7684\u52a8\u6001\u5206\u914d\u4e0e\u5185\u5b58\u56de\u6536\u6280\u672f\u5df2\u7ecf\u76f8\u5f53\u6210\u719f\uff0c\u90a3\u4e3a\u4ec0\u4e48\u6211\u4eec\u8fd8\u8981\u53bb\u4e86\u89e3GC\u548c\u5185\u5b58\u5206\u914d\u5462\uff1f\u7b54\u6848\u5f88\u7b80\u5355\uff1a\u5f53\u9700\u8981\u6392\u67e5\u5404\u79cd\u5185\u5b58\u6ea2\u51fa\u3001\u5185\u5b58\u6cc4\u6f0f\u95ee\u9898\u65f6\uff0c\u5f53\u5783\u573e\u6536\u96c6\u6210\u4e3a\u7cfb\u7edf\u8fbe\u5230\u66f4\u2fbc\u5e76\u53d1\u91cf\u7684\u74f6\u9888\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u8fd9\u4e9b\u201c\u2f83\u52a8\u5316\u201d\u7684\u6280\u672f\u5b9e\u65bd\u5fc5\u8981\u7684\u76d1\u63a7\u548c\u8c03\u8282\u3002 \u76d1\u63a7\u548c\u8c03\u8282\u7684\u5fc5\u8981\u6027\uff1a \u4ee5\u4e0b\u51e0\u4e2a\u533a\u57df\u7684\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u90fd\u5177\u5907\u786e\u5b9a\u6027\uff0c\u4e0d\u9700\u8981\u8fc7\u591a\u8003\u8651\u56de\u6536\u7684\u95ee\u9898\uff0c\u56e0\u4e3a\u65b9\u6cd5\u7ed3\u675f\u6216\u8005\u7ebf\u7a0b\u7ed3\u675f\uff0c\u5185\u5b58\u81ea\u7136\u5c31\u8ddf\u968f\u7740\u56de\u6536\u4e86\u3002 Java\u5185\u5b58\u7684\u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u865a\u62df\u673a\u6808\u3001\u672c\u5730\u65b9\u6cd5\u68083\u4e2a\u533a\u57df\u968f\u7ebf\u7a0b\u800c\u751f\uff0c\u968f\u7ebf\u7a0b\u800c\u706d \u6808\u4e2d\u7684\u6808\u5e27\u968f\u7740\u65b9\u6cd5\u7684\u8fdb\u5165\u548c\u9000\u51fa\u800c\u6709\u6761\u4e0d\u7d0a\u5730\u6267\u884c\u7740\u5165\u6808\u548c\u51fa\u6808\u64cd\u4f5c\u3002\u6bcf\u4e00\u4e2a\u6808\u5e27\u4e2d\u5206\u914d\u591a\u5c11\u5185\u5b58\u57fa\u672c\u4e0a\u662f\u5728\u7c7b\u7ed3\u6784\u786e\u5b9a\u4e0b\u6765\u65f6\u5c31\u5df2\u77e5\u7684 Java\u5806\u548c\u65b9\u6cd5\u533a\u5219\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u63a5\u53e3\u4e2d\u7684\u591a\u4e2a\u5b9e\u73b0\u7c7b\u9700\u8981\u7684\u5185\u5b58\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u7684\u591a\u4e2a\u5b9e\u73b0\u7c7b\u9700\u8981\u7684\u5185\u5b58\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u4e00\u4e2a\u65b9\u6cd5\u4e2d\u7684\u591a\u4e2a\u5206\u652f\u9700\u8981\u7684\u5185\u5b58\u4e5f\u53ef\u80fd\u4e0d\u4e00\u6837\uff0c\u53ea\u6709\u5728\u7a0b\u5e8f\u5904\u4e8e\u8fd0\u884c\u671f\u95f4\u65f6\u624d\u80fd\u77e5\u9053\u4f1a\u521b\u5efa\u54ea\u4e9b\u5bf9\u8c61\uff0c\u8fd9\u90e8\u5206\u5185\u5b58\u7684\u5206\u914d\u548c\u56de\u6536\u662f\u52a8\u6001\u7684\uff0c\u5783\u573e\u6536\u96c6\u5668\u6240\u5173\u6ce8\u7684\u662f\u8fd9\u90e8\u5206\u7684\u5185\u5b58\u3002","title":"1\u6982\u8ff0"},{"location":"java/ujvm/ch3/#2","text":"\u5783\u573e\u6536\u96c6\u5668\u5728\u5bf9\u5806\u8fdb\u2f8f\u56de\u6536\u524d\uff0c\u7b2c\u2f00\u4ef6\u4e8b\u60c5\u5c31\u662f\u8981\u786e\u5b9a\u8fd9\u4e9b\u5bf9\u8c61\u4e4b\u4e2d\u54ea\u4e9b\u8fd8\u201c\u5b58\u6d3b\u201d\u7740\uff0c\u54ea\u4e9b\u5df2\u7ecf\u201c\u6b7b\u53bb\u201d\uff08\u5373\u4e0d\u53ef\u80fd\u518d\u88ab\u4efb\u4f55\u9014\u5f84\u4f7f\u2f64\u7684\u5bf9\u8c61\uff09\u3002","title":"2 \u5bf9\u8c61\u5df2\u6b7b\u5417"},{"location":"java/ujvm/ch3/#_1","text":"\u5f15\u7528\u8ba1\u6570 (Reference Counting)\u7b97\u6cd5\uff1a \u7ed9\u5bf9\u8c61\u4e2d\u6dfb\u52a0\u2f00\u4e2a\u5f15\u2f64\u8ba1\u6570\u5668\uff0c\u6bcf\u5f53\u6709\u2f00\u4e2a\u5730\u2f45\u5f15\u2f64\u5b83\u65f6\uff0c\u8ba1\u6570\u5668\u503c\u5c31\u52a01\uff1b\u5f53\u5f15\u2f64\u5931\u6548\u65f6\uff0c\u8ba1\u6570\u5668\u503c\u5c31\u51cf1\uff1b\u4efb\u4f55\u65f6\u523b\u8ba1\u6570\u5668\u4e3a0\u7684\u5bf9\u8c61\u5c31\u662f\u4e0d\u53ef\u80fd\u518d\u88ab\u4f7f\u2f64\u7684\u3002\u5b83\u7684\u5b9e\u73b0\u7b80\u5355\uff0c\u5224\u5b9a\u6548\u7387\u4e5f\u5f88\u9ad8\uff0c\u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u5b83\u90fd\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u7b97\u6cd5\u3002 \u4f46\u662f\u81f3\u5c11\u4e3b\u6d41\u7684Java\u865a\u62df\u673a\u91cc\u9762\u6ca1\u6709\u9009\u7528\u8ba1\u6570\u7b97\u6cd5\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u5176\u4e2d\u4e3b\u8981\u539f\u56e0\u662f\u5b83\u5f88\u96be\u89e3\u51b3\u5bf9\u8c61\u4e4b\u95f4\u4e92\u76f8\u5faa\u73af\u5f15\u7528\u7684\u95ee\u9898\u3002","title":"\u5f15\u7528\u8ba1\u6570\u7b97\u6cd5"},{"location":"java/ujvm/ch3/#_2","text":"\u5728\u4e3b\u6d41\u7684\u5546\u2f64\u7a0b\u5e8f\u8bed\u2f94(Java\u3001C#\uff0c\u751a\u2f84\u5305\u62ec\u524d\u2faf\u63d0\u5230\u7684\u53e4\u2f7c\u7684Lisp)\u7684\u4e3b\u6d41\u5b9e\u73b0\u4e2d\uff0c\u90fd\u662f\u79f0\u901a\u8fc7 \u53ef\u8fbe\u6027\u5206\u6790 (Reachability Analysis)\u6765\u5224\u5b9a\u5bf9\u8c61\u662f\u5426\u5b58\u6d3b\u7684\u3002 \u901a\u8fc7\u4e00\u7cfb\u5217\u7684\u79f0\u4e3a\"GC Roots\"(Garbage Collection Roots)\u7684\u5bf9\u8c61\u4f5c\u4e3a\u8d77\u59cb\u70b9\uff0c\u4ece\u8fd9\u4e9b\u8282\u70b9\u5f00\u59cb\u5411\u4e0b\u641c\u7d22\uff0c\u641c\u7d22\u6240\u8d70\u8fc7\u7684\u8def\u5f84\u79f0\u4e3a \u5f15\u7528\u94fe (Reference Chain)\uff0c\u5f53\u4e00\u4e2a\u5bf9\u8c61\u5230GC Roots\u6ca1\u6709\u4efb\u4f55\u5f15\u7528\u94fe\u76f8\u8fde\u65f6\uff0c\u5219\u8bc1\u660e\u6b64\u5bf9\u8c61\u662f\u4e0d\u53ef\u7528\u7684\u3002 \u5982\u4e0b\u56fe\u6240\u2f70\uff0c\u5bf9\u8c61object 5\u3001object 6\u3001object 7\u867d\u7136\u4e92 \u76f8\u6709\u5173\u8054\uff0c\u4f46\u662f\u5b83\u4eec\u5230GC Roots\u662f\u4e0d\u53ef\u8fbe\u7684\uff0c\u6240\u4ee5\u5b83\u4eec\u5c06\u4f1a\u88ab\u5224\u5b9a\u4e3a\u662f\u53ef\u56de\u6536\u7684\u5bf9\u8c61\u3002 \u5728Java\u8bed\u8a00\u4e2d\uff0c\u53ef\u4f5c\u4e3aGC Roots\u7684\u5bf9\u8c61\u5305\u62ec\u4e0b\u9762\u51e0\u79cd\uff1a \u865a\u62df\u673a\u6808(\u6808\u5e27\u4e2d\u7684\u672c\u5730\u53d8\u91cf\u8868)\u4e2d\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u65b9\u6cd5\u533a\u4e2d\u7c7b\u9759\u6001\u5c5e\u6027\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u65b9\u6cd5\u533a\u4e2d\u5e38\u91cf\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u672c\u5730\u65b9\u6cd5\u6808\u4e2dJNI(Java\u672c\u5730\u63a5\u53e3)\u5f15\u7528\u7684\u5bf9\u8c61\u3002","title":"\u53ef\u8fbe\u6027\u5206\u6790\u7b97\u6cd5"},{"location":"java/ujvm/ch3/#_3","text":"\u5728JDK1.2\u4e4b\u540e\uff0cJava\u5bf9\u5f15\u7528\u7684\u6982\u5ff5\u8fdb\u884c\u4e86\u6269\u5145\uff0c\u5c06\u5f15\u7528\u5206\u4e3a\u5f3a\u5f15\u7528(Strong Reference)\u3001\u8f6f\u5f15\u7528(Soft Reference)\u3001\u5f31\u5f15\u7528(Weak Reference)\u3001\u865a\u5f15\u7528(Phantom Reference)4\u79cd\uff0c\u8fd94\u79cd\u5f15\u7528\u5f3a\u5ea6\u4f9d\u6b21\u9010\u6e10\u51cf\u5f31\u3002 \u5f3a\u5f15\u7528\u5c31\u662f\u6307\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e4b\u4e2d\u666e\u904d\u5b58\u5728\u7684\uff0c\u7c7b\u4f3c Object obj = new Object () \u8fd9\u7c7b\u7684\u5f15\u7528\uff0c\u53ea\u8981\u5f3a\u5f15\u7528\u8fd8\u5b58\u5728\uff0c\u5783\u573e\u6536\u96c6\u5668\u6c38\u8fdc\u4e0d\u4f1a\u56de\u6536\u6389\u88ab\u5f15\u7528\u7684\u5bf9\u8c61\u3002 \u8f6f\u5f15\u7528\u662f\u7528\u6765\u63cf\u8ff0\u4e00\u4e9b\u8fd8\u6709\u7528\u4f46\u5e76\u975e\u5fc5\u9700\u7684\u5bf9\u8c61\u3002\u5bf9\u4e8e\u8f6f\u5f15\u7528\u5173\u8054\u7740\u7684\u5bf9\u8c61\uff0c\u5728\u7cfb\u7edf\u5c06\u8981\u53d1\u751f\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u4e4b\u524d\uff0c\u5c06\u4f1a\u628a\u8fd9\u4e9b\u5bf9\u8c61\u5217\u8fdb\u56de\u6536\u8303\u56f4\u4e4b\u4e2d\u8fdb\u884c\u7b2c\u4e8c\u6b21\u56de\u6536\u3002\u5982\u679c\u8fd9\u6b21\u56de\u6536\u8fd8\u6ca1\u6709\u8db3\u591f\u7684\u5185\u5b58\uff0c\u624d\u4f1a\u629b\u51fa\u5185\u5b58\u6ea2\u51fa\u5f02\u5e38\u3002\u7528 SoftReference \u7c7b\u6765\u5b9e\u73b0\u8f6f\u5f15\u7528\u3002 \u5f31\u5f15\u7528\u4e5f\u662f\u7528\u6765\u63cf\u8ff0\u975e\u5fc5\u9700\u5bf9\u8c61\u7684\uff0c\u4f46\u662f\u5b83\u7684\u5f3a\u5ea6\u6bd4\u8f6f\u5f15\u7528\u66f4\u5f31\u4e00\u4e9b\uff0c\u88ab\u5f31\u5f15\u7528\u5173\u8054\u7684\u5bf9\u8c61\u53ea\u80fd\u751f\u5b58\u5230\u4e0b\u4e00\u6b21\u5783\u573e\u6536\u96c6\u53d1\u751f\u4e4b\u524d\u3002\u5f53\u5783\u573e\u6536\u96c6\u5668\u5de5\u4f5c\u65f6\uff0c\u65e0\u8bba\u5f53\u524d\u5185\u5b58\u662f\u5426\u8db3\u591f\uff0c\u90fd\u4f1a\u56de\u6536\u6389\u53ea\u88ab\u5f31\u5f15\u7528\u5173\u8054\u7684\u5bf9\u8c61\u3002\u7528 WeakReference \u7c7b\u6765\u5b9e\u73b0\u5f31\u5f15\u7528\u3002 \u865a\u5f15\u7528\u4e5f\u79f0\u4e3a\u5e7d\u7075\u5f15\u7528\u6216\u8005\u5e7b\u5f71\u5f15\u7528\uff0c\u5b83\u662f\u6700\u5f31\u7684\u4e00\u79cd\u5f15\u7528\u5173\u7cfb\u3002\u4e00\u4e2a\u5bf9\u8c61\u662f\u5426\u6709\u865a\u5f15\u7528\u7684\u5b58\u5728\uff0c\u5b8c\u5168\u4e0d\u4f1a\u5bf9\u5176\u751f\u5b58\u65f6\u95f4\u6784\u6210\u5f71\u54cd\uff0c\u4e5f\u65e0\u6cd5\u901a\u8fc7\u865a\u5f15\u7528\u6765\u53d6\u5f97\u4e00\u4e2a\u5bf9\u8c61\u5b9e\u4f8b\u3002\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u8bbe\u7f6e\u865a\u5f15\u7528\u5173\u8054\u7684\u552f\u4e00\u76ee\u7684\u5c31\u662f\u80fd\u5728\u8fd9\u4e2a\u5bf9\u8c61\u88ab\u6536\u96c6\u5668\u56de\u6536\u65f6\u6536\u5230\u4e00\u4e2a\u7cfb\u7edf\u901a\u77e5\u3002\u6709 PhantomReference \u7c7b\u6765\u5b9e\u73b0\u865a\u5f15\u7528\u3002","title":"\u518d\u8c08\u5f15\u7528"},{"location":"java/ujvm/ch3/#_4","text":"\u5373\u4f7f\u5728\u53ef\u8fbe\u6027\u5206\u6790\u7b97\u6cd5\u4e2d\u4e0d\u53ef\u8fbe\u7684\u5bf9\u8c61\uff0c\u4e5f\u5e76\u975e\u662f\u201c\u975e\u6b7b\u4e0d\u53ef\u201d\u7684\uff0c\u8fd9\u65f6\u5019\u5b83\u4eec\u6682\u65f6\u5904\u4e8e\u201c\u7f13\u5211\u201d\u9636\u6bb5\uff0c\u8981\u771f\u6b63\u5ba3\u544a\u4e00\u4e2a\u5bf9\u8c61\u6b7b\u4ea1\uff0c\u81f3\u5c11\u8981\u7ecf\u5386\u4e24\u6b21\u6807\u8bb0\u8fc7\u7a0b\uff1a\u5982\u679c\u5bf9\u8c61\u5728\u8fdb\u884c\u53ef\u8fbe\u6027\u5206\u6790\u540e\u53d1\u73b0\u6ca1\u6709\u4e0eGC Roots\u76f8\u8fde\u63a5\uff0c\u90a3\u4e48\u5b83\u5c06\u4f1a\u88ab\u7b2c\u4e00\u6b21\u6807\u8bb0\u4e14\u8fdb\u884c\u4e00\u6b21\u5237\u9009\uff0c\u5237\u9009\u7684\u6761\u4ef6\u662f\u6b64\u5bf9\u8c61\u662f\u5426\u6709\u5fc5\u8981\u6267\u884c finalize \u65b9\u6cd5\u3002\u5f53\u5bf9\u8c61\u6ca1\u6709\u8986\u76d6 finalize \u65b9\u6cd5\uff0c\u6216\u8005 finalize \u65b9\u6cd5\u5df2\u7ecf\u88ab\u865a\u62df\u673a\u8c03\u7528\u8fc7\uff0c\u865a\u62df\u673a\u5c06\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u89c6\u4e3a\u201c\u6ca1\u6709\u5fc5\u8981\u6267\u884c\u201d\u3002 \u88ab\u5224\u5b9a\u6709\u5fc5\u8981\u6267\u884c finalize \u65b9\u6cd5\u7684\u5bf9\u8c61\u5c06\u88ab\u653e\u7f6e\u4e0eF-Queue\u7684\u961f\u5217\u4e2d\u3002\u5e76\u5728\u7a0d\u540e\u7531\u4e00\u4e2a\u865a\u62df\u673a\u81ea\u52a8\u5efa\u7acb\u7684\u3001\u4f4e\u4f18\u5148\u7ea7\u7684 Finalizer \u7ebf\u7a0b\u53bb\u6267\u884c\u5b83\u3002\u8fd9\u4e2a\u6267\u884c\u5e76\u4e0d\u4f1a\u7b49\u5f85\u5176\u8fd0\u884c\u7ed3\u675f\uff0c\u9632\u6b62\u963b\u585e\u548c\u5d29\u6e83\u3002 finalize() \u65b9\u6cd5\u662f\u5bf9\u8c61\u9003\u8fc7\u6b7b\u4ea1\u547d\u8fd0\u7684\u6700\u540e\u4e00\u6b21\u673a\u4f1a\uff0c\u7a0d\u540eGC\u5c06\u5bf9F-Queue\u4e2d\u7684\u5bf9\u8c61\u8fdb\u884c\u7b2c\u4e8c\u6b21\u5c0f\u89c4\u6a21\u7684\u6807\u8bb0\uff0c\u5982\u679c\u5bf9\u8c61\u8981\u5728 finalize \u65b9\u6cd5\u4e2d\u62ef\u6551\u81ea\u5df1---\u53ea\u8981\u91cd\u65b0\u4e0e\u5f15\u7528\u94fe\u4e0a\u7684\u4efb\u4f55\u4e00\u4e2a\u5bf9\u8c61\u5efa\u7acb\u5173\u8054\u5373\u53ef\u3002\u4f46\u662f\u4e00\u4e2a\u5bf9\u8c61\u7684 finalize() \u65b9\u6cd5\u53ea\u80fd\u88ab\u6267\u884c\u4e00\u6b21\u3002 /** * \u6b64\u4ee3\u7801\u6f14\u793a\u4e86\u4e24\u70b9\uff1a * 1.\u5bf9\u8c61\u53ef\u4ee5\u5728\u88abGC\u65f6\u81ea\u6211\u62ef\u6551\u3002 * 2.\u8fd9\u79cd\u81ea\u6551\u7684\u673a\u4f1a\u53ea\u6709\u4e00\u6b21\uff0c\u56e0\u4e3a\u4e00\u4e2a\u5bf9\u8c61\u7684finalize()\u65b9\u6cd5\u6700\u591a\u53ea\u4f1a\u88ab\u7cfb\u7edf\u81ea\u52a8\u8c03\u7528\u4e00\u6b21 * @author zzm */ public class FinalizeEscapeGC { public static FinalizeEscapeGC SAVE_HOOK = null ; public void isAlive () { System . out . println ( yes, i am still alive :) ); } @Override protected void finalize () throws Throwable { super . finalize (); System . out . println ( finalize method executed! ); FinalizeEscapeGC . SAVE_HOOK = this ; } public static void main ( String [] args ) throws Throwable { SAVE_HOOK = new FinalizeEscapeGC (); //\u5bf9\u8c61\u7b2c\u4e00\u6b21\u6210\u529f\u62ef\u6551\u81ea\u5df1 SAVE_HOOK = null ; System . gc (); // \u56e0\u4e3aFinalizer\u65b9\u6cd5\u4f18\u5148\u7ea7\u5f88\u4f4e\uff0c\u6682\u505c0.5\u79d2\uff0c\u4ee5\u7b49\u5f85\u5b83 Thread . sleep ( 500 ); if ( SAVE_HOOK != null ) { SAVE_HOOK . isAlive (); } else { System . out . println ( no, i am dead :( ); } // \u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u4e0e\u4e0a\u9762\u7684\u5b8c\u5168\u76f8\u540c\uff0c\u4f46\u662f\u8fd9\u6b21\u81ea\u6551\u5374\u5931\u8d25\u4e86 SAVE_HOOK = null ; System . gc (); // \u56e0\u4e3aFinalizer\u65b9\u6cd5\u4f18\u5148\u7ea7\u5f88\u4f4e\uff0c\u6682\u505c0.5\u79d2\uff0c\u4ee5\u7b49\u5f85\u5b83 Thread . sleep ( 500 ); if ( SAVE_HOOK != null ) { SAVE_HOOK . isAlive (); } else { System . out . println ( no, i am dead :( ); } } } // output: // finalize method executed! // yes, i am still alive :) // no, i am dead :( \u2f24\u5bb6\u5c3d\u91cf\u907f\u514d\u4f7f\u2f64 finalize() \u65b9\u6cd5\uff0c\u56e0\u4e3a\u5b83\u4e0d\u662fC/C++\u4e2d\u7684\u6790\u6784\u51fd\u6570\uff0c\u2f7d\u662fJava\u521a\u8bde\u2f63\u65f6\u4e3a\u4e86\u4f7fC/C++\u7a0b\u5e8f\u5458\u66f4\u5bb9\u6613\u63a5\u53d7\u5b83\u6240\u505a\u51fa\u7684\u2f00\u4e2a\u59a5\u534f\u3002\u5b83\u7684\u8fd0\u2f8f\u4ee3\u4ef7\u2fbc\u6602\uff0c\u4e0d\u786e\u5b9a\u6027\u2f24\uff0c\u2f46\u6cd5\u4fdd\u8bc1\u5404\u4e2a\u5bf9\u8c61\u7684\u8c03\u2f64\u987a\u5e8f\u3002","title":"\u751f\u5b58\u8fd8\u662f\u6b7b\u4ea1"},{"location":"java/ujvm/ch3/#_5","text":"\u6c38\u4e45\u4ee3\u7684\u5783\u573e\u56de\u6536\u4e3b\u8981\u56de\u6536\u4e24\u90e8\u5206\u5185\u5bb9\uff1a\u5e9f\u5f03\u5e38\u91cf\u548c\u65e0\u7528\u7684\u7c7b\u3002 \u56de\u6536\u5e9f\u5f03\u5e38\u91cf\u4e0e\u56de\u6536Java\u5806\u4e2d\u7684\u5bf9\u8c61\u975e\u5e38\u7c7b\u4f3c\u3002\u4ee5\u5e38\u91cf\u6c60\u4e2d\u5b57\u9762\u91cf\u7684\u56de\u6536\u4e3a\u4f8b\uff0c\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u5bf9\u8c61\u5f15\u7528\u5e38\u91cf\u6c60\u4e2d\u7684\u5e38\u91cf\uff0c\u4e5f\u6ca1\u6709\u5176\u4ed6\u5730\u65b9\u5f15\u7528\uff0c\u5982\u679c\u8fd9\u662f\u53d1\u751f\u5185\u5b58\u56de\u6536\uff0c\u800c\u4e14\u5fc5\u8981\u7684\u8bdd\uff0c\u5c31\u4f1a\u88ab\u7cfb\u7edf\u6e05\u7406\u51fa\u5e38\u91cf\u6c60\u3002 \u5224\u65ad\u4e00\u4e2a\u7c7b\u662f\u5426\u662f\u201c\u65e0\u7528\u7684\u7c7b\u201d\u7684\u6761\u4ef6\u5219\u76f8\u5bf9\u82db\u523b\u8bb8\u591a\uff0c\u9700\u8981\u6ee1\u8db3\u4e0b\u97623\u4e2a\u6761\u4ef6\uff1a \u8be5\u7c7b\u6240\u6709\u7684\u5b9e\u4f8b\u90fd\u5df2\u7ecf\u88ab\u56de\u6536\uff0c\u4e5f\u5c31\u662fjava\u5806\u4e2d\u4e0d\u5b58\u5728\u8be5\u7c7b\u7684\u4efb\u4f55\u5b9e\u4f8b\u3002 \u52a0\u8f7d\u8be5\u7c7b\u7684 ClassLoader \u5df2\u7ecf\u88ab\u56de\u6536 \u8be5\u7c7b\u5bf9\u5e94\u7684 Class \u5bf9\u8c61\u6ca1\u6709\u5728\u4efb\u4f55\u5730\u65b9\u88ab\u5f15\u7528\uff0c\u65e0\u6cd5\u5728\u4efb\u4f55\u5730\u65b9\u901a\u8fc7\u53cd\u5c04\u8bbf\u95ee\u8be5\u7c7b\u7684\u65b9\u6cd5\u3002 \u865a\u62df\u673a\u53ef\u4ee5\u5bf9\u6ee1\u2f9c\u4e0a\u8ff03\u4e2a\u6761\u4ef6\u7684\u2f46\u2f64\u7c7b\u8fdb\u2f8f\u56de\u6536\uff0c\u8fd9\u2fa5\u8bf4\u7684\u4ec5\u4ec5\u662f\u201c\u53ef\u4ee5\u201d\uff0c\u2f7d\u5e76\u4e0d\u662f\u548c\u5bf9\u8c61\u2f00\u6837\uff0c\u4e0d\u4f7f\u2f64\u4e86\u5c31\u5fc5\u7136\u4f1a\u56de\u6536\u3002 \u662f\u5426\u5bf9\u7c7b\u8fdb\u884c\u56de\u6536\uff0cHotSpot\u865a\u62df\u673a\u63d0\u4f9b\u4e86 -Xnoclassgc \u53c2\u6570\u8fdb\u884c\u63a7\u5236\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 -verbose:class \u4ee5\u53ca -XX:+TraceClassLoading \u3001 -XX:+TraceClassUnLoading \u67e5\u770b\u7c7b\u52a0\u8f7d\u548c\u5378\u8f7d\u4fe1\u606f\uff0c\uff0c\u5176\u4e2d -verbose:class \u548c -XX:+TraceClassLoading \u53ef\u4ee5\u5728Product\u7248\u7684\u865a\u62df\u673a\u4e2d\u4f7f\u7528\uff0c -XX:+TraceClassUnLoading \u53c2\u6570\u9700\u8981FastDebug\u7248\u7684\u865a\u62df\u673a\u652f\u6301\u3002 \u5728\u5927\u91cf\u4f7f\u7528\u53cd\u5c04\u3001\u52a8\u6001\u4ee3\u7406\u3001CGLib\u7b49ByteCode\u6846\u67b6\u3001\u52a8\u6001\u751f\u6210JSP\u4ee5\u53caOSGi\u8fd9\u7c7b\u9891\u7e41\u81ea\u5b9a\u4e49 ClassLoader \u7684\u573a\u666f\u90fd\u9700\u8981\u865a\u62df\u673a\u5177\u5907\u7c7b\u5378\u8f7d\u7684\u529f\u80fd\uff0c\u4ee5\u4fdd\u8bc1\u6c38\u4e45\u4ee3\u4e0d\u4f1a\u6ea2\u51fa\u3002","title":"\u56de\u6536\u65b9\u6cd5\u533a"},{"location":"java/ujvm/ch3/#3","text":"","title":"3 \u5783\u573e\u6536\u96c6\u7b97\u6cd5"},{"location":"java/ujvm/ch3/#-","text":"\u6700\u57fa\u7840\u7684\u6536\u96c6\u7b97\u6cd5\u662f \u6807\u8bb0-\u6e05\u9664 (Mark-Sweep)\u7b97\u6cd5\u3002\u7b97\u6cd5\u5206\u4e3a\u6807\u8bb0\u548c\u6e05\u9664\u4e24\u4e2a\u9636\u6bb5\uff1a\u9996\u5148\u6807\u8bb0\u51fa\u6240\u6709\u9700\u8981\u56de\u6536\u7684\u5bf9\u8c61\uff0c\u5728\u6807\u8bb0\u5b8c\u6210\u540e\u7edf\u4e00\u56de\u6536\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5bf9\u8c61\uff0c\u5b83\u7684\u6807\u8bb0\u8fc7\u7a0b\u5c31\u662f\u4f7f\u7528\u53ef\u8fbe\u6027\u7b97\u6cd5\u8fdb\u884c\u6807\u8bb0\u7684\u3002 \u5b83\u7684\u4e3b\u8981\u4e0d\u2f9c\u6709\u4e24\u4e2a\uff1a \u6548\u7387\u95ee\u9898\uff0c\u6807\u8bb0\u548c\u6e05\u9664\u4e24\u4e2a\u8fc7\u7a0b\u7684\u6548\u7387\u90fd\u4e0d\u9ad8 \u7a7a\u95f4\u95ee\u9898\uff0c\u6807\u8bb0\u6e05\u9664\u4e4b\u540e\u4f1a\u4ea7\u751f\u5927\u91cf\u4e0d\u8fde\u7eed\u7684\u5185\u5b58\u788e\u7247\uff0c\u7a7a\u95f4\u788e\u2f5a\u592a\u591a\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4ee5\u540e\u5728\u7a0b\u5e8f\u8fd0\u2f8f\u8fc7\u7a0b\u4e2d\u9700\u8981\u5206\u914d\u8f83\u2f24\u5bf9\u8c61\u65f6\uff0c\u2f46\u6cd5\u627e\u5230\u2f9c\u591f\u7684\u8fde\u7eed\u5185\u5b58\u2f7d\u4e0d\u5f97\u4e0d\u63d0\u524d\u89e6\u53d1\u53e6\u2f00\u6b21\u5783\u573e\u6536\u96c6\u52a8\u4f5c","title":"\u6807\u8bb0-\u6e05\u9664\u7b97\u6cd5"},{"location":"java/ujvm/ch3/#_6","text":"\u590d\u5236\u7b97\u6cd5 (Copying)\uff1a\u5c06\u53ef\u7528\u5185\u5b58\u6309\u7167\u5bb9\u91cf\u5206\u4e3a\u5927\u5c0f\u76f8\u7b49\u7684\u4e24\u5757\uff0c\u6bcf\u6b21\u53ea\u4f7f\u7528\u5176\u4e2d\u7684\u4e00\u5757\u3002\u5f53\u8fd9\u4e00\u5757\u7684\u5185\u5b58\u7528\u5b8c\u4e86\uff0c\u5c31\u5c06\u8fd8\u5b58\u6d3b\u7740\u7684\u5bf9\u8c61\u590d\u5236\u5230\u53e6\u4e00\u5757\u4e0a\u9762\uff0c\u7136\u540e\u628a\u5df2\u4f7f\u7528\u8fc7\u7684\u5185\u5b58\u7a7a\u95f4\u4e00\u6b21\u6e05\u7406\u6389\u3002\u8fd9\u6837\u4f7f\u5f97\u6bcf\u6b21\u90fd\u662f\u5bf9\u6574\u4e2a\u534a\u533a\u8fdb\u2f8f\u5185\u5b58\u56de\u6536\uff0c\u5185\u5b58\u5206\u914d\u65f6\u4e5f\u5c31\u4e0d\u2f64\u8003\u8651\u5185\u5b58\u788e\u2f5a\u7b49\u590d\u6742\u60c5\u51b5\uff0c\u53ea\u8981\u79fb\u52a8\u5806\u9876\u6307\u9488\uff0c\u6309\u987a\u5e8f\u5206\u914d\u5185\u5b58\u5373\u53ef\uff0c\u5b9e\u73b0\u7b80\u5355\uff0c\u8fd0\u2f8f\u2fbc\u6548\u3002\u53ea\u662f\u8fd9\u79cd\u7b97\u6cd5\u7684\u4ee3\u4ef7\u662f\u5c06\u5185\u5b58\u7f29\u2f29\u4e3a\u4e86\u539f\u6765\u7684\u2f00\u534a\uff0c\u672a\u514d\u592a\u2fbc\u4e86\u2f00\u70b9\u3002\u590d\u5236\u6536\u96c6\u7b97\u6cd5\u5728\u5bf9\u8c61\u5b58\u6d3b\u7387\u8f83\u2fbc\u65f6\u5c31\u8981\u8fdb\u2f8f\u8f83\u591a\u7684\u590d\u5236\u64cd\u4f5c\uff0c\u6548\u7387\u5c06\u4f1a\u53d8\u4f4e\u3002 \u73b0\u5728\u7684\u5546\u4e1a\u865a\u62df\u673a\u90fd\u91c7\u2f64\u8fd9\u79cd\u6536\u96c6\u7b97\u6cd5\u6765\u56de\u6536\u65b0\u2f63\u4ee3\uff0cIBM\u516c\u53f8\u7684\u4e13\u95e8\u7814\u7a76\u8868\u660e\uff0c\u65b0\u2f63\u4ee3\u4e2d\u7684\u5bf9\u8c6198%\u662f\u201c\u671d\u2f63\u5915\u6b7b\u201d\u7684\uff0c\u6240\u4ee5\u5e76\u4e0d\u9700\u8981\u6309\u71671:1\u7684\u2f50\u4f8b\u6765\u5212\u5206\u5185\u5b58\u7a7a\u95f4\uff0c\u2f7d\u662f\u5c06\u5185\u5b58\u5206\u4e3a\u2f00\u5757\u8f83\u2f24\u7684Eden\u7a7a\u95f4\u548c\u4e24\u5757\u8f83\u2f29\u7684Survivor\u7a7a\u95f4\uff0c\u6bcf\u6b21\u4f7f\u2f64Eden\u548c\u5176\u4e2d\u2f00\u5757Survivor\u3002\u5f53\u56de\u6536\u65f6\uff0c\u5c06Eden \u548cSurvivor\u4e2d\u8fd8\u5b58\u6d3b\u7740\u7684\u5bf9\u8c61\u2f00\u6b21\u6027\u5730\u590d\u5236\u5230\u53e6\u5916\u2f00\u5757Survivor\u7a7a\u95f4\u4e0a\uff0c\u6700\u540e\u6e05\u7406\u6389Eden\u548c\u521a\u624d\u2f64\u8fc7\u7684Survivor\u7a7a\u95f4\u3002HotSpot\u865a\u62df\u673a\u9ed8\u8ba4Eden\u548cSurvivor\u7684\u2f24\u2f29\u2f50\u4f8b\u662f8:1\uff0c\u4e5f\u5c31\u662f\u6bcf\u6b21\u65b0\u2f63\u4ee3\u4e2d\u53ef\u2f64\u5185\u5b58\u7a7a\u95f4\u4e3a\u6574\u4e2a\u65b0\u2f63\u4ee3\u5bb9\u91cf\u768490%\uff0880%+10%\uff09\uff0c\u53ea\u670910%\u7684\u5185\u5b58\u4f1a\u88ab\u201c\u6d6a\u8d39\u201d\u3002 \u5f53Survivor\u7a7a\u95f4\u4e0d\u591f\u2f64\u65f6\uff0c\u9700\u8981\u4f9d\u8d56\u5176\u4ed6\u5185\u5b58(\u8fd9\u2fa5\u6307\u2f7c\u5e74\u4ee3)\u8fdb\u2f8f\u5206\u914d\u62c5\u4fdd(Handle Promotion)\u3002\u5982\u679c\u53e6\u5916\u2f00\u5757Survivor\u7a7a\u95f4\u6ca1\u6709\u2f9c\u591f\u7a7a\u95f4\u5b58\u653e\u4e0a\u2f00\u6b21\u65b0\u2f63\u4ee3\u6536\u96c6\u4e0b\u6765\u7684\u5b58\u6d3b\u5bf9\u8c61\u65f6\uff0c\u8fd9\u4e9b\u5bf9\u8c61\u5c06\u76f4\u63a5\u901a\u8fc7\u5206\u914d\u62c5\u4fdd\u673a\u5236\u8fdb\u2f0a\u2f7c\u5e74\u4ee3\u3002","title":"\u590d\u5236\u7b97\u6cd5"},{"location":"java/ujvm/ch3/#-_1","text":"\u6807\u8bb0\u6574\u7406\u7b97\u6cd5 (Mark-Compact)\uff0c\u6807\u8bb0\u8fc7\u7a0b\u4ecd\u7136\u548c\u201c\u6807\u8bb0-\u6e05\u9664\u201d\u4e00\u6837\uff0c\u4f46\u540e\u7eed\u4e0d\u8d70\u4e0d\u662f\u76f4\u63a5\u5bf9\u53ef\u56de\u6536\u5bf9\u8c61\u8fdb\u884c\u6e05\u7406\uff0c\u800c\u662f\u8ba9\u6240\u6709\u5b58\u6d3b\u5bf9\u8c61\u5411\u4e00\u7aef\u79fb\u52a8\uff0c\u7136\u540e\u76f4\u63a5\u6e05\u7406\u6389\u7aef\u8fb9\u754c\u4ee5\u5916\u7684\u5185\u5b58\u3002","title":"\u6807\u8bb0-\u6574\u7406\u7b97\u6cd5"},{"location":"java/ujvm/ch3/#_7","text":"\u5f53\u524d\u5546\u4e1a\u865a\u62df\u673a\u7684\u5783\u573e\u6536\u96c6\u90fd\u91c7\u2f64 \u5206\u4ee3\u6536\u96c6 (Generational Collection)\u7b97\u6cd5\u3002\u6839\u636e\u5bf9\u8c61\u5b58\u6d3b\u5468\u671f\u7684\u4e0d\u540c\u5c06\u5185\u5b58\u5206\u4e3a\u51e0\u5757\u3002\u4e00\u822c\u628aJava\u5806\u5206\u4e3a\u65b0\u751f\u4ee3\u548c\u8001\u5e74\u4ee3\uff0c\u6839\u636e\u5404\u4e2a\u5e74\u4ee3\u7684\u7279\u70b9\u91c7\u7528\u6700\u5408\u9002\u7684\u6536\u96c6\u7b97\u6cd5\u3002\u5728\u65b0\u751f\u4ee3\u4e2d\uff0c\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u65f6\u6709\u5927\u6279\u5bf9\u8c61\u6b7b\u53bb\uff0c\u53ea\u6709\u5c11\u91cf\u5b58\u6d3b\uff0c\u53ef\u4ee5\u9009\u7528\u590d\u5236\u7b97\u6cd5\u3002\u800c\u8001\u5e74\u4ee3\u5bf9\u8c61\u5b58\u6d3b\u7387\u9ad8\uff0c\u4f7f\u7528\u6807\u8bb0\u6e05\u7406\u6216\u8005\u6807\u8bb0\u6574\u7406\u7b97\u6cd5\u3002","title":"\u5206\u4ee3\u6536\u96c6\u7b97\u6cd5"},{"location":"java/ujvm/ch3/#_8","text":"\u8fd9\u662f\u73b0\u6709\u7684\u5546\u7528GC\u5bf9\u5e94\u7684\u7b97\u6cd5\uff1a","title":"\u5f53\u524d\u5546\u7528\u5b9e\u73b0"},{"location":"java/ujvm/ch3/#4-hotspot","text":"\u5728HotSpot\u865a\u62df\u673a\u4e0a\u5b9e\u73b0\u5783\u573e\u56de\u6536\u7b97\u6cd5\u65f6\uff0c\u5fc5\u987b\u5bf9\u7b97\u6cd5\u7684\u6267\u2f8f\u6548\u7387\u6709\u4e25\u683c\u7684\u8003\u91cf\uff0c\u624d\u80fd\u4fdd\u8bc1\u865a\u62df\u673a\u2fbc\u6548\u8fd0\u2f8f\u3002","title":"4 HotSpot\u7684\u7b97\u6cd5\u5b9e\u73b0"},{"location":"java/ujvm/ch3/#_9","text":"\u4ece\u53ef\u8fbe\u6027\u5206\u6790\u4e2d\u4eceGC Roots\u8282\u70b9\u627e\u5f15\u2f64\u94fe\u8fd9\u4e2a\u64cd\u4f5c\u4e3a\u4f8b\uff0c\u53ef\u4f5c\u4e3aGC Roots\u7684\u8282\u70b9\u4e3b\u8981\u5728\u5168\u5c40\u6027\u7684\u5f15\u2f64\uff08\u4f8b\u5982\u5e38\u91cf\u6216\u7c7b\u9759\u6001\u5c5e\u6027\uff09\u4e0e\u6267\u2f8f\u4e0a\u4e0b\u2f42 \uff08\u4f8b\u5982\u6808\u5e27\u4e2d\u7684\u672c\u5730\u53d8\u91cf\u8868\uff09\u4e2d\uff0c\u73b0\u5728\u5f88\u591a\u5e94\u2f64\u4ec5\u4ec5\u2f45\u6cd5\u533a\u5c31\u6709\u6570\u767e\u5146\uff0c \u5982\u679c\u8981\u9010\u4e2a\u68c0\u67e5\u8fd9\u2fa5\u2faf\u7684\u5f15\u2f64\uff0c\u90a3\u4e48\u5fc5\u7136\u4f1a\u6d88\u8017\u5f88\u591a\u65f6\u95f4\u3002 \u53ef\u8fbe\u6027\u5206\u6790\u5bf9\u6267\u2f8f\u65f6\u95f4\u7684\u654f\u611f\u8fd8\u4f53\u73b0\u5728GC\u505c\u987f\u4e0a\uff0c\u56e0\u4e3a\u8fd9\u9879\u5206\u6790\u2f2f\u4f5c\u5fc5\u987b\u5728\u2f00\u4e2a\u80fd\u786e\u4fdd\u2f00\u81f4\u6027\u7684\u5feb\u7167\u4e2d\u8fdb\u2f8f\u2014\u2014\u8fd9\u2fa5 \u2f00\u81f4\u6027 \u7684\u610f\u601d\u662f\u6307\u5728\u6574\u4e2a\u5206\u6790\u671f\u95f4\u6574\u4e2a\u6267\u2f8f\u7cfb\u7edf\u770b\u8d77\u6765\u5c31\u50cf\u88ab\u51bb\u7ed3\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u4e0a\uff0c\u4e0d\u53ef\u4ee5\u51fa\u73b0\u5206\u6790\u8fc7\u7a0b\u4e2d\u5bf9\u8c61\u5f15\u2f64\u5173\u7cfb\u8fd8\u5728\u4e0d\u65ad\u53d8\u5316\u7684\u60c5\u51b5\uff0c\u8be5\u70b9\u4e0d\u6ee1\u2f9c\u7684\u8bdd\u5206\u6790\u7ed3\u679c\u51c6\u786e\u6027\u5c31\u2f46\u6cd5\u5f97\u5230\u4fdd\u8bc1\u3002\u8fd9\u70b9\u662f\u5bfc\u81f4GC\u8fdb\u2f8f\u65f6\u5fc5\u987b\u505c\u987f\u6240\u6709Java\u6267\u2f8f\u7ebf\u7a0b\uff08Sun\u5c06\u8fd9\u4ef6\u4e8b\u60c5\u79f0\u4e3a\u201cStop The World\u201d\uff09\u7684\u5176\u4e2d\u2f00\u4e2a\u91cd\u8981\u539f\u56e0\uff0c\u5373\u4f7f\u662f\u5728\u53f7\u79f0(\u2f0f\u4e4e)\u4e0d\u4f1a\u53d1\u2f63\u505c\u987f\u7684CMS\u6536\u96c6\u5668\u4e2d\uff0c \u679a\u4e3e\u6839\u8282\u70b9\u65f6\u4e5f\u662f\u5fc5\u987b\u8981\u505c\u987f\u7684 \u3002 \u5728HotSpot\u7684\u5b9e\u73b0\u4e2d\uff0c\u662f\u4f7f\u2f64\u2f00\u7ec4\u79f0\u4e3aOopMap\u7684\u6570\u636e\u7ed3\u6784\u6765\u8fbe\u5230\u8fd9\u4e2a\u2f6c\u7684\u7684\uff0c\u5728\u7c7b\u52a0\u8f7d\u5b8c\u6210\u7684 \u65f6\u5019\uff0cHotSpot\u5c31\u628a\u5bf9\u8c61\u5185\u4ec0\u4e48\u504f\u79fb\u91cf\u4e0a\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u6570\u636e\u8ba1\u7b97\u51fa\u6765\uff0c\u5728JIT(\u5373\u65f6\u7f16\u8bd1\u5668)\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u4e5f\u4f1a\u5728\u7279\u5b9a\u7684\u4f4d\u7f6e\u8bb0\u5f55\u4e0b\u6808\u548c\u5bc4\u5b58\u5668\u4e2d\u54ea\u4e9b\u4f4d\u7f6e\u662f\u5f15\u2f64\u3002 \u8fd9\u6837\uff0cGC\u5728\u626b\u63cf\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f97\u77e5\u8fd9\u4e9b\u4fe1\u606f\u4e86\u3002","title":"\u679a\u4e3e\u6839\u8282\u70b9"},{"location":"java/ujvm/ch3/#_10","text":"\u5982\u679c\u4e3a\u6bcf\u2f00\u6761\u6307\u4ee4\u90fd\u2f63\u6210\u5bf9\u5e94\u7684OopMap\uff0c\u90a3\u5c06\u4f1a\u9700\u8981\u2f24\u91cf\u7684\u989d\u5916\u7a7a\u95f4\uff0c\u8fd9\u6837GC\u7684\u7a7a\u95f4\u6210\u672c\u5c06\u4f1a\u53d8\u5f97\u5f88\u2fbc\u3002\u5b9e\u9645\u4e0a\uff0cHotSpot\u6ca1\u6709\u4e3a\u6bcf\u6761\u6307\u4ee4\u90fd\u751f\u6210OopMap\uff0c\u800c\u53ea\u662f\u5728\u201c\u7279\u5b9a\u7684\u4f4d\u7f6e\u201d\u8bb0\u5f55\u4e86\u8fd9\u4e9b\u4fe1\u606f\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u79f0\u4e3a \u5b89\u5168\u70b9 (Safepoint)\uff0c \u5373\u7a0b\u5e8f\u6267\u884c\u65f6\u5e76\u975e\u5728\u6240\u6709\u5730\u65b9\u90fd\u80fd\u505c\u987f\u4e0b\u6765\u5f00\u59cbGC\uff0c\u53ea\u6709\u5728\u5230\u8fbe\u5b89\u5168\u70b9\u65f6\u624d\u80fd\u6682\u505c \u3002Safepoint\u7684\u9009\u5b9a\u65e2\u4e0d\u80fd\u592a\u5c11\u4ee5\u81f3\u4e8e\u8ba9GC\u7b49\u5f85\u65f6\u95f4\u592a\u957f\uff0c\u4e5f\u4e0d\u80fd\u8fc7\u4e8e\u9891\u7e41\u4ee5\u81f4\u4e8e\u8fc7\u5206\u589e\u5927\u8fd0\u884c\u65f6\u7684\u8d1f\u8377\u3002\u6240\u4ee5\uff0c\u5b89\u5168\u70b9\u7684\u9009\u5b9a\u57fa\u672c\u4e0a\u662f\u4ee5\u7a0b\u5e8f\u201c\u662f\u5426\u5177\u6709\u8ba9\u7a0b\u5e8f\u957f\u65f6\u95f4\u6267\u884c\u7684\u7279\u5f81\u201d\u4e3a\u6807\u51c6\u9009\u5b9a\u7684----\u56e0\u4e3a\u6bcf\u6761\u6307\u4ee4\u6267\u884c\u7684\u65f6\u95f4\u90fd\u975e\u5e38\u77ed\u6682\uff0c\u7a0b\u5e8f\u4e0d\u592a\u53ef\u80fd\u56e0\u4e3a\u6307\u4ee4\u6d41\u957f\u5ea6\u592a\u957f\u8fd9\u4e2a\u539f\u56e0\u800c\u8fc7\u957f\u65f6\u95f4\u8fd0\u884c\uff0c\u201c\u957f\u65f6\u95f4\u6267\u884c\u201d\u7684\u6700\u660e\u663e\u7279\u5f81\u5c31\u662f\u6307\u4ee4\u5e8f\u5217\u590d\u7528\uff0c\u4f8b\u5982\u65b9\u6cd5\u8c03\u7528\u3001\u5faa\u73af\u8df3\u8f6c\u3001\u5f02\u5e38\u8df3\u8f6c\u7b49\uff0c\u6240\u4ee5\u5177\u6709\u8fd9\u4e9b\u529f\u80fd\u7684\u6307\u4ee4\u624d\u4f1a\u4ea7\u751fSafepoint\u3002 \u7531\u4e8eGC\u65f6\uff0c\u9700\u8981\u6240\u6709\u7ebf\u7a0b\u5728\u5b89\u5168\u70b9\u4e2d\u65ad\uff0c\u4e00\u79cd\u662f\u62a2\u5360\u5f0f\u4e2d\u65ad\uff1b\u53e6\u4e00\u79cd\u662f\u4e3b\u52a8\u5f0f\u4e2d\u65ad\uff0c\u5176\u4e2d\u62a2\u5360\u5f0f\u4e2d\u65ad\u5c31\u662f\u5728GC\u53d1\u751f\u65f6\uff0c\u9996\u5148\u628a\u6240\u6709\u7ebf\u7a0b\u5168\u90e8\u4e2d\u65ad\uff0c\u5982\u679c\u53d1\u73b0\u6709\u7ebf\u7a0b\u4e0d\u5728\u5b89\u5168\u70b9\uff0c\u5c31\u6062\u590d\u7ebf\u7a0b\uff0c\u8ba9\u5b83\u8dd1\u5230\u5b89\u5168\u70b9\u4e0a\u3002\u73b0\u5728\u2f0f\u4e4e\u6ca1\u6709\u865a\u62df\u673a\u5b9e\u73b0\u91c7\u2f64\u62a2\u5148\u5f0f\u4e2d\u65ad\u6765\u6682\u505c\u7ebf\u7a0b\u4ece\u2f7d\u54cd\u5e94GC\u4e8b\u4ef6\u3002\u800c\u4e3b\u52a8\u5f0f\u4e2d\u65ad\u7684\u601d\u60f3\u4e0d\u662f\u76f4\u63a5\u5bf9\u7ebf\u7a0b\u64cd\u4f5c\uff0c\u4ec5\u4ec5\u662f\u7b80\u5355\u8bbe\u7f6e\u4e00\u4e2a\u6807\u5fd7\uff0c\u5404\u4e2a\u7ebf\u7a0b\u6267\u884c\u65f6\u4e3b\u52a8\u53bb\u8f6e\u8be2\u8fd9\u4e2a\u6807\u5fd7\uff0c\u53d1\u73b0\u4e2d\u65ad\u6807\u5fd7\u4e3a\u771f\u65f6\u5c31\u81ea\u5df1\u4e2d\u65ad\u6302\u8d77\u3002\u8f6e\u8be2\u6807\u5fd7\u7684\u5730\u65b9\u548c\u5b89\u5168\u70b9\u662f\u91cd\u5408\u7684\u3002","title":"\u5b89\u5168\u70b9"},{"location":"java/ujvm/ch3/#_11","text":"\u6709\u4e86\u5b89\u5168\u70b9\u4e4b\u540e\uff0c\u4e5f\u4e0d\u80fd\u5b8c\u7f8e\u5730\u89e3\u51b3GC\u7684\u95ee\u9898\uff0c\u4f46\u5b9e\u9645\u60c5\u51b5\u5374\u4e0d\u4e00\u5b9a\u3002\u5f53\u7a0b\u5e8f\u6ca1\u6709\u88ab\u5206\u914dcpu\u65f6\u95f4\uff0c\u5178\u578b\u7684\u4f8b\u5b50\u5c31\u662f\u7ebf\u7a0b\u5904\u4e8esleep\u6216\u8005blocked\u72b6\u6001\uff0c\u8fd9\u4e2a\u65f6\u5019\u7ebf\u7a0b\u65e0\u6cd5\u54cd\u5e94JVM\u7684\u4e2d\u65ad\u8bf7\u6c42\uff0c\u201c\u8d70\u201d\u5230\u5b89\u5168\u70b9\u6302\u8d77\u3002\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u5c31\u9700\u8981\u5b89\u5168\u533a\u57df\u6765\u89e3\u51b3\u3002 \u5b89\u5168\u533a\u57df (Safe Region)\u662f\u6307\u5728\u4e00\u6bb5\u4ee3\u7801\u7247\u6bb5\u4e4b\u4e2d\uff0c\u5f15\u7528\u5173\u7cfb\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002\u5728\u8fd9\u4e2a\u533a\u57df\u4e2d\u7684\u4efb\u610f\u5730\u65b9\u5f00\u59cbGC\u90fd\u662f\u5b89\u5168\u7684\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628aSafe Region\u770b\u505a\u662f\u88ab\u6269\u5c55\u7684Safepoint\u3002","title":"\u5b89\u5168\u533a\u57df"},{"location":"java/ujvm/ch3/#5","text":"\u5982\u679c\u8bf4\u5783\u573e\u6536\u96c6\u7b97\u6cd5\u662f\u5185\u5b58\u56de\u6536\u7684\u2f45\u6cd5\u8bba\uff0c\u90a3\u4e48\u5783\u573e\u6536\u96c6\u5668\u5c31\u662f\u5185\u5b58\u56de\u6536\u7684\u5177\u4f53\u5b9e\u73b0\u3002\u4e0b\u9762\u662fSun HotSpot\u865a\u62df\u673a1.6\u7248\u672cUpdate22\u5305\u542b\u76847\u79cd\u4f5c\u2f64\u4e8e\u4e0d\u540c\u5206\u4ee3\u7684\u6536\u96c6\u5668\u3002\u5982\u679c\u4e24\u4e2a\u6536\u96c6\u5668\u4e4b\u95f4\u5b58\u5728\u8fde\u7ebf\uff0c\u5c31\u8bf4\u660e\u5b83\u4eec\u53ef\u4ee5\u642d\u914d\u4f7f\u2f64\u3002\u865a\u62df\u673a\u6240\u5904\u7684\u533a\u57df\uff0c\u5219\u8868\u2f70\u5b83\u662f\u5c5e\u4e8e\u65b0\u2f63\u4ee3\u6536\u96c6\u5668\u8fd8\u662f\u2f7c\u5e74\u4ee3\u6536\u96c6\u5668\u3002","title":"5 \u5783\u573e\u6536\u96c6\u5668"},{"location":"java/ujvm/ch3/#serial-collector","text":"Serial\u6536\u96c6\u5668\u662f\u5355\u7ebf\u7a0b\u6536\u96c6\u5668\u3002\u5b83\u8fdb\u884c\u5783\u573e\u6536\u96c6\u65f6\uff0c \u5fc5\u987b\u6682\u505c\u5176\u4ed6\u6240\u6709\u7684\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u76f4\u5230\u5b83\u6536\u96c6\u7ed3\u675f \u3002\u5b9e\u9645\u4e0a\u5230\u73b0\u5728\u4e3a\u2f4c\uff0c\u5b83\u4f9d\u7136\u662f\u865a\u62df\u673a\u8fd0\u2f8f\u5728Client\u6a21\u5f0f\u4e0b\u7684\u9ed8\u8ba4\u65b0\u2f63\u4ee3\u6536\u96c6\u5668\u3002 \u5b83\u6709\u7740\u4f18\u4e8e\u5176\u4ed6\u6536\u96c6\u5668\u7684\u5730\u2f45\uff1a\u7b80\u5355\u2f7d\u2fbc\u6548(\u4e0e\u5176\u4ed6\u6536\u96c6\u5668\u7684\u5355\u7ebf\u7a0b\u2f50)\uff0c\u5bf9\u4e8e\u9650\u5b9a\u5355\u4e2aCPU\u7684\u73af\u5883\u6765\u8bf4\uff0c Serial\u6536\u96c6\u5668\u7531\u4e8e\u6ca1\u6709\u7ebf\u7a0b\u4ea4\u4e92\u7684\u5f00\u9500\uff0c\u4e13\u2f3c\u505a\u5783\u573e\u6536\u96c6\u2f83\u7136\u53ef\u4ee5\u83b7\u5f97\u6700\u2fbc\u7684\u5355\u7ebf\u7a0b\u6536\u96c6\u6548\u7387\u3002\u5728\u2f64\u6237\u7684\u684c\u2faf\u5e94\u2f64\u573a\u666f\u4e2d\uff0c\u5206\u914d\u7ed9\u865a\u62df\u673a\u7ba1\u7406\u7684\u5185\u5b58 \u2f00\u822c\u6765\u8bf4\u4e0d\u4f1a\u5f88\u2f24\uff0c\u6536\u96c6\u2f0f\u2f17\u5146\u751a\u2f84\u2f00\u4e24\u767e\u5146\u7684\u65b0\u2f63\u4ee3(\u4ec5\u4ec5\u662f\u65b0\u2f63\u4ee3\u4f7f\u2f64\u7684\u5185\u5b58\uff0c\u684c\u2faf\u5e94\u2f64\u57fa\u672c\u4e0a\u4e0d\u4f1a\u518d\u2f24\u4e86)\uff0c\u505c\u987f\u65f6\u95f4\u5b8c\u5168\u53ef\u4ee5\u63a7\u5236\u5728\u2f0f\u2f17\u6beb\u79d2\u6700\u591a\u2f00\u767e\u591a\u6beb\u79d2\u4ee5\u5185\uff0c\u53ea\u8981\u4e0d\u662f\u9891\u7e41\u53d1\u2f63\uff0c\u8fd9\u70b9\u505c\u987f\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u6240\u4ee5\uff0cSerial\u6536\u96c6\u5668\u5bf9\u4e8e\u8fd0\u2f8f\u5728Client\u6a21\u5f0f\u4e0b\u7684\u865a\u62df\u673a\u6765\u8bf4\u662f\u2f00\u4e2a\u5f88\u597d\u7684\u9009\u62e9\u3002 Serial/Serial Old\u6536\u96c6\u5668\u8fd0\u2f8f\u2f70\u610f\u56fe","title":"Serial Collector"},{"location":"java/ujvm/ch3/#parnew","text":"ParNew\u6536\u96c6\u5668\u5176\u5b9e\u5c31\u662fSerial\u6536\u96c6\u5668\u7684\u591a\u7ebf\u7a0b\u7248\u672c\uff0c\u9664\u4e86\u4f7f\u2f64\u591a\u6761\u7ebf\u7a0b\u8fdb\u2f8f\u5783\u573e\u6536\u96c6\u4e4b\u5916\uff0c\u5176\u4f59\u2f8f\u4e3a\u90fd\u4e0eSerial\u6536\u96c6\u5668\u5b8c\u5168\u2f00\u6837\u3002 ParNew/Serial Old\u6536\u96c6\u5668\u8fd0\u2f8f\u2f70\u610f\u56fe\uff1a \u3000 \u5b83\u662f\u8bb8\u591a\u8fd0\u2f8f\u5728Server\u6a21\u5f0f\u4e0b\u7684\u865a\u62df\u673a\u4e2d\u2fb8\u9009\u7684\u65b0\u2f63\u4ee3\u6536\u96c6\u5668\uff0c\u5176\u4e2d\u6709\u2f00\u4e2a\u4e0e\u6027\u80fd\u2f46\u5173\u4f46\u5f88\u91cd\u8981\u7684\u539f\u56e0\u662f\uff0c\u9664\u4e86Serial\u6536\u96c6\u5668\u5916\uff0c\u2f6c\u524d\u53ea\u6709\u5b83\u80fd\u4e0eCMS\u6536\u96c6\u5668\u914d\u5408\u2f2f\u4f5c\u3002","title":"ParNew\u6536\u96c6\u5668"},{"location":"java/ujvm/ch3/#parallel-scavenge","text":"Parallel Scavenge\u6536\u96c6\u5668\u7684\u2f6c\u6807\u5219\u662f\u8fbe\u5230\u2f00\u4e2a\u53ef\u63a7\u5236\u7684\u541e\u5410\u91cf(Throughput)\u3002\u6240\u8c13\u541e\u5410\u91cf\u5c31\u662fCPU\u2f64\u4e8e\u8fd0\u2f8f\u2f64\u6237\u4ee3\u7801\u7684\u65f6\u95f4\u4e0eCPU\u603b\u6d88\u8017\u65f6\u95f4\u7684\u2f50\u503c\uff0c\u5373\u541e\u5410\u91cf=\u8fd0\u2f8f\u2f64\u6237\u4ee3\u7801\u65f6\u95f4/\uff08\u8fd0\u2f8f\u2f64\u6237\u4ee3\u7801\u65f6\u95f4+\u5783\u573e\u6536\u96c6\u65f6\u95f4\uff0c\u865a\u62df\u673a\u603b\u5171\u8fd0\u2f8f\u4e86100\u5206\u949f\uff0c\u5176\u4e2d\u5783\u573e\u6536\u96c6\u82b1\u63891\u5206\u949f\uff0c\u90a3\u541e\u5410\u91cf\u5c31\u662f99%\u3002 \u505c\u987f\u65f6\u95f4\u8d8a\u77ed\u5c31\u8d8a\u9002\u5408\u9700\u8981\u4e0e\u2f64\u6237\u4ea4\u4e92\u7684\u7a0b\u5e8f\uff0c\u826f\u597d\u7684\u54cd\u5e94\u901f\u5ea6\u80fd\u63d0\u5347\u2f64\u6237\u4f53\u9a8c\uff0c\u2f7d\u2fbc\u541e\u5410\u91cf\u5219\u53ef\u4ee5\u2fbc\u6548\u7387\u5730\u5229\u2f64CPU\u65f6\u95f4\uff0c\u5c3d\u5feb\u5b8c\u6210\u7a0b\u5e8f\u7684 \u8fd0\u7b97\u4efb\u52a1\uff0c\u4e3b\u8981\u9002\u5408\u5728\u540e\u53f0\u8fd0\u7b97\u2f7d\u4e0d\u9700\u8981\u592a\u591a\u4ea4\u4e92\u7684\u4efb\u52a1\u3002","title":"Parallel Scavenge\u6536\u96c6\u5668"},{"location":"java/ujvm/ch3/#serial-old","text":"Serial Old\u662fSerial\u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\uff0c\u5b83\u540c\u6837\u662f\u5355\u7ebf\u7a0b\u7684\u3002\u4f7f\u7528\u201c\u6807\u8bb0-\u6574\u7406\u201d\u7b97\u6cd5\u3002 \u8fd9\u4e2a\u6536\u96c6\u5668\u7684\u4e3b\u8981\u610f\u4e49\u4e5f\u662f\u5728\u4e8e\u7ed9Client\u6a21\u5f0f\u4e0b\u7684\u865a\u62df\u673a\u4f7f\u2f64\u3002\u5982\u679c\u5728Server\u6a21\u5f0f\u4e0b\uff0c\u90a3\u4e48\u5b83\u4e3b\u8981\u8fd8\u6709\u4e24\u2f24\u2f64\u9014\uff1a\u2f00\u79cd\u2f64\u9014 \u662f\u5728JDK 1.5\u4ee5\u53ca\u4e4b\u524d\u7684\u7248\u672c\u4e2d\u4e0eParallel Scavenge\u6536\u96c6\u5668\u642d\u914d\u4f7f\u2f64 \uff0c\u53e6\u2f00\u79cd\u2f64\u9014\u5c31\u662f\u4f5c\u4e3aCMS\u6536\u96c6\u5668\u7684\u540e\u5907\u9884\u6848\uff0c\u5728\u5e76\u53d1\u6536\u96c6\u53d1\u2f63Concurrent Mode Failure\u65f6\u4f7f\u2f64\u3002 Serial/Serial Old\u6536\u96c6\u5668\u8fd0\u2f8f\u2f70\u610f\u56fe","title":"Serial Old \u6536\u96c6\u5668"},{"location":"java/ujvm/ch3/#parallel-old","text":"Parallel Old\u662fParallel Scavenge\u6536\u96c6\u5668\u7684\u8001\u5e74\u4ee3\u7248\u672c\uff0c\u4f7f\u7528\u591a\u7ebf\u7a0b\u548c\u201c\u6807\u8bb0-\u6574\u7406\u201d\u7b97\u6cd5\u3002\u8fd9\u4e2a\u6536\u96c6\u5668\u662f\u5728JDK1.6\u4e2d\u624d\u5f00\u59cb\u63d0\u4f9b\u7684\u3002","title":"Parallel Old\u6536\u96c6\u5668"},{"location":"java/ujvm/ch3/#cms","text":"CMS(Concurrent Mark Sweep)\u6536\u96c6\u5668\u662f\u2f00\u79cd\u4ee5\u83b7\u53d6\u6700\u77ed\u56de\u6536\u505c\u987f\u65f6\u95f4\u4e3a\u2f6c\u6807\u7684\u6536\u96c6\u5668\u3002\u2f6c\u524d\u5f88\u2f24\u2f00\u90e8\u5206\u7684Java\u5e94\u2f64\u96c6\u4e2d\u5728\u4e92\u8054\u2f79\u7ad9\u6216\u8005B/S\u7cfb\u7edf\u7684\u670d\u52a1\u7aef\u4e0a\uff0c\u8fd9\u7c7b\u5e94\u2f64\u5c24\u5176\u91cd\u89c6\u670d\u52a1\u7684\u54cd\u5e94\u901f\u5ea6\uff0c\u5e0c\u671b\u7cfb\u7edf\u505c\u987f\u65f6\u95f4\u6700\u77ed\uff0c\u4ee5\u7ed9\u2f64\u6237\u5e26\u6765\u8f83\u597d\u7684\u4f53\u9a8c\u3002CMS\u6536\u96c6\u5668\u5c31\u2fae\u5e38\u7b26\u5408\u8fd9\u7c7b\u5e94\u2f64\u7684\u9700\u6c42\u3002 CMS\u6536\u96c6\u5668\u662f\u57fa\u4e8e\u201c\u6807\u8bb0\u2014\u6e05\u9664\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u5b83\u7684\u8fd0\u4f5c\u8fc7\u7a0b\u76f8\u5bf9\u4e8e\u524d\u2faf\u2f0f\u79cd\u6536\u96c6\u5668\u6765\u8bf4\u66f4\u590d\u6742\u2f00 \u4e9b\uff0c\u6574\u4e2a\u8fc7\u7a0b\u5206\u4e3a4\u4e2a\u6b65\u9aa4\uff0c\u5305\u62ec\uff1a \u521d\u59cb\u6807\u8bb0(initial mark): \u6807\u8bb0\u2f00\u4e0bGC Roots\u80fd\u76f4\u63a5\u5173\u8054\u5230\u7684\u5bf9\u8c61\uff0c\u901f\u5ea6\u5f88\u5feb\u3002 \u5e76\u53d1\u6807\u8bb0(concurrent marking): \u8fdb\u2f8fGC RootsTracing\u7684\u8fc7\u7a0b\u3002 \u91cd\u65b0\u6807\u8bb0(remark): \u4e3a\u4e86\u4fee\u6b63\u5e76\u53d1\u6807\u8bb0\u671f\u95f4\u56e0\u2f64\u6237\u7a0b\u5e8f\u7ee7\u7eed\u8fd0\u4f5c\u2f7d\u5bfc\u81f4\u6807\u8bb0\u4ea7\u2f63\u53d8\u52a8\u7684\u90a3\u2f00\u90e8\u5206\u5bf9\u8c61\u7684\u6807\u8bb0\u8bb0\u5f55 \u5e76\u53d1\u6e05\u7406(concurrent sweep): \u56de\u6536\u6240\u6709\u88ab\u6807\u8bb0\u7684\u5783\u573e\u533a\u57df\u3002\u548c\u7a0b\u5e8f\u540c\u65f6\u8fdb\u884c\u3002 CMS\u662f\u2f00\u6b3e\u4f18\u79c0\u7684\u6536\u96c6\u5668\uff0c\u6709\u5e76\u53d1\u6536\u96c6\u3001\u4f4e\u505c\u987f\u7684\u4f18\u70b9\uff0c\u4f46\u6709\u4e09\u4e2a\u4e3b\u8981\u7f3a\u70b9\uff1a \u5bf9CPU\u8d44\u6e90\u2fae\u5e38\u654f\u611f\u3002\u5728\u5e76\u53d1\u9636\u6bb5\uff0c\u5b83\u867d\u7136\u4e0d\u4f1a\u5bfc\u81f4\u2f64\u6237\u7ebf\u7a0b\u505c\u987f\uff0c\u4f46\u662f\u4f1a\u56e0\u4e3a\u5360\u2f64\u4e86\u2f00\u90e8\u5206\u7ebf\u7a0b\uff08\u6216\u8005\u8bf4CPU\u8d44\u6e90\uff09\u2f7d\u5bfc\u81f4\u5e94\u2f64\u7a0b\u5e8f\u53d8\u6162\uff0c\u603b\u541e\u5410\u91cf\u4f1a\u964d\u4f4e\u3002 \u2f46\u6cd5\u5904\u7406\u6d6e\u52a8\u5783\u573e\uff08Floating Garbage\uff09\uff0c\u53ef\u80fd\u51fa\u73b0\u201cConcurrent Mode Failure\u201d\u5931\u8d25\u2f7d\u5bfc\u81f4\u53e6\u2f00\u6b21Full GC\u7684\u4ea7\u2f63\u3002\u7531\u4e8eCMS\u5e76\u53d1\u6e05\u7406\u9636\u6bb5\u2f64\u6237\u7ebf\u7a0b\u8fd8\u5728\u8fd0\u2f8f\u7740\uff0c\u4f34\u968f\u7a0b\u5e8f\u8fd0\u2f8f\u2f83\u7136\u5c31\u8fd8\u4f1a\u6709\u65b0\u7684\u5783\u573e\u4e0d\u65ad\u4ea7\u2f63\uff0c\u8fd9\u2f00\u90e8\u5206\u5783\u573e\u51fa\u73b0\u5728\u6807\u8bb0\u8fc7\u7a0b\u4e4b\u540e\uff0cCMS\u2f46\u6cd5\u5728\u5f53\u6b21\u6536\u96c6\u4e2d\u5904\u7406 \u6389\u5b83\u4eec\uff0c\u53ea\u597d\u7559\u5f85\u4e0b\u2f00\u6b21GC\u65f6\u518d\u6e05\u7406\u6389\u3002\u8fd9\u2f00\u90e8\u5206\u5783\u573e\u5c31\u79f0\u4e3a\u201c \u6d6e\u52a8\u5783\u573e \u201d\u3002\u4e5f\u662f\u7531\u4e8e\u5728\u5783\u573e\u6536\u96c6\u9636\u6bb5\u2f64\u6237\u7ebf\u7a0b\u8fd8\u9700\u8981\u8fd0\u2f8f\uff0c\u90a3\u4e5f\u5c31\u8fd8\u9700\u8981\u9884\u7559\u6709 \u2f9c\u591f\u7684\u5185\u5b58\u7a7a\u95f4\u7ed9\u2f64\u6237\u7ebf\u7a0b\u4f7f\u2f64\uff0c\u56e0\u6b64CMS\u6536\u96c6\u5668\u4e0d\u80fd\u50cf\u5176\u4ed6\u6536\u96c6\u5668\u90a3\u6837 \u7b49\u5230\u2f7c\u5e74\u4ee3\u2f0f\u4e4e\u5b8c\u5168\u88ab\u586b\u6ee1\u4e86\u518d\u8fdb\u2f8f\u6536\u96c6\uff0c\u9700\u8981\u9884\u7559\u2f00\u90e8\u5206\u7a7a\u95f4\u63d0\u4f9b\u5e76\u53d1\u6536\u96c6\u65f6\u7684\u7a0b\u5e8f\u8fd0\u4f5c\u4f7f\u2f64\u3002\u8981\u662fCMS\u8fd0\u2f8f\u671f\u95f4\u9884\u7559\u7684\u5185\u5b58\u2f46\u6cd5\u6ee1\u2f9c\u7a0b\u5e8f\u9700\u8981\uff0c\u5c31\u4f1a\u51fa\u73b0\u2f00\u6b21\u201cConcurrent Mode Failure\u201d\u5931\u8d25\uff0c\u8fd9\u65f6\u865a\u62df\u673a\u5c06\u542f\u52a8\u540e\u5907\u9884\u6848\uff1a\u4e34\u65f6\u542f\u2f64Serial Old\u6536\u96c6\u5668\u6765\u91cd\u65b0\u8fdb\u2f8f\u2f7c\u5e74\u4ee3\u7684\u5783\u573e\u6536\u96c6\uff0c\u8fd9\u6837\u505c\u987f\u65f6\u95f4\u5c31\u5f88\u957f\u4e86\u3002 \u6709\u2f24\u91cf\u7a7a\u95f4\u788e\u2f5a\u4ea7\u2f63\u3002\u7a7a\u95f4\u788e\u2f5a\u8fc7\u591a\u65f6\uff0c\u5c06\u4f1a\u7ed9\u2f24\u5bf9\u8c61\u5206\u914d\u5e26\u6765\u5f88\u2f24\u2fc7\u70e6\uff0c\u5f80\u5f80\u4f1a\u51fa\u73b0\u2f7c\u5e74\u4ee3\u8fd8\u6709\u5f88\u2f24\u7a7a\u95f4\u5269\u4f59\uff0c\u4f46\u662f\u2f46\u6cd5\u627e\u5230\u2f9c\u591f\u2f24\u7684\u8fde\u7eed\u7a7a\u95f4\u6765\u5206\u914d\u5f53\u524d\u5bf9\u8c61\uff0c\u4e0d\u5f97\u4e0d\u63d0\u524d\u89e6\u53d1\u2f00\u6b21Full GC\u3002","title":"CMS\u6536\u96c6\u5668"},{"location":"java/ujvm/ch3/#g1","text":"G1\u6536\u96c6\u5668(Garbage-First Garbage Collector)\u662f\u5f53\u4eca\u6536\u96c6\u5668\u6280\u672f\u53d1\u5c55\u7684\u6700\u524d\u6cbf\u6210\u679c\u4e4b\u4e00\u3002G1\u662f\u4e00\u6b3e\u9762\u5411\u670d\u52a1\u7aef\u5e94\u7528\u7684\u5783\u573e\u6536\u96c6\u5668\u3002HotSpot\u5f00\u53d1\u56e2\u961f\u8d4b\u4e88\u5b83\u7684\u4f7f\u547d\u662f\u5728\u672a\u6765\u66ff\u6362CMS\u3002 \u5b83\u5177\u6709\u4ee5\u4e0b\u51e0\u4e2a\u7279\u70b9\uff1a \u5e76\u2f8f\u4e0e\u5e76\u53d1\uff1aG1\u80fd\u5145\u5206\u5229\u2f64\u591aCPU\u3001\u591a\u6838\u73af\u5883\u4e0b\u7684\u786c\u4ef6\u4f18\u52bf\uff0c\u4f7f\u2f64\u591a\u4e2aCPU(CPU\u6216\u8005CPU\u6838\u2f3c)\u6765\u7f29\u77edStop-The-World\u505c\u987f\u7684\u65f6\u95f4\uff0c\u90e8\u5206\u5176\u4ed6\u6536\u96c6\u5668\u539f\u672c\u9700\u8981\u505c\u987fJava\u7ebf\u7a0b\u6267\u2f8f\u7684GC\u52a8\u4f5c\uff0cG1\u6536\u96c6\u5668\u4ecd\u7136\u53ef\u4ee5\u901a\u8fc7\u5e76\u53d1\u7684\u2f45\u5f0f\u8ba9Java\u7a0b\u5e8f\u7ee7\u7eed\u6267\u2f8f\u3002 \u5206\u4ee3\u6536\u96c6\uff1a\u4e0e\u5176\u4ed6\u6536\u96c6\u5668\u2f00\u6837\uff0c\u5206\u4ee3\u6982\u5ff5\u5728G1\u4e2d\u4f9d\u7136\u5f97\u4ee5\u4fdd\u7559\u3002\u867d\u7136G1\u53ef\u4ee5\u4e0d\u9700\u8981\u5176\u4ed6\u6536\u96c6\u5668\u914d\u5408\u5c31\u80fd\u72ec\u2f74\u7ba1\u7406\u6574\u4e2aGC\u5806\uff0c\u4f46\u5b83\u80fd\u591f\u91c7\u2f64\u4e0d\u540c\u7684\u2f45\u5f0f\u53bb\u5904\u7406\u65b0\u521b\u5efa\u7684\u5bf9\u8c61\u548c\u5df2\u7ecf\u5b58\u6d3b\u4e86\u2f00\u6bb5\u65f6\u95f4\u3001\u71ac\u8fc7\u591a\u6b21GC\u7684\u65e7\u5bf9 \u8c61\u4ee5\u83b7\u53d6\u66f4\u597d\u7684\u6536\u96c6\u6548\u679c\u3002 \u7a7a\u95f4\u6574\u5408\uff1a\u4e0eCMS\u7684\"\u6807\u8bb0\u2014\u6e05\u7406\"\u7b97\u6cd5\u4e0d\u540c\uff0cG1\u4ece\u6574\u4f53\u6765\u770b\u662f\u57fa\u4e8e\"\u6807\u8bb0\u2014\u6574\u7406\"\u7b97\u6cd5\u5b9e\u73b0\u7684\u6536\u96c6\u5668\uff0c\u4ece\u5c40\u90e8(\u4e24\u4e2aRegion\u4e4b\u95f4)\u4e0a\u6765\u770b\u662f\u57fa\u4e8e\u201c\u590d\u5236\u201d\u7b97\u6cd5\u5b9e\u73b0\u7684\uff0c\u4f46\u2f46\u8bba\u5982\u4f55\uff0c\u8fd9\u4e24\u79cd\u7b97\u6cd5\u90fd\u610f\u5473\u7740G1\u8fd0\u4f5c\u671f\u95f4\u4e0d\u4f1a\u4ea7\u2f63\u5185\u5b58\u7a7a\u95f4\u788e\u2f5a\uff0c\u6536\u96c6\u540e\u80fd\u63d0\u4f9b\u89c4\u6574\u7684\u53ef\u2f64\u5185\u5b58\u3002\u8fd9\u79cd\u7279\u6027\u6709\u5229\u4e8e\u7a0b\u5e8f\u957f\u65f6\u95f4\u8fd0\u2f8f\uff0c\u5206\u914d\u2f24\u5bf9\u8c61\u65f6\u4e0d\u4f1a\u56e0\u4e3a\u2f46\u6cd5\u627e\u5230\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u2f7d\u63d0\u524d\u89e6\u53d1\u4e0b\u2f00\u6b21GC\u3002 \u53ef\u9884\u6d4b\u7684\u505c\u987f\uff1a\u8fd9\u662fG1\u76f8\u5bf9\u4e8eCMS\u7684\u53e6\u2f00\u2f24\u4f18\u52bf\uff0c\u964d\u4f4e\u505c\u987f\u65f6\u95f4\u662fG1\u548cCMS\u5171\u540c\u7684\u5173\u6ce8\u70b9\uff0c\u4f46G1\u9664\u4e86\u8ffd\u6c42\u4f4e\u505c\u987f\u5916\uff0c\u8fd8\u80fd\u5efa\u2f74\u53ef\u9884\u6d4b\u7684\u505c\u987f\u65f6\u95f4\u6a21\u578b\uff0c\u80fd\u8ba9\u4f7f\u2f64\u8005\u660e\u786e\u6307\u5b9a\u5728\u2f00\u4e2a\u957f\u5ea6\u4e3aM\u6beb\u79d2\u7684\u65f6\u95f4\u2f5a\u6bb5\u5185\uff0c\u6d88\u8017\u5728\u5783\u573e\u6536\u96c6\u4e0a\u7684\u65f6\u95f4\u4e0d\u5f97\u8d85\u8fc7N\u6beb\u79d2\uff0c\u8fd9\u2f0f\u4e4e\u5df2\u7ecf\u662f\u5b9eJava(RTSJ)\u7684\u5783\u573e\u6536\u96c6\u5668\u7684\u7279\u5f81\u4e86\u3002 \u5728G1\u4e4b\u524d\u7684\u5176\u4ed6\u6536\u96c6\u5668\u8fdb\u2f8f\u6536\u96c6\u7684\u8303\u56f4\u90fd\u662f\u6574\u4e2a\u65b0\u2f63\u4ee3\u6216\u8005\u2f7c\u5e74\u4ee3\uff0c \u2f7dG1\u4e0d\u518d\u662f\u8fd9\u6837\u3002\u4f7f\u2f64G1\u6536\u96c6\u5668\u65f6\uff0cJava\u5806\u7684\u5185\u5b58\u5e03\u5c40\u5c31\u4e0e\u5176\u4ed6\u6536\u96c6\u5668\u6709\u5f88\u2f24\u5dee\u522b\uff0c\u5b83\u5c06\u6574\u4e2aJava\u5806\u5212\u5206\u4e3a\u591a\u4e2a\u2f24\u2f29\u76f8\u7b49\u7684\u72ec\u2f74\u533a\u57df(Region)\uff0c \u867d\u7136\u8fd8\u4fdd\u7559\u6709\u65b0\u2f63\u4ee3\u548c\u2f7c\u5e74\u4ee3\u7684\u6982\u5ff5\uff0c\u4f46\u65b0\u2f63\u4ee3\u548c\u2f7c\u5e74\u4ee3\u4e0d\u518d\u662f\u7269\u7406\u9694\u79bb \u7684\u4e86\uff0c\u5b83\u4eec\u90fd\u662f\u2f00\u90e8\u5206Region(\u4e0d\u9700\u8981\u8fde\u7eed)\u7684\u96c6\u5408\u3002 G1 partitions the heap into a set of equally sized heap regions, each a contiguous range of virtual memory. A region is the unit of memory allocation and memory reclamation. At any given time, each of these regions can be empty (light gray), or assigned to a particular generation, young or old. As requests for memory comes in, the memory manager hands out free regions. The memory manager assigns them to a generation and then returns them to the application as free space into which it can allocate itself. The young generation contains eden regions (red) and survivor regions (red with \"S\"). These regions provide the same function as the respective contiguous spaces in other collectors, with the difference that in G1 these regions are typically laid out in a noncontiguous pattern in memory. Old regions (light blue) make up the old generation. Old generation regions may be humongous (light blue with \"H\") for objects that span multiple regions. An application always allocates into a young generation, that is, eden regions, with the exception of humongous, objects that are directly allocated as belonging to the old generation. [ HotSpot Virtual Machine Garbage Collection Tuning Guide ] HotSpot Virtual Machine Garbage Collection Tuning Guide The following list describes the phases, their pauses and the transition between the phases of the G1 garbage collection cycle in detail: Young-only phase: This phase starts with a few young-only collections that promote objects into the old generation. The transition between the young-only phase and the space-reclamation phase starts when the old generation occupancy reaches a certain threshold, the Initiating Heap Occupancy threshold. At this time, G1 schedules an Initial Mark young-only collection instead of a regular young-only collection. Initial Mark : This type of collection starts the marking process in addition to performing a regular young-only collection. Concurrent marking determines all currently reachable (live) objects in the old generation regions to be kept for the following space-reclamation phase. While marking hasn\u2019t completely finished, regular young collections may occur. Marking finishes with two special stop-the-world pauses: Remark and Cleanup. Remark: This pause finalizes the marking itself, and performs global reference processing and class unloading. Between Remark and Cleanup G1 calculates a summary of the liveness information concurrently, which will be finalized and used in the Cleanup pause to update internal data structures. Cleanup: This pause also reclaims completely empty regions, and determines whether a space-reclamation phase will actually follow. If a space-reclamation phase follows, the young-only phase completes with a single young-only collection. Space-reclamation phase: This phase consists of multiple mixed collections that in addition to young generation regions, also evacuate live objects of sets of old generation regions. The space-reclamation phase ends when G1 determines that evacuating more old generation regions wouldn't yield enough free space worth the effort. After space-reclamation, the collection cycle restarts with another young-only phase. As backup, if the application runs out of memory while gathering liveness information, G1 performs an in-place stop-the-world full heap compaction (Full GC) like other collectors.","title":"G1\u6536\u96c6\u5668"},{"location":"java/ujvm/ch3/#gc","text":"\u6211\u4eec\u5148\u770b\u4e00\u6bb5GC\u65e5\u5fd7\uff1a [GC [PSYoungGen: 8987K- 1016K(9216K)] 9984K- 5056K(19456K), 0.0569611 secs] [GC [PSYoungGen: 8038K- 1000K(9216K)] 12078K- 10425K(19456K), 0.0709523 secs][Times\uff1auser=0.01 sys=0.00\uff0creal=0.02 secs] [Full GC [PSYoungGen: 1000K- 0K(9216K)] [ParOldGen: 9425K- 8418K(10240K)] 10425K- 8418K(19456K) [PSPermGen: 9678K- 9675K(21504K)], 0.3152834 secs] [Full GC [PSYoungGen: 8192K- 3583K(9216K)] [ParOldGen: 8418K- 9508K(10240K)] 16610K- 13092K(19456K) [PSPermGen: 9675K- 9675K(22016K)], 0.1913859 secs] [Full GC [PSYoungGen: 7716K- 7702K(9216K)] [ParOldGen: 9508K- 9508K(10240K)] 17224K- 17210K(19456K) [PSPermGen: 9675K- 9675K(21504K)], 0.2769775 secs] [Full GC [PSYoungGen: 7702K- 7702K(9216K)] [ParOldGen: 9508K- 9409K(10240K)] 17210K- 17111K(19456K) [PSPermGen: 9675K- 9675K(21504K)], 0.2491993 secs] /small \u201c[GC\u201d\u548c\u201c[full DC\u201d\u8bf4\u660e\u4e86\u8fd9\u6b21\u5783\u573e\u56de\u6536\u7684\u505c\u987f\u7c7b\u578b\u3002\u5982\u679c\u662f\u8c03\u7528 System.gc() \u65b9\u6cd5\u6240\u89e6\u53d1\u7684\u6536\u96c6\uff0c\u90a3\u4e48\u8fd9\u91cc\u663e\u793a\u201c[Full DC(System)\u201d. [DefNew\u3001[Tenured\u3001[Perm \u8868\u793aGC\u53d1\u751f\u7684\u533a\u57df\u3002[DefNew\u8868\u793a\u65b0\u751f\u4ee3\u4f7f\u7528Serial\u4e32\u884cGC\u5783\u573e\u6536\u96c6\u5668\u3002\u5982\u679c\u662fParNew\u6536\u96c6\u5668\uff0c\u65b0\u751f\u4ee3\u540d\u4e3a\u201c[ParNew\u201d\u3002\u5982\u679c\u91c7\u7528Parallel Scavenge\u6536\u96c6\u5668\uff0c\u90a3\u5b83\u914d\u5957\u7684\u65b0\u751f\u4ee3\u540d\u4e3a\"[PSYoungGen\"\u3002\u5bf9\u4e8e\u8001\u5e74\u4ee3\u548c\u6c38\u4e45\u4ee3\u540c\u7406\u3002 [PSYoungGen: 8987K- 1016K(9216K)] 9984K- 5056K(19456K), 0.0569611 secs]\u4e2d\u540e\u9762\u7684\u6570\u5b57\u542b\u4e49\u662f\uff1aGC\u524d\u8be5\u5185\u5b58\u533a\u57df\u5df2\u4f7f\u7528\u5bb9\u91cf- GC\u540eJava\u5806\u5df2\u4f7f\u7528\u5bb9\u91cf\uff08Java\u5806\u603b\u5bb9\u91cf\uff09\u3002\u540e\u9762\u7684\u65f6\u95f4\u662f\u8be5\u533a\u57dfGC\u6240\u5360\u7528\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002 [Times: user=0.03 sys=0.02, real=0.06 secs] \u8fd9\u91cc\u7684user\u3001sys\u548creal\u4e0eLinux\u7684time\u547d\u4ee4\u6240\u8f93\u51fa\u7684\u65f6\u95f4\u542b\u4e49\u4e00\uff0c\u5206\u522b\u4ee3\u8868\u7528\u6237\u6001\u6d88\u8017\u7684CPU\u65f6\u95f4\uff0c\u5185\u6838\u6001\u6d88\u8017\u7684CPU\u65f6\u95f4\u548c\u64cd\u4f5c\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u6240\u7ecf\u8fc7\u7684\u5899\u949f\u65f6\u95f4\u3002","title":"\u7406\u89e3GC\u65e5\u5fd7"},{"location":"java/ujvm/ch3/#6","text":"Java\u6280\u672f\u4f53\u7cfb\u4e2d\u6240\u63d0\u5021\u7684\u2f83\u52a8\u5185\u5b58\u7ba1\u7406\u6700\u7ec8\u53ef\u4ee5\u5f52\u7ed3\u4e3a\u2f83\u52a8\u5316\u5730\u89e3\u51b3\u4e86\u4e24\u4e2a\u95ee\u9898\uff1a\u7ed9\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u4ee5\u53ca\u56de\u6536\u5206\u914d\u7ed9\u5bf9\u8c61\u7684\u5185\u5b58\u3002 \u5bf9\u8c61\u7684\u5185\u5b58\u5206\u914d\uff0c\u5f80\u5927\u65b9\u5411\u8bb2\uff0c\u5c31\u662f\u5728\u5806\u4e0a\u5206\u914d\uff08\u4f46\u4e5f\u53ef\u80fd\u7ecf\u8fc7JIT\u7f16\u8bd1\u540e\u88ab\u62c6\u6563\u4e3a\u6807\u91cf\u7c7b\u578b\u5e76\u95f4\u63a5\u5730\u6808\u4e0a\u5206\u914d\uff09\uff0c\u5bf9\u8c61\u4e3b\u8981\u5206\u914d\u5728\u65b0\u751f\u4ee3\u7684Eden\u533a\u4e0a\uff0c\u5982\u679c\u542f\u52a8\u4e86\u672c\u5730\u7ebf\u7a0b\u5206\u914d\u7f13\u51b2\uff0c\u5c06\u6309\u7ebf\u7a0b\u4f18\u5148\u5728TLAB\u4e0a\u5206\u914d\u3002\u5c11\u6570\u60c5\u51b5\u4e0b\u4e5f\u53ef\u80fd\u4f1a\u76f4\u63a5\u5206\u914d\u5728\u8001\u5e74\u4ee3\u4e2d\uff0c\u5206\u914d\u7684\u89c4\u5219\u5e76\u4e0d\u662f\u767e\u5206\u4e4b\u767e\u56fa\u5b9a\u7684\uff0c\u5176\u7ec6\u8282\u53d6\u51b3\u4e8e\u5f53\u524d\u4f7f\u7528\u7684\u662f\u54ea\u4e00\u79cd\u5783\u573e\u6536\u96c6\u5668\u7ec4\u5408\uff0c\u8fd8\u6709\u865a\u62df\u673a\u4e2d\u4e0e\u5185\u5b58\u76f8\u5173\u7684\u53c2\u6570\u7684\u8bbe\u7f6e\u3002 \u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u4f1a\u8bb2\u89e3\u51e0\u6761\u6700\u666e\u904d\u7684\u5185\u5b58\u5206\u914d\u89c4\u5219\uff0c\u5e76\u901a\u8fc7\u4ee3\u7801\u53bb\u9a8c\u8bc1\u8fd9\u4e9b\u89c4\u5219\u3002\u672c\u8282\u4e0b\u9762\u7684\u4ee3\u7801\u5728\u6d4b\u8bd5\u65f6\u4f7f\u7528Client\u6a21\u5f0f\u865a\u62df\u673a\u8fd0\u884c\uff0c\u6ca1\u6709\u624b\u5de5\u6307\u5b9a\u6536\u96c6\u5668\u7ec4\u5408\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u9a8c\u8bc1\u7684\u662f\u5728\u4f7f\u7528Serial/Serial Old\u6536\u96c6\u5668\u4e0b(ParNew/Serial Old\u6536\u96c6\u5668\u7ec4\u5408\u7684\u89c4\u5219\u4e5f\u57fa\u672c\u4e00\u81f4)\u7684\u5185\u5b58\u5206\u914d\u548c\u56de\u6536\u7684\u7b56\u7565\u3002","title":"6 \u5185\u5b58\u5206\u914d\u4e0e\u56de\u6536\u7b56\u7565"},{"location":"java/ujvm/ch3/#eden","text":"\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5bf9\u8c61\u5728\u65b0\u751f\u4ee3Eden\u533a\u4e2d\u5206\u914d\u3002\u5f53Eden\u533a\u6ca1\u6709\u8db3\u591f\u7a7a\u95f4\u8fdb\u884c\u5206\u914d\u65f6\uff0c\u865a\u62df\u673a\u5c06\u53d1\u8d77\u4e00\u6b21 Minor GC \u3002 \u865a\u62df\u673a\u63d0\u4f9b\u4e86 -Xlog:gc* \u8fd9\u4e2a\u6536\u96c6\u5668\u65e5\u5fd7\u53c2\u6570( -XX\uff1a+PrintGCDetails \u5df2\u8fc7\u65f6)\uff0c\u544a\u8bc9\u865a\u62df\u673a\u5728\u53d1\u751f\u5783\u573e\u6536\u96c6\u884c\u4e3a\u65f6\u6253\u5370\u5185\u5b58\u56de\u6536\u65e5\u5fd7\uff0c\u5e76\u4e14\u5728\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\u8f93\u51fa\u5f53\u524d\u7684\u5185\u5b58\u5404\u533a\u57df\u5206\u914d\u60c5\u51b5\u3002 \u5982\u4e0b\u7684 testAllocation() \u65b9\u6cd5\u4e2d\uff0c\u5c1d\u8bd5\u5206\u914d3\u4e2a2MB\u5927\u5c0f\u548c1\u4e2a4MB\u5927\u5c0f\u7684\u5bf9\u8c61\uff0c\u5728\u8fd0\u884c\u65f6\u901a\u8fc7 -Xms20M \u3001 -Xmx20M \u3001 -Xmn10M \u8fd93\u4e2a\u53c2\u6570\u9650\u5236\u4e86Java\u5806\u5927\u5c0f\u4e3a20MB\uff0c\u4e0d\u53ef\u6269\u5c55\uff0c\u5176\u4e2d10MB\u5206\u914d\u7ed9\u65b0\u751f\u4ee3\uff0c\u5269\u4e0b\u768410MB\u5206\u914d\u7ed9\u8001\u5e74\u4ee3\u3002 -XX:SurvivorRatio=8 \u51b3\u5b9a\u4e86\u65b0\u751f\u4ee3\u4e2dEden\u533a\u4e0e\u4e00\u4e2aSurvivor\u533a\u7684\u7a7a\u95f4\u6bd4\u4f8b\u662f8\u22361\uff0c\u4ece\u8f93\u51fa\u7684\u7ed3\u679c\u4e5f\u53ef\u4ee5\u6e05\u6670\u5730\u770b\u5230\"eden space 8192K\u3001from space 1024K\u3001to space 1024K\"\u7684\u4fe1\u606f\uff0c\u65b0\u751f\u4ee3\u603b\u53ef\u7528\u7a7a\u95f4\u4e3a9216KB\uff08Eden\u533a+1\u4e2aSurvivor\u533a\u7684\u603b\u5bb9\u91cf\uff09\u3002 //VM\u53c2\u6570: -Xms20M -Xmx20M -Xmn10M -Xlog:gc* -XX:SurvivorRatio=8 -XX:+UseSerialGC public class TestAllocation { private static final int _1MB = 1024 * 1024 ; public static void main ( String [] args ) { byte [] allocation1 , allocation2 , allocation3 , allocation4 ; allocation1 = new byte [ 2 * _1MB ]; allocation2 = new byte [ 2 * _1MB ]; allocation3 = new byte [ 2 * _1MB ]; allocation4 = new byte [ 4 * _1MB ]; // \u51fa\u73b0\u4e00\u6b21Minor GC } } \u8fd0\u884c\u7ed3\u679c\uff1a [0.035s][info][gc] Using Serial [0.035s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.317s][info][gc,start ] GC(0) Pause Young (Allocation Failure) [0.327s][info][gc,heap ] GC(0) DefNew: 6657K- 865K(9216K) [0.327s][info][gc,heap ] GC(0) Tenured: 0K- 4096K(10240K) [0.327s][info][gc,metaspace ] GC(0) Metaspace: 4995K- 4995K(1056768K) [0.327s][info][gc ] GC(0) Pause Young (Allocation Failure) 6M- 4M(19M) 9.499ms [0.327s][info][gc,cpu ] GC(0) User=0.01s Sys=0.01s Real=0.01s [0.330s][info][gc,heap,exit ] Heap [0.330s][info][gc,heap,exit ] def new generation total 9216K, used 7301K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.330s][info][gc,heap,exit ] eden space 8192K, 78% used [0x00000007bec00000, 0x00000007bf2491f0, 0x00000007bf400000) [0.330s][info][gc,heap,exit ] from space 1024K, 84% used [0x00000007bf500000, 0x00000007bf5d8568, 0x00000007bf600000) [0.330s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) [0.330s][info][gc,heap,exit ] tenured generation total 10240K, used 4096K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.330s][info][gc,heap,exit ] the space 10240K, 40% used [0x00000007bf600000, 0x00000007bfa00020, 0x00000007bfa00200, 0x00000007c0000000) [0.330s][info][gc,heap,exit ] Metaspace used 5035K, capacity 5096K, committed 5376K, reserved 1056768K [0.330s][info][gc,heap,exit ] class space used 448K, capacity 460K, committed 512K, reserved 1048576K \u6267\u884c testAllocation() \u4e2d\u5206\u914d allocation4 \u5bf9\u8c61\u7684\u8bed\u53e5\u65f6\u4f1a\u53d1\u751f\u4e00\u6b21Minor GC\uff0c\u8fd9\u6b21GC\u7684\u7ed3\u679c\u662f\u65b0\u751f\u4ee36657KB\u53d8\u4e3a865K\uff0c\u800c\u603b\u5185\u5b58\u5360\u7528\u91cf\u5219\u51e0\u4e4e\u6ca1\u6709\u51cf\u5c11\uff08\u56e0\u4e3a allocation1 \u3001 allocation2 \u3001 allocation3 \u4e09\u4e2a\u5bf9\u8c61\u90fd\u662f\u5b58\u6d3b\u7684\uff0c\u865a\u62df\u673a\u51e0\u4e4e\u6ca1\u6709\u627e\u5230\u53ef\u56de\u6536\u7684\u5bf9\u8c61\uff09\u3002\u8fd9\u6b21GC\u53d1\u751f\u7684\u539f\u56e0\u662f\u7ed9 allocation4 \u5206\u914d\u5185\u5b58\u7684\u65f6\u5019\uff0c\u53d1\u73b0Eden\u5df2\u7ecf\u88ab\u5360\u7528\u4e866MB\uff0c\u5269\u4f59\u7a7a\u95f4\u5df2\u4e0d\u8db3\u4ee5\u5206\u914d allocation4 \u6240\u9700\u76844MB\u5185\u5b58\uff0c\u56e0\u6b64\u53d1\u751fMinor GC\u3002GC\u671f\u95f4\u865a\u62df\u673a\u53c8\u53d1\u73b0\u5df2\u6709\u76843\u4e2a2MB\u5927\u5c0f\u7684\u5bf9\u8c61\u5168\u90e8\u65e0\u6cd5\u653e\u5165Survivor\u7a7a\u95f4\uff08Survivor\u7a7a\u95f4\u53ea\u67091MB\u5927\u5c0f\uff09\uff0c\u6240\u4ee5\u53ea\u597d\u901a\u8fc7\u5206\u914d\u62c5\u4fdd\u673a\u5236\u63d0\u524d\u8f6c\u79fb\u5230\u8001\u5e74\u4ee3\u53bb\u3002 \u8fd9\u6b21GC\u7ed3\u675f\u540e\uff0c4MB\u7684 allocation4 \u5bf9\u8c61\u987a\u5229\u5206\u914d\u5728Eden\u4e2d\uff0c\u56e0\u6b64\u7a0b\u5e8f\u6267\u884c\u5b8c\u7684\u7ed3\u679c\u662fEden\u5360\u75284MB\uff08\u88ab allocation4 \u5360\u7528\uff09\uff0cSurvivor\u7a7a\u95f2\uff0c\u8001\u5e74\u4ee3\u88ab\u5360\u75286MB\uff08\u88ab allocation1 \u3001 allocation2 \u3001 allocation3 \u5360\u7528\uff09\u3002\u901a\u8fc7GC\u65e5\u5fd7\u53ef\u4ee5\u8bc1\u5b9e\u8fd9\u4e00\u70b9\u3002","title":"\u5bf9\u8c61\u4f18\u5148\u5728Eden\u5206\u914d"},{"location":"java/ujvm/ch3/#_12","text":"\u6240\u8c13\u7684\u5927\u5bf9\u8c61\u662f\u6307\uff0c\u9700\u8981\u5927\u91cf\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u7684Java\u5bf9\u8c61\uff0c\u6700\u5178\u578b\u7684\u5927\u5bf9\u8c61\u5c31\u662f\u90a3\u79cd\u5f88\u957f\u7684\u5b57\u7b26\u4e32\u4ee5\u53ca\u6570\u7ec4\u3002\u5927\u5bf9\u8c61\u5bf9\u865a\u62df\u673a\u7684\u5185\u5b58\u5206\u914d\u6765\u8bf4\u5c31\u662f\u4e00\u4e2a\u574f\u6d88\u606f(\u66ffJava\u865a\u62df\u673a\u62b1\u6028\u4e00\u53e5\uff0c\u6bd4\u9047\u5230\u4e00\u4e2a\u5927\u5bf9\u8c61\u66f4\u52a0\u574f\u7684\u6d88\u606f\u5c31\u662f\u9047\u5230\u4e00\u7fa4\u201c\u671d\u751f\u5915\u706d\u201d\u7684\u201c\u77ed\u547d\u5927\u5bf9\u8c61\u201d\uff0c\u5199\u7a0b\u5e8f\u7684\u65f6\u5019\u5e94\u5f53\u907f\u514d)\uff0c\u7ecf\u5e38\u51fa\u73b0\u5927\u5bf9\u8c61\u5bb9\u6613\u5bfc\u81f4\u5185\u5b58\u8fd8\u6709\u4e0d\u5c11\u7a7a\u95f4\u65f6\u5c31\u63d0\u524d\u89e6\u53d1\u5783\u573e\u6536\u96c6\u4ee5\u83b7\u53d6\u8db3\u591f\u7684\u8fde\u7eed\u7a7a\u95f4\u6765\u201c\u5b89\u7f6e\u201d\u5b83\u4eec\u3002 \u865a\u62df\u673a\u63d0\u4f9b\u4e86\u4e00\u4e2a -XX:PretenureSizeThreshold \u53c2\u6570\uff0c\u4ee4\u5927\u4e8e\u8fd9\u4e2a\u8bbe\u7f6e\u503c\u7684\u5bf9\u8c61\u76f4\u63a5\u5728\u8001\u5e74\u4ee3\u5206\u914d\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u662f\u907f\u514d\u5728Eden\u533a\u53ca\u4e24\u4e2aSurvivor\u533a\u4e4b\u95f4\u53d1\u751f\u5927\u91cf\u7684\u5185\u5b58\u590d\u5236\uff08\u590d\u4e60\u4e00\u4e0b\uff1a\u65b0\u751f\u4ee3\u91c7\u7528\u590d\u5236\u7b97\u6cd5\u6536\u96c6\u5185\u5b58\uff09\u3002 \u4e0b\u9762\u7684 testPretenureSizeThreshold() \u65b9\u6cd5\u540e\uff0c\u6211\u4eec\u770b\u5230Eden\u7a7a\u95f4\u51e0\u4e4e\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\u800c\u8001\u5e74\u4ee3\u768410MB\u7a7a\u95f4\u88ab\u4f7f\u7528\u4e8640%\uff0c\u4e5f\u5c31\u662f4MB\u7684 allocation \u5bf9\u8c61\u76f4\u63a5\u5c31\u5206\u914d\u5728\u8001\u5e74\u4ee3\u4e2d\uff0c\u8fd9\u662f\u56e0\u4e3a PretenureSizeThreshold \u88ab\u8bbe\u7f6e\u4e3a3MB\uff08\u5c31\u662f3145728\uff0c\u8fd9\u4e2a\u53c2\u6570\u4e0d\u80fd\u50cf -Xmx \u4e4b\u7c7b\u7684\u53c2\u6570\u4e00\u6837\u76f4\u63a5\u51993MB\uff09\uff0c\u56e0\u6b64\u8d85\u8fc73MB\u7684\u5bf9\u8c61\u90fd\u4f1a\u76f4\u63a5\u5728\u8001\u5e74\u4ee3\u8fdb\u884c\u5206\u914d\u3002 Note PretenureSizeThreshold \u53c2\u6570\u53ea\u5bf9Serial\u548cParNew\u4e24\u6b3e\u6536\u96c6\u5668\u6709\u6548\uff0cParallel Scavenge\u6536\u96c6\u5668\u4e0d\u8ba4\u8bc6\u8fd9\u4e2a\u53c2\u6570\uff0cParallel Scavenge\u6536\u96c6\u5668\u4e00\u822c\u5e76\u4e0d\u9700\u8981\u8bbe\u7f6e\u3002\u5982\u679c\u9047\u5230\u5fc5\u987b\u4f7f\u7528\u6b64\u53c2\u6570\u7684\u573a\u5408\uff0c\u53ef\u4ee5\u8003\u8651ParNew\u52a0CMS\u7684\u6536\u96c6\u5668\u7ec4\u5408\u3002 /** * VM\u53c2\u6570: -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -Xlog:gc* * -XX:+UseSerialGC -XX:PretenureSizeThreshold=3145728 */ public class TestPretenureSIzeThreadhold { private static final int _1MB = 1024 * 1024 ; public static void main ( String [] args ){ byte [] allocation ; allocation = new byte [ 4 * _1MB ]; //\u76f4\u63a5\u5206\u914d\u5728\u8001\u5e74\u4ee3\u4e2d } } \u8fd0\u884c\u7ed3\u679c\uff1a [0.028s][info][gc] Using Serial [0.029s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.309s][info][gc,heap,exit ] Heap [0.310s][info][gc,heap,exit ] def new generation total 9216K, used 2725K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.310s][info][gc,heap,exit ] eden space 8192K, 33% used [0x00000007bec00000, 0x00000007beea95a0, 0x00000007bf400000) [0.310s][info][gc,heap,exit ] from space 1024K, 0% used [0x00000007bf400000, 0x00000007bf400000, 0x00000007bf500000) [0.310s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000) [0.310s][info][gc,heap,exit ] tenured generation total 10240K, used 4096K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.310s][info][gc,heap,exit ] the space 10240K, 40% used [0x00000007bf600000, 0x00000007bfa00010, 0x00000007bfa00200, 0x00000007c0000000) [0.310s][info][gc,heap,exit ] Metaspace used 4968K, capacity 5032K, committed 5120K, reserved 1056768K [0.310s][info][gc,heap,exit ] class space used 442K, capacity 460K, committed 512K, reserved 1048576K","title":"\u5927\u5bf9\u8c61\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3"},{"location":"java/ujvm/ch3/#_13","text":"\u65e2\u7136\u865a\u62df\u673a\u91c7\u7528\u4e86\u5206\u4ee3\u6536\u96c6\u7684\u601d\u60f3\u6765\u7ba1\u7406\u5185\u5b58\uff0c\u90a3\u4e48\u5185\u5b58\u56de\u6536\u65f6\u5c31\u5fc5\u987b\u80fd\u8bc6\u522b\u54ea\u4e9b\u5bf9\u8c61\u5e94\u653e\u5728\u65b0\u751f\u4ee3\uff0c\u54ea\u4e9b\u5bf9\u8c61\u5e94\u653e\u5728\u8001\u5e74\u4ee3\u4e2d\u3002\u4e3a\u4e86\u505a\u5230\u8fd9\u70b9\uff0c\u865a\u62df\u673a\u7ed9\u6bcf\u4e2a\u5bf9\u8c61\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5bf9\u8c61\u5e74\u9f84(Age)\u8ba1\u6570\u5668\u3002\u5982\u679c\u5bf9\u8c61\u5728Eden\u51fa\u751f\u5e76\u7ecf\u8fc7\u7b2c\u4e00\u6b21Minor GC\u540e\u4ecd\u7136\u5b58\u6d3b\uff0c\u5e76\u4e14\u80fd\u88abSurvivor\u5bb9\u7eb3\u7684\u8bdd\uff0c\u5c06\u88ab\u79fb\u52a8\u5230Survivor\u7a7a\u95f4\u4e2d\uff0c\u5e76\u4e14\u5bf9\u8c61\u5e74\u9f84\u8bbe\u4e3a1\u3002\u5bf9\u8c61\u5728Survivor\u533a\u4e2d\u6bcf\u201c\u71ac\u8fc7\u201d\u4e00\u6b21Minor GC\uff0c\u5e74\u9f84\u5c31\u589e\u52a01\u5c81\uff0c\u5f53\u5b83\u7684\u5e74\u9f84\u589e\u52a0\u5230\u4e00\u5b9a\u7a0b\u5ea6\uff08\u9ed8\u8ba4\u4e3a15\u5c81\uff09\uff0c\u5c31\u5c06\u4f1a\u88ab\u664b\u5347\u5230\u8001\u5e74\u4ee3\u4e2d\u3002\u5bf9\u8c61\u664b\u5347\u8001\u5e74\u4ee3\u7684\u5e74\u9f84\u9608\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 -XX: C MaxTenuringThreshold /C \u8bbe\u7f6e\u3002 \u8bfb\u8005\u53ef\u4ee5\u8bd5\u8bd5\u5206\u522b\u4ee5 -XX: C MaxTenuringThreshold /C =1 \u548c -XX: C MaxTenuringThreshold /C = 15 \u4e24\u79cd\u8bbe\u7f6e\u6765 testTenuringThreshold() \u65b9\u6cd5\uff0c\u6b64\u65b9\u6cd5\u4e2d\u7684 allocation1 \u5bf9\u8c61\u9700\u8981256KB\u5185\u5b58\uff0cSurvivor\u7a7a\u95f4\u53ef\u4ee5\u5bb9\u7eb3\u3002\u5f53 C MaxTenuringThreshold /C =1 \u65f6\uff0c allocation1 \u5bf9\u8c61\u5728\u7b2c\u4e8c\u6b21GC\u53d1\u751f\u65f6\u8fdb\u5165\u8001\u5e74\u4ee3\uff0c\u65b0\u751f\u4ee3\u5df2\u4f7f\u7528\u7684\u5185\u5b58GC\u540e\u975e\u5e38\u5e72\u51c0\u5730\u53d8\u62100KB\u3002\u800c C MaxTenuringThreshold /C =15 \u65f6\uff0c\u7b2c\u4e8c\u6b21GC\u53d1\u751f\u540e\uff0c allocation1 \u5bf9\u8c61\u5219\u8fd8\u7559\u5728\u65b0\u751f\u4ee3Survivor\u7a7a\u95f4\uff0c\u8fd9\u65f6\u65b0\u751f\u4ee3\u4ecd\u7136\u6709404KB\u88ab\u5360\u7528\u3002 /** * VM\u53c2\u6570: -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8 -XX: C MaxTenuringThreshold /C =1 -Xlog:gc* -XX:+UseSerialGC */ public class testTenuringThreshold { private static final int _1MB = 1024 * 1024 ; @SuppressWarnings ( unused ) public static void main ( String [] args ) { byte [] allocation1 , allocation2 , allocation3 ; allocation1 = new byte [ _1MB / 4 ]; // \u4ec0\u4e48\u65f6\u5019\u8fdb\u5165\u8001\u5e74\u4ee3\u53d6\u51b3\u4e8eXX: C MaxTenuringThreshold /C \u8bbe\u7f6e allocation2 = new byte [ 4 * _1MB ]; allocation3 = new byte [ 4 * _1MB ]; allocation3 = null ; allocation3 = new byte [ 4 * _1MB ]; } } \u4ee5 C MaxTenuringThreshold /C =1 \u53c2\u6570\u6765\u8fd0\u884c\u7684\u7ed3\u679c\uff1a [0.030s][info][gc] Using Serial [0.030s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.276s][info][gc,start ] GC(0) Pause Young (Allocation Failure) [0.288s][info][gc,heap ] GC(0) DefNew: 6913K- 1024K(9216K) [0.288s][info][gc,heap ] GC(0) Tenured: 0K- 4192K(10240K) [0.288s][info][gc,metaspace ] GC(0) Metaspace: 4971K- 4971K(1056768K) [0.288s][info][gc ] GC(0) Pause Young (Allocation Failure) 6M- 5M(19M) 11.650ms [0.288s][info][gc,cpu ] GC(0) User=0.01s Sys=0.01s Real=0.01s [0.291s][info][gc,start ] GC(1) Pause Young (Allocation Failure) [0.295s][info][gc,heap ] GC(1) DefNew: 5204K- 0K(9216K) [0.295s][info][gc,heap ] GC(1) Tenured: 4192K- 5216K(10240K) [0.295s][info][gc,metaspace ] GC(1) Metaspace: 4973K- 4973K(1056768K) [0.295s][info][gc ] GC(1) Pause Young (Allocation Failure) 9M- 5M(19M) 4.475ms [0.295s][info][gc,cpu ] GC(1) User=0.00s Sys=0.00s Real=0.01s [0.297s][info][gc,heap,exit ] Heap [0.297s][info][gc,heap,exit ] def new generation total 9216K, used 4234K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.297s][info][gc,heap,exit ] eden space 8192K, 51% used [0x00000007bec00000, 0x00000007bf0225e0, 0x00000007bf400000) [0.297s][info][gc,heap,exit ] from space 1024K, 0% used [0x00000007bf400000, 0x00000007bf400270, 0x00000007bf500000) [0.297s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000) [0.297s][info][gc,heap,exit ] tenured generation total 10240K, used 5216K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.297s][info][gc,heap,exit ] the space 10240K, 50% used [0x00000007bf600000, 0x00000007bfb18188, 0x00000007bfb18200, 0x00000007c0000000) [0.297s][info][gc,heap,exit ] Metaspace used 4996K, capacity 5032K, committed 5120K, reserved 1056768K [0.297s][info][gc,heap,exit ] class space used 443K, capacity 460K, committed 512K, reserved 1048576K \u4ee5 C MaxTenuringThreshold /C =15 \u53c2\u6570\u6765\u8fd0\u884c\u7684\u7ed3\u679c\uff1a [0.033s][info][gc] Using Serial [0.033s][info][gc,heap,coops] Heap address: 0x00000007bec00000, size: 20 MB, Compressed Oops mode: Zero based, Oop shift amount: 3 [0.322s][info][gc,start ] GC(0) Pause Young (Allocation Failure) [0.333s][info][gc,heap ] GC(0) DefNew: 6913K- 1023K(9216K) [0.333s][info][gc,heap ] GC(0) Tenured: 0K- 4195K(10240K) [0.333s][info][gc,metaspace ] GC(0) Metaspace: 5020K- 5020K(1056768K) [0.333s][info][gc ] GC(0) Pause Young (Allocation Failure) 6M- 5M(19M) 10.971ms [0.333s][info][gc,cpu ] GC(0) User=0.01s Sys=0.01s Real=0.01s [0.336s][info][gc,start ] GC(1) Pause Young (Allocation Failure) [0.341s][info][gc,heap ] GC(1) DefNew: 5204K- 4K(9216K) [0.341s][info][gc,heap ] GC(1) Tenured: 4195K- 5219K(10240K) [0.341s][info][gc,metaspace ] GC(1) Metaspace: 5063K- 5063K(1056768K) [0.341s][info][gc ] GC(1) Pause Young (Allocation Failure) 9M- 5M(19M) 5.095ms [0.341s][info][gc,cpu ] GC(1) User=0.00s Sys=0.00s Real=0.01s [0.343s][info][gc,heap,exit ] Heap [0.343s][info][gc,heap,exit ] def new generation total 9216K, used 4238K [0x00000007bec00000, 0x00000007bf600000, 0x00000007bf600000) [0.343s][info][gc,heap,exit ] eden space 8192K, 51% used [0x00000007bec00000, 0x00000007bf0227a8, 0x00000007bf400000) [0.343s][info][gc,heap,exit ] from space 1024K, 0% used [0x00000007bf400000, 0x00000007bf401218, 0x00000007bf500000) [0.343s][info][gc,heap,exit ] to space 1024K, 0% used [0x00000007bf500000, 0x00000007bf500000, 0x00000007bf600000) [0.343s][info][gc,heap,exit ] tenured generation total 10240K, used 5219K [0x00000007bf600000, 0x00000007c0000000, 0x00000007c0000000) [0.343s][info][gc,heap,exit ] the space 10240K, 50% used [0x00000007bf600000, 0x00000007bfb18ea0, 0x00000007bfb19000, 0x00000007c0000000) [0.343s][info][gc,heap,exit ] Metaspace used 5074K, capacity 5096K, committed 5376K, reserved 1056768K [0.343s][info][gc,heap,exit ] class space used 456K, capacity 460K, committed 512K, reserved 1048576K","title":"\u957f\u671f\u5b58\u6d3b\u7684\u5bf9\u8c61\u5c06\u8fdb\u5165\u8001\u5e74\u4ee3"},{"location":"java/ujvm/ch3/#_14","text":"\u4e3a\u4e86\u80fd\u66f4\u597d\u5730\u9002\u5e94\u4e0d\u540c\u7a0b\u5e8f\u7684\u5185\u5b58\u72b6\u51b5\uff0c\u865a\u62df\u673a\u5e76\u4e0d\u662f\u6c38\u8fdc\u5730\u8981\u6c42\u5bf9 \u8c61\u7684\u5e74\u9f84\u5fc5\u987b\u8fbe\u5230\u4e86 MaxTenuringThreshold \u624d\u80fd\u664b\u5347\u2f7c\u5e74\u4ee3\uff0c\u5982\u679c\u5728Survivor\u7a7a\u95f4\u4e2d\u76f8\u540c\u5e74\u9f84\u6240\u6709\u5bf9\u8c61\u2f24\u2f29\u7684\u603b\u548c\u2f24\u4e8eSurvivor\u7a7a\u95f4\u7684\u2f00\u534a\uff0c\u5e74\u9f84\u2f24\u4e8e\u6216\u7b49\u4e8e\u8be5\u5e74\u9f84\u7684\u5bf9\u8c61\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fdb\u2f0a\u2f7c\u5e74\u4ee3\uff0c\u2f46\u987b\u7b49\u5230 MaxTenuringThreshold \u4e2d\u8981\u6c42\u7684\u5e74\u9f84\u3002","title":"\u52a8\u6001\u5bf9\u8c61\u5e74\u9f84\u5224\u5b9a"},{"location":"java/ujvm/ch3/#_15","text":"\u5728\u53d1\u2f63Minor GC\u4e4b\u524d\uff0c\u865a\u62df\u673a\u4f1a\u5148\u68c0\u67e5\u2f7c\u5e74\u4ee3\u6700\u2f24\u53ef\u2f64\u7684\u8fde\u7eed\u7a7a\u95f4\u662f\u5426\u2f24\u4e8e\u65b0\u2f63\u4ee3\u6240\u6709\u5bf9\u8c61\u603b\u7a7a\u95f4\uff0c\u5982\u679c\u8fd9\u4e2a\u6761\u4ef6\u6210\u2f74\uff0c\u90a3\u4e48Minor GC\u53ef\u4ee5\u786e\u4fdd\u662f\u5b89\u5168\u7684\u3002\u5982\u679c\u4e0d\u6210\u2f74\uff0c\u5219\u865a\u62df\u673a\u4f1a\u67e5\u770bHandlePromotionFailure\u8bbe\u7f6e\u503c\u662f\u5426\u5141\u8bb8\u62c5\u4fdd\u5931\u8d25\u3002\u5982\u679c\u5141\u8bb8\uff0c\u90a3\u4e48\u4f1a\u7ee7\u7eed\u68c0\u67e5\u2f7c\u5e74\u4ee3\u6700\u2f24\u53ef\u2f64\u7684\u8fde\u7eed\u7a7a\u95f4\u662f\u5426\u2f24\u4e8e\u5386\u6b21\u664b\u5347\u5230\u2f7c\u5e74\u4ee3\u5bf9\u8c61\u7684\u5e73\u5747\u2f24\u2f29\uff0c\u5982\u679c\u2f24\u4e8e\uff0c\u5c06\u5c1d\u8bd5\u7740\u8fdb\u2f8f\u2f00\u6b21Minor GC\uff0c\u5c3d\u7ba1\u8fd9\u6b21Minor GC\u662f\u6709\u98ce\u9669\u7684\uff1b\u5982\u679c\u2f29\u4e8e\uff0c\u6216\u8005HandlePromotionFailure\u8bbe\u7f6e\u4e0d\u5141\u8bb8\u5192\u9669\uff0c\u90a3\u8fd9\u65f6\u4e5f\u8981\u6539\u4e3a\u8fdb\u2f8f\u2f00\u6b21Full GC\u3002","title":"\u7a7a\u95f4\u5206\u914d\u62c5\u4fdd"},{"location":"java/ujvm/ch3/#minormajorfull-gc","text":"Minor GC vs Major GC vs Full GC Minor GC\uff1a \u6e05\u7406\u5e74\u8f7b\u4ee3(Young Generation, consisting of Eden and Survivor spaces)\u65f6\u3002 Major GC: \u6e05\u7406\u8001\u5e74\u4ee3(Old generation, also tenured space)\u3002 Full GC: \u6e05\u7406\u6574\u4e2a\u5806\u7a7a\u95f4\u2014\u5305\u62ec\u5e74\u8f7b\u4ee3\u548c\u8001\u5e74\u4ee3\u3002","title":"Minor/Major/Full GC"},{"location":"java/ujvm/ch4/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 4 - \u865a\u62df\u673a\u6027\u80fd\u76d1\u63a7\u4e0e\u6545\u969c\u5904\u7406\u5de5\u5177","title":"Chapter 4 : \u865a\u62df\u673a\u6027\u80fd\u76d1\u63a7\u4e0e\u6545\u969c\u5904\u7406\u5de5\u5177"},{"location":"java/ujvm/ch4/#java-4-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 4 - \u865a\u62df\u673a\u6027\u80fd\u76d1\u63a7\u4e0e\u6545\u969c\u5904\u7406\u5de5\u5177"},{"location":"java/ujvm/ch5/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 5 - \u8c03\u4f18\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u6218","title":"Chapter 5 : \u8c03\u4f18\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u6218"},{"location":"java/ujvm/ch5/#java-5-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 5 - \u8c03\u4f18\u6848\u4f8b\u5206\u6790\u4e0e\u5b9e\u6218"},{"location":"java/ujvm/ch6/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 6 - \u7c7b\u6587\u4ef6\u7ed3\u6784 1 \u6982\u8ff0 \u4ee3\u7801\u7f16\u8bd1\u7684\u7ed3\u679c\u4ece\u672c\u5730\u673a\u5668\u7801\u8f6c\u53d8\u4e3a\u5b57\u8282\u7801\uff0c\u662f\u5b58\u50a8\u683c\u5f0f\u53d1\u5c55\u7684\u2f00\u2f29\u6b65\uff0c\u5374\u662f\u7f16\u7a0b\u8bed\u2f94\u53d1\u5c55\u7684\u2f00\u2f24\u6b65\u3002\u7531\u4e8e\u865a\u62df\u673a\u4ee5\u53ca\u2f24\u91cf\u5efa\u2f74\u5728\u865a\u62df\u673a\u4e4b\u4e0a\u7684\u7a0b\u5e8f\u8bed\u2f94\u5982\u2fac\u540e\u6625\u7b0b\u822c\u51fa\u73b0\u5e76\u84ec\u52c3\u53d1\u5c55\uff0c\u5c06\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u7f16\u8bd1\u6210\u2f06\u8fdb\u5236\u672c\u5730\u673a\u5668\u7801(Native Code)\u5df2\u4e0d\u518d\u662f\u552f\u2f00\u7684\u9009\u62e9\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u7a0b\u5e8f\u8bed\u2f94\u9009\u62e9\u4e86\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u548c\u673a\u5668\u6307\u4ee4\u96c6\u2f46\u5173\u7684\u3001\u5e73\u53f0\u4e2d\u2f74\u7684\u683c\u5f0f\u4f5c\u4e3a\u7a0b\u5e8f\u7f16\u8bd1\u540e\u7684\u5b58\u50a8\u683c\u5f0f\u3002 2 \u65e0\u5173\u6027\u7684\u57fa\u77f3 Java\u5728\u521a\u521a\u8bde\u2f63\u4e4b\u65f6\u66fe\u7ecf\u63d0\u51fa\u8fc7\u2f00\u4e2a\u2fae\u5e38\u8457\u540d\u7684\u5ba3\u4f20\u53e3\u53f7\uff1a\u201c\u2f00\u6b21\u7f16\u5199\uff0c\u5230\u5904\u8fd0\u2f8f\u201d(Write Once,Run Anywhere)\u3002Sun\u516c\u53f8\u4ee5\u53ca\u5176\u4ed6\u865a\u62df\u673a\u63d0\u4f9b\u5546\u53d1\u5e03\u4e86\u8bb8\u591a\u53ef\u4ee5\u8fd0\u2f8f\u5728\u5404\u79cd\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u865a\u62df\u673a\uff0c\u8fd9\u4e9b\u865a\u62df\u673a\u90fd\u53ef\u4ee5\u8f7d\u2f0a\u548c\u6267\u2f8f\u540c\u2f00\u79cd\u5e73\u53f0\u2f46\u5173\u7684\u5b57\u8282\u7801\uff0c\u4ece\u2f7d\u5b9e\u73b0\u4e86\u7a0b\u5e8f\u7684\u201c\u2f00\u6b21\u7f16\u5199\uff0c\u5230\u5904\u8fd0\u2f8f\u201d\u3002\u5b57\u8282\u7801(ByteCode)\u662f\u6784\u6210 \u5e73\u53f0\u2f46\u5173\u6027 \u7684\u57fa\u2f6f\u3002 \u8bed\u8a00\u65e0\u5173\u6027 \u662f\u6307\u5176\u4ed6\u8bed\u8a00\u4e5f\u8fd0\u884c\u5728Java\u865a\u62df\u673a\u4e4b\u4e0a\uff0c\u4f8b\u5982Clojure, Jython, Scala\u7b49\u3002\u5b9e\u73b0\u8bed\u2f94\u2f46\u5173\u6027\u7684\u57fa\u7840\u4ecd\u7136\u662f\u865a\u62df\u673a\u548c\u5b57\u8282\u7801\u5b58\u50a8\u683c\u5f0f\u3002Java\u865a\u62df\u673a\u4e0d\u548c\u5305\u62ecJava\u5728\u5185\u7684\u4efb\u4f55\u8bed\u2f94\u7ed1\u5b9a\uff0c\u5b83\u53ea\u4e0e\u201cClass\u2f42\u4ef6\u201d\u8fd9\u79cd\u7279\u5b9a\u7684\u2f06\u8fdb\u5236\u2f42\u4ef6\u683c\u5f0f\u6240\u5173\u8054\uff0cClass\u2f42\u4ef6\u4e2d\u5305\u542b\u4e86Java\u865a\u62df\u673a\u6307\u4ee4\u96c6\u548c\u7b26\u53f7\u8868\u4ee5\u53ca\u82e5\u2f32\u5176\u4ed6\u8f85\u52a9\u4fe1\u606f\u3002 3 Class\u7c7b\u6587\u4ef6\u7684\u7ed3\u6784 Class\u6587\u4ef6\u662f\u4e00\u7ec4\u4ee58\u4f4d\u5b57\u8282\u4e3a\u57fa\u7840\u5355\u4f4d\u7684\u4e8c\u8fdb\u5236\u6d41\u3002\u5f53\u9047\u5230\u9700\u8981\u5360\u2f648\u4f4d\u5b57\u8282\u4ee5\u4e0a\u7a7a\u95f4\u7684\u6570\u636e\u9879\u65f6\uff0c\u4ee5Big-Endian\u65b9\u5f0f\u5b58\u50a8\u3002Class\u6587\u4ef6\u91c7\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u7ed3\u6784\u4f53\u7684\u4f2a\u7ed3\u6784\u6765\u5b58\u50a8\u6570\u636e\uff0c\u8fd9\u79cd\u4f2a\u7ed3\u6784\u4e2d\u53ea\u6709\u4e24\u79cd\u6570\u636e\u7c7b\u578b\uff1a\u65e0\u7b26\u53f7\u6570\u548c\u8868\u3002 \u2f46\u7b26\u53f7\u6570\u5c5e\u4e8e\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5u1\u3001u2\u3001u4\u3001u8\u6765\u5206\u522b\u4ee3\u88681\u30012\u30014\u548c8\u4e2a\u5b57\u8282\u7684\u2f46\u7b26\u53f7\u6570\uff0c\u2f46\u7b26\u53f7\u6570\u53ef\u4ee5\u2f64\u6765\u63cf\u8ff0\u6570\u5b57\u3001\u7d22\u5f15\u5f15\u2f64\u3001\u6570\u91cf\u503c\u6216\u8005\u6309\u7167UTF-8\u7f16\u7801\u6784\u6210\u5b57\u7b26\u4e32\u503c\u3002 \u8868\u662f\u7531\u591a\u4e2a\u2f46\u7b26\u53f7\u6570\u6216\u8005\u5176\u4ed6\u8868\u4f5c\u4e3a\u6570\u636e\u9879\u6784\u6210\u7684\u590d\u5408\u6570\u636e\u7c7b\u578b\uff0c\u6240\u6709\u8868\u90fd\u4e60\u60ef\u6027\u5730\u4ee5\u201c_info\u201d\u7ed3\u5c3e\u3002 Class\u6587\u4ef6\u683c\u5f0f\uff1a ClassFile { u4 magic ; u2 minor_version ; u2 major_version ; u2 constant_pool_count ; cp_info contant_pool [ constant_pool_count \u2013 1 ]; u2 access_flags ; u2 this_class ; u2 super_class ; u2 interfaces_count ; u2 interfaces [ interfaces_count ]; u2 fields_count ; field_info fields [ fields_count ]; u2 methods_count ; method_info methods [ methods_count ]; u2 attributes_count ; attribute_info attributes [ attributes_count ]; } magic number and version \u6bcf\u4e2aClass\u2f42\u4ef6\u7684\u59344\u4e2a\u5b57\u8282\u79f0\u4e3a \u9b54\u6570 (Magic Number)\uff0c\u5b83\u7684\u552f\u2f00\u4f5c\u2f64\u662f\u786e\u5b9a\u8fd9\u4e2a\u2f42\u4ef6\u662f\u5426\u4e3a\u2f00\u4e2a\u80fd\u88ab\u865a\u62df\u673a\u63a5\u53d7\u7684Class\u2f42\u4ef6\uff0c[\u53ef\u53c2\u8003 Magic Number in OSC ]\u3002Class\u2f42\u4ef6\u7684\u9b54\u6570\u7684\u83b7\u5f97\u5f88\u6709\u201c\u6d6a\u6f2b\u2f53\u606f\u201d\uff0c\u503c\u4e3a\uff1a0xCAFEBABE(\u5496\u5561\u5b9d\u8d1d\uff1f)\u3002 \u7d27\u63a5\u7740\u9b54\u6570\u76844\u4e2a\u5b57\u8282\u5b58\u50a8\u7684\u662fClass\u2f42\u4ef6\u7684\u7248\u672c\u53f7\uff1a\u7b2c5\u548c\u7b2c6\u4e2a\u5b57\u8282\u662f\u6b21\u7248\u672c\u53f7(Minor Version)\uff0c\u7b2c7\u548c\u7b2c8\u4e2a\u5b57\u8282\u662f\u4e3b\u7248\u672c\u53f7(Major Version)\u3002 \u4ee5\u4e0b\u9762\u7b80\u77ed\u7684Java\u4ee3\u7801\u4e3a\u4f8b\uff0c public class TestClass { private int m ; public int inc () { return m + 1 ; } } \u7f16\u8bd1\u540e\uff0c\u4f7f\u7528 Classpy \u6253\u5f00\uff0c \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528JDK\u5de5\u5177javap\u5206\u6790Class\u6587\u4ef6\u5b57\u8282\u7801\u3002 $ unstandingJVM / usr / bin / javap - c - verbose TestClass . class MD5 checksum ce62ee2f47f2ff81598bbcb156358747 Compiled from TestClass.java public class com . unstandingJVM . TestClass minor version : 0 major version : 53 flags : ( 0x0021 ) ACC_PUBLIC , ACC_SUPER this_class : # 3 // com/unstandingJVM/TestClass super_class : # 4 // java/lang/Object interfaces : 0 , fields : 1 , methods : 2 , attributes : 1 Constant pool : # 1 = Methodref # 4. # 18 // java/lang/Object. init :()V # 2 = Fieldref # 3. # 19 // com/unstandingJVM/TestClass.m:I # 3 = Class # 20 // com/unstandingJVM/TestClass # 4 = Class # 21 // java/lang/Object # 5 = Utf8 m # 6 = Utf8 I # 7 = Utf8 init # 8 = Utf8 () V # 9 = Utf8 Code # 10 = Utf8 LineNumberTable # 11 = Utf8 LocalVariableTable # 12 = Utf8 this # 13 = Utf8 Lcom / unstandingJVM / TestClass ; # 14 = Utf8 inc # 15 = Utf8 () I # 16 = Utf8 SourceFile # 17 = Utf8 TestClass . java # 18 = NameAndType # 7 : # 8 // init :()V # 19 = NameAndType # 5 : # 6 // m:I # 20 = Utf8 com / unstandingJVM / TestClass # 21 = Utf8 java / lang / Object { public com . unstandingJVM . TestClass (); descriptor : () V flags : ( 0x0001 ) ACC_PUBLIC Code : stack = 1 , locals = 1 , args_size = 1 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object. init :()V 4 : return LineNumberTable : line 3 : 0 LocalVariableTable : Start Length Slot Name Signature 0 5 0 this Lcom / unstandingJVM / TestClass ; public int inc (); descriptor : () I flags : ( 0x0001 ) ACC_PUBLIC Code : stack = 2 , locals = 1 , args_size = 1 0 : aload_0 1 : getfield # 2 // Field m:I 4 : iconst_1 5 : iadd 6 : ireturn LineNumberTable : line 6 : 0 LocalVariableTable : Start Length Slot Name Signature 0 7 0 this Lcom / unstandingJVM / TestClass ; } SourceFile: TestClass.java constant pool \u7531\u4e8e\u5e38\u91cf\u6c60(constant pool)\u4e2d\u5e38\u91cf\u7684\u6570\u91cf\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5728\u5e38\u91cf\u6c60\u7684\u5165\u53e3\u9700\u8981\u653e\u7f6e\u9879u2\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4ee3\u8868\u5e38\u91cf\u6c60\u5bb9\u91cf\u8ba1\u6570\u503c(constant_pool_count)\u3002\u5e38\u91cf\u6c60\u4e2d\u4e3b\u8981\u5b58\u653e\u4e24\u2f24\u7c7b\u5e38\u91cf\uff1a\u5b57\u2faf\u91cf(Literal)\u548c\u7b26\u53f7\u5f15\u2f64(Symbolic References)\u3002\u5b57\u2faf\u91cf\u2f50\u8f83\u63a5\u8fd1\u4e8eJava\u8bed\u2f94\u5c42\u2faf\u7684\u5e38\u91cf\u6982\u5ff5\uff0c\u5982\u2f42\u672c\u5b57\u7b26\u4e32\u3001\u58f0\u660e\u4e3afinal\u7684\u5e38\u91cf\u503c\u7b49\u3002\u2f7d\u7b26\u53f7\u5f15\u2f64\u5219\u5c5e\u4e8e\u7f16\u8bd1\u539f\u7406\u2f45\u2faf\u7684\u6982\u5ff5\uff0c\u5305\u62ec\u4e86\u4e0b\u2faf\u4e09\u7c7b\u5e38\u91cf\uff1a\u7c7b\u548c\u63a5\u53e3\u7684\u5168\u9650\u5b9a\u540d(Fully Qualified Name)\u3001\u5b57\u6bb5\u7684\u540d\u79f0\u548c\u63cf\u8ff0\u7b26(Descriptor)\uff0c\u2f45\u6cd5\u7684\u540d\u79f0\u548c\u63cf\u8ff0\u7b26\u3002 access_flags \u5728\u5e38\u91cf\u6c60\u7ed3\u675f\u4e4b\u540e\uff0c\u7d27\u63a5\u7740\u7684\u4e24\u4e2a\u5b57\u8282\u4ee3\u8868access_flags(\u8bbf\u95ee\u6807\u5fd7)\uff0c\u8fd9\u4e2a\u6807\u5fd7\u2f64\u4e8e\u8bc6\u522b\u2f00\u4e9b\u7c7b\u6216\u8005\u63a5\u2f1c\u5c42\u6b21\u7684\u8bbf\u95ee\u4fe1\u606f\uff0c\u5305\u62ec\uff1a\u8fd9\u4e2aClass\u662f\u7c7b\u8fd8\u662f\u63a5\u53e3\uff1b\u662f\u5426\u5b9a\u4e49\u4e3apublic\u7c7b\u578b\uff1b\u662f\u5426\u5b9a\u4e49\u4e3aabstract\u7c7b\u578b\uff1b\u5982\u679c\u662f\u7c7b\u7684\u8bdd\uff0c\u662f\u5426\u88ab\u58f0\u660e\u4e3afinal\u7b49\u3002 \u7c7b\u7d22\u5f15\u3001\u2f57\u7c7b\u7d22\u5f15\u4e0e\u63a5\u53e3\u7d22\u5f15\u96c6\u5408 \u7c7b\u7d22\u5f15(this_class)\u548c\u2f57\u7c7b\u7d22\u5f15(super_class)\u90fd\u662f\u2f00\u4e2au2\u7c7b\u578b\u7684\u6570\u636e\uff0c\u2f7d\u63a5\u53e3\u7d22\u5f15\u96c6\u5408(interfaces)\u662f\u2f00\u7ec4u2\u7c7b\u578b\u7684\u6570\u636e\u7684\u96c6\u5408\uff0cClass\u2f42\u4ef6\u4e2d\u7531\u8fd9\u4e09\u9879\u6570\u636e\u6765\u786e\u5b9a\u8fd9\u4e2a\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb\u3002 field_info field_info(\u5b57\u6bb5\u8868)\u2f64\u4e8e\u63cf\u8ff0\u63a5\u53e3\u6216\u8005\u7c7b\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u3002 \u5b57\u6bb5\u4fee\u9970\u7b26\u653e\u5728access_flags\u4e2d\uff0c\u5305\u542bACC_PUBLIC(\u5b57\u6bb5\u662f\u5426public)\u3001ACC_PRIVATE(\u5b57\u6bb5\u662f\u5426private)\u3001ACC_PROTECTED(\u5b57\u6bb5\u662f\u5426protected)\u3001ACC_STATIC(\u5b57\u6bb5\u662f\u5426static) \u3001ACC_VOLATILE(\u5b57\u6bb5\u662f\u5426volatile)\u7b49\u3002 name_index \u548c descriptor_index \u90fd\u662f\u5bf9\u5e38\u91cf\u6c60\u7684\u5f15\u2f64\uff0c\u5206\u522b\u4ee3\u8868\u7740\u5b57\u6bb5\u7684\u7b80\u5355\u540d\u79f0\u4ee5\u53ca\u5b57\u6bb5\u548c\u2f45\u6cd5\u7684\u63cf\u8ff0\u7b26\u3002 \u63cf\u8ff0\u7b26\u7684\u4f5c\u7528\u5219\u662f\u7528\u6765\u63cf\u8ff0\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u3001\u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\uff08\u5305\u62ec\u6570\u91cf\u3001\u7c7b\u578b\u4ee5\u53ca\u987a\u5e8f\u7b49\uff09\u548c\u8fd4\u56de\u503c\u7684\u3002\u6839\u636e\u63cf\u8ff0\u7b26\u89c4\u5219\uff0c\u8be6\u7ec6\u7684\u63cf\u8ff0\u7b26\u6807\u793a\u5b57\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a TestClass\u7684filed_info: method_info Class\u2f42\u4ef6\u5b58\u50a8\u683c\u5f0f\u4e2d\u5bf9\u2f45\u6cd5\u7684\u63cf\u8ff0\u4e0e\u5bf9\u5b57\u6bb5\u7684\u63cf\u8ff0\u2f0f\u4e4e\u91c7\u2f64\u4e86\u5b8c\u5168\u2f00\u81f4\u7684\u2f45\u5f0f\uff0cmethod_info(\u2f45\u6cd5\u8868)\u7684\u7ed3\u6784\u5982\u540c\u5b57\u6bb5\u8868\u2f00\u6837\uff0c\u4f9d\u6b21\u5305\u62ec\u4e86\u8bbf\u95ee\u6807\u5fd7(access_flags)\u3001\u540d\u79f0\u7d22\u5f15(name_index)\u3001\u63cf\u8ff0\u7b26\u7d22\u5f15(descriptor_index)\u3001\u5c5e\u6027\u8868\u96c6\u5408\uff08attributes\uff09\u2f0f\u9879\u3002 \u2f45\u6cd5\u2fa5\u7684Java\u4ee3\u7801\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u6307\u4ee4\u540e\uff0c\u5b58\u653e\u5728\u2f45\u6cd5attribute_info(\u5c5e\u6027\u8868\u96c6\u5408)\u4e2d\u2f00\u4e2a\u540d\u4e3a\u201cCode\u201d\u7684\u5c5e\u6027\u2fa5\u2faf\u3002 attribute_info Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u9884\u5b9a\u4e49\u4e869\u9879\u865a\u62df\u673a\u5e94\u5f53\u80fd\u8bc6\u522b\u7684\u5c5e\u6027\uff08JDK1.5\u540e\u53c8\u589e\u52a0\u4e86\u4e00\u4e9b\u65b0\u7684\u7279\u6027\uff0c\u56e0\u6b64\u4e0d\u6b62\u4e0b\u97629\u9879\uff0c\u4f46\u4e0b\u97629\u9879\u662f\u6700\u57fa\u672c\u4e5f\u662f\u5fc5\u8981\uff0c\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\uff09\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a 4 \u5b57\u8282\u7801\u6307\u4ee4\u7b80\u4ecb Java\u865a\u62df\u673a\u7684\u6307\u4ee4\u7531\u2f00\u4e2a\u5b57\u8282\u957f\u5ea6\u7684\u3001\u4ee3\u8868\u7740\u67d0\u79cd\u7279\u5b9a\u64cd\u4f5c\u542b\u4e49\u7684\u6570\u5b57(\u79f0\u4e3a \u64cd\u4f5c\u7801 \uff0cOpcode)\u4ee5\u53ca\u8ddf\u968f\u5176\u540e\u7684\u96f6\u2f84\u591a\u4e2a\u4ee3\u8868\u6b64\u64cd\u4f5c\u6240\u9700\u53c2\u6570(\u79f0\u4e3a \u64cd\u4f5c\u6570 \uff0cOperands)\u2f7d\u6784\u6210\u3002 5 \u5171\u6709\u8bbe\u8ba1\u548c\u79c1\u6709\u8bbe\u8ba1 \u7406\u89e3\u516c\u6709\u8bbe\u8ba1\u4e0e\u79c1\u6709\u5b9e\u73b0\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\u662f\u2fae\u5e38\u6709\u5fc5\u8981\u7684\uff0cJava\u865a\u62df\u673a\u5b9e\u73b0\u5fc5\u987b\u80fd\u591f\u8bfb\u53d6Class\u2f42\u4ef6\u5e76\u7cbe\u786e\u5b9e\u73b0\u5305\u542b\u5728\u5176\u4e2d\u7684Java\u865a\u62df\u673a\u4ee3\u7801\u7684\u8bed\u4e49\u3002\u62ff\u7740Java\u865a\u62df\u673a\u89c4\u8303\u2f00\u6210\u4e0d\u53d8\u5730\u9010\u5b57\u5b9e\u73b0\u5176\u4e2d\u8981\u6c42\u7684\u5185\u5bb9\u5f53\u7136\u662f\u2f00\u79cd\u53ef\u2f8f\u7684\u9014\u5f84\uff0c\u4f46\u2f00\u4e2a\u4f18\u79c0\u7684\u865a\u62df\u673a\u5b9e\u73b0\uff0c\u5728\u6ee1\u2f9c\u865a\u62df\u673a\u89c4\u8303\u7684\u7ea6\u675f\u4e0b\u5bf9\u5177 \u4f53\u5b9e\u73b0\u505a\u51fa\u4fee\u6539\u548c\u4f18\u5316\u4e5f\u662f\u5b8c\u5168\u53ef\u2f8f\u7684\uff0c\u5e76\u4e14\u865a\u62df\u673a\u89c4\u8303\u4e2d\u660e\u786e\u2fce\u52b1\u5b9e\u73b0\u8005\u8fd9\u6837\u505a\u3002 \u865a\u62df\u673a\u5b9e\u73b0\u7684\u2f45\u5f0f\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u79cd\uff1a \u5c06\u8f93\u2f0a\u7684Java\u865a\u62df\u673a\u4ee3\u7801\u5728\u52a0\u8f7d\u6216\u6267\u2f8f\u65f6\u7ffb\u8bd1\u6210\u53e6\u5916\u2f00\u79cd\u865a\u62df\u673a\u7684\u6307\u4ee4\u96c6\u3002 \u5c06\u8f93\u2f0a\u7684Java\u865a\u62df\u673a\u4ee3\u7801\u5728\u52a0\u8f7d\u6216\u6267\u2f8f\u65f6\u7ffb\u8bd1\u6210\u5bbf\u4e3b\u673aCPU\u7684\u672c\u5730\u6307\u4ee4\u96c6\uff08\u5373JIT\u4ee3\u7801\u2f63\u6210\u6280\u672f\uff09\u3002 6 Class\u6587\u4ef6\u7ed3\u6784\u7684\u53d1\u5c55 \u76f8\u5bf9\u4e8e\u8bed\u2f94\u3001API\u4ee5\u53caJava\u6280\u672f\u4f53\u7cfb\u4e2d\u5176\u4ed6\u2f45\u2faf\u7684\u53d8\u5316\uff0cClass\u2f42\u4ef6\u7ed3\u6784\u2f00\u76f4\u5904\u4e8e\u2f50\u8f83\u7a33\u5b9a\u7684\u72b6\u6001\uff0cClass\u2f42\u4ef6\u7684\u4e3b\u4f53\u7ed3\u6784\u3001\u5b57\u8282\u7801\u6307\u4ee4\u7684\u8bed\u4e49\u548c\u6570\u91cf\u2f0f\u4e4e\u6ca1\u6709\u51fa\u73b0\u8fc7\u53d8\u52a8\uff0c\u6240\u6709\u5bf9Class\u2f42\u4ef6\u683c\u5f0f\u7684\u6539\u8fdb\uff0c\u90fd\u96c6\u4e2d\u5728\u5411\u8bbf\u95ee\u6807\u5fd7\u3001\u5c5e\u6027\u8868\u8fd9\u4e9b\u5728\u8bbe\u8ba1\u4e0a\u5c31\u53ef\u6269\u5c55\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u6dfb\u52a0\u5185\u5bb9\u3002","title":"Chapter 6 : \u7c7b\u6587\u4ef6\u7ed3\u6784"},{"location":"java/ujvm/ch6/#java-6-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 6 - \u7c7b\u6587\u4ef6\u7ed3\u6784"},{"location":"java/ujvm/ch6/#1","text":"\u4ee3\u7801\u7f16\u8bd1\u7684\u7ed3\u679c\u4ece\u672c\u5730\u673a\u5668\u7801\u8f6c\u53d8\u4e3a\u5b57\u8282\u7801\uff0c\u662f\u5b58\u50a8\u683c\u5f0f\u53d1\u5c55\u7684\u2f00\u2f29\u6b65\uff0c\u5374\u662f\u7f16\u7a0b\u8bed\u2f94\u53d1\u5c55\u7684\u2f00\u2f24\u6b65\u3002\u7531\u4e8e\u865a\u62df\u673a\u4ee5\u53ca\u2f24\u91cf\u5efa\u2f74\u5728\u865a\u62df\u673a\u4e4b\u4e0a\u7684\u7a0b\u5e8f\u8bed\u2f94\u5982\u2fac\u540e\u6625\u7b0b\u822c\u51fa\u73b0\u5e76\u84ec\u52c3\u53d1\u5c55\uff0c\u5c06\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u7f16\u8bd1\u6210\u2f06\u8fdb\u5236\u672c\u5730\u673a\u5668\u7801(Native Code)\u5df2\u4e0d\u518d\u662f\u552f\u2f00\u7684\u9009\u62e9\uff0c\u8d8a\u6765\u8d8a\u591a\u7684\u7a0b\u5e8f\u8bed\u2f94\u9009\u62e9\u4e86\u4e0e\u64cd\u4f5c\u7cfb\u7edf\u548c\u673a\u5668\u6307\u4ee4\u96c6\u2f46\u5173\u7684\u3001\u5e73\u53f0\u4e2d\u2f74\u7684\u683c\u5f0f\u4f5c\u4e3a\u7a0b\u5e8f\u7f16\u8bd1\u540e\u7684\u5b58\u50a8\u683c\u5f0f\u3002","title":"1 \u6982\u8ff0"},{"location":"java/ujvm/ch6/#2","text":"Java\u5728\u521a\u521a\u8bde\u2f63\u4e4b\u65f6\u66fe\u7ecf\u63d0\u51fa\u8fc7\u2f00\u4e2a\u2fae\u5e38\u8457\u540d\u7684\u5ba3\u4f20\u53e3\u53f7\uff1a\u201c\u2f00\u6b21\u7f16\u5199\uff0c\u5230\u5904\u8fd0\u2f8f\u201d(Write Once,Run Anywhere)\u3002Sun\u516c\u53f8\u4ee5\u53ca\u5176\u4ed6\u865a\u62df\u673a\u63d0\u4f9b\u5546\u53d1\u5e03\u4e86\u8bb8\u591a\u53ef\u4ee5\u8fd0\u2f8f\u5728\u5404\u79cd\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u865a\u62df\u673a\uff0c\u8fd9\u4e9b\u865a\u62df\u673a\u90fd\u53ef\u4ee5\u8f7d\u2f0a\u548c\u6267\u2f8f\u540c\u2f00\u79cd\u5e73\u53f0\u2f46\u5173\u7684\u5b57\u8282\u7801\uff0c\u4ece\u2f7d\u5b9e\u73b0\u4e86\u7a0b\u5e8f\u7684\u201c\u2f00\u6b21\u7f16\u5199\uff0c\u5230\u5904\u8fd0\u2f8f\u201d\u3002\u5b57\u8282\u7801(ByteCode)\u662f\u6784\u6210 \u5e73\u53f0\u2f46\u5173\u6027 \u7684\u57fa\u2f6f\u3002 \u8bed\u8a00\u65e0\u5173\u6027 \u662f\u6307\u5176\u4ed6\u8bed\u8a00\u4e5f\u8fd0\u884c\u5728Java\u865a\u62df\u673a\u4e4b\u4e0a\uff0c\u4f8b\u5982Clojure, Jython, Scala\u7b49\u3002\u5b9e\u73b0\u8bed\u2f94\u2f46\u5173\u6027\u7684\u57fa\u7840\u4ecd\u7136\u662f\u865a\u62df\u673a\u548c\u5b57\u8282\u7801\u5b58\u50a8\u683c\u5f0f\u3002Java\u865a\u62df\u673a\u4e0d\u548c\u5305\u62ecJava\u5728\u5185\u7684\u4efb\u4f55\u8bed\u2f94\u7ed1\u5b9a\uff0c\u5b83\u53ea\u4e0e\u201cClass\u2f42\u4ef6\u201d\u8fd9\u79cd\u7279\u5b9a\u7684\u2f06\u8fdb\u5236\u2f42\u4ef6\u683c\u5f0f\u6240\u5173\u8054\uff0cClass\u2f42\u4ef6\u4e2d\u5305\u542b\u4e86Java\u865a\u62df\u673a\u6307\u4ee4\u96c6\u548c\u7b26\u53f7\u8868\u4ee5\u53ca\u82e5\u2f32\u5176\u4ed6\u8f85\u52a9\u4fe1\u606f\u3002","title":"2 \u65e0\u5173\u6027\u7684\u57fa\u77f3"},{"location":"java/ujvm/ch6/#3-class","text":"Class\u6587\u4ef6\u662f\u4e00\u7ec4\u4ee58\u4f4d\u5b57\u8282\u4e3a\u57fa\u7840\u5355\u4f4d\u7684\u4e8c\u8fdb\u5236\u6d41\u3002\u5f53\u9047\u5230\u9700\u8981\u5360\u2f648\u4f4d\u5b57\u8282\u4ee5\u4e0a\u7a7a\u95f4\u7684\u6570\u636e\u9879\u65f6\uff0c\u4ee5Big-Endian\u65b9\u5f0f\u5b58\u50a8\u3002Class\u6587\u4ef6\u91c7\u7528\u4e00\u79cd\u7c7b\u4f3c\u4e8eC\u8bed\u8a00\u7ed3\u6784\u4f53\u7684\u4f2a\u7ed3\u6784\u6765\u5b58\u50a8\u6570\u636e\uff0c\u8fd9\u79cd\u4f2a\u7ed3\u6784\u4e2d\u53ea\u6709\u4e24\u79cd\u6570\u636e\u7c7b\u578b\uff1a\u65e0\u7b26\u53f7\u6570\u548c\u8868\u3002 \u2f46\u7b26\u53f7\u6570\u5c5e\u4e8e\u57fa\u672c\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4ee5u1\u3001u2\u3001u4\u3001u8\u6765\u5206\u522b\u4ee3\u88681\u30012\u30014\u548c8\u4e2a\u5b57\u8282\u7684\u2f46\u7b26\u53f7\u6570\uff0c\u2f46\u7b26\u53f7\u6570\u53ef\u4ee5\u2f64\u6765\u63cf\u8ff0\u6570\u5b57\u3001\u7d22\u5f15\u5f15\u2f64\u3001\u6570\u91cf\u503c\u6216\u8005\u6309\u7167UTF-8\u7f16\u7801\u6784\u6210\u5b57\u7b26\u4e32\u503c\u3002 \u8868\u662f\u7531\u591a\u4e2a\u2f46\u7b26\u53f7\u6570\u6216\u8005\u5176\u4ed6\u8868\u4f5c\u4e3a\u6570\u636e\u9879\u6784\u6210\u7684\u590d\u5408\u6570\u636e\u7c7b\u578b\uff0c\u6240\u6709\u8868\u90fd\u4e60\u60ef\u6027\u5730\u4ee5\u201c_info\u201d\u7ed3\u5c3e\u3002 Class\u6587\u4ef6\u683c\u5f0f\uff1a ClassFile { u4 magic ; u2 minor_version ; u2 major_version ; u2 constant_pool_count ; cp_info contant_pool [ constant_pool_count \u2013 1 ]; u2 access_flags ; u2 this_class ; u2 super_class ; u2 interfaces_count ; u2 interfaces [ interfaces_count ]; u2 fields_count ; field_info fields [ fields_count ]; u2 methods_count ; method_info methods [ methods_count ]; u2 attributes_count ; attribute_info attributes [ attributes_count ]; }","title":"3 Class\u7c7b\u6587\u4ef6\u7684\u7ed3\u6784"},{"location":"java/ujvm/ch6/#magic-number-and-version","text":"\u6bcf\u4e2aClass\u2f42\u4ef6\u7684\u59344\u4e2a\u5b57\u8282\u79f0\u4e3a \u9b54\u6570 (Magic Number)\uff0c\u5b83\u7684\u552f\u2f00\u4f5c\u2f64\u662f\u786e\u5b9a\u8fd9\u4e2a\u2f42\u4ef6\u662f\u5426\u4e3a\u2f00\u4e2a\u80fd\u88ab\u865a\u62df\u673a\u63a5\u53d7\u7684Class\u2f42\u4ef6\uff0c[\u53ef\u53c2\u8003 Magic Number in OSC ]\u3002Class\u2f42\u4ef6\u7684\u9b54\u6570\u7684\u83b7\u5f97\u5f88\u6709\u201c\u6d6a\u6f2b\u2f53\u606f\u201d\uff0c\u503c\u4e3a\uff1a0xCAFEBABE(\u5496\u5561\u5b9d\u8d1d\uff1f)\u3002 \u7d27\u63a5\u7740\u9b54\u6570\u76844\u4e2a\u5b57\u8282\u5b58\u50a8\u7684\u662fClass\u2f42\u4ef6\u7684\u7248\u672c\u53f7\uff1a\u7b2c5\u548c\u7b2c6\u4e2a\u5b57\u8282\u662f\u6b21\u7248\u672c\u53f7(Minor Version)\uff0c\u7b2c7\u548c\u7b2c8\u4e2a\u5b57\u8282\u662f\u4e3b\u7248\u672c\u53f7(Major Version)\u3002 \u4ee5\u4e0b\u9762\u7b80\u77ed\u7684Java\u4ee3\u7801\u4e3a\u4f8b\uff0c public class TestClass { private int m ; public int inc () { return m + 1 ; } } \u7f16\u8bd1\u540e\uff0c\u4f7f\u7528 Classpy \u6253\u5f00\uff0c \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528JDK\u5de5\u5177javap\u5206\u6790Class\u6587\u4ef6\u5b57\u8282\u7801\u3002 $ unstandingJVM / usr / bin / javap - c - verbose TestClass . class MD5 checksum ce62ee2f47f2ff81598bbcb156358747 Compiled from TestClass.java public class com . unstandingJVM . TestClass minor version : 0 major version : 53 flags : ( 0x0021 ) ACC_PUBLIC , ACC_SUPER this_class : # 3 // com/unstandingJVM/TestClass super_class : # 4 // java/lang/Object interfaces : 0 , fields : 1 , methods : 2 , attributes : 1 Constant pool : # 1 = Methodref # 4. # 18 // java/lang/Object. init :()V # 2 = Fieldref # 3. # 19 // com/unstandingJVM/TestClass.m:I # 3 = Class # 20 // com/unstandingJVM/TestClass # 4 = Class # 21 // java/lang/Object # 5 = Utf8 m # 6 = Utf8 I # 7 = Utf8 init # 8 = Utf8 () V # 9 = Utf8 Code # 10 = Utf8 LineNumberTable # 11 = Utf8 LocalVariableTable # 12 = Utf8 this # 13 = Utf8 Lcom / unstandingJVM / TestClass ; # 14 = Utf8 inc # 15 = Utf8 () I # 16 = Utf8 SourceFile # 17 = Utf8 TestClass . java # 18 = NameAndType # 7 : # 8 // init :()V # 19 = NameAndType # 5 : # 6 // m:I # 20 = Utf8 com / unstandingJVM / TestClass # 21 = Utf8 java / lang / Object { public com . unstandingJVM . TestClass (); descriptor : () V flags : ( 0x0001 ) ACC_PUBLIC Code : stack = 1 , locals = 1 , args_size = 1 0 : aload_0 1 : invokespecial # 1 // Method java/lang/Object. init :()V 4 : return LineNumberTable : line 3 : 0 LocalVariableTable : Start Length Slot Name Signature 0 5 0 this Lcom / unstandingJVM / TestClass ; public int inc (); descriptor : () I flags : ( 0x0001 ) ACC_PUBLIC Code : stack = 2 , locals = 1 , args_size = 1 0 : aload_0 1 : getfield # 2 // Field m:I 4 : iconst_1 5 : iadd 6 : ireturn LineNumberTable : line 6 : 0 LocalVariableTable : Start Length Slot Name Signature 0 7 0 this Lcom / unstandingJVM / TestClass ; } SourceFile: TestClass.java","title":"magic number and version"},{"location":"java/ujvm/ch6/#constant-pool","text":"\u7531\u4e8e\u5e38\u91cf\u6c60(constant pool)\u4e2d\u5e38\u91cf\u7684\u6570\u91cf\u662f\u4e0d\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5728\u5e38\u91cf\u6c60\u7684\u5165\u53e3\u9700\u8981\u653e\u7f6e\u9879u2\u7c7b\u578b\u7684\u6570\u636e\uff0c\u4ee3\u8868\u5e38\u91cf\u6c60\u5bb9\u91cf\u8ba1\u6570\u503c(constant_pool_count)\u3002\u5e38\u91cf\u6c60\u4e2d\u4e3b\u8981\u5b58\u653e\u4e24\u2f24\u7c7b\u5e38\u91cf\uff1a\u5b57\u2faf\u91cf(Literal)\u548c\u7b26\u53f7\u5f15\u2f64(Symbolic References)\u3002\u5b57\u2faf\u91cf\u2f50\u8f83\u63a5\u8fd1\u4e8eJava\u8bed\u2f94\u5c42\u2faf\u7684\u5e38\u91cf\u6982\u5ff5\uff0c\u5982\u2f42\u672c\u5b57\u7b26\u4e32\u3001\u58f0\u660e\u4e3afinal\u7684\u5e38\u91cf\u503c\u7b49\u3002\u2f7d\u7b26\u53f7\u5f15\u2f64\u5219\u5c5e\u4e8e\u7f16\u8bd1\u539f\u7406\u2f45\u2faf\u7684\u6982\u5ff5\uff0c\u5305\u62ec\u4e86\u4e0b\u2faf\u4e09\u7c7b\u5e38\u91cf\uff1a\u7c7b\u548c\u63a5\u53e3\u7684\u5168\u9650\u5b9a\u540d(Fully Qualified Name)\u3001\u5b57\u6bb5\u7684\u540d\u79f0\u548c\u63cf\u8ff0\u7b26(Descriptor)\uff0c\u2f45\u6cd5\u7684\u540d\u79f0\u548c\u63cf\u8ff0\u7b26\u3002","title":"constant pool"},{"location":"java/ujvm/ch6/#access_flags","text":"\u5728\u5e38\u91cf\u6c60\u7ed3\u675f\u4e4b\u540e\uff0c\u7d27\u63a5\u7740\u7684\u4e24\u4e2a\u5b57\u8282\u4ee3\u8868access_flags(\u8bbf\u95ee\u6807\u5fd7)\uff0c\u8fd9\u4e2a\u6807\u5fd7\u2f64\u4e8e\u8bc6\u522b\u2f00\u4e9b\u7c7b\u6216\u8005\u63a5\u2f1c\u5c42\u6b21\u7684\u8bbf\u95ee\u4fe1\u606f\uff0c\u5305\u62ec\uff1a\u8fd9\u4e2aClass\u662f\u7c7b\u8fd8\u662f\u63a5\u53e3\uff1b\u662f\u5426\u5b9a\u4e49\u4e3apublic\u7c7b\u578b\uff1b\u662f\u5426\u5b9a\u4e49\u4e3aabstract\u7c7b\u578b\uff1b\u5982\u679c\u662f\u7c7b\u7684\u8bdd\uff0c\u662f\u5426\u88ab\u58f0\u660e\u4e3afinal\u7b49\u3002","title":"access_flags"},{"location":"java/ujvm/ch6/#_1","text":"\u7c7b\u7d22\u5f15(this_class)\u548c\u2f57\u7c7b\u7d22\u5f15(super_class)\u90fd\u662f\u2f00\u4e2au2\u7c7b\u578b\u7684\u6570\u636e\uff0c\u2f7d\u63a5\u53e3\u7d22\u5f15\u96c6\u5408(interfaces)\u662f\u2f00\u7ec4u2\u7c7b\u578b\u7684\u6570\u636e\u7684\u96c6\u5408\uff0cClass\u2f42\u4ef6\u4e2d\u7531\u8fd9\u4e09\u9879\u6570\u636e\u6765\u786e\u5b9a\u8fd9\u4e2a\u7c7b\u7684\u7ee7\u627f\u5173\u7cfb\u3002","title":"\u7c7b\u7d22\u5f15\u3001\u2f57\u7c7b\u7d22\u5f15\u4e0e\u63a5\u53e3\u7d22\u5f15\u96c6\u5408"},{"location":"java/ujvm/ch6/#field_info","text":"field_info(\u5b57\u6bb5\u8868)\u2f64\u4e8e\u63cf\u8ff0\u63a5\u53e3\u6216\u8005\u7c7b\u4e2d\u58f0\u660e\u7684\u53d8\u91cf\u3002 \u5b57\u6bb5\u4fee\u9970\u7b26\u653e\u5728access_flags\u4e2d\uff0c\u5305\u542bACC_PUBLIC(\u5b57\u6bb5\u662f\u5426public)\u3001ACC_PRIVATE(\u5b57\u6bb5\u662f\u5426private)\u3001ACC_PROTECTED(\u5b57\u6bb5\u662f\u5426protected)\u3001ACC_STATIC(\u5b57\u6bb5\u662f\u5426static) \u3001ACC_VOLATILE(\u5b57\u6bb5\u662f\u5426volatile)\u7b49\u3002 name_index \u548c descriptor_index \u90fd\u662f\u5bf9\u5e38\u91cf\u6c60\u7684\u5f15\u2f64\uff0c\u5206\u522b\u4ee3\u8868\u7740\u5b57\u6bb5\u7684\u7b80\u5355\u540d\u79f0\u4ee5\u53ca\u5b57\u6bb5\u548c\u2f45\u6cd5\u7684\u63cf\u8ff0\u7b26\u3002 \u63cf\u8ff0\u7b26\u7684\u4f5c\u7528\u5219\u662f\u7528\u6765\u63cf\u8ff0\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u3001\u65b9\u6cd5\u7684\u53c2\u6570\u5217\u8868\uff08\u5305\u62ec\u6570\u91cf\u3001\u7c7b\u578b\u4ee5\u53ca\u987a\u5e8f\u7b49\uff09\u548c\u8fd4\u56de\u503c\u7684\u3002\u6839\u636e\u63cf\u8ff0\u7b26\u89c4\u5219\uff0c\u8be6\u7ec6\u7684\u63cf\u8ff0\u7b26\u6807\u793a\u5b57\u7684\u542b\u4e49\u5982\u4e0b\u8868\u6240\u793a\uff1a TestClass\u7684filed_info:","title":"field_info"},{"location":"java/ujvm/ch6/#method_info","text":"Class\u2f42\u4ef6\u5b58\u50a8\u683c\u5f0f\u4e2d\u5bf9\u2f45\u6cd5\u7684\u63cf\u8ff0\u4e0e\u5bf9\u5b57\u6bb5\u7684\u63cf\u8ff0\u2f0f\u4e4e\u91c7\u2f64\u4e86\u5b8c\u5168\u2f00\u81f4\u7684\u2f45\u5f0f\uff0cmethod_info(\u2f45\u6cd5\u8868)\u7684\u7ed3\u6784\u5982\u540c\u5b57\u6bb5\u8868\u2f00\u6837\uff0c\u4f9d\u6b21\u5305\u62ec\u4e86\u8bbf\u95ee\u6807\u5fd7(access_flags)\u3001\u540d\u79f0\u7d22\u5f15(name_index)\u3001\u63cf\u8ff0\u7b26\u7d22\u5f15(descriptor_index)\u3001\u5c5e\u6027\u8868\u96c6\u5408\uff08attributes\uff09\u2f0f\u9879\u3002 \u2f45\u6cd5\u2fa5\u7684Java\u4ee3\u7801\uff0c\u7ecf\u8fc7\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210\u5b57\u8282\u7801\u6307\u4ee4\u540e\uff0c\u5b58\u653e\u5728\u2f45\u6cd5attribute_info(\u5c5e\u6027\u8868\u96c6\u5408)\u4e2d\u2f00\u4e2a\u540d\u4e3a\u201cCode\u201d\u7684\u5c5e\u6027\u2fa5\u2faf\u3002","title":"method_info"},{"location":"java/ujvm/ch6/#attribute_info","text":"Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u9884\u5b9a\u4e49\u4e869\u9879\u865a\u62df\u673a\u5e94\u5f53\u80fd\u8bc6\u522b\u7684\u5c5e\u6027\uff08JDK1.5\u540e\u53c8\u589e\u52a0\u4e86\u4e00\u4e9b\u65b0\u7684\u7279\u6027\uff0c\u56e0\u6b64\u4e0d\u6b62\u4e0b\u97629\u9879\uff0c\u4f46\u4e0b\u97629\u9879\u662f\u6700\u57fa\u672c\u4e5f\u662f\u5fc5\u8981\uff0c\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\uff09\uff0c\u5982\u4e0b\u8868\u6240\u793a\uff1a","title":"attribute_info"},{"location":"java/ujvm/ch6/#4","text":"Java\u865a\u62df\u673a\u7684\u6307\u4ee4\u7531\u2f00\u4e2a\u5b57\u8282\u957f\u5ea6\u7684\u3001\u4ee3\u8868\u7740\u67d0\u79cd\u7279\u5b9a\u64cd\u4f5c\u542b\u4e49\u7684\u6570\u5b57(\u79f0\u4e3a \u64cd\u4f5c\u7801 \uff0cOpcode)\u4ee5\u53ca\u8ddf\u968f\u5176\u540e\u7684\u96f6\u2f84\u591a\u4e2a\u4ee3\u8868\u6b64\u64cd\u4f5c\u6240\u9700\u53c2\u6570(\u79f0\u4e3a \u64cd\u4f5c\u6570 \uff0cOperands)\u2f7d\u6784\u6210\u3002","title":"4 \u5b57\u8282\u7801\u6307\u4ee4\u7b80\u4ecb"},{"location":"java/ujvm/ch6/#5","text":"\u7406\u89e3\u516c\u6709\u8bbe\u8ba1\u4e0e\u79c1\u6709\u5b9e\u73b0\u4e4b\u95f4\u7684\u5206\u754c\u7ebf\u662f\u2fae\u5e38\u6709\u5fc5\u8981\u7684\uff0cJava\u865a\u62df\u673a\u5b9e\u73b0\u5fc5\u987b\u80fd\u591f\u8bfb\u53d6Class\u2f42\u4ef6\u5e76\u7cbe\u786e\u5b9e\u73b0\u5305\u542b\u5728\u5176\u4e2d\u7684Java\u865a\u62df\u673a\u4ee3\u7801\u7684\u8bed\u4e49\u3002\u62ff\u7740Java\u865a\u62df\u673a\u89c4\u8303\u2f00\u6210\u4e0d\u53d8\u5730\u9010\u5b57\u5b9e\u73b0\u5176\u4e2d\u8981\u6c42\u7684\u5185\u5bb9\u5f53\u7136\u662f\u2f00\u79cd\u53ef\u2f8f\u7684\u9014\u5f84\uff0c\u4f46\u2f00\u4e2a\u4f18\u79c0\u7684\u865a\u62df\u673a\u5b9e\u73b0\uff0c\u5728\u6ee1\u2f9c\u865a\u62df\u673a\u89c4\u8303\u7684\u7ea6\u675f\u4e0b\u5bf9\u5177 \u4f53\u5b9e\u73b0\u505a\u51fa\u4fee\u6539\u548c\u4f18\u5316\u4e5f\u662f\u5b8c\u5168\u53ef\u2f8f\u7684\uff0c\u5e76\u4e14\u865a\u62df\u673a\u89c4\u8303\u4e2d\u660e\u786e\u2fce\u52b1\u5b9e\u73b0\u8005\u8fd9\u6837\u505a\u3002 \u865a\u62df\u673a\u5b9e\u73b0\u7684\u2f45\u5f0f\u4e3b\u8981\u6709\u4ee5\u4e0b\u4e24\u79cd\uff1a \u5c06\u8f93\u2f0a\u7684Java\u865a\u62df\u673a\u4ee3\u7801\u5728\u52a0\u8f7d\u6216\u6267\u2f8f\u65f6\u7ffb\u8bd1\u6210\u53e6\u5916\u2f00\u79cd\u865a\u62df\u673a\u7684\u6307\u4ee4\u96c6\u3002 \u5c06\u8f93\u2f0a\u7684Java\u865a\u62df\u673a\u4ee3\u7801\u5728\u52a0\u8f7d\u6216\u6267\u2f8f\u65f6\u7ffb\u8bd1\u6210\u5bbf\u4e3b\u673aCPU\u7684\u672c\u5730\u6307\u4ee4\u96c6\uff08\u5373JIT\u4ee3\u7801\u2f63\u6210\u6280\u672f\uff09\u3002","title":"5 \u5171\u6709\u8bbe\u8ba1\u548c\u79c1\u6709\u8bbe\u8ba1"},{"location":"java/ujvm/ch6/#6-class","text":"\u76f8\u5bf9\u4e8e\u8bed\u2f94\u3001API\u4ee5\u53caJava\u6280\u672f\u4f53\u7cfb\u4e2d\u5176\u4ed6\u2f45\u2faf\u7684\u53d8\u5316\uff0cClass\u2f42\u4ef6\u7ed3\u6784\u2f00\u76f4\u5904\u4e8e\u2f50\u8f83\u7a33\u5b9a\u7684\u72b6\u6001\uff0cClass\u2f42\u4ef6\u7684\u4e3b\u4f53\u7ed3\u6784\u3001\u5b57\u8282\u7801\u6307\u4ee4\u7684\u8bed\u4e49\u548c\u6570\u91cf\u2f0f\u4e4e\u6ca1\u6709\u51fa\u73b0\u8fc7\u53d8\u52a8\uff0c\u6240\u6709\u5bf9Class\u2f42\u4ef6\u683c\u5f0f\u7684\u6539\u8fdb\uff0c\u90fd\u96c6\u4e2d\u5728\u5411\u8bbf\u95ee\u6807\u5fd7\u3001\u5c5e\u6027\u8868\u8fd9\u4e9b\u5728\u8bbe\u8ba1\u4e0a\u5c31\u53ef\u6269\u5c55\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u6dfb\u52a0\u5185\u5bb9\u3002","title":"6 Class\u6587\u4ef6\u7ed3\u6784\u7684\u53d1\u5c55"},{"location":"java/ujvm/ch7/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 7 - \u865a\u62df\u673a\u7c7b\u52a0\u8f7d\u673a\u5236 1 \u6982\u8ff0 \u865a\u62df\u673a\u7684\u7c7b\u52a0\u8f7d\u673a\u5236\u662f\u6307\uff0c\u865a\u62df\u673a\u628a\u63cf\u8ff0\u7c7b\u7684\u6570\u636e\u4eceClass\u2f42\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u2f8f\u6821\u9a8c\u3001 \u8f6c\u6362\u89e3\u6790\u548c\u521d\u59cb\u5316\uff0c\u6700\u7ec8\u5f62\u6210\u53ef\u4ee5\u88ab\u865a\u62df\u673a\u76f4\u63a5\u4f7f\u2f64\u7684Java\u7c7b\u578b\u3002 \u4e0e\u90a3\u4e9b\u5728\u7f16\u8bd1\u65f6\u9700\u8981\u8fdb\u2f8f\u94fe\u63a5\u7684\u8bed\u2f94\u4e0d\u540c\uff0c\u5728Java\u8bed\u2f94\u2fa5\u2faf\uff0c\u7c7b\u578b\u7684\u52a0\u8f7d\u3001\u94fe\u63a5\u548c\u521d\u59cb\u5316\u8fc7\u7a0b\u90fd\u662f\u5728\u7a0b\u5e8f\u8fd0\u2f8f\u671f\u95f4\u5b8c\u6210\u7684\uff0c\u8fd9\u79cd\u7b56\u7565\u867d\u7136\u4f1a\u4ee4\u7c7b\u52a0\u8f7d\u65f6\u7a0d\u5fae\u589e\u52a0\u2f00\u4e9b\u6027\u80fd\u5f00\u9500\uff0c\u4f46\u662f\u4f1a\u4e3aJava\u5e94\u2f64\u7a0b\u5e8f\u63d0\u4f9b\u2fbc\u5ea6\u7684\u7075\u6d3b\u6027\uff0cJava\u2fa5\u5929\u2f63\u53ef\u4ee5\u52a8\u6001\u6269\u5c55\u7684\u8bed\u2f94\u7279\u6027\u5c31\u662f\u4f9d\u8d56\u8fd0\u2f8f\u671f\u52a8\u6001\u52a0\u8f7d\u548c\u52a8\u6001\u94fe\u63a5\u8fd9\u4e2a\u7279\u70b9\u5b9e\u73b0\u7684\u3002 2 \u7c7b\u52a0\u8f7d\u7684\u65f6\u673a \u7c7b\u4ece\u88ab\u52a0\u8f7d\u5230\u865a\u62df\u673a\u5185\u5b58\u4e2d\u5f00\u59cb\uff0c\u5230\u5378\u8f7d\u51fa\u5185\u5b58\u4e3a\u2f4c\uff0c\u5b83\u7684\u6574\u4e2a\u2f63\u547d\u5468\u671f\u5305\u62ec\uff1a\u52a0\u8f7d(Loading)\u3001\u9a8c\u8bc1(Verification)\u3001\u51c6\u5907(Preparation)\u3001\u89e3\u6790(Resolution)\u3001\u521d\u59cb\u5316(Initialization)\u3001\u4f7f\u2f64(Using)\u548c\u5378\u8f7d(Unloading)7\u4e2a\u9636\u6bb5\u3002 \u5bf9\u4e8e\u521d\u59cb\u5316\u9636\u6bb5\uff0c\u865a\u62df\u673a\u89c4\u8303\u4e25\u683c\u89c4\u5b9a\u4e86\u6709\u4e14\u53ea\u67095\u79cd\u60c5\u51b5\u5fc5\u987b\u2f74\u5373\u5bf9\u7c7b\u8fdb\u2f8f\u201c\u521d\u59cb\u5316\u201d\uff1a \u9047\u5230 new \u3001 getstatic \u3001 putstatic \u6216 invokestatic \u8fd94\u6761\u5b57\u8282\u7801\u6307\u4ee4\u65f6\uff0c\u5982\u679c\u7c7b\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002\u2f63\u6210\u8fd94\u6761\u6307\u4ee4\u7684\u6700\u5e38\u89c1\u7684Java\u4ee3\u7801\u573a\u666f\u662f\uff1a\u4f7f\u2f64 new \u5173\u952e\u5b57\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65f6\u5019\u3001\u8bfb\u53d6\u6216\u8bbe\u7f6e\u2f00\u4e2a\u7c7b\u7684\u9759\u6001\u5b57\u6bb5(\u88abfinal\u4fee\u9970\u3001\u5df2\u5728\u7f16\u8bd1\u671f\u628a\u7ed3\u679c\u653e\u2f0a\u5e38\u91cf\u6c60\u7684\u9759\u6001\u5b57\u6bb5\u9664\u5916)\u7684\u65f6\u5019\uff0c\u4ee5\u53ca\u8c03\u2f64\u2f00\u4e2a\u7c7b\u7684\u9759\u6001\u2f45\u6cd5\u7684\u65f6\u5019\u3002 \u4f7f\u2f64 java.lang.reflect \u5305\u7684\u2f45\u6cd5\u5bf9\u7c7b\u8fdb\u2f8f\u53cd\u5c04\u8c03\u2f64\u7684\u65f6\u5019\uff0c\u5982\u679c\u7c7b\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002 \u5f53\u521d\u59cb\u5316\u2f00\u4e2a\u7c7b\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u73b0\u5176\u2f57\u7c7b\u8fd8\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u2f57\u7c7b\u7684\u521d\u59cb\u5316\u3002 \u5f53\u865a\u62df\u673a\u542f\u52a8\u65f6\uff0c\u2f64\u6237\u9700\u8981\u6307\u5b9a\u2f00\u4e2a\u8981\u6267\u2f8f\u7684\u4e3b\u7c7b(\u5305\u542b main() \u2f45\u6cd5\u7684\u90a3\u4e2a\u7c7b)\uff0c\u865a\u62df\u673a\u4f1a\u5148\u521d\u59cb\u5316\u8fd9\u4e2a\u4e3b\u7c7b\u3002 \u5f53\u4f7f\u2f64JDK 1.7\u7684\u52a8\u6001\u8bed\u2f94\u2f40\u6301\u65f6\uff0c\u5982\u679c\u2f00\u4e2a java.lang.invoke.MethodHandle \u5b9e\u4f8b\u6700\u540e\u7684\u89e3\u6790\u7ed3\u679cREF_getStatic\u3001 REF_putStatic\u3001REF_invokeStatic\u7684\u2f45\u6cd5\u53e5\u67c4\uff0c\u5e76\u4e14\u8fd9\u4e2a\u2f45\u6cd5\u53e5\u67c4\u6240\u5bf9\u5e94\u7684\u7c7b\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002 \"\u6709\u4e14\u53ea\u6709\"\u8fd95\u79cd\u573a\u666f\u4e2d\u7684\u2f8f\u4e3a\u79f0\u4e3a\u5bf9\u2f00\u4e2a\u7c7b\u8fdb\u2f8f \u4e3b\u52a8\u5f15\u2f64 \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6240\u6709\u5f15\u2f64\u7c7b\u7684\u2f45\u5f0f\u90fd\u4e0d\u4f1a\u89e6\u53d1\u521d\u59cb\u5316\uff0c\u79f0\u4e3a \u88ab\u52a8\u5f15\u2f64 \u3002 \u4e0a\u8ff0\u4ee3\u7801\u8fd0\u2f8f\u4e4b\u540e\uff0c\u53ea\u4f1a\u8f93\u51fa\"SuperClass init!\"\uff0c\u2f7d\u4e0d\u4f1a\u8f93 \u51fa\"SubClass init!\"\u3002\u53ef\u901a\u8fc7 -Xlog:class+load=info \u6253\u5370\u7c7b\u52a0\u8f7d\u4fe1\u606f\u3002 Java //\u88ab\u52a8\u4f7f\u7528\u7c7b\u5b57\u6bb5\u6f14\u793a\u4e00\uff1a\u901a\u8fc7\u5b50\u7c7b\u5f15\u7528\u7236\u7c7b\u7684\u9759\u6001\u5b57\u6bb5\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u5b50\u7c7b\u521d\u59cb\u5316 public class NotInitialization1 { public static void main ( String [] args ) { System . out . println ( SubClass . value ); } } class SuperClass { static { System . out . println ( SuperClass init! ); } public static int value = 123 ; } class SubClass extends SuperClass { static { System . out . println ( SubClass init! ); } } Java // \u88ab\u52a8\u4f7f\u7528\u7c7b\u5b57\u6bb5\u6f14\u793a\u4e8c\uff1a\u901a\u8fc7\u6570\u7ec4\u5b9a\u4e49\u6765\u5f15\u7528\u7c7b\uff0c\u4e0d\u4f1a\u89e6\u53d1\u6b64\u7c7b\u7684\u521d\u59cb\u5316 public class NotInitialization2 { public static void main ( String [] args ) { SuperClass [] sca = new SuperClass [ 10 ]; } } 3 \u7c7b\u52a0\u8f7d\u7684\u8fc7\u7a0b \u52a0\u8f7d Loading is the process of finding the class file that represents the class or interface type with a particular name and reading it into a byte array. Next the bytes are parsed to confirm they represent a Class object and have the correct major and minor versions. Any class or interface named as a direct superclass is also loaded. Once this is completed a class or interface object is created from the binary representation. \u52a0\u8f7d\u662f\u7c7b\u52a0\u8f7d(Class Loading)\u8fc7\u7a0b\u7684\u2f00\u4e2a\u9636\u6bb5\uff0c\u865a\u62df\u673a\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b3\u4ef6\u4e8b\u60c5\uff1a \u901a\u8fc7\u2f00\u4e2a\u7c7b\u7684\u5168\u9650\u5b9a\u540d\u6765\u83b7\u53d6\u5b9a\u4e49\u6b64\u7c7b\u7684\u2f06\u8fdb\u5236\u5b57\u8282\u6d41\u3002 \u5c06\u8fd9\u4e2a\u5b57\u8282\u6d41\u6240\u4ee3\u8868\u7684\u9759\u6001\u5b58\u50a8\u7ed3\u6784\u8f6c\u5316\u4e3a\u2f45\u6cd5\u533a\u7684\u8fd0\u2f8f\u65f6\u6570\u636e\u7ed3\u6784\u3002 \u5728\u5185\u5b58\u4e2d\u2f63\u6210\u2f00\u4e2a\u4ee3\u8868\u8fd9\u4e2a\u7c7b\u7684 java.lang.Class \u5bf9\u8c61\uff0c\u4f5c\u4e3a\u2f45\u6cd5\u533a\u8fd9\u4e2a\u7c7b\u7684\u5404\u79cd\u6570\u636e\u7684\u8bbf\u95ee\u2f0a\u53e3\u3002 \u7b2c\u4e00\u6761\u4e2d\u7684\u83b7\u53d6\u4e8c\u8fdb\u5236\u5b57\u8282\u6d41\u53ef\u4ee5\u4ece\u591a\u4e2a\u5730\u65b9\u83b7\u53d6\u3002\u4f8b\u5982ZIP\u5305(JAR)\uff0c\u7f51\u7edc(Applet)\uff0c\u8fd0\u884c\u65f6\u8ba1\u7b97\u751f\u6210( java.lang.refelct.Proxy )\u7b49\u3002 \u9a8c\u8bc1 \u9a8c\u8bc1\u662f\u4e3a\u4e86\u786e\u4fddClass\u2f42\u4ef6\u7684\u5b57\u8282\u6d41\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u7b26\u5408\u5f53\u524d\u865a\u62df\u673a\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5371\u5bb3\u865a\u62df\u673a\u2f83\u2f9d\u7684\u5b89\u5168\u3002 \u867d\u7136Java\u8bed\u2f94\u672c\u2f9d\u662f\u76f8\u5bf9\u5b89\u5168\u7684\u8bed\u2f94\uff0c\u4f46\u662fClass\u2f42\u4ef6\u5e76\u4e0d\u2f00\u5b9a\u8981\u6c42\u2f64Java\u7f16\u8bd1\u2f7d\u6765\uff0c\u5b83\u53ef\u4ee5\u4f7f\u2f64\u4efb\u4f55\u9014\u5f84\u4ea7\u2f63\uff0c\u751a\u2f84\u5305\u62ec\u2f64\u2f17\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u76f4\u63a5\u7f16\u5199\u6765\u4ea7\u2f63Class\u2f42\u4ef6\u3002\u865a\u62df\u673a\u5982\u679c\u4e0d\u68c0\u67e5\u8f93 \u2f0a\u7684\u5b57\u8282\u6d41\uff0c\u5bf9\u5176\u5b8c\u5168\u4fe1\u4efb\u7684\u8bdd\uff0c\u5f88\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8f7d\u2f0a\u4e86\u6709\u5bb3\u7684\u5b57\u8282\u6d41\u2f7d\u5bfc\u81f4\u7cfb\u7edf\u5d29\u6e83\u3002 \u2f42\u4ef6\u683c\u5f0f\u9a8c\u8bc1\uff1a\u9a8c\u8bc1\u5b57\u8282\u6d41\u662f\u5426\u7b26\u5408Class\u2f42\u4ef6\u683c\u5f0f\u7684\u89c4\u8303\uff0c\u5e76\u4e14\u80fd\u88ab\u5f53\u524d \u7248\u672c\u7684\u865a\u62df\u673a\u5904\u7406\u3002 \u5143\u6570\u636e\u9a8c\u8bc1\uff1a\u5bf9\u5b57\u8282\u7801\u63cf\u8ff0\u7684\u4fe1\u606f\u8fdb\u2f8f\u8bed\u4e49\u5206\u6790\uff0c\u4ee5\u4fdd\u8bc1\u5176\u63cf\u8ff0\u7684\u4fe1\u606f\u7b26\u5408Java\u8bed\u2f94\u89c4\u8303\u7684\u8981\u6c42\uff0c \u51c6\u5907 Preparing involves allocation of memory for static storage and any data structures used by the JVM such as method tables. Static fields are created and initialized to their default values, however, no initializers or code is executed at this stage as that happens as part of initialization. \u51c6\u5907\u9636\u6bb5\u4e3a\u7c7b\u53d8\u91cf\u5206\u914d\u5185\u5b58\u5e76\u8bbe\u7f6e\u7c7b\u53d8\u91cf(\u4ec5\u5305\u62ec\u88ab\u88abstatic\u4fee\u9970\u7684\u53d8\u91cf)\u521d\u59cb\u503c\uff0c\u8fd9\u4e9b\u53d8\u91cf\u6240\u4f7f\u2f64\u7684\u5185\u5b58\u90fd\u5c06\u5728\u2f45\u6cd5\u533a\u4e2d\u8fdb\u2f8f\u5206\u914d\u3002\u5b9e\u529b\u53d8\u91cf\u5c06\u4f1a\u5728\u5bf9\u8c61\u5b9e\u4f8b\u5316\u65f6\u968f\u7740\u5bf9\u8c61\u4e00\u8d77\u5206\u914d\u5728Java\u5806\u4e2d\u3002\u521d\u59cb\u503c\u901a\u5e38\u60c5\u51b5\u4e0b\u662f\u6570\u636e\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c. public static int value = 123 ; //\u521d\u59cb\u503c\u4e3a0 \u5982\u679c\u7c7b\u5b57\u6bb5\u7684\u5b57\u6bb5\u5c5e\u6027\u8868\u4e2d\u5b58\u5728ConstantValue\u5c5e\u6027\uff0c\u90a3\u5728\u51c6\u5907\u9636\u6bb5\u53d8\u91cfvalue\u5c31\u4f1a\u88ab\u521d\u59cb\u5316\u4e3aConstantValue\u5c5e\u6027\u6240\u6307\u5b9a\u7684\u503c\uff1a public static final int value = 123 ; // \u521d\u59cb\u503c\u4e3a123 \u89e3\u6790 \u89e3\u6790\u9636\u6bb5\u5c06\u5e38\u91cf\u6c60\u5185\u7684\u7b26\u53f7\u5f15\u2f64\u66ff\u6362\u4e3a\u76f4\u63a5\u5f15\u2f64\u3002 \u7b26\u53f7\u5f15\u2f64 (Symbolic References):\u7b26\u53f7\u5f15\u2f64\u4ee5\u2f00\u7ec4\u7b26\u53f7\u6765\u63cf\u8ff0\u6240\u5f15\u2f64\u7684\u2f6c\u6807\uff0c\u7b26\u53f7\u53ef\u4ee5\u662f\u4efb\u4f55\u5f62\u5f0f\u7684\u5b57\u2faf\u91cf\uff0c\u53ea\u8981\u4f7f\u2f64\u65f6\u80fd\u2f46\u6b67\u4e49\u5730\u5b9a\u4f4d\u5230\u2f6c\u6807\u5373\u53ef\u3002\u7b26\u53f7\u5f15\u2f64\u4e0e\u865a\u62df\u673a\u5b9e\u73b0\u7684\u5185\u5b58\u5e03\u5c40\u2f46\u5173\uff0c\u5f15\u2f64\u7684\u2f6c\u6807\u5e76\u4e0d\u2f00\u5b9a\u5df2\u7ecf\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u5404\u79cd\u865a\u62df\u673a\u5b9e\u73b0\u7684\u5185\u5b58\u5e03\u5c40\u53ef\u4ee5\u5404\u4e0d\u76f8\u540c\uff0c\u4f46\u662f\u5b83\u4eec\u80fd\u63a5\u53d7\u7684\u7b26\u53f7\u5f15\u2f64\u5fc5\u987b\u90fd\u662f\u2f00\u81f4\u7684\uff0c\u56e0\u4e3a\u7b26\u53f7\u5f15\u2f64\u7684\u5b57\u2faf\u91cf\u5f62\u5f0f\u660e\u786e\u5b9a\u4e49 \u5728Java\u865a\u62df\u673a\u89c4\u8303\u7684Class\u2f42\u4ef6\u683c\u5f0f\u4e2d\u3002 \u76f4\u63a5\u5f15\u2f64 (Direct References): \u76f4\u63a5\u5f15\u2f64\u53ef\u4ee5\u662f\u76f4\u63a5\u6307\u5411\u2f6c\u6807\u7684\u6307\u9488\u3001\u76f8\u5bf9\u504f\u79fb\u91cf\u6216\u662f\u2f00\u4e2a\u80fd\u95f4\u63a5\u5b9a\u4f4d\u5230\u2f6c\u6807\u7684\u53e5\u67c4\u3002\u76f4\u63a5\u5f15\u2f64\u662f\u548c\u865a\u62df\u673a\u5b9e\u73b0\u7684\u5185\u5b58\u5e03\u5c40\u76f8\u5173\u7684\uff0c\u540c\u2f00\u4e2a\u7b26\u53f7\u5f15\u2f64\u5728\u4e0d\u540c\u865a\u62df\u673a\u5b9e\u4f8b\u4e0a\u7ffb\u8bd1\u51fa\u6765\u7684\u76f4\u63a5\u5f15\u2f64\u2f00\u822c\u4e0d\u4f1a\u76f8\u540c\u3002\u5982\u679c\u6709\u4e86\u76f4\u63a5\u5f15\u2f64\uff0c\u90a3\u5f15\u2f64\u7684\u2f6c\u6807\u5fc5\u5b9a\u5df2\u7ecf\u5728\u5185 \u5b58\u4e2d\u5b58\u5728\u3002 \u521d\u59cb\u5316 Initialization of a class or interface consists of executing the class or interface initialization method clinit . What is the difference between init and clinit ? StackOverflow init is the (or one of the) constructor(s) for the instance, and non-static field initialization. clinit are the static initialization blocks for the class, and static field initialization. class X { static Log log = LogFactory . getLog (); // clinit private int x = 1 ; // init X (){ // init } static { // clinit } } 4 \u7c7b\u52a0\u8f7d\u5668 \u7c7b\u4e0e\u7c7b\u52a0\u8f7d\u5668 \u5bf9\u4e8e\u4efb\u610f\u2f00\u4e2a\u7c7b\uff0c\u90fd\u9700\u8981\u7531\u52a0\u8f7d\u5b83\u7684\u7c7b\u52a0\u8f7d\u5668\u548c\u8fd9\u4e2a\u7c7b\u672c\u2f9d\u2f00\u540c\u786e\u2f74\u5176\u5728Java\u865a\u62df\u673a\u4e2d\u7684\u552f\u2f00\u6027\uff0c\u6bcf\u2f00\u4e2a\u7c7b\u52a0\u8f7d\u5668\uff0c \u90fd\u62e5\u6709\u2f00\u4e2a\u72ec\u2f74\u7684\u7c7b\u540d\u79f0\u7a7a\u95f4\u3002 \u2f50\u8f83\u4e24\u4e2a\u7c7b\u662f\u5426\u201c\u76f8\u7b49\u201d\uff0c\u53ea\u6709\u5728\u8fd9\u4e24\u4e2a\u7c7b\u662f\u7531\u540c\u2f00\u4e2a\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u7684\u524d\u63d0\u4e0b\u624d\u6709\u610f\u4e49\uff0c\u5426\u5219\uff0c\u5373\u4f7f\u8fd9\u4e24\u4e2a\u7c7b\u6765\u6e90\u4e8e\u540c\u2f00\u4e2aClass\u2f42\u4ef6\uff0c\u88ab\u540c\u2f00\u4e2a\u865a\u62df\u673a\u52a0\u8f7d\uff0c\u53ea\u8981\u52a0\u8f7d\u5b83\u4eec\u7684\u7c7b\u52a0\u8f7d\u5668\u4e0d\u540c\uff0c\u90a3\u8fd9\u4e24\u4e2a\u7c7b\u5c31\u5fc5\u5b9a\u4e0d\u76f8\u7b49\u3002 \u4e0d\u540c\u7684\u7c7b\u52a0\u8f7d\u5668\u5bf9 instanceof \u5173\u952e\u5b57\u8fd0\u7b97\u7684\u7ed3\u679c\u7684\u5f71\u54cd\uff1a import java.io.IOException ; import java.io.InputStream ; //\u7c7b\u52a0\u8f7d\u5668\u4e0einstanceof\u5173\u952e\u5b57\u6f14\u793a public class ClassLoaderTest { public static void main ( String [] args ) throws Exception { ClassLoader myLoader = new ClassLoader () { @Override public Class ? loadClass ( String name ) throws ClassNotFoundException { try { String fileName = name . substring ( name . lastIndexOf ( . ) + 1 ) + .class ; InputStream is = getClass (). getResourceAsStream ( fileName ); if ( is == null ) { return super . loadClass ( name ); } byte [] b = new byte [ is . available ()]; is . read ( b ); return defineClass ( name , b , 0 , b . length ); } catch ( IOException e ) { throw new ClassNotFoundException ( name ); } } }; Object obj = myLoader . loadClass ( com.unstandingJVM.ClassLoaderTest ). newInstance (); System . out . println ( obj . getClass ()); System . out . println ( obj instanceof com . unstandingJVM . ClassLoaderTest ); } } \u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b \u4eceJava\u865a\u62df\u673a\u7684\u89d2\u5ea6\u6765\u8bb2\uff0c\u53ea\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u7684\u7c7b\u52a0\u8f7d\u5668\uff1a\u2f00\u79cd\u662f\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668(Bootstrap ClassLoader)\uff0c\u8fd9\u4e2a\u7c7b\u52a0\u8f7d\u5668\u4f7f\u2f64C++\u8bed\u2f94\u5b9e\u73b0 \uff0c\u662f\u865a\u62df\u673a\u2f83\u2f9d\u7684\u2f00\u90e8\u5206\uff1b\u53e6\u2f00\u79cd\u5c31\u662f\u6240\u6709\u5176\u4ed6\u7684\u7c7b\u52a0\u8f7d\u5668\uff0c\u8fd9\u4e9b\u7c7b\u52a0\u8f7d\u5668\u90fd\u7531Java\u8bed\u2f94\u5b9e\u73b0\uff0c\u72ec\u2f74\u4e8e\u865a\u62df\u673a\u5916\u90e8\uff0c\u5e76\u4e14\u5168\u90fd\u7ee7\u627f\u2f83\u62bd\u8c61\u7c7b java.lang.ClassLoader \u3002\u7c7b\u52a0\u8f7d\u5668\u4e4b\u95f4\u7684\u8fd9\u79cd\u5c42\u6b21\u5173\u7cfb\uff0c\u79f0\u4e3a\u7c7b\u52a0\u8f7d\u5668\u7684 \u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b (Parents Delegation Model) Bootstrap Classloader (\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668) is usually implemented as native code because it is instantiated very early as the JVM is loaded. The bootstrap classloader is responsible for loading the basic Java APIs, including for example rt.jar. It only loads classes found on the boot classpath which have a higher level of trust; as a result it skips much of the validation that gets done for normal classes. Extension Classloader (\u6269\u5c55\u7c7b\u52a0\u8f7d\u5668) loads classes from standard Java extension APIs such as security extension functions. Application Classloader (\u5e94\u2f64\u7a0b\u5e8f\u7c7b\u52a0\u8f7d\u5668) is the default application classloader, which loads application classes from the classpath. User Defined Classloaders (\u2f83\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668) can alternatively be used to load application classes. A user defined classloader is used for a number of special reasons including run time reloading of classes or separation between different groups of loaded classes typically required by web servers such as Tomcat. \u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b\u7684\u2f2f\u4f5c\u8fc7\u7a0b\u662f\uff1a\u5982\u679c\u2f00\u4e2a\u7c7b\u52a0\u8f7d\u5668\u6536\u5230\u4e86\u7c7b\u52a0\u8f7d\u7684\u8bf7\u6c42\uff0c\u5b83\u2fb8\u5148\u4e0d\u4f1a\u2f83\u2f30\u53bb\u5c1d\u8bd5\u52a0\u8f7d\u8fd9\u4e2a\u7c7b\uff0c\u2f7d\u662f\u628a\u8fd9\u4e2a\u8bf7\u6c42\u59d4\u6d3e\u7ed9\u2f57\u7c7b\u52a0\u8f7d\u5668\u53bb\u5b8c\u6210\uff0c\u6bcf\u2f00\u4e2a\u5c42\u6b21\u7684\u7c7b\u52a0\u8f7d\u5668\u90fd\u662f\u5982\u6b64\uff0c\u56e0\u6b64\u6240\u6709\u7684\u52a0\u8f7d\u8bf7\u6c42\u6700\u7ec8\u90fd\u5e94\u8be5\u4f20\u9001\u5230\u9876\u5c42\u7684\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668\u4e2d\uff0c\u53ea\u6709\u5f53\u2f57\u52a0\u8f7d\u5668\u53cd\u9988\u2f83\u2f30\u2f46\u6cd5\u5b8c\u6210\u8fd9\u4e2a\u52a0\u8f7d\u8bf7\u6c42\uff08\u5b83\u7684\u641c\u7d22\u8303\u56f4\u4e2d\u6ca1\u6709\u627e\u5230\u6240\u9700\u7684\u7c7b\uff09\u65f6\uff0c\u2f26\u52a0\u8f7d\u5668\u624d\u4f1a\u5c1d\u8bd5\u2f83\u2f30\u53bb\u52a0\u8f7d\u3002 \u5230\u4e86Java SE9\uff0cclassloader\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u8be6\u7ec6\u89c1 The Class Loader Hierarchy","title":"Chapter 7 : \u865a\u62df\u673a\u7c7b\u52a0\u8f7d\u673a\u5236"},{"location":"java/ujvm/ch7/#java-7-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 7 - \u865a\u62df\u673a\u7c7b\u52a0\u8f7d\u673a\u5236"},{"location":"java/ujvm/ch7/#1","text":"\u865a\u62df\u673a\u7684\u7c7b\u52a0\u8f7d\u673a\u5236\u662f\u6307\uff0c\u865a\u62df\u673a\u628a\u63cf\u8ff0\u7c7b\u7684\u6570\u636e\u4eceClass\u2f42\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\uff0c\u5e76\u5bf9\u6570\u636e\u8fdb\u2f8f\u6821\u9a8c\u3001 \u8f6c\u6362\u89e3\u6790\u548c\u521d\u59cb\u5316\uff0c\u6700\u7ec8\u5f62\u6210\u53ef\u4ee5\u88ab\u865a\u62df\u673a\u76f4\u63a5\u4f7f\u2f64\u7684Java\u7c7b\u578b\u3002 \u4e0e\u90a3\u4e9b\u5728\u7f16\u8bd1\u65f6\u9700\u8981\u8fdb\u2f8f\u94fe\u63a5\u7684\u8bed\u2f94\u4e0d\u540c\uff0c\u5728Java\u8bed\u2f94\u2fa5\u2faf\uff0c\u7c7b\u578b\u7684\u52a0\u8f7d\u3001\u94fe\u63a5\u548c\u521d\u59cb\u5316\u8fc7\u7a0b\u90fd\u662f\u5728\u7a0b\u5e8f\u8fd0\u2f8f\u671f\u95f4\u5b8c\u6210\u7684\uff0c\u8fd9\u79cd\u7b56\u7565\u867d\u7136\u4f1a\u4ee4\u7c7b\u52a0\u8f7d\u65f6\u7a0d\u5fae\u589e\u52a0\u2f00\u4e9b\u6027\u80fd\u5f00\u9500\uff0c\u4f46\u662f\u4f1a\u4e3aJava\u5e94\u2f64\u7a0b\u5e8f\u63d0\u4f9b\u2fbc\u5ea6\u7684\u7075\u6d3b\u6027\uff0cJava\u2fa5\u5929\u2f63\u53ef\u4ee5\u52a8\u6001\u6269\u5c55\u7684\u8bed\u2f94\u7279\u6027\u5c31\u662f\u4f9d\u8d56\u8fd0\u2f8f\u671f\u52a8\u6001\u52a0\u8f7d\u548c\u52a8\u6001\u94fe\u63a5\u8fd9\u4e2a\u7279\u70b9\u5b9e\u73b0\u7684\u3002","title":"1 \u6982\u8ff0"},{"location":"java/ujvm/ch7/#2","text":"\u7c7b\u4ece\u88ab\u52a0\u8f7d\u5230\u865a\u62df\u673a\u5185\u5b58\u4e2d\u5f00\u59cb\uff0c\u5230\u5378\u8f7d\u51fa\u5185\u5b58\u4e3a\u2f4c\uff0c\u5b83\u7684\u6574\u4e2a\u2f63\u547d\u5468\u671f\u5305\u62ec\uff1a\u52a0\u8f7d(Loading)\u3001\u9a8c\u8bc1(Verification)\u3001\u51c6\u5907(Preparation)\u3001\u89e3\u6790(Resolution)\u3001\u521d\u59cb\u5316(Initialization)\u3001\u4f7f\u2f64(Using)\u548c\u5378\u8f7d(Unloading)7\u4e2a\u9636\u6bb5\u3002 \u5bf9\u4e8e\u521d\u59cb\u5316\u9636\u6bb5\uff0c\u865a\u62df\u673a\u89c4\u8303\u4e25\u683c\u89c4\u5b9a\u4e86\u6709\u4e14\u53ea\u67095\u79cd\u60c5\u51b5\u5fc5\u987b\u2f74\u5373\u5bf9\u7c7b\u8fdb\u2f8f\u201c\u521d\u59cb\u5316\u201d\uff1a \u9047\u5230 new \u3001 getstatic \u3001 putstatic \u6216 invokestatic \u8fd94\u6761\u5b57\u8282\u7801\u6307\u4ee4\u65f6\uff0c\u5982\u679c\u7c7b\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002\u2f63\u6210\u8fd94\u6761\u6307\u4ee4\u7684\u6700\u5e38\u89c1\u7684Java\u4ee3\u7801\u573a\u666f\u662f\uff1a\u4f7f\u2f64 new \u5173\u952e\u5b57\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u65f6\u5019\u3001\u8bfb\u53d6\u6216\u8bbe\u7f6e\u2f00\u4e2a\u7c7b\u7684\u9759\u6001\u5b57\u6bb5(\u88abfinal\u4fee\u9970\u3001\u5df2\u5728\u7f16\u8bd1\u671f\u628a\u7ed3\u679c\u653e\u2f0a\u5e38\u91cf\u6c60\u7684\u9759\u6001\u5b57\u6bb5\u9664\u5916)\u7684\u65f6\u5019\uff0c\u4ee5\u53ca\u8c03\u2f64\u2f00\u4e2a\u7c7b\u7684\u9759\u6001\u2f45\u6cd5\u7684\u65f6\u5019\u3002 \u4f7f\u2f64 java.lang.reflect \u5305\u7684\u2f45\u6cd5\u5bf9\u7c7b\u8fdb\u2f8f\u53cd\u5c04\u8c03\u2f64\u7684\u65f6\u5019\uff0c\u5982\u679c\u7c7b\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002 \u5f53\u521d\u59cb\u5316\u2f00\u4e2a\u7c7b\u7684\u65f6\u5019\uff0c\u5982\u679c\u53d1\u73b0\u5176\u2f57\u7c7b\u8fd8\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u2f57\u7c7b\u7684\u521d\u59cb\u5316\u3002 \u5f53\u865a\u62df\u673a\u542f\u52a8\u65f6\uff0c\u2f64\u6237\u9700\u8981\u6307\u5b9a\u2f00\u4e2a\u8981\u6267\u2f8f\u7684\u4e3b\u7c7b(\u5305\u542b main() \u2f45\u6cd5\u7684\u90a3\u4e2a\u7c7b)\uff0c\u865a\u62df\u673a\u4f1a\u5148\u521d\u59cb\u5316\u8fd9\u4e2a\u4e3b\u7c7b\u3002 \u5f53\u4f7f\u2f64JDK 1.7\u7684\u52a8\u6001\u8bed\u2f94\u2f40\u6301\u65f6\uff0c\u5982\u679c\u2f00\u4e2a java.lang.invoke.MethodHandle \u5b9e\u4f8b\u6700\u540e\u7684\u89e3\u6790\u7ed3\u679cREF_getStatic\u3001 REF_putStatic\u3001REF_invokeStatic\u7684\u2f45\u6cd5\u53e5\u67c4\uff0c\u5e76\u4e14\u8fd9\u4e2a\u2f45\u6cd5\u53e5\u67c4\u6240\u5bf9\u5e94\u7684\u7c7b\u6ca1\u6709\u8fdb\u2f8f\u8fc7\u521d\u59cb\u5316\uff0c\u5219\u9700\u8981\u5148\u89e6\u53d1\u5176\u521d\u59cb\u5316\u3002 \"\u6709\u4e14\u53ea\u6709\"\u8fd95\u79cd\u573a\u666f\u4e2d\u7684\u2f8f\u4e3a\u79f0\u4e3a\u5bf9\u2f00\u4e2a\u7c7b\u8fdb\u2f8f \u4e3b\u52a8\u5f15\u2f64 \u3002\u9664\u6b64\u4e4b\u5916\uff0c\u6240\u6709\u5f15\u2f64\u7c7b\u7684\u2f45\u5f0f\u90fd\u4e0d\u4f1a\u89e6\u53d1\u521d\u59cb\u5316\uff0c\u79f0\u4e3a \u88ab\u52a8\u5f15\u2f64 \u3002 \u4e0a\u8ff0\u4ee3\u7801\u8fd0\u2f8f\u4e4b\u540e\uff0c\u53ea\u4f1a\u8f93\u51fa\"SuperClass init!\"\uff0c\u2f7d\u4e0d\u4f1a\u8f93 \u51fa\"SubClass init!\"\u3002\u53ef\u901a\u8fc7 -Xlog:class+load=info \u6253\u5370\u7c7b\u52a0\u8f7d\u4fe1\u606f\u3002 Java //\u88ab\u52a8\u4f7f\u7528\u7c7b\u5b57\u6bb5\u6f14\u793a\u4e00\uff1a\u901a\u8fc7\u5b50\u7c7b\u5f15\u7528\u7236\u7c7b\u7684\u9759\u6001\u5b57\u6bb5\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u5b50\u7c7b\u521d\u59cb\u5316 public class NotInitialization1 { public static void main ( String [] args ) { System . out . println ( SubClass . value ); } } class SuperClass { static { System . out . println ( SuperClass init! ); } public static int value = 123 ; } class SubClass extends SuperClass { static { System . out . println ( SubClass init! ); } } Java // \u88ab\u52a8\u4f7f\u7528\u7c7b\u5b57\u6bb5\u6f14\u793a\u4e8c\uff1a\u901a\u8fc7\u6570\u7ec4\u5b9a\u4e49\u6765\u5f15\u7528\u7c7b\uff0c\u4e0d\u4f1a\u89e6\u53d1\u6b64\u7c7b\u7684\u521d\u59cb\u5316 public class NotInitialization2 { public static void main ( String [] args ) { SuperClass [] sca = new SuperClass [ 10 ]; } }","title":"2 \u7c7b\u52a0\u8f7d\u7684\u65f6\u673a"},{"location":"java/ujvm/ch7/#3","text":"","title":"3 \u7c7b\u52a0\u8f7d\u7684\u8fc7\u7a0b"},{"location":"java/ujvm/ch7/#_1","text":"Loading is the process of finding the class file that represents the class or interface type with a particular name and reading it into a byte array. Next the bytes are parsed to confirm they represent a Class object and have the correct major and minor versions. Any class or interface named as a direct superclass is also loaded. Once this is completed a class or interface object is created from the binary representation. \u52a0\u8f7d\u662f\u7c7b\u52a0\u8f7d(Class Loading)\u8fc7\u7a0b\u7684\u2f00\u4e2a\u9636\u6bb5\uff0c\u865a\u62df\u673a\u9700\u8981\u5b8c\u6210\u4ee5\u4e0b3\u4ef6\u4e8b\u60c5\uff1a \u901a\u8fc7\u2f00\u4e2a\u7c7b\u7684\u5168\u9650\u5b9a\u540d\u6765\u83b7\u53d6\u5b9a\u4e49\u6b64\u7c7b\u7684\u2f06\u8fdb\u5236\u5b57\u8282\u6d41\u3002 \u5c06\u8fd9\u4e2a\u5b57\u8282\u6d41\u6240\u4ee3\u8868\u7684\u9759\u6001\u5b58\u50a8\u7ed3\u6784\u8f6c\u5316\u4e3a\u2f45\u6cd5\u533a\u7684\u8fd0\u2f8f\u65f6\u6570\u636e\u7ed3\u6784\u3002 \u5728\u5185\u5b58\u4e2d\u2f63\u6210\u2f00\u4e2a\u4ee3\u8868\u8fd9\u4e2a\u7c7b\u7684 java.lang.Class \u5bf9\u8c61\uff0c\u4f5c\u4e3a\u2f45\u6cd5\u533a\u8fd9\u4e2a\u7c7b\u7684\u5404\u79cd\u6570\u636e\u7684\u8bbf\u95ee\u2f0a\u53e3\u3002 \u7b2c\u4e00\u6761\u4e2d\u7684\u83b7\u53d6\u4e8c\u8fdb\u5236\u5b57\u8282\u6d41\u53ef\u4ee5\u4ece\u591a\u4e2a\u5730\u65b9\u83b7\u53d6\u3002\u4f8b\u5982ZIP\u5305(JAR)\uff0c\u7f51\u7edc(Applet)\uff0c\u8fd0\u884c\u65f6\u8ba1\u7b97\u751f\u6210( java.lang.refelct.Proxy )\u7b49\u3002","title":"\u52a0\u8f7d"},{"location":"java/ujvm/ch7/#_2","text":"\u9a8c\u8bc1\u662f\u4e3a\u4e86\u786e\u4fddClass\u2f42\u4ef6\u7684\u5b57\u8282\u6d41\u4e2d\u5305\u542b\u7684\u4fe1\u606f\u7b26\u5408\u5f53\u524d\u865a\u62df\u673a\u7684\u8981\u6c42\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5371\u5bb3\u865a\u62df\u673a\u2f83\u2f9d\u7684\u5b89\u5168\u3002 \u867d\u7136Java\u8bed\u2f94\u672c\u2f9d\u662f\u76f8\u5bf9\u5b89\u5168\u7684\u8bed\u2f94\uff0c\u4f46\u662fClass\u2f42\u4ef6\u5e76\u4e0d\u2f00\u5b9a\u8981\u6c42\u2f64Java\u7f16\u8bd1\u2f7d\u6765\uff0c\u5b83\u53ef\u4ee5\u4f7f\u2f64\u4efb\u4f55\u9014\u5f84\u4ea7\u2f63\uff0c\u751a\u2f84\u5305\u62ec\u2f64\u2f17\u516d\u8fdb\u5236\u7f16\u8f91\u5668\u76f4\u63a5\u7f16\u5199\u6765\u4ea7\u2f63Class\u2f42\u4ef6\u3002\u865a\u62df\u673a\u5982\u679c\u4e0d\u68c0\u67e5\u8f93 \u2f0a\u7684\u5b57\u8282\u6d41\uff0c\u5bf9\u5176\u5b8c\u5168\u4fe1\u4efb\u7684\u8bdd\uff0c\u5f88\u53ef\u80fd\u4f1a\u56e0\u4e3a\u8f7d\u2f0a\u4e86\u6709\u5bb3\u7684\u5b57\u8282\u6d41\u2f7d\u5bfc\u81f4\u7cfb\u7edf\u5d29\u6e83\u3002 \u2f42\u4ef6\u683c\u5f0f\u9a8c\u8bc1\uff1a\u9a8c\u8bc1\u5b57\u8282\u6d41\u662f\u5426\u7b26\u5408Class\u2f42\u4ef6\u683c\u5f0f\u7684\u89c4\u8303\uff0c\u5e76\u4e14\u80fd\u88ab\u5f53\u524d \u7248\u672c\u7684\u865a\u62df\u673a\u5904\u7406\u3002 \u5143\u6570\u636e\u9a8c\u8bc1\uff1a\u5bf9\u5b57\u8282\u7801\u63cf\u8ff0\u7684\u4fe1\u606f\u8fdb\u2f8f\u8bed\u4e49\u5206\u6790\uff0c\u4ee5\u4fdd\u8bc1\u5176\u63cf\u8ff0\u7684\u4fe1\u606f\u7b26\u5408Java\u8bed\u2f94\u89c4\u8303\u7684\u8981\u6c42\uff0c","title":"\u9a8c\u8bc1"},{"location":"java/ujvm/ch7/#_3","text":"Preparing involves allocation of memory for static storage and any data structures used by the JVM such as method tables. Static fields are created and initialized to their default values, however, no initializers or code is executed at this stage as that happens as part of initialization. \u51c6\u5907\u9636\u6bb5\u4e3a\u7c7b\u53d8\u91cf\u5206\u914d\u5185\u5b58\u5e76\u8bbe\u7f6e\u7c7b\u53d8\u91cf(\u4ec5\u5305\u62ec\u88ab\u88abstatic\u4fee\u9970\u7684\u53d8\u91cf)\u521d\u59cb\u503c\uff0c\u8fd9\u4e9b\u53d8\u91cf\u6240\u4f7f\u2f64\u7684\u5185\u5b58\u90fd\u5c06\u5728\u2f45\u6cd5\u533a\u4e2d\u8fdb\u2f8f\u5206\u914d\u3002\u5b9e\u529b\u53d8\u91cf\u5c06\u4f1a\u5728\u5bf9\u8c61\u5b9e\u4f8b\u5316\u65f6\u968f\u7740\u5bf9\u8c61\u4e00\u8d77\u5206\u914d\u5728Java\u5806\u4e2d\u3002\u521d\u59cb\u503c\u901a\u5e38\u60c5\u51b5\u4e0b\u662f\u6570\u636e\u7c7b\u578b\u7684\u9ed8\u8ba4\u503c. public static int value = 123 ; //\u521d\u59cb\u503c\u4e3a0 \u5982\u679c\u7c7b\u5b57\u6bb5\u7684\u5b57\u6bb5\u5c5e\u6027\u8868\u4e2d\u5b58\u5728ConstantValue\u5c5e\u6027\uff0c\u90a3\u5728\u51c6\u5907\u9636\u6bb5\u53d8\u91cfvalue\u5c31\u4f1a\u88ab\u521d\u59cb\u5316\u4e3aConstantValue\u5c5e\u6027\u6240\u6307\u5b9a\u7684\u503c\uff1a public static final int value = 123 ; // \u521d\u59cb\u503c\u4e3a123","title":"\u51c6\u5907"},{"location":"java/ujvm/ch7/#_4","text":"\u89e3\u6790\u9636\u6bb5\u5c06\u5e38\u91cf\u6c60\u5185\u7684\u7b26\u53f7\u5f15\u2f64\u66ff\u6362\u4e3a\u76f4\u63a5\u5f15\u2f64\u3002 \u7b26\u53f7\u5f15\u2f64 (Symbolic References):\u7b26\u53f7\u5f15\u2f64\u4ee5\u2f00\u7ec4\u7b26\u53f7\u6765\u63cf\u8ff0\u6240\u5f15\u2f64\u7684\u2f6c\u6807\uff0c\u7b26\u53f7\u53ef\u4ee5\u662f\u4efb\u4f55\u5f62\u5f0f\u7684\u5b57\u2faf\u91cf\uff0c\u53ea\u8981\u4f7f\u2f64\u65f6\u80fd\u2f46\u6b67\u4e49\u5730\u5b9a\u4f4d\u5230\u2f6c\u6807\u5373\u53ef\u3002\u7b26\u53f7\u5f15\u2f64\u4e0e\u865a\u62df\u673a\u5b9e\u73b0\u7684\u5185\u5b58\u5e03\u5c40\u2f46\u5173\uff0c\u5f15\u2f64\u7684\u2f6c\u6807\u5e76\u4e0d\u2f00\u5b9a\u5df2\u7ecf\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u3002\u5404\u79cd\u865a\u62df\u673a\u5b9e\u73b0\u7684\u5185\u5b58\u5e03\u5c40\u53ef\u4ee5\u5404\u4e0d\u76f8\u540c\uff0c\u4f46\u662f\u5b83\u4eec\u80fd\u63a5\u53d7\u7684\u7b26\u53f7\u5f15\u2f64\u5fc5\u987b\u90fd\u662f\u2f00\u81f4\u7684\uff0c\u56e0\u4e3a\u7b26\u53f7\u5f15\u2f64\u7684\u5b57\u2faf\u91cf\u5f62\u5f0f\u660e\u786e\u5b9a\u4e49 \u5728Java\u865a\u62df\u673a\u89c4\u8303\u7684Class\u2f42\u4ef6\u683c\u5f0f\u4e2d\u3002 \u76f4\u63a5\u5f15\u2f64 (Direct References): \u76f4\u63a5\u5f15\u2f64\u53ef\u4ee5\u662f\u76f4\u63a5\u6307\u5411\u2f6c\u6807\u7684\u6307\u9488\u3001\u76f8\u5bf9\u504f\u79fb\u91cf\u6216\u662f\u2f00\u4e2a\u80fd\u95f4\u63a5\u5b9a\u4f4d\u5230\u2f6c\u6807\u7684\u53e5\u67c4\u3002\u76f4\u63a5\u5f15\u2f64\u662f\u548c\u865a\u62df\u673a\u5b9e\u73b0\u7684\u5185\u5b58\u5e03\u5c40\u76f8\u5173\u7684\uff0c\u540c\u2f00\u4e2a\u7b26\u53f7\u5f15\u2f64\u5728\u4e0d\u540c\u865a\u62df\u673a\u5b9e\u4f8b\u4e0a\u7ffb\u8bd1\u51fa\u6765\u7684\u76f4\u63a5\u5f15\u2f64\u2f00\u822c\u4e0d\u4f1a\u76f8\u540c\u3002\u5982\u679c\u6709\u4e86\u76f4\u63a5\u5f15\u2f64\uff0c\u90a3\u5f15\u2f64\u7684\u2f6c\u6807\u5fc5\u5b9a\u5df2\u7ecf\u5728\u5185 \u5b58\u4e2d\u5b58\u5728\u3002","title":"\u89e3\u6790"},{"location":"java/ujvm/ch7/#_5","text":"Initialization of a class or interface consists of executing the class or interface initialization method clinit . What is the difference between init and clinit ? StackOverflow init is the (or one of the) constructor(s) for the instance, and non-static field initialization. clinit are the static initialization blocks for the class, and static field initialization. class X { static Log log = LogFactory . getLog (); // clinit private int x = 1 ; // init X (){ // init } static { // clinit } }","title":"\u521d\u59cb\u5316"},{"location":"java/ujvm/ch7/#4","text":"","title":"4 \u7c7b\u52a0\u8f7d\u5668"},{"location":"java/ujvm/ch7/#_6","text":"\u5bf9\u4e8e\u4efb\u610f\u2f00\u4e2a\u7c7b\uff0c\u90fd\u9700\u8981\u7531\u52a0\u8f7d\u5b83\u7684\u7c7b\u52a0\u8f7d\u5668\u548c\u8fd9\u4e2a\u7c7b\u672c\u2f9d\u2f00\u540c\u786e\u2f74\u5176\u5728Java\u865a\u62df\u673a\u4e2d\u7684\u552f\u2f00\u6027\uff0c\u6bcf\u2f00\u4e2a\u7c7b\u52a0\u8f7d\u5668\uff0c \u90fd\u62e5\u6709\u2f00\u4e2a\u72ec\u2f74\u7684\u7c7b\u540d\u79f0\u7a7a\u95f4\u3002 \u2f50\u8f83\u4e24\u4e2a\u7c7b\u662f\u5426\u201c\u76f8\u7b49\u201d\uff0c\u53ea\u6709\u5728\u8fd9\u4e24\u4e2a\u7c7b\u662f\u7531\u540c\u2f00\u4e2a\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u7684\u524d\u63d0\u4e0b\u624d\u6709\u610f\u4e49\uff0c\u5426\u5219\uff0c\u5373\u4f7f\u8fd9\u4e24\u4e2a\u7c7b\u6765\u6e90\u4e8e\u540c\u2f00\u4e2aClass\u2f42\u4ef6\uff0c\u88ab\u540c\u2f00\u4e2a\u865a\u62df\u673a\u52a0\u8f7d\uff0c\u53ea\u8981\u52a0\u8f7d\u5b83\u4eec\u7684\u7c7b\u52a0\u8f7d\u5668\u4e0d\u540c\uff0c\u90a3\u8fd9\u4e24\u4e2a\u7c7b\u5c31\u5fc5\u5b9a\u4e0d\u76f8\u7b49\u3002 \u4e0d\u540c\u7684\u7c7b\u52a0\u8f7d\u5668\u5bf9 instanceof \u5173\u952e\u5b57\u8fd0\u7b97\u7684\u7ed3\u679c\u7684\u5f71\u54cd\uff1a import java.io.IOException ; import java.io.InputStream ; //\u7c7b\u52a0\u8f7d\u5668\u4e0einstanceof\u5173\u952e\u5b57\u6f14\u793a public class ClassLoaderTest { public static void main ( String [] args ) throws Exception { ClassLoader myLoader = new ClassLoader () { @Override public Class ? loadClass ( String name ) throws ClassNotFoundException { try { String fileName = name . substring ( name . lastIndexOf ( . ) + 1 ) + .class ; InputStream is = getClass (). getResourceAsStream ( fileName ); if ( is == null ) { return super . loadClass ( name ); } byte [] b = new byte [ is . available ()]; is . read ( b ); return defineClass ( name , b , 0 , b . length ); } catch ( IOException e ) { throw new ClassNotFoundException ( name ); } } }; Object obj = myLoader . loadClass ( com.unstandingJVM.ClassLoaderTest ). newInstance (); System . out . println ( obj . getClass ()); System . out . println ( obj instanceof com . unstandingJVM . ClassLoaderTest ); } }","title":"\u7c7b\u4e0e\u7c7b\u52a0\u8f7d\u5668"},{"location":"java/ujvm/ch7/#_7","text":"\u4eceJava\u865a\u62df\u673a\u7684\u89d2\u5ea6\u6765\u8bb2\uff0c\u53ea\u5b58\u5728\u4e24\u79cd\u4e0d\u540c\u7684\u7c7b\u52a0\u8f7d\u5668\uff1a\u2f00\u79cd\u662f\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668(Bootstrap ClassLoader)\uff0c\u8fd9\u4e2a\u7c7b\u52a0\u8f7d\u5668\u4f7f\u2f64C++\u8bed\u2f94\u5b9e\u73b0 \uff0c\u662f\u865a\u62df\u673a\u2f83\u2f9d\u7684\u2f00\u90e8\u5206\uff1b\u53e6\u2f00\u79cd\u5c31\u662f\u6240\u6709\u5176\u4ed6\u7684\u7c7b\u52a0\u8f7d\u5668\uff0c\u8fd9\u4e9b\u7c7b\u52a0\u8f7d\u5668\u90fd\u7531Java\u8bed\u2f94\u5b9e\u73b0\uff0c\u72ec\u2f74\u4e8e\u865a\u62df\u673a\u5916\u90e8\uff0c\u5e76\u4e14\u5168\u90fd\u7ee7\u627f\u2f83\u62bd\u8c61\u7c7b java.lang.ClassLoader \u3002\u7c7b\u52a0\u8f7d\u5668\u4e4b\u95f4\u7684\u8fd9\u79cd\u5c42\u6b21\u5173\u7cfb\uff0c\u79f0\u4e3a\u7c7b\u52a0\u8f7d\u5668\u7684 \u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b (Parents Delegation Model) Bootstrap Classloader (\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668) is usually implemented as native code because it is instantiated very early as the JVM is loaded. The bootstrap classloader is responsible for loading the basic Java APIs, including for example rt.jar. It only loads classes found on the boot classpath which have a higher level of trust; as a result it skips much of the validation that gets done for normal classes. Extension Classloader (\u6269\u5c55\u7c7b\u52a0\u8f7d\u5668) loads classes from standard Java extension APIs such as security extension functions. Application Classloader (\u5e94\u2f64\u7a0b\u5e8f\u7c7b\u52a0\u8f7d\u5668) is the default application classloader, which loads application classes from the classpath. User Defined Classloaders (\u2f83\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668) can alternatively be used to load application classes. A user defined classloader is used for a number of special reasons including run time reloading of classes or separation between different groups of loaded classes typically required by web servers such as Tomcat. \u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b\u7684\u2f2f\u4f5c\u8fc7\u7a0b\u662f\uff1a\u5982\u679c\u2f00\u4e2a\u7c7b\u52a0\u8f7d\u5668\u6536\u5230\u4e86\u7c7b\u52a0\u8f7d\u7684\u8bf7\u6c42\uff0c\u5b83\u2fb8\u5148\u4e0d\u4f1a\u2f83\u2f30\u53bb\u5c1d\u8bd5\u52a0\u8f7d\u8fd9\u4e2a\u7c7b\uff0c\u2f7d\u662f\u628a\u8fd9\u4e2a\u8bf7\u6c42\u59d4\u6d3e\u7ed9\u2f57\u7c7b\u52a0\u8f7d\u5668\u53bb\u5b8c\u6210\uff0c\u6bcf\u2f00\u4e2a\u5c42\u6b21\u7684\u7c7b\u52a0\u8f7d\u5668\u90fd\u662f\u5982\u6b64\uff0c\u56e0\u6b64\u6240\u6709\u7684\u52a0\u8f7d\u8bf7\u6c42\u6700\u7ec8\u90fd\u5e94\u8be5\u4f20\u9001\u5230\u9876\u5c42\u7684\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668\u4e2d\uff0c\u53ea\u6709\u5f53\u2f57\u52a0\u8f7d\u5668\u53cd\u9988\u2f83\u2f30\u2f46\u6cd5\u5b8c\u6210\u8fd9\u4e2a\u52a0\u8f7d\u8bf7\u6c42\uff08\u5b83\u7684\u641c\u7d22\u8303\u56f4\u4e2d\u6ca1\u6709\u627e\u5230\u6240\u9700\u7684\u7c7b\uff09\u65f6\uff0c\u2f26\u52a0\u8f7d\u5668\u624d\u4f1a\u5c1d\u8bd5\u2f83\u2f30\u53bb\u52a0\u8f7d\u3002 \u5230\u4e86Java SE9\uff0cclassloader\u8d8a\u6765\u8d8a\u590d\u6742\uff0c\u8be6\u7ec6\u89c1 The Class Loader Hierarchy","title":"\u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b"},{"location":"java/ujvm/ch8/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 8 - \u865a\u62df\u673a\u5b57\u8282\u7801\u6267\u884c\u5f15\u64ce","title":"Chapter 8 : \u865a\u62df\u673a\u5b57\u8282\u7801\u6267\u884c\u5f15\u64ce"},{"location":"java/ujvm/ch8/#java-8-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 8 - \u865a\u62df\u673a\u5b57\u8282\u7801\u6267\u884c\u5f15\u64ce"},{"location":"java/ujvm/ch9/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 9 - \u7c7b\u52a0\u8f7d\u53ca\u6267\u884c\u5b50\u7cfb\u7edf\u7684\u6848\u4f8b\u4e0e\u5b9e\u6218","title":"Chapter 9 : \u7c7b\u52a0\u8f7d\u53ca\u6267\u884c\u5b50\u7cfb\u7edf\u7684\u6848\u4f8b\u4e0e\u5b9e\u6218"},{"location":"java/ujvm/ch9/#java-9-","text":"","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 9 - \u7c7b\u52a0\u8f7d\u53ca\u6267\u884c\u5b50\u7cfb\u7edf\u7684\u6848\u4f8b\u4e0e\u5b9e\u6218"},{"location":"lkd/","text":"LKD Chapter 1 : Introduction to Linux Kernel Chapter 2 Chapter 3 Chapter 4 Chapter 5 Chapter 6 Chapter 7 Chapter 8 Chapter 9 Chapter 10 Chapter 11 Chapter 12: Memory management Chapter 13 Chapter 14 Chapter 15 Chapter 16 Chapter 17 Chapter 18 Chapter 19 Chapter 20","title":"Home"},{"location":"lkd/#lkd","text":"Chapter 1 : Introduction to Linux Kernel Chapter 2 Chapter 3 Chapter 4 Chapter 5 Chapter 6 Chapter 7 Chapter 8 Chapter 9 Chapter 10 Chapter 11 Chapter 12: Memory management Chapter 13 Chapter 14 Chapter 15 Chapter 16 Chapter 17 Chapter 18 Chapter 19 Chapter 20","title":"LKD"},{"location":"lkd/ch1/","text":"Linux Kernel Development 1 - Introduction to the Linux Kernel","title":"Ch1"},{"location":"lkd/ch1/#linux-kernel-development-1-introduction-to-the-linux-kernel","text":"","title":"Linux Kernel Development 1 - Introduction to the Linux Kernel"},{"location":"lkd/ch10/","text":"Linux Kernel Development 2 -","title":"Ch10"},{"location":"lkd/ch10/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch11/","text":"Linux Kernel Development 2 -","title":"Ch11"},{"location":"lkd/ch11/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch12/","text":"Linux Kernel Development 2 - Memory management","title":"Ch12"},{"location":"lkd/ch12/#linux-kernel-development-2-memory-management","text":"","title":"Linux Kernel Development 2 - Memory management"},{"location":"lkd/ch13/","text":"Linux Kernel Development 2 -","title":"Ch13"},{"location":"lkd/ch13/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch14/","text":"Linux Kernel Development 2 -","title":"Ch14"},{"location":"lkd/ch14/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch15/","text":"Linux Kernel Development 2 -","title":"Ch15"},{"location":"lkd/ch15/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch16/","text":"Linux Kernel Development 2 -","title":"Ch16"},{"location":"lkd/ch16/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch17/","text":"Linux Kernel Development 2 -","title":"Ch17"},{"location":"lkd/ch17/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch18/","text":"Linux Kernel Development 2 -","title":"Ch18"},{"location":"lkd/ch18/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch19/","text":"Linux Kernel Development 2 -","title":"Ch19"},{"location":"lkd/ch19/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch2/","text":"Linux Kernel Development 2 -","title":"Ch2"},{"location":"lkd/ch2/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch20/","text":"Linux Kernel Development 2 -","title":"Ch20"},{"location":"lkd/ch20/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch3/","text":"Linux Kernel Development 2 -","title":"Ch3"},{"location":"lkd/ch3/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch4/","text":"Linux Kernel Development 2 -","title":"Ch4"},{"location":"lkd/ch4/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch5/","text":"Linux Kernel Development 2 -","title":"Ch5"},{"location":"lkd/ch5/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch6/","text":"Linux Kernel Development 2 -","title":"Ch6"},{"location":"lkd/ch6/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch7/","text":"Linux Kernel Development 2 -","title":"Ch7"},{"location":"lkd/ch7/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch8/","text":"Linux Kernel Development 2 -","title":"Ch8"},{"location":"lkd/ch8/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"lkd/ch9/","text":"Linux Kernel Development 2 -","title":"Ch9"},{"location":"lkd/ch9/#linux-kernel-development-2-","text":"","title":"Linux Kernel Development 2 -"},{"location":"os/","text":"OS OSC Chapter 1: Introduction Chapter 2: Operating System structures Chapter 3: Processes Chapter 4: Threads and Concurrency Chapter 5: CPU Scheduling Chapter 6: Synchronization Tools Chapter 7: Synchronization Examples Chapter 8: Deadlocks Chapter 9: Main Memory Chapter 10: Virtual Memory Chapter 11: Mass-Storage Structure Chapter 13: File-System Interfaces CSAPP Chapter 1: \u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38 Chapter 2: \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406 Chapter 3: \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a Chapter 4: \u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784 Chapter 5: \u4f18\u5316\u7a0b\u5e8f\u6027\u80fd Chapter 6: \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 Chapter 7: \u94fe\u63a5 Chapter 8: \u5f02\u5e38\u63a7\u5236\u6d41 Chapter 9: \u865a\u62df\u5185\u5b58 Chapter 10: \u7cfb\u7edf\u7ea7I/O Chapter 11: \u7f51\u7edc\u7f16\u7a0b","title":"Contents"},{"location":"os/#os","text":"","title":"OS"},{"location":"os/#osc","text":"Chapter 1: Introduction Chapter 2: Operating System structures Chapter 3: Processes Chapter 4: Threads and Concurrency Chapter 5: CPU Scheduling Chapter 6: Synchronization Tools Chapter 7: Synchronization Examples Chapter 8: Deadlocks Chapter 9: Main Memory Chapter 10: Virtual Memory Chapter 11: Mass-Storage Structure Chapter 13: File-System Interfaces","title":"OSC"},{"location":"os/#csapp","text":"Chapter 1: \u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38 Chapter 2: \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406 Chapter 3: \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a Chapter 4: \u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784 Chapter 5: \u4f18\u5316\u7a0b\u5e8f\u6027\u80fd Chapter 6: \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 Chapter 7: \u94fe\u63a5 Chapter 8: \u5f02\u5e38\u63a7\u5236\u6d41 Chapter 9: \u865a\u62df\u5185\u5b58 Chapter 10: \u7cfb\u7edf\u7ea7I/O Chapter 11: \u7f51\u7edc\u7f16\u7a0b","title":"CSAPP"},{"location":"os/cpj/","text":"CPJ Concurrent Programming in Java 1: Threads and Locks Concurrent Programming in Java 2: Critical Sections and Isolation Concurrent Programming in Java 3: Actors Concurrent Programming in Java 4: Concurrent Data Structures","title":"Home"},{"location":"os/cpj/#cpj","text":"Concurrent Programming in Java 1: Threads and Locks Concurrent Programming in Java 2: Critical Sections and Isolation Concurrent Programming in Java 3: Actors Concurrent Programming in Java 4: Concurrent Data Structures","title":"CPJ"},{"location":"os/cpj/ch1/","text":"Concurrent Programming in Java 1: Threads and Locks Threads A unique aspect of Java compared to prior mainstream programming languages is that Java included the notions of threads (as instances of the \\mathtt {java.lang.Thread} \\mathtt {java.lang.Thread} class) in its language definition right from the start. When an instance of \\mathtt {Thread} \\mathtt {Thread} is created (via a \\mathtt {new} \\mathtt {new} operation), it does not start executing right away; instead, it can only start executing when its \\mathtt {start}() \\mathtt {start}() method is invoked. The statement or computation to be executed by the thread is specified as a parameter to the constructor. The \\mathtt {Thread} \\mathtt {Thread} class also includes a wait operation in the form of a \\mathtt {join}() \\mathtt {join}() method. If thread \\mathtt {t0} \\mathtt {t0} performs a \\mathtt {t1.join}() \\mathtt {t1.join}() call, thread \\mathtt {t0} \\mathtt {t0} will be forced to wait until thread \\mathtt {t1} \\mathtt {t1} completes, after which point it can safely access any values computed by thread \\mathtt {t1} \\mathtt {t1} . Since there is no restriction on which thread can perform a \\mathtt {join} \\mathtt {join} on which other thread, it is possible for a programmer to erroneously create a deadlock cycle with \\mathtt {join} \\mathtt {join} operations. (A deadlock occurs when two threads wait for each other indefinitely, so that neither can make any progress.) Thread creation Java Tutorials - Defining and Starting a Thread An application that creates an instance of \\mathtt {Thread} \\mathtt {Thread} must provide the code that will run in that thread. There are two ways to do this: Provide a Runnable object . The Runnable interface defines a single method, run , meant to contain the code executed in the thread. The Runnable object is passed to the Thread constructor, as in the HelloRunnable example: public class HelloRunnable implements Runnable { public void run () { System . out . println ( Hello from a thread! ); } public static void main ( String args []) { ( new Thread ( new HelloRunnable ())). start (); } } Subclass Thread . The Thread class itself implements Runnable , though its run method does nothing. An application can subclass Thread , providing its own implementation of run , as in the HelloThread example: public class HelloThread extends Thread { public void run () { System . out . println ( Hello from a thread! ); } public static void main ( String args []) { ( new HelloThread ()). start (); } } Which of these idioms should you use? The first idiom, which employs a Runnable object, is more general, because the Runnable object can subclass a class other than Thread . Synchronized Methods Java tutorials - Synchronized Methods Making methods synchronized has two effects: First, it is NOT possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object. Second, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads. Structured Locks Structured locks can be used to enforce mutual exclusion and avoid data races. A major benefit of structured locks is that their acquire and release operations are implicit , since these operations are automatically performed by the Java runtime environment when entering and exiting the scope of a synchronized statement or method, even if an exception is thrown in the middle. wait() and notify() operations can be used to block and resume threads that need to wait for specific conditions. Guarded Blocks Java Tutorials - Guarded Blocks Guarded block is the most common coordination idiom. It begins by polling a condition that before the block can proceed. Suppose, for example guardedJoy is a method that must not proceed until a shared variable joy has been set by another thread. An efficient guard invokes Object.wait to suspend the current thread. The invocation of wait does not return until another thread has issued a notification that some special event may have occurred. public void guardedJoy () { // Simple loop guard. Wastes // processor time. Don t do this! while (! joy ) {} System . out . println ( Joy has been achieved! ); } A more efficient guard invokes Object.wait to suspend the current thread. The invocation of wait does not return until another thread has issued a notification that some special event may have occurred \u2014 though not necessarily the event this thread is waiting for: public synchronized void guardedJoy () { // This guard only loops once for each special event, which may not // be the event we re waiting for. while (! joy ) { try { wait (); } catch ( InterruptedException e ) {} } System . out . println ( Joy and efficiency have been achieved! ); } When wait is invoked, the thread releases the lock and suspends execution. At some future time, another thread will acquire the same lock and invoke Object.notifyAll , informing all threads waiting on that lock that something important has happened: public synchronized notifyJoy () { joy = true ; notifyAll (); } Note notifyAll() wakes up all threads that are waiting on the object's monitor. notify wakes up a single thread that is waiting on this object's monitor. Question What's the useful difference between notify() and notifyAll() ? [ ref ] Simply put, choosing one of them depends on why your threads are waiting to be notified. In some cases, all waiting threads can take useful action once the wait finishes. Suppose a set of threads waiting for a certain task to finish; once the task has finished, all waiting threads can continue with their business. In such a case you would use notifyAll() to wake up all waiting threads at the same time. Another case, for example mutually exclusive locking, only one of the waiting threads can do something useful after being notified (in this case acquire the lock). In such a case, you would rather use notify() . Properly implemented, you could use notifyAll() in this situation as well, but you would unnecessarily wake threads that can't do anything anyway. Let's use guarded blocks to create a Producer-Consumer application. This kind of application shares data between two threads: the producer, that creates the data, and the consumer, that does something with it. The two threads communicate using a shared object. Coordination is essential: the consumer thread must not attempt to retrieve the data before the producer thread has delivered it, and the producer thread must not attempt to deliver new data if the consumer hasn't retrieved the old data. The data is a series of text messages, which are shared through an object of type Drop. Drop public class Drop { // Message sent from producer // to consumer. private String message ; // True if consumer should wait // for producer to send message, // false if producer should wait for // consumer to retrieve message. private boolean empty = true ; public synchronized String take () { // Wait until message is // available. while ( empty ) { try { wait (); } catch ( InterruptedException e ) {} } // Toggle status. empty = true ; // Notify producer that // status has changed. notifyAll (); return message ; } public synchronized void put ( String message ) { // Wait until message has // been retrieved. while (! empty ) { try { wait (); } catch ( InterruptedException e ) {} } // Toggle status. empty = false ; // Store message. this . message = message ; // Notify consumer that status // has changed. notifyAll (); } } Producer import java.util.Random ; public class Producer implements Runnable { private Drop drop ; public Producer ( Drop drop ) { this . drop = drop ; } public void run () { String importantInfo [] = { Mares eat oats , Does eat oats , Little lambs eat ivy , A kid will eat ivy too }; Random random = new Random (); for ( int i = 0 ; i importantInfo . length ; i ++) { drop . put ( importantInfo [ i ]); try { Thread . sleep ( random . nextInt ( 5000 )); } catch ( InterruptedException e ) {} } drop . put ( DONE ); } } Consumer import java.util.Random ; public class Consumer implements Runnable { private Drop drop ; public Consumer ( Drop drop ) { this . drop = drop ; } public void run () { Random random = new Random (); for ( String message = drop . take (); ! message . equals ( DONE ); message = drop . take ()) { System . out . format ( MESSAGE RECEIVED: %s%n , message ); try { Thread . sleep ( random . nextInt ( 5000 )); } catch ( InterruptedException e ) {} } } } Example public class ProducerConsumerExample { public static void main ( String [] args ) { Drop drop = new Drop (); ( new Thread ( new Producer ( drop ))). start (); ( new Thread ( new Consumer ( drop ))). start (); } } Intrinsic Locks and Synchronization Tutorial on Intrinsic Locks and Synchronization in Java Every object has an intrinsic lock (also, monitor lock or monitor ) associated with it. By convention, a thread that needs exclusive and consistent access to an object's fields has to acquire the object's intrinsic lock before accessing them, and then release the intrinsic lock when it's done with them. Locks In Synchronized Methods When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that method's object and releases it when the method returns. The lock release occurs even if the return was caused by an uncaught exception. Note When a static synchronized method is invoked, since a static method is associated with a class, not an object, the thread acquires the intrinsic lock for the Class object associated with the class. Thus access to class's static fields is controlled by a lock that's distinct from the lock for any instance of the class. Synchronized Statements Synchronized statements must specify the object that provides the intrinsic lock: public void addName ( String name ) { synchronized ( this ) { lastName = name ; nameCount ++; } nameList . add ( name ); } Reentrant Synchronization A thread can acquire a lock that it already owns. Allowing a thread to acquire the same lock more than once enables reentrant synchronization (\u91cd\u5165\u540c\u6b65). Unstructured Locks ReentrantLock A ReentrantLock (\u91cd\u5165\u9501) is unstructured , unlike synchronized constructs -- i.e. you don't need to use a block structure for locking and can even hold a lock across methods. A reentrant mutual exclusion Lock with the same basic behavior and semantics as the implicit monitor lock accessed using synchronized methods and statements, but with extended capabilities.[ Java Doc-Class ReentrantLock ] A ReentrantLock is owned by the thread last successfully locking, but not yet unlocking it. A thread invoking lock will return, successfully acquiring the lock, when the lock is not owned by another thread. It is recommended practice to always immediately follow a call to lock with a try block, most typically in a before/after construction such as: class X { private final ReentrantLock lock = new ReentrantLock (); // ... public void m () { lock . lock (); // block until condition holds try { // ... method body } finally { lock . unlock () } } } Interface Lock Java Doc-Interface Lock public interface Lock Lock implementations provide more extensive locking operations than can be obtained using synchronized methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated Condition objects. Comparison with synchronized methods and statements The use of synchronized methods or statements provides access to the implicit monitor lock associated with every object, but forces all lock acquisition and release to occur in a block-structured way : when multiple locks are acquired they must be released in the opposite order, and all locks must be released in the same lexical scope in which they were acquired. Implementations of the Lock interface enable the lock to be acquired and released in different scopes , and allowing multiple locks to be acquired and released in any order . In most cases, the following idiom should be used: Lock l = ...; l . lock (); try { // access the resource protected by this lock } finally { l . unlock (); } Note When locking and unlocking occur in different scopes, care must be taken to ensure that all code that is executed while the lock is held is protected by try-finally or try-catch to ensure that the lock is released when necessary. tryLock Java Doc - tryLock tryLock acquires the lock only if it is free at the time of invocation. A typical usage idiom for this method would be: Lock lock = ...; if ( lock . tryLock ()) { try { // manipulate protected state } finally { lock . unlock (); } } else { // perform alternative actions } Liveness A concurrent application's ability to execute in a timely manner is known as its liveness . Common forms of Liveness failure: The first is deadlock , in which all threads are blocked indefinitely, thereby preventing any forward progress. The second is livelock , in which all threads repeatedly perform an interaction that prevents forward progress, e.g., an infinite \u201cloop\u201d of repeating lock acquire/release patterns. The third is starvation , in which at least one thread is prevented from making any forward progress. Liveness failures in detail on OSC Dining Philosophers Dining Philosophers described in OSC The philosophers follow the following protocol: while ( true ) { // Initially, thinking about life, universe, and everything think (); // Take a break from thinking, hungry now pick_up_left_fork (); pick_up_right_fork (); eat (); put_down_right_fork (); put_down_left_fork (); // Not hungry anymore. Back to thinking! } Implementation The Dining Philosophers Problem in Java We model each of our philosophers as classes that implement the Runnable interface so that we can run them as separate threads. Each Philosopher has access to two forks on his left and right sides. Consider a situation in which all philosophers grab the left fork/chopsticks at the same time, leading to the deadlock. Simply, We introduce the condition that makes the last philosopher reach for his right fork first, instead of the left. This breaks the circular wait condition and we can avert the deadlock. Diningphilosopherstable public class DiningPhilosophersTable { private static int numPhilosophers ; private static int numForks ; public DiningPhilosophersTable ( int num ){ this . numPhilosophers = num ; this . numForks = num ; Philosopher [] philosophers = new Philosopher [ numPhilosophers ]; Fork [] forks = new Fork [ numForks ]; // Initialize array of forks for ( int i = 0 ; i numForks ; i ++) { forks [ i ] = new Fork ( i + 1 ); } for ( int i = 0 ; i numPhilosophers ; i ++) { // avoid deadlock: the last philosopher picks up the right fork first if ( i == philosophers . length - 1 ) { philosophers [ i ] = new Philosopher ( Integer . toString ( i ), forks [( i + 1 ) / numForks ], forks [ i ]); } else { philosophers [ i ] = new Philosopher ( Integer . toString ( i ), forks [ i ], forks [( i + 1 ) / numForks ]); } } for ( int i = 0 ; i numPhilosophers ; i ++) { Thread thread = new Thread ( philosophers [ i ], Philosopher + Integer . toString ( i )); thread . start (); } // end for } // end constructor public static void main ( String [] args ) { DiningPhilosophersTable dining = new DiningPhilosophersTable ( 5 ); } // end main } Philosopher public class Philosopher implements Runnable { private Fork _left_fork ; private Fork _right_fork ; private String _name ; public Philosopher ( String name , Fork left_fork , Fork right_fork ) { _name = name ; _left_fork = left_fork ; _right_fork = right_fork ; } private void doAction ( String action ) { try { System . out . println ( Thread . currentThread (). getName () + : + action ); Thread . sleep ((( int ) ( Math . random () * 500 ))); } catch ( InterruptedException ex ){ ex . printStackTrace (); } } // Philosopher eats private void eat () { synchronized ( _left_fork ) { synchronized ( _right_fork ) { doAction ( Eating, Using forks + _left_fork . get_id () + , + _right_fork . get_id ()); } } } // Philosopher thinks private void think () { doAction ( Thinking ); } @Override public void run () { for ( int i = 0 ; i 10 ; i ++){ eat (); think (); } } } Fork public class Fork { private static int _id ; public Fork ( int id ) { this . _id = id ; } public int get_id () { return _id ; } } Example: List Using ReentrantLock , ReentrantReadWriteLock , synchronized method to synchronize list methods(add, remove, and contains). Using ReentrantLock for Class CoarseLists . Using ReentrantReadWriteLock for Class RWCoarseList . Using synchronized method for Class SyncList . Class ListSet is an abstract class. Coarselist import java.util.concurrent.locks.ReentrantLock ; import java.util.concurrent.locks.ReentrantReadWriteLock ; /** * Wrapper class for two lock-based concurrent list implementations. */ public final class CoarseLists { /** * An implementation of the ListSet interface that uses Java locks to * protect against concurrent accesses. * */ public static final class CoarseList extends ListSet { private final ReentrantLock lock = new ReentrantLock (); /** * Default constructor. */ public CoarseList () { super (); } /** * {@inheritDoc} * */ @Override boolean add ( final Integer object ) { lock . lock (); try { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { return false ; } else { final Entry entry = new Entry ( object ); entry . next = curr ; pred . next = entry ; return true ; } } finally { lock . unlock (); } } /** * {@inheritDoc} * */ @Override boolean remove ( final Integer object ) { lock . lock (); try { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { pred . next = curr . next ; return true ; } else { return false ; } } finally { lock . unlock (); } } /** * {@inheritDoc} * */ @Override boolean contains ( final Integer object ) { lock . lock (); try { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } return object . equals ( curr . object ); } finally { lock . unlock (); } } } /** * An implementation of the ListSet interface that uses Java read-write * locks to protect against concurrent accesses. * */ public static final class RWCoarseList extends ListSet { private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock (); /** * Default constructor. */ public RWCoarseList () { super (); } /** * {@inheritDoc} * */ @Override boolean add ( final Integer object ) { try { lock . writeLock (). lock (); Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { return false ; } else { final Entry entry = new Entry ( object ); entry . next = curr ; pred . next = entry ; return true ; } } finally { lock . writeLock (). unlock (); } } /** * {@inheritDoc} * */ @Override boolean remove ( final Integer object ) { try { lock . writeLock (). lock (); Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { pred . next = curr . next ; return true ; } else { return false ; } } finally { lock . writeLock (). unlock (); } } /** * {@inheritDoc} * */ @Override boolean contains ( final Integer object ) { try { lock . readLock (). lock (); Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } return object . equals ( curr . object ); } finally { lock . readLock (). unlock (); } } } } Synclist /** * Class SyncList implements a thread-safe sorted list data structure that * supports contains(), add() and remove() methods. * * Thread safety is guaranteed by declaring each of the methods to be * synchronized. */ public final class SyncList extends ListSet { /** * Constructor. */ public SyncList () { super (); } /** * {@inheritDoc} */ public synchronized boolean contains ( final Integer object ) { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } return object . equals ( curr . object ); } /** * {@inheritDoc} */ public synchronized boolean add ( final Integer object ) { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { return false ; } else { final Entry entry = new Entry ( object ); entry . next = curr ; pred . next = entry ; return true ; } } /** * {@inheritDoc} */ public synchronized boolean remove ( final Integer object ) { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { pred . next = curr . next ; return true ; } else { return false ; } } } Listset /** * Lists that support this interface must be able to add * objects, remove objects, and test for existence of an object. These methods * are required to maintain a sorted list of items internally with no * duplicates. */ public abstract class ListSet { /** * Starting entry of this concurrent list. */ protected final Entry head ; /** * Default constructor. */ public ListSet () { this . head = new Entry ( Integer . MIN_VALUE ); this . head . next = new Entry ( Integer . MAX_VALUE ); } /** * Getter for the head of the list. * * @return The head of this list. */ public Entry getHead () { return head ; } /** * Add an integer value to this sorted list, ensuring uniqueness. This * method must use ListSet.head as the head of the list. * * @param o The integer to add. * @return false if this value already exists in the list, true otherwise */ abstract boolean add ( Integer o ); /** * Remove an integer value from this list if it exists. This method must use * ListSet.head as the head of the list. * * @param o The integer to remove. * @return true if this value is found in the list and successfully removed, * false otherwise */ abstract boolean remove ( Integer o ); /** * Check if this list contains the provided value. This method must use * ListSet.head as the head of the list. * * @param o The integer to check for. * @return true if this list contains the target value, false otherwise. */ abstract boolean contains ( Integer o ); } Java Volatile The Java volatile keyword is used to mark a Java variable as \"being stored in main memory\". More precisely that means, that every read of a volatile variable will be read from the computer's main memory, and not from the CPU cache, and that every write to a volatile variable will be written to main memory, and not just to the CPU cache. http://tutorials.jenkov.com/java-concurrency/volatile.html#variable-visibility-problems https://stackoverflow.com/questions/106591/do-you-ever-use-the-volatile-keyword-in-java https://www.cnblogs.com/chengxiao/p/6528109.html","title":"Ch1"},{"location":"os/cpj/ch1/#concurrent-programming-in-java-1-threads-and-locks","text":"","title":"Concurrent Programming in Java 1: Threads and Locks"},{"location":"os/cpj/ch1/#threads","text":"A unique aspect of Java compared to prior mainstream programming languages is that Java included the notions of threads (as instances of the \\mathtt {java.lang.Thread} \\mathtt {java.lang.Thread} class) in its language definition right from the start. When an instance of \\mathtt {Thread} \\mathtt {Thread} is created (via a \\mathtt {new} \\mathtt {new} operation), it does not start executing right away; instead, it can only start executing when its \\mathtt {start}() \\mathtt {start}() method is invoked. The statement or computation to be executed by the thread is specified as a parameter to the constructor. The \\mathtt {Thread} \\mathtt {Thread} class also includes a wait operation in the form of a \\mathtt {join}() \\mathtt {join}() method. If thread \\mathtt {t0} \\mathtt {t0} performs a \\mathtt {t1.join}() \\mathtt {t1.join}() call, thread \\mathtt {t0} \\mathtt {t0} will be forced to wait until thread \\mathtt {t1} \\mathtt {t1} completes, after which point it can safely access any values computed by thread \\mathtt {t1} \\mathtt {t1} . Since there is no restriction on which thread can perform a \\mathtt {join} \\mathtt {join} on which other thread, it is possible for a programmer to erroneously create a deadlock cycle with \\mathtt {join} \\mathtt {join} operations. (A deadlock occurs when two threads wait for each other indefinitely, so that neither can make any progress.)","title":"Threads"},{"location":"os/cpj/ch1/#thread-creation","text":"Java Tutorials - Defining and Starting a Thread An application that creates an instance of \\mathtt {Thread} \\mathtt {Thread} must provide the code that will run in that thread. There are two ways to do this: Provide a Runnable object . The Runnable interface defines a single method, run , meant to contain the code executed in the thread. The Runnable object is passed to the Thread constructor, as in the HelloRunnable example: public class HelloRunnable implements Runnable { public void run () { System . out . println ( Hello from a thread! ); } public static void main ( String args []) { ( new Thread ( new HelloRunnable ())). start (); } } Subclass Thread . The Thread class itself implements Runnable , though its run method does nothing. An application can subclass Thread , providing its own implementation of run , as in the HelloThread example: public class HelloThread extends Thread { public void run () { System . out . println ( Hello from a thread! ); } public static void main ( String args []) { ( new HelloThread ()). start (); } } Which of these idioms should you use? The first idiom, which employs a Runnable object, is more general, because the Runnable object can subclass a class other than Thread .","title":"Thread creation"},{"location":"os/cpj/ch1/#synchronized-methods","text":"Java tutorials - Synchronized Methods Making methods synchronized has two effects: First, it is NOT possible for two invocations of synchronized methods on the same object to interleave. When one thread is executing a synchronized method for an object, all other threads that invoke synchronized methods for the same object block (suspend execution) until the first thread is done with the object. Second, when a synchronized method exits, it automatically establishes a happens-before relationship with any subsequent invocation of a synchronized method for the same object. This guarantees that changes to the state of the object are visible to all threads.","title":"Synchronized Methods"},{"location":"os/cpj/ch1/#structured-locks","text":"Structured locks can be used to enforce mutual exclusion and avoid data races. A major benefit of structured locks is that their acquire and release operations are implicit , since these operations are automatically performed by the Java runtime environment when entering and exiting the scope of a synchronized statement or method, even if an exception is thrown in the middle. wait() and notify() operations can be used to block and resume threads that need to wait for specific conditions.","title":"Structured Locks"},{"location":"os/cpj/ch1/#guarded-blocks","text":"Java Tutorials - Guarded Blocks Guarded block is the most common coordination idiom. It begins by polling a condition that before the block can proceed. Suppose, for example guardedJoy is a method that must not proceed until a shared variable joy has been set by another thread. An efficient guard invokes Object.wait to suspend the current thread. The invocation of wait does not return until another thread has issued a notification that some special event may have occurred. public void guardedJoy () { // Simple loop guard. Wastes // processor time. Don t do this! while (! joy ) {} System . out . println ( Joy has been achieved! ); } A more efficient guard invokes Object.wait to suspend the current thread. The invocation of wait does not return until another thread has issued a notification that some special event may have occurred \u2014 though not necessarily the event this thread is waiting for: public synchronized void guardedJoy () { // This guard only loops once for each special event, which may not // be the event we re waiting for. while (! joy ) { try { wait (); } catch ( InterruptedException e ) {} } System . out . println ( Joy and efficiency have been achieved! ); } When wait is invoked, the thread releases the lock and suspends execution. At some future time, another thread will acquire the same lock and invoke Object.notifyAll , informing all threads waiting on that lock that something important has happened: public synchronized notifyJoy () { joy = true ; notifyAll (); } Note notifyAll() wakes up all threads that are waiting on the object's monitor. notify wakes up a single thread that is waiting on this object's monitor. Question What's the useful difference between notify() and notifyAll() ? [ ref ] Simply put, choosing one of them depends on why your threads are waiting to be notified. In some cases, all waiting threads can take useful action once the wait finishes. Suppose a set of threads waiting for a certain task to finish; once the task has finished, all waiting threads can continue with their business. In such a case you would use notifyAll() to wake up all waiting threads at the same time. Another case, for example mutually exclusive locking, only one of the waiting threads can do something useful after being notified (in this case acquire the lock). In such a case, you would rather use notify() . Properly implemented, you could use notifyAll() in this situation as well, but you would unnecessarily wake threads that can't do anything anyway. Let's use guarded blocks to create a Producer-Consumer application. This kind of application shares data between two threads: the producer, that creates the data, and the consumer, that does something with it. The two threads communicate using a shared object. Coordination is essential: the consumer thread must not attempt to retrieve the data before the producer thread has delivered it, and the producer thread must not attempt to deliver new data if the consumer hasn't retrieved the old data. The data is a series of text messages, which are shared through an object of type Drop. Drop public class Drop { // Message sent from producer // to consumer. private String message ; // True if consumer should wait // for producer to send message, // false if producer should wait for // consumer to retrieve message. private boolean empty = true ; public synchronized String take () { // Wait until message is // available. while ( empty ) { try { wait (); } catch ( InterruptedException e ) {} } // Toggle status. empty = true ; // Notify producer that // status has changed. notifyAll (); return message ; } public synchronized void put ( String message ) { // Wait until message has // been retrieved. while (! empty ) { try { wait (); } catch ( InterruptedException e ) {} } // Toggle status. empty = false ; // Store message. this . message = message ; // Notify consumer that status // has changed. notifyAll (); } } Producer import java.util.Random ; public class Producer implements Runnable { private Drop drop ; public Producer ( Drop drop ) { this . drop = drop ; } public void run () { String importantInfo [] = { Mares eat oats , Does eat oats , Little lambs eat ivy , A kid will eat ivy too }; Random random = new Random (); for ( int i = 0 ; i importantInfo . length ; i ++) { drop . put ( importantInfo [ i ]); try { Thread . sleep ( random . nextInt ( 5000 )); } catch ( InterruptedException e ) {} } drop . put ( DONE ); } } Consumer import java.util.Random ; public class Consumer implements Runnable { private Drop drop ; public Consumer ( Drop drop ) { this . drop = drop ; } public void run () { Random random = new Random (); for ( String message = drop . take (); ! message . equals ( DONE ); message = drop . take ()) { System . out . format ( MESSAGE RECEIVED: %s%n , message ); try { Thread . sleep ( random . nextInt ( 5000 )); } catch ( InterruptedException e ) {} } } } Example public class ProducerConsumerExample { public static void main ( String [] args ) { Drop drop = new Drop (); ( new Thread ( new Producer ( drop ))). start (); ( new Thread ( new Consumer ( drop ))). start (); } }","title":"Guarded Blocks"},{"location":"os/cpj/ch1/#intrinsic-locks-and-synchronization","text":"Tutorial on Intrinsic Locks and Synchronization in Java Every object has an intrinsic lock (also, monitor lock or monitor ) associated with it. By convention, a thread that needs exclusive and consistent access to an object's fields has to acquire the object's intrinsic lock before accessing them, and then release the intrinsic lock when it's done with them. Locks In Synchronized Methods When a thread invokes a synchronized method, it automatically acquires the intrinsic lock for that method's object and releases it when the method returns. The lock release occurs even if the return was caused by an uncaught exception. Note When a static synchronized method is invoked, since a static method is associated with a class, not an object, the thread acquires the intrinsic lock for the Class object associated with the class. Thus access to class's static fields is controlled by a lock that's distinct from the lock for any instance of the class. Synchronized Statements Synchronized statements must specify the object that provides the intrinsic lock: public void addName ( String name ) { synchronized ( this ) { lastName = name ; nameCount ++; } nameList . add ( name ); } Reentrant Synchronization A thread can acquire a lock that it already owns. Allowing a thread to acquire the same lock more than once enables reentrant synchronization (\u91cd\u5165\u540c\u6b65).","title":"Intrinsic Locks and Synchronization"},{"location":"os/cpj/ch1/#unstructured-locks","text":"","title":"Unstructured Locks"},{"location":"os/cpj/ch1/#reentrantlock","text":"A ReentrantLock (\u91cd\u5165\u9501) is unstructured , unlike synchronized constructs -- i.e. you don't need to use a block structure for locking and can even hold a lock across methods. A reentrant mutual exclusion Lock with the same basic behavior and semantics as the implicit monitor lock accessed using synchronized methods and statements, but with extended capabilities.[ Java Doc-Class ReentrantLock ] A ReentrantLock is owned by the thread last successfully locking, but not yet unlocking it. A thread invoking lock will return, successfully acquiring the lock, when the lock is not owned by another thread. It is recommended practice to always immediately follow a call to lock with a try block, most typically in a before/after construction such as: class X { private final ReentrantLock lock = new ReentrantLock (); // ... public void m () { lock . lock (); // block until condition holds try { // ... method body } finally { lock . unlock () } } }","title":"ReentrantLock"},{"location":"os/cpj/ch1/#interface-lock","text":"Java Doc-Interface Lock public interface Lock Lock implementations provide more extensive locking operations than can be obtained using synchronized methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated Condition objects. Comparison with synchronized methods and statements The use of synchronized methods or statements provides access to the implicit monitor lock associated with every object, but forces all lock acquisition and release to occur in a block-structured way : when multiple locks are acquired they must be released in the opposite order, and all locks must be released in the same lexical scope in which they were acquired. Implementations of the Lock interface enable the lock to be acquired and released in different scopes , and allowing multiple locks to be acquired and released in any order . In most cases, the following idiom should be used: Lock l = ...; l . lock (); try { // access the resource protected by this lock } finally { l . unlock (); } Note When locking and unlocking occur in different scopes, care must be taken to ensure that all code that is executed while the lock is held is protected by try-finally or try-catch to ensure that the lock is released when necessary.","title":"Interface Lock"},{"location":"os/cpj/ch1/#trylock","text":"Java Doc - tryLock tryLock acquires the lock only if it is free at the time of invocation. A typical usage idiom for this method would be: Lock lock = ...; if ( lock . tryLock ()) { try { // manipulate protected state } finally { lock . unlock (); } } else { // perform alternative actions }","title":"tryLock"},{"location":"os/cpj/ch1/#liveness","text":"A concurrent application's ability to execute in a timely manner is known as its liveness . Common forms of Liveness failure: The first is deadlock , in which all threads are blocked indefinitely, thereby preventing any forward progress. The second is livelock , in which all threads repeatedly perform an interaction that prevents forward progress, e.g., an infinite \u201cloop\u201d of repeating lock acquire/release patterns. The third is starvation , in which at least one thread is prevented from making any forward progress. Liveness failures in detail on OSC","title":"Liveness"},{"location":"os/cpj/ch1/#dining-philosophers","text":"Dining Philosophers described in OSC The philosophers follow the following protocol: while ( true ) { // Initially, thinking about life, universe, and everything think (); // Take a break from thinking, hungry now pick_up_left_fork (); pick_up_right_fork (); eat (); put_down_right_fork (); put_down_left_fork (); // Not hungry anymore. Back to thinking! }","title":"Dining Philosophers"},{"location":"os/cpj/ch1/#implementation","text":"The Dining Philosophers Problem in Java We model each of our philosophers as classes that implement the Runnable interface so that we can run them as separate threads. Each Philosopher has access to two forks on his left and right sides. Consider a situation in which all philosophers grab the left fork/chopsticks at the same time, leading to the deadlock. Simply, We introduce the condition that makes the last philosopher reach for his right fork first, instead of the left. This breaks the circular wait condition and we can avert the deadlock. Diningphilosopherstable public class DiningPhilosophersTable { private static int numPhilosophers ; private static int numForks ; public DiningPhilosophersTable ( int num ){ this . numPhilosophers = num ; this . numForks = num ; Philosopher [] philosophers = new Philosopher [ numPhilosophers ]; Fork [] forks = new Fork [ numForks ]; // Initialize array of forks for ( int i = 0 ; i numForks ; i ++) { forks [ i ] = new Fork ( i + 1 ); } for ( int i = 0 ; i numPhilosophers ; i ++) { // avoid deadlock: the last philosopher picks up the right fork first if ( i == philosophers . length - 1 ) { philosophers [ i ] = new Philosopher ( Integer . toString ( i ), forks [( i + 1 ) / numForks ], forks [ i ]); } else { philosophers [ i ] = new Philosopher ( Integer . toString ( i ), forks [ i ], forks [( i + 1 ) / numForks ]); } } for ( int i = 0 ; i numPhilosophers ; i ++) { Thread thread = new Thread ( philosophers [ i ], Philosopher + Integer . toString ( i )); thread . start (); } // end for } // end constructor public static void main ( String [] args ) { DiningPhilosophersTable dining = new DiningPhilosophersTable ( 5 ); } // end main } Philosopher public class Philosopher implements Runnable { private Fork _left_fork ; private Fork _right_fork ; private String _name ; public Philosopher ( String name , Fork left_fork , Fork right_fork ) { _name = name ; _left_fork = left_fork ; _right_fork = right_fork ; } private void doAction ( String action ) { try { System . out . println ( Thread . currentThread (). getName () + : + action ); Thread . sleep ((( int ) ( Math . random () * 500 ))); } catch ( InterruptedException ex ){ ex . printStackTrace (); } } // Philosopher eats private void eat () { synchronized ( _left_fork ) { synchronized ( _right_fork ) { doAction ( Eating, Using forks + _left_fork . get_id () + , + _right_fork . get_id ()); } } } // Philosopher thinks private void think () { doAction ( Thinking ); } @Override public void run () { for ( int i = 0 ; i 10 ; i ++){ eat (); think (); } } } Fork public class Fork { private static int _id ; public Fork ( int id ) { this . _id = id ; } public int get_id () { return _id ; } }","title":"Implementation"},{"location":"os/cpj/ch1/#example-list","text":"Using ReentrantLock , ReentrantReadWriteLock , synchronized method to synchronize list methods(add, remove, and contains). Using ReentrantLock for Class CoarseLists . Using ReentrantReadWriteLock for Class RWCoarseList . Using synchronized method for Class SyncList . Class ListSet is an abstract class. Coarselist import java.util.concurrent.locks.ReentrantLock ; import java.util.concurrent.locks.ReentrantReadWriteLock ; /** * Wrapper class for two lock-based concurrent list implementations. */ public final class CoarseLists { /** * An implementation of the ListSet interface that uses Java locks to * protect against concurrent accesses. * */ public static final class CoarseList extends ListSet { private final ReentrantLock lock = new ReentrantLock (); /** * Default constructor. */ public CoarseList () { super (); } /** * {@inheritDoc} * */ @Override boolean add ( final Integer object ) { lock . lock (); try { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { return false ; } else { final Entry entry = new Entry ( object ); entry . next = curr ; pred . next = entry ; return true ; } } finally { lock . unlock (); } } /** * {@inheritDoc} * */ @Override boolean remove ( final Integer object ) { lock . lock (); try { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { pred . next = curr . next ; return true ; } else { return false ; } } finally { lock . unlock (); } } /** * {@inheritDoc} * */ @Override boolean contains ( final Integer object ) { lock . lock (); try { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } return object . equals ( curr . object ); } finally { lock . unlock (); } } } /** * An implementation of the ListSet interface that uses Java read-write * locks to protect against concurrent accesses. * */ public static final class RWCoarseList extends ListSet { private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock (); /** * Default constructor. */ public RWCoarseList () { super (); } /** * {@inheritDoc} * */ @Override boolean add ( final Integer object ) { try { lock . writeLock (). lock (); Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { return false ; } else { final Entry entry = new Entry ( object ); entry . next = curr ; pred . next = entry ; return true ; } } finally { lock . writeLock (). unlock (); } } /** * {@inheritDoc} * */ @Override boolean remove ( final Integer object ) { try { lock . writeLock (). lock (); Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { pred . next = curr . next ; return true ; } else { return false ; } } finally { lock . writeLock (). unlock (); } } /** * {@inheritDoc} * */ @Override boolean contains ( final Integer object ) { try { lock . readLock (). lock (); Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } return object . equals ( curr . object ); } finally { lock . readLock (). unlock (); } } } } Synclist /** * Class SyncList implements a thread-safe sorted list data structure that * supports contains(), add() and remove() methods. * * Thread safety is guaranteed by declaring each of the methods to be * synchronized. */ public final class SyncList extends ListSet { /** * Constructor. */ public SyncList () { super (); } /** * {@inheritDoc} */ public synchronized boolean contains ( final Integer object ) { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } return object . equals ( curr . object ); } /** * {@inheritDoc} */ public synchronized boolean add ( final Integer object ) { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { return false ; } else { final Entry entry = new Entry ( object ); entry . next = curr ; pred . next = entry ; return true ; } } /** * {@inheritDoc} */ public synchronized boolean remove ( final Integer object ) { Entry pred = this . head ; Entry curr = pred . next ; while ( curr . object . compareTo ( object ) 0 ) { pred = curr ; curr = curr . next ; } if ( object . equals ( curr . object )) { pred . next = curr . next ; return true ; } else { return false ; } } } Listset /** * Lists that support this interface must be able to add * objects, remove objects, and test for existence of an object. These methods * are required to maintain a sorted list of items internally with no * duplicates. */ public abstract class ListSet { /** * Starting entry of this concurrent list. */ protected final Entry head ; /** * Default constructor. */ public ListSet () { this . head = new Entry ( Integer . MIN_VALUE ); this . head . next = new Entry ( Integer . MAX_VALUE ); } /** * Getter for the head of the list. * * @return The head of this list. */ public Entry getHead () { return head ; } /** * Add an integer value to this sorted list, ensuring uniqueness. This * method must use ListSet.head as the head of the list. * * @param o The integer to add. * @return false if this value already exists in the list, true otherwise */ abstract boolean add ( Integer o ); /** * Remove an integer value from this list if it exists. This method must use * ListSet.head as the head of the list. * * @param o The integer to remove. * @return true if this value is found in the list and successfully removed, * false otherwise */ abstract boolean remove ( Integer o ); /** * Check if this list contains the provided value. This method must use * ListSet.head as the head of the list. * * @param o The integer to check for. * @return true if this list contains the target value, false otherwise. */ abstract boolean contains ( Integer o ); }","title":"Example: List"},{"location":"os/cpj/ch1/#java-volatile","text":"The Java volatile keyword is used to mark a Java variable as \"being stored in main memory\". More precisely that means, that every read of a volatile variable will be read from the computer's main memory, and not from the CPU cache, and that every write to a volatile variable will be written to main memory, and not just to the CPU cache. http://tutorials.jenkov.com/java-concurrency/volatile.html#variable-visibility-problems https://stackoverflow.com/questions/106591/do-you-ever-use-the-volatile-keyword-in-java https://www.cnblogs.com/chengxiao/p/6528109.html","title":"Java Volatile"},{"location":"os/cpj/ch2/","text":"Concurrent Programming in Java 2: Threads and Locks 1 Critical Sections The definition of critical sections and its corresponding problems discussed in Operating System Concpets, Ch6 . 2 Object Based Isolation The definition of moniter discussed in Operating System Concpets, Ch6 . The usage of moniter in Java discussed in Operating System Concpets, Ch7 . 3 Atomic Variables The definition of atomic variables in Java discussed in Operating System Concpets, Ch6 . The usage of atomic variables in Java discussed in Operating System Concpets, Ch7 . 4 Read-Write Isolation \u7565","title":"Ch2"},{"location":"os/cpj/ch2/#concurrent-programming-in-java-2-threads-and-locks","text":"","title":"Concurrent Programming in Java 2: Threads and Locks"},{"location":"os/cpj/ch2/#1-critical-sections","text":"The definition of critical sections and its corresponding problems discussed in Operating System Concpets, Ch6 .","title":"1 Critical Sections"},{"location":"os/cpj/ch2/#2-object-based-isolation","text":"The definition of moniter discussed in Operating System Concpets, Ch6 . The usage of moniter in Java discussed in Operating System Concpets, Ch7 .","title":"2 Object Based Isolation"},{"location":"os/cpj/ch2/#3-atomic-variables","text":"The definition of atomic variables in Java discussed in Operating System Concpets, Ch6 . The usage of atomic variables in Java discussed in Operating System Concpets, Ch7 .","title":"3 Atomic Variables"},{"location":"os/cpj/ch2/#4-read-write-isolation","text":"\u7565","title":"4 Read-Write Isolation"},{"location":"os/cpj/ch3/","text":"Concurrent Programming in Java 3: Threads and Locks","title":"Ch3"},{"location":"os/cpj/ch3/#concurrent-programming-in-java-3-threads-and-locks","text":"","title":"Concurrent Programming in Java 3: Threads and Locks"},{"location":"os/cpj/ch4/","text":"Concurrent Programming in Java 4: Threads and Locks","title":"Ch4"},{"location":"os/cpj/ch4/#concurrent-programming-in-java-4-threads-and-locks","text":"","title":"Concurrent Programming in Java 4: Threads and Locks"},{"location":"os/csapp/","text":"CSAPP Chapter 1: \u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38 Chapter 2: \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406 Chapter 3: \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a Chapter 4: \u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784 Chapter 5: \u4f18\u5316\u7a0b\u5e8f\u6027\u80fd Chapter 6: \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 Chapter 7: \u94fe\u63a5 Chapter 8: \u5f02\u5e38\u63a7\u5236\u6d41 Chapter 9: \u865a\u62df\u5185\u5b58 Chapter 10: \u7cfb\u7edf\u7ea7I/O Chapter 11: \u7f51\u7edc\u7f16\u7a0b","title":"Contents"},{"location":"os/csapp/#csapp","text":"Chapter 1: \u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38 Chapter 2: \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406 Chapter 3: \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a Chapter 4: \u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784 Chapter 5: \u4f18\u5316\u7a0b\u5e8f\u6027\u80fd Chapter 6: \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 Chapter 7: \u94fe\u63a5 Chapter 8: \u5f02\u5e38\u63a7\u5236\u6d41 Chapter 9: \u865a\u62df\u5185\u5b58 Chapter 10: \u7cfb\u7edf\u7ea7I/O Chapter 11: \u7f51\u7edc\u7f16\u7a0b","title":"CSAPP"},{"location":"os/csapp/ch1/","text":"Chapter 1 \u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38","title":"Chapter 1: \u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38"},{"location":"os/csapp/ch1/#chapter-1","text":"","title":"Chapter 1 \u8ba1\u7b97\u673a\u7cfb\u7edf\u6f2b\u6e38"},{"location":"os/csapp/ch10/","text":"Chapter 10 \u7cfb\u7edf\u7ea7I/O","title":"Chapter 10: \u7cfb\u7edf\u7ea7I/O"},{"location":"os/csapp/ch10/#chapter-10-io","text":"","title":"Chapter 10 \u7cfb\u7edf\u7ea7I/O"},{"location":"os/csapp/ch11/","text":"Chapter 11 \u7f51\u7edc\u7f16\u7a0b 1 \u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u7f16\u7a0b\u6a21\u578b \u6bcf\u4e2a\u7f51\u7edc\u5e94\u7528\u90fd\u662f\u57fa\u4e8e \u5ba2\u6237\u7aef-\u670d\u52a1\u5668 \u6a21\u578b\u7684\u3002 \u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u6a21\u578b\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u662f \u4e8b\u52a1 (transaction)\u3002\u4e00\u4e2a\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u4e8b\u52a1\u7531\u4ee5\u4e0b\u56db\u6b65\u7ec4\u6210\uff1a \u5f53\u4e00\u4e2a\u5ba2\u6237\u7aef\u9700\u8981\u670d\u52a1\u65f6\uff0c\u5b83\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u53d1\u8d77\u4e00\u4e2a\u4e8b\u52a1\u3002 \u670d\u52a1\u5668\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u89e3\u91ca\u5b83\uff0c\u5e76\u4ee5\u9002\u5f53\u7684\u65b9\u5f0f\u64cd\u4f5c\u5b83\u7684\u8d44\u6e90\u3002 \u670d\u52a1\u5668\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u54cd\u5e94\uff0c\u5e76\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u3002 \u5ba2\u6237\u7aef\u6536\u5230\u54cd\u5e94\u5e76\u5904\u7406\u5b83\u3002 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u662f\u8fdb\u7a0b \uff0c\u800c\u4e0d\u662f\u5e38\u63d0\u5230\u7684\u673a\u5668\u6216\u8005\u4e3b\u673a\u3002 \u4e00\u53f0\u4e3b\u673a\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u8bb8\u591a\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668 \u4e00\u4e2a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u4e8b\u52a1\u53ef\u4ee5\u5728\u540c\u4e00\u53f0\u6216\u662f\u4e0d\u540c\u7684\u4e3b\u673a\u4e0a\u3002 2 \u7f51\u7edc \u5bf9\u4e3b\u673a\u800c\u8a00\uff0c\u7f51\u7edc\u53ea\u662f\u53c8\u4e00\u79cdI/O\u8bbe\u5907\uff0c\u662f\u6570\u636e\u6e90\u548c\u6570\u636e\u63a5\u6536\u65b9\u3002\u7269\u7406\u4e0a\u800c\u8a00\uff0c\u7f51\u7edc\u662f\u4e00\u4e2a\u6309\u7167\u5730\u7406\u8fdc\u8fd1\u7ec4\u6210\u7684\u5c42\u6b21\u7cfb\u7edf\u3002 \u7f51\u7edc\u5c42\u6b21\u7cfb\u7edf (1) \u6700\u5e95\u5c42\uff1a\u4ee5\u592a\u7f51\u6bb5 \u5c40\u57df\u7f51 (LAN, Local Area Network)\u7684\u8303\u56f4\u4e00\u822c\u9650\u5236\u5728\u4e00\u4e2a\u5efa\u7b51\u6216\u8005\u6821\u56ed\u5185\u3002\u6700\u6d41\u884c\u7684\u5c40\u57df\u7f51\u6280\u672f\u662f \u4ee5\u592a\u7f51 (Ethernet)\uff0c\u7531\u7535\u7f06\u548c\u96c6\u7ebf\u5668(hub)\u7ec4\u6210\u4e00\u4e2a\u4ee5\u592a\u7f51\u6bb5\u3002 (2) \u6865\u63a5\u4ee5\u592a\u7f51 \u6865\u63a5\u4ee5\u592a\u7f51 (bridged Ethernet)\u662f\u5c06\u4ee5\u592a\u7f51\u6bb5\u7528\u7535\u7f06\u548c\u7f51\u6865(bridge)\u8fde\u63a5\u6210\u7684\u8f83\u5927\u7684\u5c40\u57df\u7f51\u3002 (3) \u4e92\u8054\u7f51\u7edc \u591a\u4e2a\u4e0d\u517c\u5bb9\u7684\u5c40\u57df\u7f51\u53ef\u4ee5\u901a\u8fc7\u8def\u7531\u5668(routers)\u8fde\u63a5\u6210\u4e92\u8054\u7f51\u7edc(internets)\u3002 \u7f51\u7edc\u534f\u8bae \u4e92\u8054\u7f51\u7edc\u662f\u7531\u5404\u79cd\u5c40\u57df\u7f51\u548c\u5e7f\u57df\u7f51\u7ec4\u6210\uff0c\u5b83\u4eec\u91c7\u7528\u5b8c\u5168\u4e0d\u540c\u4e14\u4e0d\u517c\u5bb9\u7684\u6280\u672f\u3002\u90a3\u4e48\u5982\u4f55\u80fd\u8ba9\u67d0\u53f0\u4e3b\u673a\u8de8\u8fc7\u6240\u6709\u4e0d\u517c\u5bb9\u7684\u7f51\u7edc\u53d1\u9001\u6570\u636e\u4f4d\u5230\u53e6\u4e00\u53f0\u76ee\u7684\u4e3b\u673a\u5462\uff1f \u89e3\u51b3\u65b9\u6cd5\uff1a\u4e00\u5c42\u8fd0\u884c\u5728\u6bcf\u53f0\u4e3b\u673a\u548c\u8def\u7531\u5668\u4e0a\u7684 \u534f\u8bae \u8f6f\u4ef6\uff0c\u5b83\u6d88\u9664\u4e86\u4e0d\u540c\u7f51\u7edc\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u534f\u8bae\u63d0\u4f9b\u4e86\u4e24\u79cd\u57fa\u672c\u80fd\u529b\uff1a \u63d0\u4f9b\u4e86\u547d\u540d\u673a\u5236 * \u5b9a\u4e49\u4e00\u81f4\u7684 \u4e3b\u673a\u5730\u5740 (host adress)\u683c\u5f0f * \u6bcf\u53f0\u4e3b\u673a\u4f1a\u88ab\u5206\u914d\u81f3\u5c11\u4e00\u4e2a \u4e92\u8054\u7f51\u7edc\u5730\u5740 (internet address)\uff0c\u5730\u5740\u552f\u4e00\u5730\u6807\u8bc6\u4e86\u4e3b\u673a \u63d0\u4f9b\u4e86\u4f20\u9001\u673a\u5236 * \u5b9a\u4e49\u4e86\u7edf\u4e00\u7684\u57fa\u672c\u4f20\u9001\u5355\u4f4d- \u5305 (packet) * \u5305\u7531 \u5305\u5934 (header)\u548c \u6709\u6548\u8f7d\u8377 (payload)\u7ec4\u6210 * \u5305\u5934\u5305\u62ec\u5305\u7684\u5927\u5c0f\u4ee5\u53ca\u6e90\u4e3b\u673a\u548c\u76ee\u7684\u4e3b\u673a\u7684\u5730\u5740 * \u6709\u6548\u8f7d\u8377\u5305\u62ec\u4ece\u6e90\u4e3b\u673a\u53d1\u51fa\u7684\u6570\u636e\u4f4d ![Transferring Internet Data Via Encapsulation](figures/Transferring_Internet_Data_Via_Encapsulation.png) PH: Internet packet header, \u4e92\u8054\u7f51\u7edc\u5305\u5934 FH: LAN frame header, \u5c40\u57df\u7f51\u5e27\u5934 3 \u5168\u7403IP\u56e0\u7279\u7f51 \u5168\u7403IP\u56e0\u7279\u7f51(Global IP Internet)\u662f\u6700\u8457\u540d\u548c\u6700\u6210\u529f\u7684\u4e92\u8054\u7f51\u7edc(internet)\u5b9e\u73b0\u3002\u6bcf\u53f0\u56e0\u7279\u7f51\u4e3b\u673a\u90fd\u8fd0\u884c\u5b9e\u73b0TCP/IP\u534f\u8bae\u7684\u8f6f\u4ef6\uff0c\u4f7f\u7528\u5957\u63a5\u5b57\u63a5\u53e3(sockets interface)\u51fd\u6570\u548cUnix I/O\u51fd\u6570\u6765\u901a\u4fe1\u3002 \u4ece\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff1a \u4e3b\u673a\u88ab\u6620\u5c04\u4e3a\u4e00\u7ec432\u4f4d\u7684 IP\u5730\u5740 (IP addresses) * 128.2.203.179 IP\u5730\u5740\u88ab\u6620\u5c04\u4e3a\u4e00\u7ec4\u6807\u8bc6\u7b26\uff0c\u53eb\u505a \u57df\u540d (domain name) * \u56e0\u7279\u7f51\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u80fd\u591f\u901a\u8fc7 \u8fde\u63a5 \u548c\u4efb\u4f55\u5176\u4ed6\u56e0\u7279\u7f51\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u901a\u4fe1\u3002 IP\u5730\u5740 32\u4f4dIP\u5730\u5740\u5b58\u5728\u4e00\u4e2aIP\u5730\u5740\u7ed3\u6784( in_addr )\u4e2d * IP\u5730\u5740\u5728\u5185\u5b58\u4e2d\u662f\u4ee5 \u7f51\u7edc\u5b57\u8282\u987a\u5e8f (network byte order, \u5927\u7aef\u6cd5)\u5b58\u653e\u7684 /* Internet address structure */ struct in_addr { uint32_t s_addr ; /* network byte order (big-endian) */ }; \u57df\u540d \u57df\u540d (domain names)\u662f\u4e00\u4e32\u7528\u53e5\u70b9\u5206\u9694\u7684\u5355\u8bcd(\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u7834\u6298\u53f7)\u3002\u57df\u540d\u96c6\u5408\u5f62\u6210\u4e86\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u68f5\u6811\u3002 \u57df\u540d\u7cfb\u7edf (Domain Naming System, DNS)\u662f\u6620\u5c04IP\u5730\u5740\u548c\u57df\u540d\u7684\u6570\u636e\u5e93\u3002\u53ef\u4ee5\u628aDNS\u6570\u636e\u5e93\u89c6\u4e3a\u4e0a\u767e\u4e07\u7684 \u4e3b\u673a\u6761\u76ee\u7ed3\u6784 (host entry structure)\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u6bcf\u6761\u5b9a\u4e49\u4e86\u4e00\u7ec4\u57df\u540d\u548c\u4e00\u7ec4IP\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u3002 DNS\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7 nsloopup \u67e5\u770b \u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e2d\uff0c\u4e00\u4e2a\u57df\u540d\u548c\u4e00\u4e2aIP\u5730\u5740\u4e4b\u95f4\u662f\u4e00\u4e00\u6620\u5c04 nslookup whaleshark.ics.cs.cmu.edu - Address : 128.2 . 210.175 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u591a\u4e2a\u57df\u540d\u53ef\u4ee5\u6620\u5c04\u4e3a\u540c\u4e00\u4e2aIP\u5730\u5740 nslookup cs.mit.edu/ nslookup eecs.mit.edu - Address : 18.62 . 1.6 \u5728\u6700\u901a\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u591a\u4e2a\u57df\u540d\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u7ec4\u7684\u591a\u4e2aIP\u5730\u5740 nslookup www.twitter.com - Address : 199.16 . 156.6 , Address : 199.16 . 156.70 \u56e0\u7279\u7f51\u8fde\u63a5 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u8fc7 \u8fde\u63a5 (connections)\u53d1\u9001\u5b57\u8282\u6d41\u6765\u901a\u4fe1\uff0c\u6bcf\u4e00\u4e2a\u8fde\u63a5\u90fd\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u70b9\u5bf9\u70b9(point-to-point)\uff1a\u8fde\u63a5\u4e00\u5bf9\u8fdb\u7a0b \u5168\u53cc\u5de5(full-duplex)\uff1a\u6570\u636e\u53ef\u4ee5\u540c\u65f6\u5728\u4e24\u4e2a\u65b9\u5411\u4f20\u9001 \u53ef\u9760\u6027(reliable)\uff1a\u53d1\u9001\u548c\u63a5\u6536\u7684\u5b57\u8282\u6d41\u987a\u5e8f\u76f8\u540c \u5957\u63a5\u5b57(sockets)\u662f\u8fde\u63a5\u7684\u7aef\u70b9\uff0c\u5957\u63a5\u5b57\u5730\u5740\u7528 \"\u5730\u5740\uff1a\u7aef\u53e3\"\u6765\u8868\u793a\u3002 \u7aef\u53e3(port)\u662f\u4e00\u4e2a16\u4f4d\u6574\u6570\uff0c\u6807\u8bc6\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u4e34\u65f6\u7aef\u53e3\uff1a\u5f53\u53ef\u4f1a\u6de1\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u65f6\uff0c\u5185\u6838\u81ea\u52a8\u5206\u914d\u7684\u7aef\u53e3 \u77e5\u540d\u7aef\u53e3\uff1a\u548c\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u670d\u52a1\u6709\u77ed\u7684\u7aef\u53e3 ( Web\u670d\u52a1\u5668\u4f7f\u7528\u7aef\u53e380 ssh\u670d\u52a1\u5668\u4f7f\u7528\u7aef\u53e322 email\u670d\u52a1\u5668\u4f7f\u7528\u7aef\u53e325 \u4e00\u4e2a\u8fde\u63a5\u662f\u7531\u5b83\u4e24\u7aef\u7684\u5957\u63a5\u5b57\u5730\u5740\u552f\u4e00\u786e\u5b9a\u7684\uff08\u5957\u63a5\u5b57\u5bf9, socket pair\uff09\u3002 \u4f7f\u7528\u7aef\u53e3\u6765\u8bc6\u522b\u670d\u52a1 4 \u5957\u63a5\u5b57\u63a5\u53e3 \u4ec0\u4e48\u662f\u5957\u63a5\u5b57\uff1f \u5bf9\u4e8e\u5185\u6838\u6765\u8bf4\uff0c\u5957\u63a5\u5b57\u662f\u901a\u4fe1\u7684\u7aef\u70b9\u3002 To the kernel, a socket is an endpoint of communication \u5bf9\u4e8e\u5e94\u7528\u6765\u8bf4\uff0c\u5957\u63a5\u5b57\u662f\u8ba9\u5e94\u7528\u4ece\u7f51\u7edc\u8bfb\u5199\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 To an application, a socket is a file descriptor that lets the application read/write from/to the network. \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u8fc7\u5bf9\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\u8bfb\u5199\u8fdb\u884c\u901a\u4fe1\uff1a (1) \u901a\u7528\u5957\u63a5\u5b57\u5730\u5740(generic socket address)\uff1a \u4ee5\u5957\u63a5\u5b57\u5730\u5740\u4f5c\u4e3a connect() , bind() , accept \u7684\u5b9e\u53c2 \u4ec5\u4ec5\u56e0\u4e3a\u90a3\u65f6\u7684C\u4e0d\u5b58\u5728 void * \u6307\u9488\uff0c\u6240\u4ee5\u5957\u63a5\u5b57\u63a5\u53e3\u88ab\u8bbe\u8ba1\u6210\u8fd9\u6837\u3002 struct sockaddr { uint16_t sa_family ; /* Protocol family */ char sa_data [ 14 ]; }; /* Address data. */ (2) \u56e0\u7279\u7f51\u7684\u5957\u63a5\u5b57\u5730\u5740 * \u5fc5\u987b\u5c06 struct sockaddr_in * \u8f6c\u6362\u4e3a struct sockaddr * \u624d\u80fd\u4ee5\u5957\u63a5\u5b57\u5730\u5740\u4f5c\u4e3a\u51fd\u6570\u5b9e\u53c2 struct sockaddr_in { uint16_t sin_family ; uint16_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ 8 ]; }; \u5f00\u542f\u670d\u52a1\u5668(start server) getaddrinfo : \u628a\u4e3b\u673a\u540d(hostname\uff09\u3001\u4e3b\u673a\u5730\u5740(host addresses)\u3001\u7aef\u53e3(ports)\u548c\u670d\u52a1\u540d(service names)\u8f6c\u6362\u4e3a\u5957\u63a5\u5b57\u5730\u5740\u7ed3\u6784\u3002 socket : \u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26(socket descriptor)\uff0c\u4e5f\u5c31\u662f\u4e4b\u540e\u7528\u6765\u8bfb\u5199\u7684 file descriptor bind : \u8bf7\u6c42\u5185\u6838\u628a\u5957\u63a5\u5b57\u5730\u5740\u548c\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\u7ed1\u5b9a listen : \u5c06\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\u4ece\u4e00\u4e2a\u4e3b\u52a8\u5957\u63a5\u5b57\u8f6c\u6362\u4e3a\u76d1\u542c\u5957\u63a5\u5b57(listening socket)\uff0c\u8be5\u5957\u63a5\u5b57\u53ef\u4ee5\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 accept : \u7b49\u5f85\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 \u5f00\u542f\u5ba2\u6237\u7aef(start client) getaddrinfo , socket \u4e0e\u5f00\u542f\u670d\u52a1\u5668\u76f8\u540c connect : \u8bd5\u56fe\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5 Echo\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u793a\u4f8b \u5728\u548c\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u4e4b\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165\u4e00\u4e2a\u5faa\u73af\uff0c\u53cd\u590d\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6587\u672c\u884c\uff0c\u53d1\u9001\u6587\u672c\u884c\u7ed9\u670d\u52a1\u5668\uff0c\u4ece\u670d\u52a1\u5668\u8bfb\u53d6\u56de\u9001\u7684\u884c\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u5230\u63a5\u51c6\u8f93\u51fa\u3002 #include csapp.h int main ( int argc , char ** argv ) { int clientfd ; char * host , * port , buf [ MAXLINE ]; rio_t rio ; host = argv [ 1 ]; port = argv [ 2 ]; //\u548c\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5 clientfd = Open_clientfd ( host , port ); Rio_readinitb ( rio , clientfd ); while ( Fgets ( buf , MAXLINE , stdin ) != NULL ) { // \u5199\u5165\uff0c\u4e5f\u5c31\u662f\u5411\u670d\u52a1\u5668\u53d1\u9001\u4fe1\u606f Rio_writen ( clientfd , buf , strlen ( buf )); // \u8bfb\u53d6\uff0c\u4e5f\u5c31\u662f\u4ece\u670d\u52a1\u5668\u63a5\u6536\u4fe1\u606f Rio_readlineb ( rio , buf , MAXLINE ); // \u628a\u4ece\u670d\u52a1\u5668\u63a5\u6536\u7684\u4fe1\u606f\u663e\u793a\u5728\u8f93\u51fa\u4e2d Fputs ( buf , stdout ); } Close ( clientfd ); exit ( 0 ); } \u670d\u52a1\u5668\u5728\u6253\u5f00\u76d1\u542c\u63cf\u8ff0\u7b26\u540e\uff0c\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002\u6bcf\u6b21\u5faa\u73af\u90fd\u7b49\u5f85\u4e00\u4e2a\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u8f93\u51fa\u5df2\u8fde\u63a5\u5ba2\u6237\u7aef\u7684\u57df\u540d\u548cIP\u5730\u5740\uff0c\u5e76\u8c03\u7528 echo \u51fd\u6570\u4e3a\u8fd9\u4e9b\u5ba2\u6237\u7aef\u670d\u52a1\u3002\u5728 echo \u7a0b\u5e8f\u8fd4\u56de\u540e\uff0c\u4e3b\u7a0b\u5e8f\u5173\u95ed\u5df2\u8fde\u63a5\u63cf\u8ff0\u7b26\u3002 #include csapp.h void echo ( int connfd ); int main ( int argc , char ** argv ){ int listenfd , connfd ; socklen_t clientlen ; struct sockaddr_storage clientaddr ; // Enough room for any addr char client_hostname [ MAXLINE ], client_port [ MAXLINE ]; // \u5f00\u542f\u76d1\u542c\u7aef\u53e3\uff0c\u6ce8\u610f\u53ea\u5f00\u8fd9\u4e48\u4e00\u6b21 listenfd = Open_listenfd ( argv [ 1 ]); while ( 1 ) { // \u9700\u8981\u5177\u4f53\u7684\u5927\u5c0f clientlen = sizeof ( struct sockaddr_storage ); // Important! // \u7b49\u5f85\u8fde\u63a5 connfd = Accept ( listenfd , ( SA * ) clientaddr , clientlen ); // \u83b7\u53d6\u5ba2\u6237\u7aef\u76f8\u5173\u4fe1\u606f Getnameinfo (( SA * ) clientaddr , clientlen , client_hostname , MAXLINE , client_port , MAXLINE , 0 ); printf ( Connected to (%s, %s) \\n , client_hostname , client_port ); // \u670d\u52a1\u5668\u5177\u4f53\u5b8c\u6210\u7684\u5de5\u4f5c echo ( coonfd ); Close ( connfd ); } exit ( 0 ); } void echo ( int connfd ) { size_t n ; char buf [ MAXLINE ]; rio_t rio ; // \u8bfb\u53d6\u4ece\u5ba2\u6237\u7aef\u4f20\u8f93\u8fc7\u6765\u7684\u6570\u636e Rio_readinitb ( rio , connfd ); while (( n = Rio_readlineb ( rio , buf , MAXLINE )) != 0 ) { printf ( server received %d bytes \\n , ( int ) n ); // \u628a\u4ece client \u63a5\u6536\u5230\u7684\u4fe1\u606f\u518d\u5199\u56de\u53bb Rio_writen ( connfd , buf , n ); } } 5 Web\u670d\u52a1\u5668 Web\u57fa\u7840 Web\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4ea4\u4e92\u7528\u7684\u662f HTTP\u534f\u8bae (\u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae)\uff0c\u4ea4\u4e92\u7684\u57fa\u672c\u8fc7\u7a0b\u4e3a\uff1a \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5efa\u7acbTCP\u8fde\u63a5 \u5ba2\u6237\u7aef\u8bf7\u6c42\u5185\u5bb9 \u670d\u52a1\u5668\u54cd\u5e94\u8bf7\u6c42\u7684\u5185\u5bb9 \u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u6700\u7ec8\u5173\u95ed \u8fde\u63a5 Web\u5185\u5bb9 Web\u670d\u52a1\u5668\u8fd4\u56de\u5185\u5bb9\u7ed9\u5ba2\u6237\u7aef\uff0c\u5185\u5bb9\u662f\u4e0e\u4e00\u4e2a MIME \u7c7b\u578b\u76f8\u5173\u7684\u5b57\u8282\u5e8f\u5217\u3002(MIME - Multipurpose Internet Mail Extensions) HTTP\u54cd\u5e94\u8fd4\u56de\u7684\u7c7b\u578b\u53ef\u4ee5\u662f\u9759\u6001\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u52a8\u6001\u7684\uff1a \u9759\u6001\u5185\u5bb9\uff1a\u5185\u5bb9\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\uff0c\u54cd\u5e94HTTP\u8bf7\u6c42\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef \u4f8b\u5982HTML\u6587\u4ef6\uff0c\u56fe\u7247\uff0c\u58f0\u97f3 \u52a8\u6001\u5185\u5bb9\uff1a\u8fd0\u884c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u4ea7\u751f\u8f93\u51fa\uff0c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef HTTP\u6d88\u606f\u7ed3\u6784 \u4e00\u4e2a HTTP\u8bf7\u6c42 (request)\u662f\u4e00\u4e2a \u8bf7\u6c42\u884c (request line)\uff0c\u540e\u9762\u8ddf\u968f\u7740\u96f6\u4e2a\u6216\u591a\u4e2a \u8bf7\u6c42\u62a5\u5934 (request header)\uff0c\u518d\u8ddf\u968f\u4e00\u4e2a\u7ec8\u6b62\u62a5\u5934\u7684\u7a7a\u884c\u3002 \u8bf7\u6c42\u884c \u7684\u683c\u5f0f\u662f method uri version \u3002 method \u8bf7\u6c42\u65b9\u6cd5\uff1a\u53ef\u4ee5\u662fGET, POST, OPTIONS, HEAD, PUT, DELETE, TRAXE uri \u7edf\u4e00\u8d44\u6e90\u6807\u8bc6\u7b26(uniform resource identifier)\uff1a\u662f\u54cd\u5e94\u7684URL\u7684\u540e\u7f00\uff0c\u5305\u62ec\u6587\u4ef6\u540d\u548c\u53ef\u9009\u7684\u53c2\u6570 version \u8be5\u8bf7\u6c42\u9075\u5faa\u7684HTTP\u7684\u7248\u672c\uff1aHTTP/1.0\u6216\u8005HTTP/1.1 \u8bf7\u6c42\u62a5\u5934 \u7684\u683c\u5f0f\u662f header name : header data \u4e3a\u670d\u52a1\u5668\u63d0\u4f9b\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u6d4f\u89c8\u5668\u7684\u5546\u6807\u540d HTTP\u54cd\u5e94 \u4e0eHTTP\u8bf7\u6c42\u7c7b\u4f3c\uff0c\u662f\u4e00\u4e2a \u54cd\u5e94\u884c (response line)\uff0c\u540e\u9762\u8ddf\u7740\u96f6\u4e2a\u6216\u8005\u591a\u4e2a \u54cd\u5e94\u62a5\u5934 (response header)\uff0c\u518d\u8ddf\u968f\u4e00\u4e2a\u7ec8\u6b62\u62a5\u5934\u7684\u7a7a\u884c\uff0c\u518d\u8ddf\u968f\u4e00\u4e2a\u54cd\u5e94\u4e3b\u4f53(response body)\u3002 \u54cd\u5e94\u884c \u7684\u683c\u5f0f\u662f version status code status message version \u662f\u54cd\u5e94\u6240\u9075\u5faa\u7684HTTP\u7248\u672c status-code \u662f\u4e00\u4e2a3\u4f4d\u7684\u6b63\u6574\u6570\uff0c\u6307\u660e\u5bf9\u8bf7\u6c42\u7684\u5904\u7406 status-message \u82f1\u6587\u63cf\u8ff0 \u54cd\u5e94\u62a5\u5934 \u7684\u683c\u5f0f\u662f header name : header data \u4e0b\u9762\u662fHTTP\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b9e\u4f8b: GET /somedir/page.html HTTP/1.1 Host: www.someschool.edu Connection: close User-agent: Mozilla/5.0 Accept-language: fr \u4e00\u4e2aJava\u7684\u4f8b\u5b50\uff1a import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.io.PrintWriter ; import java.net.Socket ; public class MyBlogClient { public void http_request (){ try { Socket s = new Socket ( 192.30.252.153 , 80 ); PrintWriter writer = new PrintWriter ( s . getOutputStream ()); InputStreamReader streamReader = new InputStreamReader ( s . getInputStream ()); BufferedReader br = new BufferedReader ( streamReader ); //\u6ce8\u610f\u6362\u884c\u7b26\u662f\\r\\n writer . println ( GET /index.html HTTP/1.0 \\r\\n Host: larryim.cc \\r\\n \\r\\n ); String line = null ; while (( line = br . readLine ())!= null ){ System . out . println ( line ); } br . close (); writer . close (); } catch ( Exception ex ){ ex . printStackTrace (); } } public static void main ( String [] args ){ MyBlogClient client = new MyBlogClient (); client . http_request (); } } HTTP\u8bf7\u6c42\u65b9\u6cd5 \u8bf7\u6c42\u65b9\u6cd5 \u63cf\u8ff0 GET \u8bf7\u6c42\u6307\u5b9a\u7684\u9875\u9762\u4fe1\u606f\uff0c\u5e76\u8fd4\u56de\u5b9e\u4f53\u4e3b\u4f53\u3002 HEAD \u7c7b\u4f3c\u4e8eget\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u5185\u5bb9\uff0c\u7528\u4e8e\u83b7\u53d6\u62a5\u5934\u3002 POST \u5411\u6307\u5b9a\u8d44\u6e90\u63d0\u4ea4\u6570\u636e\u8fdb\u884c\u5904\u7406\u8bf7\u6c42\uff08\u4f8b\u5982\u63d0\u4ea4\u8868\u5355\u6216\u8005\u4e0a\u4f20\u6587\u4ef6\uff09\u3002\u6570\u636e\u88ab\u5305\u542b\u5728\u8bf7 PUT \u4ece\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u4f20\u9001\u7684\u6570\u636e\u53d6\u4ee3\u6307\u5b9a\u7684\u6587\u6863\u7684\u5185\u5bb9\u3002 DELETE \u8bf7\u6c42\u670d\u52a1\u5668\u5220\u9664\u6307\u5b9a\u7684\u9875\u9762\u3002 CONNECT HTTP/1.1\u534f\u8bae\u4e2d\u9884\u7559\u7ed9\u80fd\u591f\u5c06\u8fde\u63a5\u6539\u4e3a\u7ba1\u9053\u65b9\u5f0f\u7684\u4ee3\u7406\u670d\u52a1\u5668\u3002 OPTIONS \u5141\u8bb8\u5ba2\u6237\u7aef\u67e5\u770b\u670d\u52a1\u5668\u7684\u6027\u80fd\u3002 TRACE \u56de\u663e\u670d\u52a1\u5668\u6536\u5230\u7684\u8bf7\u6c42\uff0c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u6216\u8bca\u65ad\u3002","title":"Ch11"},{"location":"os/csapp/ch11/#chapter-11","text":"","title":"Chapter 11 \u7f51\u7edc\u7f16\u7a0b"},{"location":"os/csapp/ch11/#1-","text":"\u6bcf\u4e2a\u7f51\u7edc\u5e94\u7528\u90fd\u662f\u57fa\u4e8e \u5ba2\u6237\u7aef-\u670d\u52a1\u5668 \u6a21\u578b\u7684\u3002 \u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u6a21\u578b\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u662f \u4e8b\u52a1 (transaction)\u3002\u4e00\u4e2a\u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u4e8b\u52a1\u7531\u4ee5\u4e0b\u56db\u6b65\u7ec4\u6210\uff1a \u5f53\u4e00\u4e2a\u5ba2\u6237\u7aef\u9700\u8981\u670d\u52a1\u65f6\uff0c\u5b83\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\uff0c\u53d1\u8d77\u4e00\u4e2a\u4e8b\u52a1\u3002 \u670d\u52a1\u5668\u6536\u5230\u8bf7\u6c42\u540e\uff0c\u89e3\u91ca\u5b83\uff0c\u5e76\u4ee5\u9002\u5f53\u7684\u65b9\u5f0f\u64cd\u4f5c\u5b83\u7684\u8d44\u6e90\u3002 \u670d\u52a1\u5668\u7ed9\u5ba2\u6237\u7aef\u53d1\u9001\u4e00\u4e2a\u54cd\u5e94\uff0c\u5e76\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u3002 \u5ba2\u6237\u7aef\u6536\u5230\u54cd\u5e94\u5e76\u5904\u7406\u5b83\u3002 \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u662f\u8fdb\u7a0b \uff0c\u800c\u4e0d\u662f\u5e38\u63d0\u5230\u7684\u673a\u5668\u6216\u8005\u4e3b\u673a\u3002 \u4e00\u53f0\u4e3b\u673a\u53ef\u4ee5\u540c\u65f6\u8fd0\u884c\u8bb8\u591a\u4e0d\u540c\u7684\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668 \u4e00\u4e2a\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u7684\u4e8b\u52a1\u53ef\u4ee5\u5728\u540c\u4e00\u53f0\u6216\u662f\u4e0d\u540c\u7684\u4e3b\u673a\u4e0a\u3002","title":"1 \u5ba2\u6237\u7aef-\u670d\u52a1\u5668\u7f16\u7a0b\u6a21\u578b"},{"location":"os/csapp/ch11/#2","text":"\u5bf9\u4e3b\u673a\u800c\u8a00\uff0c\u7f51\u7edc\u53ea\u662f\u53c8\u4e00\u79cdI/O\u8bbe\u5907\uff0c\u662f\u6570\u636e\u6e90\u548c\u6570\u636e\u63a5\u6536\u65b9\u3002\u7269\u7406\u4e0a\u800c\u8a00\uff0c\u7f51\u7edc\u662f\u4e00\u4e2a\u6309\u7167\u5730\u7406\u8fdc\u8fd1\u7ec4\u6210\u7684\u5c42\u6b21\u7cfb\u7edf\u3002","title":"2 \u7f51\u7edc"},{"location":"os/csapp/ch11/#_1","text":"(1) \u6700\u5e95\u5c42\uff1a\u4ee5\u592a\u7f51\u6bb5 \u5c40\u57df\u7f51 (LAN, Local Area Network)\u7684\u8303\u56f4\u4e00\u822c\u9650\u5236\u5728\u4e00\u4e2a\u5efa\u7b51\u6216\u8005\u6821\u56ed\u5185\u3002\u6700\u6d41\u884c\u7684\u5c40\u57df\u7f51\u6280\u672f\u662f \u4ee5\u592a\u7f51 (Ethernet)\uff0c\u7531\u7535\u7f06\u548c\u96c6\u7ebf\u5668(hub)\u7ec4\u6210\u4e00\u4e2a\u4ee5\u592a\u7f51\u6bb5\u3002 (2) \u6865\u63a5\u4ee5\u592a\u7f51 \u6865\u63a5\u4ee5\u592a\u7f51 (bridged Ethernet)\u662f\u5c06\u4ee5\u592a\u7f51\u6bb5\u7528\u7535\u7f06\u548c\u7f51\u6865(bridge)\u8fde\u63a5\u6210\u7684\u8f83\u5927\u7684\u5c40\u57df\u7f51\u3002 (3) \u4e92\u8054\u7f51\u7edc \u591a\u4e2a\u4e0d\u517c\u5bb9\u7684\u5c40\u57df\u7f51\u53ef\u4ee5\u901a\u8fc7\u8def\u7531\u5668(routers)\u8fde\u63a5\u6210\u4e92\u8054\u7f51\u7edc(internets)\u3002","title":"\u7f51\u7edc\u5c42\u6b21\u7cfb\u7edf"},{"location":"os/csapp/ch11/#_2","text":"\u4e92\u8054\u7f51\u7edc\u662f\u7531\u5404\u79cd\u5c40\u57df\u7f51\u548c\u5e7f\u57df\u7f51\u7ec4\u6210\uff0c\u5b83\u4eec\u91c7\u7528\u5b8c\u5168\u4e0d\u540c\u4e14\u4e0d\u517c\u5bb9\u7684\u6280\u672f\u3002\u90a3\u4e48\u5982\u4f55\u80fd\u8ba9\u67d0\u53f0\u4e3b\u673a\u8de8\u8fc7\u6240\u6709\u4e0d\u517c\u5bb9\u7684\u7f51\u7edc\u53d1\u9001\u6570\u636e\u4f4d\u5230\u53e6\u4e00\u53f0\u76ee\u7684\u4e3b\u673a\u5462\uff1f \u89e3\u51b3\u65b9\u6cd5\uff1a\u4e00\u5c42\u8fd0\u884c\u5728\u6bcf\u53f0\u4e3b\u673a\u548c\u8def\u7531\u5668\u4e0a\u7684 \u534f\u8bae \u8f6f\u4ef6\uff0c\u5b83\u6d88\u9664\u4e86\u4e0d\u540c\u7f51\u7edc\u4e4b\u95f4\u7684\u5dee\u5f02\u3002\u534f\u8bae\u63d0\u4f9b\u4e86\u4e24\u79cd\u57fa\u672c\u80fd\u529b\uff1a \u63d0\u4f9b\u4e86\u547d\u540d\u673a\u5236 * \u5b9a\u4e49\u4e00\u81f4\u7684 \u4e3b\u673a\u5730\u5740 (host adress)\u683c\u5f0f * \u6bcf\u53f0\u4e3b\u673a\u4f1a\u88ab\u5206\u914d\u81f3\u5c11\u4e00\u4e2a \u4e92\u8054\u7f51\u7edc\u5730\u5740 (internet address)\uff0c\u5730\u5740\u552f\u4e00\u5730\u6807\u8bc6\u4e86\u4e3b\u673a \u63d0\u4f9b\u4e86\u4f20\u9001\u673a\u5236 * \u5b9a\u4e49\u4e86\u7edf\u4e00\u7684\u57fa\u672c\u4f20\u9001\u5355\u4f4d- \u5305 (packet) * \u5305\u7531 \u5305\u5934 (header)\u548c \u6709\u6548\u8f7d\u8377 (payload)\u7ec4\u6210 * \u5305\u5934\u5305\u62ec\u5305\u7684\u5927\u5c0f\u4ee5\u53ca\u6e90\u4e3b\u673a\u548c\u76ee\u7684\u4e3b\u673a\u7684\u5730\u5740 * \u6709\u6548\u8f7d\u8377\u5305\u62ec\u4ece\u6e90\u4e3b\u673a\u53d1\u51fa\u7684\u6570\u636e\u4f4d ![Transferring Internet Data Via Encapsulation](figures/Transferring_Internet_Data_Via_Encapsulation.png) PH: Internet packet header, \u4e92\u8054\u7f51\u7edc\u5305\u5934 FH: LAN frame header, \u5c40\u57df\u7f51\u5e27\u5934","title":"\u7f51\u7edc\u534f\u8bae"},{"location":"os/csapp/ch11/#3-ip","text":"\u5168\u7403IP\u56e0\u7279\u7f51(Global IP Internet)\u662f\u6700\u8457\u540d\u548c\u6700\u6210\u529f\u7684\u4e92\u8054\u7f51\u7edc(internet)\u5b9e\u73b0\u3002\u6bcf\u53f0\u56e0\u7279\u7f51\u4e3b\u673a\u90fd\u8fd0\u884c\u5b9e\u73b0TCP/IP\u534f\u8bae\u7684\u8f6f\u4ef6\uff0c\u4f7f\u7528\u5957\u63a5\u5b57\u63a5\u53e3(sockets interface)\u51fd\u6570\u548cUnix I/O\u51fd\u6570\u6765\u901a\u4fe1\u3002 \u4ece\u7a0b\u5e8f\u5458\u7684\u89d2\u5ea6\uff1a \u4e3b\u673a\u88ab\u6620\u5c04\u4e3a\u4e00\u7ec432\u4f4d\u7684 IP\u5730\u5740 (IP addresses) * 128.2.203.179 IP\u5730\u5740\u88ab\u6620\u5c04\u4e3a\u4e00\u7ec4\u6807\u8bc6\u7b26\uff0c\u53eb\u505a \u57df\u540d (domain name) * \u56e0\u7279\u7f51\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u80fd\u591f\u901a\u8fc7 \u8fde\u63a5 \u548c\u4efb\u4f55\u5176\u4ed6\u56e0\u7279\u7f51\u4e3b\u673a\u4e0a\u7684\u8fdb\u7a0b\u901a\u4fe1\u3002","title":"3 \u5168\u7403IP\u56e0\u7279\u7f51"},{"location":"os/csapp/ch11/#ip","text":"32\u4f4dIP\u5730\u5740\u5b58\u5728\u4e00\u4e2aIP\u5730\u5740\u7ed3\u6784( in_addr )\u4e2d * IP\u5730\u5740\u5728\u5185\u5b58\u4e2d\u662f\u4ee5 \u7f51\u7edc\u5b57\u8282\u987a\u5e8f (network byte order, \u5927\u7aef\u6cd5)\u5b58\u653e\u7684 /* Internet address structure */ struct in_addr { uint32_t s_addr ; /* network byte order (big-endian) */ };","title":"IP\u5730\u5740"},{"location":"os/csapp/ch11/#_3","text":"\u57df\u540d (domain names)\u662f\u4e00\u4e32\u7528\u53e5\u70b9\u5206\u9694\u7684\u5355\u8bcd(\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u7834\u6298\u53f7)\u3002\u57df\u540d\u96c6\u5408\u5f62\u6210\u4e86\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff0c\u53ef\u4ee5\u8868\u793a\u4e3a\u4e00\u68f5\u6811\u3002 \u57df\u540d\u7cfb\u7edf (Domain Naming System, DNS)\u662f\u6620\u5c04IP\u5730\u5740\u548c\u57df\u540d\u7684\u6570\u636e\u5e93\u3002\u53ef\u4ee5\u628aDNS\u6570\u636e\u5e93\u89c6\u4e3a\u4e0a\u767e\u4e07\u7684 \u4e3b\u673a\u6761\u76ee\u7ed3\u6784 (host entry structure)\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u6bcf\u6761\u5b9a\u4e49\u4e86\u4e00\u7ec4\u57df\u540d\u548c\u4e00\u7ec4IP\u5730\u5740\u4e4b\u95f4\u7684\u6620\u5c04\u3002 DNS\u6620\u5c04\uff0c\u53ef\u4ee5\u901a\u8fc7 nsloopup \u67e5\u770b \u5728\u6700\u7b80\u5355\u7684\u60c5\u51b5\u4e2d\uff0c\u4e00\u4e2a\u57df\u540d\u548c\u4e00\u4e2aIP\u5730\u5740\u4e4b\u95f4\u662f\u4e00\u4e00\u6620\u5c04 nslookup whaleshark.ics.cs.cmu.edu - Address : 128.2 . 210.175 \u7136\u800c\uff0c\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u591a\u4e2a\u57df\u540d\u53ef\u4ee5\u6620\u5c04\u4e3a\u540c\u4e00\u4e2aIP\u5730\u5740 nslookup cs.mit.edu/ nslookup eecs.mit.edu - Address : 18.62 . 1.6 \u5728\u6700\u901a\u5e38\u7684\u60c5\u51b5\u4e0b\uff0c\u591a\u4e2a\u57df\u540d\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u7ec4\u7684\u591a\u4e2aIP\u5730\u5740 nslookup www.twitter.com - Address : 199.16 . 156.6 , Address : 199.16 . 156.70","title":"\u57df\u540d"},{"location":"os/csapp/ch11/#_4","text":"\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u8fc7 \u8fde\u63a5 (connections)\u53d1\u9001\u5b57\u8282\u6d41\u6765\u901a\u4fe1\uff0c\u6bcf\u4e00\u4e2a\u8fde\u63a5\u90fd\u6709\u5982\u4e0b\u7279\u70b9\uff1a \u70b9\u5bf9\u70b9(point-to-point)\uff1a\u8fde\u63a5\u4e00\u5bf9\u8fdb\u7a0b \u5168\u53cc\u5de5(full-duplex)\uff1a\u6570\u636e\u53ef\u4ee5\u540c\u65f6\u5728\u4e24\u4e2a\u65b9\u5411\u4f20\u9001 \u53ef\u9760\u6027(reliable)\uff1a\u53d1\u9001\u548c\u63a5\u6536\u7684\u5b57\u8282\u6d41\u987a\u5e8f\u76f8\u540c \u5957\u63a5\u5b57(sockets)\u662f\u8fde\u63a5\u7684\u7aef\u70b9\uff0c\u5957\u63a5\u5b57\u5730\u5740\u7528 \"\u5730\u5740\uff1a\u7aef\u53e3\"\u6765\u8868\u793a\u3002 \u7aef\u53e3(port)\u662f\u4e00\u4e2a16\u4f4d\u6574\u6570\uff0c\u6807\u8bc6\u4e86\u4e00\u4e2a\u8fdb\u7a0b\u3002 \u4e34\u65f6\u7aef\u53e3\uff1a\u5f53\u53ef\u4f1a\u6de1\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u65f6\uff0c\u5185\u6838\u81ea\u52a8\u5206\u914d\u7684\u7aef\u53e3 \u77e5\u540d\u7aef\u53e3\uff1a\u548c\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u670d\u52a1\u6709\u77ed\u7684\u7aef\u53e3 ( Web\u670d\u52a1\u5668\u4f7f\u7528\u7aef\u53e380 ssh\u670d\u52a1\u5668\u4f7f\u7528\u7aef\u53e322 email\u670d\u52a1\u5668\u4f7f\u7528\u7aef\u53e325 \u4e00\u4e2a\u8fde\u63a5\u662f\u7531\u5b83\u4e24\u7aef\u7684\u5957\u63a5\u5b57\u5730\u5740\u552f\u4e00\u786e\u5b9a\u7684\uff08\u5957\u63a5\u5b57\u5bf9, socket pair\uff09\u3002 \u4f7f\u7528\u7aef\u53e3\u6765\u8bc6\u522b\u670d\u52a1","title":"\u56e0\u7279\u7f51\u8fde\u63a5"},{"location":"os/csapp/ch11/#4","text":"\u4ec0\u4e48\u662f\u5957\u63a5\u5b57\uff1f \u5bf9\u4e8e\u5185\u6838\u6765\u8bf4\uff0c\u5957\u63a5\u5b57\u662f\u901a\u4fe1\u7684\u7aef\u70b9\u3002 To the kernel, a socket is an endpoint of communication \u5bf9\u4e8e\u5e94\u7528\u6765\u8bf4\uff0c\u5957\u63a5\u5b57\u662f\u8ba9\u5e94\u7528\u4ece\u7f51\u7edc\u8bfb\u5199\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u3002 To an application, a socket is a file descriptor that lets the application read/write from/to the network. \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u901a\u8fc7\u5bf9\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\u8bfb\u5199\u8fdb\u884c\u901a\u4fe1\uff1a (1) \u901a\u7528\u5957\u63a5\u5b57\u5730\u5740(generic socket address)\uff1a \u4ee5\u5957\u63a5\u5b57\u5730\u5740\u4f5c\u4e3a connect() , bind() , accept \u7684\u5b9e\u53c2 \u4ec5\u4ec5\u56e0\u4e3a\u90a3\u65f6\u7684C\u4e0d\u5b58\u5728 void * \u6307\u9488\uff0c\u6240\u4ee5\u5957\u63a5\u5b57\u63a5\u53e3\u88ab\u8bbe\u8ba1\u6210\u8fd9\u6837\u3002 struct sockaddr { uint16_t sa_family ; /* Protocol family */ char sa_data [ 14 ]; }; /* Address data. */ (2) \u56e0\u7279\u7f51\u7684\u5957\u63a5\u5b57\u5730\u5740 * \u5fc5\u987b\u5c06 struct sockaddr_in * \u8f6c\u6362\u4e3a struct sockaddr * \u624d\u80fd\u4ee5\u5957\u63a5\u5b57\u5730\u5740\u4f5c\u4e3a\u51fd\u6570\u5b9e\u53c2 struct sockaddr_in { uint16_t sin_family ; uint16_t sin_port ; struct in_addr sin_addr ; unsigned char sin_zero [ 8 ]; }; \u5f00\u542f\u670d\u52a1\u5668(start server) getaddrinfo : \u628a\u4e3b\u673a\u540d(hostname\uff09\u3001\u4e3b\u673a\u5730\u5740(host addresses)\u3001\u7aef\u53e3(ports)\u548c\u670d\u52a1\u540d(service names)\u8f6c\u6362\u4e3a\u5957\u63a5\u5b57\u5730\u5740\u7ed3\u6784\u3002 socket : \u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26(socket descriptor)\uff0c\u4e5f\u5c31\u662f\u4e4b\u540e\u7528\u6765\u8bfb\u5199\u7684 file descriptor bind : \u8bf7\u6c42\u5185\u6838\u628a\u5957\u63a5\u5b57\u5730\u5740\u548c\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\u7ed1\u5b9a listen : \u5c06\u5957\u63a5\u5b57\u63cf\u8ff0\u7b26\u4ece\u4e00\u4e2a\u4e3b\u52a8\u5957\u63a5\u5b57\u8f6c\u6362\u4e3a\u76d1\u542c\u5957\u63a5\u5b57(listening socket)\uff0c\u8be5\u5957\u63a5\u5b57\u53ef\u4ee5\u63a5\u53d7\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 accept : \u7b49\u5f85\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42 \u5f00\u542f\u5ba2\u6237\u7aef(start client) getaddrinfo , socket \u4e0e\u5f00\u542f\u670d\u52a1\u5668\u76f8\u540c connect : \u8bd5\u56fe\u4e0e\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5","title":"4 \u5957\u63a5\u5b57\u63a5\u53e3"},{"location":"os/csapp/ch11/#echo","text":"\u5728\u548c\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5\u4e4b\u540e\uff0c\u5ba2\u6237\u7aef\u8fdb\u5165\u4e00\u4e2a\u5faa\u73af\uff0c\u53cd\u590d\u4ece\u6807\u51c6\u8f93\u5165\u8bfb\u53d6\u6587\u672c\u884c\uff0c\u53d1\u9001\u6587\u672c\u884c\u7ed9\u670d\u52a1\u5668\uff0c\u4ece\u670d\u52a1\u5668\u8bfb\u53d6\u56de\u9001\u7684\u884c\uff0c\u5e76\u8f93\u51fa\u7ed3\u679c\u5230\u63a5\u51c6\u8f93\u51fa\u3002 #include csapp.h int main ( int argc , char ** argv ) { int clientfd ; char * host , * port , buf [ MAXLINE ]; rio_t rio ; host = argv [ 1 ]; port = argv [ 2 ]; //\u548c\u670d\u52a1\u5668\u5efa\u7acb\u8fde\u63a5 clientfd = Open_clientfd ( host , port ); Rio_readinitb ( rio , clientfd ); while ( Fgets ( buf , MAXLINE , stdin ) != NULL ) { // \u5199\u5165\uff0c\u4e5f\u5c31\u662f\u5411\u670d\u52a1\u5668\u53d1\u9001\u4fe1\u606f Rio_writen ( clientfd , buf , strlen ( buf )); // \u8bfb\u53d6\uff0c\u4e5f\u5c31\u662f\u4ece\u670d\u52a1\u5668\u63a5\u6536\u4fe1\u606f Rio_readlineb ( rio , buf , MAXLINE ); // \u628a\u4ece\u670d\u52a1\u5668\u63a5\u6536\u7684\u4fe1\u606f\u663e\u793a\u5728\u8f93\u51fa\u4e2d Fputs ( buf , stdout ); } Close ( clientfd ); exit ( 0 ); } \u670d\u52a1\u5668\u5728\u6253\u5f00\u76d1\u542c\u63cf\u8ff0\u7b26\u540e\uff0c\u8fdb\u5165\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u3002\u6bcf\u6b21\u5faa\u73af\u90fd\u7b49\u5f85\u4e00\u4e2a\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u8f93\u51fa\u5df2\u8fde\u63a5\u5ba2\u6237\u7aef\u7684\u57df\u540d\u548cIP\u5730\u5740\uff0c\u5e76\u8c03\u7528 echo \u51fd\u6570\u4e3a\u8fd9\u4e9b\u5ba2\u6237\u7aef\u670d\u52a1\u3002\u5728 echo \u7a0b\u5e8f\u8fd4\u56de\u540e\uff0c\u4e3b\u7a0b\u5e8f\u5173\u95ed\u5df2\u8fde\u63a5\u63cf\u8ff0\u7b26\u3002 #include csapp.h void echo ( int connfd ); int main ( int argc , char ** argv ){ int listenfd , connfd ; socklen_t clientlen ; struct sockaddr_storage clientaddr ; // Enough room for any addr char client_hostname [ MAXLINE ], client_port [ MAXLINE ]; // \u5f00\u542f\u76d1\u542c\u7aef\u53e3\uff0c\u6ce8\u610f\u53ea\u5f00\u8fd9\u4e48\u4e00\u6b21 listenfd = Open_listenfd ( argv [ 1 ]); while ( 1 ) { // \u9700\u8981\u5177\u4f53\u7684\u5927\u5c0f clientlen = sizeof ( struct sockaddr_storage ); // Important! // \u7b49\u5f85\u8fde\u63a5 connfd = Accept ( listenfd , ( SA * ) clientaddr , clientlen ); // \u83b7\u53d6\u5ba2\u6237\u7aef\u76f8\u5173\u4fe1\u606f Getnameinfo (( SA * ) clientaddr , clientlen , client_hostname , MAXLINE , client_port , MAXLINE , 0 ); printf ( Connected to (%s, %s) \\n , client_hostname , client_port ); // \u670d\u52a1\u5668\u5177\u4f53\u5b8c\u6210\u7684\u5de5\u4f5c echo ( coonfd ); Close ( connfd ); } exit ( 0 ); } void echo ( int connfd ) { size_t n ; char buf [ MAXLINE ]; rio_t rio ; // \u8bfb\u53d6\u4ece\u5ba2\u6237\u7aef\u4f20\u8f93\u8fc7\u6765\u7684\u6570\u636e Rio_readinitb ( rio , connfd ); while (( n = Rio_readlineb ( rio , buf , MAXLINE )) != 0 ) { printf ( server received %d bytes \\n , ( int ) n ); // \u628a\u4ece client \u63a5\u6536\u5230\u7684\u4fe1\u606f\u518d\u5199\u56de\u53bb Rio_writen ( connfd , buf , n ); } }","title":"Echo\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u793a\u4f8b"},{"location":"os/csapp/ch11/#5-web","text":"","title":"5 Web\u670d\u52a1\u5668"},{"location":"os/csapp/ch11/#web","text":"Web\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e4b\u95f4\u7684\u4ea4\u4e92\u7528\u7684\u662f HTTP\u534f\u8bae (\u8d85\u6587\u672c\u4f20\u8f93\u534f\u8bae)\uff0c\u4ea4\u4e92\u7684\u57fa\u672c\u8fc7\u7a0b\u4e3a\uff1a \u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u5efa\u7acbTCP\u8fde\u63a5 \u5ba2\u6237\u7aef\u8bf7\u6c42\u5185\u5bb9 \u670d\u52a1\u5668\u54cd\u5e94\u8bf7\u6c42\u7684\u5185\u5bb9 \u670d\u52a1\u5668\u548c\u5ba2\u6237\u7aef\u6700\u7ec8\u5173\u95ed \u8fde\u63a5","title":"Web\u57fa\u7840"},{"location":"os/csapp/ch11/#web_1","text":"Web\u670d\u52a1\u5668\u8fd4\u56de\u5185\u5bb9\u7ed9\u5ba2\u6237\u7aef\uff0c\u5185\u5bb9\u662f\u4e0e\u4e00\u4e2a MIME \u7c7b\u578b\u76f8\u5173\u7684\u5b57\u8282\u5e8f\u5217\u3002(MIME - Multipurpose Internet Mail Extensions) HTTP\u54cd\u5e94\u8fd4\u56de\u7684\u7c7b\u578b\u53ef\u4ee5\u662f\u9759\u6001\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u52a8\u6001\u7684\uff1a \u9759\u6001\u5185\u5bb9\uff1a\u5185\u5bb9\u5b58\u50a8\u5728\u6587\u4ef6\u4e2d\uff0c\u54cd\u5e94HTTP\u8bf7\u6c42\u540e\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef \u4f8b\u5982HTML\u6587\u4ef6\uff0c\u56fe\u7247\uff0c\u58f0\u97f3 \u52a8\u6001\u5185\u5bb9\uff1a\u8fd0\u884c\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u4ea7\u751f\u8f93\u51fa\uff0c\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef","title":"Web\u5185\u5bb9"},{"location":"os/csapp/ch11/#http","text":"\u4e00\u4e2a HTTP\u8bf7\u6c42 (request)\u662f\u4e00\u4e2a \u8bf7\u6c42\u884c (request line)\uff0c\u540e\u9762\u8ddf\u968f\u7740\u96f6\u4e2a\u6216\u591a\u4e2a \u8bf7\u6c42\u62a5\u5934 (request header)\uff0c\u518d\u8ddf\u968f\u4e00\u4e2a\u7ec8\u6b62\u62a5\u5934\u7684\u7a7a\u884c\u3002 \u8bf7\u6c42\u884c \u7684\u683c\u5f0f\u662f method uri version \u3002 method \u8bf7\u6c42\u65b9\u6cd5\uff1a\u53ef\u4ee5\u662fGET, POST, OPTIONS, HEAD, PUT, DELETE, TRAXE uri \u7edf\u4e00\u8d44\u6e90\u6807\u8bc6\u7b26(uniform resource identifier)\uff1a\u662f\u54cd\u5e94\u7684URL\u7684\u540e\u7f00\uff0c\u5305\u62ec\u6587\u4ef6\u540d\u548c\u53ef\u9009\u7684\u53c2\u6570 version \u8be5\u8bf7\u6c42\u9075\u5faa\u7684HTTP\u7684\u7248\u672c\uff1aHTTP/1.0\u6216\u8005HTTP/1.1 \u8bf7\u6c42\u62a5\u5934 \u7684\u683c\u5f0f\u662f header name : header data \u4e3a\u670d\u52a1\u5668\u63d0\u4f9b\u989d\u5916\u4fe1\u606f\uff0c\u4f8b\u5982\u6d4f\u89c8\u5668\u7684\u5546\u6807\u540d HTTP\u54cd\u5e94 \u4e0eHTTP\u8bf7\u6c42\u7c7b\u4f3c\uff0c\u662f\u4e00\u4e2a \u54cd\u5e94\u884c (response line)\uff0c\u540e\u9762\u8ddf\u7740\u96f6\u4e2a\u6216\u8005\u591a\u4e2a \u54cd\u5e94\u62a5\u5934 (response header)\uff0c\u518d\u8ddf\u968f\u4e00\u4e2a\u7ec8\u6b62\u62a5\u5934\u7684\u7a7a\u884c\uff0c\u518d\u8ddf\u968f\u4e00\u4e2a\u54cd\u5e94\u4e3b\u4f53(response body)\u3002 \u54cd\u5e94\u884c \u7684\u683c\u5f0f\u662f version status code status message version \u662f\u54cd\u5e94\u6240\u9075\u5faa\u7684HTTP\u7248\u672c status-code \u662f\u4e00\u4e2a3\u4f4d\u7684\u6b63\u6574\u6570\uff0c\u6307\u660e\u5bf9\u8bf7\u6c42\u7684\u5904\u7406 status-message \u82f1\u6587\u63cf\u8ff0 \u54cd\u5e94\u62a5\u5934 \u7684\u683c\u5f0f\u662f header name : header data \u4e0b\u9762\u662fHTTP\u8bf7\u6c42\u7684\u4e00\u4e2a\u5b9e\u4f8b: GET /somedir/page.html HTTP/1.1 Host: www.someschool.edu Connection: close User-agent: Mozilla/5.0 Accept-language: fr \u4e00\u4e2aJava\u7684\u4f8b\u5b50\uff1a import java.io.BufferedReader ; import java.io.InputStreamReader ; import java.io.PrintWriter ; import java.net.Socket ; public class MyBlogClient { public void http_request (){ try { Socket s = new Socket ( 192.30.252.153 , 80 ); PrintWriter writer = new PrintWriter ( s . getOutputStream ()); InputStreamReader streamReader = new InputStreamReader ( s . getInputStream ()); BufferedReader br = new BufferedReader ( streamReader ); //\u6ce8\u610f\u6362\u884c\u7b26\u662f\\r\\n writer . println ( GET /index.html HTTP/1.0 \\r\\n Host: larryim.cc \\r\\n \\r\\n ); String line = null ; while (( line = br . readLine ())!= null ){ System . out . println ( line ); } br . close (); writer . close (); } catch ( Exception ex ){ ex . printStackTrace (); } } public static void main ( String [] args ){ MyBlogClient client = new MyBlogClient (); client . http_request (); } }","title":"HTTP\u6d88\u606f\u7ed3\u6784"},{"location":"os/csapp/ch11/#http_1","text":"\u8bf7\u6c42\u65b9\u6cd5 \u63cf\u8ff0 GET \u8bf7\u6c42\u6307\u5b9a\u7684\u9875\u9762\u4fe1\u606f\uff0c\u5e76\u8fd4\u56de\u5b9e\u4f53\u4e3b\u4f53\u3002 HEAD \u7c7b\u4f3c\u4e8eget\u8bf7\u6c42\uff0c\u53ea\u4e0d\u8fc7\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u6ca1\u6709\u5177\u4f53\u7684\u5185\u5bb9\uff0c\u7528\u4e8e\u83b7\u53d6\u62a5\u5934\u3002 POST \u5411\u6307\u5b9a\u8d44\u6e90\u63d0\u4ea4\u6570\u636e\u8fdb\u884c\u5904\u7406\u8bf7\u6c42\uff08\u4f8b\u5982\u63d0\u4ea4\u8868\u5355\u6216\u8005\u4e0a\u4f20\u6587\u4ef6\uff09\u3002\u6570\u636e\u88ab\u5305\u542b\u5728\u8bf7 PUT \u4ece\u5ba2\u6237\u7aef\u5411\u670d\u52a1\u5668\u4f20\u9001\u7684\u6570\u636e\u53d6\u4ee3\u6307\u5b9a\u7684\u6587\u6863\u7684\u5185\u5bb9\u3002 DELETE \u8bf7\u6c42\u670d\u52a1\u5668\u5220\u9664\u6307\u5b9a\u7684\u9875\u9762\u3002 CONNECT HTTP/1.1\u534f\u8bae\u4e2d\u9884\u7559\u7ed9\u80fd\u591f\u5c06\u8fde\u63a5\u6539\u4e3a\u7ba1\u9053\u65b9\u5f0f\u7684\u4ee3\u7406\u670d\u52a1\u5668\u3002 OPTIONS \u5141\u8bb8\u5ba2\u6237\u7aef\u67e5\u770b\u670d\u52a1\u5668\u7684\u6027\u80fd\u3002 TRACE \u56de\u663e\u670d\u52a1\u5668\u6536\u5230\u7684\u8bf7\u6c42\uff0c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u6216\u8bca\u65ad\u3002","title":"HTTP\u8bf7\u6c42\u65b9\u6cd5"},{"location":"os/csapp/ch2/","text":"Chapter 2 \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406 1 \u4fe1\u606f\u5b58\u50a8 \u5927\u591a\u6570\u8ba1\u7b97\u673a\u4f7f\u75288\u4f4d\u7684\u5757\uff0c\u6216\u8005\u5b57\u8282(byte),\u4f5c\u4e3a \u6700\u5c0f\u7684\u53ef\u5bfb\u5740\u7684\u5185\u5b58\u5355\u4f4d \uff0c\u800c\u4e0d\u662f\u8bbf\u95ee\u5185\u5b58\u4e2d\u5355\u72ec\u7684\u4f4d\u3002\u5185\u5b58\u7684\u6bcf\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u5b57\u6765\u6807\u8bc6\uff0c\u79f0\u4e3a\u5b83\u7684 \u5730\u5740 (address)\u3002 \u5341\u516d\u8fdb\u5236\u8868\u793a\u6cd5 \u4e00\u4e2a\u5b57\u8282\u75318\u4f4d\u7ec4\u6210\u3002\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\uff0c\u5b83\u7684\u503c\u57df\u662f 00000000_2\\sim 11111111_2 00000000_2\\sim 11111111_2 \u3002\u5982\u679c\u770b\u6210\u5341\u8fdb\u5236\u6570\uff0c\u5b83\u7684\u503c\u57df\u662f 0_{10}\\sim 255_{10} 0_{10}\\sim 255_{10} \u3002 \u8fd9\u4e24\u79cd\u7b26\u53f7\u8868\u8ff0\u6cd5\u5bf9\u4e8e\u63cf\u8ff0\u4f4d\u6a21\u5f0f\u6765\u8bf4\u90fd\u4e0d\u662f\u975e\u5e38\u65b9\u4fbf\u3002 \u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u592a\u5197\u957f\uff1b \u5341\u8fdb\u5236\u8868\u793a\u6cd5\u4e0e\u4f4d\u6a21\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316\u5f88\u9ebb\u70e6\u3002 \u66ff\u4ee3\u7684\u65b9\u6cd5\u662f\uff0c\u4ee516\u57fa\u6570\uff0c\u4ee5\u5341\u516d\u8fdb\u5236(hexiademical)\u6570\u6765\u8868\u793a\u4f4d\u6a21\u5f0f\u3002 \u5b57\u548c\u6570\u636e\u5927\u5c0f \u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6709\u2f00\u4e2a \u5b57\u2ed3 (word size)\uff0c\u6807\u660e\u6307\u9488\u6570\u636e\u7684 \u6807\u79f0\u5927\u5c0f (norminal size)\u3002\u5b57\u2ed3\u51b3\u5b9a\u7684\u6700\u91cd\u8981\u7684\u7cfb\u7edf\u53c2\u6570\u5c31\u662f\u865a\u62df\u7a7a\u95f4\u7684\u2f24\u2f29\u3002\u5bf9\u4e8e\u2f00\u4e2a\u5b57\u2ed3\u4e3a w w \u4f4d\u7684\u673a\u5668\u2f7d\u2f94\uff0c\u865a\u62df\u5730\u5740\u7684\u8303\u56f4\u4e3a 0\\sim 2^w\u22121 0\\sim 2^w\u22121 \u3002 C\u8bed\u8a00\u652f\u6301\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u591a\u79cd\u6570\u636e\u683c\u5f0f\u3002\u4e0b\u8868\u4e3aC\u8bed\u8a00\u5404\u79cd\u6570\u636e\u7c7b\u578b\u5206\u914d\u7684\u5b57\u8282\u6570\u3002 \u5bfb\u5740\u548c\u5b57\u8282\u987a\u5e8f \u8003\u8651\u4e00\u4e2a w w \u4f4d\u7684\u6574\u6570\uff0c\u5176\u4f4d\u8868\u793a\u4e3a [x_{w-1}, x_{w-2}, x_1, x_0] [x_{w-1}, x_{w-2}, x_1, x_0] \uff0c\u5176\u4e2d x_{w-1} x_{w-1} \u662f \u6700\u9ad8\u6709\u6548\u4f4d (the most significant bit)\uff0c\u800c x_0 x_0 \u662f \u6700\u4f4e\u6709\u6548\u4f4d (the least significant bit). \u5047\u8bbe w w \u662f8\u7684\u500d\u6570\uff0c\u8fd9\u4e9b\u4f4d\u5c31\u80fd\u88ab\u5206\u7ec4\u6210\u5b57\u8282\uff0c\u5176\u4e2d \u6700\u9ad8\u6709\u6548\u5b57\u8282 (the most significant byte)\u5305\u542b\u4f4d [x_{w-1}, x_{w-2},..., x_{w-8}] [x_{w-1}, x_{w-2},..., x_{w-8}] \uff0c\u800c \u6700\u4f4e\u6709\u6548\u5b57\u8282 (the least significant byte)\u5305\u542b\u4f4d [x_7, x_6,..., x_0] [x_7, x_6,..., x_0] \uff0c\u5176\u4ed6\u5b57\u8282\u5305\u542b\u4e2d\u95f4\u7684\u4f4d\u3002 \u6709\u4e9b\u673a\u5668\u9009\u5728\u5728\u5185\u5b58\u4e2d\u6309\u7167\u4ece\u6700\u4f4e\u6709\u6548\u5b57\u8282\u5230\u6700\u9ad8\u6709\u6548\u5b57\u8282\u7684\u987a\u5e8f\u5b58\u50a8\u5bf9\u8c61\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a \u5c0f\u7aef\u6cd5 (little endian)\u3002 \u6700\u9ad8\u6709\u6548\u5b57\u8282\u5728\u524d\u9762\u7684\u65b9\u5f0f\uff0c\u79f0\u4e3a \u5927\u7aef\u6cd5 (big endian). Note \u5927\u591a\u6570Intel\u517c\u5bb9\u673a\u90fd\u53ea\u7528\u5c0f\u7aef\u6a21\u5f0f\u3002 2 \u6574\u6570\u8868\u793a \u6574\u6570\u6570\u636e\u7c7b\u578b C\u8bed\u8a00\u652f\u6301\u591a\u79cd\u6574\u6570\u6570\u636e\u7c7b\u578b\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u5178\u578b\u768464\u4f4d\u673a\u5668\u7684\u53d6\u503c\u8303\u56f4\u3002\u6bcf\u79cd\u7c7b\u578b\u7528\u5173\u952e\u5b57\u6765\u5236\u5b9a\u5927\u5c0f\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u5305\u62ec char \uff0c short \uff0c long \uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u6307\u793a\u88ab\u8868\u793a\u7684\u6570\u662f\u975e\u8d1f\u6570( unsigned )\uff0c\u6216\u8005\u53ef\u80fd\u662f\u8d1f\u6570(\u9ed8\u8ba4)\u3002 \u65e0\u7b26\u53f7\u6570\u7684\u7f16\u7801 \u5047\u8bbe\u6709\u4e00\u4e2a\u6574\u6570\u6570\u636e\u7c7b\u578b\u6709 w w \u4f4d\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4f4d\u5411\u91cf\u5199\u6210 \\vec{x} \\vec{x} \uff0c\u8868\u793a\u6574\u4e2a\u5411\u91cf\uff0c\u6216\u8005\u5199\u6210 [x_{w-1}, x_{w-2},..., x_0] [x_{w-1}, x_{w-2},..., x_0] \uff0c\u8868\u793a\u5411\u91cf\u4e2d\u7684\u6bcf\u4e00\u4f4d\u3002\u628a \\vec{x} \\vec{x} \u770b\u4f5c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u6570\uff0c\u5c31\u83b7\u5f97\u4e86 \\vec{x} \\vec{x} \u7684\u65e0\u7b26\u53f7\u8868\u793a\u3002\u7528\u51fd\u6570 B2U_w B2U_w (Binary to Unsigned\uff0c\u957f\u5ea6\u4e3a w w )\u6765\u8868\u793a\uff1a B2U_w(\\vec{x})=\\sum ^{w-1}_{i=0}x_i2^i B2U_w(\\vec{x})=\\sum ^{w-1}_{i=0}x_i2^i \u8865\u7801 \u6700\u5e38\u89c1\u7684\u6709\u7b26\u53f7\u6570\u7684\u8ba1\u7b97\u673a\u8868\u793a\u65b9\u5f0f\u662f \u8865\u7801 (two's complement)\u3002\u5b83\u5c06\u5b57\u7684\u6700\u9ad8\u6709\u6548\u4f4d\u89e3\u91ca\u4e3a\u8d1f\u6743(negative weight)\u3002\u7528\u51fd\u6570 B2T_w B2T_w (Binary to Two's complement\uff0c\u957f\u5ea6\u4e3a w w )\u6765\u8868\u793a\uff1a B2T_w(\\vec{x})=-x_{w-1}2^{w-1}+\\sum ^{w-2}_{i=0}x_i2^i B2T_w(\\vec{x})=-x_{w-1}2^{w-1}+\\sum ^{w-2}_{i=0}x_i2^i \u6700\u9ad8\u6709\u6548\u4f4d x_{w-1} x_{w-1} \u4e5f\u79f0\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5b83\u7684\u6743\u91cd\u662f -2^{w-1} -2^{w-1} \u3002 \u8865\u7801\u7684\u8303\u56f4\u662f\u4e0d\u5bf9\u79f0\u7684: |TMin| = |TMax| + 1 |TMin| = |TMax| + 1 \u6709\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570\u4e4b\u95f4\u7684\u8f6c\u6362 \u8865\u7801\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u6570\uff1a\u5bf9\u6ee1\u8db3 TMin_w \\le x \\le TMax_w TMin_w \\le x \\le TMax_w \u7684 x x \u6709\uff1a T2U_w(x)= \\begin{cases} x+2^w x 0\\\\ x x\\ge 0 \\end{cases} T2U_w(x)= \\begin{cases} x+2^w& x<0\\\\ x& x\\ge 0 \\end{cases} \u65e0\u7b26\u53f7\u6570\u8f6c\u6362\u4e3a\u8865\u7801\uff1a\u5bf9\u6ee1\u8db3 0 \\le u \\le UMax_w 0 \\le u \\le UMax_w \u7684 u u \u6709\uff1a U2T_w(u)= \\begin{cases} u u\\le TMax_w\\\\ u-2^w u TMax_w \\end{cases} U2T_w(u)= \\begin{cases} u& u\\le TMax_w\\\\ u-2^w& u> TMax_w \\end{cases} Note \u8865\u7801(two's compliment)\uff0c\u539f\u7801(signed magnitude)\uff0c\u53cd\u7801(one's compliment)\u3002\u539f\u7801\u7684\u7f16\u7801\u65b9\u5f0f\u6700\u63a5\u8fd1\u4eba\u7c7b\u7684\u4e60\u60ef\uff0c\u4f46\u5e76\u4e0d\u9002\u5408\u5728\u8ba1\u7b97\u673a\u4e2d\u4f7f\u7528\u3002\u4e8e\u662f\u53cd\u7801\u5c31\u51fa\u73b0\u4e86\uff0c\u4f46\u53cd\u7801\u6709\u5faa\u73af\u8fdb\u4f4d\u548c\u548c\u6b63\u8d1f0\u7684\u95ee\u9898\u3002\u6240\u4ee5\u73b0\u5728\u6700\u7ec8\u90fd\u4f7f\u7528\u8865\u7801\u3002 \u6e90\u7801\uff1a \u6b63\u6570\uff1a 0_xxxxxxx, \u8d1f\u6570\uff1a 1_xxxxxxx \u53cd\u7801\uff1a \u6b63\u6570\uff1a \u53cd\u7801 = \u539f\u7801\uff0c \u8d1f\u6570\uff1a \u53cd\u7801 = \u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u4ed6\u4f4d\u53d6\u53cd \u8865\u7801\uff1a \u6b63\u6570\uff1a \u8865\u7801 = \u539f\u7801\uff0c \u8d1f\u6570\uff1a \u53cd\u7801 + 1 C\u8bed\u2f94\u4e2d\u7684\u6709\u7b26\u53f7\u6570\u548c\u2f46\u7b26\u53f7\u6570 \u5982\u679c\u2f00\u4e2a\u8fd0\u7b97\u7684\u2f00\u4e2a\u8fd0\u7b97\u6570\u662f\u2f46\u7b26\u53f7\u7684\u2f7d\u53e6\u5916\u2f00\u4e2a\u662f\u6709\u7b26\u53f7\u7684, C\u8bed\u2f94\u4f1a\u9690\u5f0f\u7684\u5c06\u6709\u7b26\u53f7\u6570\u8f6c\u6362\u4e3a\u2f46\u7b26\u53f7\u6570\u3002 3 \u6d6e\u70b9\u6570 IEEE\u6d6e\u70b9\u8868\u793a IEEE\u6d6e\u70b9\u6807\u51c6\u2f64 V=(\u22121)^s\\times 2^E\\times M V=(\u22121)^s\\times 2^E\\times M \u7684\u2f45\u6cd5\u6765\u8868\u2f70\u6d6e\u70b9\u6570 \u7b26\u53f7(sign) s s : s s \u51b3\u5b9a\u8fd9\u6570\u662f\u8d1f\u6570( s=1 s=1 )\u8fd8\u662f\u6b63\u6570 s=0 s=0 \uff0c\u800c\u5bf9\u4e8e\u6570\u503c0\u7684\u7b26\u53f7\u4f4d\u89e3\u91ca\u4f5c\u4e3a\u7279\u6b8a\u60c5\u51b5\u5904\u7406\u3002 \u9636\u7801(exponent) E E : E E \u7684\u4f5c\u7528\u662f\u5bf9\u6d6e\u70b9\u6570\u52a0\u6743\uff0c\u8fd9\u4e2a\u6743\u91cd\u662f2\u7684E\u6b21\u5e42\u3002 \u5c3e\u6570(significand) M M : M M \u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5c0f\u6570\uff0c\u5b83\u7684\u8303\u56f4\u662f 1\\sim 2-\\varepsilon 1\\sim 2-\\varepsilon \uff0c\u6216\u8005\u662f 0\\sim 1-\\varepsilon 0\\sim 1-\\varepsilon \u5c06\u6d6e\u70b9\u6570\u7684\u4f4d\u8868\u793a\u5212\u5206\u4e3a\u4e09\u4e2a\u5b57\u7aef\uff0c\u5206\u522b\u5bf9\u8fd9\u4e9b\u503c\u8fdb\u884c\u7f16\u7801\uff1a \u4e00\u4e2a\u5355\u72ec\u7684\u7b26\u53f7\u4f4d s s \u76f4\u63a5\u7f16\u7801\u7b26\u53f7 s s k k \u4f4d\u7684\u9636\u7801\u5b57\u6bb5 \\text{exp} = e_{k-1}\\cdot\\cdot\\cdot e_1e_0 \\text{exp} = e_{k-1}\\cdot\\cdot\\cdot e_1e_0 \u7f16\u7801\u9636\u7801 E E \u3002 n n \u4f4d\u7684\u5c0f\u6570\u5b57\u6bb5 \\text{frac} = f_{n-1}\\cdot\\cdot\\cdot f_1f_0 \\text{frac} = f_{n-1}\\cdot\\cdot\\cdot f_1f_0 \u7f16\u7801\u5c3e\u6570 M M \u3002 \u6839\u636e exp exp \u7684\u503c\uff0c\u88ab\u7f16\u7801\u7684\u503c\u53ef\u4ee5\u5206\u6210\u4e09\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002\u4e0b\u56fe\u5bf9\u5e94\u7684\u662f\u5355\u7cbe\u5ea6\u683c\u5f0f\u7684\u60c5\u51b5\uff1a","title":"Chapter 2: \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406"},{"location":"os/csapp/ch2/#chapter-2","text":"","title":"Chapter 2 \u4fe1\u606f\u7684\u8868\u793a\u548c\u5904\u7406"},{"location":"os/csapp/ch2/#1","text":"\u5927\u591a\u6570\u8ba1\u7b97\u673a\u4f7f\u75288\u4f4d\u7684\u5757\uff0c\u6216\u8005\u5b57\u8282(byte),\u4f5c\u4e3a \u6700\u5c0f\u7684\u53ef\u5bfb\u5740\u7684\u5185\u5b58\u5355\u4f4d \uff0c\u800c\u4e0d\u662f\u8bbf\u95ee\u5185\u5b58\u4e2d\u5355\u72ec\u7684\u4f4d\u3002\u5185\u5b58\u7684\u6bcf\u4e2a\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6570\u5b57\u6765\u6807\u8bc6\uff0c\u79f0\u4e3a\u5b83\u7684 \u5730\u5740 (address)\u3002","title":"1 \u4fe1\u606f\u5b58\u50a8"},{"location":"os/csapp/ch2/#_1","text":"\u4e00\u4e2a\u5b57\u8282\u75318\u4f4d\u7ec4\u6210\u3002\u5728\u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u4e2d\uff0c\u5b83\u7684\u503c\u57df\u662f 00000000_2\\sim 11111111_2 00000000_2\\sim 11111111_2 \u3002\u5982\u679c\u770b\u6210\u5341\u8fdb\u5236\u6570\uff0c\u5b83\u7684\u503c\u57df\u662f 0_{10}\\sim 255_{10} 0_{10}\\sim 255_{10} \u3002 \u8fd9\u4e24\u79cd\u7b26\u53f7\u8868\u8ff0\u6cd5\u5bf9\u4e8e\u63cf\u8ff0\u4f4d\u6a21\u5f0f\u6765\u8bf4\u90fd\u4e0d\u662f\u975e\u5e38\u65b9\u4fbf\u3002 \u4e8c\u8fdb\u5236\u8868\u793a\u6cd5\u592a\u5197\u957f\uff1b \u5341\u8fdb\u5236\u8868\u793a\u6cd5\u4e0e\u4f4d\u6a21\u5f0f\u7684\u76f8\u4e92\u8f6c\u5316\u5f88\u9ebb\u70e6\u3002 \u66ff\u4ee3\u7684\u65b9\u6cd5\u662f\uff0c\u4ee516\u57fa\u6570\uff0c\u4ee5\u5341\u516d\u8fdb\u5236(hexiademical)\u6570\u6765\u8868\u793a\u4f4d\u6a21\u5f0f\u3002","title":"\u5341\u516d\u8fdb\u5236\u8868\u793a\u6cd5"},{"location":"os/csapp/ch2/#_2","text":"\u6bcf\u53f0\u8ba1\u7b97\u673a\u90fd\u6709\u2f00\u4e2a \u5b57\u2ed3 (word size)\uff0c\u6807\u660e\u6307\u9488\u6570\u636e\u7684 \u6807\u79f0\u5927\u5c0f (norminal size)\u3002\u5b57\u2ed3\u51b3\u5b9a\u7684\u6700\u91cd\u8981\u7684\u7cfb\u7edf\u53c2\u6570\u5c31\u662f\u865a\u62df\u7a7a\u95f4\u7684\u2f24\u2f29\u3002\u5bf9\u4e8e\u2f00\u4e2a\u5b57\u2ed3\u4e3a w w \u4f4d\u7684\u673a\u5668\u2f7d\u2f94\uff0c\u865a\u62df\u5730\u5740\u7684\u8303\u56f4\u4e3a 0\\sim 2^w\u22121 0\\sim 2^w\u22121 \u3002 C\u8bed\u8a00\u652f\u6301\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u591a\u79cd\u6570\u636e\u683c\u5f0f\u3002\u4e0b\u8868\u4e3aC\u8bed\u8a00\u5404\u79cd\u6570\u636e\u7c7b\u578b\u5206\u914d\u7684\u5b57\u8282\u6570\u3002","title":"\u5b57\u548c\u6570\u636e\u5927\u5c0f"},{"location":"os/csapp/ch2/#_3","text":"\u8003\u8651\u4e00\u4e2a w w \u4f4d\u7684\u6574\u6570\uff0c\u5176\u4f4d\u8868\u793a\u4e3a [x_{w-1}, x_{w-2}, x_1, x_0] [x_{w-1}, x_{w-2}, x_1, x_0] \uff0c\u5176\u4e2d x_{w-1} x_{w-1} \u662f \u6700\u9ad8\u6709\u6548\u4f4d (the most significant bit)\uff0c\u800c x_0 x_0 \u662f \u6700\u4f4e\u6709\u6548\u4f4d (the least significant bit). \u5047\u8bbe w w \u662f8\u7684\u500d\u6570\uff0c\u8fd9\u4e9b\u4f4d\u5c31\u80fd\u88ab\u5206\u7ec4\u6210\u5b57\u8282\uff0c\u5176\u4e2d \u6700\u9ad8\u6709\u6548\u5b57\u8282 (the most significant byte)\u5305\u542b\u4f4d [x_{w-1}, x_{w-2},..., x_{w-8}] [x_{w-1}, x_{w-2},..., x_{w-8}] \uff0c\u800c \u6700\u4f4e\u6709\u6548\u5b57\u8282 (the least significant byte)\u5305\u542b\u4f4d [x_7, x_6,..., x_0] [x_7, x_6,..., x_0] \uff0c\u5176\u4ed6\u5b57\u8282\u5305\u542b\u4e2d\u95f4\u7684\u4f4d\u3002 \u6709\u4e9b\u673a\u5668\u9009\u5728\u5728\u5185\u5b58\u4e2d\u6309\u7167\u4ece\u6700\u4f4e\u6709\u6548\u5b57\u8282\u5230\u6700\u9ad8\u6709\u6548\u5b57\u8282\u7684\u987a\u5e8f\u5b58\u50a8\u5bf9\u8c61\uff0c\u8fd9\u79cd\u65b9\u5f0f\u79f0\u4e3a \u5c0f\u7aef\u6cd5 (little endian)\u3002 \u6700\u9ad8\u6709\u6548\u5b57\u8282\u5728\u524d\u9762\u7684\u65b9\u5f0f\uff0c\u79f0\u4e3a \u5927\u7aef\u6cd5 (big endian). Note \u5927\u591a\u6570Intel\u517c\u5bb9\u673a\u90fd\u53ea\u7528\u5c0f\u7aef\u6a21\u5f0f\u3002","title":"\u5bfb\u5740\u548c\u5b57\u8282\u987a\u5e8f"},{"location":"os/csapp/ch2/#2","text":"","title":"2 \u6574\u6570\u8868\u793a"},{"location":"os/csapp/ch2/#_4","text":"C\u8bed\u8a00\u652f\u6301\u591a\u79cd\u6574\u6570\u6570\u636e\u7c7b\u578b\u3002\u4e0b\u56fe\u7ed9\u51fa\u4e86\u5178\u578b\u768464\u4f4d\u673a\u5668\u7684\u53d6\u503c\u8303\u56f4\u3002\u6bcf\u79cd\u7c7b\u578b\u7528\u5173\u952e\u5b57\u6765\u5236\u5b9a\u5927\u5c0f\uff0c\u8fd9\u4e9b\u5173\u952e\u5b57\u5305\u62ec char \uff0c short \uff0c long \uff0c\u540c\u65f6\u8fd8\u53ef\u4ee5\u6307\u793a\u88ab\u8868\u793a\u7684\u6570\u662f\u975e\u8d1f\u6570( unsigned )\uff0c\u6216\u8005\u53ef\u80fd\u662f\u8d1f\u6570(\u9ed8\u8ba4)\u3002","title":"\u6574\u6570\u6570\u636e\u7c7b\u578b"},{"location":"os/csapp/ch2/#_5","text":"\u5047\u8bbe\u6709\u4e00\u4e2a\u6574\u6570\u6570\u636e\u7c7b\u578b\u6709 w w \u4f4d\u3002\u6211\u4eec\u53ef\u4ee5\u5c06\u4f4d\u5411\u91cf\u5199\u6210 \\vec{x} \\vec{x} \uff0c\u8868\u793a\u6574\u4e2a\u5411\u91cf\uff0c\u6216\u8005\u5199\u6210 [x_{w-1}, x_{w-2},..., x_0] [x_{w-1}, x_{w-2},..., x_0] \uff0c\u8868\u793a\u5411\u91cf\u4e2d\u7684\u6bcf\u4e00\u4f4d\u3002\u628a \\vec{x} \\vec{x} \u770b\u4f5c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u6570\uff0c\u5c31\u83b7\u5f97\u4e86 \\vec{x} \\vec{x} \u7684\u65e0\u7b26\u53f7\u8868\u793a\u3002\u7528\u51fd\u6570 B2U_w B2U_w (Binary to Unsigned\uff0c\u957f\u5ea6\u4e3a w w )\u6765\u8868\u793a\uff1a B2U_w(\\vec{x})=\\sum ^{w-1}_{i=0}x_i2^i B2U_w(\\vec{x})=\\sum ^{w-1}_{i=0}x_i2^i","title":"\u65e0\u7b26\u53f7\u6570\u7684\u7f16\u7801"},{"location":"os/csapp/ch2/#_6","text":"\u6700\u5e38\u89c1\u7684\u6709\u7b26\u53f7\u6570\u7684\u8ba1\u7b97\u673a\u8868\u793a\u65b9\u5f0f\u662f \u8865\u7801 (two's complement)\u3002\u5b83\u5c06\u5b57\u7684\u6700\u9ad8\u6709\u6548\u4f4d\u89e3\u91ca\u4e3a\u8d1f\u6743(negative weight)\u3002\u7528\u51fd\u6570 B2T_w B2T_w (Binary to Two's complement\uff0c\u957f\u5ea6\u4e3a w w )\u6765\u8868\u793a\uff1a B2T_w(\\vec{x})=-x_{w-1}2^{w-1}+\\sum ^{w-2}_{i=0}x_i2^i B2T_w(\\vec{x})=-x_{w-1}2^{w-1}+\\sum ^{w-2}_{i=0}x_i2^i \u6700\u9ad8\u6709\u6548\u4f4d x_{w-1} x_{w-1} \u4e5f\u79f0\u4e3a\u7b26\u53f7\u4f4d\uff0c\u5b83\u7684\u6743\u91cd\u662f -2^{w-1} -2^{w-1} \u3002 \u8865\u7801\u7684\u8303\u56f4\u662f\u4e0d\u5bf9\u79f0\u7684: |TMin| = |TMax| + 1 |TMin| = |TMax| + 1","title":"\u8865\u7801"},{"location":"os/csapp/ch2/#_7","text":"\u8865\u7801\u8f6c\u6362\u4e3a\u65e0\u7b26\u53f7\u6570\uff1a\u5bf9\u6ee1\u8db3 TMin_w \\le x \\le TMax_w TMin_w \\le x \\le TMax_w \u7684 x x \u6709\uff1a T2U_w(x)= \\begin{cases} x+2^w x 0\\\\ x x\\ge 0 \\end{cases} T2U_w(x)= \\begin{cases} x+2^w& x<0\\\\ x& x\\ge 0 \\end{cases} \u65e0\u7b26\u53f7\u6570\u8f6c\u6362\u4e3a\u8865\u7801\uff1a\u5bf9\u6ee1\u8db3 0 \\le u \\le UMax_w 0 \\le u \\le UMax_w \u7684 u u \u6709\uff1a U2T_w(u)= \\begin{cases} u u\\le TMax_w\\\\ u-2^w u TMax_w \\end{cases} U2T_w(u)= \\begin{cases} u& u\\le TMax_w\\\\ u-2^w& u> TMax_w \\end{cases} Note \u8865\u7801(two's compliment)\uff0c\u539f\u7801(signed magnitude)\uff0c\u53cd\u7801(one's compliment)\u3002\u539f\u7801\u7684\u7f16\u7801\u65b9\u5f0f\u6700\u63a5\u8fd1\u4eba\u7c7b\u7684\u4e60\u60ef\uff0c\u4f46\u5e76\u4e0d\u9002\u5408\u5728\u8ba1\u7b97\u673a\u4e2d\u4f7f\u7528\u3002\u4e8e\u662f\u53cd\u7801\u5c31\u51fa\u73b0\u4e86\uff0c\u4f46\u53cd\u7801\u6709\u5faa\u73af\u8fdb\u4f4d\u548c\u548c\u6b63\u8d1f0\u7684\u95ee\u9898\u3002\u6240\u4ee5\u73b0\u5728\u6700\u7ec8\u90fd\u4f7f\u7528\u8865\u7801\u3002 \u6e90\u7801\uff1a \u6b63\u6570\uff1a 0_xxxxxxx, \u8d1f\u6570\uff1a 1_xxxxxxx \u53cd\u7801\uff1a \u6b63\u6570\uff1a \u53cd\u7801 = \u539f\u7801\uff0c \u8d1f\u6570\uff1a \u53cd\u7801 = \u7b26\u53f7\u4f4d\u4e0d\u53d8\uff0c\u5176\u4ed6\u4f4d\u53d6\u53cd \u8865\u7801\uff1a \u6b63\u6570\uff1a \u8865\u7801 = \u539f\u7801\uff0c \u8d1f\u6570\uff1a \u53cd\u7801 + 1","title":"\u6709\u7b26\u53f7\u6570\u548c\u65e0\u7b26\u53f7\u6570\u4e4b\u95f4\u7684\u8f6c\u6362"},{"location":"os/csapp/ch2/#c","text":"\u5982\u679c\u2f00\u4e2a\u8fd0\u7b97\u7684\u2f00\u4e2a\u8fd0\u7b97\u6570\u662f\u2f46\u7b26\u53f7\u7684\u2f7d\u53e6\u5916\u2f00\u4e2a\u662f\u6709\u7b26\u53f7\u7684, C\u8bed\u2f94\u4f1a\u9690\u5f0f\u7684\u5c06\u6709\u7b26\u53f7\u6570\u8f6c\u6362\u4e3a\u2f46\u7b26\u53f7\u6570\u3002","title":"C\u8bed\u2f94\u4e2d\u7684\u6709\u7b26\u53f7\u6570\u548c\u2f46\u7b26\u53f7\u6570"},{"location":"os/csapp/ch2/#3","text":"","title":"3 \u6d6e\u70b9\u6570"},{"location":"os/csapp/ch2/#ieee","text":"IEEE\u6d6e\u70b9\u6807\u51c6\u2f64 V=(\u22121)^s\\times 2^E\\times M V=(\u22121)^s\\times 2^E\\times M \u7684\u2f45\u6cd5\u6765\u8868\u2f70\u6d6e\u70b9\u6570 \u7b26\u53f7(sign) s s : s s \u51b3\u5b9a\u8fd9\u6570\u662f\u8d1f\u6570( s=1 s=1 )\u8fd8\u662f\u6b63\u6570 s=0 s=0 \uff0c\u800c\u5bf9\u4e8e\u6570\u503c0\u7684\u7b26\u53f7\u4f4d\u89e3\u91ca\u4f5c\u4e3a\u7279\u6b8a\u60c5\u51b5\u5904\u7406\u3002 \u9636\u7801(exponent) E E : E E \u7684\u4f5c\u7528\u662f\u5bf9\u6d6e\u70b9\u6570\u52a0\u6743\uff0c\u8fd9\u4e2a\u6743\u91cd\u662f2\u7684E\u6b21\u5e42\u3002 \u5c3e\u6570(significand) M M : M M \u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5c0f\u6570\uff0c\u5b83\u7684\u8303\u56f4\u662f 1\\sim 2-\\varepsilon 1\\sim 2-\\varepsilon \uff0c\u6216\u8005\u662f 0\\sim 1-\\varepsilon 0\\sim 1-\\varepsilon \u5c06\u6d6e\u70b9\u6570\u7684\u4f4d\u8868\u793a\u5212\u5206\u4e3a\u4e09\u4e2a\u5b57\u7aef\uff0c\u5206\u522b\u5bf9\u8fd9\u4e9b\u503c\u8fdb\u884c\u7f16\u7801\uff1a \u4e00\u4e2a\u5355\u72ec\u7684\u7b26\u53f7\u4f4d s s \u76f4\u63a5\u7f16\u7801\u7b26\u53f7 s s k k \u4f4d\u7684\u9636\u7801\u5b57\u6bb5 \\text{exp} = e_{k-1}\\cdot\\cdot\\cdot e_1e_0 \\text{exp} = e_{k-1}\\cdot\\cdot\\cdot e_1e_0 \u7f16\u7801\u9636\u7801 E E \u3002 n n \u4f4d\u7684\u5c0f\u6570\u5b57\u6bb5 \\text{frac} = f_{n-1}\\cdot\\cdot\\cdot f_1f_0 \\text{frac} = f_{n-1}\\cdot\\cdot\\cdot f_1f_0 \u7f16\u7801\u5c3e\u6570 M M \u3002 \u6839\u636e exp exp \u7684\u503c\uff0c\u88ab\u7f16\u7801\u7684\u503c\u53ef\u4ee5\u5206\u6210\u4e09\u79cd\u4e0d\u540c\u7684\u60c5\u51b5\u3002\u4e0b\u56fe\u5bf9\u5e94\u7684\u662f\u5355\u7cbe\u5ea6\u683c\u5f0f\u7684\u60c5\u51b5\uff1a","title":"IEEE\u6d6e\u70b9\u8868\u793a"},{"location":"os/csapp/ch3/","text":"Chapter 3 \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a 1 \u5386\u53f2\u89c2\u70b9 Intel\u5904\u7406\u5668\u7cfb\u5217\u4fd7\u79f0x86\uff0c\u7ecf\u5386\u4e86\u4e00\u4e2a\u957f\u671f\u7684\u3001\u4e0d\u65ad\u8fdb\u5316\u7684\u53d1\u5c55\u8fc7\u7a0b\u3002 8086(1978\u5e74\uff0c29K\u4e2a\u6676\u4f53\u7ba1)\u3002\u7b2c\u4e00\u4ee3\u5355\u82af\u7247\u300116\u4f4d\u5fae\u5904\u7406\u5668\u4e4b\u4e00\u3002 i386(1985\u5e74\uff0c 275K\u4e2a\u6676\u4f53\u7ba1)\u3002\u5c06\u4f53\u7cfb\u7ed3\u6784\u6269\u5c55\u523032\u4f4d\u3002 Core i7(2008\u5e74\uff0c781M\u4e2a\u6676\u4f53\u7ba1)\u3002\u652f\u6301\u8d85\u7ebf\u7a0b\u3001\u591a\u6838\u3002 Intel\u5904\u7406\u5668\u7cfb\u5217\u6709\u597d\u51e0\u4e2a\u540d\u5b57\uff0c\u5305\u62ecIA32\uff0c\u4e5f\u5c31\u662f\u201cIntel 32\u4f4d\u4f53\u7cfb\u7ed3\u6784\u201d(Intel Architecture 32-bit)\uff0c\u4ee5\u53ca\u6700\u65b0\u7684Intel64\uff0c\u5373IA32\u768464\u4f4d\u6269\u5c55\uff0c\u4e5f\u79f0\u4e3ax86-64\u3002 2 \u7a0b\u5e8f\u7f16\u7801 \u5bf9\u4e8e\u673a\u5668\u7f16\u7a0b\u6765\u8bf4\uff0c\u5176\u4e2d\u4e24\u79cd\u62bd\u8c61\u5c24\u4e3a\u91cd\u8981\u3002 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784(Instruction Set Architecture, ISA)\uff0c\u5b9a\u4e49\u4e86\u673a\u5668\u7ea7\u7a0b\u5e8f\u7684\u683c\u5f0f\u548c\u884c\u4e3a\uff0c\u5b83\u5b9a\u4e49\u4e86\u5904\u7406\u5668\u72b6\u6001\u3001\u6307\u4ee4\u7684\u683c\u5f0f\u4ee5\u53ca\u6bcf\u6761\u6307\u4ee4\u5bf9\u72b6\u6001\u7684\u5f71\u54cd\u3002\u5927\u591a\u6570ISA\uff0c\u5c06\u7a0b\u5e8f\u7684\u884c\u4e3a\u63cf\u8ff0\u6210\u597d\u50cf\u6bcf\u6761\u6307\u4ee4\u90fd\u662f\u6309\u987a\u5e8f\u6267\u884c\u7684\u3002\u5e38\u89c1\u7684ISA\u6709x86\u3001ARM v8\u3001MIPS\u3002 \u865a\u62df\u5730\u5740\uff0c\u63d0\u4f9b\u7684\u5185\u5b58\u6a21\u578b\u770b\u4e0a\u53bb\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u5b57\u8282\u6570\u7ec4\u3002 3 \u6570\u636e\u683c\u5f0f Intel\u7528\u672f\u8bed\"\u5b57(word)\"\u8868\u793a16\u4f4d\u6570\u636e\u7c7b\u578b\uff0c32\u4f4d\u6570\u79f0\u4e3a\"\u53cc\u5b57(double words)\"\uff0c64\u4f4d\u6570\u79f0\u4e3a\"\u56db\u5b57(quad words)\"\u3002 4 \u8bbf\u95ee\u4fe1\u606f \u4e00\u4e2ax86-64\u7684CPU\u5305\u542b\u4e00\u7ec416\u4e2a\u5b58\u50a864\u4f4d\u503c\u7684 \u901a\u7528\u76ee\u7684\u5bc4\u5b58\u5668 \uff0c\u7528\u6765\u5b58\u50a8\u6574\u6570\u6570\u636e\u548c\u6307\u9488\u3002 4.1 \u64cd\u4f5c\u6570\u6307\u793a\u7b26 \u5927\u591a\u6570\u6307\u4ee4\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6570(operand)\uff0c\u6307\u793a\u51fa\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u8981\u4f7f\u7528\u7684\u6e90\u6570\u636e\u503c\uff0c\u4ee5\u53ca\u653e\u7f6e\u7ed3\u679c\u7684\u76ee\u7684\u4f4d\u7f6e\u3002x86-64\u652f\u6301\u591a\u79cd\u64cd\u4f5c\u6570\u683c\u5f0f\uff1a \u7acb\u5373\u6570(immediate)\uff0c\u7528\u6765\u8868\u793a\u5e38\u6570\u503c\u3002\u4e66\u5199\u65b9\u5f0f\u662f$\u540e\u9762\u8ddf\u4e00\u4e2a\u6574\u6570 \u5bc4\u5b58\u5668(register)\uff0c\u8868\u793a\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u3002\u7528\u7b26\u53f7 r_a r_a \u6765\u8868\u793a\u4efb\u610f\u5bc4\u5b58\u5668 a a \uff0c\u7528\u5f15\u7528 R[r_a] R[r_a] \u8868\u793a\u5bc4\u5b58\u5668\u7684\u503c \u5185\u5b58\u5f15\u7528\u3002\u6839\u636e\u8ba1\u7b97\u51fa\u6765\u7684\u5730\u5740(\u901a\u5e38\u79f0\u4e3a\u6709\u6548\u5730\u5740)\u8bbf\u95ee\u67d0\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002\u56e0\u4e3a\u5c06\u5185\u5b58\u770b\u6210\u4e00\u4e2a\u5f88\u5927\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u7528\u7b26\u53f7 M_b[Addr] M_b[Addr] \u8868\u793a\u5bf9\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u4ece\u5730\u5740 Adrr Adrr \u5f00\u59cb\u7684 b b \u5b57\u8282\u503c\u7684\u5f15\u7528\u3002 4.2 \u6570\u636e\u4f20\u9001\u6307\u4ee4 \u6570\u636e\u4f20\u9001\u6307\u4ee4--MOV\u7c7b--\u628a\u6570\u636e\u4ece\u539f\u4f4d\u7f6e\u590d\u5236\u5230\u76ee\u7684\u4f4d\u7f6e\u3002MOV\u7c7b\u7531\u56db\u6761\u6307\u4ee4\u7ec4\u6210\uff1amovb\u3001movw\u3001movl\u3001movq\u3002\u8fd9\u4e9b\u6307\u4ee4\u90fd\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u4e3b\u8981\u533a\u522b\u662f\u5b83\u4eec\u64cd\u4f5c\u7684\u6570\u636e\u5927\u5c0f\u4e0d\u540c\uff1a\u5206\u522b\u662f1\u30012\u30014\u548c8\u5b57\u8282\u3002 \u6570\u636e\u4f20\u9001\u6307\u4ee4\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e0d\u80fd\u90fd\u6307\u5411\u5185\u5b58\u4f4d\u7f6e\u3002\u5c06\u4e00\u4e2a\u503c\u4ece\u5185\u5b58\u4f4d\u7f6e\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u9700\u8981\u4e24\u6761\u6307\u4ee4 - \u7b2c\u4e00\u6761\u6307\u4ee4\u5c06\u6e90\u503c\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u5c06\u8be5\u5bc4\u5b58\u5668\u503c\u5199\u5165\u76ee\u7684\u4f4d\u7f6e\u3002 MOVZ\u7c7b\u4e2d\u7684\u6307\u4ee4\u628a\u76ee\u7684\u4e2d\u5269\u4f59\u7684\u5b57\u8282\u586b\u5145\u4e3a0\uff1b\u800cMOVS\u7c7b\u4e2d\u7684\u6307\u4ee4\u901a\u8fc7\u7b26\u53f7\u6269\u5c55\u6765\u586b\u5145\uff0c\u5373\u628a\u6e90\u64cd\u4f5c\u6570\u7684\u6700\u9ad8\u4f4d\u8fdb\u884c\u590d\u5236\u3002 4.3 \u538b\u5165\u548c\u5f39\u51fa\u6808\u6570\u636e pushq\u6307\u4ee4\u628a\u6570\u636e\u538b\u5165\u5230\u6808\u4e0a\uff0c\u800cpopq\u6307\u4ee4\u5f39\u51fa\u6570\u636e\u3002 5 \u7b97\u6570\u548c\u903b\u8f91\u64cd\u4f5c \u64cd\u4f5c\u88ab\u5206\u4e3a\u56db\u7ec4\uff1a\u52a0\u8f7d\u6709\u6548\u5730\u5740\u3001\u4e00\u5143\u64cd\u4f5c\u3001\u4e8c\u5143\u64cd\u4f5c\u548c\u79fb\u4f4d\u3002 \u52a0\u8f7d\u6709\u6548\u5730\u5740 (load effective address)\u6307\u4ee4leaq\u5b9e\u9645\u4e0a\u662fmovq\u6307\u4ee4\u7684\u53d8\u5f62\uff0c\u5c06\u6709\u6548\u5730\u5740\u5199\u5165\u5230\u76ee\u7684\u64cd\u4f5c\u6570\u3002 \u53e6\u5916\u4e00\u4e2aleaq\u7684\u4f5c\u2f64\u5c31\u662f\u2f64\u6765\u4f5c\u4e3a\u7b97\u672f\u8fd0\u7b97\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5bc4\u5b58\u5668 %rdx \u7684\u503c\u4e3ax\uff0c\u90a3\u4e48\u6307\u4ee4 leaq 7(%rdx, %rdx, 4), %rax \u5c06\u8bbe\u7f6e\u5bc4\u5b58\u5668 %rax \u7684\u503c\u4e3a5x+7\u3002 \u4e00\u5143\u64cd\u4f5c\u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u5373\u662f\u6e90\u53c8\u662f\u76ee\u7684\u3002\u8fd9\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002\u6bd4\u5982\u8bf4\uff0c\u6307\u4ee4 incq(%rsp) \u4f1a\u4f7f\u6808\u9876\u76848\u5b57\u8282\u5143\u7d20\u52a01\u3002 6 \u63a7\u5236 6.1 \u6761\u4ef6\u7801 \u6761\u4ef6\u7801 (condition code)\u5bc4\u5b58\u5668\uff0c\u63cf\u8ff0\u4e86\u6700\u8fd1\u7684\u7b97\u6570\u548c\u903b\u8f91\u64cd\u4f5c\u7684\u5c5e\u6027\u3002\u53ef\u4ee5\u68c0\u6d4b\u6761\u4ef6\u7801\u5bc4\u5b58\u5668\u6765\u6267\u884c\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u3002\u6700\u5e38\u7528\u7684\u6761\u4ef6\u7801\u6709\uff1a CF\uff1a\u8fdb\u4f4d\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u4f7f\u6700\u9ad8\u4f4d\u4ea7\u751f\u4e86\u8fdb\u4f4d\u3002\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u65e0\u7b26\u53f7\u64cd\u4f5c\u7684\u6ea2\u51fa\u3002 ZF\uff1a\u96f6\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u5f97\u51fa\u7684\u7ed3\u679c\u4e3a0. SF\uff1a\u7b26\u53f7\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u5f97\u5230\u7684\u7ed3\u679c\u4e3a\u8d1f\u6570\u3002 OF\uff1a\u6ea2\u51fa\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u5bfc\u81f4\u4e00\u4e2a\u8865\u7801\u6ea2\u51fa -- \u6b63\u6ea2\u51fa\u6216\u8d1f\u6ea2\u51fa\u3002 \u9664\u4e86\u7b2c6\u5c0f\u8282\u6240\u63d0\u53ca\u7684\u6307\u4ee4\u4f1a\u8bbe\u7f6e\u6761\u4ef6\u7801\u4e4b\u5916\uff0c\u8fd8\u6709\u4e24\u7c7b\u6307\u4ee4\u53ea\u8bbe\u7f6e\u6761\u4ef6\u7801\u800c\u4e0d\u6539\u53d8\u4efb\u4f55\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u8fd9\u4e24\u7c7b\u6307\u4ee4\u90fd\u652f\u6301\u56db\u79cd\u957f\u5ea6\u53d8\u79cd\u540e\u7f00(b, w, l, q) 7 \u8fc7\u7a0b \u8fc7\u7a0b (procedure)\u662f\u8f6f\u4ef6\u4e2d\u4e00\u79cd\u5f88\u91cd\u8981\u7684\u62bd\u8c61\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c01\u88c5\u4ee3\u7801\u7684\u65b9\u5f0f\uff0c\u7528\u4e00\u7ec4\u5236\u5b9a\u7684\u53c2\u6570\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u8fd4\u56de\u503c\u5b9e\u73b0\u4e86\u67d0\u8fd9\u529f\u80fd\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4e0d\u540c\u7684\u5730\u65b9\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u8fc7\u7a0b\u7684\u5f62\u5f0f\u591a\u6837\uff1a\u51fd\u6570(function)\u3001\u65b9\u6cd5(method)\u3001\u5b50\u4f8b\u7a0b(subroutine)\u3001\u5904\u7406\u51fd\u6570(handler)\u7b49\u7b49\u3002 \u5047\u8bbe\u8fc7\u7a0bP\u8c03\u7528\u8fc7\u7a0bQ\uff0cQ\u6267\u884c\u540e\u8fd4\u56de\u5230P\uff0c\u5305\u542b\u4e0b\u9762\u4e00\u4e2a\u6216\u591a\u4e2a\u673a\u5236\uff1a \u4f20\u9012\u63a7\u5236\u3002\u5728\u8fdb\u5165\u8fc7\u7a0bQ\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u5fc5\u987b\u88ab\u8bbe\u7f6e\u4e3aQ\u7684\u4ee3\u7801\u7684\u8d77\u59cb\u5730\u5740\uff0c\u7136\u540e\u5728\u8fd4\u56de\u65f6\uff0c\u8981\u628a\u7a0b\u5e8f\u8ba1\u6570\u5668\u8bbe\u7f6e\u4e3aP\u4e2d\u8c03\u7528Q\u540e\u9762\u90a3\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 \u4f20\u9012\u6570\u636e\u3002P\u5fc5\u987b\u80fd\u591f\u5411Q\u63d0\u4f9b\u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0cQ\u5fc5\u987b\u80fd\u591f\u5411P\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002\u5728\u5f00\u59cb\u65f6\uff0cQ\u53ef\u80fd\u9700\u8981\u4e3a\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u7a7a\u95f4\uff0c\u800c\u5728\u8fd4\u56de\u524d\uff0c\u53c8\u5fc5\u987b\u91ca\u653e\u8fd9\u4e9b\u5b58\u50a8\u7a7a\u95f4\u3002 7.1 \u8fd0\u884c\u65f6\u6808 \u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u5f80\u5f80\u4f7f\u7528\u4e86\u6808( Stack )\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u5f53x86-64\u8fc7\u7a0b\u9700\u8981\u7684\u5b58\u50a8\u7a7a\u95f4\u8d85\u51fa\u5bc4\u5b58\u5668\u80fd\u591f\u5b58\u653e\u7684\u5927\u5c0f\u65f6(\u610f\u5473\u7740\u5176\u5b9e\u5f88\u591a\u51fd\u6570\u6839\u672c\u4e0d\u9700\u8981\u5e27\u6808)\uff0c\u5c31\u4f1a\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\uff0c\u79f0\u4e3a \u5e27\u6808 (stack frame)\u3002 Current Stack Frame (\u201cTop\u201d to Bottom) contains: Argument build(\u53c2\u6570\u6784\u9020\u533a): Parameters for function about to call \u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668\u6700\u591a\u4f20\u90126\u4e2a\u6574\u5f62\u53c2\u6570\uff0c\u8d85\u51fa6\u4e2a\u90e8\u5206\u5c31\u8981\u901a\u8fc7\u6808\u6765\u4f20\u9012 Local variables(\u5c40\u90e8\u53d8\u91cf): \u5bc4\u5b58\u5668\u4e0d\u8db3\u591f\u5b58\u653e\u6240\u6709\u7684\u672c\u5730\u6570\u636e \u4f7f\u7528\u5730\u5740\u8fd0\u7b97\u7b26 \uff0c\u5fc5\u987b\u80fd\u591f\u4ea7\u751f\u4e00\u4e2a\u5730\u5740 Saved register context(\u88ab\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668) \u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c\u5230\u6808\u4e2d Old frame pointer (optional)","title":"Chapter 3: \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a"},{"location":"os/csapp/ch3/#chapter-3","text":"","title":"Chapter 3 \u7a0b\u5e8f\u7684\u673a\u5668\u7ea7\u8868\u793a"},{"location":"os/csapp/ch3/#1","text":"Intel\u5904\u7406\u5668\u7cfb\u5217\u4fd7\u79f0x86\uff0c\u7ecf\u5386\u4e86\u4e00\u4e2a\u957f\u671f\u7684\u3001\u4e0d\u65ad\u8fdb\u5316\u7684\u53d1\u5c55\u8fc7\u7a0b\u3002 8086(1978\u5e74\uff0c29K\u4e2a\u6676\u4f53\u7ba1)\u3002\u7b2c\u4e00\u4ee3\u5355\u82af\u7247\u300116\u4f4d\u5fae\u5904\u7406\u5668\u4e4b\u4e00\u3002 i386(1985\u5e74\uff0c 275K\u4e2a\u6676\u4f53\u7ba1)\u3002\u5c06\u4f53\u7cfb\u7ed3\u6784\u6269\u5c55\u523032\u4f4d\u3002 Core i7(2008\u5e74\uff0c781M\u4e2a\u6676\u4f53\u7ba1)\u3002\u652f\u6301\u8d85\u7ebf\u7a0b\u3001\u591a\u6838\u3002 Intel\u5904\u7406\u5668\u7cfb\u5217\u6709\u597d\u51e0\u4e2a\u540d\u5b57\uff0c\u5305\u62ecIA32\uff0c\u4e5f\u5c31\u662f\u201cIntel 32\u4f4d\u4f53\u7cfb\u7ed3\u6784\u201d(Intel Architecture 32-bit)\uff0c\u4ee5\u53ca\u6700\u65b0\u7684Intel64\uff0c\u5373IA32\u768464\u4f4d\u6269\u5c55\uff0c\u4e5f\u79f0\u4e3ax86-64\u3002","title":"1 \u5386\u53f2\u89c2\u70b9"},{"location":"os/csapp/ch3/#2","text":"\u5bf9\u4e8e\u673a\u5668\u7f16\u7a0b\u6765\u8bf4\uff0c\u5176\u4e2d\u4e24\u79cd\u62bd\u8c61\u5c24\u4e3a\u91cd\u8981\u3002 \u6307\u4ee4\u96c6\u4f53\u7cfb\u7ed3\u6784(Instruction Set Architecture, ISA)\uff0c\u5b9a\u4e49\u4e86\u673a\u5668\u7ea7\u7a0b\u5e8f\u7684\u683c\u5f0f\u548c\u884c\u4e3a\uff0c\u5b83\u5b9a\u4e49\u4e86\u5904\u7406\u5668\u72b6\u6001\u3001\u6307\u4ee4\u7684\u683c\u5f0f\u4ee5\u53ca\u6bcf\u6761\u6307\u4ee4\u5bf9\u72b6\u6001\u7684\u5f71\u54cd\u3002\u5927\u591a\u6570ISA\uff0c\u5c06\u7a0b\u5e8f\u7684\u884c\u4e3a\u63cf\u8ff0\u6210\u597d\u50cf\u6bcf\u6761\u6307\u4ee4\u90fd\u662f\u6309\u987a\u5e8f\u6267\u884c\u7684\u3002\u5e38\u89c1\u7684ISA\u6709x86\u3001ARM v8\u3001MIPS\u3002 \u865a\u62df\u5730\u5740\uff0c\u63d0\u4f9b\u7684\u5185\u5b58\u6a21\u578b\u770b\u4e0a\u53bb\u662f\u4e00\u4e2a\u975e\u5e38\u5927\u7684\u5b57\u8282\u6570\u7ec4\u3002","title":"2 \u7a0b\u5e8f\u7f16\u7801"},{"location":"os/csapp/ch3/#3","text":"Intel\u7528\u672f\u8bed\"\u5b57(word)\"\u8868\u793a16\u4f4d\u6570\u636e\u7c7b\u578b\uff0c32\u4f4d\u6570\u79f0\u4e3a\"\u53cc\u5b57(double words)\"\uff0c64\u4f4d\u6570\u79f0\u4e3a\"\u56db\u5b57(quad words)\"\u3002","title":"3 \u6570\u636e\u683c\u5f0f"},{"location":"os/csapp/ch3/#4","text":"\u4e00\u4e2ax86-64\u7684CPU\u5305\u542b\u4e00\u7ec416\u4e2a\u5b58\u50a864\u4f4d\u503c\u7684 \u901a\u7528\u76ee\u7684\u5bc4\u5b58\u5668 \uff0c\u7528\u6765\u5b58\u50a8\u6574\u6570\u6570\u636e\u548c\u6307\u9488\u3002","title":"4 \u8bbf\u95ee\u4fe1\u606f"},{"location":"os/csapp/ch3/#41","text":"\u5927\u591a\u6570\u6307\u4ee4\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u64cd\u4f5c\u6570(operand)\uff0c\u6307\u793a\u51fa\u6267\u884c\u4e00\u4e2a\u64cd\u4f5c\u4e2d\u8981\u4f7f\u7528\u7684\u6e90\u6570\u636e\u503c\uff0c\u4ee5\u53ca\u653e\u7f6e\u7ed3\u679c\u7684\u76ee\u7684\u4f4d\u7f6e\u3002x86-64\u652f\u6301\u591a\u79cd\u64cd\u4f5c\u6570\u683c\u5f0f\uff1a \u7acb\u5373\u6570(immediate)\uff0c\u7528\u6765\u8868\u793a\u5e38\u6570\u503c\u3002\u4e66\u5199\u65b9\u5f0f\u662f$\u540e\u9762\u8ddf\u4e00\u4e2a\u6574\u6570 \u5bc4\u5b58\u5668(register)\uff0c\u8868\u793a\u67d0\u4e2a\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u3002\u7528\u7b26\u53f7 r_a r_a \u6765\u8868\u793a\u4efb\u610f\u5bc4\u5b58\u5668 a a \uff0c\u7528\u5f15\u7528 R[r_a] R[r_a] \u8868\u793a\u5bc4\u5b58\u5668\u7684\u503c \u5185\u5b58\u5f15\u7528\u3002\u6839\u636e\u8ba1\u7b97\u51fa\u6765\u7684\u5730\u5740(\u901a\u5e38\u79f0\u4e3a\u6709\u6548\u5730\u5740)\u8bbf\u95ee\u67d0\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002\u56e0\u4e3a\u5c06\u5185\u5b58\u770b\u6210\u4e00\u4e2a\u5f88\u5927\u7684\u5b57\u8282\u6570\u7ec4\uff0c\u7528\u7b26\u53f7 M_b[Addr] M_b[Addr] \u8868\u793a\u5bf9\u5b58\u50a8\u5728\u5185\u5b58\u4e2d\u4ece\u5730\u5740 Adrr Adrr \u5f00\u59cb\u7684 b b \u5b57\u8282\u503c\u7684\u5f15\u7528\u3002","title":"4.1 \u64cd\u4f5c\u6570\u6307\u793a\u7b26"},{"location":"os/csapp/ch3/#42","text":"\u6570\u636e\u4f20\u9001\u6307\u4ee4--MOV\u7c7b--\u628a\u6570\u636e\u4ece\u539f\u4f4d\u7f6e\u590d\u5236\u5230\u76ee\u7684\u4f4d\u7f6e\u3002MOV\u7c7b\u7531\u56db\u6761\u6307\u4ee4\u7ec4\u6210\uff1amovb\u3001movw\u3001movl\u3001movq\u3002\u8fd9\u4e9b\u6307\u4ee4\u90fd\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u4e3b\u8981\u533a\u522b\u662f\u5b83\u4eec\u64cd\u4f5c\u7684\u6570\u636e\u5927\u5c0f\u4e0d\u540c\uff1a\u5206\u522b\u662f1\u30012\u30014\u548c8\u5b57\u8282\u3002 \u6570\u636e\u4f20\u9001\u6307\u4ee4\u7684\u4e24\u4e2a\u64cd\u4f5c\u6570\u4e0d\u80fd\u90fd\u6307\u5411\u5185\u5b58\u4f4d\u7f6e\u3002\u5c06\u4e00\u4e2a\u503c\u4ece\u5185\u5b58\u4f4d\u7f6e\u590d\u5236\u5230\u53e6\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u9700\u8981\u4e24\u6761\u6307\u4ee4 - \u7b2c\u4e00\u6761\u6307\u4ee4\u5c06\u6e90\u503c\u52a0\u8f7d\u5230\u5bc4\u5b58\u5668\u4e2d\uff0c\u7b2c\u4e8c\u6761\u6307\u4ee4\u5c06\u8be5\u5bc4\u5b58\u5668\u503c\u5199\u5165\u76ee\u7684\u4f4d\u7f6e\u3002 MOVZ\u7c7b\u4e2d\u7684\u6307\u4ee4\u628a\u76ee\u7684\u4e2d\u5269\u4f59\u7684\u5b57\u8282\u586b\u5145\u4e3a0\uff1b\u800cMOVS\u7c7b\u4e2d\u7684\u6307\u4ee4\u901a\u8fc7\u7b26\u53f7\u6269\u5c55\u6765\u586b\u5145\uff0c\u5373\u628a\u6e90\u64cd\u4f5c\u6570\u7684\u6700\u9ad8\u4f4d\u8fdb\u884c\u590d\u5236\u3002","title":"4.2 \u6570\u636e\u4f20\u9001\u6307\u4ee4"},{"location":"os/csapp/ch3/#43","text":"pushq\u6307\u4ee4\u628a\u6570\u636e\u538b\u5165\u5230\u6808\u4e0a\uff0c\u800cpopq\u6307\u4ee4\u5f39\u51fa\u6570\u636e\u3002","title":"4.3 \u538b\u5165\u548c\u5f39\u51fa\u6808\u6570\u636e"},{"location":"os/csapp/ch3/#5","text":"\u64cd\u4f5c\u88ab\u5206\u4e3a\u56db\u7ec4\uff1a\u52a0\u8f7d\u6709\u6548\u5730\u5740\u3001\u4e00\u5143\u64cd\u4f5c\u3001\u4e8c\u5143\u64cd\u4f5c\u548c\u79fb\u4f4d\u3002 \u52a0\u8f7d\u6709\u6548\u5730\u5740 (load effective address)\u6307\u4ee4leaq\u5b9e\u9645\u4e0a\u662fmovq\u6307\u4ee4\u7684\u53d8\u5f62\uff0c\u5c06\u6709\u6548\u5730\u5740\u5199\u5165\u5230\u76ee\u7684\u64cd\u4f5c\u6570\u3002 \u53e6\u5916\u4e00\u4e2aleaq\u7684\u4f5c\u2f64\u5c31\u662f\u2f64\u6765\u4f5c\u4e3a\u7b97\u672f\u8fd0\u7b97\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5bc4\u5b58\u5668 %rdx \u7684\u503c\u4e3ax\uff0c\u90a3\u4e48\u6307\u4ee4 leaq 7(%rdx, %rdx, 4), %rax \u5c06\u8bbe\u7f6e\u5bc4\u5b58\u5668 %rax \u7684\u503c\u4e3a5x+7\u3002 \u4e00\u5143\u64cd\u4f5c\u53ea\u6709\u4e00\u4e2a\u64cd\u4f5c\u6570\uff0c\u5373\u662f\u6e90\u53c8\u662f\u76ee\u7684\u3002\u8fd9\u4e2a\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4e00\u4e2a\u5bc4\u5b58\u5668\uff0c\u4e5f\u53ef\u4ee5\u662f\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002\u6bd4\u5982\u8bf4\uff0c\u6307\u4ee4 incq(%rsp) \u4f1a\u4f7f\u6808\u9876\u76848\u5b57\u8282\u5143\u7d20\u52a01\u3002","title":"5 \u7b97\u6570\u548c\u903b\u8f91\u64cd\u4f5c"},{"location":"os/csapp/ch3/#6","text":"","title":"6 \u63a7\u5236"},{"location":"os/csapp/ch3/#61","text":"\u6761\u4ef6\u7801 (condition code)\u5bc4\u5b58\u5668\uff0c\u63cf\u8ff0\u4e86\u6700\u8fd1\u7684\u7b97\u6570\u548c\u903b\u8f91\u64cd\u4f5c\u7684\u5c5e\u6027\u3002\u53ef\u4ee5\u68c0\u6d4b\u6761\u4ef6\u7801\u5bc4\u5b58\u5668\u6765\u6267\u884c\u6761\u4ef6\u5206\u652f\u6307\u4ee4\u3002\u6700\u5e38\u7528\u7684\u6761\u4ef6\u7801\u6709\uff1a CF\uff1a\u8fdb\u4f4d\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u4f7f\u6700\u9ad8\u4f4d\u4ea7\u751f\u4e86\u8fdb\u4f4d\u3002\u53ef\u4ee5\u7528\u6765\u68c0\u67e5\u65e0\u7b26\u53f7\u64cd\u4f5c\u7684\u6ea2\u51fa\u3002 ZF\uff1a\u96f6\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u5f97\u51fa\u7684\u7ed3\u679c\u4e3a0. SF\uff1a\u7b26\u53f7\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u5f97\u5230\u7684\u7ed3\u679c\u4e3a\u8d1f\u6570\u3002 OF\uff1a\u6ea2\u51fa\u6807\u5fd7\u3002\u6700\u8fd1\u7684\u64cd\u4f5c\u5bfc\u81f4\u4e00\u4e2a\u8865\u7801\u6ea2\u51fa -- \u6b63\u6ea2\u51fa\u6216\u8d1f\u6ea2\u51fa\u3002 \u9664\u4e86\u7b2c6\u5c0f\u8282\u6240\u63d0\u53ca\u7684\u6307\u4ee4\u4f1a\u8bbe\u7f6e\u6761\u4ef6\u7801\u4e4b\u5916\uff0c\u8fd8\u6709\u4e24\u7c7b\u6307\u4ee4\u53ea\u8bbe\u7f6e\u6761\u4ef6\u7801\u800c\u4e0d\u6539\u53d8\u4efb\u4f55\u5176\u4ed6\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u8fd9\u4e24\u7c7b\u6307\u4ee4\u90fd\u652f\u6301\u56db\u79cd\u957f\u5ea6\u53d8\u79cd\u540e\u7f00(b, w, l, q)","title":"6.1 \u6761\u4ef6\u7801"},{"location":"os/csapp/ch3/#7","text":"\u8fc7\u7a0b (procedure)\u662f\u8f6f\u4ef6\u4e2d\u4e00\u79cd\u5f88\u91cd\u8981\u7684\u62bd\u8c61\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5c01\u88c5\u4ee3\u7801\u7684\u65b9\u5f0f\uff0c\u7528\u4e00\u7ec4\u5236\u5b9a\u7684\u53c2\u6570\u548c\u4e00\u4e2a\u53ef\u9009\u7684\u8fd4\u56de\u503c\u5b9e\u73b0\u4e86\u67d0\u8fd9\u529f\u80fd\u3002\u7136\u540e\uff0c\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u4e0d\u540c\u7684\u5730\u65b9\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002\u4e0d\u540c\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u8fc7\u7a0b\u7684\u5f62\u5f0f\u591a\u6837\uff1a\u51fd\u6570(function)\u3001\u65b9\u6cd5(method)\u3001\u5b50\u4f8b\u7a0b(subroutine)\u3001\u5904\u7406\u51fd\u6570(handler)\u7b49\u7b49\u3002 \u5047\u8bbe\u8fc7\u7a0bP\u8c03\u7528\u8fc7\u7a0bQ\uff0cQ\u6267\u884c\u540e\u8fd4\u56de\u5230P\uff0c\u5305\u542b\u4e0b\u9762\u4e00\u4e2a\u6216\u591a\u4e2a\u673a\u5236\uff1a \u4f20\u9012\u63a7\u5236\u3002\u5728\u8fdb\u5165\u8fc7\u7a0bQ\u7684\u65f6\u5019\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u5fc5\u987b\u88ab\u8bbe\u7f6e\u4e3aQ\u7684\u4ee3\u7801\u7684\u8d77\u59cb\u5730\u5740\uff0c\u7136\u540e\u5728\u8fd4\u56de\u65f6\uff0c\u8981\u628a\u7a0b\u5e8f\u8ba1\u6570\u5668\u8bbe\u7f6e\u4e3aP\u4e2d\u8c03\u7528Q\u540e\u9762\u90a3\u6761\u6307\u4ee4\u7684\u5730\u5740\u3002 \u4f20\u9012\u6570\u636e\u3002P\u5fc5\u987b\u80fd\u591f\u5411Q\u63d0\u4f9b\u4e00\u4e2a\u6216\u591a\u4e2a\u53c2\u6570\uff0cQ\u5fc5\u987b\u80fd\u591f\u5411P\u8fd4\u56de\u4e00\u4e2a\u503c\u3002 \u5206\u914d\u548c\u91ca\u653e\u5185\u5b58\u3002\u5728\u5f00\u59cb\u65f6\uff0cQ\u53ef\u80fd\u9700\u8981\u4e3a\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u7a7a\u95f4\uff0c\u800c\u5728\u8fd4\u56de\u524d\uff0c\u53c8\u5fc5\u987b\u91ca\u653e\u8fd9\u4e9b\u5b58\u50a8\u7a7a\u95f4\u3002","title":"7 \u8fc7\u7a0b"},{"location":"os/csapp/ch3/#71","text":"\u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u5f80\u5f80\u4f7f\u7528\u4e86\u6808( Stack )\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u3002\u5f53x86-64\u8fc7\u7a0b\u9700\u8981\u7684\u5b58\u50a8\u7a7a\u95f4\u8d85\u51fa\u5bc4\u5b58\u5668\u80fd\u591f\u5b58\u653e\u7684\u5927\u5c0f\u65f6(\u610f\u5473\u7740\u5176\u5b9e\u5f88\u591a\u51fd\u6570\u6839\u672c\u4e0d\u9700\u8981\u5e27\u6808)\uff0c\u5c31\u4f1a\u5728\u6808\u4e0a\u5206\u914d\u7a7a\u95f4\uff0c\u79f0\u4e3a \u5e27\u6808 (stack frame)\u3002 Current Stack Frame (\u201cTop\u201d to Bottom) contains: Argument build(\u53c2\u6570\u6784\u9020\u533a): Parameters for function about to call \u53ef\u4ee5\u901a\u8fc7\u5bc4\u5b58\u5668\u6700\u591a\u4f20\u90126\u4e2a\u6574\u5f62\u53c2\u6570\uff0c\u8d85\u51fa6\u4e2a\u90e8\u5206\u5c31\u8981\u901a\u8fc7\u6808\u6765\u4f20\u9012 Local variables(\u5c40\u90e8\u53d8\u91cf): \u5bc4\u5b58\u5668\u4e0d\u8db3\u591f\u5b58\u653e\u6240\u6709\u7684\u672c\u5730\u6570\u636e \u4f7f\u7528\u5730\u5740\u8fd0\u7b97\u7b26 \uff0c\u5fc5\u987b\u80fd\u591f\u4ea7\u751f\u4e00\u4e2a\u5730\u5740 Saved register context(\u88ab\u4fdd\u5b58\u7684\u5bc4\u5b58\u5668) \u4fdd\u5b58\u5bc4\u5b58\u5668\u7684\u503c\u5230\u6808\u4e2d Old frame pointer (optional)","title":"7.1 \u8fd0\u884c\u65f6\u6808"},{"location":"os/csapp/ch4/","text":"Chapter 4 \u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784","title":"Chapter 4: \u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784"},{"location":"os/csapp/ch4/#chapter-4","text":"","title":"Chapter 4 \u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784"},{"location":"os/csapp/ch5/","text":"Chapter 5 \u4f18\u5316\u7a0b\u5e8f\u6027\u80fd","title":"Chapter 5: \u4f18\u5316\u7a0b\u5e8f\u6027\u80fd"},{"location":"os/csapp/ch5/#chapter-5","text":"","title":"Chapter 5 \u4f18\u5316\u7a0b\u5e8f\u6027\u80fd"},{"location":"os/csapp/ch6/","text":"Chapter 6 \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 \u5b58\u50a8\u5668\u7cfb\u7edf (memory system)\u662f\u4e00\u4e2a\u5177\u6709\u4e0d\u540c \u5bb9\u91cf \u3001 \u6210\u672c \u548c \u8bbf\u95ee\u65f6\u95f4 \u7684\u5b58\u50a8\u8bbe\u5907\u7684\u5c42\u6b21\u7ed3\u6784\u3002 \u5c40\u90e8\u6027 (locality)\uff1a\u5177\u6709\u826f\u597d\u5c40\u90e8\u6027\u7684\u7a0b\u5e8f\u503e\u5411\u4e8e\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u8bbf\u95ee\u76f8\u540c\u7684\u6570\u636e\u9879\u96c6\u5408\uff0c\u6216\u662f\u503e\u5411\u4e8e\u8bbf\u95ee\u90bb\u8fd1\u7684\u6570\u636e\u9879\u96c6\u5408\u3002 1 \u5b58\u50a8\u6280\u672f \u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668 \u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668 (Random-Access Memory, RAM)\u5206\u4e3a\u4e24\u7c7b\uff1a \u9759\u6001 (SRAM)\u548c \u52a8\u6001 (DRAM)\u7684\u3002 SRAM\u6bd4DRAM\u66f4\u5feb\uff0c\u4f46\u4e5f\u8d35\u5f97\u591a\u3002 SRAM\u7528\u6765\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u3002 DRAM\u7528\u6765\u4f5c\u4e3a\u4e3b\u5b58\u4ee5\u53ca\u56fe\u5f62\u7cfb\u7edf\u7684\u6862\u7f13\u51b2\u533a\u3002 SRAM\u4e00\u822c\u4e0d\u4f1a\u8d85\u8fc7\u51e0\u5146\u5b57\u8282\u3002 DRAM\u6709\u51e0\u767e\u6216\u51e0\u5343\u5146\u5b57\u8282\u3002 \u78c1\u76d8\u5b58\u50a8 \u78c1\u76d8\u662f\u7531 \u76d8\u7247 (platter)\u6784\u6210\u7684\u3002\u6bcf\u4e2a\u76d8\u7247\u5982\u540c\u5207\u897f\u74dc\u4e00\u6837\u88ab\u201c\u5207\u201d\u6210\u4e00\u5757\u4e00\u5757\u7684\u6247\u9762\uff0c\u540c\u65f6\u6cbf\u7740\u534a\u5f84\u7684\u65b9\u5411\u88ab\u5212\u5206\u6210\u4e86\u4e00\u7ec4\u540c\u5fc3\u5706( \u78c1\u9053 , track)\uff0c\u6bcf\u6761\u78c1\u9053\u88ab\u6247\u9762\u5207\u6210\u5f88\u591a\u7684\u6247\u5f62\u533a\u57df\u53eb\u505a \u6247\u533a \uff08sector, \u6247\u533a\u662f\u4ece\u78c1\u76d8\u8bfb\u51fa\u548c\u5199\u5165\u4fe1\u606f\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u5305\u542b\u76f8\u7b49\u6570\u91cf\u7684\u6570\u636e\u4f4d\uff0c\u901a\u5e38\u4e3a512\u5b57\u8282\uff09\uff0c\u4e0d\u540c\u76d8\u7247\u4e0a\u7684\u540c\u534a\u5f84\u78c1\u9053\u7ec4\u6210\u4e86\u67f1\u9762\u3002 \u78c1\u76d8\u7684\u5bb9\u91cf\uff1a \u78c1\u5934\u6570 \u00d7 \u78c1\u9053\u6570 \u00d7 \u6bcf\u9053\u6247\u533a\u6570 \u00d7 \u6bcf\u6247\u533a\u5b57\u8282\u6570 \u56fa\u6001\u786c\u76d8 \u56fa\u6001\u786c\u76d8 (Solid State Disk, SSD)\uff0c\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u95ea\u5b58\u82af\u7247\u548c\u95ea\u5b58\u7ffb\u8bd1\u5c42(flash translation layer)\u7ec4\u6210\u3002 \u95ea\u5b58\u82af\u7247\u5b58\u50a8\u5185\u5bb9\u3002 \u95ea\u5b58\u7ffb\u8bd1\u5c42\u5bf9\u903b\u8f91\u5757\u7684\u8bf7\u6c42\u7ffb\u8bd1\u6210\u5bf9\u5e95\u5c42\u7269\u7406\u8bbe\u5907\u7684\u8bbf\u95ee\u3002 2 \u5c40\u90e8\u6027 \u4e00\u4e2a\u7f16\u5199\u826f\u597d\u7684\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5e38\u5e38\u5177\u6709\u826f\u597d\u7684 \u5c40\u90e8\u6027 (locality)\u3002\u4e5f\u5c31\u662f\uff0c\u5b83\u4eec\u503e\u5411\u4e8e\u5f15\u7528 \u90bb\u8fd1\u4e8e \u5176\u4ed6\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879\u7684\u6570\u636e\u9879( \u7a7a\u95f4\u5c40\u90e8\u6027 )\uff0c\u6216\u8005 \u6700\u8fd1 \u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879\u672c\u8eab( \u65f6\u95f4\u5c40\u90e8\u6027 )\u3002 \u8fd9\u79cd\u503e\u5411\u6027\uff0c\u88ab\u79f0\u4e3a \u5c40\u90e8\u6027\u539f\u7406 (principle of locality)\u6216\u8bbf \u95ee\u5c40\u90e8\u6027 (locality of reference)\u3002 \u6709\u826f\u597d\u5c40\u90e8\u6027\u7684\u7a0b\u5e8f\u6bd4\u5c40\u90e8\u6027\u5dee\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb\u3002\u73b0\u4ee3\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u5404\u4e2a\u5c42\u6b21\uff0c\u4ece\u786c\u4ef6\u5230\u64cd\u4f5c\u7cfb\u7edf\u3001\u518d\u5230\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4eec\u7684\u8bbe\u8ba1\u90fd\u5229\u7528\u4e86\u5c40\u90e8\u6027\u3002 \u5728\u786c\u4ef6\u5c42\uff0c\u901a\u8fc7\u5f15\u5165\u9ad8\u901f\u7f13\u5b58\u6765\u4fdd\u5b58\u6700\u8fd1\u88ab\u5f15\u7528\u7684\u6307\u4ee4\u548c\u6570\u636e\u9879\uff0c\u4ece\u800c\u63d0\u9ad8\u8d2e\u5b58\u7684\u8bbf\u95ee\u901f\u5ea6\u3002 \u5728\u64cd\u4f5c\u7cfb\u7edf\u7ea7\uff0c\u7cfb\u7edf\u4f7f\u7528\u4e3b\u5b58\u4f5c\u4e3a\u865a\u62df\u5730\u5740\u7a7a\u95f4\u6700\u8fd1\u88ab\u5f15\u7528\u5757\u7684\u9ad8\u901f\u7f13\u5b58\u3002 Web\u6d4f\u89c8\u5668\u5c06\u6700\u8fd1\u88ab\u5f15\u7528\u7684\u6587\u6863\u653e\u5728\u672c\u5730\u78c1\u76d8\u4e0a\u3002 \u91cf\u5316\u8bc4\u4ef7\u7a0b\u5e8f\u4e2d\u5c40\u90e8\u6027\u7684\u4e00\u4e9b\u7b80\u5355\u539f\u5219\uff1a \u91cd\u590d\u5f15\u7528\u76f8\u540c\u53d8\u91cf\u7684\u7a0b\u5e8f\u5177\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u3002 \u5bf9\u4e8e\u5177\u6709\u6b65\u957f\u4e3a k k \u7684\u5f15\u7528\u6a21\u5f0f\u7684\u7a0b\u5e8f\uff0c\u6b65\u957f\u8d8a\u597d\uff0c\u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u597d\u3002 \u5bf9\u4e8e\u53d6\u6307\u4ee4\u6765\u8bf4\uff0c\u5faa\u73af\u6709\u597d\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5c40\u90e8\u6027\u3002 // for\u5faa\u73af\u4f53\u91cc\u7684\u6307\u4ee4\u662f\u6309\u7167\u8fde\u7eed\u7684\u987a\u5e8f\u6267\u884c\u7684\uff0c\u56e0\u6b64\u5faa\u73af\u5177\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u3002\u56e0\u4e3a\u5faa\u73af\u4f53\u4f1a\u88ab\u6267\u884c\u591a\u6b21\uff0c\u56e0\u6b64\u4e5f\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u3002 int sumvec ( int v [ N ]){ int i , sum = 0 ; for ( i = 0 ; i N ; i ++ ) sum += v [ i ]; return sum ; } 3 \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 Memory Hierarchy \u4e00\u822c\u800c\u8a00\uff0c\u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70\uff0c\u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162\u3001\u66f4\u4fbf\u5b9c\u548c\u66f4\u5927\u3002 \u5728\u6700\u9ad8\u5c42(L0)\uff0c\u662f\u5c11\u91cf\u5feb\u901f\u7684CPU\u5bc4\u5b58\u5668\uff0cCPU\u53ef\u4ee5\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8bbf\u95ee\u5b83\u4eec\u3002 \u63a5\u4e0b\u6765\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5c0f\u578b\u5230\u4e2d\u578b\u7684\u57fa\u4e8eSRAM\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\uff0c\u53ef\u4ee5\u5728\u51e0\u4e2aCPU\u65f6\u949f\u5468\u671f\u5185\u8bbf\u95ee\u5b83\u4eec\u3002 \u7136\u540e\u662f\u4e00\u4e2a\u5927\u7684\u57fa\u4e8eDRAM\u7684\u8d2e\u5b58\uff0c\u53ef\u4ee5\u5728\u51e0\u5341\u5230\u51e0\u767e\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8bbf\u95ee\u5b83\u4eec\u3002 \u63a5\u4e0b\u6765\u662f\u6162\u901f\u4f46\u5bb9\u91cf\u5f88\u5927\u7684\u672c\u5730\u78c1\u76d8\u3002 \u6700\u540e\uff0c\u6709\u4e9b\u7cfb\u7edf\u5305\u62ec\u4e86\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u78c1\u76d8\uff0c\u8981\u901a\u8fc7\u7f51\u7edc\u6765\u8bbf\u95ee\u5b83\u4eec\u3002 \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u7f13\u5b58 \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a k k \uff0c\u4f4d\u4e8e k k \u5c42\u7684\u66f4\u5feb\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u4f5c\u4e3a\u4f4d\u4e8e k+1 k+1 \u5c42\u7684\u66f4\u5927\u66f4\u6162\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u7f13\u5b58\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e00\u5c42\u90fd\u7f13\u5b58\u6765\u81ea\u8f83\u4f4e\u4e00\u5c42\u7684\u6570\u636e\u5bf9\u8c61\u3002 \u7b2c k+1 k+1 \u5c42\u7684\u5b58\u50a8\u5668\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u6570\u636e\u5bf9\u8c61\u7ec4\u5757(chunk)\uff0c\u79f0\u4e3a\u5757(block)\u3002 \u6bcf\u4e2a\u5757\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740\u3002 \u5757\u7684\u5927\u5c0f\u53ef\u4ee5\u662f\u56fa\u5b9a\u7684(\u901a\u5e38)\uff0c\u4e5f\u53ef\u4ee5\u662f\u53ef\u53d8\u7684(\u4f8b\u5982\u5b58\u50a8\u5728Web\u670d\u52a1\u5668\u4e0a\u7684HMTL\u6587\u4ef6). \u6570\u636e\u603b\u662f\u4ee5\u5757\u5927\u5c0f\u4e3a\u4f20\u9001\u5355\u5143\u5728\u7b2c k k \u5c42\u548c\u7b2c k+1 k+1 \u5c42\u4e4b\u95f4\u6765\u56de\u590d\u5236\u3002\u5728\u5c42\u6b21\u7ed3\u6784\u4e2d\u4efb\u4f55\u4e00\u5bf9\u76f8\u90bb\u7684\u5c42\u6b21\u4e4b\u95f4\u5757\u5927\u5c0f\u662f\u56fa\u5b9a\u7684(\u7b2c k k \u5c42\u548c\u7b2c k+1 k+1 \u5c42\u5757\u5927\u5c0f\u4e00\u81f4)\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u5c42\u6b21\u5bf9\u4e4b\u95f4\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u3002 \u5f53\u7a0b\u5e8f\u9700\u8981\u7b2c k+1 k+1 \u5c42\u7684\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61 d d \u65f6\uff0c\u5b83\u9996\u5148\u5728\u5f53\u524d\u5b58\u50a8\u5728\u7b2c k k \u5c42\u7684\u4e00\u4e2a\u5757\u4e2d\u67e5\u627e d d \u3002\u5982\u679c d d \u521a\u597d\u7f13\u5b58\u5728\u7b2c k k \u5c42\u4e2d\uff0c\u5373 \u7f13\u5b58\u547d\u4e2d (cache hit)\uff0c\u5426\u5219 \u7f13\u5b58\u4e0d\u547d\u4e2d (cache miss)\u3002 \u73b0\u4ee3\u7cfb\u7edf\u4e2d\u5230\u5904\u90fd\u4f7f\u7528\u4e86\u7f13\u5b58\u3002 4 \u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668 \u901a\u7528\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u7ec4\u7ec7\u7ed3\u6784 \u8003\u8651\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u6709 m m \u4f4d\uff0c\u5f62\u6210$M=2^m \u4e2a\u4e0d\u540c\u7684\u5730\u5740\u3002\u8fd9\u6837\u4e00\u4e2a\u673a\u5668\u7684\u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u6709 \u4e2a\u4e0d\u540c\u7684\u5730\u5740\u3002\u8fd9\u6837\u4e00\u4e2a\u673a\u5668\u7684\u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u6709 S=2^s $\u4e2a \u9ad8\u901f\u7f13\u5b58\u7ec4 (cache set)\u7684\u6570\u7ec4\u3002 \u6bcf\u4e2a\u7ec4\u5305\u542b E E \u4e2a \u9ad8\u901f\u7f13\u5b58\u884c (cache line)\u3002 \u6bcf\u4e2a\u884c\u662f\u7531\u4e00\u4e2a$B=2^b $\u5b57\u8282\u7684\u6570\u636e\u5757(block)\u7ec4\u6210\u7684\u3002 \u4e00\u4e2a \u6709\u6548\u4f4d (valid bit)\u6307\u660e\u8fd9\u4e2a\u884c\u662f\u5426\u5305\u542b\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002 \u6709 t=m-(b+s) t=m-(b+s) \u4e2a \u6807\u8bb0\u4f4d (tag bit)\u552f\u4e00\u5730\u6807\u8bc6\u5b58\u50a8\u5728\u8fd9\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u5757\u3002 \u9ad8\u901f\u7f13\u5b58\u7684\u5927\u5c0f C C \u662f\u6307\u6240\u6709\u5757\u7684\u5927\u5c0f\u7684\u548c\uff0c C=S\\times E\\times B C=S\\times E\\times B . \u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c( E=1 E=1 )\u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58 \uff1b \u6bcf\u4e2a\u7ec4\u6709\u591a\u884c( E 1 E>1 )\u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \uff1b \u4e00\u4e2a\u5305\u542b\u6240\u6709\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u7ec4( E=C/B E=C/B )\uff0c\u79f0\u4e3a \u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u3002 \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58 \u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c( E=1 E=1 )\u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58 (Direct-Mapped Caches)\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5b83\u6709\u4e00\u4e2aCPU\u3001\u4e00\u4e2a\u5bc4\u5b58\u5668\u6587\u4ef6\u3001\u4e00\u4e2aL1\u9ad8\u901f\u7f13\u5b58\u548c\u4e00\u4e2a\u4e3b\u5b58\u3002\u5f53CPU\u6267\u884c\u4e00\u6761\u8bfb\u5185\u5b58\u5b57 w w \u7684\u6307\u4ee4\uff0c\u5b83\u5411L1\u9ad8\u901f\u7f13\u5b58\u8bf7\u6c42\u8fd9\u4e2a\u5b57\u3002 \u5982\u679cL1\u9ad8\u901f\u7f13\u5b58\u6709 w w \u7684\u4e00\u4e2a\u7f13\u5b58\u7684\u526f\u672c\uff0c\u90a3\u4e48\u5c31\u5f97\u5230L1\u9ad8\u901f\u7f13\u5b58\u547d\u4e2d\u3002\u9ad8\u901f\u7f13\u5b58\u4f1a\u5f88\u5feb\u62bd\u53d6\u51fa w w \uff0c\u5e76\u5c06\u5b83\u8fd4\u56de\u7ed9CPU\u3002 \u5426\u5219\u5c31\u662f\u7f13\u5b58\u4e0d\u547d\u4e2d\uff0cCPU\u5fc5\u987b\u7b49\u5f85\u88ab\u8bf7\u6c42\u7684\u5757\u6700\u7ec8\u4ece\u5185\u5b58\u8fbe\u5230\u65f6\uff0cL1\u9ad8\u901f\u7f13\u5b58\u5c06\u8fd9\u4e2a\u5757\u623f\u5b50\u5b83\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u91cc\uff0c\u4ece\u88ab\u5b58\u50a8\u7684\u5757\u4e2d\u62bd\u53d6\u51fa\u5b57 w w \uff0c\u7136\u540e\u5c06\u5b83\u8fd4\u56de\u7ed9CPU\u3002 \u9ad8\u901f\u7f13\u5b58\u786e\u5b9a\u4e00\u4e2a\u8bf7\u6c42\u662f\u5426\u547d\u4e2d\uff0c\u7136\u540e\u62bd\u53d6\u51fa\u88ab\u8bf7\u6c42\u7684\u5b57\u7684\u8fc7\u7a0b\uff0c\u5206\u4e3a\u4e09\u6b65\uff1a \u7ec4\u9009\u62e9(set selection) \u884c\u5339\u914d(line matching) \u5b57\u62bd\u53d6(word extraction) 1.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u7ec4\u9009\u62e9 \u9ad8\u901f\u7f13\u5b58\u4ece w w \u7684\u5730\u5740\u4e2d\u95f4\u62bd\u53d6\u51fa s s \u4e2a \u7ec4\u7d22\u5f15 (Set index)\u4f4d\u3002 2.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u884c\u5339\u914d \u7531\u4e8e\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c\uff0c\u56e0\u6b64\u5f53\u4e14\u4ec5\u5f53\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d(valid bit)\uff0c\u800c\u4e14\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u6807\u8bb0(tag)\u4e0e w w \u7684\u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u65f6\uff0c\u8fd9\u4e00\u884c\u4e2d\u5305\u542b w w \u7684\u4e00\u4e2a\u526f\u672c\u3002 3.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u5b57\u9009\u62e9 \u4e00\u65e6\u547d\u4e2d\uff0c\u6211\u4eec\u77e5\u9053 w w \u5c31\u5728\u8fd9\u4e2a\u5757\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u6700\u540e\u4e00\u6b65\u786e\u5b9a\u6240\u9700\u8981\u7684\u5b57\u5728\u5757\u4e2d\u662f\u4ece\u54ea\u91cc\u5f00\u59cb\u7684\u3002\u5757\u504f\u79fb(block offset)\u63d0\u4f9b\u4e86\u6240\u9700\u8981\u7684\u5b57\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u3002 4.\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u4e0d\u547d\u4e2d\u65f6\u7684\u884c\u66ff\u6362 \u5982\u679c\u7f13\u5b58\u4e0d\u547d\u4e2d\uff0c\u90a3\u4e48\u5b83\u9700\u8981\u4ece\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e0b\u4e00\u5c42\u53bb\u9664\u88ab\u8bf7\u6c42\u7684\u5757\uff0c\u7136\u540e\u5c06\u65b0\u7684\u5757\u5b58\u50a8\u5728\u7ec4\u7d22\u5f15\u4f4d\u6307\u793a\u7684\u7ec4\u4e2d\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u3002 \u5982\u679c\u7ec4\u4e2d\u90fd\u662f\u6709\u6548\u9ad8\u901f\u7f13\u5b58\u884c\uff0c\u5219\u5fc5\u987b\u8981\u9a71\u9664\u51fa\u4e00\u4e2a\u73b0\u5b58\u7684\u884c\u3002 \u5bf9\u4e8e\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u6765\u8bf4\uff0c\u6bcf\u4e2a\u7ec4\u53ea\u5305\u542b\u4e00\u884c\uff0c\u7528\u65b0\u53d6\u51fa\u7684\u884c\u66ff\u6362\u5f53\u524d\u7684\u884c\u3002 5.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u51b2\u7a81\u4e0d\u547d\u4e2d \u5f53\u7a0b\u5e8f\u8bbf\u95ee\u5927\u5c0f\u4e3a2\u7684\u5e42\u7684\u6570\u7ec4\u65f6\uff0c\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4f1a\u53d1\u751f \u51b2\u7a81\u4e0d\u547d\u4e2d (conflit miss)\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u70b9\u79ef\u7684\u51fd\u6570\uff1a float dotprod ( float x [ 8 ], float y [ 8 ]) { float sum = 0.0 ; int i ; for ( i = 0 ; i 8 ; i ++ ) sum += x [ i ] * y [ i ]; return sum ; } \u5047\u8bbe\u9ad8\u901f\u6df7\u5b58\u7531\u4e24\u4e2a\u7ec4\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7ec4\u5bb9\u7eb34\u4e2a\u6d6e\u70b9\u6570\u3002\u6d6e\u70b9\u6570\u662f4\u4e2a\u5b57\u8282\uff0c x x \u88ab\u52a0\u8f7d\u5230\u4ece\u5730\u57400\u5f00\u59cb\u768432\u5b57\u8282\u8fde\u7eed\u5185\u5b58\u4e2d\uff0c\u800c y y \u7d27\u8ddf\u5728 x x \u4e4b\u540e\uff0c\u4ece\u5730\u574032\u5f00\u59cb\u3002 \u6bcf\u4e2a x[i] x[i] \u548c y[i] y[i] \u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\uff1a \u5728\u8fd0\u884c\u65f6\uff0c\u5faa\u73af\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u5f15\u7528 x[0] x[0] \uff0c\u7f13\u5b58\u4e0d\u547d\u4e2d\u4f1a\u5bfc\u81f4\u5305\u542b x[0]-x[3] x[0]-x[3] \u7684\u5757\u88ab\u52a0\u8f7d\u5230\u7ec40. \u63a5\u4e0b\u6765\uff0c\u5f15\u7528 y[0] y[0] \uff0c\u7f13\u5b58\u4e0d\u547d\u4e2d\u4f1a\u5bfc\u81f4\u5305\u542b y[0]-y[3] y[0]-y[3] \u7684\u5757\u88ab\u52a0\u8f7d\u5230\u7ec40\uff0c\u8986\u76d6\u524d\u4e00\u6b21\u5f15\u7528\u590d\u5236\u8fdb\u6765\u7684x\u7684\u503c\u3002 \u5728\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u5bf9 x[1] x[1] \u7684\u5f15\u7528\u4e0d\u547d\u4e2d\uff0c\u5bfc\u81f4 x[0]-x[3] x[0]-x[3] \u7684\u5757\u88ab\u91cd\u65b0\u52a0\u8f7d\u5230\u7ec40\uff0c\u8986\u76d6\u6389 y[0]-y[3] y[0]-y[3] \u7684\u5757\u3002 \u8fd9\u79cd\u73b0\u8c61\uff0c \u9ad8\u901f\u7f13\u5b58\u53cd\u590d\u5730\u52a0\u8f7d\u548c\u9a71\u9010\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4 \uff0c\u53eb\u505a \u6296\u52a8 (thrashing)\u3002 \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 (set associative cache)\u7684\u6bcf\u4e2a\u7ec4\u90fd\u4fdd\u5b58\u6709\u591a\u4e8e\u4e00\u4e2a\u7684\u9ad8\u901f\u7f13\u5b58\u884c\u3002\u4e00\u4e2a 1 E C/B 1<E<C/B \u7684\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u79f0\u4e3a E\u8def\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 (E-way set associative cache)\u3002 1. \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u7ec4\u9009\u62e9 \u5b83\u7684\u7ec4\u9009\u62e9\u548c\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u7684\u7ec4\u9009\u62e9\u4e00\u6837\uff0c\u7ec4\u7d22\u5f15(set index)\u4f4d\u6807\u8bc6\u7ec4\u3002 2. \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u884c\u5339\u914d\u548c\u5b57\u9009\u62e9 \u5b83\u5fc5\u987b\u68c0\u67e5\u591a\u4e2a\u884c\u7684\u6807\u8bb0\u4f4d\u548c\u6709\u6548\u4f4d\uff0c\u4ee5\u786e\u5b9a\u6240\u8bf7\u6c42\u7684\u5b57\u662f\u5426\u5728\u7ec4\u4e2d\u3002 \u76f8\u8054\u5b58\u50a8\u5668 (associative memory)\u662f\u4e00\u4e2a(key, value)\u5bf9\u7684\u6570\u7ec4\uff0c\u4ee5key\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u4e0e\u8f93\u5165\u7684key\u76f8\u5339\u914d\u7684(key, value\uff09\u5bf9\u4e2d\u7684value\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u7684\u6bcf\u4e2a\u7ec4\u770b\u6210\u4e00\u4e2a\u5c0f\u7684\u76f8\u8054\u5b58\u50a8\u5668\uff0ckey\u662f\u6807\u8bb0\u548c\u6709\u6548\u4f4d\uff0c\u800cvalue\u5c31\u662f\u5757\u7684\u5185\u5bb9\u3002 \u7ec4\u4e2d\u7684\u4efb\u4f55\u4e00\u884c\u90fd\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u6620\u5c04\u5230\u8fd9\u4e2a\u7ec4\u7684\u5185\u5b58\u5757\u3002\u6240\u4ee5\u9ad8\u901f\u7f13\u5b58\u5fc5\u987b\u641c\u7d22\u7ec4\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u5bfb\u627e\u4e00\u4e2a\u6709\u6548\u7684\u884c\uff0c\u5176\u6807\u8bb0\u4e0e\u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u3002\u5982\u679c\u627e\u5230\u4e86\u8fd9\u6837\u4e00\u884c\uff0c\u90a3\u4e48\u5757\u504f\u79fb\u5c31\u4ece\u8fd9\u4e2a\u5757\u4e2d\u9009\u62e9\u4e00\u4e2a\u5b57\u3002 3. \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u4e0d\u547d\u4e2d\u65f6\u7684\u884c\u66ff\u6362 \u5982\u679cCPU\u8bf7\u6c42\u7684\u5b57\u4e0d\u5728\u7ec4\u7684\u4efb\u4f55\u4e00\u884c\u4e2d\uff0c\u90a3\u4e48\u5c31\u662f\u7f13\u5b58\u4e0d\u547d\u4e2d\uff0c\u9ad8\u901f\u7f13\u5b58\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u5305\u542b\u8fd9\u4e2a\u5b57\u7684\u5757\uff0c\u7136\u540e\u8fdb\u884c\u66ff\u6362\u3002\u8be5\u66ff\u6362\u54ea\u4e2a\u884c\u5462\uff1f \u5982\u679c\u7ec4\u4e2d\u6709\u4e00\u4e2a\u7a7a\u884c\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e2a\u5f88\u597d\u7684\u5019\u9009\u3002 \u5982\u679c\u7ec4\u4e2d\u6ca1\u6709\u7a7a\u884c\uff0c\u5fc5\u987b\u4ece\u4e2d\u9009\u62e9\u4e00\u4e2a\u975e\u7a7a\u7684\u884c\u3002\u6709\u5982\u4e0b\u51e0\u4e2a\u66ff\u6362\u7b56\u7565\uff1a \u6700\u4e0d\u5e38\u4f7f\u7528 (Least-Frequently-Used, LFU)\u7b56\u7565\u4f1a\u66ff\u6362\u5728\u8fc7\u53bb\u67d0\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u5f15\u7528\u6b21\u6570\u6700\u5c11\u7684\u90a3\u4e00\u884c\u3002 \u6700\u8fd1\u6700\u5c11\u4f7f\u7528 (Least-Recently-Used, LRU)\u7b56\u7565\u4f1a\u66ff\u6362\u6700\u540e\u4e00\u4e2a\u8bbf\u95ee\u65f6\u95f4\u6700\u4e45\u8fdc\u7684\u90a3\u4e00\u884c\u3002 \u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u4e00\u4e2a\u5305\u542b\u6240\u6709\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u7ec4( E=C/B E=C/B )\uff0c\u79f0\u4e3a \u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u3002 \u56e0\u4e3a\u9ad8\u901f\u7f13\u5b58\u7535\u8def\u5fc5\u987b\u5e76\u884c\u5730\u641c\u7d22\u8bb8\u591a\u76f8\u5339\u914d\u7684\u6807\u8bb0\uff0c\u6784\u9020\u4e00\u4e2a\u53c8\u5927\u53c8\u5feb\u7684\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u5f88\u56f0\u96be\uff0c\u5e76\u4e14\u5f88\u6602\u8d35\u3002\u56e0\u6b64\uff0c\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u53ea\u9002\u5408\u505a\u5c0f\u7684\u9ad8\u901f\u7f13\u5b58(\u4f8b\u5982MMC\u4e2d\u7684TLB)\u3002 5 \u7f16\u5199\u9ad8\u901f\u7f13\u5b58\u53cb\u597d\u7684\u4ee3\u7801 6 \u9ad8\u901f\u7f13\u5b58\u5bf9\u7a0b\u5e8f\u6027\u80fd\u7684\u5f71\u54cd \u5b58\u50a8\u5668\u5c71 \u4e00\u4e2a\u7a0b\u5e8f\u4ece\u5b58\u50a8\u7cfb\u7edf\u4e2d\u8bfb\u6570\u636e\u7684\u901f\u7387\u79f0\u4e3a \u8bfb\u541e\u5410\u91cf (read throughput)\u3002 \u5b58\u50a8\u5668\u5c71 (memory mountain)\u662f\u4e00\u4e2a\u8bfb\u541e\u5410\u91cf\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5c40\u90e8\u6027\u7684\u4e8c\u7ef4\u51fd\u6570\u3002 \u901a\u8fc7\u4e0d\u540c\u7684size(\u5bf9\u5e94\u65f6\u95f4\u5c40\u90e8\u6027)\u548cstride(\u5bf9\u5e94\u7a7a\u95f4\u5c40\u90e8\u6027)\u7684\u503c\u4ea7\u751f\u5b58\u50a8\u5668\u5c71\u3002 size\u503c\u8d8a\u5c0f\uff0c\u5f97\u5230\u7684\u5de5\u4f5c\u96c6\u8d8a\u5c0f\uff0c\u65f6\u95f4\u5c40\u90e8\u6027\u8d8a\u597d\u3002 stride\u503c\u8d8a\u5c0f\uff0c\u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u597d\u3002 Intel Core i7\u7684\u5b58\u50a8\u5668\u5c71\uff1a Core i7\u7684\u5b58\u50a8\u5668\u5c71\u5c55\u73b0\u4e86\u4e00\u4e2a\u5f88\u4e30\u5bcc\u7684\u7ed3\u6784\uff1a \u5782\u76f4\u4e8esize\u8f74\u7684\u662f\u56db\u6761\u5c71\u810a\uff0c\u5206\u522b\u5bf9\u5e94\u4e8e\u5b8c\u5168\u5728L1\u9ad8\u901f\u7f13\u5b58\u3001L2\u9ad8\u901f\u7f13\u5b58\u3001L3\u9ad8\u901f\u7f13\u5b58\u548c\u4e3b\u5b58\u5185\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u533a\u57df\u3002 \u5728L2\u3001L3\u548c\u4e3b\u5b58\u5c71\u810a\u4e0a\uff0c\u968f\u7740\u6b65\u957f\u7684\u589e\u52a0\uff0c\u6709\u4e00\u4e2a\u7a7a\u95f4\u5c40\u90e8\u6027\u7684\u659c\u5761\uff0c\u7a7a\u95f4\u5c40\u90e8\u6027\u4e0b\u964d\u3002","title":"Chapter 6: \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784"},{"location":"os/csapp/ch6/#chapter-6","text":"\u5b58\u50a8\u5668\u7cfb\u7edf (memory system)\u662f\u4e00\u4e2a\u5177\u6709\u4e0d\u540c \u5bb9\u91cf \u3001 \u6210\u672c \u548c \u8bbf\u95ee\u65f6\u95f4 \u7684\u5b58\u50a8\u8bbe\u5907\u7684\u5c42\u6b21\u7ed3\u6784\u3002 \u5c40\u90e8\u6027 (locality)\uff1a\u5177\u6709\u826f\u597d\u5c40\u90e8\u6027\u7684\u7a0b\u5e8f\u503e\u5411\u4e8e\u4e00\u6b21\u53c8\u4e00\u6b21\u5730\u8bbf\u95ee\u76f8\u540c\u7684\u6570\u636e\u9879\u96c6\u5408\uff0c\u6216\u662f\u503e\u5411\u4e8e\u8bbf\u95ee\u90bb\u8fd1\u7684\u6570\u636e\u9879\u96c6\u5408\u3002","title":"Chapter 6 \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784"},{"location":"os/csapp/ch6/#1","text":"","title":"1 \u5b58\u50a8\u6280\u672f"},{"location":"os/csapp/ch6/#_1","text":"\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668 (Random-Access Memory, RAM)\u5206\u4e3a\u4e24\u7c7b\uff1a \u9759\u6001 (SRAM)\u548c \u52a8\u6001 (DRAM)\u7684\u3002 SRAM\u6bd4DRAM\u66f4\u5feb\uff0c\u4f46\u4e5f\u8d35\u5f97\u591a\u3002 SRAM\u7528\u6765\u4f5c\u4e3a\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u3002 DRAM\u7528\u6765\u4f5c\u4e3a\u4e3b\u5b58\u4ee5\u53ca\u56fe\u5f62\u7cfb\u7edf\u7684\u6862\u7f13\u51b2\u533a\u3002 SRAM\u4e00\u822c\u4e0d\u4f1a\u8d85\u8fc7\u51e0\u5146\u5b57\u8282\u3002 DRAM\u6709\u51e0\u767e\u6216\u51e0\u5343\u5146\u5b57\u8282\u3002","title":"\u968f\u673a\u8bbf\u95ee\u5b58\u50a8\u5668"},{"location":"os/csapp/ch6/#_2","text":"\u78c1\u76d8\u662f\u7531 \u76d8\u7247 (platter)\u6784\u6210\u7684\u3002\u6bcf\u4e2a\u76d8\u7247\u5982\u540c\u5207\u897f\u74dc\u4e00\u6837\u88ab\u201c\u5207\u201d\u6210\u4e00\u5757\u4e00\u5757\u7684\u6247\u9762\uff0c\u540c\u65f6\u6cbf\u7740\u534a\u5f84\u7684\u65b9\u5411\u88ab\u5212\u5206\u6210\u4e86\u4e00\u7ec4\u540c\u5fc3\u5706( \u78c1\u9053 , track)\uff0c\u6bcf\u6761\u78c1\u9053\u88ab\u6247\u9762\u5207\u6210\u5f88\u591a\u7684\u6247\u5f62\u533a\u57df\u53eb\u505a \u6247\u533a \uff08sector, \u6247\u533a\u662f\u4ece\u78c1\u76d8\u8bfb\u51fa\u548c\u5199\u5165\u4fe1\u606f\u7684\u6700\u5c0f\u5355\u4f4d\uff0c\u5305\u542b\u76f8\u7b49\u6570\u91cf\u7684\u6570\u636e\u4f4d\uff0c\u901a\u5e38\u4e3a512\u5b57\u8282\uff09\uff0c\u4e0d\u540c\u76d8\u7247\u4e0a\u7684\u540c\u534a\u5f84\u78c1\u9053\u7ec4\u6210\u4e86\u67f1\u9762\u3002 \u78c1\u76d8\u7684\u5bb9\u91cf\uff1a \u78c1\u5934\u6570 \u00d7 \u78c1\u9053\u6570 \u00d7 \u6bcf\u9053\u6247\u533a\u6570 \u00d7 \u6bcf\u6247\u533a\u5b57\u8282\u6570","title":"\u78c1\u76d8\u5b58\u50a8"},{"location":"os/csapp/ch6/#_3","text":"\u56fa\u6001\u786c\u76d8 (Solid State Disk, SSD)\uff0c\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u95ea\u5b58\u82af\u7247\u548c\u95ea\u5b58\u7ffb\u8bd1\u5c42(flash translation layer)\u7ec4\u6210\u3002 \u95ea\u5b58\u82af\u7247\u5b58\u50a8\u5185\u5bb9\u3002 \u95ea\u5b58\u7ffb\u8bd1\u5c42\u5bf9\u903b\u8f91\u5757\u7684\u8bf7\u6c42\u7ffb\u8bd1\u6210\u5bf9\u5e95\u5c42\u7269\u7406\u8bbe\u5907\u7684\u8bbf\u95ee\u3002","title":"\u56fa\u6001\u786c\u76d8"},{"location":"os/csapp/ch6/#2","text":"\u4e00\u4e2a\u7f16\u5199\u826f\u597d\u7684\u8ba1\u7b97\u673a\u7a0b\u5e8f\u5e38\u5e38\u5177\u6709\u826f\u597d\u7684 \u5c40\u90e8\u6027 (locality)\u3002\u4e5f\u5c31\u662f\uff0c\u5b83\u4eec\u503e\u5411\u4e8e\u5f15\u7528 \u90bb\u8fd1\u4e8e \u5176\u4ed6\u6700\u8fd1\u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879\u7684\u6570\u636e\u9879( \u7a7a\u95f4\u5c40\u90e8\u6027 )\uff0c\u6216\u8005 \u6700\u8fd1 \u5f15\u7528\u8fc7\u7684\u6570\u636e\u9879\u672c\u8eab( \u65f6\u95f4\u5c40\u90e8\u6027 )\u3002 \u8fd9\u79cd\u503e\u5411\u6027\uff0c\u88ab\u79f0\u4e3a \u5c40\u90e8\u6027\u539f\u7406 (principle of locality)\u6216\u8bbf \u95ee\u5c40\u90e8\u6027 (locality of reference)\u3002 \u6709\u826f\u597d\u5c40\u90e8\u6027\u7684\u7a0b\u5e8f\u6bd4\u5c40\u90e8\u6027\u5dee\u7684\u7a0b\u5e8f\u8fd0\u884c\u5f97\u66f4\u5feb\u3002\u73b0\u4ee3\u8ba1\u7b97\u673a\u7cfb\u7edf\u7684\u5404\u4e2a\u5c42\u6b21\uff0c\u4ece\u786c\u4ef6\u5230\u64cd\u4f5c\u7cfb\u7edf\u3001\u518d\u5230\u5e94\u7528\u7a0b\u5e8f\uff0c\u5b83\u4eec\u7684\u8bbe\u8ba1\u90fd\u5229\u7528\u4e86\u5c40\u90e8\u6027\u3002 \u5728\u786c\u4ef6\u5c42\uff0c\u901a\u8fc7\u5f15\u5165\u9ad8\u901f\u7f13\u5b58\u6765\u4fdd\u5b58\u6700\u8fd1\u88ab\u5f15\u7528\u7684\u6307\u4ee4\u548c\u6570\u636e\u9879\uff0c\u4ece\u800c\u63d0\u9ad8\u8d2e\u5b58\u7684\u8bbf\u95ee\u901f\u5ea6\u3002 \u5728\u64cd\u4f5c\u7cfb\u7edf\u7ea7\uff0c\u7cfb\u7edf\u4f7f\u7528\u4e3b\u5b58\u4f5c\u4e3a\u865a\u62df\u5730\u5740\u7a7a\u95f4\u6700\u8fd1\u88ab\u5f15\u7528\u5757\u7684\u9ad8\u901f\u7f13\u5b58\u3002 Web\u6d4f\u89c8\u5668\u5c06\u6700\u8fd1\u88ab\u5f15\u7528\u7684\u6587\u6863\u653e\u5728\u672c\u5730\u78c1\u76d8\u4e0a\u3002 \u91cf\u5316\u8bc4\u4ef7\u7a0b\u5e8f\u4e2d\u5c40\u90e8\u6027\u7684\u4e00\u4e9b\u7b80\u5355\u539f\u5219\uff1a \u91cd\u590d\u5f15\u7528\u76f8\u540c\u53d8\u91cf\u7684\u7a0b\u5e8f\u5177\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u3002 \u5bf9\u4e8e\u5177\u6709\u6b65\u957f\u4e3a k k \u7684\u5f15\u7528\u6a21\u5f0f\u7684\u7a0b\u5e8f\uff0c\u6b65\u957f\u8d8a\u597d\uff0c\u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u597d\u3002 \u5bf9\u4e8e\u53d6\u6307\u4ee4\u6765\u8bf4\uff0c\u5faa\u73af\u6709\u597d\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5c40\u90e8\u6027\u3002 // for\u5faa\u73af\u4f53\u91cc\u7684\u6307\u4ee4\u662f\u6309\u7167\u8fde\u7eed\u7684\u987a\u5e8f\u6267\u884c\u7684\uff0c\u56e0\u6b64\u5faa\u73af\u5177\u6709\u826f\u597d\u7684\u7a7a\u95f4\u5c40\u90e8\u6027\u3002\u56e0\u4e3a\u5faa\u73af\u4f53\u4f1a\u88ab\u6267\u884c\u591a\u6b21\uff0c\u56e0\u6b64\u4e5f\u6709\u826f\u597d\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u3002 int sumvec ( int v [ N ]){ int i , sum = 0 ; for ( i = 0 ; i N ; i ++ ) sum += v [ i ]; return sum ; }","title":"2 \u5c40\u90e8\u6027"},{"location":"os/csapp/ch6/#3-memory-hierarchy","text":"\u4e00\u822c\u800c\u8a00\uff0c\u4ece\u9ad8\u5c42\u5f80\u4f4e\u5c42\u8d70\uff0c\u5b58\u50a8\u8bbe\u5907\u53d8\u5f97\u66f4\u6162\u3001\u66f4\u4fbf\u5b9c\u548c\u66f4\u5927\u3002 \u5728\u6700\u9ad8\u5c42(L0)\uff0c\u662f\u5c11\u91cf\u5feb\u901f\u7684CPU\u5bc4\u5b58\u5668\uff0cCPU\u53ef\u4ee5\u5728\u4e00\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8bbf\u95ee\u5b83\u4eec\u3002 \u63a5\u4e0b\u6765\u662f\u4e00\u4e2a\u6216\u591a\u4e2a\u5c0f\u578b\u5230\u4e2d\u578b\u7684\u57fa\u4e8eSRAM\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\uff0c\u53ef\u4ee5\u5728\u51e0\u4e2aCPU\u65f6\u949f\u5468\u671f\u5185\u8bbf\u95ee\u5b83\u4eec\u3002 \u7136\u540e\u662f\u4e00\u4e2a\u5927\u7684\u57fa\u4e8eDRAM\u7684\u8d2e\u5b58\uff0c\u53ef\u4ee5\u5728\u51e0\u5341\u5230\u51e0\u767e\u4e2a\u65f6\u949f\u5468\u671f\u5185\u8bbf\u95ee\u5b83\u4eec\u3002 \u63a5\u4e0b\u6765\u662f\u6162\u901f\u4f46\u5bb9\u91cf\u5f88\u5927\u7684\u672c\u5730\u78c1\u76d8\u3002 \u6700\u540e\uff0c\u6709\u4e9b\u7cfb\u7edf\u5305\u62ec\u4e86\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u7684\u78c1\u76d8\uff0c\u8981\u901a\u8fc7\u7f51\u7edc\u6765\u8bbf\u95ee\u5b83\u4eec\u3002","title":"3 \u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784 Memory Hierarchy"},{"location":"os/csapp/ch6/#_4","text":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e2d\u5fc3\u601d\u60f3\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a k k \uff0c\u4f4d\u4e8e k k \u5c42\u7684\u66f4\u5feb\u66f4\u5c0f\u7684\u5b58\u50a8\u8bbe\u5907\u4f5c\u4e3a\u4f4d\u4e8e k+1 k+1 \u5c42\u7684\u66f4\u5927\u66f4\u6162\u7684\u5b58\u50a8\u8bbe\u5907\u7684\u7f13\u5b58\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u6bcf\u4e00\u5c42\u90fd\u7f13\u5b58\u6765\u81ea\u8f83\u4f4e\u4e00\u5c42\u7684\u6570\u636e\u5bf9\u8c61\u3002 \u7b2c k+1 k+1 \u5c42\u7684\u5b58\u50a8\u5668\u88ab\u5212\u5206\u4e3a\u8fde\u7eed\u7684\u6570\u636e\u5bf9\u8c61\u7ec4\u5757(chunk)\uff0c\u79f0\u4e3a\u5757(block)\u3002 \u6bcf\u4e2a\u5757\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u5730\u5740\u3002 \u5757\u7684\u5927\u5c0f\u53ef\u4ee5\u662f\u56fa\u5b9a\u7684(\u901a\u5e38)\uff0c\u4e5f\u53ef\u4ee5\u662f\u53ef\u53d8\u7684(\u4f8b\u5982\u5b58\u50a8\u5728Web\u670d\u52a1\u5668\u4e0a\u7684HMTL\u6587\u4ef6). \u6570\u636e\u603b\u662f\u4ee5\u5757\u5927\u5c0f\u4e3a\u4f20\u9001\u5355\u5143\u5728\u7b2c k k \u5c42\u548c\u7b2c k+1 k+1 \u5c42\u4e4b\u95f4\u6765\u56de\u590d\u5236\u3002\u5728\u5c42\u6b21\u7ed3\u6784\u4e2d\u4efb\u4f55\u4e00\u5bf9\u76f8\u90bb\u7684\u5c42\u6b21\u4e4b\u95f4\u5757\u5927\u5c0f\u662f\u56fa\u5b9a\u7684(\u7b2c k k \u5c42\u548c\u7b2c k+1 k+1 \u5c42\u5757\u5927\u5c0f\u4e00\u81f4)\uff0c\u4f46\u662f\u5176\u4ed6\u7684\u5c42\u6b21\u5bf9\u4e4b\u95f4\u53ef\u4ee5\u6709\u4e0d\u540c\u7684\u5757\u5927\u5c0f\u3002 \u5f53\u7a0b\u5e8f\u9700\u8981\u7b2c k+1 k+1 \u5c42\u7684\u67d0\u4e2a\u6570\u636e\u5bf9\u8c61 d d \u65f6\uff0c\u5b83\u9996\u5148\u5728\u5f53\u524d\u5b58\u50a8\u5728\u7b2c k k \u5c42\u7684\u4e00\u4e2a\u5757\u4e2d\u67e5\u627e d d \u3002\u5982\u679c d d \u521a\u597d\u7f13\u5b58\u5728\u7b2c k k \u5c42\u4e2d\uff0c\u5373 \u7f13\u5b58\u547d\u4e2d (cache hit)\uff0c\u5426\u5219 \u7f13\u5b58\u4e0d\u547d\u4e2d (cache miss)\u3002 \u73b0\u4ee3\u7cfb\u7edf\u4e2d\u5230\u5904\u90fd\u4f7f\u7528\u4e86\u7f13\u5b58\u3002","title":"\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u7f13\u5b58"},{"location":"os/csapp/ch6/#4","text":"","title":"4 \u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668"},{"location":"os/csapp/ch6/#_5","text":"\u8003\u8651\u4e00\u4e2a\u8ba1\u7b97\u673a\u7cfb\u7edf\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5b58\u50a8\u5668\u5730\u5740\u6709 m m \u4f4d\uff0c\u5f62\u6210$M=2^m \u4e2a\u4e0d\u540c\u7684\u5730\u5740\u3002\u8fd9\u6837\u4e00\u4e2a\u673a\u5668\u7684\u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u6709 \u4e2a\u4e0d\u540c\u7684\u5730\u5740\u3002\u8fd9\u6837\u4e00\u4e2a\u673a\u5668\u7684\u9ad8\u901f\u7f13\u5b58\u88ab\u7ec4\u7ec7\u6210\u4e00\u4e2a\u6709 S=2^s $\u4e2a \u9ad8\u901f\u7f13\u5b58\u7ec4 (cache set)\u7684\u6570\u7ec4\u3002 \u6bcf\u4e2a\u7ec4\u5305\u542b E E \u4e2a \u9ad8\u901f\u7f13\u5b58\u884c (cache line)\u3002 \u6bcf\u4e2a\u884c\u662f\u7531\u4e00\u4e2a$B=2^b $\u5b57\u8282\u7684\u6570\u636e\u5757(block)\u7ec4\u6210\u7684\u3002 \u4e00\u4e2a \u6709\u6548\u4f4d (valid bit)\u6307\u660e\u8fd9\u4e2a\u884c\u662f\u5426\u5305\u542b\u6709\u610f\u4e49\u7684\u4fe1\u606f\u3002 \u6709 t=m-(b+s) t=m-(b+s) \u4e2a \u6807\u8bb0\u4f4d (tag bit)\u552f\u4e00\u5730\u6807\u8bc6\u5b58\u50a8\u5728\u8fd9\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u5757\u3002 \u9ad8\u901f\u7f13\u5b58\u7684\u5927\u5c0f C C \u662f\u6307\u6240\u6709\u5757\u7684\u5927\u5c0f\u7684\u548c\uff0c C=S\\times E\\times B C=S\\times E\\times B . \u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c( E=1 E=1 )\u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58 \uff1b \u6bcf\u4e2a\u7ec4\u6709\u591a\u884c( E 1 E>1 )\u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \uff1b \u4e00\u4e2a\u5305\u542b\u6240\u6709\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u7ec4( E=C/B E=C/B )\uff0c\u79f0\u4e3a \u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u3002","title":"\u901a\u7528\u7684\u9ad8\u901f\u7f13\u5b58\u5b58\u50a8\u5668\u7ec4\u7ec7\u7ed3\u6784"},{"location":"os/csapp/ch6/#_6","text":"\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c( E=1 E=1 )\u7684\u9ad8\u901f\u7f13\u5b58\u79f0\u4e3a \u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58 (Direct-Mapped Caches)\u3002 \u5047\u8bbe\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5b83\u6709\u4e00\u4e2aCPU\u3001\u4e00\u4e2a\u5bc4\u5b58\u5668\u6587\u4ef6\u3001\u4e00\u4e2aL1\u9ad8\u901f\u7f13\u5b58\u548c\u4e00\u4e2a\u4e3b\u5b58\u3002\u5f53CPU\u6267\u884c\u4e00\u6761\u8bfb\u5185\u5b58\u5b57 w w \u7684\u6307\u4ee4\uff0c\u5b83\u5411L1\u9ad8\u901f\u7f13\u5b58\u8bf7\u6c42\u8fd9\u4e2a\u5b57\u3002 \u5982\u679cL1\u9ad8\u901f\u7f13\u5b58\u6709 w w \u7684\u4e00\u4e2a\u7f13\u5b58\u7684\u526f\u672c\uff0c\u90a3\u4e48\u5c31\u5f97\u5230L1\u9ad8\u901f\u7f13\u5b58\u547d\u4e2d\u3002\u9ad8\u901f\u7f13\u5b58\u4f1a\u5f88\u5feb\u62bd\u53d6\u51fa w w \uff0c\u5e76\u5c06\u5b83\u8fd4\u56de\u7ed9CPU\u3002 \u5426\u5219\u5c31\u662f\u7f13\u5b58\u4e0d\u547d\u4e2d\uff0cCPU\u5fc5\u987b\u7b49\u5f85\u88ab\u8bf7\u6c42\u7684\u5757\u6700\u7ec8\u4ece\u5185\u5b58\u8fbe\u5230\u65f6\uff0cL1\u9ad8\u901f\u7f13\u5b58\u5c06\u8fd9\u4e2a\u5757\u623f\u5b50\u5b83\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u91cc\uff0c\u4ece\u88ab\u5b58\u50a8\u7684\u5757\u4e2d\u62bd\u53d6\u51fa\u5b57 w w \uff0c\u7136\u540e\u5c06\u5b83\u8fd4\u56de\u7ed9CPU\u3002 \u9ad8\u901f\u7f13\u5b58\u786e\u5b9a\u4e00\u4e2a\u8bf7\u6c42\u662f\u5426\u547d\u4e2d\uff0c\u7136\u540e\u62bd\u53d6\u51fa\u88ab\u8bf7\u6c42\u7684\u5b57\u7684\u8fc7\u7a0b\uff0c\u5206\u4e3a\u4e09\u6b65\uff1a \u7ec4\u9009\u62e9(set selection) \u884c\u5339\u914d(line matching) \u5b57\u62bd\u53d6(word extraction) 1.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u7ec4\u9009\u62e9 \u9ad8\u901f\u7f13\u5b58\u4ece w w \u7684\u5730\u5740\u4e2d\u95f4\u62bd\u53d6\u51fa s s \u4e2a \u7ec4\u7d22\u5f15 (Set index)\u4f4d\u3002 2.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u884c\u5339\u914d \u7531\u4e8e\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u53ea\u6709\u4e00\u884c\uff0c\u56e0\u6b64\u5f53\u4e14\u4ec5\u5f53\u8bbe\u7f6e\u4e86\u6709\u6548\u4f4d(valid bit)\uff0c\u800c\u4e14\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u7684\u6807\u8bb0(tag)\u4e0e w w \u7684\u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u65f6\uff0c\u8fd9\u4e00\u884c\u4e2d\u5305\u542b w w \u7684\u4e00\u4e2a\u526f\u672c\u3002 3.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u5b57\u9009\u62e9 \u4e00\u65e6\u547d\u4e2d\uff0c\u6211\u4eec\u77e5\u9053 w w \u5c31\u5728\u8fd9\u4e2a\u5757\u4e2d\u7684\u67d0\u4e2a\u5730\u65b9\u3002\u6700\u540e\u4e00\u6b65\u786e\u5b9a\u6240\u9700\u8981\u7684\u5b57\u5728\u5757\u4e2d\u662f\u4ece\u54ea\u91cc\u5f00\u59cb\u7684\u3002\u5757\u504f\u79fb(block offset)\u63d0\u4f9b\u4e86\u6240\u9700\u8981\u7684\u5b57\u7684\u7b2c\u4e00\u4e2a\u5b57\u8282\u7684\u504f\u79fb\u3002 4.\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u4e0d\u547d\u4e2d\u65f6\u7684\u884c\u66ff\u6362 \u5982\u679c\u7f13\u5b58\u4e0d\u547d\u4e2d\uff0c\u90a3\u4e48\u5b83\u9700\u8981\u4ece\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e0b\u4e00\u5c42\u53bb\u9664\u88ab\u8bf7\u6c42\u7684\u5757\uff0c\u7136\u540e\u5c06\u65b0\u7684\u5757\u5b58\u50a8\u5728\u7ec4\u7d22\u5f15\u4f4d\u6307\u793a\u7684\u7ec4\u4e2d\u7684\u4e00\u4e2a\u9ad8\u901f\u7f13\u5b58\u884c\u4e2d\u3002 \u5982\u679c\u7ec4\u4e2d\u90fd\u662f\u6709\u6548\u9ad8\u901f\u7f13\u5b58\u884c\uff0c\u5219\u5fc5\u987b\u8981\u9a71\u9664\u51fa\u4e00\u4e2a\u73b0\u5b58\u7684\u884c\u3002 \u5bf9\u4e8e\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u6765\u8bf4\uff0c\u6bcf\u4e2a\u7ec4\u53ea\u5305\u542b\u4e00\u884c\uff0c\u7528\u65b0\u53d6\u51fa\u7684\u884c\u66ff\u6362\u5f53\u524d\u7684\u884c\u3002 5.\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u51b2\u7a81\u4e0d\u547d\u4e2d \u5f53\u7a0b\u5e8f\u8bbf\u95ee\u5927\u5c0f\u4e3a2\u7684\u5e42\u7684\u6570\u7ec4\u65f6\uff0c\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u4f1a\u53d1\u751f \u51b2\u7a81\u4e0d\u547d\u4e2d (conflit miss)\u3002\u4f8b\u5982\uff0c\u8003\u8651\u4e00\u4e2a\u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u70b9\u79ef\u7684\u51fd\u6570\uff1a float dotprod ( float x [ 8 ], float y [ 8 ]) { float sum = 0.0 ; int i ; for ( i = 0 ; i 8 ; i ++ ) sum += x [ i ] * y [ i ]; return sum ; } \u5047\u8bbe\u9ad8\u901f\u6df7\u5b58\u7531\u4e24\u4e2a\u7ec4\u7ec4\u6210\uff0c\u6bcf\u4e2a\u7ec4\u5bb9\u7eb34\u4e2a\u6d6e\u70b9\u6570\u3002\u6d6e\u70b9\u6570\u662f4\u4e2a\u5b57\u8282\uff0c x x \u88ab\u52a0\u8f7d\u5230\u4ece\u5730\u57400\u5f00\u59cb\u768432\u5b57\u8282\u8fde\u7eed\u5185\u5b58\u4e2d\uff0c\u800c y y \u7d27\u8ddf\u5728 x x \u4e4b\u540e\uff0c\u4ece\u5730\u574032\u5f00\u59cb\u3002 \u6bcf\u4e2a x[i] x[i] \u548c y[i] y[i] \u4f1a\u6620\u5c04\u5230\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4\uff1a \u5728\u8fd0\u884c\u65f6\uff0c\u5faa\u73af\u7684\u7b2c\u4e00\u6b21\u8fed\u4ee3\u5f15\u7528 x[0] x[0] \uff0c\u7f13\u5b58\u4e0d\u547d\u4e2d\u4f1a\u5bfc\u81f4\u5305\u542b x[0]-x[3] x[0]-x[3] \u7684\u5757\u88ab\u52a0\u8f7d\u5230\u7ec40. \u63a5\u4e0b\u6765\uff0c\u5f15\u7528 y[0] y[0] \uff0c\u7f13\u5b58\u4e0d\u547d\u4e2d\u4f1a\u5bfc\u81f4\u5305\u542b y[0]-y[3] y[0]-y[3] \u7684\u5757\u88ab\u52a0\u8f7d\u5230\u7ec40\uff0c\u8986\u76d6\u524d\u4e00\u6b21\u5f15\u7528\u590d\u5236\u8fdb\u6765\u7684x\u7684\u503c\u3002 \u5728\u4e0b\u4e00\u6b21\u8fed\u4ee3\u4e2d\uff0c\u5bf9 x[1] x[1] \u7684\u5f15\u7528\u4e0d\u547d\u4e2d\uff0c\u5bfc\u81f4 x[0]-x[3] x[0]-x[3] \u7684\u5757\u88ab\u91cd\u65b0\u52a0\u8f7d\u5230\u7ec40\uff0c\u8986\u76d6\u6389 y[0]-y[3] y[0]-y[3] \u7684\u5757\u3002 \u8fd9\u79cd\u73b0\u8c61\uff0c \u9ad8\u901f\u7f13\u5b58\u53cd\u590d\u5730\u52a0\u8f7d\u548c\u9a71\u9010\u76f8\u540c\u7684\u9ad8\u901f\u7f13\u5b58\u7ec4 \uff0c\u53eb\u505a \u6296\u52a8 (thrashing)\u3002","title":"\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58"},{"location":"os/csapp/ch6/#_7","text":"\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 (set associative cache)\u7684\u6bcf\u4e2a\u7ec4\u90fd\u4fdd\u5b58\u6709\u591a\u4e8e\u4e00\u4e2a\u7684\u9ad8\u901f\u7f13\u5b58\u884c\u3002\u4e00\u4e2a 1 E C/B 1<E<C/B \u7684\u9ad8\u901f\u7f13\u5b58\u901a\u5e38\u79f0\u4e3a E\u8def\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 (E-way set associative cache)\u3002 1. \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u7ec4\u9009\u62e9 \u5b83\u7684\u7ec4\u9009\u62e9\u548c\u76f4\u63a5\u6620\u5c04\u9ad8\u901f\u7f13\u5b58\u7684\u7ec4\u9009\u62e9\u4e00\u6837\uff0c\u7ec4\u7d22\u5f15(set index)\u4f4d\u6807\u8bc6\u7ec4\u3002 2. \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u7684\u884c\u5339\u914d\u548c\u5b57\u9009\u62e9 \u5b83\u5fc5\u987b\u68c0\u67e5\u591a\u4e2a\u884c\u7684\u6807\u8bb0\u4f4d\u548c\u6709\u6548\u4f4d\uff0c\u4ee5\u786e\u5b9a\u6240\u8bf7\u6c42\u7684\u5b57\u662f\u5426\u5728\u7ec4\u4e2d\u3002 \u76f8\u8054\u5b58\u50a8\u5668 (associative memory)\u662f\u4e00\u4e2a(key, value)\u5bf9\u7684\u6570\u7ec4\uff0c\u4ee5key\u4e3a\u8f93\u5165\uff0c\u8fd4\u56de\u4e0e\u8f93\u5165\u7684key\u76f8\u5339\u914d\u7684(key, value\uff09\u5bf9\u4e2d\u7684value\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u7684\u6bcf\u4e2a\u7ec4\u770b\u6210\u4e00\u4e2a\u5c0f\u7684\u76f8\u8054\u5b58\u50a8\u5668\uff0ckey\u662f\u6807\u8bb0\u548c\u6709\u6548\u4f4d\uff0c\u800cvalue\u5c31\u662f\u5757\u7684\u5185\u5bb9\u3002 \u7ec4\u4e2d\u7684\u4efb\u4f55\u4e00\u884c\u90fd\u53ef\u4ee5\u5305\u542b\u4efb\u4f55\u6620\u5c04\u5230\u8fd9\u4e2a\u7ec4\u7684\u5185\u5b58\u5757\u3002\u6240\u4ee5\u9ad8\u901f\u7f13\u5b58\u5fc5\u987b\u641c\u7d22\u7ec4\u4e2d\u7684\u6bcf\u4e00\u884c\uff0c\u5bfb\u627e\u4e00\u4e2a\u6709\u6548\u7684\u884c\uff0c\u5176\u6807\u8bb0\u4e0e\u5730\u5740\u4e2d\u7684\u6807\u8bb0\u76f8\u5339\u914d\u3002\u5982\u679c\u627e\u5230\u4e86\u8fd9\u6837\u4e00\u884c\uff0c\u90a3\u4e48\u5757\u504f\u79fb\u5c31\u4ece\u8fd9\u4e2a\u5757\u4e2d\u9009\u62e9\u4e00\u4e2a\u5b57\u3002 3. \u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u4e2d\u4e0d\u547d\u4e2d\u65f6\u7684\u884c\u66ff\u6362 \u5982\u679cCPU\u8bf7\u6c42\u7684\u5b57\u4e0d\u5728\u7ec4\u7684\u4efb\u4f55\u4e00\u884c\u4e2d\uff0c\u90a3\u4e48\u5c31\u662f\u7f13\u5b58\u4e0d\u547d\u4e2d\uff0c\u9ad8\u901f\u7f13\u5b58\u5fc5\u987b\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u5305\u542b\u8fd9\u4e2a\u5b57\u7684\u5757\uff0c\u7136\u540e\u8fdb\u884c\u66ff\u6362\u3002\u8be5\u66ff\u6362\u54ea\u4e2a\u884c\u5462\uff1f \u5982\u679c\u7ec4\u4e2d\u6709\u4e00\u4e2a\u7a7a\u884c\uff0c\u90a3\u4e48\u5b83\u5c31\u662f\u4e2a\u5f88\u597d\u7684\u5019\u9009\u3002 \u5982\u679c\u7ec4\u4e2d\u6ca1\u6709\u7a7a\u884c\uff0c\u5fc5\u987b\u4ece\u4e2d\u9009\u62e9\u4e00\u4e2a\u975e\u7a7a\u7684\u884c\u3002\u6709\u5982\u4e0b\u51e0\u4e2a\u66ff\u6362\u7b56\u7565\uff1a \u6700\u4e0d\u5e38\u4f7f\u7528 (Least-Frequently-Used, LFU)\u7b56\u7565\u4f1a\u66ff\u6362\u5728\u8fc7\u53bb\u67d0\u4e2a\u65f6\u95f4\u7a97\u53e3\u5185\u5f15\u7528\u6b21\u6570\u6700\u5c11\u7684\u90a3\u4e00\u884c\u3002 \u6700\u8fd1\u6700\u5c11\u4f7f\u7528 (Least-Recently-Used, LRU)\u7b56\u7565\u4f1a\u66ff\u6362\u6700\u540e\u4e00\u4e2a\u8bbf\u95ee\u65f6\u95f4\u6700\u4e45\u8fdc\u7684\u90a3\u4e00\u884c\u3002","title":"\u7ec4\u76f8\u8054\u9ad8\u901f\u7f13\u5b58"},{"location":"os/csapp/ch6/#_8","text":"\u4e00\u4e2a\u5305\u542b\u6240\u6709\u9ad8\u901f\u7f13\u5b58\u884c\u7684\u7ec4( E=C/B E=C/B )\uff0c\u79f0\u4e3a \u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58 \u3002 \u56e0\u4e3a\u9ad8\u901f\u7f13\u5b58\u7535\u8def\u5fc5\u987b\u5e76\u884c\u5730\u641c\u7d22\u8bb8\u591a\u76f8\u5339\u914d\u7684\u6807\u8bb0\uff0c\u6784\u9020\u4e00\u4e2a\u53c8\u5927\u53c8\u5feb\u7684\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u5f88\u56f0\u96be\uff0c\u5e76\u4e14\u5f88\u6602\u8d35\u3002\u56e0\u6b64\uff0c\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58\u53ea\u9002\u5408\u505a\u5c0f\u7684\u9ad8\u901f\u7f13\u5b58(\u4f8b\u5982MMC\u4e2d\u7684TLB)\u3002","title":"\u5168\u76f8\u8054\u9ad8\u901f\u7f13\u5b58"},{"location":"os/csapp/ch6/#5","text":"","title":"5 \u7f16\u5199\u9ad8\u901f\u7f13\u5b58\u53cb\u597d\u7684\u4ee3\u7801"},{"location":"os/csapp/ch6/#6","text":"","title":"6 \u9ad8\u901f\u7f13\u5b58\u5bf9\u7a0b\u5e8f\u6027\u80fd\u7684\u5f71\u54cd"},{"location":"os/csapp/ch6/#_9","text":"\u4e00\u4e2a\u7a0b\u5e8f\u4ece\u5b58\u50a8\u7cfb\u7edf\u4e2d\u8bfb\u6570\u636e\u7684\u901f\u7387\u79f0\u4e3a \u8bfb\u541e\u5410\u91cf (read throughput)\u3002 \u5b58\u50a8\u5668\u5c71 (memory mountain)\u662f\u4e00\u4e2a\u8bfb\u541e\u5410\u91cf\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u5c40\u90e8\u6027\u7684\u4e8c\u7ef4\u51fd\u6570\u3002 \u901a\u8fc7\u4e0d\u540c\u7684size(\u5bf9\u5e94\u65f6\u95f4\u5c40\u90e8\u6027)\u548cstride(\u5bf9\u5e94\u7a7a\u95f4\u5c40\u90e8\u6027)\u7684\u503c\u4ea7\u751f\u5b58\u50a8\u5668\u5c71\u3002 size\u503c\u8d8a\u5c0f\uff0c\u5f97\u5230\u7684\u5de5\u4f5c\u96c6\u8d8a\u5c0f\uff0c\u65f6\u95f4\u5c40\u90e8\u6027\u8d8a\u597d\u3002 stride\u503c\u8d8a\u5c0f\uff0c\u7a7a\u95f4\u5c40\u90e8\u6027\u8d8a\u597d\u3002 Intel Core i7\u7684\u5b58\u50a8\u5668\u5c71\uff1a Core i7\u7684\u5b58\u50a8\u5668\u5c71\u5c55\u73b0\u4e86\u4e00\u4e2a\u5f88\u4e30\u5bcc\u7684\u7ed3\u6784\uff1a \u5782\u76f4\u4e8esize\u8f74\u7684\u662f\u56db\u6761\u5c71\u810a\uff0c\u5206\u522b\u5bf9\u5e94\u4e8e\u5b8c\u5168\u5728L1\u9ad8\u901f\u7f13\u5b58\u3001L2\u9ad8\u901f\u7f13\u5b58\u3001L3\u9ad8\u901f\u7f13\u5b58\u548c\u4e3b\u5b58\u5185\u7684\u65f6\u95f4\u5c40\u90e8\u6027\u533a\u57df\u3002 \u5728L2\u3001L3\u548c\u4e3b\u5b58\u5c71\u810a\u4e0a\uff0c\u968f\u7740\u6b65\u957f\u7684\u589e\u52a0\uff0c\u6709\u4e00\u4e2a\u7a7a\u95f4\u5c40\u90e8\u6027\u7684\u659c\u5761\uff0c\u7a7a\u95f4\u5c40\u90e8\u6027\u4e0b\u964d\u3002","title":"\u5b58\u50a8\u5668\u5c71"},{"location":"os/csapp/ch7/","text":"Chapter 7 \u94fe\u63a5 \u94fe\u63a5 (Linking)\u662f\u5c06\u5404\u79cd \u4ee3\u7801 \u548c \u6570\u636e\u7247\u6bb5 \u6536\u96c6\u5e76\u7ec4\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u4e00\u6587\u4ef6\u7684\u8fc7\u7a0b\u3002\u94fe\u63a5\u53ef\u4ee5\u5728\u7f16\u8bd1\u3001\u52a0\u8f7d\u3001\u8fd0\u884c\u65f6\u6267\u884c\u3002\u5728\u73b0\u4ee3\u7cfb\u7edf\u4e2d\uff0c\u94fe\u63a5\u7531 \u94fe\u63a5\u5668 (Linker)\u81ea\u52a8\u6267\u884c\u3002 \u94fe\u63a5\u5668\u4f7f\u5f97 \u5206\u79bb\u7f16\u8bd1 (separate compilation)\u6210\u4e3a\u53ef\u80fd\uff1a \u53ef\u4ee5\u5c06\u6e90\u6587\u4ef6\u5206\u89e3\u4e3a\u66f4\u5c0f\u3001\u66f4\u597d\u7ba1\u7406\u7684\u6a21\u5757\uff0c\u53ef\u4ee5\u72ec\u7acb\u5730\u4fee\u6539\u548c\u7f16\u8bd1\u8fd9\u4e9b\u6a21\u5757 \u4fee\u6539\u4e00\u4e2a\u6a21\u5757\u540e\uff0c\u53ea\u9700\u91cd\u65b0\u7f16\u8bd1\u5b83\uff0c\u5e76\u91cd\u65b0\u94fe\u63a5\uff0c\u4e0d\u5fc5\u7f16\u8bd1\u5176\u4ed6\u6587\u4ef6 1 \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f ( compiler driver )\uff0c\u4ee3\u8868\u7528\u6237\u5728\u9700\u8981\u65f6\u8c03\u7528\u9884\u5904\u7406\u5668(cpp)\u3001\u7f16\u8bd1\u5668(ccl)\u3001\u6c47\u7f16\u5668(as)\u548c\u94fe\u63a5\u5668(ld)\u3002\u5178\u578b\u7684\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5305\u62ecGNU GCC, Clang\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u7b80\u5355\u6253\u5370hello\u7684 hello.c \u7a0b\u5e8f\uff0c\u7ecf\u8fc7\u4e0b\u9762\u56db\u4e2a\u9636\u6bb5\uff0c\u751f\u6210\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\uff1a C //file: hello.c #include stdio.h int main () { int i ; printf ( Hello World ); } Bash linux cpp [ other arguments ] hello.c hello.i // C\u9884\u5904\u7406\u5668cpp\uff0c\u5c06\u6e90\u7a0b\u5e8f\u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u7801\u7684\u4e2d\u95f4\u6587\u4ef6 linux cc1 hello.i -Og [ other arguments ] -o hello.s //C\u7f16\u8bd1\u5668cc1, \u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u6c47\u7f16\u8bed\u8a00\u6587\u4ef6 linux as [ other arguments ] -o hello.o hello.s //\u6c47\u7f16\u5668as, \u7ffb\u8bd1\u6210\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 linux ld -o hello [ system object files and args ] hello.o //\u94fe\u63a5\u5668ld\uff0c\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 * linux ./hello //\u8c03\u7528\u52a0\u8f7d\u5668 2 \u9759\u6001\u94fe\u63a5 \u9759\u6001\u94fe\u63a5\u5668\u6709\u4e24\u4e2a\u4e3b\u8981\u4efb\u52a1\uff1a \u7b26\u53f7\u89e3\u6790 (symbol resolution): \u5c06\u6bcf\u4e2a\u7b26\u53f7 \u5f15\u7528 \u6b63\u597d\u548c\u4e00\u4e2a\u7b26\u53f7 \u5b9a\u4e49 \u5173\u8054\u8d77\u6765\u3002 \u91cd\u5b9a\u4f4d (relocation): \u628a\u6bcf\u4e2a\u7b26\u53f7\u5b9a\u4e49\u4e0e\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5173\u8054\u8d77\u6765\uff0c\u5e76\u4fee\u6539\u6240\u6709\u5bf9\u8fd9\u4e9b\u7b26\u53f7\u7684\u5f15\u7528\uff0c\u4f7f\u5f97\u5b83\u4eec\u6307\u5411\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002 3 \u76ee\u6807\u6587\u4ef6 \u76ee\u6807\u6587\u4ef6\u6709\u4e09\u79cd\u683c\u5f0f\uff1a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 ( .o )\uff0c \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 ( .out )\uff0c \u5171\u4eab\u76ee\u6807\u6587\u4ef6 ( .so ) \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 (.o\u6587\u4ef6)\u3002\u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5176\u5f62\u5f0f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u4e0e\u5176\u4ed6\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u8d77\u6765\uff0c\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u3002 \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 (a.out\u6587\u4ef6)\u3002\u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5176\u5f62\u5f0f\u53ef\u4ee5\u88ab\u76f4\u63a5\u590d\u5236\u5230\u5185\u5b58\u5e76\u6267\u884c\u3002 \u5171\u4eab\u76ee\u6807\u6587\u4ef6 (.so\u6587\u4ef6)\u3002\u5728\u52a0\u8f7d\u6216\u8005\u8fd0\u884c\u65f6\u88ab\u52a8\u6001\u5730\u52a0\u8f7d\u8fdb\u5185\u5b58\u5e76\u94fe\u63a5 \u5404\u4e2a\u7cfb\u7edf\u7684\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u4e0d\u540c\uff0cWindows\u4f7f\u7528 \u53ef\u79fb\u690d\u53ef\u6267\u884c (Portable Executable, PE )\u683c\u5f0f\u3002\u73b0\u4ee3x86-64\u7cfb\u7edf\u4f7f\u7528 \u53ef\u6267\u884c\u53ef\u94fe\u63a5\u683c\u5f0f (Executable and Linkable Format, ELF )\u3002 4 \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 \u4ee5\u53ef\u6267\u884c\u53ef\u94fe\u63a5(ELF)\u683c\u5f0f\u4e3a\u4f8b\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u8282\uff1a ELF\u5934\u548c\u8282\u5934\u90e8\u8868 .text \u5df2\u7f16\u8bd1\u7a0b\u5e8f\u7684\u673a\u5668\u4ee3\u7801 .rodata \u53ea\u8bfb\u6570\u636e .data \u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001C\u53d8\u91cf .bss \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001C\u53d8\u91cf .symtab \u4e00\u4e2a\u7b26\u53f7\u8868 .rel.text \u4e00\u4e2a.text\u8282\u4e2d\u4f4d\u7f6e\u7684\u5217\u8868 .rel.data \u91cd\u5b9a\u4f4d\u4fe1\u606f .debug \u8c03\u8bd5\u7b26\u53f7\u8868 .line \u539f\u59cb\u7a0b\u5e8f\u884c\u53f7\u548c\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u6620\u5c04 .strtab \u5b57\u7b26\u4e32\u8868 \u5229\u7528 READELF \u7a0b\u5e8f\u53ef\u4ee5\u663e\u793a\u7a0b\u5e8f hello.c \u751f\u6210\u7684\u53ef\u6267\u884c\u53ef\u94fe\u63a5\u6587\u4ef6\u7684\u4fe1\u606f\uff1a gcc hello.c -c readelf -a hello.o ### UNIX/LINUX greadelf -a hello.o ### MAC, after brew install binutils ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2 s complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: REL (Relocatable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x0 Start of program headers: 0 (bytes into file) Start of section headers: 304 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 0 (bytes) Number of program headers: 0 Size of section headers: 64 (bytes) Number of section headers: 13 Section header string table index: 10 Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align [ 0] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1] .text PROGBITS 0000000000000000 00000040 0000000000000015 0000000000000000 AX 0 0 1 [ 2] .rela.text RELA 0000000000000000 00000590 0000000000000030 0000000000000018 11 1 8 [ 3] .data PROGBITS 0000000000000000 00000055 0000000000000000 0000000000000000 WA 0 0 1 [ 4] .bss NOBITS 0000000000000000 00000055 0000000000000000 0000000000000000 WA 0 0 1 [ 5] .rodata PROGBITS 0000000000000000 00000055 000000000000000c 0000000000000000 A 0 0 1 [ 6] .comment PROGBITS 0000000000000000 00000061 000000000000002c 0000000000000001 MS 0 0 1 [ 7] .note.GNU-stack PROGBITS 0000000000000000 0000008d 0000000000000000 0000000000000000 0 0 1 [ 8] .eh_frame PROGBITS 0000000000000000 00000090 0000000000000038 0000000000000000 A 0 0 8 [ 9] .rela.eh_frame RELA 0000000000000000 000005c0 0000000000000018 0000000000000018 11 8 8 [10] .shstrtab STRTAB 0000000000000000 000000c8 0000000000000061 0000000000000000 0 0 1 [11] .symtab SYMTAB 0000000000000000 00000470 0000000000000108 0000000000000018 12 9 8 [12] .strtab STRTAB 0000000000000000 00000578 0000000000000015 0000000000000000 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), l (large) I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown) O (extra OS processing required) o (OS specific), p (processor specific) There are no section groups in this file. There are no program headers in this file. Relocation section .rela.text at offset 0x590 contains 2 entries: Offset Info Type Sym. Value Sym. Name + Addend 000000000005 00050000000a R_X86_64_32 0000000000000000 .rodata + 0 00000000000f 000a00000002 R_X86_64_PC32 0000000000000000 printf - 4 Relocation section .rela.eh_frame at offset 0x5c0 contains 1 entries: Offset Info Type Sym. Value Sym. Name + Addend 000000000020 000200000002 R_X86_64_PC32 0000000000000000 .text + 0 The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported. Symbol table .symtab contains 11 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS hello.c 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 3: 0000000000000000 0 SECTION LOCAL DEFAULT 3 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 6: 0000000000000000 0 SECTION LOCAL DEFAULT 7 7: 0000000000000000 0 SECTION LOCAL DEFAULT 8 8: 0000000000000000 0 SECTION LOCAL DEFAULT 6 9: 0000000000000000 21 FUNC GLOBAL DEFAULT 1 main 10: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND printf No version information found in this file. 5 \u7b26\u53f7\u548c\u7b26\u53f7\u8868 .symtab \u4e2d\u7684 \u7b26\u53f7\u8868 \uff0c\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u7b26\u53f7(\u4e0d\u5305\u62ec\u672c\u5730\u975e\u9759\u6001\u53d8\u91cf)\uff1a \u7531\u6a21\u5757 m m \u5b9a\u4e49\u5e76\u80fd\u88ab\u5176\u4ed6\u6a21\u5757\u5f15\u7528\u7684 \u5168\u5c40\u7b26\u53f7 \u3002 \u975e\u9759\u6001C\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf \u7531\u5176\u4ed6\u6a21\u5757\u5b9a\u4e49\u5e76\u88ab\u6a21\u5757 m m \u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7\u3002 \u5bf9\u5e94\u4e8e\u5176\u4ed6\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u975e\u9759\u6001C\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf \u53ea\u88ab\u6a21\u5757 m m \u5b9a\u4e49\u548c\u5f15\u7528\u7684\u5c40\u90e8\u7b26\u53f7\u3002 \u9759\u6001C\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf 6 \u7b26\u53f7\u89e3\u6790 \u7b26\u53f7\u89e3\u6790 \u662f\u5c06\u6bcf\u4e2a \u7b26\u53f7\u5f15\u7528 \u548c\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 \u7b26\u53f7\u5b9a\u4e49 \u5173\u8054\u8d77\u6765\u3002\u94fe\u63a5\u5668\u7684\u8f93\u5165\u662f\u4e00\u7ec4\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6(\u6a21\u5757)\uff0c\u6709\u4e9b\u662f\u5c40\u90e8\u7684( \u5c40\u90e8\u7b26\u53f7 \uff0c\u53ea\u5bf9\u5b9a\u4e49\u8be5\u7b26\u53f7\u7684\u6a21\u5757\u53ef\u89c1)\uff0c\u6709\u4e9b\u662f\u5168\u5c40\u7684( \u5168\u5c40\u7b26\u53f7 \uff0c\u5bf9\u5176\u4ed6\u6a21\u5757\u53ef\u89c1)\u3002 \u5c40\u90e8\u7b26\u53f7 \uff1a\u6bcf\u4e2a\u6a21\u5757\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u7b26\u53f7\u6709\u4e00\u4e2a\u5b9a\u4e49 \u5168\u5c40\u7b26\u53f7 \uff1a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u91cc\u7684\u5168\u5c40\u7b26\u53f7\u662f\u533a\u5206 \u5f3a \u548c \u5f31 \u7684\uff0c\u94fe\u63a5\u5668\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u6765\u5904\u7406\u591a\u91cd\u5b9a\u4e49\u7684\u7b26\u53f7\u540d\uff1a \u89c4\u52191: \u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u540c\u540d\u7684\u5f3a\u7b26\u53f7 \u89c4\u52192: \u5982\u679c\u6709\u4e00\u4e2a\u5f3a\u7b26\u53f7\u548c\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d\uff0c\u90a3\u4e48\u9009\u62e9\u5f3a\u7b26\u53f7 \u89c4\u52193\uff1a\u5982\u679c\u6709\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d\uff0c\u90a3\u4e48\u4efb\u9009\u4e00\u4e2a 7 \u91cd\u5b9a\u4f4d \u91cd\u5b9a\u4f4d\u5408\u5e76\u8f93\u5165\u6a21\u5757\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u7b26\u53f7\u5206\u914d\u8fd0\u884c\u65f6\u5730\u5740\uff1a \u91cd\u5b9a\u4f4d\u8282\u548c\u7b26\u53f7\u5b9a\u4e49\uff1a\u5c06\u6240\u6709\u76f8\u540c\u7c7b\u578b\u7684\u8282\u5408\u5e76\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u65b0\u7684\u805a\u5408\u8282\uff0c\u5e76\u5c06\u8fd0\u884c\u65f6\u5185\u5b58\u5730\u5740\u8d4b\u7ed9\u65b0\u7684\u805a\u5408\u8282\u548c\u6bcf\u4e2a\u7b26\u53f7\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u6765\u81ea\u6240\u6709\u8f93\u5165\u6a21\u5757\u7684 .data \u8282\u88ab\u5168\u90e8\u5408\u5e76\u6210\u8f93\u51fa\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .data \u8282 \u91cd\u5b9a\u4f4d\u8282\u4e2d\u7684\u7b26\u53f7\u5f15\u7528\uff1a\u5c06\u8fd0\u884c\u65f6\u5730\u5740\u4ed8\u7ed9\u6bcf\u4e2a\u7b26\u53f7\u5f15\u7528 8 \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 \u4e0b\u56fe\u6982\u62ec\u4e86\u4e00\u4e2a\u5178\u578b\u7684ELF\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7ed9\u7c7b\u4fe1\u606f\u3002 9 \u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 \u5f53\u5728shell\u4e2d\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u9996\u5148\u901a\u8fc7\u8c03\u7528 \u52a0\u8f7d\u5668 ( loader )\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u6765\u8fd0\u884c\u5b83\uff0c\u52a0\u8f7d\u5668\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u548c\u6570\u636e\u590d\u5236\u5230\u4e3b\u5b58\uff0c\u8df3\u8f6c\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u6307\u4ee4(\u5165\u53e3\u70b9\uff0c _start_ \u51fd\u6570\u7684\u5730\u5740)\u8fd0\u884c\u8be5\u7a0b\u5e8f\u3002 \u5728Unix\u7cfb\u7edf\u4e2d\uff0c\u52a0\u8f7d\u5668\u662f\u7cfb\u7edf\u8c03\u7528(system call) execve() \u7684\u56de\u8c03(call back)\uff0c\u5176\u4efb\u52a1\u5305\u62ec\uff1a \u786e\u8ba4(\u6743\u9650\uff0c\u5185\u5b58\u8981\u6c42\u7b49) \u590d\u5236\u7a0b\u5e8f\u5230\u4e3b\u5b58 \u590d\u5236\u547d\u4ee4\u884c\u53c2\u6570\u5230\u6808 \u521d\u59cb\u5316\u5bc4\u5b58\u5668(\u4f8b\u5982\u6808\u9488) \u8df3\u5230\u5165\u53e3\u70b9( _start_ ) 10 \u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93 \u9759\u6001\u5e93\u67092\u5927\u7f3a\u9677\uff1a \u9759\u6001\u5e93\u66f4\u65b0\u65f6\uff0c\u9700\u8981\u663e\u793a\u5730\u5c06\u7a0b\u5e8f\u4e0e\u66f4\u65b0\u4e86\u7684\u5e93\u91cd\u65b0\u94fe\u63a5 \u6d6a\u8d39\u5185\u5b58\u8d44\u6e90\uff1a\u51e0\u4e4e\u6bcf\u4e2aC\u7a0b\u5e8f\u90fd\u4f7f\u7528\u6807\u51c6I/O\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4ee3\u7801\u4f1a\u88ab\u590d\u5236\u5230\u6bcf\u4e2a\u8fd0\u884c\u8fdb\u7a0b\u7684\u6587\u672c\u6bb5\u4e2d \u5171\u4eab\u5e93(shared library)\u662f\u81f4\u529b\u4e8e\u89e3\u51b3\u9759\u6001\u5e93\u7f3a\u9677\u7684\u4ea7\u7269\u3002 \u52a8\u6001\u94fe\u63a5 (dynamic linking)\uff1a\u5171\u4eab\u5e93\u5728\u8fd0\u884c\u6216\u52a0\u8f7d\u65f6\uff0c\u53ef\u4ee5\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u5730\u5740\uff0c\u5e76\u548c\u4e00\u4e2a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u94fe\u63a5\u8d77\u6765\u3002 \u7531 \u52a8\u6001\u94fe\u63a5\u5668 (dynamic linker)\u6267\u884c\uff1b \u5728linux\u7cfb\u7edf\u4e2d\u5e38\u7528 .so \u540e\u7f00\u8868\u793a\u3002 14 \u5904\u7406\u76ee\u6807\u6587\u4ef6\u7684\u5de5\u5177 Unix\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u547d\u4ee4\u5e2e\u52a9\u7406\u89e3\u548c\u5904\u7406\u76ee\u6807\u6587\u4ef6\u3002\u8fd9\u4e9b\u5de5\u5177\u5305\u62ec\uff1a ar \uff1a\u521b\u5efa\u9759\u6001\u5e93\uff0c\u63d2\u5165\u3001\u5220\u9664\u3001\u5217\u51fa\u548c\u63d0\u53d6\u6210\u5458\uff1b STRINGS \uff1a\u5217\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u6240\u6709\u53ef\u4ee5\u6253\u5370\u7684\u5b57\u7b26\u4e32\uff1b STRIP \uff1a\u4ece\u76ee\u6807\u6587\u4ef6\u4e2d\u5220\u9664\u7b26\u53f7\u8868\u4fe1\u606f\uff1b NM \uff1a\u5217\u51fa\u76ee\u6807\u6587\u4ef6\u7b26\u53f7\u8868\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\uff1b SIZE \uff1a\u5217\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u8282\u7684\u540d\u5b57\u548c\u5927\u5c0f\uff1b READELF \uff1a\u663e\u793a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u7ed3\u6784\uff0c\u5305\u62ecELF \u5934\u4e2d\u7f16\u7801\u7684\u6240\u6709\u4fe1\u606f\u3002 OBJDUMP \uff1a\u663e\u793a\u76ee\u6807\u6587\u4ef6\u7684\u6240\u6709\u4fe1\u606f\uff0c\u6700\u6709\u7528\u7684\u529f\u80fd\u662f\u53cd\u6c47\u7f16.text\u8282\u4e2d\u7684\u4e8c\u8fdb\u5236\u6307\u4ee4\u3002 LDD \uff1a\u5217\u51fa\u53ef\u6267\u884c\u6587\u4ef6\u5728\u8fd0\u884c\u65f6\u9700\u8981\u7684\u5171\u4eab\u5e93\u3002","title":"Chapter 7: \u94fe\u63a5"},{"location":"os/csapp/ch7/#chapter-7","text":"\u94fe\u63a5 (Linking)\u662f\u5c06\u5404\u79cd \u4ee3\u7801 \u548c \u6570\u636e\u7247\u6bb5 \u6536\u96c6\u5e76\u7ec4\u5408\u6210\u4e3a\u4e00\u4e2a\u5355\u4e00\u6587\u4ef6\u7684\u8fc7\u7a0b\u3002\u94fe\u63a5\u53ef\u4ee5\u5728\u7f16\u8bd1\u3001\u52a0\u8f7d\u3001\u8fd0\u884c\u65f6\u6267\u884c\u3002\u5728\u73b0\u4ee3\u7cfb\u7edf\u4e2d\uff0c\u94fe\u63a5\u7531 \u94fe\u63a5\u5668 (Linker)\u81ea\u52a8\u6267\u884c\u3002 \u94fe\u63a5\u5668\u4f7f\u5f97 \u5206\u79bb\u7f16\u8bd1 (separate compilation)\u6210\u4e3a\u53ef\u80fd\uff1a \u53ef\u4ee5\u5c06\u6e90\u6587\u4ef6\u5206\u89e3\u4e3a\u66f4\u5c0f\u3001\u66f4\u597d\u7ba1\u7406\u7684\u6a21\u5757\uff0c\u53ef\u4ee5\u72ec\u7acb\u5730\u4fee\u6539\u548c\u7f16\u8bd1\u8fd9\u4e9b\u6a21\u5757 \u4fee\u6539\u4e00\u4e2a\u6a21\u5757\u540e\uff0c\u53ea\u9700\u91cd\u65b0\u7f16\u8bd1\u5b83\uff0c\u5e76\u91cd\u65b0\u94fe\u63a5\uff0c\u4e0d\u5fc5\u7f16\u8bd1\u5176\u4ed6\u6587\u4ef6","title":"Chapter 7 \u94fe\u63a5"},{"location":"os/csapp/ch7/#1","text":"\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f ( compiler driver )\uff0c\u4ee3\u8868\u7528\u6237\u5728\u9700\u8981\u65f6\u8c03\u7528\u9884\u5904\u7406\u5668(cpp)\u3001\u7f16\u8bd1\u5668(ccl)\u3001\u6c47\u7f16\u5668(as)\u548c\u94fe\u63a5\u5668(ld)\u3002\u5178\u578b\u7684\u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f\uff0c\u5305\u62ecGNU GCC, Clang\u3002 \u4f8b\u5982\uff0c\u4e00\u4e2a\u7b80\u5355\u6253\u5370hello\u7684 hello.c \u7a0b\u5e8f\uff0c\u7ecf\u8fc7\u4e0b\u9762\u56db\u4e2a\u9636\u6bb5\uff0c\u751f\u6210\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\uff1a C //file: hello.c #include stdio.h int main () { int i ; printf ( Hello World ); } Bash linux cpp [ other arguments ] hello.c hello.i // C\u9884\u5904\u7406\u5668cpp\uff0c\u5c06\u6e90\u7a0b\u5e8f\u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u7801\u7684\u4e2d\u95f4\u6587\u4ef6 linux cc1 hello.i -Og [ other arguments ] -o hello.s //C\u7f16\u8bd1\u5668cc1, \u7ffb\u8bd1\u6210\u4e00\u4e2aASCII\u6c47\u7f16\u8bed\u8a00\u6587\u4ef6 linux as [ other arguments ] -o hello.o hello.s //\u6c47\u7f16\u5668as, \u7ffb\u8bd1\u6210\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 linux ld -o hello [ system object files and args ] hello.o //\u94fe\u63a5\u5668ld\uff0c\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6 * linux ./hello //\u8c03\u7528\u52a0\u8f7d\u5668","title":"1 \u7f16\u8bd1\u5668\u9a71\u52a8\u7a0b\u5e8f"},{"location":"os/csapp/ch7/#2","text":"\u9759\u6001\u94fe\u63a5\u5668\u6709\u4e24\u4e2a\u4e3b\u8981\u4efb\u52a1\uff1a \u7b26\u53f7\u89e3\u6790 (symbol resolution): \u5c06\u6bcf\u4e2a\u7b26\u53f7 \u5f15\u7528 \u6b63\u597d\u548c\u4e00\u4e2a\u7b26\u53f7 \u5b9a\u4e49 \u5173\u8054\u8d77\u6765\u3002 \u91cd\u5b9a\u4f4d (relocation): \u628a\u6bcf\u4e2a\u7b26\u53f7\u5b9a\u4e49\u4e0e\u4e00\u4e2a\u5185\u5b58\u4f4d\u7f6e\u5173\u8054\u8d77\u6765\uff0c\u5e76\u4fee\u6539\u6240\u6709\u5bf9\u8fd9\u4e9b\u7b26\u53f7\u7684\u5f15\u7528\uff0c\u4f7f\u5f97\u5b83\u4eec\u6307\u5411\u8fd9\u4e2a\u5185\u5b58\u4f4d\u7f6e\u3002","title":"2 \u9759\u6001\u94fe\u63a5"},{"location":"os/csapp/ch7/#3","text":"\u76ee\u6807\u6587\u4ef6\u6709\u4e09\u79cd\u683c\u5f0f\uff1a \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 ( .o )\uff0c \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 ( .out )\uff0c \u5171\u4eab\u76ee\u6807\u6587\u4ef6 ( .so ) \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6 (.o\u6587\u4ef6)\u3002\u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5176\u5f62\u5f0f\u53ef\u4ee5\u5728\u7f16\u8bd1\u65f6\u4e0e\u5176\u4ed6\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5408\u5e76\u8d77\u6765\uff0c\u521b\u5efa\u4e00\u4e2a\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u3002 \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6 (a.out\u6587\u4ef6)\u3002\u5305\u542b\u4e8c\u8fdb\u5236\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5176\u5f62\u5f0f\u53ef\u4ee5\u88ab\u76f4\u63a5\u590d\u5236\u5230\u5185\u5b58\u5e76\u6267\u884c\u3002 \u5171\u4eab\u76ee\u6807\u6587\u4ef6 (.so\u6587\u4ef6)\u3002\u5728\u52a0\u8f7d\u6216\u8005\u8fd0\u884c\u65f6\u88ab\u52a8\u6001\u5730\u52a0\u8f7d\u8fdb\u5185\u5b58\u5e76\u94fe\u63a5 \u5404\u4e2a\u7cfb\u7edf\u7684\u76ee\u6807\u6587\u4ef6\u683c\u5f0f\u4e0d\u540c\uff0cWindows\u4f7f\u7528 \u53ef\u79fb\u690d\u53ef\u6267\u884c (Portable Executable, PE )\u683c\u5f0f\u3002\u73b0\u4ee3x86-64\u7cfb\u7edf\u4f7f\u7528 \u53ef\u6267\u884c\u53ef\u94fe\u63a5\u683c\u5f0f (Executable and Linkable Format, ELF )\u3002","title":"3 \u76ee\u6807\u6587\u4ef6"},{"location":"os/csapp/ch7/#4","text":"\u4ee5\u53ef\u6267\u884c\u53ef\u94fe\u63a5(ELF)\u683c\u5f0f\u4e3a\u4f8b\uff0c\u4e00\u4e2a\u5178\u578b\u7684\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u8282\uff1a ELF\u5934\u548c\u8282\u5934\u90e8\u8868 .text \u5df2\u7f16\u8bd1\u7a0b\u5e8f\u7684\u673a\u5668\u4ee3\u7801 .rodata \u53ea\u8bfb\u6570\u636e .data \u5df2\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001C\u53d8\u91cf .bss \u672a\u521d\u59cb\u5316\u7684\u5168\u5c40\u548c\u9759\u6001C\u53d8\u91cf .symtab \u4e00\u4e2a\u7b26\u53f7\u8868 .rel.text \u4e00\u4e2a.text\u8282\u4e2d\u4f4d\u7f6e\u7684\u5217\u8868 .rel.data \u91cd\u5b9a\u4f4d\u4fe1\u606f .debug \u8c03\u8bd5\u7b26\u53f7\u8868 .line \u539f\u59cb\u7a0b\u5e8f\u884c\u53f7\u548c\u673a\u5668\u6307\u4ee4\u4e4b\u95f4\u7684\u6620\u5c04 .strtab \u5b57\u7b26\u4e32\u8868 \u5229\u7528 READELF \u7a0b\u5e8f\u53ef\u4ee5\u663e\u793a\u7a0b\u5e8f hello.c \u751f\u6210\u7684\u53ef\u6267\u884c\u53ef\u94fe\u63a5\u6587\u4ef6\u7684\u4fe1\u606f\uff1a gcc hello.c -c readelf -a hello.o ### UNIX/LINUX greadelf -a hello.o ### MAC, after brew install binutils ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2 s complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: REL (Relocatable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x0 Start of program headers: 0 (bytes into file) Start of section headers: 304 (bytes into file) Flags: 0x0 Size of this header: 64 (bytes) Size of program headers: 0 (bytes) Number of program headers: 0 Size of section headers: 64 (bytes) Number of section headers: 13 Section header string table index: 10 Section Headers: [Nr] Name Type Address Offset Size EntSize Flags Link Info Align [ 0] NULL 0000000000000000 00000000 0000000000000000 0000000000000000 0 0 0 [ 1] .text PROGBITS 0000000000000000 00000040 0000000000000015 0000000000000000 AX 0 0 1 [ 2] .rela.text RELA 0000000000000000 00000590 0000000000000030 0000000000000018 11 1 8 [ 3] .data PROGBITS 0000000000000000 00000055 0000000000000000 0000000000000000 WA 0 0 1 [ 4] .bss NOBITS 0000000000000000 00000055 0000000000000000 0000000000000000 WA 0 0 1 [ 5] .rodata PROGBITS 0000000000000000 00000055 000000000000000c 0000000000000000 A 0 0 1 [ 6] .comment PROGBITS 0000000000000000 00000061 000000000000002c 0000000000000001 MS 0 0 1 [ 7] .note.GNU-stack PROGBITS 0000000000000000 0000008d 0000000000000000 0000000000000000 0 0 1 [ 8] .eh_frame PROGBITS 0000000000000000 00000090 0000000000000038 0000000000000000 A 0 0 8 [ 9] .rela.eh_frame RELA 0000000000000000 000005c0 0000000000000018 0000000000000018 11 8 8 [10] .shstrtab STRTAB 0000000000000000 000000c8 0000000000000061 0000000000000000 0 0 1 [11] .symtab SYMTAB 0000000000000000 00000470 0000000000000108 0000000000000018 12 9 8 [12] .strtab STRTAB 0000000000000000 00000578 0000000000000015 0000000000000000 0 0 1 Key to Flags: W (write), A (alloc), X (execute), M (merge), S (strings), l (large) I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown) O (extra OS processing required) o (OS specific), p (processor specific) There are no section groups in this file. There are no program headers in this file. Relocation section .rela.text at offset 0x590 contains 2 entries: Offset Info Type Sym. Value Sym. Name + Addend 000000000005 00050000000a R_X86_64_32 0000000000000000 .rodata + 0 00000000000f 000a00000002 R_X86_64_PC32 0000000000000000 printf - 4 Relocation section .rela.eh_frame at offset 0x5c0 contains 1 entries: Offset Info Type Sym. Value Sym. Name + Addend 000000000020 000200000002 R_X86_64_PC32 0000000000000000 .text + 0 The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported. Symbol table .symtab contains 11 entries: Num: Value Size Type Bind Vis Ndx Name 0: 0000000000000000 0 NOTYPE LOCAL DEFAULT UND 1: 0000000000000000 0 FILE LOCAL DEFAULT ABS hello.c 2: 0000000000000000 0 SECTION LOCAL DEFAULT 1 3: 0000000000000000 0 SECTION LOCAL DEFAULT 3 4: 0000000000000000 0 SECTION LOCAL DEFAULT 4 5: 0000000000000000 0 SECTION LOCAL DEFAULT 5 6: 0000000000000000 0 SECTION LOCAL DEFAULT 7 7: 0000000000000000 0 SECTION LOCAL DEFAULT 8 8: 0000000000000000 0 SECTION LOCAL DEFAULT 6 9: 0000000000000000 21 FUNC GLOBAL DEFAULT 1 main 10: 0000000000000000 0 NOTYPE GLOBAL DEFAULT UND printf No version information found in this file.","title":"4 \u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6"},{"location":"os/csapp/ch7/#5","text":".symtab \u4e2d\u7684 \u7b26\u53f7\u8868 \uff0c\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u7b26\u53f7(\u4e0d\u5305\u62ec\u672c\u5730\u975e\u9759\u6001\u53d8\u91cf)\uff1a \u7531\u6a21\u5757 m m \u5b9a\u4e49\u5e76\u80fd\u88ab\u5176\u4ed6\u6a21\u5757\u5f15\u7528\u7684 \u5168\u5c40\u7b26\u53f7 \u3002 \u975e\u9759\u6001C\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf \u7531\u5176\u4ed6\u6a21\u5757\u5b9a\u4e49\u5e76\u88ab\u6a21\u5757 m m \u5f15\u7528\u7684\u5168\u5c40\u7b26\u53f7\u3002 \u5bf9\u5e94\u4e8e\u5176\u4ed6\u6a21\u5757\u4e2d\u5b9a\u4e49\u7684\u975e\u9759\u6001C\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf \u53ea\u88ab\u6a21\u5757 m m \u5b9a\u4e49\u548c\u5f15\u7528\u7684\u5c40\u90e8\u7b26\u53f7\u3002 \u9759\u6001C\u51fd\u6570\u548c\u5168\u5c40\u53d8\u91cf","title":"5 \u7b26\u53f7\u548c\u7b26\u53f7\u8868"},{"location":"os/csapp/ch7/#6","text":"\u7b26\u53f7\u89e3\u6790 \u662f\u5c06\u6bcf\u4e2a \u7b26\u53f7\u5f15\u7528 \u548c\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u4e2d\u7684 \u7b26\u53f7\u5b9a\u4e49 \u5173\u8054\u8d77\u6765\u3002\u94fe\u63a5\u5668\u7684\u8f93\u5165\u662f\u4e00\u7ec4\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6(\u6a21\u5757)\uff0c\u6709\u4e9b\u662f\u5c40\u90e8\u7684( \u5c40\u90e8\u7b26\u53f7 \uff0c\u53ea\u5bf9\u5b9a\u4e49\u8be5\u7b26\u53f7\u7684\u6a21\u5757\u53ef\u89c1)\uff0c\u6709\u4e9b\u662f\u5168\u5c40\u7684( \u5168\u5c40\u7b26\u53f7 \uff0c\u5bf9\u5176\u4ed6\u6a21\u5757\u53ef\u89c1)\u3002 \u5c40\u90e8\u7b26\u53f7 \uff1a\u6bcf\u4e2a\u6a21\u5757\u4e2d\u6bcf\u4e2a\u5c40\u90e8\u7b26\u53f7\u6709\u4e00\u4e2a\u5b9a\u4e49 \u5168\u5c40\u7b26\u53f7 \uff1a\u53ef\u91cd\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\u7684\u7b26\u53f7\u8868\u91cc\u7684\u5168\u5c40\u7b26\u53f7\u662f\u533a\u5206 \u5f3a \u548c \u5f31 \u7684\uff0c\u94fe\u63a5\u5668\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u6765\u5904\u7406\u591a\u91cd\u5b9a\u4e49\u7684\u7b26\u53f7\u540d\uff1a \u89c4\u52191: \u4e0d\u5141\u8bb8\u6709\u591a\u4e2a\u540c\u540d\u7684\u5f3a\u7b26\u53f7 \u89c4\u52192: \u5982\u679c\u6709\u4e00\u4e2a\u5f3a\u7b26\u53f7\u548c\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d\uff0c\u90a3\u4e48\u9009\u62e9\u5f3a\u7b26\u53f7 \u89c4\u52193\uff1a\u5982\u679c\u6709\u591a\u4e2a\u5f31\u7b26\u53f7\u540c\u540d\uff0c\u90a3\u4e48\u4efb\u9009\u4e00\u4e2a","title":"6 \u7b26\u53f7\u89e3\u6790"},{"location":"os/csapp/ch7/#7","text":"\u91cd\u5b9a\u4f4d\u5408\u5e76\u8f93\u5165\u6a21\u5757\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u7b26\u53f7\u5206\u914d\u8fd0\u884c\u65f6\u5730\u5740\uff1a \u91cd\u5b9a\u4f4d\u8282\u548c\u7b26\u53f7\u5b9a\u4e49\uff1a\u5c06\u6240\u6709\u76f8\u540c\u7c7b\u578b\u7684\u8282\u5408\u5e76\u4e3a\u540c\u4e00\u7c7b\u578b\u7684\u65b0\u7684\u805a\u5408\u8282\uff0c\u5e76\u5c06\u8fd0\u884c\u65f6\u5185\u5b58\u5730\u5740\u8d4b\u7ed9\u65b0\u7684\u805a\u5408\u8282\u548c\u6bcf\u4e2a\u7b26\u53f7\u5b9a\u4e49\u3002 \u4f8b\u5982\uff0c\u6765\u81ea\u6240\u6709\u8f93\u5165\u6a21\u5757\u7684 .data \u8282\u88ab\u5168\u90e8\u5408\u5e76\u6210\u8f93\u51fa\u7684\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684 .data \u8282 \u91cd\u5b9a\u4f4d\u8282\u4e2d\u7684\u7b26\u53f7\u5f15\u7528\uff1a\u5c06\u8fd0\u884c\u65f6\u5730\u5740\u4ed8\u7ed9\u6bcf\u4e2a\u7b26\u53f7\u5f15\u7528","title":"7 \u91cd\u5b9a\u4f4d"},{"location":"os/csapp/ch7/#8","text":"\u4e0b\u56fe\u6982\u62ec\u4e86\u4e00\u4e2a\u5178\u578b\u7684ELF\u53ef\u6267\u884c\u6587\u4ef6\u7684\u7ed9\u7c7b\u4fe1\u606f\u3002","title":"8 \u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6"},{"location":"os/csapp/ch7/#9","text":"\u5f53\u5728shell\u4e2d\u6267\u884c\u76ee\u6807\u6587\u4ef6\u65f6\uff0c\u9996\u5148\u901a\u8fc7\u8c03\u7528 \u52a0\u8f7d\u5668 ( loader )\u7684\u64cd\u4f5c\u7cfb\u7edf\u4ee3\u7801\u6765\u8fd0\u884c\u5b83\uff0c\u52a0\u8f7d\u5668\u5c06\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u4ee3\u7801\u548c\u6570\u636e\u590d\u5236\u5230\u4e3b\u5b58\uff0c\u8df3\u8f6c\u5230\u7a0b\u5e8f\u7684\u7b2c\u4e00\u6761\u6307\u4ee4(\u5165\u53e3\u70b9\uff0c _start_ \u51fd\u6570\u7684\u5730\u5740)\u8fd0\u884c\u8be5\u7a0b\u5e8f\u3002 \u5728Unix\u7cfb\u7edf\u4e2d\uff0c\u52a0\u8f7d\u5668\u662f\u7cfb\u7edf\u8c03\u7528(system call) execve() \u7684\u56de\u8c03(call back)\uff0c\u5176\u4efb\u52a1\u5305\u62ec\uff1a \u786e\u8ba4(\u6743\u9650\uff0c\u5185\u5b58\u8981\u6c42\u7b49) \u590d\u5236\u7a0b\u5e8f\u5230\u4e3b\u5b58 \u590d\u5236\u547d\u4ee4\u884c\u53c2\u6570\u5230\u6808 \u521d\u59cb\u5316\u5bc4\u5b58\u5668(\u4f8b\u5982\u6808\u9488) \u8df3\u5230\u5165\u53e3\u70b9( _start_ )","title":"9 \u52a0\u8f7d\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6"},{"location":"os/csapp/ch7/#10","text":"\u9759\u6001\u5e93\u67092\u5927\u7f3a\u9677\uff1a \u9759\u6001\u5e93\u66f4\u65b0\u65f6\uff0c\u9700\u8981\u663e\u793a\u5730\u5c06\u7a0b\u5e8f\u4e0e\u66f4\u65b0\u4e86\u7684\u5e93\u91cd\u65b0\u94fe\u63a5 \u6d6a\u8d39\u5185\u5b58\u8d44\u6e90\uff1a\u51e0\u4e4e\u6bcf\u4e2aC\u7a0b\u5e8f\u90fd\u4f7f\u7528\u6807\u51c6I/O\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u4ee3\u7801\u4f1a\u88ab\u590d\u5236\u5230\u6bcf\u4e2a\u8fd0\u884c\u8fdb\u7a0b\u7684\u6587\u672c\u6bb5\u4e2d \u5171\u4eab\u5e93(shared library)\u662f\u81f4\u529b\u4e8e\u89e3\u51b3\u9759\u6001\u5e93\u7f3a\u9677\u7684\u4ea7\u7269\u3002 \u52a8\u6001\u94fe\u63a5 (dynamic linking)\uff1a\u5171\u4eab\u5e93\u5728\u8fd0\u884c\u6216\u52a0\u8f7d\u65f6\uff0c\u53ef\u4ee5\u52a0\u8f7d\u5230\u4efb\u610f\u7684\u5185\u5b58\u5730\u5740\uff0c\u5e76\u548c\u4e00\u4e2a\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u94fe\u63a5\u8d77\u6765\u3002 \u7531 \u52a8\u6001\u94fe\u63a5\u5668 (dynamic linker)\u6267\u884c\uff1b \u5728linux\u7cfb\u7edf\u4e2d\u5e38\u7528 .so \u540e\u7f00\u8868\u793a\u3002","title":"10 \u52a8\u6001\u94fe\u63a5\u5171\u4eab\u5e93"},{"location":"os/csapp/ch7/#14","text":"Unix\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u547d\u4ee4\u5e2e\u52a9\u7406\u89e3\u548c\u5904\u7406\u76ee\u6807\u6587\u4ef6\u3002\u8fd9\u4e9b\u5de5\u5177\u5305\u62ec\uff1a ar \uff1a\u521b\u5efa\u9759\u6001\u5e93\uff0c\u63d2\u5165\u3001\u5220\u9664\u3001\u5217\u51fa\u548c\u63d0\u53d6\u6210\u5458\uff1b STRINGS \uff1a\u5217\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u6240\u6709\u53ef\u4ee5\u6253\u5370\u7684\u5b57\u7b26\u4e32\uff1b STRIP \uff1a\u4ece\u76ee\u6807\u6587\u4ef6\u4e2d\u5220\u9664\u7b26\u53f7\u8868\u4fe1\u606f\uff1b NM \uff1a\u5217\u51fa\u76ee\u6807\u6587\u4ef6\u7b26\u53f7\u8868\u4e2d\u5b9a\u4e49\u7684\u7b26\u53f7\uff1b SIZE \uff1a\u5217\u51fa\u76ee\u6807\u6587\u4ef6\u4e2d\u8282\u7684\u540d\u5b57\u548c\u5927\u5c0f\uff1b READELF \uff1a\u663e\u793a\u4e00\u4e2a\u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u7ed3\u6784\uff0c\u5305\u62ecELF \u5934\u4e2d\u7f16\u7801\u7684\u6240\u6709\u4fe1\u606f\u3002 OBJDUMP \uff1a\u663e\u793a\u76ee\u6807\u6587\u4ef6\u7684\u6240\u6709\u4fe1\u606f\uff0c\u6700\u6709\u7528\u7684\u529f\u80fd\u662f\u53cd\u6c47\u7f16.text\u8282\u4e2d\u7684\u4e8c\u8fdb\u5236\u6307\u4ee4\u3002 LDD \uff1a\u5217\u51fa\u53ef\u6267\u884c\u6587\u4ef6\u5728\u8fd0\u884c\u65f6\u9700\u8981\u7684\u5171\u4eab\u5e93\u3002","title":"14 \u5904\u7406\u76ee\u6807\u6587\u4ef6\u7684\u5de5\u5177"},{"location":"os/csapp/ch8/","text":"Chapter 8 \u5f02\u5e38\u63a7\u5236\u6d41 \u4ece\u7ed9\u5904\u7406\u5668\u52a0\u7535\u5f00\u59cb\uff0c\u76f4\u5230\u4f60\u65ad\u7535\u4e3a\u6b62\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u5047\u8bbe\u6210\u4e00\u4e2a\u503c\u7684\u5e8f\u5217 a_0, a_1, ..., a_{n-1} a_0, a_1, ..., a_{n-1} \u5176\u4e2d\uff0c\u6bcf\u4e2a a_k a_k \u662f\u67d0\u4e2a\u76f8\u5e94\u7684\u6307\u4ee4 I_k I_k \u7684 \u5730\u5740 \u3002\u6bcf\u6b21\u4ece a_k a_k \u5230 a_{k+1} a_{k+1} \u7684\u8fc7\u6e21\u79f0\u4e3a \u63a7\u5236\u8f6c\u79fb (control transfer)\u3002\u8fd9\u6837\u7684\u63a7\u5236\u8f6c\u79fb\u5e8f\u5217\u53eb\u505a\u5904\u7406\u5668\u7684 \u63a7\u5236\u6d41 (control flow)\u3002 \u73b0\u5728\u7cfb\u7edf\u901a\u8fc7\u4f7f\u63a7\u5236\u6d41\u53d1\u751f\u7a81\u53d8\u6765\u5e94\u5bf9\u7cfb\u7edf\u72b6\u6001\u7684\u53d8\u5316(eg.\u7f3a\u9875\u5f02\u5e38\uff0c\u7f51\u7edc\u7b49\u5f85)\uff0c\u628a\u8fd9\u4e9b\u7a81\u53d8\u79f0\u4e3a \u5f02\u5e38\u63a7\u5236\u6d41 (Exceptional Control Flow, ECF)\u3002 1 \u5f02\u5e38 \u5f02\u5e38\u7684\u5904\u7406 \u7cfb\u7edf\u4e3a\u6bcf \u7c7b \u53ef\u80fd\u7684\u5f02\u5e38\u90fd\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u975e\u8d1f\u6574\u6570\u7684 \u5f02\u5e38\u53f7 (exception number)\u3002\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u548c\u521d\u59cb\u5316\u4e00\u5f20\u79f0\u4e3a \u5f02\u5e38\u8868 \u7684\u8df3\u8f6c\u8868\uff0c\u4f7f\u5f97\u8868\u76ee k k \u5305\u542b\u5f02\u5e38 k k \u7684\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740\u3002 \u5f53\u68c0\u6d4b\u5230\u53d1\u751f\u4e86\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5e76\u4e14\u786e\u5b9a\u4e86\u76f8\u5e94\u7684\u5f02\u5e38\u53f7 k k \uff0c\u5904\u7406\u5668\u89e6\u53d1\u5f02\u5e38\uff0c\u6267\u884c\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528\uff0c\u901a\u8fc7\u5f02\u5e38\u8868\u7684\u8868\u76ee k k \uff0c\u8f6c\u5230\u76f8\u5e94\u7684\u5904\u7406\u7a0b\u5e8f\u3002 \u5f02\u5e38\u7684\u7c7b\u522b \u5f02\u5e38(exceptions)\u53ef\u4ee5\u5206\u4e3a\u56db\u7c7b\uff1a\u4e2d\u65ad(interrupt)\u3001\u9677\u9631(trap)\u3001\u6545\u969c(fault)\u548c\u7ec8\u6b62(abort)\u3002 \u4e2d\u65ad \u662f\u5f02\u6b65\u53d1\u751f\u7684\uff0c\u662f\u6765\u81ea\u5904\u7406\u5668\u5916\u90e8\u7684I/O\u8bbe\u5907\u7684\u4fe1\u53f7\u7684\u7ed3\u679c\u3002 \u9677\u9631 \u662f\u6709\u610f\u7684\u5f02\u5e38\uff0c\u662f\u6267\u884c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u3002 \u5176\u7528\u9014\u662f\u5728\u7528\u6237\u7a0b\u5e8f\u548c\u5185\u6838\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e2a\u50cf\u8fc7\u7a0b\u4e00\u6837\u7684\u63a5\u53e3(\u7cfb\u7edf\u8c03\u7528) \u6545\u969c \u662f\u7531\u9519\u8bef\u60c5\u51b5\u5f15\u8d77\u7684\uff0c\u53ef\u80fd\u80fd\u591f\u88ab\u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4fee\u6b63\u3002 \u4f8b\u5982\u7f3a\u9875\u5f02\u5e38 \u7ec8\u6b62 \u662f\u4e0d\u53ef\u6062\u590d\u7684\u81f4\u547d\u9519\u8bef\u9020\u6210\u7684\u7ed3\u679c\uff0c\u901a\u5e38\u662f\u4e00\u4e9b\u786c\u4ef6\u9519\u8bef\u3002 2 \u8fdb\u7a0b \u8fdb\u7a0b (Process)\u7684\u7ecf\u5178\u5b9a\u4e49\u5c31\u662f \u4e00\u4e2a\u6267\u884c\u4e2d\u7a0b\u5e8f\u7684\u5b9e\u4f8b (A process is a program in execuation) \u3002\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u8fd0\u884c\u5728\u67d0\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587(context)\u4e2d\u3002\u4e0a\u4e0b\u6587\u662f\u7531\u7a0b\u5e8f\u6b63\u786e\u8fd0\u884c\u6240\u9700\u7684\u72b6\u6001\u7ec4\u6210\u7684\u3002\u8fd9\u4e2a\u72b6\u6001\u5305\u62ec\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5b83\u7684\u6808\u3001\u901a\u7528\u76ee\u7684\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u73af\u5883\u53d8\u91cf\u4ee5\u53ca\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u96c6\u5408\u3002 \u8fdb\u7a0b\u63d0\u4f9b\u4e86\u5e94\u7528\u7a0b\u5e8f\u4e24\u4e2a\u5173\u952e\u62bd\u8c61\uff1a \u4e00\u4e2a \u72ec\u7acb \u7684\u903b\u8f91\u63a7\u5236\u6d41\uff0c\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61\uff0c\u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u5730\u4f7f\u7528\u5904\u7406\u5668\u3002 \u4e00\u4e2a \u79c1\u6709 \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61\uff0c\u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u5730\u4f7f\u7528\u5185\u5b58\u7cfb\u7edf\u3002 \u903b\u8f91\u63a7\u5236\u6d41 \u903b\u8f91\u63a7\u5236\u6d41 (Logical Control Flow\uff0c\u7b80\u79f0\u903b\u8f91\u6d41)\u662fPC\u503c\u7684\u5e8f\u5217\u3002 \u5e76\u53d1\u6d41 \u4e00\u4e2a\u903b\u8f91\u6d41\u7684\u6267\u884c\u5728\u65f6\u95f4\u4e0a\u4e0e\u53e6\u4e00\u4e2a\u6d41\u91cd\u53e0\uff0c\u79f0\u4e3a \u5e76\u53d1\u6d41 (concurrent flow)\uff0c\u8fd9\u4e24\u4e2a\u6d41\u88ab\u79f0\u4e3a \u5e76\u53d1\u5730\u8fd0\u884c \u3002 \u79c1\u6709\u5730\u5740\u7a7a\u95f4 \u8fdb\u7a0b\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u63d0\u4f9b\u5b83\u81ea\u5df1\u7684 \u79c1\u6709\u5730\u5740\u7a7a\u95f4 \u3002\u4e00\u822c\u800c\u8a00\uff0c\u548c\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u67d0\u4e2a\u5730\u5740\u76f8\u5173\u8054\u7684\u90a3\u4e2a\u5185\u5b58\u5b57\u8282\u662f\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bfb\u6216\u8005\u5199\u7684\uff0c\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u662f\u79c1\u6709\u7684\u3002 \u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f \u5904\u7406\u5668\u901a\u5e38\u662f\u7528\u67d0\u4e2a\u63a7\u5236\u5bc4\u5b58\u5668\u4e2d\u7684\u4e00\u4e2a \u6a21\u5f0f\u4f4d (mode bit)\u6765\u63a7\u5236\u7528\u6237/\u5185\u6838\u6a21\u5f0f\u3002\u5f53\u8bbe\u7f6e\u4e86\u6a21\u5f0f\u4f4d\u65f6\uff0c\u8fdb\u7a0b\u5c31\u8fd0\u884c\u5728 \u5185\u6838\u6a21\u5f0f \u4e2d\uff0c\u5426\u5219\u8fd0\u884c\u5728 \u7528\u6237\u6a21\u5f0f \u4e2d\u3002 \u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884c\u6307\u4ee4\u96c6\u4e2d\u7684\u4efb\u4f55\u6307\u4ee4\uff0c\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u5185\u5b58\u4f4d\u7f6e\u3002\u7528\u6237\u6a21\u5f0f\u4e2d\u7684\u8fdb\u7a0b\u4e0d\u5141\u8bb8\u6267\u884c\u7279\u6743\u6307\u4ee4\uff0c\u4e5f\u4e0d\u5141\u8bb8\u76f4\u63a5\u5f15\u7528\u5730\u5740\u7a7a\u95f4\u4e2d\u5185\u6838\u533a\u7684\u4ee3\u7801\u548c\u6570\u636e\u3002 3 \u7cfb\u7edf\u8c03\u7528\u9519\u8bef\u5904\u7406 4 \u8fdb\u7a0b\u63a7\u5236 \u8fdb\u7a0b\u63a7\u5236\u5305\u62ec\u83b7\u53d6\u8fdb\u7a0bID\u3001\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b\u3001\u56de\u6536\u5b50\u8fdb\u7a0b\u3001\u8ba9\u8fdb\u7a0b\u4f11\u7720\u3001\u52a0\u8f7d\u5e76\u8fd0\u884c\u7a0b\u5e8f\u7b49\u3002\u8fd9\u4e00\u8282\u5c06\u63cf\u8ff0Unix\u63d0\u4f9b\u4e86\u63a7\u5236\u8fdb\u7a0b\u7684\u7cfb\u7edf\u8c03\u7528\u3002 \u83b7\u53d6\u8fdb\u7a0bID \u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570(\u975e\u96f6)\u8fdb\u7a0bID(PID)\u3002 getpid \u51fd\u6570\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684PID\u3002 getppid \u51fd\u6570\u8fd4\u56de\u5b83\u7684\u7236\u8fdb\u7a0b\u7684PID\u3002 #include sys/types.h #include unistd.h pid_t getpid ( void ); pit_t getppid ( void ); \u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b \u7236\u8fdb\u7a0b \u901a\u8fc7\u8c03\u7528fork\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fd0\u884c\u7684 \u5b50\u8fdb\u7a0b \u3002 #include sys/types.h #include unistd.h pid_t fork ( void ); \u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u51e0\u4e4e\u4f46\u4e0d\u5b8c\u5168\u4e0e\u7236\u8fdb\u7a0b\u76f8\u540c\uff1a \u76f8\u540c\u4f46\u662f\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4 \uff1a\u5b50\u8fdb\u7a0b\u83b7\u5f97\u7236\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4efd\u526f\u672c \u5171\u4eab\u6587\u4ef6 \uff1a\u5b50\u8fdb\u7a0b\u83b7\u5f97\u7236\u8fdb\u7a0b\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u540c\u7684\u526f\u672c \u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0bpid\u4e0d\u540c \u56de\u6536\u5b50\u8fdb\u7a0b \u8fdb\u7a0b\u5728\u7ec8\u6b62\u540e\uff0c\u5e76\u4e0d\u4f1a\u88ab\u5185\u6838\u4ece\u7cfb\u7edf\u4e2d\u6e05\u9664\uff0c\u800c\u662f\u4fdd\u6301\u8fd9\u79cd\u72b6\u6001\uff0c\u76f4\u5230\u88ab\u5b83\u7684\u7236\u8fdb\u7a0b \u56de\u6536 (reaped)\u3002 \u4e00\u4e2a\u7ec8\u6b62\u4e86\u4f46\u8fd8\u672a\u88ab\u56de\u6536\u7684\u8fdb\u7a0b\u79f0\u4e3a \u50f5\u6b7b\u8fdb\u7a0b (zombie)\u3002 \u5373\u4f7f\u50f5\u6b7b\u8fdb\u7a0b\u6ca1\u6709\u8fd0\u884c\uff0c\u5b83\u4ecd\u7136\u6d88\u8017\u7cfb\u7edf\u7684\u5185\u5b58\u8d44\u6e90\u3002 \u901a\u8fc7\u8c03\u7528 waitpid \u51fd\u6570\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u8005\u505c\u6b62\u3002 \u8fdb\u7a0b\u4f11\u7720 sleep \u51fd\u6570\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u6302\u8d77\u4e00\u6bb5\u5236\u5b9a\u7684\u65f6\u95f4\u3002 #include unistd.n unsigned int sleep ( unsigned int secs ); \u52a0\u8f7d\u5e76\u8fd0\u884c\u7a0b\u5e8f execve \u51fd\u6570\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f\u3002 * execve \u8c03\u7528\u4e00\u6b21\u5e76\u4ece\u4e0d\u8fd4\u56de\u3002 5 \u4fe1\u53f7 Linux \u4fe1\u53f7 \uff0c\u901a\u77e5\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u53d1\u751f\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u6bcf\u79cd\u4fe1\u53f7\u7c7b\u578b\u90fd\u5bf9\u5e94\u4e8e\u67d0\u79cd\u7cfb\u7edf\u4e8b\u4ef6\u3002\u4f4e\u5c42\u7684\u786c\u4ef6\u5f02\u5e38\u662f\u7531\u5185\u6838\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7528\u6237\u8fdb\u7a0b\u800c\u8a00\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u4e0b\u9762\u662fLinux\u7cfb\u7edf\u4e0a\u5e38\u89c1\u7684\u4fe1\u53f7\uff1a \u5e38\u89c1\u7684\u4fe1\u53f7 \uff1a \u7f16\u53f7 \u540d\u79f0 \u9ed8\u8ba4\u52a8\u4f5c \u5bf9\u5e94\u4e8b\u4ef6 2 SIGINT \u7ec8\u6b62 \u6765\u81ea\u952e\u76d8\u7684\u4e2d\u65adCTRL+C 3 SIGQUIT \u7ec8\u6b62 \u6765\u81ea\u952e\u76d8\u7684\u9000\u51faCTRL+\\ 9 SIGKILL \u7ec8\u6b62 \u6740\u6b7b\u7a0b\u5e8f \\bin\\kill -9 11 SIGSEGV \u7ec8\u6b62\u5e76\u8f6c\u50a8\u5185\u5b58 \u6bb5\u6545\u969c(\u65e0\u6548\u7684\u5185\u5b58\u5f15\u7528) 15 SIGTERM \u7ec8\u6b62 \u8f6f\u4ef6\u7ec8\u6b62\u4fe1\u53f7 \\bin\\kill 17 SIGCHLD \u5ffd\u7565 \u5b50\u8fdb\u7a0b\u505c\u6b62\u6216\u7ec8\u6b62 18 SIGCONT \u5ffd\u7565 \u7ee7\u7eed\u8fdb\u7a0b\u5982\u679c\u8be5\u8fdb\u7a0b\u505c\u6b62 20 SIGTSTP \u505c\u6b62\u76f4\u5230\u4e0b\u4e00\u4e2aSIGCONT \u7528\u6237\u8f93\u5165CTRL+Z \u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u901a\u8fc7 man 7 signal \u67e5\u8be2\u3002 \u53d1\u9001/\u63a5\u6536\u4fe1\u53f7 \u4f20\u9001\u4e00\u4e2a\u4fe1\u53f7\u5230\u76ee\u7684\u8fdb\u7a0b\u7531\u53d1\u9001\u3001\u63a5\u6536\u4fe1\u53f7\u4e24\u4e2a\u6b65\u9aa4\u7ec4\u6210\uff1a \u53d1\u9001\u4fe1\u53f7\u3002\u5185\u6838\u901a\u8fc7\u66f4\u65b0\u76ee\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001\uff0c\u53d1\u9001(\u9012\u9001)\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u7684\u8fdb\u7a0b\u3002 \u63a5\u6536\u4fe1\u53f7\u3002\u5f53\u76ee\u7684\u8fdb\u7a0b\u88ab\u5185\u6838\u5f3a\u8feb\u5df2\u67d0\u79cd\u65b9\u5f0f\u5bf9\u4fe1\u53f7\u7684\u53d1\u9001\u505a\u51fa\u53cd\u5e94\u65f6\uff0c\u5b83\u5c31\u63a5\u6536\u4e86\u4fe1\u53f7\u3002\u8fdb\u7a0b\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u7ec8\u6b62\u6216\u8005\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u79f0\u4e3a \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f \u7684\u7528\u6237\u5c42\u51fd\u6570\u6355\u83b7\u8fd9\u4e2a\u4fe1\u53f7\u3002 \u53d1\u9001\u4fe1\u53f7 \u53d1\u9001\u4fe1\u53f7\u53ef\u4ee5\u7531\u4ee5\u4e0b\u539f\u56e0\u5f15\u8d77\uff1a \u7528\u6237\uff1a\u7528\u6237\u80fd\u591f\u901a\u8fc7\u8f93\u5165 CTRL+c ( SIGINT )\u3001 Ctrl+z ( SIGTSTP )\uff0c\u6216\u8005\u662f\u7ec8\u7aef\u9a71\u52a8\u7a0b\u5e8f\u5206\u914d\u7ed9\u4fe1\u53f7\u63a7\u5236\u5b57\u7b26\u7684\u5176\u4ed6\u4efb\u4f55\u952e\u6765\u8bf7\u6c42\u5185\u6838\u4ea7\u751f\u4fe1\u53f7\uff1b \u5185\u6838\uff1a\u5f53\u8fdb\u7a0b\u6267\u884c\u51fa\u9519\u65f6\uff0c\u5185\u6838\u4f1a\u7ed9\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff0c\u4f8b\u5982\u975e\u6cd5\u6bb5\u5b58\u53d6(\u5185\u5b58\u8bbf\u95ee\u8fdd\u89c4)\u3001\u6d6e\u70b9\u6570\u6ea2\u51fa\u7b49\uff1b \u8fdb\u7a0b\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6216\u81ea\u5df1\u53d1\u9001\u4fe1\u53f7\u3002 \u63a5\u6536\u4fe1\u53f7 \u5f53\u5185\u6838\u628a\u8fdb\u7a0b p p \u4ece\u5185\u6838\u6a21\u5f0f\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u65f6\uff0c\u5b83\u4f1a\u68c0\u67e5\u8fdb\u7a0b p p \u7684\u672a\u88ab\u963b\u585e\u7684\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408( pending ~blocked ,\u89c1\u4e0b\u6587)\uff0c\u5982\u679c\u96c6\u5408\u975e\u7a7a\uff0c\u90a3\u4e48\u5185\u6838\u5f3a\u5236 p p \u63a5\u6536\u4fe1\u53f7\uff0c\u89e6\u53d1\u8fdb\u7a0b\u91c7\u53d6\u67d0\u79cd\u884c\u4e3a\u3002 \u8fdb\u7a0b\u63a5\u6536\u5230\u4fe1\u53f7\u4ee5\u540e\uff0c\u53ef\u4ee5\u6709\u5982\u4e0b3\u79cd\u9009\u62e9\u8fdb\u884c\u5904\u7406\uff1a \u63a5\u6536\u9ed8\u8ba4\u5904\u7406\uff1a\u63a5\u6536\u9ed8\u8ba4\u5904\u7406\u7684\u8fdb\u7a0b\u901a\u5e38\u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u672c\u8eab\u6d88\u4ea1\u3002\u4f8b\u5982\u8fde\u63a5\u5230\u7ec8\u7aef\u7684\u8fdb\u7a0b\uff0c\u7528\u6237\u6309\u4e0bCTRL+c\uff0c\u5c06\u5bfc\u81f4\u5185\u6838\u5411\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2aSIGINT\u7684\u4fe1\u53f7\uff0c\u8fdb\u7a0b\u5982\u679c\u4e0d\u5bf9\u8be5\u4fe1\u53f7\u505a\u7279\u6b8a\u7684\u5904\u7406\uff0c\u7cfb\u7edf\u5c06\u91c7\u7528\u9ed8\u8ba4\u7684\u65b9\u5f0f\u5904\u7406\u8be5\u4fe1\u53f7\uff0c\u5373\u7ec8\u6b62\u8fdb\u7a0b\u7684\u6267\u884c\uff1b \u5ffd\u7565\u4fe1\u53f7\uff1a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\uff0c\u663e\u793a\u5730\u5ffd\u7565\u67d0\u4e2a\u4fe1\u53f7\u7684\u5904\u7406\uff0c\u4f8b\u5982\uff1a signal(SIGINT,SIGDEF) \uff1b\u4f46\u662f\u67d0\u4e9b\u4fe1\u53f7\u662f\u4e0d\u80fd\u88ab\u5ffd\u7565\u7684\uff0c \u6355\u83b7\u4fe1\u53f7\u5e76\u5904\u7406\uff1a\u5f53\u63a5\u6536\u5230\u4fe1\u53f7\u65f6\uff0c\u7531\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u6355\u83b7\u5e76\u4e14\u5904\u7406\u4fe1\u53f7\u3002 sighandler_t signal ( int signum , sighandler_t handler ); \u6709\u4e24\u4e2a\u4fe1\u53f7\u65e2\u4e0d\u80fd\u88ab\u5ffd\u7565\u4e5f\u4e0d\u80fd\u88ab\u6355\u83b7\uff0c\u5b83\u4eec\u662f SIGKILL \u548c SIGSTOP \u3002\u5373\u8fdb\u7a0b\u63a5\u6536\u5230\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u540e\uff0c\u53ea\u80fd\u63a5\u53d7\u7cfb\u7edf\u7684\u9ed8\u8ba4\u5904\u7406\uff0c\u5373\u7ec8\u6b62\u7ebf\u7a0b\u3002 \u963b\u585e\u4fe1\u53f7\u548c\u8fdb\u7a0b\u56de\u6536 \u4e00\u4e2a\u53d1\u51fa\u800c\u6ca1\u6709\u88ab\u63a5\u53d7\u7684\u4fe1\u53f7\u53eb\u505a \u672a\u5904\u7406\u4fe1\u53f7 \uff08Pending Signal\uff09\u3002\u8fdb\u7a0b\u53ef\u4ee5\u9009\u62e9\u963b\u585e\uff08Block\uff09\u67d0\u4e2a\u4fe1\u53f7\u3002\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u4ea7\u751f\u65f6\u5c06\u4fdd\u6301\u5728\u672a\u5904\u7406\u72b6\u6001\uff0c\u76f4\u5230\u8fdb\u7a0b\u89e3\u9664\u5bf9\u6b64\u4fe1\u53f7\u7684\u963b\u585e\uff0c\u624d\u6267\u884c\u63a5\u6536\u7684\u52a8\u4f5c\u3002\u963b\u585e\u548c\u5ffd\u7565\u662f\u4e0d\u540c\u7684\uff0c \u53ea\u8981\u4fe1\u53f7\u88ab\u963b\u585e\u5c31\u4e0d\u4f1a\u63a5\u6536 \uff0c\u800c\u5ffd\u7565\u662f\u5728\u63a5\u6536\u4e4b\u540e\u53ef\u9009\u7684\u4e00\u79cd\u5904\u7406\u52a8\u4f5c\u3002 Linux\u63d0\u4f9b\u963b\u585e\u4fe1\u53f7\u7684\u9690\u5f0f\u548c\u663e\u5f0f\u673a\u5236: \u9690\u5f0f\u963b\u585e\u673a\u5236 \uff1a\u5185\u6838\u9ed8\u8ba4\u963b\u585e\u4efb\u4f55\u5f53\u524d\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u4fe1\u53f7\u7c7b\u578b\u7684\u5f85\u5904\u7406\u7684\u4fe1\u53f7\u3002\u5982\u679c\u5728\u8fdb\u7a0b\u89e3\u9664\u5bf9\u67d0\u4fe1\u53f7\u7684\u963b\u585e\u4e4b\u524d\u8fd9\u79cd\u4fe1\u53f7\u4ea7\u751f\u8fc7\u591a\u6b21\uff0c\u53ea\u8ba1\u4e00\u6b21\u3002\u56e0\u4e3a\u6bcf\u4e2a\u4fe1\u53f7\u53ea\u6709\u4e00\u4e2abit\u7684\u672a\u5904\u7406\u6807\u5fd7(\u5982\u4e0b\u56fe)\uff0c\u975e0\u53731\uff0c\u4e0d\u8bb0\u5f55\u8be5\u4fe1\u53f7\u4ea7\u751f\u4e86\u591a\u5c11\u6b21\uff0c\u963b\u585e\u6807\u5fd7\u4e5f\u662f\u8fd9\u6837\u8868\u793a\u7684\u3002 \u663e\u5f0f\u963b\u585e\u673a\u5236 \uff1a\u5e94\u7528 sigprocmask \u51fd\u6570\uff0c\u660e\u786e\u5730\u963b\u585e\u548c\u89e3\u9664\u963b\u585e\u9009\u5b9a\u7684\u4fe1\u53f7\u3002 \u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5728 pending\u4f4d\u5411\u91cf \u4e2d\u7ef4\u62a4\u7740\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408\uff0c\u800c\u5728 blocked\u4f4d\u5411\u91cf \u4e2d\u7ef4\u62a4\u7740\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5408\u3002\u4fe1\u53f7\u5728\u5185\u6838\u4e2d\u7684\u8868\u793a\u53ef\u4ee5\u770b\u4f5c\u662f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e2a\u4fe1\u53f7\u90fd\u6709\u4e24\u4e2a\u6807\u5fd7\u4f4d\u5206\u522b\u8868\u793a\u963b\u585e\u548c\u672a\u5904\u7406\uff0c\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u8868\u793a\u5904\u7406\u52a8\u4f5c\u3002\u4fe1\u53f7\u4ea7\u751f\u65f6\uff0c\u5185\u6838\u5728\u8fdb\u7a0b\u63a7\u5236\u5757\u4e2d\u8bbe\u7f6e\u8be5\u4fe1\u53f7\u7684\u672a\u5904\u7406\u6807\u5fd7\uff0c\u76f4\u5230\u4fe1\u53f7\u63a5\u6536\u624d\u6e05\u9664\u8be5\u6807\u5fd7\u3002\u5728\u4e0a\u56fe\u7684\u4f8b\u5b50\u4e2d\uff0c SIGHUP\u4fe1\u53f7\u672a\u963b\u585e\u4e5f\u672a\u4ea7\u751f\u8fc7\uff0c\u5f53\u5b83\u63a5\u6536\u65f6\u6267\u884c\u9ed8\u8ba4\u5904\u7406\u52a8\u4f5c\u3002 SIGINT\u4fe1\u53f7\u4ea7\u751f\u8fc7\uff0c\u4f46\u6b63\u5728\u88ab\u963b\u585e\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u80fd\u63a5\u6536\u3002\u867d\u7136\u5b83\u7684\u5904\u7406\u52a8\u4f5c\u662f\u5ffd\u7565\uff0c\u4f46\u5728\u6ca1\u6709\u89e3\u9664\u963b\u585e\u4e4b\u524d\u4e0d\u80fd\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u56e0\u4e3a\u8fdb\u7a0b\u4ecd\u6709\u673a\u4f1a\u6539\u53d8\u5904\u7406\u52a8\u4f5c\u4e4b\u540e\u518d\u89e3\u9664\u963b\u585e\u3002 SIGQUIT\u4fe1\u53f7\u672a\u4ea7\u751f\u8fc7\uff0c\u4e00\u65e6\u4ea7\u751fSIGQUIT\u4fe1\u53f7\u5c06\u88ab\u963b\u585e\uff0c\u5b83\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f sighandler \u3002 \u9690\u5f0f\u963b\u585e\u673a\u5236 \u5f53\u591a\u4e2a\u672a\u5904\u7406\u4fe1\u53f7( pending signal )\u5230\u8fbe\u65f6\uff0c\u7531\u4e8e\u4fe1\u53f7\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6392\u961f\u7b49\u5f85\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4ea7\u751f\u7684\u6548\u679c\u4ec5\u76f8\u5f53\u4e8e\u4e00\u4e2a\u672a\u5904\u7406\u4fe1\u53f7(\u4e5f\u5c31\u662f\u5bf9\u5e94\u7684 pending \u4f4d\u6807\u8bb0\u4e3a1\uff0c\u4f8b\u5982\u4e0a\u56fe\u4e2d\u7684 SIGINT \u4fe1\u53f7)\u3002 \u8fd9\u6837\u5e26\u6765\u51e0\u4e2a\u95ee\u9898\uff1a \u4e0d\u80fd\u7528\u4fe1\u53f7\u6765\u5bf9\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\u4e8b\u4ef6\u8ba1\u6570\uff0c\u8fd9\u662f\u663e\u800c\u6613\u89c1\u7684 \u5728\u56de\u6536\u5b50\u8fdb\u7a0b\u65f6\uff0c\u8981\u56de\u6536\u5c3d\u53ef\u80fd\u591a\u7684\u5b50\u8fdb\u7a0b\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u3002 void handler1 ( int sig ) { pid_t pid ; if (( pid = waitpid ( - 1 , NULL , 0 )) 0 ) unix_error ( waitpid error ); printf ( Handler reaped child %d \\n , ( int ) pid ); Sleep ( 2 ); return ; } /* $begin signal2 */ void handler2 ( int sig ) { int olderrno = errno ; while ( waitpid ( - 1 , NULL , 0 ) 0 ) { Sio_puts ( Handler reaped child \\n ); } // waitpid()\u51fd\u6570\u6709\u53ef\u80fd\u56e0\u4e3a\u627e\u4e0d\u5230\u5b50\u8fdb\u7a0b\u800c\u62a5ECHILD\u9519\u8bef if ( errno != ECHILD ) Sio_error ( waitpid error ); Sleep ( 1 ); errno = olderrno ; } /* $end signal2 */ int main () { int i , n ; char buf [ MAXBUF ]; if ( signal ( SIGCHLD , handler2 ) == SIG_ERR ) //handler2 \u6216\u8005 handler1 unix_error ( signal error ); /* Parent creates children */ for ( i = 0 ; i 3 ; i ++ ) { if ( Fork () == 0 ) { printf ( Hello from child %d \\n , ( int ) getpid ()); exit ( 0 ); } } /* Parent waits for terminal input and then processes it */ if (( n = read ( STDIN_FILENO , buf , sizeof ( buf ))) 0 ) unix_error ( read ); printf ( Parent processing input \\n ); while ( 1 ) ; exit ( 0 ); } \u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7236\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e9b\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u5404\u81ea\u72ec\u7acb\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u7136\u540e\u7ec8\u6b62\u3002\u7528 SIGCHLD \u5904\u7406\u7a0b\u5e8f\u6765\u56de\u6536\u5b50\u8fdb\u7a0b\uff0c\u5176\u4e2d handler1 \u662f\u9519\u8bef\u7684\uff0c\u4f1a\u4ea7\u751f\u50f5\u6b7b\u5b50\u8fdb\u7a0b\u3002 handler2 \u662f\u5b89\u5168\u7684\u3002\u539f\u56e0\u662f\u5728 handler1 \u4e2d\uff0c\u53ef\u80fd\u5b58\u5728\u5b50\u8fdb\u7a0b\u5148\u88ab\u6267\u884c\uff0c\u4ea7\u751f SIGCHLD \u4fe1\u53f7\uff1b\u4f46\u662f\u5728\u5b50\u8fdb\u7a0b\u8fd8\u672a\u88ab\u56de\u6536\u4e4b\u524d\uff0c\u53c8\u6709\u591a\u4e2a\u5b50\u8fdb\u7a0b\u88ab\u6267\u884c\uff0c\u4ea7\u751f\u591a\u4e2a SIGCHLD \u4fe1\u53f7\u3002\u4e8e\u662f\u591a\u4f59\u7684\u672a\u5904\u7406 SIGCHLD \u4fe1\u53f7\u5c31\u88ab\u629b\u5f03\uff0c\u53ea\u76f8\u5f53\u4e8e\u4e00\u4e2a SIGCHLD \u4fe1\u53f7\u3002\u6700\u7ec8\u4f1a\u9020\u6210\u6709\u7684\u5b50\u8fdb\u7a0b\u672a\u88ab\u56de\u6536\uff0c\u4ea7\u751f\u50f5\u6b7b\u5b50\u8fdb\u7a0b\u3002 \u6267\u884c\u7684\u53ef\u80fd\u7ed3\u679c\u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u7236\u8fdb\u7a0b\u53ea\u56de\u6536\u4e86\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u3002 Hello from child 5617 Hello from child 5616 Hello from child 5618 Handler reaped child Handler reaped child Parent processing input \u663e\u5f0f\u963b\u585e\u673a\u5236 \u6709\u65f6\u5019\u4e0d\u5e0c\u671b\u5728\u53d1\u9001\u4fe1\u53f7\u540e\u5c31\u7acb\u5373\u53bb\u63a5\u6536\u3001\u5904\u7406\u4fe1\u53f7\uff0c\u540c\u65f6\u4e5f\u4e0d\u5e0c\u671b\u5ffd\u7565\u8be5\u4fe1\u53f7\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7 sigprocmask \u663e\u5f0f\u5730\u963b\u585e\u4fe1\u53f7\u4ece\u800c\u5b9e\u73b0\u5ef6\u8fdf\u63a5\u6536\u4fe1\u53f7\u3002 \u51fd\u6570 sigprocmask \u53ef\u4ee5\u66f4\u6539\u5f53\u524d\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5408(\u5373blocked\u4f4d\u5411\u91cf): int sigprocmask ( int how , const sigset_t * set , sigset_t * oldset ); \u5176\u5177\u4f53\u884c\u4e3a\u4f9d\u8d56\u4e8ehow\u503c\uff1a SIG_BLOCK, blocked = blocked | set //\u6dfb\u52a0set\u4fe1\u53f7 SIG_UNBLOCK, blocked = blocked ~set //\u5220\u9664set\u4fe1\u53f7 SIG_SETMASK, block = set //\u8bbe\u7f6eset\u4fe1\u53f7\u4e3a\u963b\u585e\u7684\u4fe1\u53f7 \u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5408\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u578b\u6570\u7ec4(\u5728x86-64\u4e0a\uff0c\u6570\u7ec4\u957f\u5ea6\u662f16)\u3002 /* A `sigset_t has a bit for each signal. */ # define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int))) typedef struct { unsigned long int __val [ _SIGSET_NWORDS ]; } sigset_t ; \u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5bf9\u4fe1\u53f7\u96c6\u8fdb\u884c\u64cd\u4f5c\uff1a int sigfillset ( sigset_t * set ); // \u4fe1\u53f7\u96c6\u521d\u59cb\u5316, \u7136\u540e\u628a\u6240\u6709\u7684\u4fe1\u53f7\u52a0\u5165\u5230\u6b64\u4fe1\u53f7\u96c6\u91cc int sigemptyset ( sigset_t * set ); //\u4fe1\u53f7\u96c6\u521d\u59cb\u5316\u4e3a\u7a7a int sigaddset ( sigset_t * set , int signo ); //\u5c06\u4fe1\u53f7signo\u6dfb\u52a0\u5230\u4fe1\u53f7\u96c6\u4e2d \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50, \u662f\u4e00\u4e2a\u5177\u6709\u7ec6\u5fae\u540c\u6b65\u9519\u8bef\u7684SHELL\u7a0b\u5e8f\u3002\u5982\u679c\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u80fd\u591f\u5f00\u59cb\u8fd0\u884c\u524d\u5c31\u7ed3\u675f\u4e86\uff0c\u90a3\u4e48 addjob() \u548c deletejob() \u4f1a\u4ee5\u9519\u8bef\u7684\u65b9\u5f0f\u88ab\u8c03\u7528\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u5e0c\u671b\u7236\u8fdb\u7a0b\u5728\u4e00\u4e2a\u4f5c\u4e1a\u5217\u8868\u4e2d\u8bb0\u5f55\u7740\u5b83\u7684\u5f53\u524d\u5b50\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u4f5c\u4e1a\u6761\u76ee\u3002 addjob() \u548c deletejob() \u5206\u522b\u60f3\u8fd9\u4e2a\u4f5c\u4e1a\u5217\u8868\u6dfb\u52a0\u548c\u4ece\u4e2d\u5220\u9664\u4f5c\u4e1a\u3002\u5f53\u7236\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\u65f6\uff0c\u5b83\u5c31\u628a\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d\u3002\u5f53\u7236\u8fdb\u7a0b\u5728 SIGCHLD \u5904\u7406\u7a0b\u5e8f\u4e2d\u56de\u6536\u4e00\u4e2a\u7ec8\u6b62\u7684\uff08\u50f5\u6b7b\uff09\u5b50\u8fdb\u7a0b\u65f6\uff0c\u5b83\u5c31\u4ece\u4f5c\u4e1a\u5217\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u3002\u4e4d\u4e00\u770b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u5bf9\u7684\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u53ef\u80fd\u53d1\u751f\u4e0b\u9762\u7684\u60c5\u51b5\uff1a \u7236\u8fdb\u7a0b\u6267\u884c fork() \uff0c\u5185\u6838\u8c03\u5ea6\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u7236\u8fdb\u7a0b \u5728\u7236\u8fdb\u7a0b\u80fd\u591f\u518d\u6b21\u8fd0\u884c\u4e4b\u524d\uff0c\u5b50\u8fdb\u7a0b\u5c31\u7ec8\u6b62\uff0c\u5e76\u4e14\u53d8\u6210\u4e00\u4e2a\u50f5\u6b7b\u8fdb\u7a0b\uff0c\u4f7f\u5f97\u5185\u6838\u4f20\u9012\u4e00\u4e2a SIGCHLD \u4fe1\u53f7\u7ed9\u7236\u8fdb\u7a0b \u540e\u6765\uff0c\u5f53\u7236\u8fdb\u7a0b\u518d\u6b21\u53d8\u6210\u53ef\u8fd0\u884c\u4f46\u53c8\u5728\u5b83\u6267\u884c\u4e4b\u524d\uff0c\u5185\u6838\u6ce8\u610f\u5230\u5f85\u5904\u7406\u7684 SIGCHLD \u4fe1\u53f7\uff0c\u5e76\u901a\u8fc7\u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u5904\u7406\u7a0b\u5e8f\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7 \u5904\u7406\u7a0b\u5e8f\u56de\u6536\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\uff0c\u5e76\u8c03\u7528 deletejob() \uff0c\u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u56e0\u4e3a\u7236\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u628a\u8be5\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u5217\u8868\u4e2d \u5728\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5185\u6838\u8fd0\u884c\u7236\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u4ece fork() \u8fd4\u56de\uff0c\u901a\u8fc7\u8c03\u7528 addjob() \u9519\u8bef\u5730\u628a\uff08\u4e0d\u5b58\u5728\u7684\uff09\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d void handler ( int sig ) { pid_t pid ; while (( pid = waitpid ( - 1 , NULL , 0 )) 0 ) /* Reap a zombie child */ deletejob ( pid ); /* Delete the child from the job list */ if ( errno != ECHILD ) unix_error ( waitpid error ); } int main ( int argc , char ** argv ) { int pid ; Signal ( SIGCHLD , handler ); initjobs (); /* Initialize the job list */ while ( 1 ) { /* Child process */ if (( pid = Fork ()) == 0 ) { Execve ( /bin/date , argv , NULL ); } /* Parent process */ addjob ( pid ); /* Add the child to the job list */ } exit ( 0 ); } \u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u5982\u4e0b, \u901a\u8fc7\u5728\u8c03\u7528 fork() \u4e4b\u524d\uff0c\u963b\u585e SIGCHLD \u4fe1\u53f7\uff0c\u7136\u540e\u5728\u6211\u4eec\u8c03\u7528\u4e86 addjob() \u4e4b\u540e\u5c31\u53d6\u6d88\u963b\u585e\u8fd9\u4e9b\u4fe1\u53f7\uff0c\u6211\u4eec\u4fdd\u8bc1\u4e86\u5728\u5b50\u8fdb\u7a0b\u88ab\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e4b\u540e\u56de\u6536\u8be5\u5b50\u8fdb\u7a0b\u3002\u6ce8\u610f\uff0c\u5b50\u8fdb\u7a0b\u7ee7\u627f\u4e86\u5b83\u4eec\u7236\u8fdb\u7a0b\u7684\u88ab\u963b\u585e\u96c6\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5728\u8c03\u7528 execve() \u4e4b\u524d\uff0c\u5c0f\u5fc3\u5730\u89e3\u9664\u5b50\u8fdb\u7a0b\u4e2d\u963b\u585e\u7684 SIGCHLD \u4fe1\u53f7\u3002\u8fd9\u6837\uff0c\u7236\u8fdb\u7a0b\u4fdd\u8bc1\u5728\u76f8\u5e94\u7684 deletejob() \u4e4b\u524d\u6267\u884c addjob() \u3002 int main ( int argc , char ** argv ) { int pid ; sigset_t mask_all , mask_one , prev_one ; Sigfillset ( mask_all ); Sigemptyset ( mask_one ); Sigaddset ( mask_one , SIGCHLD ); Signal ( SIGCHLD , handler ); initjobs (); /* Initialize the job list */ while ( 1 ) { Sigprocmask ( SIG_BLOCK , mask_one , prev_one ); /* Block SIGCHLD */ if (( pid = Fork ()) == 0 ) { /* Child process */ Sigprocmask ( SIG_SETMASK , prev_one , NULL ); /* Unblock SIGCHLD */ Execve ( /bin/date , argv , NULL ); } Sigprocmask ( SIG_BLOCK , mask_all , NULL ); /* Parent process */ addjob ( pid ); /* Add the child to the job list */ Sigprocmask ( SIG_SETMASK , prev_one , NULL ); /* Unblock SIGCHLD */ } exit ( 0 ); } \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f(signal handler)\u662f\u91cd\u8981\u4e14\u68d8\u624b\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5176\u96be\u70b9\u5728\uff1a \u5904\u7406\u7a0b\u5e8f\u4e0e\u4e3b\u7a0b\u5e8f\u5e76\u53d1\u8fd0\u884c\uff0c\u5171\u4eab\u540c\u6837\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u53ef\u80fd\u4e0e\u4e3b\u7a0b\u5e8f\u548c\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f\u76f8\u4e92\u5e72\u6270\uff1b \u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u63a5\u6536\u4fe1\u53f7\u7684\u89c4\u5219\u5e38\u5e38\u8fdd\u80cc\u4eba\u7684\u76f4\u89c9\u3002 7 \u64cd\u4f5c\u8fdb\u7a0b\u7684\u5de5\u5177 Linux\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u76d1\u63a7\u548c\u64cd\u4f5c\u8fdb\u7a0b\u7684\u6709\u7528\u5de5\u5177\u3002 STRACE\uff1a \u6253\u5370\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u548c\u5b83\u7684\u5b50\u8fdb\u7a0b\u8c03\u7528\u7684\u6bcf\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u8f68\u8ff9 PS\uff1a\u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b(\u5305\u62ec\u50f5\u5c38\u8fdb\u7a0b) TOP: \u6253\u5370\u51fa\u5173\u4e8e\u5f53\u524d\u8fdb\u7a0b\u8d44\u6e90\u4f7f\u7528\u7684\u4fe1\u606f","title":"Chapter 8: \u5f02\u5e38\u63a7\u5236\u6d41"},{"location":"os/csapp/ch8/#chapter-8","text":"\u4ece\u7ed9\u5904\u7406\u5668\u52a0\u7535\u5f00\u59cb\uff0c\u76f4\u5230\u4f60\u65ad\u7535\u4e3a\u6b62\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u5047\u8bbe\u6210\u4e00\u4e2a\u503c\u7684\u5e8f\u5217 a_0, a_1, ..., a_{n-1} a_0, a_1, ..., a_{n-1} \u5176\u4e2d\uff0c\u6bcf\u4e2a a_k a_k \u662f\u67d0\u4e2a\u76f8\u5e94\u7684\u6307\u4ee4 I_k I_k \u7684 \u5730\u5740 \u3002\u6bcf\u6b21\u4ece a_k a_k \u5230 a_{k+1} a_{k+1} \u7684\u8fc7\u6e21\u79f0\u4e3a \u63a7\u5236\u8f6c\u79fb (control transfer)\u3002\u8fd9\u6837\u7684\u63a7\u5236\u8f6c\u79fb\u5e8f\u5217\u53eb\u505a\u5904\u7406\u5668\u7684 \u63a7\u5236\u6d41 (control flow)\u3002 \u73b0\u5728\u7cfb\u7edf\u901a\u8fc7\u4f7f\u63a7\u5236\u6d41\u53d1\u751f\u7a81\u53d8\u6765\u5e94\u5bf9\u7cfb\u7edf\u72b6\u6001\u7684\u53d8\u5316(eg.\u7f3a\u9875\u5f02\u5e38\uff0c\u7f51\u7edc\u7b49\u5f85)\uff0c\u628a\u8fd9\u4e9b\u7a81\u53d8\u79f0\u4e3a \u5f02\u5e38\u63a7\u5236\u6d41 (Exceptional Control Flow, ECF)\u3002","title":"Chapter 8 \u5f02\u5e38\u63a7\u5236\u6d41"},{"location":"os/csapp/ch8/#1","text":"","title":"1 \u5f02\u5e38"},{"location":"os/csapp/ch8/#_1","text":"\u7cfb\u7edf\u4e3a\u6bcf \u7c7b \u53ef\u80fd\u7684\u5f02\u5e38\u90fd\u5206\u914d\u4e86\u4e00\u4e2a\u552f\u4e00\u7684\u975e\u8d1f\u6574\u6570\u7684 \u5f02\u5e38\u53f7 (exception number)\u3002\u5728\u7cfb\u7edf\u542f\u52a8\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5206\u914d\u548c\u521d\u59cb\u5316\u4e00\u5f20\u79f0\u4e3a \u5f02\u5e38\u8868 \u7684\u8df3\u8f6c\u8868\uff0c\u4f7f\u5f97\u8868\u76ee k k \u5305\u542b\u5f02\u5e38 k k \u7684\u5904\u7406\u7a0b\u5e8f\u7684\u5730\u5740\u3002 \u5f53\u68c0\u6d4b\u5230\u53d1\u751f\u4e86\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u5e76\u4e14\u786e\u5b9a\u4e86\u76f8\u5e94\u7684\u5f02\u5e38\u53f7 k k \uff0c\u5904\u7406\u5668\u89e6\u53d1\u5f02\u5e38\uff0c\u6267\u884c\u95f4\u63a5\u8fc7\u7a0b\u8c03\u7528\uff0c\u901a\u8fc7\u5f02\u5e38\u8868\u7684\u8868\u76ee k k \uff0c\u8f6c\u5230\u76f8\u5e94\u7684\u5904\u7406\u7a0b\u5e8f\u3002","title":"\u5f02\u5e38\u7684\u5904\u7406"},{"location":"os/csapp/ch8/#_2","text":"\u5f02\u5e38(exceptions)\u53ef\u4ee5\u5206\u4e3a\u56db\u7c7b\uff1a\u4e2d\u65ad(interrupt)\u3001\u9677\u9631(trap)\u3001\u6545\u969c(fault)\u548c\u7ec8\u6b62(abort)\u3002 \u4e2d\u65ad \u662f\u5f02\u6b65\u53d1\u751f\u7684\uff0c\u662f\u6765\u81ea\u5904\u7406\u5668\u5916\u90e8\u7684I/O\u8bbe\u5907\u7684\u4fe1\u53f7\u7684\u7ed3\u679c\u3002 \u9677\u9631 \u662f\u6709\u610f\u7684\u5f02\u5e38\uff0c\u662f\u6267\u884c\u4e00\u6761\u6307\u4ee4\u7684\u7ed3\u679c\u3002 \u5176\u7528\u9014\u662f\u5728\u7528\u6237\u7a0b\u5e8f\u548c\u5185\u6838\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e2a\u50cf\u8fc7\u7a0b\u4e00\u6837\u7684\u63a5\u53e3(\u7cfb\u7edf\u8c03\u7528) \u6545\u969c \u662f\u7531\u9519\u8bef\u60c5\u51b5\u5f15\u8d77\u7684\uff0c\u53ef\u80fd\u80fd\u591f\u88ab\u6545\u969c\u5904\u7406\u7a0b\u5e8f\u4fee\u6b63\u3002 \u4f8b\u5982\u7f3a\u9875\u5f02\u5e38 \u7ec8\u6b62 \u662f\u4e0d\u53ef\u6062\u590d\u7684\u81f4\u547d\u9519\u8bef\u9020\u6210\u7684\u7ed3\u679c\uff0c\u901a\u5e38\u662f\u4e00\u4e9b\u786c\u4ef6\u9519\u8bef\u3002","title":"\u5f02\u5e38\u7684\u7c7b\u522b"},{"location":"os/csapp/ch8/#2","text":"\u8fdb\u7a0b (Process)\u7684\u7ecf\u5178\u5b9a\u4e49\u5c31\u662f \u4e00\u4e2a\u6267\u884c\u4e2d\u7a0b\u5e8f\u7684\u5b9e\u4f8b (A process is a program in execuation) \u3002\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u8fd0\u884c\u5728\u67d0\u4e2a\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587(context)\u4e2d\u3002\u4e0a\u4e0b\u6587\u662f\u7531\u7a0b\u5e8f\u6b63\u786e\u8fd0\u884c\u6240\u9700\u7684\u72b6\u6001\u7ec4\u6210\u7684\u3002\u8fd9\u4e2a\u72b6\u6001\u5305\u62ec\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u7a0b\u5e8f\u7684\u4ee3\u7801\u548c\u6570\u636e\uff0c\u5b83\u7684\u6808\u3001\u901a\u7528\u76ee\u7684\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u73af\u5883\u53d8\u91cf\u4ee5\u53ca\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u96c6\u5408\u3002 \u8fdb\u7a0b\u63d0\u4f9b\u4e86\u5e94\u7528\u7a0b\u5e8f\u4e24\u4e2a\u5173\u952e\u62bd\u8c61\uff1a \u4e00\u4e2a \u72ec\u7acb \u7684\u903b\u8f91\u63a7\u5236\u6d41\uff0c\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61\uff0c\u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u5730\u4f7f\u7528\u5904\u7406\u5668\u3002 \u4e00\u4e2a \u79c1\u6709 \u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5b83\u63d0\u4f9b\u4e00\u4e2a\u5047\u8c61\uff0c\u597d\u50cf\u6211\u4eec\u7684\u7a0b\u5e8f\u72ec\u5360\u5730\u4f7f\u7528\u5185\u5b58\u7cfb\u7edf\u3002","title":"2 \u8fdb\u7a0b"},{"location":"os/csapp/ch8/#_3","text":"\u903b\u8f91\u63a7\u5236\u6d41 (Logical Control Flow\uff0c\u7b80\u79f0\u903b\u8f91\u6d41)\u662fPC\u503c\u7684\u5e8f\u5217\u3002","title":"\u903b\u8f91\u63a7\u5236\u6d41"},{"location":"os/csapp/ch8/#_4","text":"\u4e00\u4e2a\u903b\u8f91\u6d41\u7684\u6267\u884c\u5728\u65f6\u95f4\u4e0a\u4e0e\u53e6\u4e00\u4e2a\u6d41\u91cd\u53e0\uff0c\u79f0\u4e3a \u5e76\u53d1\u6d41 (concurrent flow)\uff0c\u8fd9\u4e24\u4e2a\u6d41\u88ab\u79f0\u4e3a \u5e76\u53d1\u5730\u8fd0\u884c \u3002","title":"\u5e76\u53d1\u6d41"},{"location":"os/csapp/ch8/#_5","text":"\u8fdb\u7a0b\u4e3a\u6bcf\u4e2a\u7a0b\u5e8f\u63d0\u4f9b\u5b83\u81ea\u5df1\u7684 \u79c1\u6709\u5730\u5740\u7a7a\u95f4 \u3002\u4e00\u822c\u800c\u8a00\uff0c\u548c\u8fd9\u4e2a\u7a7a\u95f4\u4e2d\u67d0\u4e2a\u5730\u5740\u76f8\u5173\u8054\u7684\u90a3\u4e2a\u5185\u5b58\u5b57\u8282\u662f\u4e0d\u80fd\u88ab\u5176\u4ed6\u8fdb\u7a0b\u8bfb\u6216\u8005\u5199\u7684\uff0c\u4ece\u8fd9\u4e2a\u610f\u4e49\u4e0a\u8bf4\uff0c\u8fd9\u4e2a\u5730\u5740\u7a7a\u95f4\u662f\u79c1\u6709\u7684\u3002","title":"\u79c1\u6709\u5730\u5740\u7a7a\u95f4"},{"location":"os/csapp/ch8/#_6","text":"\u5904\u7406\u5668\u901a\u5e38\u662f\u7528\u67d0\u4e2a\u63a7\u5236\u5bc4\u5b58\u5668\u4e2d\u7684\u4e00\u4e2a \u6a21\u5f0f\u4f4d (mode bit)\u6765\u63a7\u5236\u7528\u6237/\u5185\u6838\u6a21\u5f0f\u3002\u5f53\u8bbe\u7f6e\u4e86\u6a21\u5f0f\u4f4d\u65f6\uff0c\u8fdb\u7a0b\u5c31\u8fd0\u884c\u5728 \u5185\u6838\u6a21\u5f0f \u4e2d\uff0c\u5426\u5219\u8fd0\u884c\u5728 \u7528\u6237\u6a21\u5f0f \u4e2d\u3002 \u8fd0\u884c\u5728\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u53ef\u4ee5\u6267\u884c\u6307\u4ee4\u96c6\u4e2d\u7684\u4efb\u4f55\u6307\u4ee4\uff0c\u53ef\u4ee5\u8bbf\u95ee\u4efb\u4f55\u5185\u5b58\u4f4d\u7f6e\u3002\u7528\u6237\u6a21\u5f0f\u4e2d\u7684\u8fdb\u7a0b\u4e0d\u5141\u8bb8\u6267\u884c\u7279\u6743\u6307\u4ee4\uff0c\u4e5f\u4e0d\u5141\u8bb8\u76f4\u63a5\u5f15\u7528\u5730\u5740\u7a7a\u95f4\u4e2d\u5185\u6838\u533a\u7684\u4ee3\u7801\u548c\u6570\u636e\u3002","title":"\u7528\u6237\u6a21\u5f0f\u548c\u5185\u6838\u6a21\u5f0f"},{"location":"os/csapp/ch8/#3","text":"","title":"3 \u7cfb\u7edf\u8c03\u7528\u9519\u8bef\u5904\u7406"},{"location":"os/csapp/ch8/#4","text":"\u8fdb\u7a0b\u63a7\u5236\u5305\u62ec\u83b7\u53d6\u8fdb\u7a0bID\u3001\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b\u3001\u56de\u6536\u5b50\u8fdb\u7a0b\u3001\u8ba9\u8fdb\u7a0b\u4f11\u7720\u3001\u52a0\u8f7d\u5e76\u8fd0\u884c\u7a0b\u5e8f\u7b49\u3002\u8fd9\u4e00\u8282\u5c06\u63cf\u8ff0Unix\u63d0\u4f9b\u4e86\u63a7\u5236\u8fdb\u7a0b\u7684\u7cfb\u7edf\u8c03\u7528\u3002","title":"4 \u8fdb\u7a0b\u63a7\u5236"},{"location":"os/csapp/ch8/#id","text":"\u6bcf\u4e00\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6574\u6570(\u975e\u96f6)\u8fdb\u7a0bID(PID)\u3002 getpid \u51fd\u6570\u8fd4\u56de\u8c03\u7528\u8fdb\u7a0b\u7684PID\u3002 getppid \u51fd\u6570\u8fd4\u56de\u5b83\u7684\u7236\u8fdb\u7a0b\u7684PID\u3002 #include sys/types.h #include unistd.h pid_t getpid ( void ); pit_t getppid ( void );","title":"\u83b7\u53d6\u8fdb\u7a0bID"},{"location":"os/csapp/ch8/#_7","text":"\u7236\u8fdb\u7a0b \u901a\u8fc7\u8c03\u7528fork\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fd0\u884c\u7684 \u5b50\u8fdb\u7a0b \u3002 #include sys/types.h #include unistd.h pid_t fork ( void ); \u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u51e0\u4e4e\u4f46\u4e0d\u5b8c\u5168\u4e0e\u7236\u8fdb\u7a0b\u76f8\u540c\uff1a \u76f8\u540c\u4f46\u662f\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4 \uff1a\u5b50\u8fdb\u7a0b\u83b7\u5f97\u7236\u8fdb\u7a0b\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4efd\u526f\u672c \u5171\u4eab\u6587\u4ef6 \uff1a\u5b50\u8fdb\u7a0b\u83b7\u5f97\u7236\u8fdb\u7a0b\u6253\u5f00\u6587\u4ef6\u63cf\u8ff0\u7b26\u76f8\u540c\u7684\u526f\u672c \u5b50\u8fdb\u7a0b\u4e0e\u7236\u8fdb\u7a0bpid\u4e0d\u540c","title":"\u521b\u5efa\u548c\u7ec8\u6b62\u8fdb\u7a0b"},{"location":"os/csapp/ch8/#_8","text":"\u8fdb\u7a0b\u5728\u7ec8\u6b62\u540e\uff0c\u5e76\u4e0d\u4f1a\u88ab\u5185\u6838\u4ece\u7cfb\u7edf\u4e2d\u6e05\u9664\uff0c\u800c\u662f\u4fdd\u6301\u8fd9\u79cd\u72b6\u6001\uff0c\u76f4\u5230\u88ab\u5b83\u7684\u7236\u8fdb\u7a0b \u56de\u6536 (reaped)\u3002 \u4e00\u4e2a\u7ec8\u6b62\u4e86\u4f46\u8fd8\u672a\u88ab\u56de\u6536\u7684\u8fdb\u7a0b\u79f0\u4e3a \u50f5\u6b7b\u8fdb\u7a0b (zombie)\u3002 \u5373\u4f7f\u50f5\u6b7b\u8fdb\u7a0b\u6ca1\u6709\u8fd0\u884c\uff0c\u5b83\u4ecd\u7136\u6d88\u8017\u7cfb\u7edf\u7684\u5185\u5b58\u8d44\u6e90\u3002 \u901a\u8fc7\u8c03\u7528 waitpid \u51fd\u6570\u6765\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u6216\u8005\u505c\u6b62\u3002","title":"\u56de\u6536\u5b50\u8fdb\u7a0b"},{"location":"os/csapp/ch8/#_9","text":"sleep \u51fd\u6570\u5c06\u4e00\u4e2a\u8fdb\u7a0b\u6302\u8d77\u4e00\u6bb5\u5236\u5b9a\u7684\u65f6\u95f4\u3002 #include unistd.n unsigned int sleep ( unsigned int secs );","title":"\u8fdb\u7a0b\u4f11\u7720"},{"location":"os/csapp/ch8/#_10","text":"execve \u51fd\u6570\u5728\u5f53\u524d\u8fdb\u7a0b\u7684\u4e0a\u4e0b\u6587\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u4e00\u4e2a\u65b0\u7a0b\u5e8f\u3002 * execve \u8c03\u7528\u4e00\u6b21\u5e76\u4ece\u4e0d\u8fd4\u56de\u3002","title":"\u52a0\u8f7d\u5e76\u8fd0\u884c\u7a0b\u5e8f"},{"location":"os/csapp/ch8/#5","text":"Linux \u4fe1\u53f7 \uff0c\u901a\u77e5\u8fdb\u7a0b\u7cfb\u7edf\u4e2d\u53d1\u751f\u4e00\u4e2a\u67d0\u79cd\u7c7b\u578b\u7684\u4e8b\u4ef6\u3002\u6bcf\u79cd\u4fe1\u53f7\u7c7b\u578b\u90fd\u5bf9\u5e94\u4e8e\u67d0\u79cd\u7cfb\u7edf\u4e8b\u4ef6\u3002\u4f4e\u5c42\u7684\u786c\u4ef6\u5f02\u5e38\u662f\u7531\u5185\u6838\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u5904\u7406\u7684\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u5bf9\u7528\u6237\u8fdb\u7a0b\u800c\u8a00\u662f\u4e0d\u53ef\u89c1\u7684\u3002\u4e0b\u9762\u662fLinux\u7cfb\u7edf\u4e0a\u5e38\u89c1\u7684\u4fe1\u53f7\uff1a \u5e38\u89c1\u7684\u4fe1\u53f7 \uff1a \u7f16\u53f7 \u540d\u79f0 \u9ed8\u8ba4\u52a8\u4f5c \u5bf9\u5e94\u4e8b\u4ef6 2 SIGINT \u7ec8\u6b62 \u6765\u81ea\u952e\u76d8\u7684\u4e2d\u65adCTRL+C 3 SIGQUIT \u7ec8\u6b62 \u6765\u81ea\u952e\u76d8\u7684\u9000\u51faCTRL+\\ 9 SIGKILL \u7ec8\u6b62 \u6740\u6b7b\u7a0b\u5e8f \\bin\\kill -9 11 SIGSEGV \u7ec8\u6b62\u5e76\u8f6c\u50a8\u5185\u5b58 \u6bb5\u6545\u969c(\u65e0\u6548\u7684\u5185\u5b58\u5f15\u7528) 15 SIGTERM \u7ec8\u6b62 \u8f6f\u4ef6\u7ec8\u6b62\u4fe1\u53f7 \\bin\\kill 17 SIGCHLD \u5ffd\u7565 \u5b50\u8fdb\u7a0b\u505c\u6b62\u6216\u7ec8\u6b62 18 SIGCONT \u5ffd\u7565 \u7ee7\u7eed\u8fdb\u7a0b\u5982\u679c\u8be5\u8fdb\u7a0b\u505c\u6b62 20 SIGTSTP \u505c\u6b62\u76f4\u5230\u4e0b\u4e00\u4e2aSIGCONT \u7528\u6237\u8f93\u5165CTRL+Z \u8be6\u7ec6\u4fe1\u606f\u53ef\u4ee5\u901a\u8fc7 man 7 signal \u67e5\u8be2\u3002","title":"5 \u4fe1\u53f7"},{"location":"os/csapp/ch8/#_11","text":"\u4f20\u9001\u4e00\u4e2a\u4fe1\u53f7\u5230\u76ee\u7684\u8fdb\u7a0b\u7531\u53d1\u9001\u3001\u63a5\u6536\u4fe1\u53f7\u4e24\u4e2a\u6b65\u9aa4\u7ec4\u6210\uff1a \u53d1\u9001\u4fe1\u53f7\u3002\u5185\u6838\u901a\u8fc7\u66f4\u65b0\u76ee\u7684\u8fdb\u7a0b\u4e0a\u4e0b\u6587\u4e2d\u7684\u67d0\u4e2a\u72b6\u6001\uff0c\u53d1\u9001(\u9012\u9001)\u4e00\u4e2a\u4fe1\u53f7\u7ed9\u76ee\u7684\u8fdb\u7a0b\u3002 \u63a5\u6536\u4fe1\u53f7\u3002\u5f53\u76ee\u7684\u8fdb\u7a0b\u88ab\u5185\u6838\u5f3a\u8feb\u5df2\u67d0\u79cd\u65b9\u5f0f\u5bf9\u4fe1\u53f7\u7684\u53d1\u9001\u505a\u51fa\u53cd\u5e94\u65f6\uff0c\u5b83\u5c31\u63a5\u6536\u4e86\u4fe1\u53f7\u3002\u8fdb\u7a0b\u53ef\u4ee5\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u7ec8\u6b62\u6216\u8005\u901a\u8fc7\u6267\u884c\u4e00\u4e2a\u79f0\u4e3a \u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f \u7684\u7528\u6237\u5c42\u51fd\u6570\u6355\u83b7\u8fd9\u4e2a\u4fe1\u53f7\u3002","title":"\u53d1\u9001/\u63a5\u6536\u4fe1\u53f7"},{"location":"os/csapp/ch8/#_12","text":"\u53d1\u9001\u4fe1\u53f7\u53ef\u4ee5\u7531\u4ee5\u4e0b\u539f\u56e0\u5f15\u8d77\uff1a \u7528\u6237\uff1a\u7528\u6237\u80fd\u591f\u901a\u8fc7\u8f93\u5165 CTRL+c ( SIGINT )\u3001 Ctrl+z ( SIGTSTP )\uff0c\u6216\u8005\u662f\u7ec8\u7aef\u9a71\u52a8\u7a0b\u5e8f\u5206\u914d\u7ed9\u4fe1\u53f7\u63a7\u5236\u5b57\u7b26\u7684\u5176\u4ed6\u4efb\u4f55\u952e\u6765\u8bf7\u6c42\u5185\u6838\u4ea7\u751f\u4fe1\u53f7\uff1b \u5185\u6838\uff1a\u5f53\u8fdb\u7a0b\u6267\u884c\u51fa\u9519\u65f6\uff0c\u5185\u6838\u4f1a\u7ed9\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff0c\u4f8b\u5982\u975e\u6cd5\u6bb5\u5b58\u53d6(\u5185\u5b58\u8bbf\u95ee\u8fdd\u89c4)\u3001\u6d6e\u70b9\u6570\u6ea2\u51fa\u7b49\uff1b \u8fdb\u7a0b\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u7cfb\u7edf\u8c03\u7528kill\u7ed9\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u6216\u81ea\u5df1\u53d1\u9001\u4fe1\u53f7\u3002","title":"\u53d1\u9001\u4fe1\u53f7"},{"location":"os/csapp/ch8/#_13","text":"\u5f53\u5185\u6838\u628a\u8fdb\u7a0b p p \u4ece\u5185\u6838\u6a21\u5f0f\u5207\u6362\u5230\u7528\u6237\u6a21\u5f0f\u65f6\uff0c\u5b83\u4f1a\u68c0\u67e5\u8fdb\u7a0b p p \u7684\u672a\u88ab\u963b\u585e\u7684\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408( pending ~blocked ,\u89c1\u4e0b\u6587)\uff0c\u5982\u679c\u96c6\u5408\u975e\u7a7a\uff0c\u90a3\u4e48\u5185\u6838\u5f3a\u5236 p p \u63a5\u6536\u4fe1\u53f7\uff0c\u89e6\u53d1\u8fdb\u7a0b\u91c7\u53d6\u67d0\u79cd\u884c\u4e3a\u3002 \u8fdb\u7a0b\u63a5\u6536\u5230\u4fe1\u53f7\u4ee5\u540e\uff0c\u53ef\u4ee5\u6709\u5982\u4e0b3\u79cd\u9009\u62e9\u8fdb\u884c\u5904\u7406\uff1a \u63a5\u6536\u9ed8\u8ba4\u5904\u7406\uff1a\u63a5\u6536\u9ed8\u8ba4\u5904\u7406\u7684\u8fdb\u7a0b\u901a\u5e38\u4f1a\u5bfc\u81f4\u8fdb\u7a0b\u672c\u8eab\u6d88\u4ea1\u3002\u4f8b\u5982\u8fde\u63a5\u5230\u7ec8\u7aef\u7684\u8fdb\u7a0b\uff0c\u7528\u6237\u6309\u4e0bCTRL+c\uff0c\u5c06\u5bfc\u81f4\u5185\u6838\u5411\u8fdb\u7a0b\u53d1\u9001\u4e00\u4e2aSIGINT\u7684\u4fe1\u53f7\uff0c\u8fdb\u7a0b\u5982\u679c\u4e0d\u5bf9\u8be5\u4fe1\u53f7\u505a\u7279\u6b8a\u7684\u5904\u7406\uff0c\u7cfb\u7edf\u5c06\u91c7\u7528\u9ed8\u8ba4\u7684\u65b9\u5f0f\u5904\u7406\u8be5\u4fe1\u53f7\uff0c\u5373\u7ec8\u6b62\u8fdb\u7a0b\u7684\u6267\u884c\uff1b \u5ffd\u7565\u4fe1\u53f7\uff1a\u8fdb\u7a0b\u53ef\u4ee5\u901a\u8fc7\u4ee3\u7801\uff0c\u663e\u793a\u5730\u5ffd\u7565\u67d0\u4e2a\u4fe1\u53f7\u7684\u5904\u7406\uff0c\u4f8b\u5982\uff1a signal(SIGINT,SIGDEF) \uff1b\u4f46\u662f\u67d0\u4e9b\u4fe1\u53f7\u662f\u4e0d\u80fd\u88ab\u5ffd\u7565\u7684\uff0c \u6355\u83b7\u4fe1\u53f7\u5e76\u5904\u7406\uff1a\u5f53\u63a5\u6536\u5230\u4fe1\u53f7\u65f6\uff0c\u7531\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f\u81ea\u52a8\u6355\u83b7\u5e76\u4e14\u5904\u7406\u4fe1\u53f7\u3002 sighandler_t signal ( int signum , sighandler_t handler ); \u6709\u4e24\u4e2a\u4fe1\u53f7\u65e2\u4e0d\u80fd\u88ab\u5ffd\u7565\u4e5f\u4e0d\u80fd\u88ab\u6355\u83b7\uff0c\u5b83\u4eec\u662f SIGKILL \u548c SIGSTOP \u3002\u5373\u8fdb\u7a0b\u63a5\u6536\u5230\u8fd9\u4e24\u4e2a\u4fe1\u53f7\u540e\uff0c\u53ea\u80fd\u63a5\u53d7\u7cfb\u7edf\u7684\u9ed8\u8ba4\u5904\u7406\uff0c\u5373\u7ec8\u6b62\u7ebf\u7a0b\u3002","title":"\u63a5\u6536\u4fe1\u53f7"},{"location":"os/csapp/ch8/#_14","text":"\u4e00\u4e2a\u53d1\u51fa\u800c\u6ca1\u6709\u88ab\u63a5\u53d7\u7684\u4fe1\u53f7\u53eb\u505a \u672a\u5904\u7406\u4fe1\u53f7 \uff08Pending Signal\uff09\u3002\u8fdb\u7a0b\u53ef\u4ee5\u9009\u62e9\u963b\u585e\uff08Block\uff09\u67d0\u4e2a\u4fe1\u53f7\u3002\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u4ea7\u751f\u65f6\u5c06\u4fdd\u6301\u5728\u672a\u5904\u7406\u72b6\u6001\uff0c\u76f4\u5230\u8fdb\u7a0b\u89e3\u9664\u5bf9\u6b64\u4fe1\u53f7\u7684\u963b\u585e\uff0c\u624d\u6267\u884c\u63a5\u6536\u7684\u52a8\u4f5c\u3002\u963b\u585e\u548c\u5ffd\u7565\u662f\u4e0d\u540c\u7684\uff0c \u53ea\u8981\u4fe1\u53f7\u88ab\u963b\u585e\u5c31\u4e0d\u4f1a\u63a5\u6536 \uff0c\u800c\u5ffd\u7565\u662f\u5728\u63a5\u6536\u4e4b\u540e\u53ef\u9009\u7684\u4e00\u79cd\u5904\u7406\u52a8\u4f5c\u3002 Linux\u63d0\u4f9b\u963b\u585e\u4fe1\u53f7\u7684\u9690\u5f0f\u548c\u663e\u5f0f\u673a\u5236: \u9690\u5f0f\u963b\u585e\u673a\u5236 \uff1a\u5185\u6838\u9ed8\u8ba4\u963b\u585e\u4efb\u4f55\u5f53\u524d\u5904\u7406\u7a0b\u5e8f\u6b63\u5728\u5904\u7406\u4fe1\u53f7\u7c7b\u578b\u7684\u5f85\u5904\u7406\u7684\u4fe1\u53f7\u3002\u5982\u679c\u5728\u8fdb\u7a0b\u89e3\u9664\u5bf9\u67d0\u4fe1\u53f7\u7684\u963b\u585e\u4e4b\u524d\u8fd9\u79cd\u4fe1\u53f7\u4ea7\u751f\u8fc7\u591a\u6b21\uff0c\u53ea\u8ba1\u4e00\u6b21\u3002\u56e0\u4e3a\u6bcf\u4e2a\u4fe1\u53f7\u53ea\u6709\u4e00\u4e2abit\u7684\u672a\u5904\u7406\u6807\u5fd7(\u5982\u4e0b\u56fe)\uff0c\u975e0\u53731\uff0c\u4e0d\u8bb0\u5f55\u8be5\u4fe1\u53f7\u4ea7\u751f\u4e86\u591a\u5c11\u6b21\uff0c\u963b\u585e\u6807\u5fd7\u4e5f\u662f\u8fd9\u6837\u8868\u793a\u7684\u3002 \u663e\u5f0f\u963b\u585e\u673a\u5236 \uff1a\u5e94\u7528 sigprocmask \u51fd\u6570\uff0c\u660e\u786e\u5730\u963b\u585e\u548c\u89e3\u9664\u963b\u585e\u9009\u5b9a\u7684\u4fe1\u53f7\u3002 \u5185\u6838\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u5728 pending\u4f4d\u5411\u91cf \u4e2d\u7ef4\u62a4\u7740\u5f85\u5904\u7406\u4fe1\u53f7\u7684\u96c6\u5408\uff0c\u800c\u5728 blocked\u4f4d\u5411\u91cf \u4e2d\u7ef4\u62a4\u7740\u88ab\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5408\u3002\u4fe1\u53f7\u5728\u5185\u6838\u4e2d\u7684\u8868\u793a\u53ef\u4ee5\u770b\u4f5c\u662f\u8fd9\u6837\u7684\uff1a \u6bcf\u4e2a\u4fe1\u53f7\u90fd\u6709\u4e24\u4e2a\u6807\u5fd7\u4f4d\u5206\u522b\u8868\u793a\u963b\u585e\u548c\u672a\u5904\u7406\uff0c\u8fd8\u6709\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u8868\u793a\u5904\u7406\u52a8\u4f5c\u3002\u4fe1\u53f7\u4ea7\u751f\u65f6\uff0c\u5185\u6838\u5728\u8fdb\u7a0b\u63a7\u5236\u5757\u4e2d\u8bbe\u7f6e\u8be5\u4fe1\u53f7\u7684\u672a\u5904\u7406\u6807\u5fd7\uff0c\u76f4\u5230\u4fe1\u53f7\u63a5\u6536\u624d\u6e05\u9664\u8be5\u6807\u5fd7\u3002\u5728\u4e0a\u56fe\u7684\u4f8b\u5b50\u4e2d\uff0c SIGHUP\u4fe1\u53f7\u672a\u963b\u585e\u4e5f\u672a\u4ea7\u751f\u8fc7\uff0c\u5f53\u5b83\u63a5\u6536\u65f6\u6267\u884c\u9ed8\u8ba4\u5904\u7406\u52a8\u4f5c\u3002 SIGINT\u4fe1\u53f7\u4ea7\u751f\u8fc7\uff0c\u4f46\u6b63\u5728\u88ab\u963b\u585e\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u80fd\u63a5\u6536\u3002\u867d\u7136\u5b83\u7684\u5904\u7406\u52a8\u4f5c\u662f\u5ffd\u7565\uff0c\u4f46\u5728\u6ca1\u6709\u89e3\u9664\u963b\u585e\u4e4b\u524d\u4e0d\u80fd\u5ffd\u7565\u8fd9\u4e2a\u4fe1\u53f7\uff0c\u56e0\u4e3a\u8fdb\u7a0b\u4ecd\u6709\u673a\u4f1a\u6539\u53d8\u5904\u7406\u52a8\u4f5c\u4e4b\u540e\u518d\u89e3\u9664\u963b\u585e\u3002 SIGQUIT\u4fe1\u53f7\u672a\u4ea7\u751f\u8fc7\uff0c\u4e00\u65e6\u4ea7\u751fSIGQUIT\u4fe1\u53f7\u5c06\u88ab\u963b\u585e\uff0c\u5b83\u8c03\u7528\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f sighandler \u3002","title":"\u963b\u585e\u4fe1\u53f7\u548c\u8fdb\u7a0b\u56de\u6536"},{"location":"os/csapp/ch8/#_15","text":"\u5f53\u591a\u4e2a\u672a\u5904\u7406\u4fe1\u53f7( pending signal )\u5230\u8fbe\u65f6\uff0c\u7531\u4e8e\u4fe1\u53f7\u5e76\u4e0d\u4f1a\u4ea7\u751f\u6392\u961f\u7b49\u5f85\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u6240\u4ee5\u4ea7\u751f\u7684\u6548\u679c\u4ec5\u76f8\u5f53\u4e8e\u4e00\u4e2a\u672a\u5904\u7406\u4fe1\u53f7(\u4e5f\u5c31\u662f\u5bf9\u5e94\u7684 pending \u4f4d\u6807\u8bb0\u4e3a1\uff0c\u4f8b\u5982\u4e0a\u56fe\u4e2d\u7684 SIGINT \u4fe1\u53f7)\u3002 \u8fd9\u6837\u5e26\u6765\u51e0\u4e2a\u95ee\u9898\uff1a \u4e0d\u80fd\u7528\u4fe1\u53f7\u6765\u5bf9\u5176\u4ed6\u8fdb\u7a0b\u4e2d\u53d1\u751f\u7684\u4e8b\u4ef6\u8ba1\u6570\uff0c\u8fd9\u662f\u663e\u800c\u6613\u89c1\u7684 \u5728\u56de\u6536\u5b50\u8fdb\u7a0b\u65f6\uff0c\u8981\u56de\u6536\u5c3d\u53ef\u80fd\u591a\u7684\u5b50\u8fdb\u7a0b\u3002\u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f8b\u5b50\u3002 void handler1 ( int sig ) { pid_t pid ; if (( pid = waitpid ( - 1 , NULL , 0 )) 0 ) unix_error ( waitpid error ); printf ( Handler reaped child %d \\n , ( int ) pid ); Sleep ( 2 ); return ; } /* $begin signal2 */ void handler2 ( int sig ) { int olderrno = errno ; while ( waitpid ( - 1 , NULL , 0 ) 0 ) { Sio_puts ( Handler reaped child \\n ); } // waitpid()\u51fd\u6570\u6709\u53ef\u80fd\u56e0\u4e3a\u627e\u4e0d\u5230\u5b50\u8fdb\u7a0b\u800c\u62a5ECHILD\u9519\u8bef if ( errno != ECHILD ) Sio_error ( waitpid error ); Sleep ( 1 ); errno = olderrno ; } /* $end signal2 */ int main () { int i , n ; char buf [ MAXBUF ]; if ( signal ( SIGCHLD , handler2 ) == SIG_ERR ) //handler2 \u6216\u8005 handler1 unix_error ( signal error ); /* Parent creates children */ for ( i = 0 ; i 3 ; i ++ ) { if ( Fork () == 0 ) { printf ( Hello from child %d \\n , ( int ) getpid ()); exit ( 0 ); } } /* Parent waits for terminal input and then processes it */ if (( n = read ( STDIN_FILENO , buf , sizeof ( buf ))) 0 ) unix_error ( read ); printf ( Parent processing input \\n ); while ( 1 ) ; exit ( 0 ); } \u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7236\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e9b\u5b50\u8fdb\u7a0b\uff0c\u8fd9\u4e9b\u5b50\u8fdb\u7a0b\u5404\u81ea\u72ec\u7acb\u8fd0\u884c\u4e00\u6bb5\u65f6\u95f4\uff0c\u7136\u540e\u7ec8\u6b62\u3002\u7528 SIGCHLD \u5904\u7406\u7a0b\u5e8f\u6765\u56de\u6536\u5b50\u8fdb\u7a0b\uff0c\u5176\u4e2d handler1 \u662f\u9519\u8bef\u7684\uff0c\u4f1a\u4ea7\u751f\u50f5\u6b7b\u5b50\u8fdb\u7a0b\u3002 handler2 \u662f\u5b89\u5168\u7684\u3002\u539f\u56e0\u662f\u5728 handler1 \u4e2d\uff0c\u53ef\u80fd\u5b58\u5728\u5b50\u8fdb\u7a0b\u5148\u88ab\u6267\u884c\uff0c\u4ea7\u751f SIGCHLD \u4fe1\u53f7\uff1b\u4f46\u662f\u5728\u5b50\u8fdb\u7a0b\u8fd8\u672a\u88ab\u56de\u6536\u4e4b\u524d\uff0c\u53c8\u6709\u591a\u4e2a\u5b50\u8fdb\u7a0b\u88ab\u6267\u884c\uff0c\u4ea7\u751f\u591a\u4e2a SIGCHLD \u4fe1\u53f7\u3002\u4e8e\u662f\u591a\u4f59\u7684\u672a\u5904\u7406 SIGCHLD \u4fe1\u53f7\u5c31\u88ab\u629b\u5f03\uff0c\u53ea\u76f8\u5f53\u4e8e\u4e00\u4e2a SIGCHLD \u4fe1\u53f7\u3002\u6700\u7ec8\u4f1a\u9020\u6210\u6709\u7684\u5b50\u8fdb\u7a0b\u672a\u88ab\u56de\u6536\uff0c\u4ea7\u751f\u50f5\u6b7b\u5b50\u8fdb\u7a0b\u3002 \u6267\u884c\u7684\u53ef\u80fd\u7ed3\u679c\u5982\u4e0b\uff0c\u53ef\u4ee5\u770b\u5230\u7236\u8fdb\u7a0b\u53ea\u56de\u6536\u4e86\u4e24\u4e2a\u5b50\u8fdb\u7a0b\u3002 Hello from child 5617 Hello from child 5616 Hello from child 5618 Handler reaped child Handler reaped child Parent processing input","title":"\u9690\u5f0f\u963b\u585e\u673a\u5236"},{"location":"os/csapp/ch8/#_16","text":"\u6709\u65f6\u5019\u4e0d\u5e0c\u671b\u5728\u53d1\u9001\u4fe1\u53f7\u540e\u5c31\u7acb\u5373\u53bb\u63a5\u6536\u3001\u5904\u7406\u4fe1\u53f7\uff0c\u540c\u65f6\u4e5f\u4e0d\u5e0c\u671b\u5ffd\u7565\u8be5\u4fe1\u53f7\uff0c\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7 sigprocmask \u663e\u5f0f\u5730\u963b\u585e\u4fe1\u53f7\u4ece\u800c\u5b9e\u73b0\u5ef6\u8fdf\u63a5\u6536\u4fe1\u53f7\u3002 \u51fd\u6570 sigprocmask \u53ef\u4ee5\u66f4\u6539\u5f53\u524d\u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5408(\u5373blocked\u4f4d\u5411\u91cf): int sigprocmask ( int how , const sigset_t * set , sigset_t * oldset ); \u5176\u5177\u4f53\u884c\u4e3a\u4f9d\u8d56\u4e8ehow\u503c\uff1a SIG_BLOCK, blocked = blocked | set //\u6dfb\u52a0set\u4fe1\u53f7 SIG_UNBLOCK, blocked = blocked ~set //\u5220\u9664set\u4fe1\u53f7 SIG_SETMASK, block = set //\u8bbe\u7f6eset\u4fe1\u53f7\u4e3a\u963b\u585e\u7684\u4fe1\u53f7 \u963b\u585e\u7684\u4fe1\u53f7\u96c6\u5408\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u65e0\u7b26\u53f7\u6574\u578b\u6570\u7ec4(\u5728x86-64\u4e0a\uff0c\u6570\u7ec4\u957f\u5ea6\u662f16)\u3002 /* A `sigset_t has a bit for each signal. */ # define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int))) typedef struct { unsigned long int __val [ _SIGSET_NWORDS ]; } sigset_t ; \u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u51fd\u6570\u53ef\u4ee5\u5bf9\u4fe1\u53f7\u96c6\u8fdb\u884c\u64cd\u4f5c\uff1a int sigfillset ( sigset_t * set ); // \u4fe1\u53f7\u96c6\u521d\u59cb\u5316, \u7136\u540e\u628a\u6240\u6709\u7684\u4fe1\u53f7\u52a0\u5165\u5230\u6b64\u4fe1\u53f7\u96c6\u91cc int sigemptyset ( sigset_t * set ); //\u4fe1\u53f7\u96c6\u521d\u59cb\u5316\u4e3a\u7a7a int sigaddset ( sigset_t * set , int signo ); //\u5c06\u4fe1\u53f7signo\u6dfb\u52a0\u5230\u4fe1\u53f7\u96c6\u4e2d \u4e0b\u9762\u770b\u4e2a\u4f8b\u5b50, \u662f\u4e00\u4e2a\u5177\u6709\u7ec6\u5fae\u540c\u6b65\u9519\u8bef\u7684SHELL\u7a0b\u5e8f\u3002\u5982\u679c\u5b50\u8fdb\u7a0b\u5728\u7236\u8fdb\u7a0b\u80fd\u591f\u5f00\u59cb\u8fd0\u884c\u524d\u5c31\u7ed3\u675f\u4e86\uff0c\u90a3\u4e48 addjob() \u548c deletejob() \u4f1a\u4ee5\u9519\u8bef\u7684\u65b9\u5f0f\u88ab\u8c03\u7528\u3002\u8fd9\u4e2a\u7a0b\u5e8f\u5e0c\u671b\u7236\u8fdb\u7a0b\u5728\u4e00\u4e2a\u4f5c\u4e1a\u5217\u8868\u4e2d\u8bb0\u5f55\u7740\u5b83\u7684\u5f53\u524d\u5b50\u8fdb\u7a0b\uff0c\u6bcf\u4e2a\u4f5c\u4e1a\u6761\u76ee\u3002 addjob() \u548c deletejob() \u5206\u522b\u60f3\u8fd9\u4e2a\u4f5c\u4e1a\u5217\u8868\u6dfb\u52a0\u548c\u4ece\u4e2d\u5220\u9664\u4f5c\u4e1a\u3002\u5f53\u7236\u8fdb\u7a0b\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5b50\u8fdb\u7a0b\u65f6\uff0c\u5b83\u5c31\u628a\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d\u3002\u5f53\u7236\u8fdb\u7a0b\u5728 SIGCHLD \u5904\u7406\u7a0b\u5e8f\u4e2d\u56de\u6536\u4e00\u4e2a\u7ec8\u6b62\u7684\uff08\u50f5\u6b7b\uff09\u5b50\u8fdb\u7a0b\u65f6\uff0c\u5b83\u5c31\u4ece\u4f5c\u4e1a\u5217\u8868\u4e2d\u5220\u9664\u8fd9\u4e2a\u5b50\u8fdb\u7a0b\u3002\u4e4d\u4e00\u770b\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u5bf9\u7684\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u53ef\u80fd\u53d1\u751f\u4e0b\u9762\u7684\u60c5\u51b5\uff1a \u7236\u8fdb\u7a0b\u6267\u884c fork() \uff0c\u5185\u6838\u8c03\u5ea6\u65b0\u521b\u5efa\u7684\u5b50\u8fdb\u7a0b\u8fd0\u884c\uff0c\u800c\u4e0d\u662f\u7236\u8fdb\u7a0b \u5728\u7236\u8fdb\u7a0b\u80fd\u591f\u518d\u6b21\u8fd0\u884c\u4e4b\u524d\uff0c\u5b50\u8fdb\u7a0b\u5c31\u7ec8\u6b62\uff0c\u5e76\u4e14\u53d8\u6210\u4e00\u4e2a\u50f5\u6b7b\u8fdb\u7a0b\uff0c\u4f7f\u5f97\u5185\u6838\u4f20\u9012\u4e00\u4e2a SIGCHLD \u4fe1\u53f7\u7ed9\u7236\u8fdb\u7a0b \u540e\u6765\uff0c\u5f53\u7236\u8fdb\u7a0b\u518d\u6b21\u53d8\u6210\u53ef\u8fd0\u884c\u4f46\u53c8\u5728\u5b83\u6267\u884c\u4e4b\u524d\uff0c\u5185\u6838\u6ce8\u610f\u5230\u5f85\u5904\u7406\u7684 SIGCHLD \u4fe1\u53f7\uff0c\u5e76\u901a\u8fc7\u5728\u7236\u8fdb\u7a0b\u4e2d\u8fd0\u884c\u5904\u7406\u7a0b\u5e8f\u63a5\u6536\u8fd9\u4e2a\u4fe1\u53f7 \u5904\u7406\u7a0b\u5e8f\u56de\u6536\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\uff0c\u5e76\u8c03\u7528 deletejob() \uff0c\u8fd9\u4e2a\u51fd\u6570\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u56e0\u4e3a\u7236\u8fdb\u7a0b\u8fd8\u6ca1\u6709\u628a\u8be5\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u5217\u8868\u4e2d \u5728\u5904\u7406\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5185\u6838\u8fd0\u884c\u7236\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u4ece fork() \u8fd4\u56de\uff0c\u901a\u8fc7\u8c03\u7528 addjob() \u9519\u8bef\u5730\u628a\uff08\u4e0d\u5b58\u5728\u7684\uff09\u5b50\u8fdb\u7a0b\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e2d void handler ( int sig ) { pid_t pid ; while (( pid = waitpid ( - 1 , NULL , 0 )) 0 ) /* Reap a zombie child */ deletejob ( pid ); /* Delete the child from the job list */ if ( errno != ECHILD ) unix_error ( waitpid error ); } int main ( int argc , char ** argv ) { int pid ; Signal ( SIGCHLD , handler ); initjobs (); /* Initialize the job list */ while ( 1 ) { /* Child process */ if (( pid = Fork ()) == 0 ) { Execve ( /bin/date , argv , NULL ); } /* Parent process */ addjob ( pid ); /* Add the child to the job list */ } exit ( 0 ); } \u6b63\u786e\u7684\u505a\u6cd5\u5e94\u8be5\u5982\u4e0b, \u901a\u8fc7\u5728\u8c03\u7528 fork() \u4e4b\u524d\uff0c\u963b\u585e SIGCHLD \u4fe1\u53f7\uff0c\u7136\u540e\u5728\u6211\u4eec\u8c03\u7528\u4e86 addjob() \u4e4b\u540e\u5c31\u53d6\u6d88\u963b\u585e\u8fd9\u4e9b\u4fe1\u53f7\uff0c\u6211\u4eec\u4fdd\u8bc1\u4e86\u5728\u5b50\u8fdb\u7a0b\u88ab\u6dfb\u52a0\u5230\u4f5c\u4e1a\u5217\u8868\u4e4b\u540e\u56de\u6536\u8be5\u5b50\u8fdb\u7a0b\u3002\u6ce8\u610f\uff0c\u5b50\u8fdb\u7a0b\u7ee7\u627f\u4e86\u5b83\u4eec\u7236\u8fdb\u7a0b\u7684\u88ab\u963b\u585e\u96c6\u5408\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5728\u8c03\u7528 execve() \u4e4b\u524d\uff0c\u5c0f\u5fc3\u5730\u89e3\u9664\u5b50\u8fdb\u7a0b\u4e2d\u963b\u585e\u7684 SIGCHLD \u4fe1\u53f7\u3002\u8fd9\u6837\uff0c\u7236\u8fdb\u7a0b\u4fdd\u8bc1\u5728\u76f8\u5e94\u7684 deletejob() \u4e4b\u524d\u6267\u884c addjob() \u3002 int main ( int argc , char ** argv ) { int pid ; sigset_t mask_all , mask_one , prev_one ; Sigfillset ( mask_all ); Sigemptyset ( mask_one ); Sigaddset ( mask_one , SIGCHLD ); Signal ( SIGCHLD , handler ); initjobs (); /* Initialize the job list */ while ( 1 ) { Sigprocmask ( SIG_BLOCK , mask_one , prev_one ); /* Block SIGCHLD */ if (( pid = Fork ()) == 0 ) { /* Child process */ Sigprocmask ( SIG_SETMASK , prev_one , NULL ); /* Unblock SIGCHLD */ Execve ( /bin/date , argv , NULL ); } Sigprocmask ( SIG_BLOCK , mask_all , NULL ); /* Parent process */ addjob ( pid ); /* Add the child to the job list */ Sigprocmask ( SIG_SETMASK , prev_one , NULL ); /* Unblock SIGCHLD */ } exit ( 0 ); }","title":"\u663e\u5f0f\u963b\u585e\u673a\u5236"},{"location":"os/csapp/ch8/#_17","text":"\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f(signal handler)\u662f\u91cd\u8981\u4e14\u68d8\u624b\u7684\u4e00\u4e2a\u95ee\u9898\u3002\u5176\u96be\u70b9\u5728\uff1a \u5904\u7406\u7a0b\u5e8f\u4e0e\u4e3b\u7a0b\u5e8f\u5e76\u53d1\u8fd0\u884c\uff0c\u5171\u4eab\u540c\u6837\u7684\u5168\u5c40\u53d8\u91cf\uff0c\u56e0\u6b64\u53ef\u80fd\u4e0e\u4e3b\u7a0b\u5e8f\u548c\u5176\u4ed6\u5904\u7406\u7a0b\u5e8f\u76f8\u4e92\u5e72\u6270\uff1b \u5982\u4f55\u4ee5\u53ca\u4f55\u65f6\u63a5\u6536\u4fe1\u53f7\u7684\u89c4\u5219\u5e38\u5e38\u8fdd\u80cc\u4eba\u7684\u76f4\u89c9\u3002","title":"\u4fe1\u53f7\u5904\u7406\u7a0b\u5e8f"},{"location":"os/csapp/ch8/#7","text":"Linux\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5927\u91cf\u7684\u76d1\u63a7\u548c\u64cd\u4f5c\u8fdb\u7a0b\u7684\u6709\u7528\u5de5\u5177\u3002 STRACE\uff1a \u6253\u5370\u4e00\u4e2a\u6b63\u5728\u8fd0\u884c\u7684\u7a0b\u5e8f\u548c\u5b83\u7684\u5b50\u8fdb\u7a0b\u8c03\u7528\u7684\u6bcf\u4e2a\u7cfb\u7edf\u8c03\u7528\u7684\u8f68\u8ff9 PS\uff1a\u5217\u51fa\u5f53\u524d\u7cfb\u7edf\u4e2d\u7684\u8fdb\u7a0b(\u5305\u62ec\u50f5\u5c38\u8fdb\u7a0b) TOP: \u6253\u5370\u51fa\u5173\u4e8e\u5f53\u524d\u8fdb\u7a0b\u8d44\u6e90\u4f7f\u7528\u7684\u4fe1\u606f","title":"7 \u64cd\u4f5c\u8fdb\u7a0b\u7684\u5de5\u5177"},{"location":"os/csapp/ch9/","text":"Chapter 9 \u865a\u62df\u5185\u5b58 1 \u7269\u7406/\u865a\u62df\u5bfb\u5740 \u4e3b\u5b58\u662f\u7531\u8fde\u7eed\u7684 \u5b57\u8282\u5927\u5c0f \u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u6bcf\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 \u7269\u7406\u5730\u5740 (Physical Adress)\u3002CPU\u4f7f\u7528\u7269\u7406\u5730\u5740\u8bbf\u95ee\u5185\u5b58\u7684\u65b9\u5f0f\u79f0\u4e3a \u7269\u7406\u5bfb\u5740 (Physical adressing)\u3002 \u65e9\u671f\u7684PC\u4ee5\u53ca\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\u7b49\u4f7f\u7528\u7269\u7406\u5bfb\u5740\uff0c\u4e0b\u9762\u662f\u7269\u7406\u5bfb\u5740\u7684\u793a\u610f\u56fe\uff1a \u73b0\u4ee3\u5904\u7406\u5668\u901a\u8fc7\u751f\u6210\u4e00\u4e2a \u865a\u62df\u5730\u5740 (Virtual Address)\u6765\u8bbf\u95ee\u4e3b\u5b58\uff0c\u865a\u62df\u5730\u5740\u7ecf\u8fc7 \u5730\u5740\u7ffb\u8bd1 (Address Translation)\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u3002\u5730\u5740\u7ffb\u8bd1\u7531CPU\u5185\u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143 (Memory Management Unit, MMU )\u8d1f\u8d23. \u865a\u62df\u5185\u5b58\u5145\u5f53\u7740\u4e09\u4e2a\u89d2\u8272\uff1a \u4f5c\u4e3a\u7f13\u5b58\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u66f4\u6709\u6548\u7387\u7684\u4f7f\u7528\u5185\u5b58\uff1a\u4f7f\u7528DRAM\u5f53\u505a\u90e8\u5206\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u7f13\u5b58 \u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u5177\uff0c\u7b80\u5316\u5185\u5b58\u7ba1\u7406\uff1a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u7edf\u4e00\u7684\u7ebf\u6027\u5730\u5740\u7a7a\u95f4 \u4f5c\u4e3a\u5185\u5b58\u4fdd\u62a4\u7684\u5de5\u5177\uff0c\u5206\u9694\u5730\u5740\u7a7a\u95f4\uff1a\u8fdb\u7a0b\u7684\u5185\u5b58\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\uff1b\u7528\u6237\u7a0b\u5e8f\u4e0d\u80fd\u8bbf\u95ee\u4fdd\u5bc6\u7684\u5185\u6838\u4fe1\u606f\u548c\u4ee3\u7801 \u4e0b\u9762\u4e00\u8282\u5177\u4f53\u8bb2\u89e3\u865a\u62df\u5185\u5b58\u7684\u8fd9\u4e09\u4e2a\u89d2\u8272\u3002 2 \u865a\u62df\u5185\u5b58\u7684\u4e09\u4e2a\u89d2\u8272 2.1 \u4f5c\u4e3a\u7f13\u5b58\u7684\u5de5\u5177 \u53ef\u4ee5\u628a\u4e3b\u5b58DRAM\u770b\u4f5c\u662f\u865a\u62df\u5185\u5b58\u7684\u7f13\u5b58\uff0c\u7c7b\u4f3c\u4e8eL1\u3001L2\u3001L3\u9ad8\u901f\u7f13\u5b58\u662fDRAM\u5185\u5b58\u7684\u7f13\u5b58\u3002\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u628a\u865a\u62df\u5185\u5b58\u770b\u6210\u662f\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e00\u90e8\u5206\u3002 \u548c\u5176\u4ed6\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u7f13\u5b58\u4e00\u6837\uff0c\u8f83\u4f4e\u5c42\u4e0a\u7684\u6570\u636e\u88ab\u5206\u5272\u6210\u5757\uff0c\u4f5c\u4e3a\u4e0e\u8f83\u9ad8\u5c42\u4e4b\u95f4\u7684\u4f20\u8f93\u5355\u5143\u3002 \u8fd9\u91cc\u8f83\u4f4e\u5c42\u662f\u865a\u62df\u5185\u5b58\uff0c\u5206\u5272\u6210 \u865a\u62df\u9875 (Virtual Page, VP)\uff0c\u865a\u62df\u9875\u5927\u5c0f\u4e3a P=2^p P=2^p \u5b57\u8282\u3002 \u7c7b\u4f3c\u7684\uff0c\u8fd9\u91cc\u7684\u8f83\u9ad8\u5c42\uff0c\u7269\u7406\u5185\u5b58DRAM\uff0c\u88ab\u5206\u5272\u4e3a \u7269\u7406\u9875 (Physical Page, PP)\uff0c\u5927\u5c0f\u4e5f\u4e3a P P \uff0c\u4e5f\u53eb\u505a\u9875\u6862(page frame)\u3002 \u865a\u62df\u9875\u7684\u72b6\u6001\u5206\u4e3a\u4e09\u79cd\uff1a \u672a\u5206\u914d (Unallocated): \u7cfb\u7edf\u8fd8\u672a\u5206\u914d(\u521b\u5efa)\u7684\u9875\uff0c\u4e0d\u5360\u7528\u78c1\u76d8\u7a7a\u95f4\u3002 \u7f13\u5b58\u7684 (Cached): \u5f53\u524d\u5df2\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875\u3002 \u672a\u7f13\u5b58\u7684 (Uncached): \u672a\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875\u3002 \u90a3\u4e48\u5177\u4f53\u662f\u600e\u4e48\u5224\u65ad\u4e00\u4e2a\u865a\u62df\u9875\u7684\u72b6\u6001\u5462\uff1f\u600e\u4e48\u77e5\u9053\u865a\u62df\u9875\u653e\u5728\u54ea\u4e2a\u7269\u7406\u9875\u4e2d\u5462\uff1f \u7269\u7406\u5185\u5b58\u4e2d\u5b58\u5728\u4e00\u4e2a\u53eb \u9875\u8868 (page table)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u3002\u9875\u8868\u5c06\u865a\u62df\u9875\u6620\u5c04\u5230\u7269\u7406\u9875\uff0c\u6bcf\u6b21\u5185\u5b58\u7ba1\u7406\u5355\u5143\u4e2d\u7684 \u5730\u5740\u7ffb\u8bd1\u786c\u4ef6 \u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u65f6\u90fd\u4f1a\u8bfb\u53d6\u9875\u8868\u3002 \u9875\u8868\u5176\u5b9e\u662f\u4e00\u4e2a \u9875\u8868\u6761\u76ee (Page Table Entry, PTE)\u7684\u6570\u7ec4\u3002\u9875\u8868\u6761\u76ee\u5305\u542b\u4e00\u4e2a \u6709\u6548\u4f4d( valid bit)\u548c\u4e00\u4e2a n n \u4f4d\u5730\u5740\u5b57\u6bb5\u3002 \u5728\u865a\u62df\u5185\u5b58\u7684\u4e60\u60ef\u8bf4\u6cd5\u4e2d\uff0cDRAM\u7f13\u5b58\u547d\u4e2d/\u4e0d\u547d\u4e2d\uff0c\u7279\u79f0\u4e3a \u9875\u547d\u4e2d / \u7f3a\u9875 (Page Hit/ Fault)\u3002 2.2 \u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u5177 \u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u9875\u8868\uff0c\u4e5f\u5c31\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u591a\u4e2a\u865a\u62df\u9875\u9762\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u7269\u7406\u9875\u9762\u4e0a\u3002\u865a\u62df\u5185\u5b58\u7b80\u5316\u4e86\u94fe\u63a5\u548c\u52a0\u8f7d\u3001\u4ee3\u7801\u548c\u6570\u636e\u5171\u4eab\u3001\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u5206\u914d\u3002 2.3 \u4f5c\u4e3a\u5185\u5b58\u4fdd\u62a4\u7684\u5de5\u5177 \u4e00\u65b9\u9762\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u62e5\u6709\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\u4f7f\u5f97\u533a\u5206\u4e0d\u540c\u8fdb\u7a0b\u7684\u79c1\u6709\u5185\u5b58\u53d8\u5f97\u5bb9\u6613\u3002\u53e6\u4e00\u65b9\u9762\u5728\u6bcf\u4e2a\u9875\u8868\u6761\u76eePTE\u4e2d\uff0c\u6dfb\u52a0\u4e86\u989d\u5916\u7684 \u8bb8\u53ef\u4f4d (SUP, READ, WRITE, EXEC)\u6765\u63a7\u5236\u5bf9\u4e00\u4e2a\u865a\u62df\u9875\u9762\u5185\u5bb9\u7684\u8bbf\u95ee\uff1a SUP\u4f4d\u8868\u793a\u8fdb\u7a0b\u662f\u5426\u8fd0\u884c\u5728\u8d85\u7ea7\u7528\u6237\u6a21\u5f0f\u4e0b\u624d\u80fd\u8bbf\u95ee READ/WRITE\u4f4d\u63a7\u5236\u8bfb\u548c\u5199\u7684\u8bbf\u95ee EXEC\u4f4d\u63a7\u5236\u6267\u884c\u7684\u8bbf\u95ee \u5982\u679c\u8fdd\u53cd\u8bb8\u53ef\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u89e6\u53d1\u6bb5\u9519\u8bef(segmentation fault)\u3002 3 \u5730\u5740\u7ffb\u8bd1 \u5730\u5740\u7ffb\u8bd1\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c\u7269\u7406\u5730\u5740\u7a7a\u95f4\u4e4b\u95f4\u7684\u6620\u5c04\u3002CPU\u4e2d\u7684 \u9875\u8868\u57fa\u5740\u5bc4\u5b58\u5668 (Page Table Base Register, PTBR)\u6307\u5411\u5f53\u524d\u9875\u8868\u3002 n n \u4f4d\u7684\u865a\u62df\u5730\u5740\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a p p \u4f4d\u7684 \u865a\u62df\u9875\u9762\u504f\u79fb (Virtual Page Offset, VPO)\u548c\u4e00\u4e2a n-p n-p \u4f4d\u7684 \u865a\u62df\u9875\u53f7 (Virtual Page Number, VPN)\u3002 m m \u4f4d\u7684\u7269\u7406\u5730\u5740\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a p p \u4f4d\u7684 \u7269\u7406\u9875\u9762\u504f\u79fb (Physical Page Offset, PPO)\u548c\u4e00\u4e2a m-p m-p \u4f4d\u7684 \u7269\u7406\u9875\u53f7 (Physical Page Number, PPN)\u3002 \u7269\u7406\u9875\u9762\u504f\u79fb\u548c\u865a\u62df\u9875\u9762\u504f\u79fb\u662f\u76f8\u901a\u7684\u3002 \u5229\u7528TLB\u52a0\u901f\u5730\u5740\u7ffb\u8bd1 \u6bcf\u6b21CPU\u4ea7\u751f\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0cMMU\u5c31\u5fc5\u987b\u67e5\u9605\u4e00\u4e2aPTE\u3002\u4e3a\u4e86\u8bd5\u56fe\u6d88\u9664\u8fd9\u79cd\u5f00\u9500\uff0c\u5728MMU\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u5173\u4e8ePTE\u7684\u7f13\u5b58\uff0c\u79f0\u4e3a \u8f6c\u8bd1\u540e\u5907\u7f13\u51b2\u5668 (Translation Lookaside Buffer, TLB) \u591a\u7ea7\u9875\u8868 \u7528\u6765\u538b\u7f29\u9875\u8868\u7684\u5e38\u7528\u65b9\u6cd5\u662f\u4f7f\u7528\u5c42\u6b21\u7ed3\u6784\u7684\u9875\u8868\u3002 \u865a\u62df\u5730\u5740\u88ab\u5212\u5206\u4e3a k k \u4e2aVPN\u548c1\u4e2aVPO\u3002 \u6bcf\u4e2aVPN i i \u90fd\u662f\u4e00\u4e2a\u5230\u7b2c i i \u7ea7\u9875\u8868\u7684\u7d22\u5f15\uff0c\u5176\u4e2d \\le i \\le k \\le i \\le k \u3002 \u7b2c j j \u7ea7\u9875\u8868\u4e2d\u7684\u6bcf\u4e2aPTE\u90fd\u6307\u5411\u7b2c j+1 j+1 \u7ea7\u7684\u67d0\u4e2a\u9875\u8868\u7684\u57fa\u5740\u3002 \u7b2c k k \u7ea7\u9875\u8868\u4e2d\u7684\u6bcf\u4e2aPTE\u5305\u542b\u67d0\u4e2a\u7269\u7406\u9875\u9762\u7684PPN\u3002 4 core i7\u5185\u5b58\u7cfb\u7edf Core i7\u7b80\u4ecb Core i7\u57282008\u5e74\u51ac\u5b63\u53d1\u5e03\uff0c\u57fa\u4e8e\u5168\u65b0Nehalem(/n\u0259\u02c8he\u026al\u0259m/)\u67b6\u6784\uff0c\u5b83\u7684\u82af\u7247\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u73b0\u5728\u7684Core i7\u652f\u630148\u4f4d(256TB)\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c52\u4f4d(4PB)\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002 \u4e0b\u56fe\u7ed9\u51fa\u4e86Core i7\u5185\u5b58\u7cfb\u7edf\u7684\u91cd\u8981\u90e8\u5206\u3002\u5904\u7406\u5668\u5c01\u88c5(Processor package)\u5305\u62ec\u56db\u4e2a\u6838\u3001\u4e00\u4e2a\u5927\u7684\u6240\u6709\u6838\u5171\u4eab\u7684L3\u9ad8\u901f\u7f13\u5b58\uff0c\u4ee5\u53ca\u4e00\u4e2aDDR3\u5185\u5b58\u63a7\u5236\u5668\u3002 \u6bcf\u4e00\u4e2a\u6838\u5305\u542b\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684TLB\u3001\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684\u6570\u636e\u6838\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\uff0c\u4ee5\u53ca\u4e00\u7ec4\u5feb\u901f\u7684\u70b9\u5230\u70b9\u94fe\u8def(\u57fa\u4e8eQuickPath\u6280\u672f)\u3002 TLB\u662f\u56db\u8def\u7ec4\u76f8\u8054\u7684 L1\u3001L2\u3001L3\u9ad8\u901f\u7f13\u5b58\uff0c\u5757\u5927\u5c0f\u4e3a64\u5b57\u8282\u3002 L1\u3001L2\u662f8\u8def\u7ec4\u76f8\u8054\u7684\uff0cL3\u662f16\u7ec4\u76f8\u8054\u7684\u3002 Core i7\u5730\u5740\u7ffb\u8bd1 Core i7\u91c7\u7528\u56db\u7ea7\u9875\u8868\u5c42\u6b21\u7ed3\u6784\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5b83\u81ea\u5df1\u79c1\u6709\u7684\u9875\u8868\u5c42\u6b21\u7ed3\u6784\u3002CR3\u63a7\u5236\u5bc4\u5b58\u5668\u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(L1)\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 Core i7\u7b2c1-3\u7ea7\u9875\u8868\u6761\u76ee\u683c\u5f0f\uff1a Each entry references a 4K child page table. Significant fields : P : Child page table present in physical memory (1) or not (0). R/W : Read-\u00ad\u2010only or read-\u00ad\u2010write access access permission for all reachable pages. U/S : user or supervisor (kernel) mode access permission for all reachable pages. WT : Write-\u00ad\u2010through or write-\u00ad\u2010back cache policy for the child page table. A : Reference bit (\u5f15\u7528\u4f4d\uff0cset by MMU on reads and writes, cleared by software). PS : Page size either 4 KB or 4 MB (de\ufb01ned for Level 1 PTEs only). Page table physical base address : 40 most significant bits (\u6700\u9ad8 \u6709\u6548\u4f4d ) of physical page table address (forces page tables to be 4KB aligned) XD : Disable or enable instruction fetches from all pages reachable from this PTE. Core i7\u7b2c4\u7ea7\u9875\u8868\u6761\u76ee\u683c\u5f0f\uff1a Page physical base address : 40 most significant bits of physical page address (forces pages to be 4KB aligned) D : Dirty bit (\u810f\u4f4d, or modify bit\uff0cset by MMU on writes , cleared by software) \u4e0b\u56fe\u7ed9\u51fa\u4e86Core i7 MMU\u5982\u4f55\u4f7f\u7528\u56db\u7ea7\u9875\u8868\u5c06\u865a\u62df\u5730\u5740\u7ffb\u8bd1\u6210\u7269\u7406\u5730\u5740\u300236\u4f4dVPN\u88ab\u5212\u5206\u4e3a\u56db\u4e2a9\u4f4d\u7684\u7247\uff0c\u6bcf\u4e2a\u7247\u88ab\u7528\u4f5c\u4e00\u4e2a\u9875\u8868\u7684\u504f\u79fb\u91cf\u3002VPN1\u63d0\u4f9b\u5230\u4e00\u4e2aL1 PET\u7684\u504f\u79fb\u91cf\uff0c\u8fd9\u4e2aPTE\u5305\u542bL2\u9875\u8868\u7684\u57fa\u5730\u5740\u3002VPN2\u63d0\u4f9b\u5230\u4e00\u4e2aL2 PET\u7684\u504f\u79fb\u91cf\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 5 Linux\u865a\u62df\u5185\u5b58\u7cfb\u7edf Linux\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002Linux\u5c06\u865a\u62df\u5185\u5b58\u7ec4\u7ec7\u6210\u4e00\u4e9b \u533a\u57df \u7684\u96c6\u5408\u3002\u4e00\u4e2a\u533a\u57df\u5c31\u662f\u5df2\u5206\u914d\u7684\u865a\u62df\u5185\u5b58\u7684\u8fde\u7eed\u7247\u3002 Linux\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7531\u5982\u4e0b\u51e0\u4e2a\u533a\u57df\u7ec4\u6210\uff1a \u4ee3\u7801\uff08 .text \uff09: \u8fd9\u91cc\u5b58\u653e\u7684\u662fCPU\u8981\u6267\u884c\u7684\u6307\u4ee4\u3002\u4ee3\u7801\u6bb5\u662f\u53ef\u5171\u4eab\u7684\uff0c\u76f8\u540c\u7684\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u62f7\u8d1d\uff0c\u540c\u65f6\u8fd9\u4e2a\u6bb5\u662f\u53ea\u8bfb\u7684\uff0c\u9632\u6b62\u7a0b\u5e8f\u7531\u4e8e\u9519\u8bef\u800c\u4fee\u6539\u81ea\u8eab\u7684\u6307\u4ee4\u3002 \u521d\u59cb\u5316\u6570\u636e\u6bb5\uff08 .data \uff09: \u8fd9\u91cc\u5b58\u653e\u7684\u662f\u7a0b\u5e8f\u4e2d\u9700\u8981\u660e\u786e\u8d4b\u521d\u59cb\u503c\u7684\u53d8\u91cf\uff0c\u4f8b\u5982\u4f4d\u4e8e\u6240\u6709\u51fd\u6570\u4e4b\u5916\u7684\u5168\u5c40\u53d8\u91cf\uff1a int val= 100 \u3002\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u4ee5\u4e0a\u4e24\u6bb5\u90fd\u662f\u4f4d\u4e8e\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u5185\u6838\u5728\u8c03\u7528 exec \u51fd\u6570\u542f\u52a8\u8be5\u7a0b\u5e8f\u65f6\u4ece\u6e90\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u8bfb\u5165\u3002 \u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff08 .bss \uff09: \u4f4d\u4e8e\u8fd9\u4e00\u6bb5\u4e2d\u7684\u6570\u636e\uff0c\u5185\u6838\u5728\u6267\u884c\u8be5\u7a0b\u5e8f\u524d\uff0c\u5c06\u5176\u521d\u59cb\u5316\u4e3a0\u6216\u8005 null \u3002\u4f8b\u5982\u51fa\u73b0\u5728\u4efb\u4f55\u51fd\u6570\u4e4b\u5916\u7684\u5168\u5c40\u53d8\u91cf\uff1aint sum; \u5806\uff08 Heap \uff09: \u8fd9\u4e2a\u6bb5\u7528\u4e8e\u5728\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u52a8\u6001\u5185\u5b58\u7533\u8bf7\uff0c\u4f8b\u5982\u7ecf\u5e38\u7528\u5230\u7684 malloc \uff0c new \u7cfb\u5217\u51fd\u6570\u5c31\u662f\u4ece\u8fd9\u4e2a\u6bb5\u4e2d\u7533\u8bf7\u5185\u5b58\u3002 \u5171\u4eab\u5e93( Shared Library ): \u7528\u6765\u5b58\u653e\u50cfC\u6807\u51c6\u5e93\u548c\u6570\u5b66\u54ed\u8fd9\u6837\u7684\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\u533a\u57df\u3002 \u6808\uff08 Stack \uff09: \u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u4ee5\u53ca\u5728\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u4e34\u65f6\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728\u6b64\u6bb5\u4e2d\uff0c\u5177\u4f53\u89c1\u4e0b\u9762\u4e00\u8282\u3002 \u5185\u6838\u865a\u62df\u5185\u5b58\uff1a\u5305\u542b\u5185\u6838\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u7ed3\u6784\u3002 \u4e0b\u9762\u662f\u7a0b\u5e8f\u793a\u610f\uff1a #include stdio.h #include malloc.h void print ( char * , int ); int main () { char * s1 = abcde ; // abcde \u4f5c\u4e3a\u5b57\u7b26\u4e32\u5e38\u91cf\u5b58\u50a8\u5728\u5e38\u91cf\u533a s1\u3001s2\u3001s5\u62e5\u6709\u76f8\u540c\u7684\u5730\u5740 char * s2 = abcde ; char s3 [] = abcd ; long int * s4 [ 100 ]; char * s5 = abcde ; int a = 5 ; int b = 6 ; //a,b\u5728\u6808\u4e0a\uff0c a b\u5730\u5740\u53cd\u5411\u589e\u957f printf ( variables address in main function: s1 =% p s2 =% p s3 =% p s4 =% p s5 =% p a =% p b =% p \\ n , s1,s2,s3,s4,s5, a, b); printf ( variables address in processcall:n ); print ( ddddddddd , 5 ); //\u53c2\u6570\u5165\u6808\u4ece\u53f3\u81f3\u5de6\u8fdb\u884c,p\u5148\u8fdb\u6808,str\u540e\u8fdb p str printf ( main=%p print=%p \\n , main , print ); //\u6253\u5370\u4ee3\u7801\u6bb5\u4e2d\u4e3b\u51fd\u6570\u548c\u5b50\u51fd\u6570\u7684\u5730\u5740\uff0c\u7f16\u8bd1\u65f6\u5148\u7f16\u8bd1\u7684\u5730\u5740\u4f4e\uff0c\u540e\u7f16\u8bd1\u7684\u5730\u5740\u9ad8main print } void print ( char * str , int p ) { char * s1 = abcde ; //abcde\u5728\u5e38\u91cf\u533a\uff0cs1\u5728\u6808\u4e0a char * s2 = abcde ; //abcde\u5728\u5e38\u91cf\u533a\uff0cs2\u5728\u6808\u4e0a s2-s1=6\u53ef\u80fd\u7b49\u4e8e0\uff0c\u7f16\u8bd1\u5668\u4f18\u5316\u4e86\u76f8\u540c\u7684\u5e38\u91cf\uff0c\u53ea\u5728\u5185\u5b58\u4fdd\u5b58\u4e00\u4efd //\u800c s1 s2 char s3 [] = abcdeee ; //abcdeee\u5728\u5e38\u91cf\u533a\uff0cs3\u5728\u6808\u4e0a\uff0c\u6570\u7ec4\u4fdd\u5b58\u7684\u5185\u5bb9\u4e3aabcdeee\u7684\u4e00\u4efd\u62f7\u8d1d long int * s4 [ 100 ]; char * s5 = abcde ; int a = 5 ; int b = 6 ; int c ; int d ; //a,b,c,d\u5747\u5728\u6808\u4e0a\uff0c a b c d\u5730\u5740\u53cd\u5411\u589e\u957f char * q = str ; int m = p ; char * r = ( char * ) malloc ( 1 ); char * w = ( char * ) malloc ( 1 ) ; // r w \u5806\u6b63\u5411\u589e\u957f printf ( s1=%p s2=%p s3=%p s4=%p s5=%p a=%p b=%p c=%p d=%p str=%p q=%p p=%p m=%p r=%p w=%p \\n , s1 , s2 , s3 , s4 , s5 , a , b , c , d , str , q , p , m , r , w ); /* \u6808\u548c\u5806\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5019\u52a8\u6001\u5206\u914d\u7684\uff0c\u5c40\u90e8\u53d8\u91cf\u5747\u5728\u6808\u4e0a\u5206\u914d\u3002 \u6808\u662f\u53cd\u5411\u589e\u957f\u7684\uff0c\u5730\u5740\u9012\u51cf\uff1bmalloc\u7b49\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5728\u5806\u7a7a\u95f4\u3002\u5806\u662f\u6b63\u5411\u589e\u957f\u7684\uff0c\u5730\u5740\u9012\u589e\u3002 r,w\u53d8\u91cf\u5728\u6808\u4e0a(\u5219 r w)\uff0cr,w\u6240\u6307\u5185\u5bb9\u5728\u5806\u4e2d(\u5373r w)\u3002*/ } Linux\u662f\u5982\u4f55\u7ec4\u7ec7\u865a\u62df\u5185\u5b58\u7684 \u90a3\u4e48Linux\u5177\u4f53\u662f\u600e\u4e48\u7ec4\u7ec7\u865a\u62df\u5185\u5b58\u7684\u5462\uff1fLinux\u5185\u6838\u4e3a\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u4efb\u52a1\u7ed3\u6784\u4f53( task_struct , \u5728 sched.h \u5934\u6587\u4ef6\u4e2d)\u3002 task_struct \u4e2d\u7684\u5143\u7d20\u5305\u542b\u8fd0\u884c\u8be5\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f(PID\u3001\u6307\u5411\u7528\u6237\u6808\u7684\u6307\u9488\u3001\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u540d\u5b57\u3001\u4ee5\u53ca\u7a0b\u5e8f\u8ba1\u6570\u5668)\u3002 task_struct \u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6307\u5411 mm_struct \uff0c\u5b83\u63cf\u8ff0\u4e86\u865a\u62df\u5185\u5b58\u7684\u5f53\u524d\u72b6\u6001\u3002 pgd \u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868\u7684\u57fa\u5740\uff0c\u800c mmap \u6307\u5411\u4e00\u4e2a vm_area_struct (\u533a\u57df\u7ed3\u6784, \u5b9a\u4e49\u5728 mm_types.h )\u7684\u94fe\u8868\u3002\u6bcf\u4e2a\u533a\u57df\u7ed3\u6784\u94fe\u8868\u90fd\u63cf\u8ff0\u4e86\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a vm_start : \u6307\u5411\u533a\u57df\u7684\u8d77\u59cb\u5904 vm_end : \u6307\u5411\u533a\u57df\u7684\u7ed3\u675f\u5904 vm_prot : \u63cf\u8ff0\u7740\u533a\u57df\u5185\u5305\u542b\u7684\u6240\u6709\u9875\u7684\u8bfb\u5199\u8bb8\u53ef\u6743\u9650 vm_flags : \u63cf\u8ff0\u8fdb\u7a0b\u5171\u4eab/\u79c1\u6709 vm_next : \u4e0b\u4e00\u4e2a\u533a\u57df\u7ed3\u6784 Linux \u7f3a\u9875\u5f02\u5e38\u5904\u7406 \u5185\u5b58\u7ba1\u7406\u5355\u5143MMU\u5728\u8bd5\u56fe\u7ffb\u8bd1\u67d0\u4e2a\u865a\u62df\u5730\u5740A\u65f6\uff0c\u89e6\u53d1\u4e86\u4e00\u4e2a\u7f3a\u9875\u5f02\u5e38\uff0c\u5f15\u8d77\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff1a \u865a\u62df\u5730\u5740A\u662f\u5408\u6cd5\u7684\u5417\uff1f- \u6bb5\u9519\u8bef(segment fault) \u8bd5\u56fe\u8fdb\u884c\u7684\u5185\u5b58\u8bbf\u95ee\u662f\u5408\u6cd5\u7684\u5417\uff1f - \u4fdd\u62a4\u5f02\u5e38(\u4e5f\u5f15\u53d1\u6bb5\u9519\u8bef) 6 \u5185\u5b58\u6620\u5c04 Linux \u901a\u8fc7\u5c06\u4e00\u4e2a\u865a\u62df\u5185\u533a\u57df\u4e0e\u4e00\u4e2a\u78c1\u76d8\u4e0a\u7684 \u5bf9\u8c61 (object)\u5173\u8054\u8d77\u6765\uff0c\u4ee5\u521d\u59cb\u5316\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u5185\u5b58\u6620\u5c04 (memory mapping). \u4e00\u65e6\u4e00\u4e2a\u865a\u62df\u9875\u9762\u88ab\u521d\u59cb\u5316\u4e86\uff0c\u5b83\u5c31\u5728\u4e00\u4e2a\u7531\u5185\u6838\u7ef4\u62a4\u7684\u4e13\u95e8\u7684 \u4ea4\u6362\u6587\u4ef6 (swap file)\u4e4b\u95f4\u6362\u6765\u6362\u53bb\u3002\u4ea4\u6362\u6587\u4ef6\u4e5f\u53eb\u505a \u4ea4\u6362\u7a7a\u95f4 (swap space)\u6216\u4ea4\u6362\u533a\u57df(swap area)\u3002 \u518d\u770b\u5171\u4eab\u5bf9\u8c61 \u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u8981\u4e48\u4f5c\u4e3a \u5171\u4eab\u5bf9\u8c61 \uff0c\u8981\u4e48\u4f5c\u4e3a \u79c1\u6709\u5bf9\u8c61 \u3002 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u4e00\u4e2a\u5171\u4eab\u5bf9\u8c61\u6620\u5c04\u5230\u5b83\u7684\u865a\u62df\u7a7a\u95f4\u7684\u4e00\u4e2a\u533a\u57df\u5185\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5bf9\u8fd9\u4e2a\u533a\u57df\u7684\u4efb\u4f55\u5199\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u4e5f\u628a\u8fd9\u4e2a\u5171\u4eab\u5bf9\u8c61\u6620\u5c04\u5230\u5b83\u4eec\u865a\u62df\u5185\u5b58\u7684\u5176\u4ed6\u8fdb\u7a0b\u800c\u8a00\uff0c\u4e5f\u662f\u53ef\u89c1\u7684\u3002\u800c\u4e14\uff0c\u8fd9\u4e9b\u53d8\u5316\u4e5f\u4f1a\u53cd\u6620\u5728\u78c1\u76d8\u4e0a\u7684\u539f\u59cb\u5bf9\u8c61\u4e2d\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u6620\u5c04\u5230\u79c1\u6709\u5bf9\u8c61\u7684\u533a\u57df\u505a\u7684\u6539\u53d8\uff0c\u5bf9\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u6765\u8bf4\u662f\u4e0d\u53ef\u517c\u5f97\u3002 \u5373\u4f7f\u5bf9\u8c61\u88ab\u6620\u5c04\u5230\u4e86\u591a\u4e2a\u5171\u4eab\u533a\u57df\uff0c\u7269\u7406\u5185\u5b58\u4e2d\u4e5f\u53ea\u9700\u8981\u5b58\u653e\u5171\u4eab\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c\u3002 \u79c1\u6709\u5bf9\u8c61\u4f7f\u7528 \u5199\u65f6\u590d\u5236 (copy-on-write)\u7684\u5de7\u5999\u6280\u672f\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u4e2d\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6620\u5c04\u79c1\u6709\u5bf9\u8c61\u7684\u8fdb\u7a0b\uff0c\u76f8\u5e94\u79c1\u6709\u533a\u57df\u7684\u9875\u8868\u6761\u76ee\u90fd\u88ab\u6807\u8bb0\u4e3a\u53ea\u8bfb\uff0c\u5e76\u4e14\u533a\u57df\u7ed3\u6784\u88ab\u6807\u8bb0\u4e3a \u79c1\u6709\u7684\u5199\u65f6\u590d\u5236 \u3002 \u53ea\u8981\u6ca1\u6709\u8fdb\u7a0b\u65f6\u56fe\u5199\u5b83\u7684\u79c1\u6709\u533a\u57df\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5171\u4eab\u7269\u7406\u5185\u5b58\u4e2d\u5bf9\u8c61\u7684\u4e00\u4e2a\u5355\u72ec\u526f\u672c\u3002 \u53ea\u8981\u6709\u4e00\u4e2a\u8fdb\u7a0b\u8bd5\u56fe\u5199\u79c1\u6709\u533a\u57df\u7684\u67d0\u4e2a\u9875\u9762\uff0c\u6545\u969c\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u5728\u7269\u7406\u5185\u5b58\u4e2d\u521b\u5efa\u8fd9\u4e2a\u9875\u9762\u7684\u4e00\u4e2a\u65b0\u526f\u672c\uff0c\u66f4\u65b0\u9875\u8868\u6761\u76ee\u6307\u5411\u8fd9\u4e2a\u65b0\u7684\u526f\u672c\uff0c\u7136\u540e\u6062\u590d\u8fd9\u4e2a\u9875\u9762\u7684\u53ef\u5199\u6743\u9650\u3002 \u518d\u770bfork\u51fd\u6570 \u5f53fork\u51fd\u6570\u88ab\u5f53\u524d\u8fdb\u7a0b\u8c03\u7528\u65f6\uff0c\u5185\u6838\u4e3a\u65b0\u8fdb\u7a0b\u521b\u5efa\u5404\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u5206\u914d\u7ed9\u5b83\u4e00\u4e2a\u552f\u4e00\u7684PID\u3002 \u4e3a\u4e86\u7ed9\u8fd9\u4e2a\u65b0\u8fdb\u7a0b\u521b\u5efa\u865a\u62df\u5185\u5b58\uff0c\u5b83\u521b\u5efa\u4e86\u5f53\u524d\u8fdb\u7a0b\u7684 mm_struct \u3001\u533a\u57df\u7ed3\u6784 vm_area_struct \u548c\u9875\u8868\u7684\u539f\u6837\u526f\u672c\u3002 \u5185\u6838\u5c06\u4e24\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u9875\u9762\u90fd\u6807\u8bb0\u4e3a\u53ea\u8bfb\uff0c\u5e76\u5c06\u4e24\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u533a\u57df\u7ed3\u6784\u90fd\u6807\u8bb0\u4e3a\u79c1\u6709\u7684\u5199\u65f6\u590d\u5236\u3002 \u5f53\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u5199\u65f6\u590d\u5236\u673a\u5236\u5c31\u4f1a\u521b\u5efa\u65b0\u9875\u9762\u3002 \u518d\u770bexecve\u51fd\u6570 execve\u51fd\u6570\u5728\u5f53\u524d\u8fdb\u7a0b\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u65b0\u7a0b\u5e8f\uff1a \u5220\u9664\u5df2\u5b58\u5728\u7684\u7528\u6237\u533a\u57df\u3002 \u6620\u5c04\u79c1\u6709\u533a\u57df\u3002 \u6620\u5c04\u5171\u4eab\u533a\u57df\u3002 \u8bbe\u7f6e\u7a0b\u5e8f\u8ba1\u6570\u5668\u3002 \u7528\u6237\u7ea7\u5185\u5b58\u6620\u5c04 Linux\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528mmap\u51fd\u6570\u6765\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u5bf9\u8c61\u6620\u5c04\u5230\u8fd9\u4e9b\u533a\u57df\u4e2d\u3002 void * mmap ( void * start , int len , int prot , int flags , int fd , int offset ) mmap\u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u6700\u597d\u662f\u4ece\u5730\u5740start\u5f00\u59cb\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u5236\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247(chunk)\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u7684\u533a\u57df\u3002\u8fde\u7eed\u7684\u5bf9\u8c61\u7247\u5927\u5c0f\u4e3alen\u5b57\u8282\uff0c\u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u5904\u504f\u79fb\u91cf\u4e3aoffset\u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb\u3002\u5176\u53c2\u6570\uff1a start : may be 0 for \u201cpick an address\u201d prot : PROT_READ, PROT_WRITE, ... flags : MAP_ANON, MAP_PRIVATE, MAP_SHARED, ... Return a pointer to start of mapped area 7 \u52a8\u6001\u5185\u5b58\u5206\u914d \u7a0b\u5e8f\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u6700\u91cd\u8981\u7684\u539f\u56e0\u662f\u7ecf\u5e38\u76f4\u5230\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u65f6\uff0c\u624d\u77e5\u9053\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f\u3002\u4e00\u822c\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668(dynamic memeory allocator)\u6765\u5206\u914d\u52a8\u6001\u5185\u5b58\u3002 \u5206\u914d\u5668\u6839\u636e\u54ea\u4e2a\u5b9e\u4f53\u6765\u8d1f\u8d23\u91ca\u653e\u5df2\u5206\u914d\u7684\u5757\uff0c\u5206\u4e3a\u4e24\u79cd\uff1a \u663e\u793a\u5206\u914d\u5668 (explicit allocator)\uff1a\u8981\u6c42\u7a0b\u5e8f\u663e\u793a\u5730\u91ca\u653e\u4efb\u4f55\u5df2\u5206\u914d\u7684\u5757\u3002\u4f8b\u5982C\u4e2d\u7684malloc/free\uff0cC++\u4e2d\u7684new/delete\u3002 \u9690\u5f0f\u5206\u914d\u5668 (implicit allocator): \u9664\u6b64\u4e4b\u5916\uff0c\u81ea\u52a8\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5df2\u5206\u914d\u5757(\u5783\u573e\u6536\u96c6\uff0cgarbage collection)\u3002 7.2 \u663e\u5f0f\u5206\u914d\u5668\u7684\u8981\u6c42\u548c\u76ee\u6807 7.2.1 \u5206\u914d\u5668\u7684\u8981\u6c42 \u5206\u914d\u5668\u6709\u5982\u4e0b\u7684\u8981\u6c42\uff1a \u5904\u7406\u4efb\u610f\u8bf7\u6c42\u5e8f\u5217 \u7acb\u5373\u76f8\u5e94\u8bf7\u6c42 \u53ea\u4f7f\u7528\u5806 \u5bf9\u9f50\u5757(\u5bf9\u9f50\u8981\u6c42) \u4e0d\u4fee\u6539\u5df2\u5206\u914d\u7684\u5757 7.2.2 \u5206\u914d\u5668\u7684\u76ee\u6807 \u5206\u914d\u5668\u8bd5\u56fe\u6700\u5927\u5316\u541e\u5410\u7387\u548c\u5185\u5b58\u5229\u7528\u7387 \u6700\u5927\u5316\u541e\u5410\u7387(\u541e\u5410\u7387\uff1a\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u91cc\u5b8c\u6210\u7684\u8bf7\u6c42\u6570) \u6700\u5927\u5316\u5185\u5b58\u5229\u7528\u7387 \u6700\u5927\u5316\u541e\u5410\u7387\u548c\u6700\u5927\u5316\u5229\u7528\u7387\u4e4b\u95f4\u662f\u76f8\u4e92 \u7275\u5236 \u7684\uff0c\u5206\u914d\u5668\u8bbe\u8ba1\u7684\u76ee\u6807\u662f\u5728\u8fd9\u4e24\u8005\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u9002\u5f53\u7684\u5e73\u8861\u3002 \u9020\u6210\u5229\u7528\u7387\u5f88\u4f4e\u7684\u4e3b\u8981\u539f\u56e0\u662f \u788e\u7247 (fragmentation)\u73b0\u8c61\u3002\u5f53\u6709\u6548\u8f7d\u8377\u6bd4\u5757\u8981\u5c0f\u65f6\uff0c\u53d1\u751f \u5185\u90e8\u788e\u7247 (Internal fragmentation)\uff0c\u5f15\u8d77\u7684\u539f\u56e0\u6709\uff1a\u5bf9\u9f50\u7b49\u3002 \u5f53\u5373\u4f7f\u6709\u8db3\u591f\u7684\u7d2f\u79ef\u7684\u5757\u5185\u5b58\uff0c\u4f46\u662f\u6ca1\u6709\u5355\u4e00\u5757\u80fd\u591f\u6ee1\u8db3\u9700\u6c42\u65f6\uff0c\u53d1\u751f \u5916\u90e8\u788e\u7247 (external fragmentation)\uff1a \u5916\u90e8\u788e\u7247\u8fd8\u53d6\u51b3\u4e8e\u5c06\u6765\u7684\u8bf7\u6c42\uff0c\u4f8b\u5982\u4e0a\u56fe\uff0c\u5982\u679c\u6700\u540e\u7684p4\u8bf7\u6c424\u4e2a\u5b57\u8282\u5462\uff1f\u4e5f\u5c31\u4e0d\u4f1a\u53d1\u751f\u788e\u7247\u3002\u6b63\u56e0\u4e3a\u5916\u90e8\u788e\u7247\u96be\u4ee5\u91cf\u5316\u4e14\u4e0d\u53ef\u80fd\u9884\u6d4b\uff0c\u6240\u4ee5\u5206\u914d\u5668\u901a\u5e38\u91c7\u7528\u542f\u53d1\u5f0f\u7b56\u7565\u6765\u8bd5\u56fe\u7ef4\u6301\u5c11\u91cf\u7684\u5927\u7a7a\u95f2\u5757\uff0c\u800c\u4e0d\u662f\u7ef4\u6301\u5927\u91cf\u7684\u5c0f\u7a7a\u95f2\u5757\u3002 7.2.3 \u653e\u7f6e\u5df2\u5206\u914d\u7684\u5757 \u5f53\u4e00\u4e2a\u5e94\u7528\u8bf7\u6c42\u4e00\u4e2a k k \u5b57\u8282\u7684\u5757\u65f6\uff0c\u5206\u914d\u5668\u641c\u7d22\u7a7a\u95f2\u94fe\u8868\uff0c\u67e5\u627e\u4e00\u4e2a\u8db3\u591f\u5927\u53ef\u4ee5\u653e\u7f6e\u6240\u8bf7\u6c42\u5757\u7684\u7a7a\u95f2\u5757\u3002\u5206\u914d\u5668\u7684 \u653e\u7f6e\u7b56\u7565 (placement policy)\u6709 \u9996\u6b21\u9002\u914d (first fit)\u3001 \u4e0b\u4e00\u6b21\u9002\u914d (next fit)\u548c \u6700\u4f73\u9002\u914d (best fit)\u3002 \u9996\u6b21\u9002\u914d \u4ece\u5934\u5f00\u59cb\u641c\u7d22\u7a7a\u95f2\u94fe\u8868\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u9002\u5408\u7684\u7a7a\u95f2\u5757\u3002 \u4e0b\u4e00\u6b21\u9002\u914d \u4ece\u4e0a\u4e00\u6b21\u67e5\u8be2\u7ed3\u675f\u7684\u5730\u65b9\u5f00\u59cb\u3002 \u6700\u4f73\u9002\u914d \u68c0\u67e5\u6bcf\u4e2a\u7a7a\u95f2\u5757\uff0c\u9009\u62e9\u9002\u5408\u6240\u9700\u8bf7\u6c42\u5927\u5c0f\u7684\u6700\u5c0f\u7a7a\u95f2\u5757\u3002 7.3 \u5b9e\u73b0\u65b9\u6cd5 \u9690\u5f0f\u7a7a\u95f2\u5217\u8868 Implicit Free List \u663e\u5f0f\u7a7a\u95f2\u5217\u8868 Explicit Free List \u5206\u79bb\u5f0f\u7a7a\u95f2\u5217\u8868 Segregated Free List 7.3.1 \u9690\u5f0f\u7a7a\u95f2\u5217\u8868 \u9690\u5f0f\u7a7a\u95f2\u94fe\u8868\u4f18\u70b9\u662f\u7b80\u5355\uff0c\u7f3a\u70b9\u662f\u64cd\u4f5c\u5f00\u9500\u5927\u3002\u56e0\u4e3a\u65e0\u8bba\u662f\u5206\u914d\u8fd8\u662f\u91ca\u653e\u5757\uff0c\u90fd\u9700\u8981\u5bf9\u9690\u5f0f\u7a7a\u95f2\u5217\u8868\u8fdb\u884c\u641c\u7d22\uff0c\u590d\u6742\u5ea6\u662f O(n) O(n) \uff0c n n \u662f\u5df2\u5206\u914d\u5757\u548c\u7a7a\u95f2\u5757\u7684\u603b\u6570\u3002 7.3.2 \u663e\u5f0f\u7a7a\u95f2\u5217\u8868 7.3.3 \u5206\u79bb\u5f0f\u7a7a\u95f2\u5217\u8868 8 \u5783\u573e\u6536\u96c6 \u5783\u573e\u6536\u96c6\u5668 (garbage collector)\u662f\u4e00\u79cd\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\uff0c\u5b83\u81ea\u52a8\u91ca\u653e\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u7684\u5df2\u5206\u914d\u5757\u3002\u8fd9\u4e9b\u5757\u88ab\u79f0\u4f5c \u5783\u573e (garbage)\u3002\u81ea\u52a8\u56de\u6536\u5b58\u50a8\u7684\u8fc7\u7a0b\u53eb\u505a \u5783\u573e\u6536\u96c6 (garbage collection)\u3002 Java Garbage Collection \u5783\u573e\u6536\u96c6\u5668\u5c06\u5185\u5b58\u89c6\u4e3a\u4e00\u5f20\u6709\u5411 \u53ef\u8fbe\u56fe (reachability graph)\u3002 \u56fe\u7684\u8282\u70b9\u88ab\u5206\u6210\u4e00\u7ec4 \u6839\u8282\u70b9 (root node)\u548c\u4e00\u7ec4 \u5806\u8282\u70b9 (heap node). \u6709\u5411\u8fb9 p\\rightarrow q p\\rightarrow q \u610f\u5473\u7740\u5757 p p \u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u6307\u5411\u5757 q q \u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002 \u6839\u8282\u70b9\u4e0d\u5728\u5806\u4e2d\uff0c\u5305\u542b\u6307\u5411\u5806\u4e2d\u7684\u6307\u9488\u3002 \u5f53\u5b58\u5728\u4e00\u6761\u4ece\u4efb\u610f\u6839\u8282\u70b9\u51fa\u53d1\u5e76\u5230\u8fbe p p \u7684\u6709\u5411\u8def\u5f84\u65f6\uff0c\u8282\u70b9 p p \u662f \u53ef\u8fbe \u7684\u3002 \u5783\u573e\u6536\u96c6\u5668\u7ef4\u62a4\u53ef\u8fbe\u56fe\u7684\u67d0\u79cd\u8868\u793a\uff0c\u5e76\u91ca\u653e\u4e0d\u53ef\u8fbe\u8282\u70b9\u3002 9 C\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u4e0e\u5185\u5b58\u6709\u5173\u7684\u9519\u8bef \u95f4\u63a5\u5f15\u7528\u574f\u6307\u9488 \u8fd9\u662f\u975e\u5e38\u5e38\u89c1\u7684\u4f8b\u5b50\uff0c\u6ca1\u6709\u5f15\u7528\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5c11\u4e86 int val ; scanf ( %d , val ); // \u6b63\u786e\u5e94\u8be5\u662fscanf( %d, val); \u8bfb\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58 \u5806\u5185\u5b58\u662f\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u4e3a0\u7684 \uff1a /* return y = Ax */ int * matvec ( int ** A , int * x ) { int * y = malloc ( N * sizeof ( int )); int i , j ; for ( i = 0 ; i N ; i ++ ) for ( j = 0 ; j N ; j ++ ) y [ i ] += A [ i ][ j ] * x [ j ]; return y ; } \u6b63\u786e\u7684\u65b9\u6cd5\u662f\u663e\u5f0f\u5730\u5c06y[i]\u8bbe\u7f6e\u4e3a0\uff0c\u6216\u8005\u4f7f\u7528 calloc \u3002 \u5141\u8bb8\u6808\u7f13\u51b2\u533a\u6ea2\u51fa \u6ca1\u6709\u68c0\u67e5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08\u7ecf\u5178\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u4e5f\u662f\u5229\u7528\u76f8\u540c\u7684\u673a\u5236\uff09 char s [ 8 ]; int i ; gets ( s ); /* stack buffer overflow, reads 123456789 from stdin */ \u5f15\u7528\u4e0d\u5b58\u5728\u7684\u53d8\u91cf \u5c3d\u7ba1\u6307\u9488\u4ecd\u7136\u6307\u5411\u4e00\u4e2a\u5408\u6cd5\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f46\u662f\u5df2\u7ecf\u4e0d\u518d\u6307\u5411\u4e00\u4e2a\u5408\u6cd5\u7684\u53d8\u91cf\u4e86\u3002\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u65f6\uff0c\u5185\u5b58\u5c06\u91cd\u7528\u5b83\u4eec\u7684\u6808\u9488\u3002 int * foo () { int val ; return val ; } \u591a\u6b21\u91ca\u653e \u8fd9\u4e2a\u4e0d\u7528\u591a\u8bf4\uff0c\u4e0d\u80fd\u91cd\u590d\u641e\u4e24\u6b21 x = malloc ( N * sizeof ( int )); // manipulate x free ( x ); y = malloc ( M * sizeof ( int )); // manipulate y free ( x ); \u5f15\u7528\u5df2\u7ecf\u88ab\u91ca\u653e\u7684\u5806\u5757\u4e2d\u7684\u6570\u636e \u540c\u6837\u662f\u5f88\u660e\u663e\u7684\u9519\u8bef\uff0c\u4e0d\u8981\u72af x = malloc ( N * sizeof ( int )); // manipulate x free ( x ); // .... y = malloc ( M * sizeof ( int )); for ( i = 0 ; i M ; i ++ ) y [ i ] = x [ i ] ++ ; \u5fd8\u8bb0\u91ca\u653e\u5df2\u5206\u914d\u5757\uff1a foo () { int * x = malloc ( N * sizeof ( int )); // ... return ; } \u6216\u8005\u53ea\u91ca\u653e\u4e86\u6570\u636e\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff1a struct list { int val ; struct list * next ; }; foo () { struct list * head = malloc ( sizeof ( struct list )); head - val = 0 ; head - next = NULL ; //... free ( head ); return ; }","title":"Chapter 9: \u865a\u62df\u5185\u5b58"},{"location":"os/csapp/ch9/#chapter-9","text":"","title":"Chapter 9 \u865a\u62df\u5185\u5b58"},{"location":"os/csapp/ch9/#1","text":"\u4e3b\u5b58\u662f\u7531\u8fde\u7eed\u7684 \u5b57\u8282\u5927\u5c0f \u7684\u5355\u5143\u7ec4\u6210\u7684\u6570\u7ec4\uff0c\u6bcf\u5b57\u8282\u90fd\u6709\u4e00\u4e2a\u552f\u4e00\u7684 \u7269\u7406\u5730\u5740 (Physical Adress)\u3002CPU\u4f7f\u7528\u7269\u7406\u5730\u5740\u8bbf\u95ee\u5185\u5b58\u7684\u65b9\u5f0f\u79f0\u4e3a \u7269\u7406\u5bfb\u5740 (Physical adressing)\u3002 \u65e9\u671f\u7684PC\u4ee5\u53ca\u6570\u5b57\u4fe1\u53f7\u5904\u7406\u5668\u7b49\u4f7f\u7528\u7269\u7406\u5bfb\u5740\uff0c\u4e0b\u9762\u662f\u7269\u7406\u5bfb\u5740\u7684\u793a\u610f\u56fe\uff1a \u73b0\u4ee3\u5904\u7406\u5668\u901a\u8fc7\u751f\u6210\u4e00\u4e2a \u865a\u62df\u5730\u5740 (Virtual Address)\u6765\u8bbf\u95ee\u4e3b\u5b58\uff0c\u865a\u62df\u5730\u5740\u7ecf\u8fc7 \u5730\u5740\u7ffb\u8bd1 (Address Translation)\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u3002\u5730\u5740\u7ffb\u8bd1\u7531CPU\u5185\u7684 \u5185\u5b58\u7ba1\u7406\u5355\u5143 (Memory Management Unit, MMU )\u8d1f\u8d23. \u865a\u62df\u5185\u5b58\u5145\u5f53\u7740\u4e09\u4e2a\u89d2\u8272\uff1a \u4f5c\u4e3a\u7f13\u5b58\u7684\u5de5\u5177\uff0c\u53ef\u4ee5\u66f4\u6709\u6548\u7387\u7684\u4f7f\u7528\u5185\u5b58\uff1a\u4f7f\u7528DRAM\u5f53\u505a\u90e8\u5206\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u7f13\u5b58 \u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u5177\uff0c\u7b80\u5316\u5185\u5b58\u7ba1\u7406\uff1a\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u7edf\u4e00\u7684\u7ebf\u6027\u5730\u5740\u7a7a\u95f4 \u4f5c\u4e3a\u5185\u5b58\u4fdd\u62a4\u7684\u5de5\u5177\uff0c\u5206\u9694\u5730\u5740\u7a7a\u95f4\uff1a\u8fdb\u7a0b\u7684\u5185\u5b58\u4e0d\u4f1a\u76f8\u4e92\u5f71\u54cd\uff1b\u7528\u6237\u7a0b\u5e8f\u4e0d\u80fd\u8bbf\u95ee\u4fdd\u5bc6\u7684\u5185\u6838\u4fe1\u606f\u548c\u4ee3\u7801 \u4e0b\u9762\u4e00\u8282\u5177\u4f53\u8bb2\u89e3\u865a\u62df\u5185\u5b58\u7684\u8fd9\u4e09\u4e2a\u89d2\u8272\u3002","title":"1 \u7269\u7406/\u865a\u62df\u5bfb\u5740"},{"location":"os/csapp/ch9/#2","text":"","title":"2 \u865a\u62df\u5185\u5b58\u7684\u4e09\u4e2a\u89d2\u8272"},{"location":"os/csapp/ch9/#21","text":"\u53ef\u4ee5\u628a\u4e3b\u5b58DRAM\u770b\u4f5c\u662f\u865a\u62df\u5185\u5b58\u7684\u7f13\u5b58\uff0c\u7c7b\u4f3c\u4e8eL1\u3001L2\u3001L3\u9ad8\u901f\u7f13\u5b58\u662fDRAM\u5185\u5b58\u7684\u7f13\u5b58\u3002\u4e5f\u5c31\u662f\u8bf4\u53ef\u4ee5\u628a\u865a\u62df\u5185\u5b58\u770b\u6210\u662f\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u7684\u4e00\u90e8\u5206\u3002 \u548c\u5176\u4ed6\u5b58\u50a8\u5668\u5c42\u6b21\u7ed3\u6784\u4e2d\u7684\u7f13\u5b58\u4e00\u6837\uff0c\u8f83\u4f4e\u5c42\u4e0a\u7684\u6570\u636e\u88ab\u5206\u5272\u6210\u5757\uff0c\u4f5c\u4e3a\u4e0e\u8f83\u9ad8\u5c42\u4e4b\u95f4\u7684\u4f20\u8f93\u5355\u5143\u3002 \u8fd9\u91cc\u8f83\u4f4e\u5c42\u662f\u865a\u62df\u5185\u5b58\uff0c\u5206\u5272\u6210 \u865a\u62df\u9875 (Virtual Page, VP)\uff0c\u865a\u62df\u9875\u5927\u5c0f\u4e3a P=2^p P=2^p \u5b57\u8282\u3002 \u7c7b\u4f3c\u7684\uff0c\u8fd9\u91cc\u7684\u8f83\u9ad8\u5c42\uff0c\u7269\u7406\u5185\u5b58DRAM\uff0c\u88ab\u5206\u5272\u4e3a \u7269\u7406\u9875 (Physical Page, PP)\uff0c\u5927\u5c0f\u4e5f\u4e3a P P \uff0c\u4e5f\u53eb\u505a\u9875\u6862(page frame)\u3002 \u865a\u62df\u9875\u7684\u72b6\u6001\u5206\u4e3a\u4e09\u79cd\uff1a \u672a\u5206\u914d (Unallocated): \u7cfb\u7edf\u8fd8\u672a\u5206\u914d(\u521b\u5efa)\u7684\u9875\uff0c\u4e0d\u5360\u7528\u78c1\u76d8\u7a7a\u95f4\u3002 \u7f13\u5b58\u7684 (Cached): \u5f53\u524d\u5df2\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875\u3002 \u672a\u7f13\u5b58\u7684 (Uncached): \u672a\u7f13\u5b58\u5728\u7269\u7406\u5185\u5b58\u4e2d\u7684\u5df2\u5206\u914d\u9875\u3002 \u90a3\u4e48\u5177\u4f53\u662f\u600e\u4e48\u5224\u65ad\u4e00\u4e2a\u865a\u62df\u9875\u7684\u72b6\u6001\u5462\uff1f\u600e\u4e48\u77e5\u9053\u865a\u62df\u9875\u653e\u5728\u54ea\u4e2a\u7269\u7406\u9875\u4e2d\u5462\uff1f \u7269\u7406\u5185\u5b58\u4e2d\u5b58\u5728\u4e00\u4e2a\u53eb \u9875\u8868 (page table)\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7531\u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u3002\u9875\u8868\u5c06\u865a\u62df\u9875\u6620\u5c04\u5230\u7269\u7406\u9875\uff0c\u6bcf\u6b21\u5185\u5b58\u7ba1\u7406\u5355\u5143\u4e2d\u7684 \u5730\u5740\u7ffb\u8bd1\u786c\u4ef6 \u5c06\u865a\u62df\u5730\u5740\u8f6c\u6362\u4e3a\u7269\u7406\u5730\u5740\u65f6\u90fd\u4f1a\u8bfb\u53d6\u9875\u8868\u3002 \u9875\u8868\u5176\u5b9e\u662f\u4e00\u4e2a \u9875\u8868\u6761\u76ee (Page Table Entry, PTE)\u7684\u6570\u7ec4\u3002\u9875\u8868\u6761\u76ee\u5305\u542b\u4e00\u4e2a \u6709\u6548\u4f4d( valid bit)\u548c\u4e00\u4e2a n n \u4f4d\u5730\u5740\u5b57\u6bb5\u3002 \u5728\u865a\u62df\u5185\u5b58\u7684\u4e60\u60ef\u8bf4\u6cd5\u4e2d\uff0cDRAM\u7f13\u5b58\u547d\u4e2d/\u4e0d\u547d\u4e2d\uff0c\u7279\u79f0\u4e3a \u9875\u547d\u4e2d / \u7f3a\u9875 (Page Hit/ Fault)\u3002","title":"2.1 \u4f5c\u4e3a\u7f13\u5b58\u7684\u5de5\u5177"},{"location":"os/csapp/ch9/#22","text":"\u64cd\u4f5c\u7cfb\u7edf\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u9875\u8868\uff0c\u4e5f\u5c31\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a\u72ec\u7acb\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002\u591a\u4e2a\u865a\u62df\u9875\u9762\u53ef\u4ee5\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5171\u4eab\u7269\u7406\u9875\u9762\u4e0a\u3002\u865a\u62df\u5185\u5b58\u7b80\u5316\u4e86\u94fe\u63a5\u548c\u52a0\u8f7d\u3001\u4ee3\u7801\u548c\u6570\u636e\u5171\u4eab\u3001\u4ee5\u53ca\u5e94\u7528\u7a0b\u5e8f\u7684\u5185\u5b58\u5206\u914d\u3002","title":"2.2 \u4f5c\u4e3a\u5185\u5b58\u7ba1\u7406\u7684\u5de5\u5177"},{"location":"os/csapp/ch9/#23","text":"\u4e00\u65b9\u9762\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u62e5\u6709\u72ec\u7acb\u7684\u5730\u5740\u7a7a\u95f4\u4f7f\u5f97\u533a\u5206\u4e0d\u540c\u8fdb\u7a0b\u7684\u79c1\u6709\u5185\u5b58\u53d8\u5f97\u5bb9\u6613\u3002\u53e6\u4e00\u65b9\u9762\u5728\u6bcf\u4e2a\u9875\u8868\u6761\u76eePTE\u4e2d\uff0c\u6dfb\u52a0\u4e86\u989d\u5916\u7684 \u8bb8\u53ef\u4f4d (SUP, READ, WRITE, EXEC)\u6765\u63a7\u5236\u5bf9\u4e00\u4e2a\u865a\u62df\u9875\u9762\u5185\u5bb9\u7684\u8bbf\u95ee\uff1a SUP\u4f4d\u8868\u793a\u8fdb\u7a0b\u662f\u5426\u8fd0\u884c\u5728\u8d85\u7ea7\u7528\u6237\u6a21\u5f0f\u4e0b\u624d\u80fd\u8bbf\u95ee READ/WRITE\u4f4d\u63a7\u5236\u8bfb\u548c\u5199\u7684\u8bbf\u95ee EXEC\u4f4d\u63a7\u5236\u6267\u884c\u7684\u8bbf\u95ee \u5982\u679c\u8fdd\u53cd\u8bb8\u53ef\u6761\u4ef6\uff0c\u90a3\u4e48\u5c31\u89e6\u53d1\u6bb5\u9519\u8bef(segmentation fault)\u3002","title":"2.3 \u4f5c\u4e3a\u5185\u5b58\u4fdd\u62a4\u7684\u5de5\u5177"},{"location":"os/csapp/ch9/#3","text":"\u5730\u5740\u7ffb\u8bd1\u662f\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c\u7269\u7406\u5730\u5740\u7a7a\u95f4\u4e4b\u95f4\u7684\u6620\u5c04\u3002CPU\u4e2d\u7684 \u9875\u8868\u57fa\u5740\u5bc4\u5b58\u5668 (Page Table Base Register, PTBR)\u6307\u5411\u5f53\u524d\u9875\u8868\u3002 n n \u4f4d\u7684\u865a\u62df\u5730\u5740\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a p p \u4f4d\u7684 \u865a\u62df\u9875\u9762\u504f\u79fb (Virtual Page Offset, VPO)\u548c\u4e00\u4e2a n-p n-p \u4f4d\u7684 \u865a\u62df\u9875\u53f7 (Virtual Page Number, VPN)\u3002 m m \u4f4d\u7684\u7269\u7406\u5730\u5740\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u4e00\u4e2a p p \u4f4d\u7684 \u7269\u7406\u9875\u9762\u504f\u79fb (Physical Page Offset, PPO)\u548c\u4e00\u4e2a m-p m-p \u4f4d\u7684 \u7269\u7406\u9875\u53f7 (Physical Page Number, PPN)\u3002 \u7269\u7406\u9875\u9762\u504f\u79fb\u548c\u865a\u62df\u9875\u9762\u504f\u79fb\u662f\u76f8\u901a\u7684\u3002","title":"3 \u5730\u5740\u7ffb\u8bd1"},{"location":"os/csapp/ch9/#tlb","text":"\u6bcf\u6b21CPU\u4ea7\u751f\u4e00\u4e2a\u865a\u62df\u5730\u5740\uff0cMMU\u5c31\u5fc5\u987b\u67e5\u9605\u4e00\u4e2aPTE\u3002\u4e3a\u4e86\u8bd5\u56fe\u6d88\u9664\u8fd9\u79cd\u5f00\u9500\uff0c\u5728MMU\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u5173\u4e8ePTE\u7684\u7f13\u5b58\uff0c\u79f0\u4e3a \u8f6c\u8bd1\u540e\u5907\u7f13\u51b2\u5668 (Translation Lookaside Buffer, TLB)","title":"\u5229\u7528TLB\u52a0\u901f\u5730\u5740\u7ffb\u8bd1"},{"location":"os/csapp/ch9/#_1","text":"\u7528\u6765\u538b\u7f29\u9875\u8868\u7684\u5e38\u7528\u65b9\u6cd5\u662f\u4f7f\u7528\u5c42\u6b21\u7ed3\u6784\u7684\u9875\u8868\u3002 \u865a\u62df\u5730\u5740\u88ab\u5212\u5206\u4e3a k k \u4e2aVPN\u548c1\u4e2aVPO\u3002 \u6bcf\u4e2aVPN i i \u90fd\u662f\u4e00\u4e2a\u5230\u7b2c i i \u7ea7\u9875\u8868\u7684\u7d22\u5f15\uff0c\u5176\u4e2d \\le i \\le k \\le i \\le k \u3002 \u7b2c j j \u7ea7\u9875\u8868\u4e2d\u7684\u6bcf\u4e2aPTE\u90fd\u6307\u5411\u7b2c j+1 j+1 \u7ea7\u7684\u67d0\u4e2a\u9875\u8868\u7684\u57fa\u5740\u3002 \u7b2c k k \u7ea7\u9875\u8868\u4e2d\u7684\u6bcf\u4e2aPTE\u5305\u542b\u67d0\u4e2a\u7269\u7406\u9875\u9762\u7684PPN\u3002","title":"\u591a\u7ea7\u9875\u8868"},{"location":"os/csapp/ch9/#4-core-i7","text":"","title":"4 core i7\u5185\u5b58\u7cfb\u7edf"},{"location":"os/csapp/ch9/#core-i7","text":"Core i7\u57282008\u5e74\u51ac\u5b63\u53d1\u5e03\uff0c\u57fa\u4e8e\u5168\u65b0Nehalem(/n\u0259\u02c8he\u026al\u0259m/)\u67b6\u6784\uff0c\u5b83\u7684\u82af\u7247\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a \u73b0\u5728\u7684Core i7\u652f\u630148\u4f4d(256TB)\u865a\u62df\u5730\u5740\u7a7a\u95f4\u548c52\u4f4d(4PB)\u7269\u7406\u5730\u5740\u7a7a\u95f4\u3002 \u4e0b\u56fe\u7ed9\u51fa\u4e86Core i7\u5185\u5b58\u7cfb\u7edf\u7684\u91cd\u8981\u90e8\u5206\u3002\u5904\u7406\u5668\u5c01\u88c5(Processor package)\u5305\u62ec\u56db\u4e2a\u6838\u3001\u4e00\u4e2a\u5927\u7684\u6240\u6709\u6838\u5171\u4eab\u7684L3\u9ad8\u901f\u7f13\u5b58\uff0c\u4ee5\u53ca\u4e00\u4e2aDDR3\u5185\u5b58\u63a7\u5236\u5668\u3002 \u6bcf\u4e00\u4e2a\u6838\u5305\u542b\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684TLB\u3001\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\u7684\u6570\u636e\u6838\u6307\u4ee4\u9ad8\u901f\u7f13\u5b58\uff0c\u4ee5\u53ca\u4e00\u7ec4\u5feb\u901f\u7684\u70b9\u5230\u70b9\u94fe\u8def(\u57fa\u4e8eQuickPath\u6280\u672f)\u3002 TLB\u662f\u56db\u8def\u7ec4\u76f8\u8054\u7684 L1\u3001L2\u3001L3\u9ad8\u901f\u7f13\u5b58\uff0c\u5757\u5927\u5c0f\u4e3a64\u5b57\u8282\u3002 L1\u3001L2\u662f8\u8def\u7ec4\u76f8\u8054\u7684\uff0cL3\u662f16\u7ec4\u76f8\u8054\u7684\u3002","title":"Core i7\u7b80\u4ecb"},{"location":"os/csapp/ch9/#core-i7_1","text":"Core i7\u91c7\u7528\u56db\u7ea7\u9875\u8868\u5c42\u6b21\u7ed3\u6784\u3002\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u5b83\u81ea\u5df1\u79c1\u6709\u7684\u9875\u8868\u5c42\u6b21\u7ed3\u6784\u3002CR3\u63a7\u5236\u5bc4\u5b58\u5668\u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868(L1)\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 Core i7\u7b2c1-3\u7ea7\u9875\u8868\u6761\u76ee\u683c\u5f0f\uff1a Each entry references a 4K child page table. Significant fields : P : Child page table present in physical memory (1) or not (0). R/W : Read-\u00ad\u2010only or read-\u00ad\u2010write access access permission for all reachable pages. U/S : user or supervisor (kernel) mode access permission for all reachable pages. WT : Write-\u00ad\u2010through or write-\u00ad\u2010back cache policy for the child page table. A : Reference bit (\u5f15\u7528\u4f4d\uff0cset by MMU on reads and writes, cleared by software). PS : Page size either 4 KB or 4 MB (de\ufb01ned for Level 1 PTEs only). Page table physical base address : 40 most significant bits (\u6700\u9ad8 \u6709\u6548\u4f4d ) of physical page table address (forces page tables to be 4KB aligned) XD : Disable or enable instruction fetches from all pages reachable from this PTE. Core i7\u7b2c4\u7ea7\u9875\u8868\u6761\u76ee\u683c\u5f0f\uff1a Page physical base address : 40 most significant bits of physical page address (forces pages to be 4KB aligned) D : Dirty bit (\u810f\u4f4d, or modify bit\uff0cset by MMU on writes , cleared by software) \u4e0b\u56fe\u7ed9\u51fa\u4e86Core i7 MMU\u5982\u4f55\u4f7f\u7528\u56db\u7ea7\u9875\u8868\u5c06\u865a\u62df\u5730\u5740\u7ffb\u8bd1\u6210\u7269\u7406\u5730\u5740\u300236\u4f4dVPN\u88ab\u5212\u5206\u4e3a\u56db\u4e2a9\u4f4d\u7684\u7247\uff0c\u6bcf\u4e2a\u7247\u88ab\u7528\u4f5c\u4e00\u4e2a\u9875\u8868\u7684\u504f\u79fb\u91cf\u3002VPN1\u63d0\u4f9b\u5230\u4e00\u4e2aL1 PET\u7684\u504f\u79fb\u91cf\uff0c\u8fd9\u4e2aPTE\u5305\u542bL2\u9875\u8868\u7684\u57fa\u5730\u5740\u3002VPN2\u63d0\u4f9b\u5230\u4e00\u4e2aL2 PET\u7684\u504f\u79fb\u91cf\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002","title":"Core i7\u5730\u5740\u7ffb\u8bd1"},{"location":"os/csapp/ch9/#5-linux","text":"Linux\u4e3a\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\u3002Linux\u5c06\u865a\u62df\u5185\u5b58\u7ec4\u7ec7\u6210\u4e00\u4e9b \u533a\u57df \u7684\u96c6\u5408\u3002\u4e00\u4e2a\u533a\u57df\u5c31\u662f\u5df2\u5206\u914d\u7684\u865a\u62df\u5185\u5b58\u7684\u8fde\u7eed\u7247\u3002 Linux\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7531\u5982\u4e0b\u51e0\u4e2a\u533a\u57df\u7ec4\u6210\uff1a \u4ee3\u7801\uff08 .text \uff09: \u8fd9\u91cc\u5b58\u653e\u7684\u662fCPU\u8981\u6267\u884c\u7684\u6307\u4ee4\u3002\u4ee3\u7801\u6bb5\u662f\u53ef\u5171\u4eab\u7684\uff0c\u76f8\u540c\u7684\u4ee3\u7801\u5728\u5185\u5b58\u4e2d\u53ea\u4f1a\u6709\u4e00\u4e2a\u62f7\u8d1d\uff0c\u540c\u65f6\u8fd9\u4e2a\u6bb5\u662f\u53ea\u8bfb\u7684\uff0c\u9632\u6b62\u7a0b\u5e8f\u7531\u4e8e\u9519\u8bef\u800c\u4fee\u6539\u81ea\u8eab\u7684\u6307\u4ee4\u3002 \u521d\u59cb\u5316\u6570\u636e\u6bb5\uff08 .data \uff09: \u8fd9\u91cc\u5b58\u653e\u7684\u662f\u7a0b\u5e8f\u4e2d\u9700\u8981\u660e\u786e\u8d4b\u521d\u59cb\u503c\u7684\u53d8\u91cf\uff0c\u4f8b\u5982\u4f4d\u4e8e\u6240\u6709\u51fd\u6570\u4e4b\u5916\u7684\u5168\u5c40\u53d8\u91cf\uff1a int val= 100 \u3002\u9700\u8981\u5f3a\u8c03\u7684\u662f\uff0c\u4ee5\u4e0a\u4e24\u6bb5\u90fd\u662f\u4f4d\u4e8e\u7a0b\u5e8f\u7684\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u5185\u6838\u5728\u8c03\u7528 exec \u51fd\u6570\u542f\u52a8\u8be5\u7a0b\u5e8f\u65f6\u4ece\u6e90\u7a0b\u5e8f\u6587\u4ef6\u4e2d\u8bfb\u5165\u3002 \u672a\u521d\u59cb\u5316\u6570\u636e\u6bb5\uff08 .bss \uff09: \u4f4d\u4e8e\u8fd9\u4e00\u6bb5\u4e2d\u7684\u6570\u636e\uff0c\u5185\u6838\u5728\u6267\u884c\u8be5\u7a0b\u5e8f\u524d\uff0c\u5c06\u5176\u521d\u59cb\u5316\u4e3a0\u6216\u8005 null \u3002\u4f8b\u5982\u51fa\u73b0\u5728\u4efb\u4f55\u51fd\u6570\u4e4b\u5916\u7684\u5168\u5c40\u53d8\u91cf\uff1aint sum; \u5806\uff08 Heap \uff09: \u8fd9\u4e2a\u6bb5\u7528\u4e8e\u5728\u7a0b\u5e8f\u4e2d\u8fdb\u884c\u52a8\u6001\u5185\u5b58\u7533\u8bf7\uff0c\u4f8b\u5982\u7ecf\u5e38\u7528\u5230\u7684 malloc \uff0c new \u7cfb\u5217\u51fd\u6570\u5c31\u662f\u4ece\u8fd9\u4e2a\u6bb5\u4e2d\u7533\u8bf7\u5185\u5b58\u3002 \u5171\u4eab\u5e93( Shared Library ): \u7528\u6765\u5b58\u653e\u50cfC\u6807\u51c6\u5e93\u548c\u6570\u5b66\u54ed\u8fd9\u6837\u7684\u5171\u4eab\u5e93\u7684\u4ee3\u7801\u548c\u6570\u636e\u7684\u533a\u57df\u3002 \u6808\uff08 Stack \uff09: \u51fd\u6570\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u4ee5\u53ca\u5728\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u4e34\u65f6\u53d8\u91cf\u90fd\u4fdd\u5b58\u5728\u6b64\u6bb5\u4e2d\uff0c\u5177\u4f53\u89c1\u4e0b\u9762\u4e00\u8282\u3002 \u5185\u6838\u865a\u62df\u5185\u5b58\uff1a\u5305\u542b\u5185\u6838\u4e2d\u7684\u4ee3\u7801\u548c\u6570\u636e\u7ed3\u6784\u3002 \u4e0b\u9762\u662f\u7a0b\u5e8f\u793a\u610f\uff1a #include stdio.h #include malloc.h void print ( char * , int ); int main () { char * s1 = abcde ; // abcde \u4f5c\u4e3a\u5b57\u7b26\u4e32\u5e38\u91cf\u5b58\u50a8\u5728\u5e38\u91cf\u533a s1\u3001s2\u3001s5\u62e5\u6709\u76f8\u540c\u7684\u5730\u5740 char * s2 = abcde ; char s3 [] = abcd ; long int * s4 [ 100 ]; char * s5 = abcde ; int a = 5 ; int b = 6 ; //a,b\u5728\u6808\u4e0a\uff0c a b\u5730\u5740\u53cd\u5411\u589e\u957f printf ( variables address in main function: s1 =% p s2 =% p s3 =% p s4 =% p s5 =% p a =% p b =% p \\ n , s1,s2,s3,s4,s5, a, b); printf ( variables address in processcall:n ); print ( ddddddddd , 5 ); //\u53c2\u6570\u5165\u6808\u4ece\u53f3\u81f3\u5de6\u8fdb\u884c,p\u5148\u8fdb\u6808,str\u540e\u8fdb p str printf ( main=%p print=%p \\n , main , print ); //\u6253\u5370\u4ee3\u7801\u6bb5\u4e2d\u4e3b\u51fd\u6570\u548c\u5b50\u51fd\u6570\u7684\u5730\u5740\uff0c\u7f16\u8bd1\u65f6\u5148\u7f16\u8bd1\u7684\u5730\u5740\u4f4e\uff0c\u540e\u7f16\u8bd1\u7684\u5730\u5740\u9ad8main print } void print ( char * str , int p ) { char * s1 = abcde ; //abcde\u5728\u5e38\u91cf\u533a\uff0cs1\u5728\u6808\u4e0a char * s2 = abcde ; //abcde\u5728\u5e38\u91cf\u533a\uff0cs2\u5728\u6808\u4e0a s2-s1=6\u53ef\u80fd\u7b49\u4e8e0\uff0c\u7f16\u8bd1\u5668\u4f18\u5316\u4e86\u76f8\u540c\u7684\u5e38\u91cf\uff0c\u53ea\u5728\u5185\u5b58\u4fdd\u5b58\u4e00\u4efd //\u800c s1 s2 char s3 [] = abcdeee ; //abcdeee\u5728\u5e38\u91cf\u533a\uff0cs3\u5728\u6808\u4e0a\uff0c\u6570\u7ec4\u4fdd\u5b58\u7684\u5185\u5bb9\u4e3aabcdeee\u7684\u4e00\u4efd\u62f7\u8d1d long int * s4 [ 100 ]; char * s5 = abcde ; int a = 5 ; int b = 6 ; int c ; int d ; //a,b,c,d\u5747\u5728\u6808\u4e0a\uff0c a b c d\u5730\u5740\u53cd\u5411\u589e\u957f char * q = str ; int m = p ; char * r = ( char * ) malloc ( 1 ); char * w = ( char * ) malloc ( 1 ) ; // r w \u5806\u6b63\u5411\u589e\u957f printf ( s1=%p s2=%p s3=%p s4=%p s5=%p a=%p b=%p c=%p d=%p str=%p q=%p p=%p m=%p r=%p w=%p \\n , s1 , s2 , s3 , s4 , s5 , a , b , c , d , str , q , p , m , r , w ); /* \u6808\u548c\u5806\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u5019\u52a8\u6001\u5206\u914d\u7684\uff0c\u5c40\u90e8\u53d8\u91cf\u5747\u5728\u6808\u4e0a\u5206\u914d\u3002 \u6808\u662f\u53cd\u5411\u589e\u957f\u7684\uff0c\u5730\u5740\u9012\u51cf\uff1bmalloc\u7b49\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u5728\u5806\u7a7a\u95f4\u3002\u5806\u662f\u6b63\u5411\u589e\u957f\u7684\uff0c\u5730\u5740\u9012\u589e\u3002 r,w\u53d8\u91cf\u5728\u6808\u4e0a(\u5219 r w)\uff0cr,w\u6240\u6307\u5185\u5bb9\u5728\u5806\u4e2d(\u5373r w)\u3002*/ }","title":"5 Linux\u865a\u62df\u5185\u5b58\u7cfb\u7edf"},{"location":"os/csapp/ch9/#linux","text":"\u90a3\u4e48Linux\u5177\u4f53\u662f\u600e\u4e48\u7ec4\u7ec7\u865a\u62df\u5185\u5b58\u7684\u5462\uff1fLinux\u5185\u6838\u4e3a\u7cfb\u7edf\u4e2d\u7684\u6bcf\u4e2a\u8fdb\u7a0b\u7ef4\u62a4\u4e00\u4e2a\u5355\u72ec\u7684\u4efb\u52a1\u7ed3\u6784\u4f53( task_struct , \u5728 sched.h \u5934\u6587\u4ef6\u4e2d)\u3002 task_struct \u4e2d\u7684\u5143\u7d20\u5305\u542b\u8fd0\u884c\u8be5\u8fdb\u7a0b\u6240\u9700\u8981\u7684\u6240\u6709\u4fe1\u606f(PID\u3001\u6307\u5411\u7528\u6237\u6808\u7684\u6307\u9488\u3001\u53ef\u6267\u884c\u76ee\u6807\u6587\u4ef6\u7684\u540d\u5b57\u3001\u4ee5\u53ca\u7a0b\u5e8f\u8ba1\u6570\u5668)\u3002 task_struct \u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\u6307\u5411 mm_struct \uff0c\u5b83\u63cf\u8ff0\u4e86\u865a\u62df\u5185\u5b58\u7684\u5f53\u524d\u72b6\u6001\u3002 pgd \u6307\u5411\u7b2c\u4e00\u7ea7\u9875\u8868\u7684\u57fa\u5740\uff0c\u800c mmap \u6307\u5411\u4e00\u4e2a vm_area_struct (\u533a\u57df\u7ed3\u6784, \u5b9a\u4e49\u5728 mm_types.h )\u7684\u94fe\u8868\u3002\u6bcf\u4e2a\u533a\u57df\u7ed3\u6784\u94fe\u8868\u90fd\u63cf\u8ff0\u4e86\u865a\u62df\u5730\u5740\u7a7a\u95f4\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\uff1a vm_start : \u6307\u5411\u533a\u57df\u7684\u8d77\u59cb\u5904 vm_end : \u6307\u5411\u533a\u57df\u7684\u7ed3\u675f\u5904 vm_prot : \u63cf\u8ff0\u7740\u533a\u57df\u5185\u5305\u542b\u7684\u6240\u6709\u9875\u7684\u8bfb\u5199\u8bb8\u53ef\u6743\u9650 vm_flags : \u63cf\u8ff0\u8fdb\u7a0b\u5171\u4eab/\u79c1\u6709 vm_next : \u4e0b\u4e00\u4e2a\u533a\u57df\u7ed3\u6784","title":"Linux\u662f\u5982\u4f55\u7ec4\u7ec7\u865a\u62df\u5185\u5b58\u7684"},{"location":"os/csapp/ch9/#linux_1","text":"\u5185\u5b58\u7ba1\u7406\u5355\u5143MMU\u5728\u8bd5\u56fe\u7ffb\u8bd1\u67d0\u4e2a\u865a\u62df\u5730\u5740A\u65f6\uff0c\u89e6\u53d1\u4e86\u4e00\u4e2a\u7f3a\u9875\u5f02\u5e38\uff0c\u5f15\u8d77\u7f3a\u9875\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\uff1a \u865a\u62df\u5730\u5740A\u662f\u5408\u6cd5\u7684\u5417\uff1f- \u6bb5\u9519\u8bef(segment fault) \u8bd5\u56fe\u8fdb\u884c\u7684\u5185\u5b58\u8bbf\u95ee\u662f\u5408\u6cd5\u7684\u5417\uff1f - \u4fdd\u62a4\u5f02\u5e38(\u4e5f\u5f15\u53d1\u6bb5\u9519\u8bef)","title":"Linux \u7f3a\u9875\u5f02\u5e38\u5904\u7406"},{"location":"os/csapp/ch9/#6","text":"Linux \u901a\u8fc7\u5c06\u4e00\u4e2a\u865a\u62df\u5185\u533a\u57df\u4e0e\u4e00\u4e2a\u78c1\u76d8\u4e0a\u7684 \u5bf9\u8c61 (object)\u5173\u8054\u8d77\u6765\uff0c\u4ee5\u521d\u59cb\u5316\u8fd9\u4e2a\u865a\u62df\u5185\u5b58\u533a\u57df\u7684\u5185\u5bb9\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e3a \u5185\u5b58\u6620\u5c04 (memory mapping). \u4e00\u65e6\u4e00\u4e2a\u865a\u62df\u9875\u9762\u88ab\u521d\u59cb\u5316\u4e86\uff0c\u5b83\u5c31\u5728\u4e00\u4e2a\u7531\u5185\u6838\u7ef4\u62a4\u7684\u4e13\u95e8\u7684 \u4ea4\u6362\u6587\u4ef6 (swap file)\u4e4b\u95f4\u6362\u6765\u6362\u53bb\u3002\u4ea4\u6362\u6587\u4ef6\u4e5f\u53eb\u505a \u4ea4\u6362\u7a7a\u95f4 (swap space)\u6216\u4ea4\u6362\u533a\u57df(swap area)\u3002","title":"6 \u5185\u5b58\u6620\u5c04"},{"location":"os/csapp/ch9/#_2","text":"\u4e00\u4e2a\u5bf9\u8c61\u53ef\u4ee5\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u8981\u4e48\u4f5c\u4e3a \u5171\u4eab\u5bf9\u8c61 \uff0c\u8981\u4e48\u4f5c\u4e3a \u79c1\u6709\u5bf9\u8c61 \u3002 \u5982\u679c\u4e00\u4e2a\u8fdb\u7a0b\u5c06\u4e00\u4e2a\u5171\u4eab\u5bf9\u8c61\u6620\u5c04\u5230\u5b83\u7684\u865a\u62df\u7a7a\u95f4\u7684\u4e00\u4e2a\u533a\u57df\u5185\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8fdb\u7a0b\u5bf9\u8fd9\u4e2a\u533a\u57df\u7684\u4efb\u4f55\u5199\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u4e5f\u628a\u8fd9\u4e2a\u5171\u4eab\u5bf9\u8c61\u6620\u5c04\u5230\u5b83\u4eec\u865a\u62df\u5185\u5b58\u7684\u5176\u4ed6\u8fdb\u7a0b\u800c\u8a00\uff0c\u4e5f\u662f\u53ef\u89c1\u7684\u3002\u800c\u4e14\uff0c\u8fd9\u4e9b\u53d8\u5316\u4e5f\u4f1a\u53cd\u6620\u5728\u78c1\u76d8\u4e0a\u7684\u539f\u59cb\u5bf9\u8c61\u4e2d\u3002 \u5bf9\u4e8e\u4e00\u4e2a\u6620\u5c04\u5230\u79c1\u6709\u5bf9\u8c61\u7684\u533a\u57df\u505a\u7684\u6539\u53d8\uff0c\u5bf9\u4e8e\u5176\u4ed6\u8fdb\u7a0b\u6765\u8bf4\u662f\u4e0d\u53ef\u517c\u5f97\u3002 \u5373\u4f7f\u5bf9\u8c61\u88ab\u6620\u5c04\u5230\u4e86\u591a\u4e2a\u5171\u4eab\u533a\u57df\uff0c\u7269\u7406\u5185\u5b58\u4e2d\u4e5f\u53ea\u9700\u8981\u5b58\u653e\u5171\u4eab\u5bf9\u8c61\u7684\u4e00\u4e2a\u526f\u672c\u3002 \u79c1\u6709\u5bf9\u8c61\u4f7f\u7528 \u5199\u65f6\u590d\u5236 (copy-on-write)\u7684\u5de7\u5999\u6280\u672f\u88ab\u6620\u5c04\u5230\u865a\u62df\u5185\u5b58\u4e2d\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u6620\u5c04\u79c1\u6709\u5bf9\u8c61\u7684\u8fdb\u7a0b\uff0c\u76f8\u5e94\u79c1\u6709\u533a\u57df\u7684\u9875\u8868\u6761\u76ee\u90fd\u88ab\u6807\u8bb0\u4e3a\u53ea\u8bfb\uff0c\u5e76\u4e14\u533a\u57df\u7ed3\u6784\u88ab\u6807\u8bb0\u4e3a \u79c1\u6709\u7684\u5199\u65f6\u590d\u5236 \u3002 \u53ea\u8981\u6ca1\u6709\u8fdb\u7a0b\u65f6\u56fe\u5199\u5b83\u7684\u79c1\u6709\u533a\u57df\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5171\u4eab\u7269\u7406\u5185\u5b58\u4e2d\u5bf9\u8c61\u7684\u4e00\u4e2a\u5355\u72ec\u526f\u672c\u3002 \u53ea\u8981\u6709\u4e00\u4e2a\u8fdb\u7a0b\u8bd5\u56fe\u5199\u79c1\u6709\u533a\u57df\u7684\u67d0\u4e2a\u9875\u9762\uff0c\u6545\u969c\u5904\u7406\u7a0b\u5e8f\u5c31\u4f1a\u5728\u7269\u7406\u5185\u5b58\u4e2d\u521b\u5efa\u8fd9\u4e2a\u9875\u9762\u7684\u4e00\u4e2a\u65b0\u526f\u672c\uff0c\u66f4\u65b0\u9875\u8868\u6761\u76ee\u6307\u5411\u8fd9\u4e2a\u65b0\u7684\u526f\u672c\uff0c\u7136\u540e\u6062\u590d\u8fd9\u4e2a\u9875\u9762\u7684\u53ef\u5199\u6743\u9650\u3002","title":"\u518d\u770b\u5171\u4eab\u5bf9\u8c61"},{"location":"os/csapp/ch9/#fork","text":"\u5f53fork\u51fd\u6570\u88ab\u5f53\u524d\u8fdb\u7a0b\u8c03\u7528\u65f6\uff0c\u5185\u6838\u4e3a\u65b0\u8fdb\u7a0b\u521b\u5efa\u5404\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u5206\u914d\u7ed9\u5b83\u4e00\u4e2a\u552f\u4e00\u7684PID\u3002 \u4e3a\u4e86\u7ed9\u8fd9\u4e2a\u65b0\u8fdb\u7a0b\u521b\u5efa\u865a\u62df\u5185\u5b58\uff0c\u5b83\u521b\u5efa\u4e86\u5f53\u524d\u8fdb\u7a0b\u7684 mm_struct \u3001\u533a\u57df\u7ed3\u6784 vm_area_struct \u548c\u9875\u8868\u7684\u539f\u6837\u526f\u672c\u3002 \u5185\u6838\u5c06\u4e24\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u9875\u9762\u90fd\u6807\u8bb0\u4e3a\u53ea\u8bfb\uff0c\u5e76\u5c06\u4e24\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u6bcf\u4e2a\u533a\u57df\u7ed3\u6784\u90fd\u6807\u8bb0\u4e3a\u79c1\u6709\u7684\u5199\u65f6\u590d\u5236\u3002 \u5f53\u8fd9\u4e24\u4e2a\u8fdb\u7a0b\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u8fdb\u884c\u5199\u64cd\u4f5c\u65f6\uff0c\u5199\u65f6\u590d\u5236\u673a\u5236\u5c31\u4f1a\u521b\u5efa\u65b0\u9875\u9762\u3002","title":"\u518d\u770bfork\u51fd\u6570"},{"location":"os/csapp/ch9/#execve","text":"execve\u51fd\u6570\u5728\u5f53\u524d\u8fdb\u7a0b\u4e2d\u52a0\u8f7d\u5e76\u8fd0\u884c\u65b0\u7a0b\u5e8f\uff1a \u5220\u9664\u5df2\u5b58\u5728\u7684\u7528\u6237\u533a\u57df\u3002 \u6620\u5c04\u79c1\u6709\u533a\u57df\u3002 \u6620\u5c04\u5171\u4eab\u533a\u57df\u3002 \u8bbe\u7f6e\u7a0b\u5e8f\u8ba1\u6570\u5668\u3002","title":"\u518d\u770bexecve\u51fd\u6570"},{"location":"os/csapp/ch9/#_3","text":"Linux\u8fdb\u7a0b\u53ef\u4ee5\u4f7f\u7528mmap\u51fd\u6570\u6765\u521b\u5efa\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u5e76\u5c06\u5bf9\u8c61\u6620\u5c04\u5230\u8fd9\u4e9b\u533a\u57df\u4e2d\u3002 void * mmap ( void * start , int len , int prot , int flags , int fd , int offset ) mmap\u51fd\u6570\u8981\u6c42\u5185\u6838\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u865a\u62df\u5185\u5b58\u533a\u57df\uff0c\u6700\u597d\u662f\u4ece\u5730\u5740start\u5f00\u59cb\u7684\u4e00\u4e2a\u533a\u57df\uff0c\u5e76\u5c06\u6587\u4ef6\u63cf\u8ff0\u7b26fd\u5236\u5b9a\u7684\u5bf9\u8c61\u7684\u4e00\u4e2a\u8fde\u7eed\u7684\u7247(chunk)\u6620\u5c04\u5230\u8fd9\u4e2a\u65b0\u7684\u533a\u57df\u3002\u8fde\u7eed\u7684\u5bf9\u8c61\u7247\u5927\u5c0f\u4e3alen\u5b57\u8282\uff0c\u4ece\u8ddd\u6587\u4ef6\u5f00\u59cb\u5904\u504f\u79fb\u91cf\u4e3aoffset\u5b57\u8282\u7684\u5730\u65b9\u5f00\u59cb\u3002\u5176\u53c2\u6570\uff1a start : may be 0 for \u201cpick an address\u201d prot : PROT_READ, PROT_WRITE, ... flags : MAP_ANON, MAP_PRIVATE, MAP_SHARED, ... Return a pointer to start of mapped area","title":"\u7528\u6237\u7ea7\u5185\u5b58\u6620\u5c04"},{"location":"os/csapp/ch9/#7","text":"\u7a0b\u5e8f\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u6700\u91cd\u8981\u7684\u539f\u56e0\u662f\u7ecf\u5e38\u76f4\u5230\u7a0b\u5e8f\u5b9e\u9645\u8fd0\u884c\u65f6\uff0c\u624d\u77e5\u9053\u67d0\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u5927\u5c0f\u3002\u4e00\u822c\u4f7f\u7528\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668(dynamic memeory allocator)\u6765\u5206\u914d\u52a8\u6001\u5185\u5b58\u3002 \u5206\u914d\u5668\u6839\u636e\u54ea\u4e2a\u5b9e\u4f53\u6765\u8d1f\u8d23\u91ca\u653e\u5df2\u5206\u914d\u7684\u5757\uff0c\u5206\u4e3a\u4e24\u79cd\uff1a \u663e\u793a\u5206\u914d\u5668 (explicit allocator)\uff1a\u8981\u6c42\u7a0b\u5e8f\u663e\u793a\u5730\u91ca\u653e\u4efb\u4f55\u5df2\u5206\u914d\u7684\u5757\u3002\u4f8b\u5982C\u4e2d\u7684malloc/free\uff0cC++\u4e2d\u7684new/delete\u3002 \u9690\u5f0f\u5206\u914d\u5668 (implicit allocator): \u9664\u6b64\u4e4b\u5916\uff0c\u81ea\u52a8\u91ca\u653e\u672a\u4f7f\u7528\u7684\u5df2\u5206\u914d\u5757(\u5783\u573e\u6536\u96c6\uff0cgarbage collection)\u3002","title":"7 \u52a8\u6001\u5185\u5b58\u5206\u914d"},{"location":"os/csapp/ch9/#72","text":"","title":"7.2 \u663e\u5f0f\u5206\u914d\u5668\u7684\u8981\u6c42\u548c\u76ee\u6807"},{"location":"os/csapp/ch9/#721","text":"\u5206\u914d\u5668\u6709\u5982\u4e0b\u7684\u8981\u6c42\uff1a \u5904\u7406\u4efb\u610f\u8bf7\u6c42\u5e8f\u5217 \u7acb\u5373\u76f8\u5e94\u8bf7\u6c42 \u53ea\u4f7f\u7528\u5806 \u5bf9\u9f50\u5757(\u5bf9\u9f50\u8981\u6c42) \u4e0d\u4fee\u6539\u5df2\u5206\u914d\u7684\u5757","title":"7.2.1 \u5206\u914d\u5668\u7684\u8981\u6c42"},{"location":"os/csapp/ch9/#722","text":"\u5206\u914d\u5668\u8bd5\u56fe\u6700\u5927\u5316\u541e\u5410\u7387\u548c\u5185\u5b58\u5229\u7528\u7387 \u6700\u5927\u5316\u541e\u5410\u7387(\u541e\u5410\u7387\uff1a\u6bcf\u4e2a\u5355\u4f4d\u65f6\u95f4\u91cc\u5b8c\u6210\u7684\u8bf7\u6c42\u6570) \u6700\u5927\u5316\u5185\u5b58\u5229\u7528\u7387 \u6700\u5927\u5316\u541e\u5410\u7387\u548c\u6700\u5927\u5316\u5229\u7528\u7387\u4e4b\u95f4\u662f\u76f8\u4e92 \u7275\u5236 \u7684\uff0c\u5206\u914d\u5668\u8bbe\u8ba1\u7684\u76ee\u6807\u662f\u5728\u8fd9\u4e24\u8005\u4e4b\u95f4\u627e\u5230\u4e00\u4e2a\u9002\u5f53\u7684\u5e73\u8861\u3002 \u9020\u6210\u5229\u7528\u7387\u5f88\u4f4e\u7684\u4e3b\u8981\u539f\u56e0\u662f \u788e\u7247 (fragmentation)\u73b0\u8c61\u3002\u5f53\u6709\u6548\u8f7d\u8377\u6bd4\u5757\u8981\u5c0f\u65f6\uff0c\u53d1\u751f \u5185\u90e8\u788e\u7247 (Internal fragmentation)\uff0c\u5f15\u8d77\u7684\u539f\u56e0\u6709\uff1a\u5bf9\u9f50\u7b49\u3002 \u5f53\u5373\u4f7f\u6709\u8db3\u591f\u7684\u7d2f\u79ef\u7684\u5757\u5185\u5b58\uff0c\u4f46\u662f\u6ca1\u6709\u5355\u4e00\u5757\u80fd\u591f\u6ee1\u8db3\u9700\u6c42\u65f6\uff0c\u53d1\u751f \u5916\u90e8\u788e\u7247 (external fragmentation)\uff1a \u5916\u90e8\u788e\u7247\u8fd8\u53d6\u51b3\u4e8e\u5c06\u6765\u7684\u8bf7\u6c42\uff0c\u4f8b\u5982\u4e0a\u56fe\uff0c\u5982\u679c\u6700\u540e\u7684p4\u8bf7\u6c424\u4e2a\u5b57\u8282\u5462\uff1f\u4e5f\u5c31\u4e0d\u4f1a\u53d1\u751f\u788e\u7247\u3002\u6b63\u56e0\u4e3a\u5916\u90e8\u788e\u7247\u96be\u4ee5\u91cf\u5316\u4e14\u4e0d\u53ef\u80fd\u9884\u6d4b\uff0c\u6240\u4ee5\u5206\u914d\u5668\u901a\u5e38\u91c7\u7528\u542f\u53d1\u5f0f\u7b56\u7565\u6765\u8bd5\u56fe\u7ef4\u6301\u5c11\u91cf\u7684\u5927\u7a7a\u95f2\u5757\uff0c\u800c\u4e0d\u662f\u7ef4\u6301\u5927\u91cf\u7684\u5c0f\u7a7a\u95f2\u5757\u3002","title":"7.2.2 \u5206\u914d\u5668\u7684\u76ee\u6807"},{"location":"os/csapp/ch9/#723","text":"\u5f53\u4e00\u4e2a\u5e94\u7528\u8bf7\u6c42\u4e00\u4e2a k k \u5b57\u8282\u7684\u5757\u65f6\uff0c\u5206\u914d\u5668\u641c\u7d22\u7a7a\u95f2\u94fe\u8868\uff0c\u67e5\u627e\u4e00\u4e2a\u8db3\u591f\u5927\u53ef\u4ee5\u653e\u7f6e\u6240\u8bf7\u6c42\u5757\u7684\u7a7a\u95f2\u5757\u3002\u5206\u914d\u5668\u7684 \u653e\u7f6e\u7b56\u7565 (placement policy)\u6709 \u9996\u6b21\u9002\u914d (first fit)\u3001 \u4e0b\u4e00\u6b21\u9002\u914d (next fit)\u548c \u6700\u4f73\u9002\u914d (best fit)\u3002 \u9996\u6b21\u9002\u914d \u4ece\u5934\u5f00\u59cb\u641c\u7d22\u7a7a\u95f2\u94fe\u8868\uff0c\u9009\u62e9\u7b2c\u4e00\u4e2a\u9002\u5408\u7684\u7a7a\u95f2\u5757\u3002 \u4e0b\u4e00\u6b21\u9002\u914d \u4ece\u4e0a\u4e00\u6b21\u67e5\u8be2\u7ed3\u675f\u7684\u5730\u65b9\u5f00\u59cb\u3002 \u6700\u4f73\u9002\u914d \u68c0\u67e5\u6bcf\u4e2a\u7a7a\u95f2\u5757\uff0c\u9009\u62e9\u9002\u5408\u6240\u9700\u8bf7\u6c42\u5927\u5c0f\u7684\u6700\u5c0f\u7a7a\u95f2\u5757\u3002","title":"7.2.3 \u653e\u7f6e\u5df2\u5206\u914d\u7684\u5757"},{"location":"os/csapp/ch9/#73","text":"\u9690\u5f0f\u7a7a\u95f2\u5217\u8868 Implicit Free List \u663e\u5f0f\u7a7a\u95f2\u5217\u8868 Explicit Free List \u5206\u79bb\u5f0f\u7a7a\u95f2\u5217\u8868 Segregated Free List","title":"7.3 \u5b9e\u73b0\u65b9\u6cd5"},{"location":"os/csapp/ch9/#731","text":"\u9690\u5f0f\u7a7a\u95f2\u94fe\u8868\u4f18\u70b9\u662f\u7b80\u5355\uff0c\u7f3a\u70b9\u662f\u64cd\u4f5c\u5f00\u9500\u5927\u3002\u56e0\u4e3a\u65e0\u8bba\u662f\u5206\u914d\u8fd8\u662f\u91ca\u653e\u5757\uff0c\u90fd\u9700\u8981\u5bf9\u9690\u5f0f\u7a7a\u95f2\u5217\u8868\u8fdb\u884c\u641c\u7d22\uff0c\u590d\u6742\u5ea6\u662f O(n) O(n) \uff0c n n \u662f\u5df2\u5206\u914d\u5757\u548c\u7a7a\u95f2\u5757\u7684\u603b\u6570\u3002","title":"7.3.1 \u9690\u5f0f\u7a7a\u95f2\u5217\u8868"},{"location":"os/csapp/ch9/#732","text":"","title":"7.3.2 \u663e\u5f0f\u7a7a\u95f2\u5217\u8868"},{"location":"os/csapp/ch9/#733","text":"","title":"7.3.3 \u5206\u79bb\u5f0f\u7a7a\u95f2\u5217\u8868"},{"location":"os/csapp/ch9/#8","text":"\u5783\u573e\u6536\u96c6\u5668 (garbage collector)\u662f\u4e00\u79cd\u52a8\u6001\u5185\u5b58\u5206\u914d\u5668\uff0c\u5b83\u81ea\u52a8\u91ca\u653e\u7a0b\u5e8f\u4e0d\u518d\u9700\u8981\u7684\u5df2\u5206\u914d\u5757\u3002\u8fd9\u4e9b\u5757\u88ab\u79f0\u4f5c \u5783\u573e (garbage)\u3002\u81ea\u52a8\u56de\u6536\u5b58\u50a8\u7684\u8fc7\u7a0b\u53eb\u505a \u5783\u573e\u6536\u96c6 (garbage collection)\u3002 Java Garbage Collection \u5783\u573e\u6536\u96c6\u5668\u5c06\u5185\u5b58\u89c6\u4e3a\u4e00\u5f20\u6709\u5411 \u53ef\u8fbe\u56fe (reachability graph)\u3002 \u56fe\u7684\u8282\u70b9\u88ab\u5206\u6210\u4e00\u7ec4 \u6839\u8282\u70b9 (root node)\u548c\u4e00\u7ec4 \u5806\u8282\u70b9 (heap node). \u6709\u5411\u8fb9 p\\rightarrow q p\\rightarrow q \u610f\u5473\u7740\u5757 p p \u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u6307\u5411\u5757 q q \u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u3002 \u6839\u8282\u70b9\u4e0d\u5728\u5806\u4e2d\uff0c\u5305\u542b\u6307\u5411\u5806\u4e2d\u7684\u6307\u9488\u3002 \u5f53\u5b58\u5728\u4e00\u6761\u4ece\u4efb\u610f\u6839\u8282\u70b9\u51fa\u53d1\u5e76\u5230\u8fbe p p \u7684\u6709\u5411\u8def\u5f84\u65f6\uff0c\u8282\u70b9 p p \u662f \u53ef\u8fbe \u7684\u3002 \u5783\u573e\u6536\u96c6\u5668\u7ef4\u62a4\u53ef\u8fbe\u56fe\u7684\u67d0\u79cd\u8868\u793a\uff0c\u5e76\u91ca\u653e\u4e0d\u53ef\u8fbe\u8282\u70b9\u3002","title":"8 \u5783\u573e\u6536\u96c6"},{"location":"os/csapp/ch9/#9-c","text":"","title":"9 C\u7a0b\u5e8f\u4e2d\u5e38\u89c1\u7684\u4e0e\u5185\u5b58\u6709\u5173\u7684\u9519\u8bef"},{"location":"os/csapp/ch9/#_4","text":"\u8fd9\u662f\u975e\u5e38\u5e38\u89c1\u7684\u4f8b\u5b50\uff0c\u6ca1\u6709\u5f15\u7528\u5bf9\u5e94\u7684\u5730\u5740\uff0c\u5c11\u4e86 int val ; scanf ( %d , val ); // \u6b63\u786e\u5e94\u8be5\u662fscanf( %d, val);","title":"\u95f4\u63a5\u5f15\u7528\u574f\u6307\u9488"},{"location":"os/csapp/ch9/#_5","text":"\u5806\u5185\u5b58\u662f\u6ca1\u6709\u88ab\u521d\u59cb\u5316\u4e3a0\u7684 \uff1a /* return y = Ax */ int * matvec ( int ** A , int * x ) { int * y = malloc ( N * sizeof ( int )); int i , j ; for ( i = 0 ; i N ; i ++ ) for ( j = 0 ; j N ; j ++ ) y [ i ] += A [ i ][ j ] * x [ j ]; return y ; } \u6b63\u786e\u7684\u65b9\u6cd5\u662f\u663e\u5f0f\u5730\u5c06y[i]\u8bbe\u7f6e\u4e3a0\uff0c\u6216\u8005\u4f7f\u7528 calloc \u3002","title":"\u8bfb\u672a\u521d\u59cb\u5316\u7684\u5185\u5b58"},{"location":"os/csapp/ch9/#_6","text":"\u6ca1\u6709\u68c0\u67e5\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\uff08\u7ecf\u5178\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u4e5f\u662f\u5229\u7528\u76f8\u540c\u7684\u673a\u5236\uff09 char s [ 8 ]; int i ; gets ( s ); /* stack buffer overflow, reads 123456789 from stdin */","title":"\u5141\u8bb8\u6808\u7f13\u51b2\u533a\u6ea2\u51fa"},{"location":"os/csapp/ch9/#_7","text":"\u5c3d\u7ba1\u6307\u9488\u4ecd\u7136\u6307\u5411\u4e00\u4e2a\u5408\u6cd5\u7684\u5185\u5b58\u5730\u5740\uff0c\u4f46\u662f\u5df2\u7ecf\u4e0d\u518d\u6307\u5411\u4e00\u4e2a\u5408\u6cd5\u7684\u53d8\u91cf\u4e86\u3002\u4ee5\u540e\u5728\u7a0b\u5e8f\u4e2d\u8c03\u7528\u5176\u4ed6\u51fd\u6570\u65f6\uff0c\u5185\u5b58\u5c06\u91cd\u7528\u5b83\u4eec\u7684\u6808\u9488\u3002 int * foo () { int val ; return val ; }","title":"\u5f15\u7528\u4e0d\u5b58\u5728\u7684\u53d8\u91cf"},{"location":"os/csapp/ch9/#_8","text":"\u8fd9\u4e2a\u4e0d\u7528\u591a\u8bf4\uff0c\u4e0d\u80fd\u91cd\u590d\u641e\u4e24\u6b21 x = malloc ( N * sizeof ( int )); // manipulate x free ( x ); y = malloc ( M * sizeof ( int )); // manipulate y free ( x );","title":"\u591a\u6b21\u91ca\u653e"},{"location":"os/csapp/ch9/#_9","text":"\u540c\u6837\u662f\u5f88\u660e\u663e\u7684\u9519\u8bef\uff0c\u4e0d\u8981\u72af x = malloc ( N * sizeof ( int )); // manipulate x free ( x ); // .... y = malloc ( M * sizeof ( int )); for ( i = 0 ; i M ; i ++ ) y [ i ] = x [ i ] ++ ;","title":"\u5f15\u7528\u5df2\u7ecf\u88ab\u91ca\u653e\u7684\u5806\u5757\u4e2d\u7684\u6570\u636e"},{"location":"os/csapp/ch9/#_10","text":"foo () { int * x = malloc ( N * sizeof ( int )); // ... return ; } \u6216\u8005\u53ea\u91ca\u653e\u4e86\u6570\u636e\u7ed3\u6784\u7684\u4e00\u90e8\u5206\uff1a struct list { int val ; struct list * next ; }; foo () { struct list * head = malloc ( sizeof ( struct list )); head - val = 0 ; head - next = NULL ; //... free ( head ); return ; }","title":"\u5fd8\u8bb0\u91ca\u653e\u5df2\u5206\u914d\u5757\uff1a"},{"location":"os/osc/","text":"OSC Chapter 1: Introduction Chapter 2: Operating System structures Chapter 3: Processes Chapter 4: Threads and Concurrency Chapter 5: CPU Scheduling Chapter 6: Synchronization Tools Chapter 7: Synchronization Examples Chapter 8: Deadlocks Chapter 9: Main Memory Chapter 10: Virtual Memory Chapter 11: Mass-Storage Structure Chapter 13: File-System Interfaces","title":"Contents"},{"location":"os/osc/#osc","text":"Chapter 1: Introduction Chapter 2: Operating System structures Chapter 3: Processes Chapter 4: Threads and Concurrency Chapter 5: CPU Scheduling Chapter 6: Synchronization Tools Chapter 7: Synchronization Examples Chapter 8: Deadlocks Chapter 9: Main Memory Chapter 10: Virtual Memory Chapter 11: Mass-Storage Structure Chapter 13: File-System Interfaces","title":"OSC"},{"location":"os/osc/ch1/","text":"Operating System Concepts 1 - Introduction 1. What operating system do There is no completely adequate definition of operating system. A simple viewpoint is that it includes everything a vendor ships. A more common definition is that the operating system is the one program running at all times on computer - usually called kernel . Three main purposes of an operating system are, manages a computer's hardware provides a basis for application programs acts as an intermediary between the user and hardware The operating system includes the always running kernel , middleware frameworks that ease application development and provide features, and system programs that aid in managing the system while it is running. Anything between the kernel and user applications is considered middleware (\u4e2d\u95f4\u4ef6) [ 1 ]. 2 Computer-system organisation A computer system can be divided roughly into four components: the hardware , the operating system , the application programs , and a user . A computer system (\u8ba1\u7b97\u673a\u7cfb\u7edf) consists of one or more CPUs and a number of device controllers (\u8bbe\u5907\u63a7\u5236\u5668) connected through a common bus (\u603b\u7ebf) that provides access between components and shared memory . A device controller maintains some local buffer storage (\u5c40\u90e8\u7f13\u51b2\u5b58\u50a8) and a set of special-purpose registers . Typically, operating systems have a device driver (\u8bbe\u5907\u9a71\u52a8) for each device controller. This device driver understands the device controller and provides the rest of the operating system with a uniform interface to the device Interrupt When the CPU is interrupted , it stops what it is doing and immediately transfers execution to a fixed location. The fixed location usually contains the starting address where the service routine for the interrupt is located. The interrupt routine (\u4e2d\u65ad\u7a0b\u5e8f) is called indirectly through the interrupt vector table\uff08\u4e2d\u65ad\u5411\u91cf\u8868). Generally, the table of pointers is stored in low memory (the first hundred or so locations). These locations hold the addresses of the interrupt service routines for the various devices. Interrupt vector is then indexed by a unique number(interrupt vector number, \u4e2d\u65ad\u5411\u91cf\u53f7) interrupt priority levels(\u4e2d\u65ad\u4f18\u5148\u7ea7) Some services are provided outside of the kernel by system programs that are loaded into memory at boot time to become system daemons , which run the entire time the kernel is running. interrupt, exception, trap Unfortunately, there is no clear consensus as to the exact meaning of these terms(exceptions, faults, aborts, traps, and interrupts). Different authors adopt different terms to their own use [ ref ]. trap (\u9677\u9631) or exception (\u5f02\u5e38): a software-generated interrupt either by an error\uff08e.g. division by zero, or invalid memory access or by a system call. * usual way to invoke a kernel routine (a system call) interrupt (\u4e2d\u65ad): generated by the hardware (devices like the hard disk, graphics card, I/O ports, etc). multiprogramming and multitasking Multiprogramming (\u591a\u9053\u7a0b\u5e8f) explained: The operating system keeps several processes in memory simultaneously. The operating system picks and begins to execute one of these processes. Eventually, the process may have to wait for some task, such as an I/O operation, to complete. When that process needs to wait, the CPU switches to another process, and so on. Eventually, the first process finishes waiting and gets the CPU back. As long as at least one process needs to execute, the CPU is never idle . Multitasking (\u591a\u4efb\u52a1) is a logical extension of multiprogramming. In multitasking systems, the CPU executes multiple processes by switching among them, but the switches occur frequently , providing the user with a fast response time. dual-mode In order to ensure the proper execution of the system, we must be able to distinguish between the execution of operating-system code\uff08 kernel mode \uff09and user-defined code ( user mode ). Mode bit (\u6a21\u5f0f\u4f4d), is added to the hardware of the computer to indicate the current mode: kernel (0) or user (1). The concept of modes can be extended beyond two modes. protection rings \uff08\u4fdd\u62a4\u73af) are mechanisms to protect data and functionality from faults (by improving fault tolerance) and malicious behavior (by providing computer security). For intel processors, ring 0 is kernel mode and ring 3 is user mode timer A timer (\u5b9a\u65f6\u5668) can be set to interrupt the computer after a specified period( usually, 100s hz) A variable timer is generally implemented by a fixed-rate clock and a counter. The operating system sets the counter. Every time the clock ticks, the counter is decremented. When the counter reaches 0, an interrupt occurs. 7 virtualization virtualization (\u865a\u62df\u5316) is a technology that allows us to abstract the hardware of a single computer into several different execution environments, thereby creating the illusion that each separate environment is running on its own private computer . * v.s. [different] Emulation involves simulating computer handware in software. 8 Free and Open-Source OS Open-source OS source code available opposite: closed-source OS Free OS source code available allow no-cost use, redistribution, and modification Arguably, open-source code is more secure than closed-source code because many more eyes are viewing the code. e.g. OS GNU/Linux FreeBSD Solaris","title":"Chapter 1: Introduction "},{"location":"os/osc/ch1/#operating-system-concepts-1-introduction","text":"","title":"Operating System Concepts 1 - Introduction"},{"location":"os/osc/ch1/#1-what-operating-system-do","text":"There is no completely adequate definition of operating system. A simple viewpoint is that it includes everything a vendor ships. A more common definition is that the operating system is the one program running at all times on computer - usually called kernel . Three main purposes of an operating system are, manages a computer's hardware provides a basis for application programs acts as an intermediary between the user and hardware The operating system includes the always running kernel , middleware frameworks that ease application development and provide features, and system programs that aid in managing the system while it is running. Anything between the kernel and user applications is considered middleware (\u4e2d\u95f4\u4ef6) [ 1 ].","title":"1. What operating system do"},{"location":"os/osc/ch1/#2-computer-system-organisation","text":"A computer system can be divided roughly into four components: the hardware , the operating system , the application programs , and a user . A computer system (\u8ba1\u7b97\u673a\u7cfb\u7edf) consists of one or more CPUs and a number of device controllers (\u8bbe\u5907\u63a7\u5236\u5668) connected through a common bus (\u603b\u7ebf) that provides access between components and shared memory . A device controller maintains some local buffer storage (\u5c40\u90e8\u7f13\u51b2\u5b58\u50a8) and a set of special-purpose registers . Typically, operating systems have a device driver (\u8bbe\u5907\u9a71\u52a8) for each device controller. This device driver understands the device controller and provides the rest of the operating system with a uniform interface to the device","title":"2 Computer-system organisation"},{"location":"os/osc/ch1/#interrupt","text":"When the CPU is interrupted , it stops what it is doing and immediately transfers execution to a fixed location. The fixed location usually contains the starting address where the service routine for the interrupt is located. The interrupt routine (\u4e2d\u65ad\u7a0b\u5e8f) is called indirectly through the interrupt vector table\uff08\u4e2d\u65ad\u5411\u91cf\u8868). Generally, the table of pointers is stored in low memory (the first hundred or so locations). These locations hold the addresses of the interrupt service routines for the various devices. Interrupt vector is then indexed by a unique number(interrupt vector number, \u4e2d\u65ad\u5411\u91cf\u53f7) interrupt priority levels(\u4e2d\u65ad\u4f18\u5148\u7ea7) Some services are provided outside of the kernel by system programs that are loaded into memory at boot time to become system daemons , which run the entire time the kernel is running.","title":"Interrupt"},{"location":"os/osc/ch1/#interrupt-exception-trap","text":"Unfortunately, there is no clear consensus as to the exact meaning of these terms(exceptions, faults, aborts, traps, and interrupts). Different authors adopt different terms to their own use [ ref ]. trap (\u9677\u9631) or exception (\u5f02\u5e38): a software-generated interrupt either by an error\uff08e.g. division by zero, or invalid memory access or by a system call. * usual way to invoke a kernel routine (a system call) interrupt (\u4e2d\u65ad): generated by the hardware (devices like the hard disk, graphics card, I/O ports, etc).","title":"interrupt, exception, trap"},{"location":"os/osc/ch1/#multiprogramming-and-multitasking","text":"Multiprogramming (\u591a\u9053\u7a0b\u5e8f) explained: The operating system keeps several processes in memory simultaneously. The operating system picks and begins to execute one of these processes. Eventually, the process may have to wait for some task, such as an I/O operation, to complete. When that process needs to wait, the CPU switches to another process, and so on. Eventually, the first process finishes waiting and gets the CPU back. As long as at least one process needs to execute, the CPU is never idle . Multitasking (\u591a\u4efb\u52a1) is a logical extension of multiprogramming. In multitasking systems, the CPU executes multiple processes by switching among them, but the switches occur frequently , providing the user with a fast response time.","title":"multiprogramming and multitasking"},{"location":"os/osc/ch1/#dual-mode","text":"In order to ensure the proper execution of the system, we must be able to distinguish between the execution of operating-system code\uff08 kernel mode \uff09and user-defined code ( user mode ). Mode bit (\u6a21\u5f0f\u4f4d), is added to the hardware of the computer to indicate the current mode: kernel (0) or user (1). The concept of modes can be extended beyond two modes. protection rings \uff08\u4fdd\u62a4\u73af) are mechanisms to protect data and functionality from faults (by improving fault tolerance) and malicious behavior (by providing computer security). For intel processors, ring 0 is kernel mode and ring 3 is user mode","title":"dual-mode"},{"location":"os/osc/ch1/#timer","text":"A timer (\u5b9a\u65f6\u5668) can be set to interrupt the computer after a specified period( usually, 100s hz) A variable timer is generally implemented by a fixed-rate clock and a counter. The operating system sets the counter. Every time the clock ticks, the counter is decremented. When the counter reaches 0, an interrupt occurs.","title":"timer"},{"location":"os/osc/ch1/#7-virtualization","text":"virtualization (\u865a\u62df\u5316) is a technology that allows us to abstract the hardware of a single computer into several different execution environments, thereby creating the illusion that each separate environment is running on its own private computer . * v.s. [different] Emulation involves simulating computer handware in software.","title":"7 virtualization"},{"location":"os/osc/ch1/#8-free-and-open-source-os","text":"Open-source OS source code available opposite: closed-source OS Free OS source code available allow no-cost use, redistribution, and modification Arguably, open-source code is more secure than closed-source code because many more eyes are viewing the code. e.g. OS GNU/Linux FreeBSD Solaris","title":"8 Free and Open-Source OS"},{"location":"os/osc/ch10/","text":"Operating System Concepts 10 - Virtual Memory 1 Background Various memory-management strategies discussed in Chapter 9 have the same goal to keep many processes in memory simultaneously to allow multiprogramming. PROBLEM: However, they tend to require that an entire process be in memory before it can execute. In many cases, the entire program is not needed: Programs often have code to handle unusual error conditions. This code is almost never executed. Arrays, lists, and tables are often allocated more memory than they actually needed. Certain options and features of a program may be used rarely. SOLUTION: Virtual memory allows the execution of processes that are not completely in memory. ADVANTAGE: Programs can be larger than physical memory. Virtual memory abstracts main memory as viewed by the programmer from physical memory. It frees programmers from the concerns of memory-storage limitations. Virtual memory allows processes to share files and memory through page sharing . 2 Demand Paging QUESTION: How an executable program might be loaded from secondary storage into memory? OPTION: One option is to load the entire program in physical memory at program execution time. PROBLEM: We may not initially need the entire program in memory. (e.g. a program starts with a list of available options from which the user is to select). SOLUTION: Demand paging (\u6309\u9700\u8c03\u9875) loads pages in memory only when they are needed. Note A demand-paging system is similar to a paging system with swapping where processes reside in secondary memory. Basic Concepts Since demand paging loads pages in memory only when they are needed, some pages will be in memory and some will be in secondary storage. Thus, we need some form of hardware support to distinguish between the two. The valid bit is set to ensure that the page is in the logical address space of the process and is currently in secondary storage. Access to a page marked invalid causes a page fault (\u7f3a\u9875). The procedure for handling this page fault is straightforward: We check page tables (usually kept with the process control block) for this process to determine whether the reference was a valid or an invalid memory access. If the reference was invalid, we terminate the process. If it was valid but we have not yet brought in that page, we now page it in. We find a free frame (by taking one from the free-frame list, for example). We schedule a secondary storage operation to read the desired page into the newly allocated frame. When the storage read is complete, we modify the internal table kept with the process and the page table to indicate that the page is now in memory. We restart the instruction that was interrupted by the trap. The process can now access the page as though it had always been in memory. In the extreme case, we can start executing a process with no pages in memory. This scheme is pure demand paging : never bring a page into memory until it is required . Free-Frame List Most operating system maintain a free-frame list , a pool of free frames for satisfying requests, that bring the desired pages from secondary storage into main memory. Operating system typically allocate free frames using a technique known as zero-fill-on-demand , which \"zero-out\" frames before it is allocated (i.e. erasing previous contents). Performance of Demand Paging Let p(0\\le p \\le 1) p(0\\le p \\le 1) be page-fault rage (\u7f3a\u9875\u7387), the probability of a page fault. We would expect p p to be close to zero. The effective access time, is \\text{effective access time} = (1-p)\\times ma + p\\times \\text{page fault time} \\text{effective access time} = (1-p)\\times ma + p\\times \\text{page fault time} where ma ma denotes the memory-access time. With an average page-fault service time of 8 milliseconds and a memory access time of 200 nanoseconds, the effective access time in nanoseconds is 200+7,999,800\\times p 200+7,999,800\\times p . The effective access time is directly proportional to the page-fault rate p p , so it is important to keep the page-fault rate low in a demand-paging system. An additional aspect of demand paging is the handling and overall use of swap space. I/O to swap space is generally faster than that to the file system, because swap space is allocated in much larger blocks, and file lookups an indirect allocation methods are not used ( see details in Chapter 11 ). One OPTION: copying an entire file image into the swap space at process startup and then performing demand paging from the swap space. Second OPTION: practiced by several operating system, including Linux and Windows \u2014\u2014\u2014 to demand-page from the file system initially but to write the pages to swap space as they are replaced. Mobile operating system typically do not support swapping [ Chapter 9 ]. Instead, these systems demand-page from the file system and reclaim read-only pages (such as code) from applications if memory becomes constrained. 3 Copy-on-Write Copy-on-write (\u5199\u65f6\u590d\u5236) works by allowing the parent and child processes initially to share the same pages, and if either process writes to a shared page, a copy of the shared page is created. 4 Page Replacement When we increase degree of multiprogramming, over-allocating of memory results in page faults. The operating system determines where the desired page is residing on secondary storage but to find that there are no free frames on the free-frame list (i.e. all memory is in use). Most operating systems now combine swapping pages with page replacement (\u9875\u9762\u7f6e\u6362). Basic Page Replacement If no frame is free, we find one that is not currently being used and free it. When we select a page for replacement, We examine its modify bit (or dirty bit , see Example of Core i7 ). The modify bit for a page is set by the hardware whenever any byte in the page is written into, indicating that the page has been modified. If the bit is set, we must write the page to storage. Otherwise, we need not write the memory page to storage: it is already there. We must solve two major problems to implement demand paging: frame-allocation algorithm : decide how many frames allocate to each process page-replacement algorithm : select the frames that are to be replaced. In general, we want the one with the lowest page-fault rate. FIFO Page Replacement The simplest page-replacement algorithm is a first-in, first-out(FIFO) algorithm. We can create a FIFO queue to hold all pages in memory. We replace the page at the head of the queue. When a page is brought into memory, we insert it at the tail of the queue. DISADVANTAGE: Its performance is not always good. Belady\u2019s anomaly : for some page-replacement algorithms, the page-fault rate may increase as the number of allocated frames increases. Figure below shows the curve of page faults for the reference string 1,2,3,4,1,2,5,1,2,3,4,5 versus the number of available frames, with a FIFO page-replacement algorithm. Optimal Page Replacement, OPT Optimal page-replacement (OPT, \u6700\u4f73\u9875\u9762\u7f6e\u6362) algorithm replaces the page that will not be used for the longest period of time . It has the lowest page-fault rate of all algorithms. It will never suffer from Belady's anomaly. It is different to implement, because it requires future knowledge of the reference string. It is used mainly for comparison studies. LRU Page Replacement, LRU Least recently used (LRU, \u6700\u8fd1\u6700\u5c11\u4f7f\u7528) algorithm chooses the page that has not been used for the longest period of time. We can think of this strategy as the optimal page-replacement algorithm looking backward in time. ( If we let S^R S^R be the reverse of a reference string S S , then the page-fault rate for the OPT algorithm on S S is the same as the page-fault rate of OPT algorithm on S^R S^R ). The LRU policy is often used as a page-replacement algorithm and is considered to be good. Best way to implement LRU replacement with a stack of page numbers is using a doubly linked list with a head pointer and a tail pointer. Note Implementation of LRU would be not conceivable without hardware assistance beyond the standard TLB registers. The updating of stack must be done for every memory reference. If we were to use an interrupt for every reference to allow software to update such data structures, it would slow every memory reference by a factor of at least ten, hence slowing every process by a factor of ten. Few systems could tolerate that level of overhead for memory management. LRU-Approximation Page Replacement In fact, some systems provide no hardware support, using the form of a reference bit instead. The reference bit for a page is set by the hardware whenever that page is referenced(either a read or a write to any byte in the page). Additional-Reference-Bits Algorithm We can gain additional ordering information by recording the reference bits at regular intervals. We can keep an 8-bit byte for each page in a table in memory. At regular intervals (say, every 100 milliseconds), a timer interrupt transfers control to the operating system. The operating system shifts the reference bit for each page into the high-order bit of its 8-bit byte, shifting the other bits right by 1 bit and discarding the low-order bit. These 8-bit shift registers contain the history of page use for the last eight time periods. If we interpret these 8-bit bytes as unsigned integers, the page with the lowest number is the LRU page, and it can be replaced. Second-Chance Algorithm The number of bits of history included in the shift register can be varied, the number can be reduced to zero, leaving only the reference bit itself. When a page has been selected, we inspect its reference bit. If the value is 0, we proceed to replace this page; but if the reference bit is set to 1, we give the page a second chance and move on to select the next FIFO page. When a page gets a second chance, its reference bit is cleared, and its arrival time is reset to the current time. Thus, a page that is given a second chance will not be replaced until all other pages have been replaced (or given second chances). I n addition, if a page is used often enough to keep its reference bit set, it will never be replaced. One way to implement the second-chance algorithm (sometimes referred to as the clock algorithm) is as a circular queue. A pointer (that is, a hand on the clock) indicates which page is to be replaced next. When a frame is needed, the pointer advances until it finds a page with a 0 reference bit. As it advances, it clears the reference bits. Once a victim page is found, the page is replaced, and the new page is inserted in the circular queue in that position. A simple example is illustrated by the figure below, in which small blue digits denotes the reference bit and green arrow denotes the pointer. 5 Allocation of Frames Minimum Number of Frames We must allocate at least a minimum number of frames. One reason is performance. Obviously, as the number of frames allocated to each process decreases, the page-fault rate increases. Another reason is that when a page fault occurs before an executing instruction complete, the instruction must be restarted. So we must have enough frames to hold all the different pages that any single instruction can reference. The minimum number of frames is defined by the computer architecture. Allocation Algorithms Equal Allocation The easiest way to split m m frames among n n processes is to give everyone an equal share, m/n m/n frames (ignoring frames needed by the operating system for the moment). Proportional Allocation In proportional allocation, we allocate available memory to each process according to its size. Let the size of the virtual memory for process p_i p_i be s_i s_i , and define S=\\sum s_i S=\\sum s_i . Then, if the total number of available frames is m m , we allocate a_i a_i frames to process p_i p_i , where a_i a_i is approximately a_i=s_i/S\\times m a_i=s_i/S\\times m . Global versus Local Allocation Global replacement allows a process to select a replacement frame from the set of all frames, even if that frame is currently allocated to some other process; that is, one process can take a frame from another. Local replacement requires that each process select from only its own set of allocated frames. Local replacement might hinder a process, however, by not making available to it other, less used pages of memory. Thus, global replacement generally results in greater system throughput. It is therefore the more commonly used method. Global Page-Replacement Policy Rather than waiting for the free-frame list to drop to zero before we begin selecting pages for replacement, we trigger page replacement when the list falls below a certain threshold . It attempts to ensure there is always sufficient free memory to satisfy new requests. When the amount of free memory drops below minimum threshold, a kernel routine ( reapers ) is triggered that begins reclaiming pages from all processes in the system. When the amount of free memory reaches the maximum threshold, the reaper routine is suspended. The kernel reaper routine typically uses some form of LRU approximation. 6 Thrashing Cause of Thrashing Thrashing may be caused by programs or workloads that present insufficient locality of reference (also principle of locality, \u8bbf\u95ee\u5c40\u90e8\u6027): if the working set (\u5de5\u4f5c\u96c6) of a program or a workload cannot be effectively held within physical memory, then constant data swapping, i.e., thrashing, may occur. Consider the following scenario, which is based on the actual behavior of early paging systems. The operating system monitors CPU utilization. If CPU utilizition is too low, we increase the degree of multiprogramming by introducing a new process to the system. A global page-replacement algorithm is used; it replaces pages without regard to the process to which they belong. Now suppose that a process enters a new phase in its execution and needs more frames. It starts faulting and taking frames away from other processes. These processes need those pages, however, and so they also fault, taking frames from other processes. These faulting processes must use the paging device to swap pages in and out. As they queue up for the paging device, the ready queue empties. As processes wait for the paging device, CPU utilization decreases. The CPU scheduler sees the decreasing CPU utilization and increases the degree of multiprogramming as a result. The new process tries to get started by taking frames from running processes, causing more page faults and a longer queue for the paging device. As a result, CPU utilization drops even further, and the CPU scheduler tries to increase the degree of multiprogramming even more. Thrashing has occurred, and system throughput plunges. QUESTION: To prevent thrashing, we must provide a process with as many frames as it needs. But how do we know how many frames it \"needs\"? The locality model of process execution, states that, as a process executes, it moves from locality to locality. A locality is a set of pages that are actively used together. A running program is generally composed of several different localities, which may overlap. If we do not allocate enough frames to accommodate the size of the current locality, the process will thrash, since it cannot keep in memory all the pages that it is actively using. Example Figure below illustrates the concept of locality and how a process\u2019s locality changes over time. At time (a), the locality is the set of pages {18, 19, 20, 21, 22, 23, 24, 29, 30, 33}. At time (b), the locality changes to {18, 19, 20, 24, 25, 26, 27, 28, 29, 31, 32, 33}. Notice the overlap, as some pages (for example, 18, 19, and 20) are part of both localities. Working-Set Model The group of physical memory pages currently dedicated to a specific process is known as the Working set (WS, \u5de5\u4f5c\u96c6) for that process. Example For example, the working set at time t_1 t_1 is {1, 2, 5, 6, 7}. By time t_2 t_2 , the working set has changed to {3, 4}. If we compute the working-set size WSS_i WSS_i for each process in the system, the total demand for frames D D is D=\\sum WSS_i D=\\sum WSS_i . If the total demand D D is greater than the total number of available frames ( D\\gt m D\\gt m ), thrashing will occur, because some processes will not have enough frames. WORKING SET SOLUTION TO THRASHING: The operating system monitors the working set of each process and allocates to that working set enough frames to provide it with its working-set size. If there are enough extra frames, another process can be initiated. If the sum of the working-set sizes increases, exceeding the total number of available frames, the operating system selects a process to suspend. The process\u2019s pages are written out (swapped), and its frames are reallocated to other processes. The suspended process can be restarted later. Page-Fault Frequency The working-set model is successful but seems a clumsy way to control thrashing. A strategy that uses the page-fault frequency (PFF) takes a more direct approach: Thrashing has a high page-fault rate. Thus, we control the page-fault rate. When the page fault rate is too high, we know that the process needs more frames. Conversely, if it too low, then the process may have too many frames. We can establish upper and lower bounds on the desired page-fault rate. If the actual page-fault rate exceeds the upper limit, we allocate the process. another frame. If the page-fault rate falls below the lower limit, we remove a frame from the process. 7 Memory Compression When the number of free frames falls below a certain threshold that would triggers page replacement, rather than paging out modified frames to swap space, we compress several frames into a single frame ( memory compression , \u5185\u5b58\u538b\u7f29), enabling the system to reduce memory usage without resorting to swapping pages. Example For example, the free-frame list contains six frames: 7,2,9,21,27,16 , and the modified frame list contains four frames: 15, 3, 35, 26 . In Figure below, frame 7 is removed from the free-frame list. Frames 15, 3, and 35 are compressed and stored in frame 7, which is then stored in the list of compressed frames. The frames 15, 3, and 35 can now be moved to the free-frame list. If one of the three compressed frames is later referenced, a page fault occurs, and the compressed frame is decompressed, restoring the three pages 15, 3, and 35 in memory. 8 Allocating Kernel Memory Kernel memory is often allocated from a free-memory pool different from the list used to satisfy ordinary user-mode processes discussed before. There are two primary reasons for this: The kernel requests memory for data structures of varying sizes, some of which are less than a page in size. As a result, the kernel must use memory conservatively and attempt to minimize waste due to fragmentation. Certain hardware devices interact directly with physical memory \u2014\u2014 without the benefit of a virtual memory interface \u2014\u2014 and consequently may require memory residing in physically contiguous pages. Buddy System The buddy system allocates memory from a fixed-size segment consisting of physically contiguous pages. Memory is allocated from this segment using a power-of-2 allocator, which satisfies requests in units sized as a power of 2 (4 KB, 8 KB, 16 KB, and so forth). A request in units not appropriately sized is rounded up to the next highest power of 2. Pro and Cons: An advantage of the buddy system is how quickly adjacent buddies can be combined to form larger segments using a technique known as coalescing (illustrated below in the Example section). Rounding up to the next highest power of 2 is very likely to cause internal fragmentation. Example Assume the size of a memory segment is initially 256 KB and the kernel requests 21 KB of memory. The segment is initially divided into two buddies\u2014which we will call A_L A_L and A_R A_R \u2014\u2014 each 128 KB in size. One of these buddies is further divided into two 64-KB buddies\u2014 B_L B_L and B_R B_R . However, the next-highest power of 2 from 21 KB is 32 KB so either B_L B_L or B_R B_R is again divided into two 32-KB buddies, C_L C_L and C_R C_R . One of these buddies is used to satisfy the 21-KB request. This scheme is illustrated in Figure below, where C_L C_L is the segment allocated to the 21-KB request. when the kernel releases the C_L C_L unit it was allocated, the system can coalesce C_L C_L and C_R C_R into a 64-KB segment. This segment, B_L B_L , can in turn be coalesced with its buddy B_R B_R to form a 128-KB segment. Ultimately, we can end up with the original 256-KB segment. Slab Allocations A second strategy for allocating kernel memory is known as slab allocation . A slab is made up of one or more physically contiguous pages. A cache consists of one or more slabs. Each of caches stores a different type of object. There is one cache per object type.(e.g. a separate cache for the data structure representing process descriptors, a separate cache for file objects). Each cache is populated with objects that are instantiations of the kernel data structure the cache represents.(e.g. the cache representing semaphores stores instances of semaphore objects). Example Linux kernel adopted the slab allocator after Version 2.2. Each slab contains some number of objects, which are the data structures being cached. Each slab is in one of three states: full , partial , or empty . A full slab has no free objects. (All objects in the slab are allocated.) An empty slab has no allocated objects. (All objects in the slab are free.) A partial slab has some allocated objects and some free objects. When some part of the kernel requests a new object, the request is satisfied from a partial slab, if one exists. Otherwise, the request is satisfied from an empty slab. The slab allocator provides two main benefits: No memory is wasted due to fragmentation. Each unique kernel data structure has an associated cache, and each cache is made up of one or more slabs that are divided into chunks the size of the objects being represented. Memory requests can be satisfied quickly . Objects are created in advance and thus can be quickly allocated from the cache. When the kernel has finished with an object and releases it, it is marked as free and returned to its cache, thus making it immediately available for subsequent requests from the kernel.","title":"Chapter 10: Virtual Memory"},{"location":"os/osc/ch10/#operating-system-concepts-10-virtual-memory","text":"","title":"Operating System Concepts 10 - Virtual Memory"},{"location":"os/osc/ch10/#1-background","text":"Various memory-management strategies discussed in Chapter 9 have the same goal to keep many processes in memory simultaneously to allow multiprogramming. PROBLEM: However, they tend to require that an entire process be in memory before it can execute. In many cases, the entire program is not needed: Programs often have code to handle unusual error conditions. This code is almost never executed. Arrays, lists, and tables are often allocated more memory than they actually needed. Certain options and features of a program may be used rarely. SOLUTION: Virtual memory allows the execution of processes that are not completely in memory. ADVANTAGE: Programs can be larger than physical memory. Virtual memory abstracts main memory as viewed by the programmer from physical memory. It frees programmers from the concerns of memory-storage limitations. Virtual memory allows processes to share files and memory through page sharing .","title":"1 Background"},{"location":"os/osc/ch10/#2-demand-paging","text":"QUESTION: How an executable program might be loaded from secondary storage into memory? OPTION: One option is to load the entire program in physical memory at program execution time. PROBLEM: We may not initially need the entire program in memory. (e.g. a program starts with a list of available options from which the user is to select). SOLUTION: Demand paging (\u6309\u9700\u8c03\u9875) loads pages in memory only when they are needed. Note A demand-paging system is similar to a paging system with swapping where processes reside in secondary memory.","title":"2 Demand Paging"},{"location":"os/osc/ch10/#basic-concepts","text":"Since demand paging loads pages in memory only when they are needed, some pages will be in memory and some will be in secondary storage. Thus, we need some form of hardware support to distinguish between the two. The valid bit is set to ensure that the page is in the logical address space of the process and is currently in secondary storage. Access to a page marked invalid causes a page fault (\u7f3a\u9875). The procedure for handling this page fault is straightforward: We check page tables (usually kept with the process control block) for this process to determine whether the reference was a valid or an invalid memory access. If the reference was invalid, we terminate the process. If it was valid but we have not yet brought in that page, we now page it in. We find a free frame (by taking one from the free-frame list, for example). We schedule a secondary storage operation to read the desired page into the newly allocated frame. When the storage read is complete, we modify the internal table kept with the process and the page table to indicate that the page is now in memory. We restart the instruction that was interrupted by the trap. The process can now access the page as though it had always been in memory. In the extreme case, we can start executing a process with no pages in memory. This scheme is pure demand paging : never bring a page into memory until it is required .","title":"Basic Concepts"},{"location":"os/osc/ch10/#free-frame-list","text":"Most operating system maintain a free-frame list , a pool of free frames for satisfying requests, that bring the desired pages from secondary storage into main memory. Operating system typically allocate free frames using a technique known as zero-fill-on-demand , which \"zero-out\" frames before it is allocated (i.e. erasing previous contents).","title":"Free-Frame List"},{"location":"os/osc/ch10/#performance-of-demand-paging","text":"Let p(0\\le p \\le 1) p(0\\le p \\le 1) be page-fault rage (\u7f3a\u9875\u7387), the probability of a page fault. We would expect p p to be close to zero. The effective access time, is \\text{effective access time} = (1-p)\\times ma + p\\times \\text{page fault time} \\text{effective access time} = (1-p)\\times ma + p\\times \\text{page fault time} where ma ma denotes the memory-access time. With an average page-fault service time of 8 milliseconds and a memory access time of 200 nanoseconds, the effective access time in nanoseconds is 200+7,999,800\\times p 200+7,999,800\\times p . The effective access time is directly proportional to the page-fault rate p p , so it is important to keep the page-fault rate low in a demand-paging system. An additional aspect of demand paging is the handling and overall use of swap space. I/O to swap space is generally faster than that to the file system, because swap space is allocated in much larger blocks, and file lookups an indirect allocation methods are not used ( see details in Chapter 11 ). One OPTION: copying an entire file image into the swap space at process startup and then performing demand paging from the swap space. Second OPTION: practiced by several operating system, including Linux and Windows \u2014\u2014\u2014 to demand-page from the file system initially but to write the pages to swap space as they are replaced. Mobile operating system typically do not support swapping [ Chapter 9 ]. Instead, these systems demand-page from the file system and reclaim read-only pages (such as code) from applications if memory becomes constrained.","title":"Performance of Demand Paging"},{"location":"os/osc/ch10/#3-copy-on-write","text":"Copy-on-write (\u5199\u65f6\u590d\u5236) works by allowing the parent and child processes initially to share the same pages, and if either process writes to a shared page, a copy of the shared page is created.","title":"3 Copy-on-Write"},{"location":"os/osc/ch10/#4-page-replacement","text":"When we increase degree of multiprogramming, over-allocating of memory results in page faults. The operating system determines where the desired page is residing on secondary storage but to find that there are no free frames on the free-frame list (i.e. all memory is in use). Most operating systems now combine swapping pages with page replacement (\u9875\u9762\u7f6e\u6362).","title":"4 Page Replacement"},{"location":"os/osc/ch10/#basic-page-replacement","text":"If no frame is free, we find one that is not currently being used and free it. When we select a page for replacement, We examine its modify bit (or dirty bit , see Example of Core i7 ). The modify bit for a page is set by the hardware whenever any byte in the page is written into, indicating that the page has been modified. If the bit is set, we must write the page to storage. Otherwise, we need not write the memory page to storage: it is already there. We must solve two major problems to implement demand paging: frame-allocation algorithm : decide how many frames allocate to each process page-replacement algorithm : select the frames that are to be replaced. In general, we want the one with the lowest page-fault rate.","title":"Basic Page Replacement"},{"location":"os/osc/ch10/#fifo-page-replacement","text":"The simplest page-replacement algorithm is a first-in, first-out(FIFO) algorithm. We can create a FIFO queue to hold all pages in memory. We replace the page at the head of the queue. When a page is brought into memory, we insert it at the tail of the queue. DISADVANTAGE: Its performance is not always good. Belady\u2019s anomaly : for some page-replacement algorithms, the page-fault rate may increase as the number of allocated frames increases. Figure below shows the curve of page faults for the reference string 1,2,3,4,1,2,5,1,2,3,4,5 versus the number of available frames, with a FIFO page-replacement algorithm.","title":"FIFO Page Replacement"},{"location":"os/osc/ch10/#optimal-page-replacement-opt","text":"Optimal page-replacement (OPT, \u6700\u4f73\u9875\u9762\u7f6e\u6362) algorithm replaces the page that will not be used for the longest period of time . It has the lowest page-fault rate of all algorithms. It will never suffer from Belady's anomaly. It is different to implement, because it requires future knowledge of the reference string. It is used mainly for comparison studies.","title":"Optimal Page Replacement, OPT"},{"location":"os/osc/ch10/#lru-page-replacement-lru","text":"Least recently used (LRU, \u6700\u8fd1\u6700\u5c11\u4f7f\u7528) algorithm chooses the page that has not been used for the longest period of time. We can think of this strategy as the optimal page-replacement algorithm looking backward in time. ( If we let S^R S^R be the reverse of a reference string S S , then the page-fault rate for the OPT algorithm on S S is the same as the page-fault rate of OPT algorithm on S^R S^R ). The LRU policy is often used as a page-replacement algorithm and is considered to be good. Best way to implement LRU replacement with a stack of page numbers is using a doubly linked list with a head pointer and a tail pointer. Note Implementation of LRU would be not conceivable without hardware assistance beyond the standard TLB registers. The updating of stack must be done for every memory reference. If we were to use an interrupt for every reference to allow software to update such data structures, it would slow every memory reference by a factor of at least ten, hence slowing every process by a factor of ten. Few systems could tolerate that level of overhead for memory management.","title":"LRU Page Replacement, LRU"},{"location":"os/osc/ch10/#lru-approximation-page-replacement","text":"In fact, some systems provide no hardware support, using the form of a reference bit instead. The reference bit for a page is set by the hardware whenever that page is referenced(either a read or a write to any byte in the page). Additional-Reference-Bits Algorithm We can gain additional ordering information by recording the reference bits at regular intervals. We can keep an 8-bit byte for each page in a table in memory. At regular intervals (say, every 100 milliseconds), a timer interrupt transfers control to the operating system. The operating system shifts the reference bit for each page into the high-order bit of its 8-bit byte, shifting the other bits right by 1 bit and discarding the low-order bit. These 8-bit shift registers contain the history of page use for the last eight time periods. If we interpret these 8-bit bytes as unsigned integers, the page with the lowest number is the LRU page, and it can be replaced. Second-Chance Algorithm The number of bits of history included in the shift register can be varied, the number can be reduced to zero, leaving only the reference bit itself. When a page has been selected, we inspect its reference bit. If the value is 0, we proceed to replace this page; but if the reference bit is set to 1, we give the page a second chance and move on to select the next FIFO page. When a page gets a second chance, its reference bit is cleared, and its arrival time is reset to the current time. Thus, a page that is given a second chance will not be replaced until all other pages have been replaced (or given second chances). I n addition, if a page is used often enough to keep its reference bit set, it will never be replaced. One way to implement the second-chance algorithm (sometimes referred to as the clock algorithm) is as a circular queue. A pointer (that is, a hand on the clock) indicates which page is to be replaced next. When a frame is needed, the pointer advances until it finds a page with a 0 reference bit. As it advances, it clears the reference bits. Once a victim page is found, the page is replaced, and the new page is inserted in the circular queue in that position. A simple example is illustrated by the figure below, in which small blue digits denotes the reference bit and green arrow denotes the pointer.","title":"LRU-Approximation Page Replacement"},{"location":"os/osc/ch10/#5-allocation-of-frames","text":"","title":"5 Allocation of Frames"},{"location":"os/osc/ch10/#minimum-number-of-frames","text":"We must allocate at least a minimum number of frames. One reason is performance. Obviously, as the number of frames allocated to each process decreases, the page-fault rate increases. Another reason is that when a page fault occurs before an executing instruction complete, the instruction must be restarted. So we must have enough frames to hold all the different pages that any single instruction can reference. The minimum number of frames is defined by the computer architecture.","title":"Minimum Number of Frames"},{"location":"os/osc/ch10/#allocation-algorithms","text":"Equal Allocation The easiest way to split m m frames among n n processes is to give everyone an equal share, m/n m/n frames (ignoring frames needed by the operating system for the moment). Proportional Allocation In proportional allocation, we allocate available memory to each process according to its size. Let the size of the virtual memory for process p_i p_i be s_i s_i , and define S=\\sum s_i S=\\sum s_i . Then, if the total number of available frames is m m , we allocate a_i a_i frames to process p_i p_i , where a_i a_i is approximately a_i=s_i/S\\times m a_i=s_i/S\\times m .","title":"Allocation Algorithms"},{"location":"os/osc/ch10/#global-versus-local-allocation","text":"Global replacement allows a process to select a replacement frame from the set of all frames, even if that frame is currently allocated to some other process; that is, one process can take a frame from another. Local replacement requires that each process select from only its own set of allocated frames. Local replacement might hinder a process, however, by not making available to it other, less used pages of memory. Thus, global replacement generally results in greater system throughput. It is therefore the more commonly used method. Global Page-Replacement Policy Rather than waiting for the free-frame list to drop to zero before we begin selecting pages for replacement, we trigger page replacement when the list falls below a certain threshold . It attempts to ensure there is always sufficient free memory to satisfy new requests. When the amount of free memory drops below minimum threshold, a kernel routine ( reapers ) is triggered that begins reclaiming pages from all processes in the system. When the amount of free memory reaches the maximum threshold, the reaper routine is suspended. The kernel reaper routine typically uses some form of LRU approximation.","title":"Global versus Local Allocation"},{"location":"os/osc/ch10/#6-thrashing","text":"","title":"6 Thrashing"},{"location":"os/osc/ch10/#cause-of-thrashing","text":"Thrashing may be caused by programs or workloads that present insufficient locality of reference (also principle of locality, \u8bbf\u95ee\u5c40\u90e8\u6027): if the working set (\u5de5\u4f5c\u96c6) of a program or a workload cannot be effectively held within physical memory, then constant data swapping, i.e., thrashing, may occur. Consider the following scenario, which is based on the actual behavior of early paging systems. The operating system monitors CPU utilization. If CPU utilizition is too low, we increase the degree of multiprogramming by introducing a new process to the system. A global page-replacement algorithm is used; it replaces pages without regard to the process to which they belong. Now suppose that a process enters a new phase in its execution and needs more frames. It starts faulting and taking frames away from other processes. These processes need those pages, however, and so they also fault, taking frames from other processes. These faulting processes must use the paging device to swap pages in and out. As they queue up for the paging device, the ready queue empties. As processes wait for the paging device, CPU utilization decreases. The CPU scheduler sees the decreasing CPU utilization and increases the degree of multiprogramming as a result. The new process tries to get started by taking frames from running processes, causing more page faults and a longer queue for the paging device. As a result, CPU utilization drops even further, and the CPU scheduler tries to increase the degree of multiprogramming even more. Thrashing has occurred, and system throughput plunges. QUESTION: To prevent thrashing, we must provide a process with as many frames as it needs. But how do we know how many frames it \"needs\"? The locality model of process execution, states that, as a process executes, it moves from locality to locality. A locality is a set of pages that are actively used together. A running program is generally composed of several different localities, which may overlap. If we do not allocate enough frames to accommodate the size of the current locality, the process will thrash, since it cannot keep in memory all the pages that it is actively using. Example Figure below illustrates the concept of locality and how a process\u2019s locality changes over time. At time (a), the locality is the set of pages {18, 19, 20, 21, 22, 23, 24, 29, 30, 33}. At time (b), the locality changes to {18, 19, 20, 24, 25, 26, 27, 28, 29, 31, 32, 33}. Notice the overlap, as some pages (for example, 18, 19, and 20) are part of both localities.","title":"Cause of Thrashing"},{"location":"os/osc/ch10/#working-set-model","text":"The group of physical memory pages currently dedicated to a specific process is known as the Working set (WS, \u5de5\u4f5c\u96c6) for that process. Example For example, the working set at time t_1 t_1 is {1, 2, 5, 6, 7}. By time t_2 t_2 , the working set has changed to {3, 4}. If we compute the working-set size WSS_i WSS_i for each process in the system, the total demand for frames D D is D=\\sum WSS_i D=\\sum WSS_i . If the total demand D D is greater than the total number of available frames ( D\\gt m D\\gt m ), thrashing will occur, because some processes will not have enough frames. WORKING SET SOLUTION TO THRASHING: The operating system monitors the working set of each process and allocates to that working set enough frames to provide it with its working-set size. If there are enough extra frames, another process can be initiated. If the sum of the working-set sizes increases, exceeding the total number of available frames, the operating system selects a process to suspend. The process\u2019s pages are written out (swapped), and its frames are reallocated to other processes. The suspended process can be restarted later.","title":"Working-Set Model"},{"location":"os/osc/ch10/#page-fault-frequency","text":"The working-set model is successful but seems a clumsy way to control thrashing. A strategy that uses the page-fault frequency (PFF) takes a more direct approach: Thrashing has a high page-fault rate. Thus, we control the page-fault rate. When the page fault rate is too high, we know that the process needs more frames. Conversely, if it too low, then the process may have too many frames. We can establish upper and lower bounds on the desired page-fault rate. If the actual page-fault rate exceeds the upper limit, we allocate the process. another frame. If the page-fault rate falls below the lower limit, we remove a frame from the process.","title":"Page-Fault Frequency"},{"location":"os/osc/ch10/#7-memory-compression","text":"When the number of free frames falls below a certain threshold that would triggers page replacement, rather than paging out modified frames to swap space, we compress several frames into a single frame ( memory compression , \u5185\u5b58\u538b\u7f29), enabling the system to reduce memory usage without resorting to swapping pages. Example For example, the free-frame list contains six frames: 7,2,9,21,27,16 , and the modified frame list contains four frames: 15, 3, 35, 26 . In Figure below, frame 7 is removed from the free-frame list. Frames 15, 3, and 35 are compressed and stored in frame 7, which is then stored in the list of compressed frames. The frames 15, 3, and 35 can now be moved to the free-frame list. If one of the three compressed frames is later referenced, a page fault occurs, and the compressed frame is decompressed, restoring the three pages 15, 3, and 35 in memory.","title":"7 Memory Compression"},{"location":"os/osc/ch10/#8-allocating-kernel-memory","text":"Kernel memory is often allocated from a free-memory pool different from the list used to satisfy ordinary user-mode processes discussed before. There are two primary reasons for this: The kernel requests memory for data structures of varying sizes, some of which are less than a page in size. As a result, the kernel must use memory conservatively and attempt to minimize waste due to fragmentation. Certain hardware devices interact directly with physical memory \u2014\u2014 without the benefit of a virtual memory interface \u2014\u2014 and consequently may require memory residing in physically contiguous pages.","title":"8 Allocating Kernel Memory"},{"location":"os/osc/ch10/#buddy-system","text":"The buddy system allocates memory from a fixed-size segment consisting of physically contiguous pages. Memory is allocated from this segment using a power-of-2 allocator, which satisfies requests in units sized as a power of 2 (4 KB, 8 KB, 16 KB, and so forth). A request in units not appropriately sized is rounded up to the next highest power of 2. Pro and Cons: An advantage of the buddy system is how quickly adjacent buddies can be combined to form larger segments using a technique known as coalescing (illustrated below in the Example section). Rounding up to the next highest power of 2 is very likely to cause internal fragmentation. Example Assume the size of a memory segment is initially 256 KB and the kernel requests 21 KB of memory. The segment is initially divided into two buddies\u2014which we will call A_L A_L and A_R A_R \u2014\u2014 each 128 KB in size. One of these buddies is further divided into two 64-KB buddies\u2014 B_L B_L and B_R B_R . However, the next-highest power of 2 from 21 KB is 32 KB so either B_L B_L or B_R B_R is again divided into two 32-KB buddies, C_L C_L and C_R C_R . One of these buddies is used to satisfy the 21-KB request. This scheme is illustrated in Figure below, where C_L C_L is the segment allocated to the 21-KB request. when the kernel releases the C_L C_L unit it was allocated, the system can coalesce C_L C_L and C_R C_R into a 64-KB segment. This segment, B_L B_L , can in turn be coalesced with its buddy B_R B_R to form a 128-KB segment. Ultimately, we can end up with the original 256-KB segment.","title":"Buddy System"},{"location":"os/osc/ch10/#slab-allocations","text":"A second strategy for allocating kernel memory is known as slab allocation . A slab is made up of one or more physically contiguous pages. A cache consists of one or more slabs. Each of caches stores a different type of object. There is one cache per object type.(e.g. a separate cache for the data structure representing process descriptors, a separate cache for file objects). Each cache is populated with objects that are instantiations of the kernel data structure the cache represents.(e.g. the cache representing semaphores stores instances of semaphore objects). Example Linux kernel adopted the slab allocator after Version 2.2. Each slab contains some number of objects, which are the data structures being cached. Each slab is in one of three states: full , partial , or empty . A full slab has no free objects. (All objects in the slab are allocated.) An empty slab has no allocated objects. (All objects in the slab are free.) A partial slab has some allocated objects and some free objects. When some part of the kernel requests a new object, the request is satisfied from a partial slab, if one exists. Otherwise, the request is satisfied from an empty slab. The slab allocator provides two main benefits: No memory is wasted due to fragmentation. Each unique kernel data structure has an associated cache, and each cache is made up of one or more slabs that are divided into chunks the size of the objects being represented. Memory requests can be satisfied quickly . Objects are created in advance and thus can be quickly allocated from the cache. When the kernel has finished with an object and releases it, it is marked as free and returned to its cache, thus making it immediately available for subsequent requests from the kernel.","title":"Slab Allocations"},{"location":"os/osc/ch11/","text":"Operating System Concepts 11 - Mass-Storage Structure 6 Swap-Space Management","title":"Chapter 11: Mass-Storage Structure"},{"location":"os/osc/ch11/#operating-system-concepts-11-mass-storage-structure","text":"","title":"Operating System Concepts 11 - Mass-Storage Structure"},{"location":"os/osc/ch11/#6-swap-space-management","text":"","title":"6 Swap-Space Management"},{"location":"os/osc/ch13/","text":"Operating System Concepts 13 - File System Interface The file system consists of two distinct parts: a collection of files , each storing related data, and a directory structure, which organizes and provides information about all the files in the system. 1 File Concept A file is named collection of related information that is recorded on secondary storage.(\u6587\u4ef6\u662f\u8bb0\u5f55\u5728\u5916\u5b58\u4e0a\u7684\u76f8\u5173\u4fe1\u606f\u7684\u5177\u6709\u540d\u79f0\u7684\u96c6\u5408)\u3002 A file has a certain defined structure, which depends on its type. A text file is a sequence of characters organized into lines. An executable file is a series of code sections. File Attributes A file's attributes vary from one operating system to another but typically consist of these: Name . The symbolic file name is the only information kept in human-readable form. Identifier . This unique tag, usually a number, Identifier the file within the file system; it is the non-human-readable name for the file. Type . This information is needed for systems that support different types of files. Location . This information is a pointer to a device and to the location of the file on that device. Size . The current size of the file (in bytes, words, or blocks) and possibly the maximum allowed size are included in this attribute. Protection . Access-control information determines who can do reading, writing, executing, and so on. Timestamps and user identification . This information may be kept for creation, last modification, and last use. These data can be useful for protection, security, and usage monitoring. File Operations The operating system must do to perform each of these seven basic file operations. Creating a file . First, space must be allocated for the file. Second, an entry for the new file must be made in a directory. Opening a file . Check access permissions, and if successful, the open call returns a file handle that is used as an argument in the other calls. Writing a file : The system keeps a write pointer to the location in the file where the next write is to take place if it is sequential. Repositioning within a file : The current-file-position pointer of the open file is repositioned to a given value. Deleting a file : Release all file space. Truncating a file : The length of a file can be reset to zero, and its file space be released with all other attributes remain unchanged. These seven basic operations comprise the minimal set of required file operations. These primitive operations can then be combined to perform other file operations. The operating system keeps a table, called the open-file-table , containing information about all open files. When a file operation is requested, the file is specified via an index into this table. When the file is no longer being actively used, it is closed by the process, and the operating system removes its entry from the open-file table, potentially releasing locks. ISSUES: Several different applications open the same file at the same time. SOLUTION: The operating system uses two levels of internal tables: a per-process table and a system-wide table. The per-process table tracks all files that a process has open. It Stores information regarding the process's use of the file (e.g. the current file pointer for each file, access rights to the file and accounting information) Each entry in the per-process table in turn points to a system-wide open-file table. It contains process-independent information(e.g. the location of the file on disk, access dates, and file size). Once a file has been opened by one process, it includes an entry for the file. It also has an open count associated with each file to indicate how many processes have the file open. File locks (\u6587\u4ef6\u9501) are useful for files that are shared by several processes. For example, a system log file that can be accessed and modified by a number of processes in the system. File locks provide functionality similar to reader-writer locks in Chapter 7 . A shared lock (\u5171\u4eab\u9501) is akin to a reader lock in that several processes can acquire the lock concurrently. An exclusive lock (\u6392\u65a5\u9501) is akin to a writer lock in that only one process at a time can acquire such a lock. Furthermore, operating systems(e.g. Linux) may provide either mandatory or advisory file-locking mechanisms. With mandatory locking, once a process acquires an exclusive lock, the operating system will prevent any other process from accessing the locked file. with advisory locking, the operating system will not prevent other process from accessing to the locked file. For advisory locking, it is up to software developers to ensure that locks are appropriately acquired and released. The simple program in Java as follows demonstrating file locking. The program acquires an exclusive lock on the first half of the file and a shared lock on the second half. import java.io.* ; import java.nio.channels.* ; public class LockingExample { public static final boolean EXCLUSIVE = false ; public static final boolean SHARED = true ; public static void main ( String args []) throws IOException { if ( args . length != 1 ) { System . err . println ( Usage: java LockingExample input file ); System . exit ( 0 ); } FileLock sharedLock = null ; FileLock exclusiveLock = null ; try { RandomAccessFile raf = new RandomAccessFile ( args [ 0 ], rw ); // get the channel for the file FileChannel channel = raf . getChannel (); System . out . println ( trying to acquire lock ... ); // this locks the first half of the file - exclusive exclusiveLock = channel . lock ( 0 , raf . length ()/ 2 , EXCLUSIVE ); System . out . println ( lock acquired ... ); /** * Now modify the data . . . */ try { // sleep for 10 seconds Thread . sleep ( 10000 ); } catch ( InterruptedException ie ) { } // release the lock exclusiveLock . release (); System . out . println ( lock released ... ); // this locks the second half of the file - shared sharedLock = channel . lock ( raf . length ()/ 2 + 1 , raf . length (), SHARED ); /** * Now read the data . . . */ // release the lock exclusiveLock . release (); } catch ( java . io . IOException ioe ) { System . err . println ( ioe ); } finally { if ( exclusiveLock != null ) exclusiveLock . release (); if ( sharedLock != null ) sharedLock . release (); } } } File Types A common technique for implementing file types is to include the type as part of the file name. The name is split into two parts\u2014a name and an extension , usually separated by a period. The system uses the extension to indicate the type of the file and the type of operations that can be done on that file The UNIX system uses a magic number [ Wikipedia ] stored at the beginning of some binary files to indicate the type of data in the file (for example, the format of an image file). Not all files have magic numbers. File Structure Certain files must conform to a required structure that is understood by the operating system. For example, the operating system requires that an executable file have a specific structure so that it can determine where in memory to load the file and what the location of the first instruction is. One of the disadvantage of having the operating system support multiple file structures: it makes the operating system large and cumbersome. Some operating systems(UNIX, Windows) impose (and support) a minimal number of file structures. However, all operating systems must support at least one structure \u2014that of an executable file \u2014 so that the system is able to load and run programs. Internal File Structure ISSUE: All disk I/O is performed in units of one block (physical record), and all blocks are the same size. It is unlikely that the physical record size will exactly match the length of the desired logical record. SOLUTION: Packing a number of logical records into physical blocks . EXAMPLE: The UNIX operating system defines all files to be simply streams of bytes. Each byte is individually addressable by its offset from the beginning (or end) of the file. In this case, the logical record size is 1 byte. The file system automatically packs and unpacks bytes into physical disk blocks - say, 512 bytes per block \u2014 as necessary. 2 Access Methods Files store information. The information in the file can be accessed in several ways. Sequential Access The simplest access method is sequential access (\u987a\u5e8f\u8bbf\u95ee). Information in the file is processed in order, one record after the other. It is by far the most common access method. Direct Access For direct access (\u76f4\u63a5\u8bbf\u95ee) or relative access (\u76f8\u5bf9\u8bbf\u95ee), a file is made up of fixed-length logical records that allow programs to read and write records rapidly in no particular order. The file is viewed as a numbered sequence of blocks or records. Direct-access files are of great use for immediate access to large amounts of information. (e.g. databases, we compute which block contains the answer and then read that block directly when querying) A relative block number is provided by the user to the operating system. It is an index relative to the beginning of the file. Other Access Methods Other access methods generally involve the construction of an index for the file. The index contains pointers to the various blocks. To find a record in the file, we first search the index and then use the pointer to access the file directly and to find the desired record. 3 Directory Structure The directory can be viewed as a symbol table that translates file names into their file control blocks. The directory can be single-level (\u5355\u5c42), two-level (\u53cc\u5c42), and tree-structured (\u6811\u72b6). Within a file system, it is useful to create directories to allow files to be organized. A single-level directory in a multiuser system causes naming problems, since each file must have a unique name. A two-level directory solves this problem by creating a separate directory for each user\u2019s files. The directory lists the files by name and includes the file\u2019s location on the disk, length, type, owner, time of creation, time of last use, and so on. The natural generalization of a two-level directory is a tree-structured directory . A tree-structured directory allows a user to create subdirectories to organize files. Acyclic-graph directory structures enable users to share subdirectories and files but complicate searching and deletion. A general graph structure allows complete flexibility in the sharing of files and directories but sometimes requires garbage collection to recover unused disk space. 4 Protection When information is stored in a computer system, we want to keep it safe from physical damage (the issue of reliability ) and improper access (the issue of protection ). Types of Access Protection mechanisms provide controlled access by limiting the types of file access that can be made. Access is permitted or denied depending on several factors, one of which is the type of access requested. Several different types of operations may be controlled: Read . Read from the file. Write . Write or rewrite the file. Execute . Load the file into memory and execute it. Append . Write new information at the end of the file. Delete . Delete the file and free its space for possible reuse. List . List the name and attributes of the file. Attribute change . Changing the attributes of the file. Many protection mechanism have been proposed and we have a more detailed description in Chapter 17 . Access Control The most common approach to the protection problem is to make access dependent on the identity of the user. Different users may need different types of access to a file or directory. The most general scheme to implement identity dependent access is to associate with each file and directory an access-control list (ACL, \u8bbf\u95ee\u63a7\u5236\u5217\u8868) specifying user names and the types of access allowed for each user. If a user is listed for the requested access, the access is allowed. Otherwise, a protection violation occurs, and the user job is denied access to the file. ISSUES: If we want to allow everyone to read a file, we must list all users with read accesses. SOLUTION: A condensed version of the access list, many system recognize three classifications of users in connection with each file: Owner. The user who created the file is the owner. Group. A set of users who are sharing the file and need similar access is a group, or work group Other. All other users in the system. Other Protection Approaches Another approach to the protection problem, is to associate a password with each file. Permissions in UNIX In the UNIX system, directory protection and file protection are handled similarly. Associated with each file and directory are three fields - owner, group, and universe -- each consisting of the three bits rwx , where r controls read access, w controls write access, and x controls execution. A sample directory listing from a UNIX environment is shown in below: 5 Memory-Mapped Files Memory mapping (\u5185\u5b58\u6620\u5c04) a file is accomplished by mapping a disk block to a page in memory. Initial access to the file, results in a page fault. A page-sized portion of the file is read from the file system into a physical page. Subsequent reads and writes to the file are handled as routine memory accesses. Advantage Manipulating files through memory rather than incurring the overhead of using read() and write() system calls simplifies and speeds up file access and usuage. Multiple processes may be allowed to map the same file concurrently, to allow sharing of data. The virtual memory map of each sharing process points to the same page of physical memory. The memory-mapping system calls can also support copy-on-write functionality, allowing processes to share a file in read-only mode but to have their own copies of any data they modify. Quite often, shared memory is in fact implemented by memory mapping files. Under this scenario, processes can communicate using shared memory by having the communicating processes memory-map the same file into their virtual address spaces(e.g. POSIX shared memory ).","title":"Chapter 13: File-System Interfaces"},{"location":"os/osc/ch13/#operating-system-concepts-13-file-system-interface","text":"The file system consists of two distinct parts: a collection of files , each storing related data, and a directory structure, which organizes and provides information about all the files in the system.","title":"Operating System Concepts 13 - File System Interface"},{"location":"os/osc/ch13/#1-file-concept","text":"A file is named collection of related information that is recorded on secondary storage.(\u6587\u4ef6\u662f\u8bb0\u5f55\u5728\u5916\u5b58\u4e0a\u7684\u76f8\u5173\u4fe1\u606f\u7684\u5177\u6709\u540d\u79f0\u7684\u96c6\u5408)\u3002 A file has a certain defined structure, which depends on its type. A text file is a sequence of characters organized into lines. An executable file is a series of code sections.","title":"1 File Concept"},{"location":"os/osc/ch13/#file-attributes","text":"A file's attributes vary from one operating system to another but typically consist of these: Name . The symbolic file name is the only information kept in human-readable form. Identifier . This unique tag, usually a number, Identifier the file within the file system; it is the non-human-readable name for the file. Type . This information is needed for systems that support different types of files. Location . This information is a pointer to a device and to the location of the file on that device. Size . The current size of the file (in bytes, words, or blocks) and possibly the maximum allowed size are included in this attribute. Protection . Access-control information determines who can do reading, writing, executing, and so on. Timestamps and user identification . This information may be kept for creation, last modification, and last use. These data can be useful for protection, security, and usage monitoring.","title":"File Attributes"},{"location":"os/osc/ch13/#file-operations","text":"The operating system must do to perform each of these seven basic file operations. Creating a file . First, space must be allocated for the file. Second, an entry for the new file must be made in a directory. Opening a file . Check access permissions, and if successful, the open call returns a file handle that is used as an argument in the other calls. Writing a file : The system keeps a write pointer to the location in the file where the next write is to take place if it is sequential. Repositioning within a file : The current-file-position pointer of the open file is repositioned to a given value. Deleting a file : Release all file space. Truncating a file : The length of a file can be reset to zero, and its file space be released with all other attributes remain unchanged. These seven basic operations comprise the minimal set of required file operations. These primitive operations can then be combined to perform other file operations. The operating system keeps a table, called the open-file-table , containing information about all open files. When a file operation is requested, the file is specified via an index into this table. When the file is no longer being actively used, it is closed by the process, and the operating system removes its entry from the open-file table, potentially releasing locks. ISSUES: Several different applications open the same file at the same time. SOLUTION: The operating system uses two levels of internal tables: a per-process table and a system-wide table. The per-process table tracks all files that a process has open. It Stores information regarding the process's use of the file (e.g. the current file pointer for each file, access rights to the file and accounting information) Each entry in the per-process table in turn points to a system-wide open-file table. It contains process-independent information(e.g. the location of the file on disk, access dates, and file size). Once a file has been opened by one process, it includes an entry for the file. It also has an open count associated with each file to indicate how many processes have the file open. File locks (\u6587\u4ef6\u9501) are useful for files that are shared by several processes. For example, a system log file that can be accessed and modified by a number of processes in the system. File locks provide functionality similar to reader-writer locks in Chapter 7 . A shared lock (\u5171\u4eab\u9501) is akin to a reader lock in that several processes can acquire the lock concurrently. An exclusive lock (\u6392\u65a5\u9501) is akin to a writer lock in that only one process at a time can acquire such a lock. Furthermore, operating systems(e.g. Linux) may provide either mandatory or advisory file-locking mechanisms. With mandatory locking, once a process acquires an exclusive lock, the operating system will prevent any other process from accessing the locked file. with advisory locking, the operating system will not prevent other process from accessing to the locked file. For advisory locking, it is up to software developers to ensure that locks are appropriately acquired and released. The simple program in Java as follows demonstrating file locking. The program acquires an exclusive lock on the first half of the file and a shared lock on the second half. import java.io.* ; import java.nio.channels.* ; public class LockingExample { public static final boolean EXCLUSIVE = false ; public static final boolean SHARED = true ; public static void main ( String args []) throws IOException { if ( args . length != 1 ) { System . err . println ( Usage: java LockingExample input file ); System . exit ( 0 ); } FileLock sharedLock = null ; FileLock exclusiveLock = null ; try { RandomAccessFile raf = new RandomAccessFile ( args [ 0 ], rw ); // get the channel for the file FileChannel channel = raf . getChannel (); System . out . println ( trying to acquire lock ... ); // this locks the first half of the file - exclusive exclusiveLock = channel . lock ( 0 , raf . length ()/ 2 , EXCLUSIVE ); System . out . println ( lock acquired ... ); /** * Now modify the data . . . */ try { // sleep for 10 seconds Thread . sleep ( 10000 ); } catch ( InterruptedException ie ) { } // release the lock exclusiveLock . release (); System . out . println ( lock released ... ); // this locks the second half of the file - shared sharedLock = channel . lock ( raf . length ()/ 2 + 1 , raf . length (), SHARED ); /** * Now read the data . . . */ // release the lock exclusiveLock . release (); } catch ( java . io . IOException ioe ) { System . err . println ( ioe ); } finally { if ( exclusiveLock != null ) exclusiveLock . release (); if ( sharedLock != null ) sharedLock . release (); } } }","title":"File Operations"},{"location":"os/osc/ch13/#file-types","text":"A common technique for implementing file types is to include the type as part of the file name. The name is split into two parts\u2014a name and an extension , usually separated by a period. The system uses the extension to indicate the type of the file and the type of operations that can be done on that file The UNIX system uses a magic number [ Wikipedia ] stored at the beginning of some binary files to indicate the type of data in the file (for example, the format of an image file). Not all files have magic numbers.","title":"File Types"},{"location":"os/osc/ch13/#file-structure","text":"Certain files must conform to a required structure that is understood by the operating system. For example, the operating system requires that an executable file have a specific structure so that it can determine where in memory to load the file and what the location of the first instruction is. One of the disadvantage of having the operating system support multiple file structures: it makes the operating system large and cumbersome. Some operating systems(UNIX, Windows) impose (and support) a minimal number of file structures. However, all operating systems must support at least one structure \u2014that of an executable file \u2014 so that the system is able to load and run programs.","title":"File Structure"},{"location":"os/osc/ch13/#internal-file-structure","text":"ISSUE: All disk I/O is performed in units of one block (physical record), and all blocks are the same size. It is unlikely that the physical record size will exactly match the length of the desired logical record. SOLUTION: Packing a number of logical records into physical blocks . EXAMPLE: The UNIX operating system defines all files to be simply streams of bytes. Each byte is individually addressable by its offset from the beginning (or end) of the file. In this case, the logical record size is 1 byte. The file system automatically packs and unpacks bytes into physical disk blocks - say, 512 bytes per block \u2014 as necessary.","title":"Internal File Structure"},{"location":"os/osc/ch13/#2-access-methods","text":"Files store information. The information in the file can be accessed in several ways.","title":"2 Access Methods"},{"location":"os/osc/ch13/#sequential-access","text":"The simplest access method is sequential access (\u987a\u5e8f\u8bbf\u95ee). Information in the file is processed in order, one record after the other. It is by far the most common access method.","title":"Sequential Access"},{"location":"os/osc/ch13/#direct-access","text":"For direct access (\u76f4\u63a5\u8bbf\u95ee) or relative access (\u76f8\u5bf9\u8bbf\u95ee), a file is made up of fixed-length logical records that allow programs to read and write records rapidly in no particular order. The file is viewed as a numbered sequence of blocks or records. Direct-access files are of great use for immediate access to large amounts of information. (e.g. databases, we compute which block contains the answer and then read that block directly when querying) A relative block number is provided by the user to the operating system. It is an index relative to the beginning of the file.","title":"Direct Access"},{"location":"os/osc/ch13/#other-access-methods","text":"Other access methods generally involve the construction of an index for the file. The index contains pointers to the various blocks. To find a record in the file, we first search the index and then use the pointer to access the file directly and to find the desired record.","title":"Other Access Methods"},{"location":"os/osc/ch13/#3-directory-structure","text":"The directory can be viewed as a symbol table that translates file names into their file control blocks. The directory can be single-level (\u5355\u5c42), two-level (\u53cc\u5c42), and tree-structured (\u6811\u72b6). Within a file system, it is useful to create directories to allow files to be organized. A single-level directory in a multiuser system causes naming problems, since each file must have a unique name. A two-level directory solves this problem by creating a separate directory for each user\u2019s files. The directory lists the files by name and includes the file\u2019s location on the disk, length, type, owner, time of creation, time of last use, and so on. The natural generalization of a two-level directory is a tree-structured directory . A tree-structured directory allows a user to create subdirectories to organize files. Acyclic-graph directory structures enable users to share subdirectories and files but complicate searching and deletion. A general graph structure allows complete flexibility in the sharing of files and directories but sometimes requires garbage collection to recover unused disk space.","title":"3 Directory Structure"},{"location":"os/osc/ch13/#4-protection","text":"When information is stored in a computer system, we want to keep it safe from physical damage (the issue of reliability ) and improper access (the issue of protection ).","title":"4 Protection"},{"location":"os/osc/ch13/#types-of-access","text":"Protection mechanisms provide controlled access by limiting the types of file access that can be made. Access is permitted or denied depending on several factors, one of which is the type of access requested. Several different types of operations may be controlled: Read . Read from the file. Write . Write or rewrite the file. Execute . Load the file into memory and execute it. Append . Write new information at the end of the file. Delete . Delete the file and free its space for possible reuse. List . List the name and attributes of the file. Attribute change . Changing the attributes of the file. Many protection mechanism have been proposed and we have a more detailed description in Chapter 17 .","title":"Types of Access"},{"location":"os/osc/ch13/#access-control","text":"The most common approach to the protection problem is to make access dependent on the identity of the user. Different users may need different types of access to a file or directory. The most general scheme to implement identity dependent access is to associate with each file and directory an access-control list (ACL, \u8bbf\u95ee\u63a7\u5236\u5217\u8868) specifying user names and the types of access allowed for each user. If a user is listed for the requested access, the access is allowed. Otherwise, a protection violation occurs, and the user job is denied access to the file. ISSUES: If we want to allow everyone to read a file, we must list all users with read accesses. SOLUTION: A condensed version of the access list, many system recognize three classifications of users in connection with each file: Owner. The user who created the file is the owner. Group. A set of users who are sharing the file and need similar access is a group, or work group Other. All other users in the system.","title":"Access Control"},{"location":"os/osc/ch13/#other-protection-approaches","text":"Another approach to the protection problem, is to associate a password with each file.","title":"Other Protection Approaches"},{"location":"os/osc/ch13/#permissions-in-unix","text":"In the UNIX system, directory protection and file protection are handled similarly. Associated with each file and directory are three fields - owner, group, and universe -- each consisting of the three bits rwx , where r controls read access, w controls write access, and x controls execution. A sample directory listing from a UNIX environment is shown in below:","title":"Permissions in UNIX"},{"location":"os/osc/ch13/#5-memory-mapped-files","text":"Memory mapping (\u5185\u5b58\u6620\u5c04) a file is accomplished by mapping a disk block to a page in memory. Initial access to the file, results in a page fault. A page-sized portion of the file is read from the file system into a physical page. Subsequent reads and writes to the file are handled as routine memory accesses. Advantage Manipulating files through memory rather than incurring the overhead of using read() and write() system calls simplifies and speeds up file access and usuage. Multiple processes may be allowed to map the same file concurrently, to allow sharing of data. The virtual memory map of each sharing process points to the same page of physical memory. The memory-mapping system calls can also support copy-on-write functionality, allowing processes to share a file in read-only mode but to have their own copies of any data they modify. Quite often, shared memory is in fact implemented by memory mapping files. Under this scenario, processes can communicate using shared memory by having the communicating processes memory-map the same file into their virtual address spaces(e.g. POSIX shared memory ).","title":"5 Memory-Mapped Files"},{"location":"os/osc/ch17/","text":"Operating System Concepts 17 Protection Goals of Protection Protection was originally conceived as an adjunct to multiprogramming operating system, to allow untrustworthy users to safely share a common logical name space, such as a directory files, or a common physical name space, such as memory. Modern protection, to increase the reliability of any complex system that makes use of shared resources and is connected to insecure communications platforms such as Internet. Protection are needed for several reasons. Preventing the mischievous, intentional violation of an access restriction by a user is needed. Protection can improve reliability by detecting latent errors at the interfaces between component subsystems. provide a mechanism for the enforcement of the policies governing resource use","title":"Ch17"},{"location":"os/osc/ch17/#operating-system-concepts-17-protection","text":"","title":"Operating System Concepts 17 Protection"},{"location":"os/osc/ch17/#goals-of-protection","text":"Protection was originally conceived as an adjunct to multiprogramming operating system, to allow untrustworthy users to safely share a common logical name space, such as a directory files, or a common physical name space, such as memory. Modern protection, to increase the reliability of any complex system that makes use of shared resources and is connected to insecure communications platforms such as Internet. Protection are needed for several reasons. Preventing the mischievous, intentional violation of an access restriction by a user is needed. Protection can improve reliability by detecting latent errors at the interfaces between component subsystems. provide a mechanism for the enforcement of the policies governing resource use","title":"Goals of Protection"},{"location":"os/osc/ch2/","text":"Operating System Concepts 2 - Operating System structures 1 Operating system service The figure below is a view of the various operating-system services and how they interrelate. 2 User and Operating System interface There're mainly three ways for users to interface with the operating system: command interpreter graphical user interface touch-screen interface 3 System calls Purpose of System Call: System calls provide an interface to the services made available by an operating system. Example A simple program to read data from one file and copy them to another file: cp in.txt out.txt . As you can see, even simple programs may make heavy use of the operating system. API Typically, application developers design programs according to an application programming interface( API , \u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3) rather than invoking actual system call . because even simple program may make heavy use of system call. program portabilit y: expect programs to compile and run other system that supports the same API run-time environment (RTE, \u8fd0\u884c\u65f6\u73af\u5883) - the full suit of software needed to execute applications, including its compilers, interpreters, libraries, loaders. Types of system calls System calls can be grouped roughly into six major categories: \u7cfb\u7edf\u8c03\u7528\u53ef\u5206\u6210\u516d\u5927\u7c7b\uff1a\u8fdb\u7a0b\u63a7\u5236\uff0c\u6587\u4ef6\u7ba1\u7406\uff0c\u8bbe\u5907\u7ba1\u7406\uff0c\u4fe1\u606f\u7ef4\u62a4\uff0c\u901a\u4fe1\u548c\u4fdd\u62a4\u3002 process control file management device management information maintenance communications protection Example The following illustrates various equivalent system calls for Windows and UNIX operating systems. Three ways to pass parameters to the operating system: when less than five parameters, passing the parameters in registers when more than five parameters, parameters are stored in a block, passing the address of the block in a register using stack 4 System Services System services , also known as system utilities , provide a convenient environment for program development and execution. They can be divided into these categories: File management Status information File modification Program loading and execution Communications Background services 7 OS Design and Implementation One important principle of OS design is the separation of policy from mechanism . Mechanisms determine how to do something; policies determine what will be done. \u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u5219\u662f\u7b56\u7565\uff08policy\uff09\u548c\u673a\u5236\uff08mechanism\uff09\u7684\u5206\u79bb\u3002\u673a\u5236\u51b3\u5b9a\u5982\u4f55\u505a\uff0c\u7b56\u7565\u51b3\u5b9a\u505a\u4ec0\u4e48\u3002 The separation of policy and mechanism is important for flexibility . 8 Operating system structure Monolithic structure Operating systems with monolithic structure (\u5355\u4f53\u7ed3\u6784) place all of the functionality of kernel into a single , static binary file that runs in a single address space. a common technique for designing operating system e.g. original Unix operating system ( figure below) e.g. Linux is based on Unix and is structured similarly, as shown in figure below. pros: simplicity of kernels a distinct performance advantage very little overhead in the system-call interface fast communication within the kernel cons difficult to implement and extend Layered A loosely coupled (\u677e\u8026\u5408) system is divided into separate, smaller components that have specific and limited functionality ( modular approach). All these components together comprise the kernel. changes in one component affect only that component A system can be made modular in many ways. one way is the layered approach. For the layered operating system (\u5c42\u6b21\u5f0f\u64cd\u4f5c\u7cfb\u7edf), it is broken into a number of layers. The bottom layer is the hardware; the highest is the user interface. low-level layers can be invoked by higher-level layers pros: Simplicity of construction and debugging Each layer is implemented only with operations provided by lower-level layers. Higher-level layers can be debugged without any concern for the lower-level layers cons: Difficulty of defining the functionality of each layer Poor performance Overhead of requiring a user program to traverse through multiple layers to obtain an operating-system service Layered systems have been successfully used in computer networks (such as TCP/IP) and web applications. Microkernel Another way to modularized the kernel is using microkernel (\u5fae\u5185\u6838) approach. Removing all nonessential components from the kernel and implementing them as user-level programs the reside in separate address spaces. A smaller kernel. A typical microkernel shown below. Monolithic Kernels VS Microkernels: Pros : Easy to extend the os All new services added to user space do not require modification of the kernel. When modification of kernel needed, changes tend to be fewer because of small kernel more security and reliability since most services are running as user Cons : Performance may suffer due to increased system function overhead. Because messages of user-level services to communicate must be copied between the services, which reside in separate space. The os may have to switch from one process to the next to exchange the messages. Best-known microkernel os is Darwin , the kernel component of the macOS and iOS. Modules Perhaps the best current methodology for operating system design involves using loadable kernel modules (LVMs, \u53ef\u88c5\u8f7d\u5185\u6838\u6a21\u5757). Here, the kernel has a set of core components and can link in additional services via modules, either at boot time or during run time. design purpose: for the kernel to provide core services, while other services are implemented dynamically , as the kernel is running Example You can list all Linux kernel modules that are currently loaded, by entering the command lsmod (lists name, size, and where the module is being used). Linux kernel modules are loaded(inserted) using the insmod command, and are removed using the rmmod command. Hybrid systems In practice, very few operating system adopt a single, strictly defined structure. Instead, they combine different structures , resulting in hybrid systems that address performance, security, and usability issues. Architecture of Apple\u2019s macOS and iOS operating systems: Darwin provides two system-call interfaces: Mach system calls and BSD system calls. The structure of Darwin: To address such performance problems, Darwin combines Mach, BSD, the I/O kit, and any kernel extensions into a single address space. 9 System boot The process of starting a computer by loading the kernel is known as booting the system. A small piece of code known as the bootstrap program (\u5f15\u5bfc\u7a0b\u5e8f) or boot loader locates the kernel. The kernel is loaded into memory and started. The kernel initializes hardware. The root file system is mounted. Bootstrap program: usually, bootstrap program located in BIOS( nonvolatile firmware(\u56fa\u4ef6) on motherboard, wiki ) GRUB is an open-source bootstrap program for Linux and Unix systems wiki .","title":"Chapter 2: Operating System structures"},{"location":"os/osc/ch2/#operating-system-concepts-2-operating-system-structures","text":"","title":"Operating System Concepts 2 - Operating System structures"},{"location":"os/osc/ch2/#1-operating-system-service","text":"The figure below is a view of the various operating-system services and how they interrelate.","title":"1 Operating system service"},{"location":"os/osc/ch2/#2-user-and-operating-system-interface","text":"There're mainly three ways for users to interface with the operating system: command interpreter graphical user interface touch-screen interface","title":"2 User and Operating System interface"},{"location":"os/osc/ch2/#3-system-calls","text":"Purpose of System Call: System calls provide an interface to the services made available by an operating system. Example A simple program to read data from one file and copy them to another file: cp in.txt out.txt . As you can see, even simple programs may make heavy use of the operating system.","title":"3 System calls"},{"location":"os/osc/ch2/#api","text":"Typically, application developers design programs according to an application programming interface( API , \u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3) rather than invoking actual system call . because even simple program may make heavy use of system call. program portabilit y: expect programs to compile and run other system that supports the same API run-time environment (RTE, \u8fd0\u884c\u65f6\u73af\u5883) - the full suit of software needed to execute applications, including its compilers, interpreters, libraries, loaders.","title":"API"},{"location":"os/osc/ch2/#types-of-system-calls","text":"System calls can be grouped roughly into six major categories: \u7cfb\u7edf\u8c03\u7528\u53ef\u5206\u6210\u516d\u5927\u7c7b\uff1a\u8fdb\u7a0b\u63a7\u5236\uff0c\u6587\u4ef6\u7ba1\u7406\uff0c\u8bbe\u5907\u7ba1\u7406\uff0c\u4fe1\u606f\u7ef4\u62a4\uff0c\u901a\u4fe1\u548c\u4fdd\u62a4\u3002 process control file management device management information maintenance communications protection Example The following illustrates various equivalent system calls for Windows and UNIX operating systems. Three ways to pass parameters to the operating system: when less than five parameters, passing the parameters in registers when more than five parameters, parameters are stored in a block, passing the address of the block in a register using stack","title":"Types of system calls"},{"location":"os/osc/ch2/#4-system-services","text":"System services , also known as system utilities , provide a convenient environment for program development and execution. They can be divided into these categories: File management Status information File modification Program loading and execution Communications Background services","title":"4 System Services"},{"location":"os/osc/ch2/#7-os-design-and-implementation","text":"One important principle of OS design is the separation of policy from mechanism . Mechanisms determine how to do something; policies determine what will be done. \u64cd\u4f5c\u7cfb\u7edf\u8bbe\u8ba1\u7684\u4e00\u4e2a\u91cd\u8981\u539f\u5219\u662f\u7b56\u7565\uff08policy\uff09\u548c\u673a\u5236\uff08mechanism\uff09\u7684\u5206\u79bb\u3002\u673a\u5236\u51b3\u5b9a\u5982\u4f55\u505a\uff0c\u7b56\u7565\u51b3\u5b9a\u505a\u4ec0\u4e48\u3002 The separation of policy and mechanism is important for flexibility .","title":"7 OS Design and Implementation"},{"location":"os/osc/ch2/#8-operating-system-structure","text":"","title":"8 Operating system structure"},{"location":"os/osc/ch2/#monolithic-structure","text":"Operating systems with monolithic structure (\u5355\u4f53\u7ed3\u6784) place all of the functionality of kernel into a single , static binary file that runs in a single address space. a common technique for designing operating system e.g. original Unix operating system ( figure below) e.g. Linux is based on Unix and is structured similarly, as shown in figure below. pros: simplicity of kernels a distinct performance advantage very little overhead in the system-call interface fast communication within the kernel cons difficult to implement and extend","title":"Monolithic structure"},{"location":"os/osc/ch2/#layered","text":"A loosely coupled (\u677e\u8026\u5408) system is divided into separate, smaller components that have specific and limited functionality ( modular approach). All these components together comprise the kernel. changes in one component affect only that component A system can be made modular in many ways. one way is the layered approach. For the layered operating system (\u5c42\u6b21\u5f0f\u64cd\u4f5c\u7cfb\u7edf), it is broken into a number of layers. The bottom layer is the hardware; the highest is the user interface. low-level layers can be invoked by higher-level layers pros: Simplicity of construction and debugging Each layer is implemented only with operations provided by lower-level layers. Higher-level layers can be debugged without any concern for the lower-level layers cons: Difficulty of defining the functionality of each layer Poor performance Overhead of requiring a user program to traverse through multiple layers to obtain an operating-system service Layered systems have been successfully used in computer networks (such as TCP/IP) and web applications.","title":"Layered"},{"location":"os/osc/ch2/#microkernel","text":"Another way to modularized the kernel is using microkernel (\u5fae\u5185\u6838) approach. Removing all nonessential components from the kernel and implementing them as user-level programs the reside in separate address spaces. A smaller kernel. A typical microkernel shown below. Monolithic Kernels VS Microkernels: Pros : Easy to extend the os All new services added to user space do not require modification of the kernel. When modification of kernel needed, changes tend to be fewer because of small kernel more security and reliability since most services are running as user Cons : Performance may suffer due to increased system function overhead. Because messages of user-level services to communicate must be copied between the services, which reside in separate space. The os may have to switch from one process to the next to exchange the messages. Best-known microkernel os is Darwin , the kernel component of the macOS and iOS.","title":"Microkernel"},{"location":"os/osc/ch2/#modules","text":"Perhaps the best current methodology for operating system design involves using loadable kernel modules (LVMs, \u53ef\u88c5\u8f7d\u5185\u6838\u6a21\u5757). Here, the kernel has a set of core components and can link in additional services via modules, either at boot time or during run time. design purpose: for the kernel to provide core services, while other services are implemented dynamically , as the kernel is running Example You can list all Linux kernel modules that are currently loaded, by entering the command lsmod (lists name, size, and where the module is being used). Linux kernel modules are loaded(inserted) using the insmod command, and are removed using the rmmod command.","title":"Modules"},{"location":"os/osc/ch2/#hybrid-systems","text":"In practice, very few operating system adopt a single, strictly defined structure. Instead, they combine different structures , resulting in hybrid systems that address performance, security, and usability issues. Architecture of Apple\u2019s macOS and iOS operating systems: Darwin provides two system-call interfaces: Mach system calls and BSD system calls. The structure of Darwin: To address such performance problems, Darwin combines Mach, BSD, the I/O kit, and any kernel extensions into a single address space.","title":"Hybrid systems"},{"location":"os/osc/ch2/#9-system-boot","text":"The process of starting a computer by loading the kernel is known as booting the system. A small piece of code known as the bootstrap program (\u5f15\u5bfc\u7a0b\u5e8f) or boot loader locates the kernel. The kernel is loaded into memory and started. The kernel initializes hardware. The root file system is mounted. Bootstrap program: usually, bootstrap program located in BIOS( nonvolatile firmware(\u56fa\u4ef6) on motherboard, wiki ) GRUB is an open-source bootstrap program for Linux and Unix systems wiki .","title":"9 System boot"},{"location":"os/osc/ch3/","text":"Operating System Concepts 3 - Processes 1 Process concept The process Process (\u8fdb\u7a0b) is a program in execution. Process is the unit of work in a modern computing system. The status of the current activity of a process is represented by the value of the program counter and the contents of the processor's registers . A program by itself is not a process. A program is a passive entity, such as a file containing a list of instructions stored on disk. A process is an active entity, with a program counter specifying the next instruction to execute. Process state A process may be in one of the following states: New (\u65b0\u5efa). The process is being created. \u8fdb\u7a0b\u6b63\u5728\u88ab\u521b\u5efa Running (\u8fd0\u884c). Instructions are being executed. \u6307\u4ee4\u6b63\u5728\u88ab\u6267\u884c Waiting (\u7b49\u5f85). The process is waiting for some event to occur(such as an I/O completion or reception of a signal). \u8fdb\u7a0b\u7b49\u5f85\u67d0\u4e9b\u4e8b\u4ef6\u53d1\u751f Ready (\u5c31\u7eea). The process is waiting to be assigned to a processor.\u8fdb\u7a0b\u7b49\u5f85\u5206\u914d\u5904\u7406\u5668 Terminated (\u7ec8\u6b62). The process has finished execution. \u8fdb\u7a0b\u6267\u884c\u5b8c\u6bd5 Diagram of process state: Process control block Each process is represented by a process control block (PCB, \u8fdb\u7a0b\u63a7\u5236\u5757), it contains Process state (\u8fdb\u7a0b\u72b6\u6001) Program counter (\u7a0b\u5e8f\u8ba1\u6570\u5668) CPU registers (CPU\u5bc4\u5b58\u5668) CPU-scheduling information (CPU\u8c03\u5ea6\u4fe1\u606f): a process priority, pointers to scheduling queues, and any other scheduling parameters. Memory-management information (\u5185\u5b58\u7ba1\u7406\u4fe1\u606f) Accounting information (\u8bb0\u8d26\u4fe1\u606f): the amount of CPU and real time used, time limits, account numbers, process numbers and so on. I/O status information (I/O\u72b6\u6001\u4fe1\u606f): the list of I/O devices allocated to the process, a list of open files. Process Control Block: The process control block in Linux is represented by the C structure task_struct ('include/linux/sched.h')\uff0c CODE LINK Within the Linux kernel, all active processes are represented using a doubly linked list of task struct. Task_strut : 2 Process scheduling The process scheduler (\u8fdb\u7a0b\u8c03\u5ea6\u7a0b\u5e8f) selects an available process for program execution on a core. Each CPU core can run one process at a time. The number of processes currently in memory is known as the degree of multiprogramming . Scheduling Queues Ready queue (\u5c31\u7eea\u961f\u5217): the status of processes are ready. * generally stored as a linked list, its header contains pointers to the first PCB in the list, each PCB includes a pointer field that points to next PCB in the ready queue. Wait Queue (\u7b49\u5f85\u961f\u5217): the status of processes are waiting. Queueing-diagram representation of process scheduling: Context Switch Here the context of a process is represented in the PCB of the process, including the value of the CPU registers, the process state, and memory-management information. An operating system performs a context switch \uff08\u4e0a\u4e0b\u6587\u5207\u6362) when it switches from running one process to running another. The kernel saves the context of the old process into its PCB and restore the saved context of the new process scheduled to run. Context-switch time is overhead; the system does no useful work while switching. A typical speed is a several microseconds. Context-switch times are highly dependent on hardware support. Context switch from an old process to a new process: 3 Operating on Processes Process creation A process may create several new processes. the creating process is called a parent process . the new process is called a child process . Process termination A process terminates when it finishes executing its final statement and asks the operating system to delete it by using the exit() system call. cascading termination (\u7ea7\u8054\u7ec8\u6b62): if a process terminates (either normally or abnormally), then all its children must also be terminated. A process that has terminated, but whose parent has not yet called wait() , is known as a zombie process (\u50f5\u5c38\u8fdb\u7a0b). if a parent did not invoke wait() and instead terminated, then leaving its child processes as orphan processes (\u5b64\u513f\u8fdb\u7a0b). Unix system may assign the init process as the new parent to orphan processes, and the init process periodically invokes wait() . Example A problem with a single process for a web browser is that if a web application in any tab crashes, the entire process \u2014\u2014 including all other tabs \u001f\u001f\u2014\u2014 crashes as well. Chrome web browser uses a multiprocess architecture \u2014\u2014 identifies three different types of processes: browser, renderers, plugins. see here in detail. 4 Interprocess communication Processes may be either independent processes (\u72ec\u7acb\u8fdb\u7a0b) or cooperating processes (\u534f\u540c\u8fdb\u7a0b). A process is independent if it does not share data with any other processes executing in the system. A process is cooperating if it can affect or be affected by the other processes executing in the system. Advantages of process cooperation: Information sharing Computation speedup Modularity Cooperating process require an interprocess communication (IPC\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1) mechanism that will allow them to exchange data. There are two fundamental models of IPC: shared memory (\u5171\u4eab\u5185\u5b58): a region of memory is shared by cooperating process. Process can exchange information by reading and writing data to the shared region. Shared memory can be faster than message passing. message passing (\u6d88\u606f\u4f20\u9012)\uff1a communication takes place by means of messages exchanged between the cooperating processes. Message passing is useful for exchanging smaller amounts of data, because no conflicts need be avoided. Message passing is easier to implement in a distributed system than shared memory. 5 IPC in shared-memory system Let's consider the producer-consumer problem, which is a common paradigm for cooperating processes. A producer process produces information that is consumed by a consumer process. One solution to the producer-consumer problem uses shared memory. We generally think of a server as a producer and a client as a consumer. For example, a web server produces web content such as HTML files and images, which are consumed by the client web browser requesting the resource. Two types of buffers can be used. unbounded buffer (\u65e0\u754c\u7f13\u51b2): places no practical limit on the size of the buffer. bounded buffer (\u6709\u754c\u7f13\u51b2): assumes a fixed buffer size 6 IPC in message-passing system A message-passing facility provides at least two operations: send(message) receive(message) If P and Q wish to communicate, they need to establish a communication link (\u901a\u4fe1\u8fde\u63a5) between them exchange messages via send/receive Here are several methods for logically implementing a communication link between processes: Direct or indirect communication \u76f4\u63a5/\u95f4\u63a5\u901a\u4fe1 Synchronous or asynchronous communication \u540c\u6b65/\u5f02\u6b65\u540c\u6b65 Automatic or explicit buffering \u81ea\u52a8/\u663e\u5f0f\u7f13\u51b2 Direct/Indirect communication Direct Communication Under direct communication , each process that wants to communicate must explicitly name the recipient or sender of the communication. send(P, message) - send a message to process P. receive(Q, message) - receive a message from process Q A communication link in this scheme has the following properties: A link is established automatically between every pair of processes that want to communicate. A link is associated with exactly two processes. Between each pair of processes, there exists exactly one link. Cons: limited modularity of the resulting process definitions. Changing the identifier of a process may necessitate examining all other process definitions. any such hard-coding techniques, are less desirable. Indirect Communication With indirect communication , the message are sent to and receive from mailboxes , or ports . send(A, message) - send a message to mailbox A receive(A, message) - receive a message from mailbox A A mailbox can be viewed abstractly as an object into which messages can be placed by processes and from which messages can be removed. Each mailbox has an unique identification. Two processes can communicate only if they have a shared mailbox. In this scheme, a communication link has the following properties: A link is established between a pair of processes only if both members of the pair have a shared mailbox. A link may be associated with more than two processes. Between each pair of communicating processes, a number of different links may exist, with each link corresponding to one mailbox. A mailbox may be owned either by a process or by the operating system. If the mailbox is owned by a process We distinguish between the owner (which can only receive messages through his mailbox) and the user (which can only send messages to the mailbox) Each mailbox has a unique owner. When a process that owns a mailbox terminates, the mailbox disappears. The process that creates a new mailbox is that mailbox's owner by default. Synchronization Message passing may be either blocking or nonblocking - also known as synchronous and asynchronous . Buffering Messages exchanged by communicating processes reside in a temporary queue, whether communication is direct or indirect. Basically, it can be implemented in three ways: Zero capacity\uff08\u96f6\u5bb9\u91cf\uff09-- no buffering The link cannot have any messages waiting in it. The sender must block until the recipient receives the message. Bounded capacity\uff08\u6709\u754c\u5bb9\u91cf\uff09-- automatic buffering The queue has finite length n, at most n message can reside in it. The sender must block until space is available in the queue if the link is full. Unbounded capacity \uff08\u65e0\u754c\u5bb9\u91cf\uff09 -- automatic buffering Any number of messages can wait in it. The sender never blocks. 7 Examples of IPC Systems POSIX Shared Memory Here, we explore the POSIX API for shared memory. POSIX shared memory is organized using memory-mapped files (\u5185\u5b58\u6620\u5c04\u6587\u4ef6), which associate the region of shared memory with a file. A process must first create a shared-memory object using the shm_open() system call. fd = shm_open ( name , O_CREAT | O_RDWR , 0666 ); ftruncate ( fd , 4096 ); mmap ( 0 , SIZE , PROT_READ | PROT_WRITE , MAP_SHARED , fd , 0 ); A successful call to shm_open() returns an integer file descriptor for the shared-memory object. Once the object is established, the ftruncate() function is used to configure the size of the object in bytes. Finally, the mmap() function establishes a memory-mapped file containing the shared-memory object. It returns a pointer to the shared #include stdio.h #include stdlib.h #include unistd.h #include fcntl.h #include sys/shm.h #include sys/stat.h #include sys/mman.h int main () { const char * name = OS ; const int SIZE = 4096 ; int shm_fd ; void * ptr ; int i ; /* open the shared memory segment */ shm_fd = shm_open ( name , O_RDONLY , 0666 ); if ( shm_fd == - 1 ) { printf ( shared memory failed \\n ); exit ( - 1 ); } /* now map the shared memory segment in the address space of the process */ ptr = mmap ( 0 , SIZE , PROT_READ , MAP_SHARED , shm_fd , 0 ); if ( ptr == MAP_FAILED ) { printf ( Map failed \\n ); exit ( - 1 ); } /* now read from the shared memory region */ printf ( %s ,( char * ) ptr ); /* remove the shared memory segment */ if ( shm_unlink ( name ) == - 1 ) { printf ( Error removing %s \\n , name ); exit ( - 1 ); } return 0 ; } Mach Message Passing Mach was especially designed for distributed systems. Its kernel supports the creation and destruction of multiple tasks , which are similar to processes but have multiple threads of control and fewer associated resources. Messages are sent to, and received from, mailboxes, which are called ports in Mach. Ports are finite in size and unidirectional . For two-way communication, a message is sent to one port, and a response is sent to a separate reply port. Associated with each port is a collection of port rights , which identify the capabilities necessary for a task to interact with the port. Functions: mach_port_allocate() creates a new port and allocates space for its queue of messages. mach_msg() is the standard API for both sending and receiving messages. #include mach/mach.h struct message { mach_msg_header_t header ; int data ; }; mach_port_t client ; mach_port_t server ; /* Client Code */ struct message message ; // construct the header message . header . msgh_size = sizeof ( message ); message . header . msgh_remote_port = server ; message . header . msgh_local_port = client ; // send the message mach msg ( message . header , // message header MACH_SEND_MSG , // sending a message sizeof ( message ), // size of message sent 0 , // maximum size of received message - unnecessary MACH_PORT_NULL , // name of receive port - unnecessary MACH_MSG_TIMEOUT_NONE , // no time outs MACH PORT NULL // no notify port ); /* Server Code */ struct message message ; // receive the message mach_msg ( message . header , // message header MACH_RCV_MSG , // sending a message 0, // size of message sent sizeof ( message ), // maximum size of received message server , // name of receive port MACH_MSG_TIMEOUT_NONE , // no time outs MACH_PORT_NULL // no notify port ); Pipes A pipe acts as a conduit allowing two processes to communicate. Pipes were one of the first IPC mechanisms in early UNIX systems. There are two common types of pipes used on both UNIX and Windows systems: ordinary pipes and named pipes . Ordinary pipes Ordinary pipes allow two processes to communicate in standard producer-consumer fashion: the producer writes to one end of the pipe (the write end ) and the consumer reads from the other end (the read end ). Ordinary pipes are unidirectional , allowing only one-way communication. Function pipe(int fd[]) constructs an ordinary pipe, where fd is a file descriptor. UNIX treats a pipe as a special type of file . Pipes can be accessed using ordinary read() and write() system calls. Ordinary pipes exit only while the processes are communicating with each other. int pipe(int pipefd[2]) creates a pipe, a unidirectional data channel that can be used for interprocess communication. The array pipefd is used to return two file descriptors referring to the ends of the pipe. pipefd[0] refers to the read end of the pipe. pipefd[1] refers to the write end of the pipe. Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe. [ Man Page - PIPE ] #include sys/types.h #include stdio.h #include string.h #include unistd.h #define BUFFER_SIZE 25 #define READ_END 0 #define WRITE_END 1 int main ( void ) { char write_msg [ BUFFER_SIZE ] = Greetings ; char read_msg [ BUFFER_SIZE ]; int pipefd [ 2 ]; pid_t pid ; /* create the pipe */ if ( pipe ( pipefd ) == - 1 ){ fprintf ( stderr , Pipe failed ); return 1 ; } /* fork a child process */ pid = fork (); if ( pid 0 ){ /* parent process */ close ( pipefd [ READ_END ]); /* close the unused end of the pipe */ write ( pipefd [ WRITE_END ], write_msg , strlen ( write_msg ) + 1 ); /* write to the pipe */ close ( pipefd [ WRITE_END ]); /* close the write end of the pipe */ } else if ( pid == 0 ){ /* child process */ close ( pipefd [ WRITE_END ]); /* close the unused end of the pipe */ read ( pipefd [ READ_END ], read_msg , BUFFER_SIZE ); /* read from the pipe */ printf ( read: %s \\n , read_msg ); close ( pipefd [ READ_END ]); /* close the read end of the pipe */ } return 0 ; } Named pipes Named pipes (\u547d\u540d\u7ba1\u9053) can be bidirectional , and no parent-child relationship is required. Named pipes are referred to as FIFOs in UNIX system. Once created, they appear as typical files in the file system. The communicating processes for named pipes must reside on the same machine. A FIFO is created with the mkfifo() system call and manipulated with the ordinary open() , read() , write() , and close system calls.\uff1a int mkfifo ( const char * pathname , mode_t mode ); mkfifo() makes a FIFO special file with name pathname . mode specifies the FIFO's permissions. It is modified by the process's umask in the usual way: the permissions of the created file are ( mode ~umask ). [ Man Page - mkfifo ] The program fifowrite.c is as follows. #include sys/types.h #include stdlib.h #include stdio.h #include fcntl.h #include limits.h int main () { const char * fifo_name = /tmp/my_fifo ; int pipe_fd = - 1 ; int data_fd = - 1 ; int res = 0 ; const int open_mode = O_WRONLY ; char buffer [ PIPE_BUF + 1 ]; if ( access ( fifo_name , F_OK ) ==- 1 ) { res = mkfifo ( fifo_name , 0777 ); if ( res != 0 ) { fprintf ( stderr , could not create fifo \\n ); exit ( EXIT_FAILURE ); } } printf ( process %d opening fifo O_WRONLY \\n , getpid ()); pipe_fd = open ( fifo_name , open_mode ); data_fd = open ( data.txt , O_RDONLY ); printf ( process %d result %d \\n , getpid (), pipe_fd ); if ( pipe_fd !=- 1 ) { int bytes_read = 0 ; bytes_read = read ( data_fd , buffer , PIPE_BUF ); while ( bytes_read 0 ) { res = write ( pipe_fd , buffer , bytes_read ); if ( res ==- 1 ) { fprintf ( stderr , write error \\n ); exit ( EXIT_FAILURE ); } bytes_read = read ( data_fd , buffer , PIPE_BUF ); buffer [ bytes_read ] = \\0 ; } close ( pipe_fd ); close ( data_fd ); } else { exit ( EXIT_FAILURE ); } printf ( process %d finished. \\n , getpid ()); exit ( EXIT_SUCCESS ); } the program fiforead.c is as follows. #include stdlib.h #include stdio.h #include sys/types.h #include fcntl.h #include limits.h int main () { const char * fifo_name = /tmp/my_fifo ; int pipe_fd = - 1 ; int data_fd = - 1 ; int res = 0 ; int open_mode = O_RDONLY ; char buffer [ PIPE_BUF + 1 ]; int bytes_read = 0 ; int bytes_write = 0 ; memset ( buffer , \\0 , sizeof ( buffer )); printf ( process %d opening FIFO O_RDONLY \\n , getpid ()); pipe_fd = open ( fifo_name , open_mode ); data_fd = open ( dataformfifo.txt , O_WRONLY | O_CREAT , 0644 ); printf ( process %d result %d \\n , getpid (), pipe_fd ); if ( pipe_fd !=- 1 ) { do { res = read ( pipe_fd , buffer , PIPE_BUF ); bytes_write = write ( data_fd , buffer , res ); bytes_read += res ; } while ( res 0 ); close ( pipe_fd ); close ( data_fd ); } else { exit ( EXIT_FAILURE ); } printf ( process %d finished,%d bytes read \\n , getpid (), bytes_read ); exit ( EXIT_SUCCESS ); } 8 Communication in Client-Server system In this section, we explore two other strategies for communication in client-server system: sockets and remote procedure calls (RPCs) Sockets A socket (\u5957\u63a5\u5b57) is defined as an endpoint for communication. A socket is identified by an IP address concatenated with a port number . Communication using sockets\uff1a Servers implementing specific services (such as SSH, FTP, and HTTP) listen to well-known ports. Once a request is received, the server accepts a connection from the client socket to complete the connection. Java provides three different types of sockets. Connection-oriented(TCP) sockets are implemented with the Socket class. The example describes a data server that uses connection-oriented TCP sockets. import java.net.* ; import java.io.* ; public class DateClient { public static void main ( String [] args ) { try { // this could be changed to an IP name or address other than the localhost. // The IP address 127.0.0.1 is a special IP address known as the loopback. // When a computer refers to IP address 127.0.0.1, it is referring to itself. // This mechanism allows a client and server on the same host to communicate using the TCP/IP protocol. Socket sock = new Socket ( 127.0.0.1 , 6013 ); InputStream in = sock . getInputStream (); BufferedReader bin = new BufferedReader ( new InputStreamReader ( in )); String line ; while ( ( line = bin . readLine ()) != null ) System . out . println ( line ); sock . close (); } catch ( IOException ioe ) { System . err . println ( ioe ); } } } public class DateServer { public static void main ( String [] args ) { try { ServerSocket sock = new ServerSocket ( 6013 ); // now listen for connections while ( true ) { Socket client = sock . accept (); // we have a connection PrintWriter pout = new PrintWriter ( client . getOutputStream (), true ); // write the Date to the socket pout . println ( new java . util . Date (). toString ()); // close the socket and resume listening for more connections client . close (); } } catch ( IOException ioe ) { System . err . println ( ioe ); } } } Communication using sockets\u2014although common and efficient \u2014\u2014 is considered a low-level form of communication between distributed processes. One reason is that sockets allow only an unstructured stream of bytes to be exchanged between the communicating threads. It is the responsibility of the client or server application to impose a structure on the data. Remote procedure calls Remote Procedure Call (\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528), One of the most common forms of remote service, allows programs on different machines to interact using simple procedure call/return semantics, just as if the two programs were in the same computer. The messages exchanged in RPC communication are well structured and are thus no longer just packets of data. Each message is addressed to an RPC daemon listening to a port on the remote system, and each contains an identifier specifying the function to execute and the parameters to pass to that function. The RPC system hides the details that allow communication to take place by providing a stub (\u5b58\u6839) on each side. Typically, a separate stub exists for each separate remote procedure. When the client invokes a remote procedure, the RPC system calls the appropriate stub, passing it the parameters provided to the remote procedure. This stub locates the port on the server and marshals (\u7f16\u7ec4) the parameters. The stub then transmits a message to the server using message passing. A similar stub on the server side receives this message and invokes the procedure on the server. If necessary, return values are passed back to the client using the same technique. RPC hides all the network code into the stub procedures. This prevents the application programs, the client and the server, from having to worry about details such as sockets, network byte order, and the like.","title":"Chapter 3: Processes"},{"location":"os/osc/ch3/#operating-system-concepts-3-processes","text":"","title":"Operating System Concepts 3 - Processes"},{"location":"os/osc/ch3/#1-process-concept","text":"","title":"1 Process concept"},{"location":"os/osc/ch3/#the-process","text":"Process (\u8fdb\u7a0b) is a program in execution. Process is the unit of work in a modern computing system. The status of the current activity of a process is represented by the value of the program counter and the contents of the processor's registers . A program by itself is not a process. A program is a passive entity, such as a file containing a list of instructions stored on disk. A process is an active entity, with a program counter specifying the next instruction to execute.","title":"The process"},{"location":"os/osc/ch3/#process-state","text":"A process may be in one of the following states: New (\u65b0\u5efa). The process is being created. \u8fdb\u7a0b\u6b63\u5728\u88ab\u521b\u5efa Running (\u8fd0\u884c). Instructions are being executed. \u6307\u4ee4\u6b63\u5728\u88ab\u6267\u884c Waiting (\u7b49\u5f85). The process is waiting for some event to occur(such as an I/O completion or reception of a signal). \u8fdb\u7a0b\u7b49\u5f85\u67d0\u4e9b\u4e8b\u4ef6\u53d1\u751f Ready (\u5c31\u7eea). The process is waiting to be assigned to a processor.\u8fdb\u7a0b\u7b49\u5f85\u5206\u914d\u5904\u7406\u5668 Terminated (\u7ec8\u6b62). The process has finished execution. \u8fdb\u7a0b\u6267\u884c\u5b8c\u6bd5 Diagram of process state:","title":"Process state"},{"location":"os/osc/ch3/#process-control-block","text":"Each process is represented by a process control block (PCB, \u8fdb\u7a0b\u63a7\u5236\u5757), it contains Process state (\u8fdb\u7a0b\u72b6\u6001) Program counter (\u7a0b\u5e8f\u8ba1\u6570\u5668) CPU registers (CPU\u5bc4\u5b58\u5668) CPU-scheduling information (CPU\u8c03\u5ea6\u4fe1\u606f): a process priority, pointers to scheduling queues, and any other scheduling parameters. Memory-management information (\u5185\u5b58\u7ba1\u7406\u4fe1\u606f) Accounting information (\u8bb0\u8d26\u4fe1\u606f): the amount of CPU and real time used, time limits, account numbers, process numbers and so on. I/O status information (I/O\u72b6\u6001\u4fe1\u606f): the list of I/O devices allocated to the process, a list of open files. Process Control Block: The process control block in Linux is represented by the C structure task_struct ('include/linux/sched.h')\uff0c CODE LINK Within the Linux kernel, all active processes are represented using a doubly linked list of task struct. Task_strut :","title":"Process control block"},{"location":"os/osc/ch3/#2-process-scheduling","text":"The process scheduler (\u8fdb\u7a0b\u8c03\u5ea6\u7a0b\u5e8f) selects an available process for program execution on a core. Each CPU core can run one process at a time. The number of processes currently in memory is known as the degree of multiprogramming .","title":"2 Process scheduling"},{"location":"os/osc/ch3/#scheduling-queues","text":"Ready queue (\u5c31\u7eea\u961f\u5217): the status of processes are ready. * generally stored as a linked list, its header contains pointers to the first PCB in the list, each PCB includes a pointer field that points to next PCB in the ready queue. Wait Queue (\u7b49\u5f85\u961f\u5217): the status of processes are waiting. Queueing-diagram representation of process scheduling:","title":"Scheduling Queues"},{"location":"os/osc/ch3/#context-switch","text":"Here the context of a process is represented in the PCB of the process, including the value of the CPU registers, the process state, and memory-management information. An operating system performs a context switch \uff08\u4e0a\u4e0b\u6587\u5207\u6362) when it switches from running one process to running another. The kernel saves the context of the old process into its PCB and restore the saved context of the new process scheduled to run. Context-switch time is overhead; the system does no useful work while switching. A typical speed is a several microseconds. Context-switch times are highly dependent on hardware support. Context switch from an old process to a new process:","title":"Context Switch"},{"location":"os/osc/ch3/#3-operating-on-processes","text":"","title":"3 Operating on Processes"},{"location":"os/osc/ch3/#process-creation","text":"A process may create several new processes. the creating process is called a parent process . the new process is called a child process .","title":"Process creation"},{"location":"os/osc/ch3/#process-termination","text":"A process terminates when it finishes executing its final statement and asks the operating system to delete it by using the exit() system call. cascading termination (\u7ea7\u8054\u7ec8\u6b62): if a process terminates (either normally or abnormally), then all its children must also be terminated. A process that has terminated, but whose parent has not yet called wait() , is known as a zombie process (\u50f5\u5c38\u8fdb\u7a0b). if a parent did not invoke wait() and instead terminated, then leaving its child processes as orphan processes (\u5b64\u513f\u8fdb\u7a0b). Unix system may assign the init process as the new parent to orphan processes, and the init process periodically invokes wait() . Example A problem with a single process for a web browser is that if a web application in any tab crashes, the entire process \u2014\u2014 including all other tabs \u001f\u001f\u2014\u2014 crashes as well. Chrome web browser uses a multiprocess architecture \u2014\u2014 identifies three different types of processes: browser, renderers, plugins. see here in detail.","title":"Process termination"},{"location":"os/osc/ch3/#4-interprocess-communication","text":"Processes may be either independent processes (\u72ec\u7acb\u8fdb\u7a0b) or cooperating processes (\u534f\u540c\u8fdb\u7a0b). A process is independent if it does not share data with any other processes executing in the system. A process is cooperating if it can affect or be affected by the other processes executing in the system. Advantages of process cooperation: Information sharing Computation speedup Modularity Cooperating process require an interprocess communication (IPC\uff0c\u8fdb\u7a0b\u95f4\u901a\u4fe1) mechanism that will allow them to exchange data. There are two fundamental models of IPC: shared memory (\u5171\u4eab\u5185\u5b58): a region of memory is shared by cooperating process. Process can exchange information by reading and writing data to the shared region. Shared memory can be faster than message passing. message passing (\u6d88\u606f\u4f20\u9012)\uff1a communication takes place by means of messages exchanged between the cooperating processes. Message passing is useful for exchanging smaller amounts of data, because no conflicts need be avoided. Message passing is easier to implement in a distributed system than shared memory.","title":"4 Interprocess communication"},{"location":"os/osc/ch3/#5-ipc-in-shared-memory-system","text":"Let's consider the producer-consumer problem, which is a common paradigm for cooperating processes. A producer process produces information that is consumed by a consumer process. One solution to the producer-consumer problem uses shared memory. We generally think of a server as a producer and a client as a consumer. For example, a web server produces web content such as HTML files and images, which are consumed by the client web browser requesting the resource. Two types of buffers can be used. unbounded buffer (\u65e0\u754c\u7f13\u51b2): places no practical limit on the size of the buffer. bounded buffer (\u6709\u754c\u7f13\u51b2): assumes a fixed buffer size","title":"5 IPC in shared-memory system"},{"location":"os/osc/ch3/#6-ipc-in-message-passing-system","text":"A message-passing facility provides at least two operations: send(message) receive(message) If P and Q wish to communicate, they need to establish a communication link (\u901a\u4fe1\u8fde\u63a5) between them exchange messages via send/receive Here are several methods for logically implementing a communication link between processes: Direct or indirect communication \u76f4\u63a5/\u95f4\u63a5\u901a\u4fe1 Synchronous or asynchronous communication \u540c\u6b65/\u5f02\u6b65\u540c\u6b65 Automatic or explicit buffering \u81ea\u52a8/\u663e\u5f0f\u7f13\u51b2","title":"6 IPC in message-passing system"},{"location":"os/osc/ch3/#directindirect-communication","text":"Direct Communication Under direct communication , each process that wants to communicate must explicitly name the recipient or sender of the communication. send(P, message) - send a message to process P. receive(Q, message) - receive a message from process Q A communication link in this scheme has the following properties: A link is established automatically between every pair of processes that want to communicate. A link is associated with exactly two processes. Between each pair of processes, there exists exactly one link. Cons: limited modularity of the resulting process definitions. Changing the identifier of a process may necessitate examining all other process definitions. any such hard-coding techniques, are less desirable. Indirect Communication With indirect communication , the message are sent to and receive from mailboxes , or ports . send(A, message) - send a message to mailbox A receive(A, message) - receive a message from mailbox A A mailbox can be viewed abstractly as an object into which messages can be placed by processes and from which messages can be removed. Each mailbox has an unique identification. Two processes can communicate only if they have a shared mailbox. In this scheme, a communication link has the following properties: A link is established between a pair of processes only if both members of the pair have a shared mailbox. A link may be associated with more than two processes. Between each pair of communicating processes, a number of different links may exist, with each link corresponding to one mailbox. A mailbox may be owned either by a process or by the operating system. If the mailbox is owned by a process We distinguish between the owner (which can only receive messages through his mailbox) and the user (which can only send messages to the mailbox) Each mailbox has a unique owner. When a process that owns a mailbox terminates, the mailbox disappears. The process that creates a new mailbox is that mailbox's owner by default.","title":"Direct/Indirect communication"},{"location":"os/osc/ch3/#synchronization","text":"Message passing may be either blocking or nonblocking - also known as synchronous and asynchronous .","title":"Synchronization"},{"location":"os/osc/ch3/#buffering","text":"Messages exchanged by communicating processes reside in a temporary queue, whether communication is direct or indirect. Basically, it can be implemented in three ways: Zero capacity\uff08\u96f6\u5bb9\u91cf\uff09-- no buffering The link cannot have any messages waiting in it. The sender must block until the recipient receives the message. Bounded capacity\uff08\u6709\u754c\u5bb9\u91cf\uff09-- automatic buffering The queue has finite length n, at most n message can reside in it. The sender must block until space is available in the queue if the link is full. Unbounded capacity \uff08\u65e0\u754c\u5bb9\u91cf\uff09 -- automatic buffering Any number of messages can wait in it. The sender never blocks.","title":"Buffering"},{"location":"os/osc/ch3/#7-examples-of-ipc-systems","text":"","title":"7 Examples of IPC Systems"},{"location":"os/osc/ch3/#posix-shared-memory","text":"Here, we explore the POSIX API for shared memory. POSIX shared memory is organized using memory-mapped files (\u5185\u5b58\u6620\u5c04\u6587\u4ef6), which associate the region of shared memory with a file. A process must first create a shared-memory object using the shm_open() system call. fd = shm_open ( name , O_CREAT | O_RDWR , 0666 ); ftruncate ( fd , 4096 ); mmap ( 0 , SIZE , PROT_READ | PROT_WRITE , MAP_SHARED , fd , 0 ); A successful call to shm_open() returns an integer file descriptor for the shared-memory object. Once the object is established, the ftruncate() function is used to configure the size of the object in bytes. Finally, the mmap() function establishes a memory-mapped file containing the shared-memory object. It returns a pointer to the shared #include stdio.h #include stdlib.h #include unistd.h #include fcntl.h #include sys/shm.h #include sys/stat.h #include sys/mman.h int main () { const char * name = OS ; const int SIZE = 4096 ; int shm_fd ; void * ptr ; int i ; /* open the shared memory segment */ shm_fd = shm_open ( name , O_RDONLY , 0666 ); if ( shm_fd == - 1 ) { printf ( shared memory failed \\n ); exit ( - 1 ); } /* now map the shared memory segment in the address space of the process */ ptr = mmap ( 0 , SIZE , PROT_READ , MAP_SHARED , shm_fd , 0 ); if ( ptr == MAP_FAILED ) { printf ( Map failed \\n ); exit ( - 1 ); } /* now read from the shared memory region */ printf ( %s ,( char * ) ptr ); /* remove the shared memory segment */ if ( shm_unlink ( name ) == - 1 ) { printf ( Error removing %s \\n , name ); exit ( - 1 ); } return 0 ; }","title":"POSIX Shared Memory"},{"location":"os/osc/ch3/#mach-message-passing","text":"Mach was especially designed for distributed systems. Its kernel supports the creation and destruction of multiple tasks , which are similar to processes but have multiple threads of control and fewer associated resources. Messages are sent to, and received from, mailboxes, which are called ports in Mach. Ports are finite in size and unidirectional . For two-way communication, a message is sent to one port, and a response is sent to a separate reply port. Associated with each port is a collection of port rights , which identify the capabilities necessary for a task to interact with the port. Functions: mach_port_allocate() creates a new port and allocates space for its queue of messages. mach_msg() is the standard API for both sending and receiving messages. #include mach/mach.h struct message { mach_msg_header_t header ; int data ; }; mach_port_t client ; mach_port_t server ; /* Client Code */ struct message message ; // construct the header message . header . msgh_size = sizeof ( message ); message . header . msgh_remote_port = server ; message . header . msgh_local_port = client ; // send the message mach msg ( message . header , // message header MACH_SEND_MSG , // sending a message sizeof ( message ), // size of message sent 0 , // maximum size of received message - unnecessary MACH_PORT_NULL , // name of receive port - unnecessary MACH_MSG_TIMEOUT_NONE , // no time outs MACH PORT NULL // no notify port ); /* Server Code */ struct message message ; // receive the message mach_msg ( message . header , // message header MACH_RCV_MSG , // sending a message 0, // size of message sent sizeof ( message ), // maximum size of received message server , // name of receive port MACH_MSG_TIMEOUT_NONE , // no time outs MACH_PORT_NULL // no notify port );","title":"Mach Message Passing"},{"location":"os/osc/ch3/#pipes","text":"A pipe acts as a conduit allowing two processes to communicate. Pipes were one of the first IPC mechanisms in early UNIX systems. There are two common types of pipes used on both UNIX and Windows systems: ordinary pipes and named pipes .","title":"Pipes"},{"location":"os/osc/ch3/#ordinary-pipes","text":"Ordinary pipes allow two processes to communicate in standard producer-consumer fashion: the producer writes to one end of the pipe (the write end ) and the consumer reads from the other end (the read end ). Ordinary pipes are unidirectional , allowing only one-way communication. Function pipe(int fd[]) constructs an ordinary pipe, where fd is a file descriptor. UNIX treats a pipe as a special type of file . Pipes can be accessed using ordinary read() and write() system calls. Ordinary pipes exit only while the processes are communicating with each other. int pipe(int pipefd[2]) creates a pipe, a unidirectional data channel that can be used for interprocess communication. The array pipefd is used to return two file descriptors referring to the ends of the pipe. pipefd[0] refers to the read end of the pipe. pipefd[1] refers to the write end of the pipe. Data written to the write end of the pipe is buffered by the kernel until it is read from the read end of the pipe. [ Man Page - PIPE ] #include sys/types.h #include stdio.h #include string.h #include unistd.h #define BUFFER_SIZE 25 #define READ_END 0 #define WRITE_END 1 int main ( void ) { char write_msg [ BUFFER_SIZE ] = Greetings ; char read_msg [ BUFFER_SIZE ]; int pipefd [ 2 ]; pid_t pid ; /* create the pipe */ if ( pipe ( pipefd ) == - 1 ){ fprintf ( stderr , Pipe failed ); return 1 ; } /* fork a child process */ pid = fork (); if ( pid 0 ){ /* parent process */ close ( pipefd [ READ_END ]); /* close the unused end of the pipe */ write ( pipefd [ WRITE_END ], write_msg , strlen ( write_msg ) + 1 ); /* write to the pipe */ close ( pipefd [ WRITE_END ]); /* close the write end of the pipe */ } else if ( pid == 0 ){ /* child process */ close ( pipefd [ WRITE_END ]); /* close the unused end of the pipe */ read ( pipefd [ READ_END ], read_msg , BUFFER_SIZE ); /* read from the pipe */ printf ( read: %s \\n , read_msg ); close ( pipefd [ READ_END ]); /* close the read end of the pipe */ } return 0 ; }","title":"Ordinary pipes"},{"location":"os/osc/ch3/#named-pipes","text":"Named pipes (\u547d\u540d\u7ba1\u9053) can be bidirectional , and no parent-child relationship is required. Named pipes are referred to as FIFOs in UNIX system. Once created, they appear as typical files in the file system. The communicating processes for named pipes must reside on the same machine. A FIFO is created with the mkfifo() system call and manipulated with the ordinary open() , read() , write() , and close system calls.\uff1a int mkfifo ( const char * pathname , mode_t mode ); mkfifo() makes a FIFO special file with name pathname . mode specifies the FIFO's permissions. It is modified by the process's umask in the usual way: the permissions of the created file are ( mode ~umask ). [ Man Page - mkfifo ] The program fifowrite.c is as follows. #include sys/types.h #include stdlib.h #include stdio.h #include fcntl.h #include limits.h int main () { const char * fifo_name = /tmp/my_fifo ; int pipe_fd = - 1 ; int data_fd = - 1 ; int res = 0 ; const int open_mode = O_WRONLY ; char buffer [ PIPE_BUF + 1 ]; if ( access ( fifo_name , F_OK ) ==- 1 ) { res = mkfifo ( fifo_name , 0777 ); if ( res != 0 ) { fprintf ( stderr , could not create fifo \\n ); exit ( EXIT_FAILURE ); } } printf ( process %d opening fifo O_WRONLY \\n , getpid ()); pipe_fd = open ( fifo_name , open_mode ); data_fd = open ( data.txt , O_RDONLY ); printf ( process %d result %d \\n , getpid (), pipe_fd ); if ( pipe_fd !=- 1 ) { int bytes_read = 0 ; bytes_read = read ( data_fd , buffer , PIPE_BUF ); while ( bytes_read 0 ) { res = write ( pipe_fd , buffer , bytes_read ); if ( res ==- 1 ) { fprintf ( stderr , write error \\n ); exit ( EXIT_FAILURE ); } bytes_read = read ( data_fd , buffer , PIPE_BUF ); buffer [ bytes_read ] = \\0 ; } close ( pipe_fd ); close ( data_fd ); } else { exit ( EXIT_FAILURE ); } printf ( process %d finished. \\n , getpid ()); exit ( EXIT_SUCCESS ); } the program fiforead.c is as follows. #include stdlib.h #include stdio.h #include sys/types.h #include fcntl.h #include limits.h int main () { const char * fifo_name = /tmp/my_fifo ; int pipe_fd = - 1 ; int data_fd = - 1 ; int res = 0 ; int open_mode = O_RDONLY ; char buffer [ PIPE_BUF + 1 ]; int bytes_read = 0 ; int bytes_write = 0 ; memset ( buffer , \\0 , sizeof ( buffer )); printf ( process %d opening FIFO O_RDONLY \\n , getpid ()); pipe_fd = open ( fifo_name , open_mode ); data_fd = open ( dataformfifo.txt , O_WRONLY | O_CREAT , 0644 ); printf ( process %d result %d \\n , getpid (), pipe_fd ); if ( pipe_fd !=- 1 ) { do { res = read ( pipe_fd , buffer , PIPE_BUF ); bytes_write = write ( data_fd , buffer , res ); bytes_read += res ; } while ( res 0 ); close ( pipe_fd ); close ( data_fd ); } else { exit ( EXIT_FAILURE ); } printf ( process %d finished,%d bytes read \\n , getpid (), bytes_read ); exit ( EXIT_SUCCESS ); }","title":"Named pipes"},{"location":"os/osc/ch3/#8-communication-in-client-server-system","text":"In this section, we explore two other strategies for communication in client-server system: sockets and remote procedure calls (RPCs)","title":"8 Communication in Client-Server system"},{"location":"os/osc/ch3/#sockets","text":"A socket (\u5957\u63a5\u5b57) is defined as an endpoint for communication. A socket is identified by an IP address concatenated with a port number . Communication using sockets\uff1a Servers implementing specific services (such as SSH, FTP, and HTTP) listen to well-known ports. Once a request is received, the server accepts a connection from the client socket to complete the connection. Java provides three different types of sockets. Connection-oriented(TCP) sockets are implemented with the Socket class. The example describes a data server that uses connection-oriented TCP sockets. import java.net.* ; import java.io.* ; public class DateClient { public static void main ( String [] args ) { try { // this could be changed to an IP name or address other than the localhost. // The IP address 127.0.0.1 is a special IP address known as the loopback. // When a computer refers to IP address 127.0.0.1, it is referring to itself. // This mechanism allows a client and server on the same host to communicate using the TCP/IP protocol. Socket sock = new Socket ( 127.0.0.1 , 6013 ); InputStream in = sock . getInputStream (); BufferedReader bin = new BufferedReader ( new InputStreamReader ( in )); String line ; while ( ( line = bin . readLine ()) != null ) System . out . println ( line ); sock . close (); } catch ( IOException ioe ) { System . err . println ( ioe ); } } } public class DateServer { public static void main ( String [] args ) { try { ServerSocket sock = new ServerSocket ( 6013 ); // now listen for connections while ( true ) { Socket client = sock . accept (); // we have a connection PrintWriter pout = new PrintWriter ( client . getOutputStream (), true ); // write the Date to the socket pout . println ( new java . util . Date (). toString ()); // close the socket and resume listening for more connections client . close (); } } catch ( IOException ioe ) { System . err . println ( ioe ); } } } Communication using sockets\u2014although common and efficient \u2014\u2014 is considered a low-level form of communication between distributed processes. One reason is that sockets allow only an unstructured stream of bytes to be exchanged between the communicating threads. It is the responsibility of the client or server application to impose a structure on the data.","title":"Sockets"},{"location":"os/osc/ch3/#remote-procedure-calls","text":"Remote Procedure Call (\u8fdc\u7a0b\u8fc7\u7a0b\u8c03\u7528), One of the most common forms of remote service, allows programs on different machines to interact using simple procedure call/return semantics, just as if the two programs were in the same computer. The messages exchanged in RPC communication are well structured and are thus no longer just packets of data. Each message is addressed to an RPC daemon listening to a port on the remote system, and each contains an identifier specifying the function to execute and the parameters to pass to that function. The RPC system hides the details that allow communication to take place by providing a stub (\u5b58\u6839) on each side. Typically, a separate stub exists for each separate remote procedure. When the client invokes a remote procedure, the RPC system calls the appropriate stub, passing it the parameters provided to the remote procedure. This stub locates the port on the server and marshals (\u7f16\u7ec4) the parameters. The stub then transmits a message to the server using message passing. A similar stub on the server side receives this message and invokes the procedure on the server. If necessary, return values are passed back to the client using the same technique. RPC hides all the network code into the stub procedures. This prevents the application programs, the client and the server, from having to worry about details such as sockets, network byte order, and the like.","title":"Remote procedure calls"},{"location":"os/osc/ch4/","text":"Operating System Concepts 4 - Threads Concurrency 1 Overview A thread is a basic unit of CPU utilization; it comprises a thread ID, a program counter, a register set, and a stack. \u7ebf\u7a0b\u662f\u4e00\u4e2aCPU\u5229\u7528\u7684\u57fa\u672c\u5355\u5143\uff0c\u5b83\u7531\u7ebf\u7a0bID\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u5bc4\u5b58\u5668\u96c6\u5408\u548c\u6808\u7ec4\u6210\u3002 A traditional process has a single thread of control. If a process has multiple threads of control , it can perform more than one task at a time. \u4e00\u4e2a\u4f20\u7edf\u7684\u8fdb\u7a0b\u53ea\u6709\u5355\u4e2a\u63a7\u5236\u7ebf\u7a0b\uff0c\u5982\u679c\u8fdb\u7a0b\u6709\u591a\u4e2a\u63a7\u5236\u7ebf\u7a0b\uff0c\u90a3\u4e48\u5b83\u80fd\u4e00\u6b21\u5904\u7406\u591a\u4e2a\u4efb\u52a1\u3002 The figure below illustrates the difference between a traditional single-threaded process and a multithreaded process. Motivation Process creation is time consuming and resource intensive . It is generally more efficient to use one process that contains multiple threads. Benefits The benefits of multithreaded programming can be broken down into four major categories: Responsiveness It allows a program to continue running even if part of it is blocked or is performing a lengthy operation, thereby increasing responsiveness to the user. \u54cd\u5e94\u5ea6\u9ad8\uff1a\u5373\u4f7f\u7a0b\u5e8f\u90e8\u5206\u963b\u585e\u6216\u6267\u884c\u8f83\u5197\u957f\u64cd\u4f5c\uff0c\u8be5\u7a0b\u5e8f\u4ecd\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u4ece\u800c\u589e\u52a0\u4e86\u5bf9\u7528\u6237\u7684\u76f8\u5e94\u7a0b\u5ea6\u3002 Resource sharing Processes can share resources only through techniques such as shared memory and message. Such techniques must be explicitly arranged by the programmer. Threads share the memory and the resources of the process to which they belong by default. \u8d44\u6e90\u5171\u4eab\uff1a\u7ebf\u7a0b\u9ed8\u8ba4\u5171\u4eab\u5b83\u4eec\u6240\u5c5e\u8fdb\u7a0b\u7684\u5185\u5b58\u548c\u8d44\u6e90\u3002\u4ee3\u7801\u548c\u6570\u636e\u5171\u4eab\u7684\u4f18\u70b9\u662f\u5b83\u5141\u8bb8\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5728\u540c\u4e00\u5730\u5740\u7a7a\u95f4\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u6d3b\u52a8\u7ebf\u7a0b\u3002 Economy Allocating memory and resources for process creation is costly. Because threads share the resources of the process to which they belong, it is more economical to create and context-switch threads. \u7ecf\u6d4e\uff1a\u8fdb\u7a0b\u521b\u5efa\u6240\u9700\u8981\u7684\u5185\u5b58\u548c\u8d44\u6e90\u7684\u5206\u914d\u6bd4\u8f83\u6602\u8d35\u3002\u7531\u4e8e\u7ebf\u7a0b\u80fd\u5171\u4eab\u5b83\u4eec\u6240\u5c5e\u8fdb\u7a0b\u7684\u8d44\u6e90\uff0c\u6240\u4ee5\u521b\u5efa\u548c\u5207\u6362\u7ebf\u7a0b\u4f1a\u66f4\u4e3a\u7ecf\u6d4e\u3002 Scalability The benefits of multithreading can be even greater in a multiprocessor architecture, where threads may be running in parallel on different processing cores. \u53ef\u6269\u5c55\u6027: \u591a\u7ebf\u7a0b\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u80fd\u5145\u5206\u4f7f\u7528\u591a\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u3002\u4ee5\u4fbf\u6bcf\u4e2a\u8fdb\u7a0b\u80fd\u5e76\u884c\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u5904\u7406\u5668\u4e0a\u3002 2 Multicore Programming On a system with a single computing core, concurrency merely means that the execution of the threads will be interleaved over time, because the processing core is capable of executing only one thread at a time. On a system with multiple cores, however, concurrency means that some threads can run in parallel , because the system can assign a separate thread to each core. Note Concurrency v.s. Parallelism Concurrency: supports more than one task by allowing all the tasks to make progress. Parallelism: perform more than one task simultaneously. Programming Challenges Identifying tasks . This involves examining applications to find areas that can be divided into separate, concurrent tasks. Balance . Programmer must ensure that the tasks perform equal work of equal value. Data splitting . The data accessed and manipulated by the tasks must be divided to run on separate cores. Data dependency . The data accessed by the tasks must be examined for dependencies between two or more tasks. Testing and debugging . Testing and debugging such concurrent programs is inherently more difficult than testing and debugging single-threaded applications. Types of Parallelism In general, there are two types of parallelism: data parallelism and task parallelism. Data parallelism focuses on distributing subsets of the same data across multiple computing cores and performing the same operation on each core. Task parallelism involves distributing not data but tasks (threads) across multiple computing cores. However, data and task parallelism are not mutually exclusive, and an application may in fact use a hybrid of these two strategies. 3 Multithreading Models Support for threads may be provided either at the user level, for user threads , or by the kernel, for kernel threads . User threads are supported above the kernel and are managed without kernel support. Kernel threads are supported and managed directly by the operating system. \u6709\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u63d0\u4f9b\u7ebf\u7a0b\u652f\u6301\uff1a\u7528\u6237\u5c42\u7684\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u5185\u6838\u5c42\u7684\u5185\u6838\u7ea7\u7ebf\u7a0b\u3002\u7528\u6237\u7ea7\u7ebf\u7a0b\u53d7\u5185\u6838\u652f\u6301\uff0c\u800c\u65e0\u9700\u5185\u6838\u7ba1\u7406\uff1b\u800c\u5185\u6838\u7ea7\u7ebf\u7a0b\u7531\u64cd\u4f5c\u7cfb\u7edf\u76f4\u63a5\u652f\u6301\u548c\u7ba1\u7406\u3002\u4e8b\u5b9e\u4e0a\u6240\u6709\u5f53\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u652f\u6301\u5185\u6838\u7ea7\u7ebf\u7a0b\u3002 Ultimately, a relationship must exist between user threads and kernel threads. There are three common ways of establishing such a relationship: the many-to-one model, the one-to-one model, and the many-to-many model. \u5728\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u5185\u6838\u7ea7\u7ebf\u7a0b\u4e4b\u95f4\u5fc5\u7136\u5b58\u5728\u4e00\u79cd\u5173\u7cfb\u3002\u6709\u4e09\u79cd\u666e\u904d\u5efa\u7acb\u8fd9\u79cd\u5173\u7cfb\u7684\u65b9\u6cd5\uff1a\u591a\u5bf9\u4e00\u6a21\u578b\u3001\u4e00\u5bf9\u4e00\u6a21\u578b\u3001\u591a\u5bf9\u591a\u6a21\u578b\u3002 Many-to-One Model The many-to-one model (\u591a\u5bf9\u4e00\u6a21\u578b) maps many user-level threads to one kernel thread. \u591a\u5bf9\u4e00\u6a21\u578b\u5c06\u8bb8\u591a\u7528\u6237\u7ea7\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002 Thread management is done by the thread library in user space, so it is efficient. \u7ebf\u7a0b\u7ba1\u7406\u7531\u7ebf\u7a0b\u5e93\u5728\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u7684\uff0c\u56e0\u800c\u6548\u7387\u6bd4\u8f83\u9ad8\u3002 Also, because only one thread can access the kernel at a time, multiple threads are unable to run in parallel on multicore systems. \u56e0\u4e3a\u4efb\u610f\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8bbf\u95ee\u5185\u6838\uff0c\u591a\u4e2a\u7ebf\u7a0b\u4e0d\u80fd\u5e76\u884c\u8fd0\u884c\u5728\u591a\u5904\u7406\u5668\u4e0a\u3002 One-to-One Model The one-to-one model (\u4e00\u5bf9\u4e00\u6a21\u578b) maps each user thread to a kernel thread. \u4e00\u5bf9\u4e00\u6a21\u578b\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002 It provides more concurrency by allowing another thread to run when a thread makes a blocking system call. \u8be5\u6a21\u578b\u5728\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u80fd\u5141\u8bb8\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\uff0c\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7684\u5e76\u53d1\u6027\u3002 It also allows multiple threads to run in parallel on multiprocessors. \u5b83\u4e5f\u5141\u8bb8\u591a\u4e2a\u7ebf\u7a0b\u80fd\u5e76\u884c\u8fd0\u884c\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u3002 The only drawback to this model is that creating a user thread requires creating the corresponding kernel thread, and a large number of kernel threads may burden the performance of a system . \u8fd9\u79cd\u6a21\u578b\u7684\u552f\u4e00\u7f3a\u70b9\u662f\u6bcf\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u7ebf\u7a0b\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a\u76f8\u5e94\u7684\u5185\u6838\u7ebf\u7a0b, \u5927\u91cf\u5185\u6838\u7ebf\u7a0b\u4f1a\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\u3002 Many-to-Many Model The many-to-many model (\u591a\u5bf9\u591a\u6a21\u578b) multiplexes many user-level threads to a smaller or equal number of kernel threads. \u591a\u5bf9\u591a\u6a21\u578b\u591a\u8def\u590d\u7528\u4e86\u8bb8\u591a\u7528\u6237\u7ebf\u7a0b\u5230\u540c\u6837\u6570\u91cf\u6216\u66f4\u5c0f\u6570\u91cf\u7684\u5185\u6838\u7ebf\u7a0b\u4e0a\u3002 Developers can create as many user threads as necessary. \u5f00\u53d1\u4eba\u5458\u53ef\u521b\u5efa\u4efb\u610f\u591a\u7684\u7528\u6237\u7ebf\u7a0b\u3002 The corresponding kernel threads can run in parallel on a multiprocessor. \u76f8\u5e94\u5185\u6838\u7ebf\u7a0b\u80fd\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u5e76\u53d1\u6267\u884c\u3002 Also, when a thread performs a blocking system call, the kernel can schedule another thread for execution. \u800c\u4e14\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5185\u6838\u80fd\u8c03\u5ea6\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u3002 In practice it is difficult to implement . \u5b9e\u9645\u4e0a\u96be\u4ee5\u5b9e\u65bd\u3002 Note Most operating systems now use the one-to-one model. User/Kernel-Level threads ref: Scheduler Activations (1) User-Level Threads (\u7528\u6237\u7ea7\u7ebf\u7a0b) Advantages: Common operations can be implemented efficiently Interface can be tailored to application needs Issues: A blocking system call blocks all user-level threads. \u963b\u585e\u7cfb\u7edf\u8c03\u7528\u80fd\u591f\u963b\u585e\u6240\u6709\u7528\u6237\u7ea7\u7ebf\u7a0b\u3002 Asynchronous system calls can provide partial work-around. \u975e\u540c\u6b65\u7cfb\u7edf\u8c03\u7528\u80fd\u63d0\u4f9b\u90e8\u5206work-around. view the definition of work-around here A page fault blocks all user-level threads. \u7f3a\u9875\u5f02\u5e38\u963b\u585e\u6240\u6709\u7528\u6237\u7ea7\u7ebf\u7a0b\u3002 Matching threads to CPUs in a multiprocessor is hard\uff1a No knowledge about the numbers of CPUs available to address space No knowledge when a thread blocks (2) Kernel-Level Threads (\u5185\u6838\u7ea7\u7ebf\u7a0b) Primary advantage * Blocking system calls and page faults handled correctly Issues Cost of performing thread operations Create, exit, lock, signal, wait all require user/kernel crossings NOTE : The term virtual processor is often used instead of kernel thread. 4 Thread Libraries A thread library (\u7ebf\u7a0b\u5e93) provides the programmer with an API for creating and managing threads. Pthreads Pthreads , the threads extension of the POSIX standard, may be provided as either a user-level or a kernel-level library. Pthread\u4f5c\u4e3aPOSIX\u6807\u51c6\u6269\u5c55\uff0c\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u7ea7\u6216\u5185\u6838\u7ea7\u7684\u5e93\u3002 This is a specification for thread behavior, not an implementation . Operating-system designers may implement the specification in any way they wish. pthread_t tid : declares the identifier for the thread pthread attr_t attr : declares the attributes for the thread pthread_attr_init( attr) : initialize thread attributes object pthread_create() : create a new thread pthread_join() : join with a terminated thread pthread_exit() : terminate calling thread Note: Compile and link with -pthread . pthread \u8be6\u7ec6\u7528\u6cd5\u548c\u5b9e\u4f8b, \u89c1 POSIX thread (pthread) libraries Java Threads The Java thread API allows threads to be created and managed directly in Java programs. However, because in most instances the JVM is running on top of a host operating system, the Java thread API is generally implemented using a thread library available on the host system. This means that on Windows systems, Java threads are typically implemented using the Windows API; UNIX, Linux, and macOS systems typically use Pthreads. One approach of creating thread is to define a class that implements the Runnable interface. The code in the run() method of a class that implements Runnable is what executes in a separate thread. class Job implements Runnable { public void run () { System . out . println ( I am a thread. ); } Thread creation in Java involves creating a Thread object and passing it an instance of a class that implements Runnable , followed by invoking the start() method on the Thread object. Thread worker = new Thread ( new Job ()); worker . start (); Java Executor Framework However, beginning with Version 1.5 and its API, Java introduced several new concurrency features that provide developers with much greater control over thread creation and communication. Executor is an object that executes submitted Runnable tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads. [ Java Doc ] Rather than explicitly creating Thread objects, thread creation is instead organized around the Executor interface: public interface Executor { void execute ( Runnable command ); } Classes implementing this interface must define the execute() method, which is passed a Runnable object. Executor service = new Executor ; service . execute ( new Job ()); The advantage of this approach is that it not only divides thread creation from execution but also provides a mechanism for communication between concurrent tasks. 5 Implicit threading Implicit threading (\u9690\u5f0f\u7ebf\u7a0b): Transfers the creation and management of threading from application developers to compilers and run-time libraries. One way to address difficulties and better support the design of concurrent and parallel applications. The advantage of this approach is that developers only need to identify parallel tasks , and the libraries determine the specific details of thread creation and management. In this section, we explore four alternative approaches to designing applications that can take advantage of multicore processors through implicit threading: Thread Pools Fork Join OpemMP Grand Central Dispatch Thread Pools Two main issues exist: The thread will be discarded once it has completed its work. \u7ebf\u7a0b\u5728\u5b8c\u6210\u5de5\u4f5c\u4e4b\u540e\u5c31\u8981\u88ab\u4e22\u5f03 Unlimited threads could exhaust system resources. \u65e0\u9650\u5236\u7684\u7ebf\u7a0b\u4f1a\u8017\u5c3d\u7cfb\u7edf\u8d44\u6e90 Solution - thread pool (\u7ebf\u7a0b\u6c60) It creates a number of threads at start-up, and places them into a pool, where they sit and wait for work. When a server receives a request, it submits the request to the thread pool and resumes waiting for additional requests. If there is an available thread in the pool, it is awakened, and the request is serviced immediately. If the pool contains no available thread, the task is queued until one becomes free. \u7ebf\u7a0b\u6c60\u7684\u601d\u60f3\u662f\u5728\u8fdb\u7a0b\u5f00\u59cb\u65f6\u521b\u5efa\u4e00\u5b9a\u6570\u91cf\u7684\u7ebf\u7a0b\uff0c\u5e76\u653e\u5165\u5230\u6c60\u4e2d\u4ee5\u7b49\u5f85\u5de5\u4f5c\u3002\u5f53\u670d\u52a1\u5668\u6536\u5230\u8bf7\u6c42\u65f6\uff0c\u5b83\u4f1a\u5524\u9192\u7ebf\u7a0b\u6c60\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u5c06\u8981\u5904\u7406\u7684\u8bf7\u6c42\u4f20\u9012\u7ed9\u5b83\uff0c\u4e00\u65e6\u7ebf\u7a0b\u5b8c\u6210\u4e86\u670d\u52a1\uff0c\u5b83\u4f1a\u8fd4\u56de\u5230\u6c60\u4e2d\u5728\u7b49\u5f85\u5de5\u4f5c\u3002\u5982\u679c\u6c60\u4e2d\u6ca1\u6709\u53ef\u7528\u7684\u7ebf\u7a0b\uff0c\u90a3\u4e48\u670d\u52a1\u5668\u4f1a\u4e00\u76f4\u7b49\u5f85\u76f4\u5230\u6709\u7a7a\u7ebf\u7a0b\u4e3a\u6b62\u3002 Thread pools offer these benefits: Servicing a request with an existing thread is often faster than waiting to create a thread. \u901a\u5e38\u7528\u73b0\u6709\u7ebf\u7a0b\u5904\u7406\u8bf7\u6c42\u8981\u6bd4\u7b49\u5f85\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u8981\u5feb. A thread pool limits the number of threads that exist at any one point. \u7ebf\u7a0b\u6c60\u9650\u5236\u4e86\u5728\u4efb\u4f55\u65f6\u5019\u53ef\u7528\u7ebf\u7a0b\u7684\u6570\u91cf. Separating the task to be performed from the mechanics of creating the task allows us to use different strategies for running the task. Java Thread Pool The java.util.concurrent package includes an API for several varieties of thread-pool architectures. Here, we focus on the following three models: Single thread executor \u2014 newSingleThreadExecutor() \u2014 creates a pool of size 1. Fixed thread executor \u2014 newFixedThreadPool(int size) \u2014 creates a thread pool with a specified number of threads. Cached thread executor \u2014 newCachedThreadPool() \u2014 creates an unbounded thread pool, reusing threads in many instances. Each of these factory methods creates and returns an object instance that implements the ExecutorService interface. ExecutorService extends the Executor interface, allowing us to invoke the execute() method on this object. //It creates a cached thread pool and submits tasks to be executed by a thread in the pool using the execute() method. // When the shutdown() method is invoked, the thread pool rejects additional tasks and shuts down once all existing tasks have completed execution. import java.util.concurrent.* ; public class ThreadPoolExample { public static void main ( String [] args ) { int numTasks = Integer . parseInt ( args [ 0 ]. trim ()); /* Create the thread pool */ ExecutorService pool = Executors . newCachedThreadPool (); /* Run each task using a thread in the pool */ for ( int i = 0 ; i numTasks ; i ++) pool . execute ( new Task ()); /* Shut down the pool once all threads have completed */ pool . shutdown (); } Grand Central Dispatch Grand Central Dispatch (GCD) is a technology for Apple's Mac OS X and iOS operating systems. It is a combination of extensions to the C languages, an API, and a run-time library that allows application developers identify sections of code to run in parallel. GCD identifies two types of dispatch queues: serial and concurrent. 6 Threading Issues Light Weight Process Many systems implementing either the many-to-many or the two-level model place an intermediate data structure between the user and kernel threads. This data structure\u2014typically known as a lightweight process \uff08\u8f7b\u91cf\u7ea7\u8fdb\u7a0b\uff09, or LWP . To the user-thread library, the LWP appears to be a virtual processor on which the application can schedule a user thread to run. Each LWP is attached to a kernel thread. If a kernel thread blocks, the LWP blocks as well. Up the chain, the user-level thread attached to the LWP also blocks. where K denotes kernel threads and P denotes Process. \u4e0b\u9762\u662f\u4e00\u4e2a\u6d4b\u8bd5LINUX\u4e2dLWP\u7684C\u7a0b\u5e8f /* filename: test_LWP.c */ #include stdlib.h #include pthread.h #include stdio.h #include unistd.h int * thread ( void * arg ) { pthread_t tid ; // the ID of a thread tid = pthread_self (); //get the current thread s id printf ( The ID of new thread is =%lu \\n , tid ); sleep ( 500 ); //sleep for 500 seconds return NULL ; } int main () { pthread_t tid ; printf ( The ID of main thread is %lu \\n , pthread_self ()); //get the main thread s id if ( pthread_create ( tid , NULL , ( void * ) thread , NULL ) != 0 ) { printf ( Thread creation failed \\n ); exit ( 1 ); } printf ( my Id is %lu, new thread ID is %lu \\n , pthread_self (), tid ); sleep ( 1000 ); return 0 ; } \u8fd0\u884c ps -efL \u53ef\u4ee5\u770b\u5230, test_LWP \u8fdb\u7a0b(PID=1953)\u6709\u4e24\u4e2aLWP\uff0c\u5373NLWP(number of light weight process)=2\u3002 UID PID PPID LWP C NLWP STIME TTY TIME CMD vagrant 1953 1644 1953 0 2 04:16 pts/0 00:00:00 ./test_LWP vagrant 1953 1644 1954 0 2 04:16 pts/0 00:00:00 ./test_LWP vagrant 2028 1839 2028 0 1 04:18 pts/1 00:00:00 ps -efL Scheduler activation Problems : \u5185\u6838\u7ebf\u7a0b\u5728\u5404\u65b9\u9762\u90fd\u6bd4\u8f83\u7075\u6d3b\uff0c\u4f46\u662f\u6027\u80fd\u4e0d\u9ad8\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u8bf7\u6c42\u5728\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u7684\u4f20\u9012\u3002\u90a3\u4e48\u5982\u4f55\u5728\u62e5\u6709\u5185\u6838\u7a7a\u95f4\u7ebf\u7a0b\u7684\u7075\u6d3b\u6027\u7684\u540c\u65f6\u53c8\u63d0\u9ad8\u6027\u80fd\u5462? Solution : Scheduler activation \uff08\u8c03\u5ea6\u5668\u6fc0\u6d3b\uff09are a threading mechanism that, when implemented in an operating system's process scheduler, provide kernel-level thread functionality with user-level thread flexibility and performance [ ref ]. It works as follows: The kernel provides an application with a set of virtual processors (LWPs), and the application can schedule user threads onto an available virtual processor. Furthermore, the kernel must inform an application about certain events. This procedure is known as an upcall (\u5411\u4e0a\u8c03\u7528). Upcalls are handled by the thread library with an upcall handler, and upcall handlers must run on a virtual processor. While the user threading library will schedule user threads, the kernel will schedule the underlying LWPs. Example [ ref ]: Let\u2019s study an example of how scheduler activations can be used. The kernel has allocated one kernel thread (1) to a process with three user-level threads (2). The three user level threads take turn executing on the single kernel-level thread. (3) The executing thread makes a blocking system call . (4) And the the kernel blocks the calling user-level thread and the kernel-level thread used to execute the user-level thread . (5) Scheduler activation: the kernel decides to allocate a new kernel-level thread to the process . (6) Upcall: the kernel notifies the user-level thread manager which user-level thread that is now blocked and that a new kernel-level thread is available. (7) The user-level thread manager move the other threads to the new kernel thread and resumes one of the ready threads.","title":"Chapter 4: Threads and Concurrency"},{"location":"os/osc/ch4/#operating-system-concepts-4-threads-concurrency","text":"","title":"Operating System Concepts 4 - Threads &amp; Concurrency"},{"location":"os/osc/ch4/#1-overview","text":"A thread is a basic unit of CPU utilization; it comprises a thread ID, a program counter, a register set, and a stack. \u7ebf\u7a0b\u662f\u4e00\u4e2aCPU\u5229\u7528\u7684\u57fa\u672c\u5355\u5143\uff0c\u5b83\u7531\u7ebf\u7a0bID\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u3001\u5bc4\u5b58\u5668\u96c6\u5408\u548c\u6808\u7ec4\u6210\u3002 A traditional process has a single thread of control. If a process has multiple threads of control , it can perform more than one task at a time. \u4e00\u4e2a\u4f20\u7edf\u7684\u8fdb\u7a0b\u53ea\u6709\u5355\u4e2a\u63a7\u5236\u7ebf\u7a0b\uff0c\u5982\u679c\u8fdb\u7a0b\u6709\u591a\u4e2a\u63a7\u5236\u7ebf\u7a0b\uff0c\u90a3\u4e48\u5b83\u80fd\u4e00\u6b21\u5904\u7406\u591a\u4e2a\u4efb\u52a1\u3002 The figure below illustrates the difference between a traditional single-threaded process and a multithreaded process.","title":"1 Overview"},{"location":"os/osc/ch4/#motivation","text":"Process creation is time consuming and resource intensive . It is generally more efficient to use one process that contains multiple threads.","title":"Motivation"},{"location":"os/osc/ch4/#benefits","text":"The benefits of multithreaded programming can be broken down into four major categories: Responsiveness It allows a program to continue running even if part of it is blocked or is performing a lengthy operation, thereby increasing responsiveness to the user. \u54cd\u5e94\u5ea6\u9ad8\uff1a\u5373\u4f7f\u7a0b\u5e8f\u90e8\u5206\u963b\u585e\u6216\u6267\u884c\u8f83\u5197\u957f\u64cd\u4f5c\uff0c\u8be5\u7a0b\u5e8f\u4ecd\u80fd\u7ee7\u7eed\u6267\u884c\uff0c\u4ece\u800c\u589e\u52a0\u4e86\u5bf9\u7528\u6237\u7684\u76f8\u5e94\u7a0b\u5ea6\u3002 Resource sharing Processes can share resources only through techniques such as shared memory and message. Such techniques must be explicitly arranged by the programmer. Threads share the memory and the resources of the process to which they belong by default. \u8d44\u6e90\u5171\u4eab\uff1a\u7ebf\u7a0b\u9ed8\u8ba4\u5171\u4eab\u5b83\u4eec\u6240\u5c5e\u8fdb\u7a0b\u7684\u5185\u5b58\u548c\u8d44\u6e90\u3002\u4ee3\u7801\u548c\u6570\u636e\u5171\u4eab\u7684\u4f18\u70b9\u662f\u5b83\u5141\u8bb8\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5728\u540c\u4e00\u5730\u5740\u7a7a\u95f4\u6709\u591a\u4e2a\u4e0d\u540c\u7684\u6d3b\u52a8\u7ebf\u7a0b\u3002 Economy Allocating memory and resources for process creation is costly. Because threads share the resources of the process to which they belong, it is more economical to create and context-switch threads. \u7ecf\u6d4e\uff1a\u8fdb\u7a0b\u521b\u5efa\u6240\u9700\u8981\u7684\u5185\u5b58\u548c\u8d44\u6e90\u7684\u5206\u914d\u6bd4\u8f83\u6602\u8d35\u3002\u7531\u4e8e\u7ebf\u7a0b\u80fd\u5171\u4eab\u5b83\u4eec\u6240\u5c5e\u8fdb\u7a0b\u7684\u8d44\u6e90\uff0c\u6240\u4ee5\u521b\u5efa\u548c\u5207\u6362\u7ebf\u7a0b\u4f1a\u66f4\u4e3a\u7ecf\u6d4e\u3002 Scalability The benefits of multithreading can be even greater in a multiprocessor architecture, where threads may be running in parallel on different processing cores. \u53ef\u6269\u5c55\u6027: \u591a\u7ebf\u7a0b\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u80fd\u5145\u5206\u4f7f\u7528\u591a\u5904\u7406\u5668\u4f53\u7cfb\u7ed3\u6784\u3002\u4ee5\u4fbf\u6bcf\u4e2a\u8fdb\u7a0b\u80fd\u5e76\u884c\u8fd0\u884c\u5728\u4e0d\u540c\u7684\u5904\u7406\u5668\u4e0a\u3002","title":"Benefits"},{"location":"os/osc/ch4/#2-multicore-programming","text":"On a system with a single computing core, concurrency merely means that the execution of the threads will be interleaved over time, because the processing core is capable of executing only one thread at a time. On a system with multiple cores, however, concurrency means that some threads can run in parallel , because the system can assign a separate thread to each core. Note Concurrency v.s. Parallelism Concurrency: supports more than one task by allowing all the tasks to make progress. Parallelism: perform more than one task simultaneously.","title":"2 Multicore Programming"},{"location":"os/osc/ch4/#programming-challenges","text":"Identifying tasks . This involves examining applications to find areas that can be divided into separate, concurrent tasks. Balance . Programmer must ensure that the tasks perform equal work of equal value. Data splitting . The data accessed and manipulated by the tasks must be divided to run on separate cores. Data dependency . The data accessed by the tasks must be examined for dependencies between two or more tasks. Testing and debugging . Testing and debugging such concurrent programs is inherently more difficult than testing and debugging single-threaded applications.","title":"Programming Challenges"},{"location":"os/osc/ch4/#types-of-parallelism","text":"In general, there are two types of parallelism: data parallelism and task parallelism. Data parallelism focuses on distributing subsets of the same data across multiple computing cores and performing the same operation on each core. Task parallelism involves distributing not data but tasks (threads) across multiple computing cores. However, data and task parallelism are not mutually exclusive, and an application may in fact use a hybrid of these two strategies.","title":"Types of Parallelism"},{"location":"os/osc/ch4/#3-multithreading-models","text":"Support for threads may be provided either at the user level, for user threads , or by the kernel, for kernel threads . User threads are supported above the kernel and are managed without kernel support. Kernel threads are supported and managed directly by the operating system. \u6709\u4e24\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u6765\u63d0\u4f9b\u7ebf\u7a0b\u652f\u6301\uff1a\u7528\u6237\u5c42\u7684\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u5185\u6838\u5c42\u7684\u5185\u6838\u7ea7\u7ebf\u7a0b\u3002\u7528\u6237\u7ea7\u7ebf\u7a0b\u53d7\u5185\u6838\u652f\u6301\uff0c\u800c\u65e0\u9700\u5185\u6838\u7ba1\u7406\uff1b\u800c\u5185\u6838\u7ea7\u7ebf\u7a0b\u7531\u64cd\u4f5c\u7cfb\u7edf\u76f4\u63a5\u652f\u6301\u548c\u7ba1\u7406\u3002\u4e8b\u5b9e\u4e0a\u6240\u6709\u5f53\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u90fd\u652f\u6301\u5185\u6838\u7ea7\u7ebf\u7a0b\u3002 Ultimately, a relationship must exist between user threads and kernel threads. There are three common ways of establishing such a relationship: the many-to-one model, the one-to-one model, and the many-to-many model. \u5728\u7528\u6237\u7ea7\u7ebf\u7a0b\u548c\u5185\u6838\u7ea7\u7ebf\u7a0b\u4e4b\u95f4\u5fc5\u7136\u5b58\u5728\u4e00\u79cd\u5173\u7cfb\u3002\u6709\u4e09\u79cd\u666e\u904d\u5efa\u7acb\u8fd9\u79cd\u5173\u7cfb\u7684\u65b9\u6cd5\uff1a\u591a\u5bf9\u4e00\u6a21\u578b\u3001\u4e00\u5bf9\u4e00\u6a21\u578b\u3001\u591a\u5bf9\u591a\u6a21\u578b\u3002","title":"3 Multithreading Models"},{"location":"os/osc/ch4/#many-to-one-model","text":"The many-to-one model (\u591a\u5bf9\u4e00\u6a21\u578b) maps many user-level threads to one kernel thread. \u591a\u5bf9\u4e00\u6a21\u578b\u5c06\u8bb8\u591a\u7528\u6237\u7ea7\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002 Thread management is done by the thread library in user space, so it is efficient. \u7ebf\u7a0b\u7ba1\u7406\u7531\u7ebf\u7a0b\u5e93\u5728\u7528\u6237\u7a7a\u95f4\u8fdb\u884c\u7684\uff0c\u56e0\u800c\u6548\u7387\u6bd4\u8f83\u9ad8\u3002 Also, because only one thread can access the kernel at a time, multiple threads are unable to run in parallel on multicore systems. \u56e0\u4e3a\u4efb\u610f\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u591f\u8bbf\u95ee\u5185\u6838\uff0c\u591a\u4e2a\u7ebf\u7a0b\u4e0d\u80fd\u5e76\u884c\u8fd0\u884c\u5728\u591a\u5904\u7406\u5668\u4e0a\u3002","title":"Many-to-One Model"},{"location":"os/osc/ch4/#one-to-one-model","text":"The one-to-one model (\u4e00\u5bf9\u4e00\u6a21\u578b) maps each user thread to a kernel thread. \u4e00\u5bf9\u4e00\u6a21\u578b\u6bcf\u4e2a\u7528\u6237\u7ebf\u7a0b\u6620\u5c04\u5230\u4e00\u4e2a\u5185\u6838\u7ebf\u7a0b\u3002 It provides more concurrency by allowing another thread to run when a thread makes a blocking system call. \u8be5\u6a21\u578b\u5728\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u80fd\u5141\u8bb8\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7ee7\u7eed\u6267\u884c\uff0c\u63d0\u4f9b\u4e86\u66f4\u9ad8\u7684\u5e76\u53d1\u6027\u3002 It also allows multiple threads to run in parallel on multiprocessors. \u5b83\u4e5f\u5141\u8bb8\u591a\u4e2a\u7ebf\u7a0b\u80fd\u5e76\u884c\u8fd0\u884c\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u3002 The only drawback to this model is that creating a user thread requires creating the corresponding kernel thread, and a large number of kernel threads may burden the performance of a system . \u8fd9\u79cd\u6a21\u578b\u7684\u552f\u4e00\u7f3a\u70b9\u662f\u6bcf\u521b\u5efa\u4e00\u4e2a\u7528\u6237\u7ebf\u7a0b\u5c31\u4f1a\u521b\u5efa\u4e00\u4e2a\u76f8\u5e94\u7684\u5185\u6838\u7ebf\u7a0b, \u5927\u91cf\u5185\u6838\u7ebf\u7a0b\u4f1a\u5f71\u54cd\u7cfb\u7edf\u6027\u80fd\u3002","title":"One-to-One Model"},{"location":"os/osc/ch4/#many-to-many-model","text":"The many-to-many model (\u591a\u5bf9\u591a\u6a21\u578b) multiplexes many user-level threads to a smaller or equal number of kernel threads. \u591a\u5bf9\u591a\u6a21\u578b\u591a\u8def\u590d\u7528\u4e86\u8bb8\u591a\u7528\u6237\u7ebf\u7a0b\u5230\u540c\u6837\u6570\u91cf\u6216\u66f4\u5c0f\u6570\u91cf\u7684\u5185\u6838\u7ebf\u7a0b\u4e0a\u3002 Developers can create as many user threads as necessary. \u5f00\u53d1\u4eba\u5458\u53ef\u521b\u5efa\u4efb\u610f\u591a\u7684\u7528\u6237\u7ebf\u7a0b\u3002 The corresponding kernel threads can run in parallel on a multiprocessor. \u76f8\u5e94\u5185\u6838\u7ebf\u7a0b\u80fd\u5728\u591a\u5904\u7406\u5668\u7cfb\u7edf\u4e0a\u5e76\u53d1\u6267\u884c\u3002 Also, when a thread performs a blocking system call, the kernel can schedule another thread for execution. \u800c\u4e14\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u963b\u585e\u7cfb\u7edf\u8c03\u7528\u65f6\uff0c\u5185\u6838\u80fd\u8c03\u5ea6\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u6765\u6267\u884c\u3002 In practice it is difficult to implement . \u5b9e\u9645\u4e0a\u96be\u4ee5\u5b9e\u65bd\u3002 Note Most operating systems now use the one-to-one model.","title":"Many-to-Many Model"},{"location":"os/osc/ch4/#userkernel-level-threads","text":"ref: Scheduler Activations (1) User-Level Threads (\u7528\u6237\u7ea7\u7ebf\u7a0b) Advantages: Common operations can be implemented efficiently Interface can be tailored to application needs Issues: A blocking system call blocks all user-level threads. \u963b\u585e\u7cfb\u7edf\u8c03\u7528\u80fd\u591f\u963b\u585e\u6240\u6709\u7528\u6237\u7ea7\u7ebf\u7a0b\u3002 Asynchronous system calls can provide partial work-around. \u975e\u540c\u6b65\u7cfb\u7edf\u8c03\u7528\u80fd\u63d0\u4f9b\u90e8\u5206work-around. view the definition of work-around here A page fault blocks all user-level threads. \u7f3a\u9875\u5f02\u5e38\u963b\u585e\u6240\u6709\u7528\u6237\u7ea7\u7ebf\u7a0b\u3002 Matching threads to CPUs in a multiprocessor is hard\uff1a No knowledge about the numbers of CPUs available to address space No knowledge when a thread blocks (2) Kernel-Level Threads (\u5185\u6838\u7ea7\u7ebf\u7a0b) Primary advantage * Blocking system calls and page faults handled correctly Issues Cost of performing thread operations Create, exit, lock, signal, wait all require user/kernel crossings NOTE : The term virtual processor is often used instead of kernel thread.","title":"User/Kernel-Level threads"},{"location":"os/osc/ch4/#4-thread-libraries","text":"A thread library (\u7ebf\u7a0b\u5e93) provides the programmer with an API for creating and managing threads.","title":"4 Thread Libraries"},{"location":"os/osc/ch4/#pthreads","text":"Pthreads , the threads extension of the POSIX standard, may be provided as either a user-level or a kernel-level library. Pthread\u4f5c\u4e3aPOSIX\u6807\u51c6\u6269\u5c55\uff0c\u53ef\u4ee5\u63d0\u4f9b\u7528\u6237\u7ea7\u6216\u5185\u6838\u7ea7\u7684\u5e93\u3002 This is a specification for thread behavior, not an implementation . Operating-system designers may implement the specification in any way they wish. pthread_t tid : declares the identifier for the thread pthread attr_t attr : declares the attributes for the thread pthread_attr_init( attr) : initialize thread attributes object pthread_create() : create a new thread pthread_join() : join with a terminated thread pthread_exit() : terminate calling thread Note: Compile and link with -pthread . pthread \u8be6\u7ec6\u7528\u6cd5\u548c\u5b9e\u4f8b, \u89c1 POSIX thread (pthread) libraries","title":"Pthreads"},{"location":"os/osc/ch4/#java-threads","text":"The Java thread API allows threads to be created and managed directly in Java programs. However, because in most instances the JVM is running on top of a host operating system, the Java thread API is generally implemented using a thread library available on the host system. This means that on Windows systems, Java threads are typically implemented using the Windows API; UNIX, Linux, and macOS systems typically use Pthreads. One approach of creating thread is to define a class that implements the Runnable interface. The code in the run() method of a class that implements Runnable is what executes in a separate thread. class Job implements Runnable { public void run () { System . out . println ( I am a thread. ); } Thread creation in Java involves creating a Thread object and passing it an instance of a class that implements Runnable , followed by invoking the start() method on the Thread object. Thread worker = new Thread ( new Job ()); worker . start ();","title":"Java Threads"},{"location":"os/osc/ch4/#java-executor-framework","text":"However, beginning with Version 1.5 and its API, Java introduced several new concurrency features that provide developers with much greater control over thread creation and communication. Executor is an object that executes submitted Runnable tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads. [ Java Doc ] Rather than explicitly creating Thread objects, thread creation is instead organized around the Executor interface: public interface Executor { void execute ( Runnable command ); } Classes implementing this interface must define the execute() method, which is passed a Runnable object. Executor service = new Executor ; service . execute ( new Job ()); The advantage of this approach is that it not only divides thread creation from execution but also provides a mechanism for communication between concurrent tasks.","title":"Java Executor Framework"},{"location":"os/osc/ch4/#5-implicit-threading","text":"Implicit threading (\u9690\u5f0f\u7ebf\u7a0b): Transfers the creation and management of threading from application developers to compilers and run-time libraries. One way to address difficulties and better support the design of concurrent and parallel applications. The advantage of this approach is that developers only need to identify parallel tasks , and the libraries determine the specific details of thread creation and management. In this section, we explore four alternative approaches to designing applications that can take advantage of multicore processors through implicit threading: Thread Pools Fork Join OpemMP Grand Central Dispatch","title":"5 Implicit threading"},{"location":"os/osc/ch4/#thread-pools","text":"Two main issues exist: The thread will be discarded once it has completed its work. \u7ebf\u7a0b\u5728\u5b8c\u6210\u5de5\u4f5c\u4e4b\u540e\u5c31\u8981\u88ab\u4e22\u5f03 Unlimited threads could exhaust system resources. \u65e0\u9650\u5236\u7684\u7ebf\u7a0b\u4f1a\u8017\u5c3d\u7cfb\u7edf\u8d44\u6e90 Solution - thread pool (\u7ebf\u7a0b\u6c60) It creates a number of threads at start-up, and places them into a pool, where they sit and wait for work. When a server receives a request, it submits the request to the thread pool and resumes waiting for additional requests. If there is an available thread in the pool, it is awakened, and the request is serviced immediately. If the pool contains no available thread, the task is queued until one becomes free. \u7ebf\u7a0b\u6c60\u7684\u601d\u60f3\u662f\u5728\u8fdb\u7a0b\u5f00\u59cb\u65f6\u521b\u5efa\u4e00\u5b9a\u6570\u91cf\u7684\u7ebf\u7a0b\uff0c\u5e76\u653e\u5165\u5230\u6c60\u4e2d\u4ee5\u7b49\u5f85\u5de5\u4f5c\u3002\u5f53\u670d\u52a1\u5668\u6536\u5230\u8bf7\u6c42\u65f6\uff0c\u5b83\u4f1a\u5524\u9192\u7ebf\u7a0b\u6c60\u4e2d\u7684\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5e76\u5c06\u8981\u5904\u7406\u7684\u8bf7\u6c42\u4f20\u9012\u7ed9\u5b83\uff0c\u4e00\u65e6\u7ebf\u7a0b\u5b8c\u6210\u4e86\u670d\u52a1\uff0c\u5b83\u4f1a\u8fd4\u56de\u5230\u6c60\u4e2d\u5728\u7b49\u5f85\u5de5\u4f5c\u3002\u5982\u679c\u6c60\u4e2d\u6ca1\u6709\u53ef\u7528\u7684\u7ebf\u7a0b\uff0c\u90a3\u4e48\u670d\u52a1\u5668\u4f1a\u4e00\u76f4\u7b49\u5f85\u76f4\u5230\u6709\u7a7a\u7ebf\u7a0b\u4e3a\u6b62\u3002 Thread pools offer these benefits: Servicing a request with an existing thread is often faster than waiting to create a thread. \u901a\u5e38\u7528\u73b0\u6709\u7ebf\u7a0b\u5904\u7406\u8bf7\u6c42\u8981\u6bd4\u7b49\u5f85\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u8981\u5feb. A thread pool limits the number of threads that exist at any one point. \u7ebf\u7a0b\u6c60\u9650\u5236\u4e86\u5728\u4efb\u4f55\u65f6\u5019\u53ef\u7528\u7ebf\u7a0b\u7684\u6570\u91cf. Separating the task to be performed from the mechanics of creating the task allows us to use different strategies for running the task. Java Thread Pool The java.util.concurrent package includes an API for several varieties of thread-pool architectures. Here, we focus on the following three models: Single thread executor \u2014 newSingleThreadExecutor() \u2014 creates a pool of size 1. Fixed thread executor \u2014 newFixedThreadPool(int size) \u2014 creates a thread pool with a specified number of threads. Cached thread executor \u2014 newCachedThreadPool() \u2014 creates an unbounded thread pool, reusing threads in many instances. Each of these factory methods creates and returns an object instance that implements the ExecutorService interface. ExecutorService extends the Executor interface, allowing us to invoke the execute() method on this object. //It creates a cached thread pool and submits tasks to be executed by a thread in the pool using the execute() method. // When the shutdown() method is invoked, the thread pool rejects additional tasks and shuts down once all existing tasks have completed execution. import java.util.concurrent.* ; public class ThreadPoolExample { public static void main ( String [] args ) { int numTasks = Integer . parseInt ( args [ 0 ]. trim ()); /* Create the thread pool */ ExecutorService pool = Executors . newCachedThreadPool (); /* Run each task using a thread in the pool */ for ( int i = 0 ; i numTasks ; i ++) pool . execute ( new Task ()); /* Shut down the pool once all threads have completed */ pool . shutdown (); }","title":"Thread Pools"},{"location":"os/osc/ch4/#grand-central-dispatch","text":"Grand Central Dispatch (GCD) is a technology for Apple's Mac OS X and iOS operating systems. It is a combination of extensions to the C languages, an API, and a run-time library that allows application developers identify sections of code to run in parallel. GCD identifies two types of dispatch queues: serial and concurrent.","title":"Grand Central Dispatch"},{"location":"os/osc/ch4/#6-threading-issues","text":"","title":"6 Threading Issues"},{"location":"os/osc/ch4/#light-weight-process","text":"Many systems implementing either the many-to-many or the two-level model place an intermediate data structure between the user and kernel threads. This data structure\u2014typically known as a lightweight process \uff08\u8f7b\u91cf\u7ea7\u8fdb\u7a0b\uff09, or LWP . To the user-thread library, the LWP appears to be a virtual processor on which the application can schedule a user thread to run. Each LWP is attached to a kernel thread. If a kernel thread blocks, the LWP blocks as well. Up the chain, the user-level thread attached to the LWP also blocks. where K denotes kernel threads and P denotes Process. \u4e0b\u9762\u662f\u4e00\u4e2a\u6d4b\u8bd5LINUX\u4e2dLWP\u7684C\u7a0b\u5e8f /* filename: test_LWP.c */ #include stdlib.h #include pthread.h #include stdio.h #include unistd.h int * thread ( void * arg ) { pthread_t tid ; // the ID of a thread tid = pthread_self (); //get the current thread s id printf ( The ID of new thread is =%lu \\n , tid ); sleep ( 500 ); //sleep for 500 seconds return NULL ; } int main () { pthread_t tid ; printf ( The ID of main thread is %lu \\n , pthread_self ()); //get the main thread s id if ( pthread_create ( tid , NULL , ( void * ) thread , NULL ) != 0 ) { printf ( Thread creation failed \\n ); exit ( 1 ); } printf ( my Id is %lu, new thread ID is %lu \\n , pthread_self (), tid ); sleep ( 1000 ); return 0 ; } \u8fd0\u884c ps -efL \u53ef\u4ee5\u770b\u5230, test_LWP \u8fdb\u7a0b(PID=1953)\u6709\u4e24\u4e2aLWP\uff0c\u5373NLWP(number of light weight process)=2\u3002 UID PID PPID LWP C NLWP STIME TTY TIME CMD vagrant 1953 1644 1953 0 2 04:16 pts/0 00:00:00 ./test_LWP vagrant 1953 1644 1954 0 2 04:16 pts/0 00:00:00 ./test_LWP vagrant 2028 1839 2028 0 1 04:18 pts/1 00:00:00 ps -efL","title":"Light Weight Process"},{"location":"os/osc/ch4/#scheduler-activation","text":"Problems : \u5185\u6838\u7ebf\u7a0b\u5728\u5404\u65b9\u9762\u90fd\u6bd4\u8f83\u7075\u6d3b\uff0c\u4f46\u662f\u6027\u80fd\u4e0d\u9ad8\uff0c\u7ecf\u5e38\u4f1a\u51fa\u73b0\u8bf7\u6c42\u5728\u7528\u6237\u7a7a\u95f4\u548c\u5185\u6838\u7a7a\u95f4\u7684\u4f20\u9012\u3002\u90a3\u4e48\u5982\u4f55\u5728\u62e5\u6709\u5185\u6838\u7a7a\u95f4\u7ebf\u7a0b\u7684\u7075\u6d3b\u6027\u7684\u540c\u65f6\u53c8\u63d0\u9ad8\u6027\u80fd\u5462? Solution : Scheduler activation \uff08\u8c03\u5ea6\u5668\u6fc0\u6d3b\uff09are a threading mechanism that, when implemented in an operating system's process scheduler, provide kernel-level thread functionality with user-level thread flexibility and performance [ ref ]. It works as follows: The kernel provides an application with a set of virtual processors (LWPs), and the application can schedule user threads onto an available virtual processor. Furthermore, the kernel must inform an application about certain events. This procedure is known as an upcall (\u5411\u4e0a\u8c03\u7528). Upcalls are handled by the thread library with an upcall handler, and upcall handlers must run on a virtual processor. While the user threading library will schedule user threads, the kernel will schedule the underlying LWPs. Example [ ref ]: Let\u2019s study an example of how scheduler activations can be used. The kernel has allocated one kernel thread (1) to a process with three user-level threads (2). The three user level threads take turn executing on the single kernel-level thread. (3) The executing thread makes a blocking system call . (4) And the the kernel blocks the calling user-level thread and the kernel-level thread used to execute the user-level thread . (5) Scheduler activation: the kernel decides to allocate a new kernel-level thread to the process . (6) Upcall: the kernel notifies the user-level thread manager which user-level thread that is now blocked and that a new kernel-level thread is available. (7) The user-level thread manager move the other threads to the new kernel thread and resumes one of the ready threads.","title":"Scheduler activation"},{"location":"os/osc/ch5/","text":"Operating System Concepts 5 - CPU Scheduling On modern operating systems it is kernel-level threads \u2014not processes\u2014that are in fact being scheduled by the operating system. User-level threads are managed by a thread library, and the kernel is unaware of them. To run on a CPU, user-level threads must ultimately be mapped to an associated kernel-level thread, although this mapping may be indirect and may use a lightweight process (LWP). 1 Basic Concepts CPU-I/O Burst Cycle Process execution consists of a cycle of CPU execution and I/O wait. \u8fdb\u7a0b\u6267\u884c\u7531CPU\u6267\u884c\u5468\u671f\u548cI/O\u7b49\u5f85\u5468\u671f\u7ec4\u6210\u3002 Processes alternate between these two states. \u8fdb\u7a0b\u5728\u8fd9\u4e24\u4e2a\u72b6\u6001\u4e4b\u95f4\u5207\u6362\u3002 Process execution begins with a CPU burst , which is followed by an I/O burst and so on. \u8fdb\u7a0b\u6267\u884c\u4eceCPU\u533a\u95f4\u5f00\u59cb\uff0c\u5728\u8fd9\u4e4b\u540e\u662fI/O\u533a\u95f4\u3002 \u8fdb\u7a0b\u5728CPU\u533a\u95f4\u548cI/O\u533a\u95f4\u4e4b\u95f4\u5207\u6362\uff1a The durations of CPU bursts tend to have a frequency curve similar to the figure below. The curve is generally characterized as exponential or hyperexpoential(\u8d85\u6307\u6570). A large number of short CPU bursts and a small number of long CPU burst. An I/O-bounded program typically has many short CPU bursts. I/O\u5bc6\u96c6\u7a0b\u5e8f\u901a\u5e38\u5177\u6709\u5f88\u591a\u77edCPU\u533a\u95f4\u3002 A CPU-bound program might have a few long CPU bursts.CPU\u5bc6\u96c6\u7a0b\u5e8f\u53ef\u80fd\u6709\u5c11\u91cf\u7684\u957fCPU\u533a\u95f4\u3002 The distribution can be important when implementing a CPU-scheduling algorithm. \u5206\u5e03\u6709\u52a9\u4e8e\u9009\u62e9\u5408\u9002\u7684CPU\u8c03\u5ea6\u7b97\u6cd5\u3002 CPU Scheduler Whenever the CPU becomes idle, the operating system must select one of the processes in the ready queue (\u5c31\u7eea\u961f\u5217) to be executed. \u6bcf\u5f53CPU\u7a7a\u95f2\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u5fc5\u987b\u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fdb\u7a0b\u6765\u6267\u884c\u3002 The selection process is carried out by the CPU scheduler (CPU\u8c03\u5ea6\u7a0b\u5e8f). \u8fdb\u7a0b\u9009\u62e9\u7531CPU\u8c03\u5ea6\u7a0b\u5e8f\u6267\u884c\u3002 CPU scheduler selects a process from the processes in memory that are ready to execute and allocates the CPU to that process. \u8c03\u5ea6\u7a0b\u5e8f\u4ece\u5185\u5b58\u4e2d\u9009\u62e9\u4e00\u4e2a\u80fd\u591f\u6267\u884c\u7684\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u4e4b\u5206\u914dCPU\u3002 A ready queue can be implemented as a FIFO queue, a priority queue, a tree, or simply an unordered linked list. \u5c31\u7eea\u961f\u5217\u53ef\u4ee5\u662fFIFO\u961f\u5217\uff0c\u4f18\u5148\u961f\u5217\u3001\u6811\u6216\u65e0\u5e8f\u94fe\u8868\u3002 Preemptive and Nonpreemptive Scheduling CPU-scheduling decisions may take place under the following four circumstances: When a process switches from the running state to the waiting state (for example, as the result of an I/O request or an invocation of wait() for the termination of a child process) \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u8fd0\u884c\u72b6\u6001\u5207\u6362\u5230\u7b49\u5f85\u72b6\u6001\uff08\u5982\uff1aI/O\u8bf7\u6c42\uff0c\u6216\u8005\u8c03\u7528wait\u7b49\u5f85\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7684\u7ec8\u6b62\uff09 When a process switches from the running state to the ready state (for example, when an interrupt occurs) \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u8fd0\u884c\u72b6\u6001\u5207\u6362\u5230\u5c31\u7eea\u72b6\u6001\uff08\u5982\uff1a\u51fa\u73b0\u4e2d\u65ad\uff09 When a process switches from the waiting state to the ready state (for example, at completion of I/O) \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u7b49\u5f85\u72b6\u6001\u5207\u6362\u5230\u5c31\u7eea\u72b6\u6001\uff08\u5982\uff1aI/O\u5b8c\u6210\uff09 When a process terminates \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7ec8\u6b62\u65f6 When scheduling takes place only under circumstances 1 and 4, the scheduling scheme is nonpreemptive (\u975e\u62a2\u5360\u7684) or cooperative (\u534f\u4f5c\u7684). Otherwise, it is preemptive (\u62a2\u5360\u7684). Under nonpreemptive scheduling, once the CPU has been allocated to a process, the process keeps the CPU until it releases it either by terminating or by switching to the waiting state. Virtually all modern Operating systems use preemptive scheduling algorithms. Dispatcher The dispatcher (\u5206\u6d3e\u7a0b\u5e8f) is the module that gives control of the CPU's core to the process selected by the CPU scheduler. This function involves the following: Switching context from one process to another Switching to user mode Jumping to the proper location in the user program to resume that program Dispatch latency (\u5206\u6d3e\u5ef6\u8fdf) is the time it takes for the dispatcher to stop one process and start another running. 2 Scheduling Criteria Scheduling criteria\uff08\u8c03\u5ea6\u51c6\u5219) include the following: CPU utilization (CPU\u5229\u7528\u7387) Throughput (\u541e\u5410\u91cf): the number of processes that are completed per time unit. Turnaround time (\u5468\u8f6c\u65f6\u95f4): the interval from the time of submission of a process to the time of completion. Waiting time (\u7b49\u5f85\u65f6\u95f4): the sum of time spent waiting in the ready queue. Response time (\u54cd\u5e94\u65f6\u95f4): the time from the submission of a request until the first response is produced. 3 Scheduling Algorithms First-Come,First-Serve scheduling, FCFS By far the simplest CPU-scheduling algorithm is the first-come first serve scheduling (\u5148\u5230\u5148\u670d\u52a1\u8c03\u5ea6, FCFS) algorithm. The implementation of FCFS policy is easily managed with a FIFO queue . The average waiting time under the FCFS policy is often quite long . Convoy effect (\u62a4\u822a\u6548\u679c) occurs when all the other processes wait for the one big process to get off the CPU. \u6240\u6709\u5176\u4ed6\u8fdb\u7a0b\u90fd\u7b49\u5f85\u4e00\u4e2a\u5927\u8fdb\u7a0b\u91ca\u653eCPU\uff0c\u8fd9\u79f0\u4e4b\u4e3a\u62a4\u822a\u6548\u679c\u3002 The FCFS scheduling algorithm is nonpreemptive . FCFS\u8c03\u5ea6\u7b97\u6cd5\u662f\u975e\u62a2\u5360\u7684\u3002 Shortest-job-first scheduling, SJF The shortest-job-first scheduling (\u6700\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6, SJF) algorithm associates with each process the length of the process's next CPU burst. When the CPU is available, it is assigned to the process that has the smallest next CPU burst. It gives the minimum average waiting time for a given set of processes. The SJF algorithm can be either preemptive or nonpreemptive. Preempt the currently executing process: when a new process arrives at the ready queue while a previous process is still executing. The next CPU burst of the newly arrived process may be shorter than what is left of the currently executing process. The next CPU burst is generally predicted as an exponential average of the measured lengths of previous CPU bursts. Let t_n t_n be the length of the n n th CPU burst, and let \\tau_{n+1} \\tau_{n+1} be predicted value for the next CPU burst: \\tau_{n+1}= \\alpha t_n + (1-\\alpha) \\tau_n \\tau_{n+1}= \\alpha t_n + (1-\\alpha) \\tau_n where 0\\le\\alpha \\le 1 0\\le\\alpha \\le 1 , commonly \\alpha = 1/2 \\alpha = 1/2 . Round-Robin scheduling, RR The round-robin scheduling (\u8f6e\u8f6c\u8c03\u5ea6) algorithm is similar to FCFS scheduling, but switch occurs after 1 time quantum (\u65f6\u95f4\u7247). Time quantum is a small unit of time, generally from 10 to 100 milliseconds in length. The ready queue is treated as a circular queue. If the process have a CPU burst of less than 1 time quantum, the process itself will release the CPU voluntarily. otherwise, a context switch will be executed, and the process will be put at the tail of the ready queue. The performance of the RR algorithm depends heavily on the size of the time quantum. If extremely large, the RR policy is the same as the FCFS policy. If extremely small, it'll result in a large number of context switches. Priority scheduling algorithm The priority-scheduling (\u4f18\u5148\u7ea7\u8c03\u5ea6) algorithm associate each process a priority, and the CPU allocated to the process with the highest priority. FCFS: equal-priority SJF: the priority is the inverse of the next CPU burst. ISSUE: Indefinite blocking (\u65e0\u9650\u963b\u585e), or starvation (\u9965\u997f) occurs when some low-priority processes waiting indefinitely . SOLUTION: Aging (\u8001\u5316) involves gradually increasing the priority of processes that wait in the system for a long time. Multilevel Queue Scheduling For multilevel queue scheduling (\u591a\u7ea7\u961f\u5217\u8c03\u5ea6), there are separate queues for each distinct priority, and priority scheduling simply schedules the process in the highest-priority queue. A multilevel queue scheduling algorithm can be used to partition processes into several separate queues based on the process type: In addition, there must be scheduling among the queues : Fixed-priority preemptive scheduling (\u56fa\u5b9a\u4f18\u5148\u7ea7\u62a2\u5360\u8c03\u5ea6): Each queue has absolute priority over lower-priority queues eg. no process in the batch queue, could run unless the queues for real-time processes, system processes, and interactive processes were all empty. Time-slice among queues (\u961f\u5217\u4e4b\u95f4\u5212\u5206\u65f6\u95f4\u7247): each queue gets a certain portion of the CPU time. eg. the foreground queue can be given 80 percent of the CPU time for RR scheduling among its processes, while the background queue receives 20 percent of the CPU to give to its processes on an FCFS basis. Multilevel Feedback-Queue Scheduling The multilevel feedback queue scheduling (\u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6) algorithm allows a process to move between queues. If a process uses too much CPU time, it will be moved to a lower-priority queue. It leaves I/O-bound and interactive processes\u2014which are typically characterized by short CPU bursts \u2014in the higher-priority queues. A process that waits too long in a lower-priority queue may be moved to a higher-priority queue. This form of aging prevent starvation. In general, a multilevel feedback queue scheduler is defined by the following parameters: The number of queues The scheduling algorithm for each queue The method used to determine when to upgrade a process to a higher priority queue The method used to determine when to demote a process to a lower priority queue The method used to determine which queue a process will enter when that process needs service 4 Thread Scheduling Contention Scope Process contention scope (PCS\uff0c\u8fdb\u7a0b\u7ade\u4e89\u8303\u56f4), specifies that competition for the CPU takes place among threads belonging to the same process. the thread library schedules user-level threads to run on an available LWP, on systems implementing the many-to-one and many-to-many models. To decide which kernel-level thread to schedule onto a CPU, the kernel uses system-contention scope (SCS, \u7cfb\u7edf\u7ade\u4e89\u8303\u56f4). Systems using the one-to-one model, such as Windows and Linux schedule threads using only SCS. Pthread Scheduling Pthreads identifies the following contention scope values: PTHREAD_SCOPE_PROCESS schedules threads using PCS scheduling. PTHREAD_SCOPE_SYSTEM schedules threads using SCS scheduling. The Pthread IPC (Interprocess Communication) provides two functions for setting\u2014and getting\u2014the contention scope policy: pthread_attr_setscope(pthread_attr_t *attr, int scope) pthread_attr_getscope(pthread_attr_t *attr, int *scope) #include pthread.h #include stdio.h #define NUM_THREADS 5 /* the thread runs in this function */ void * runner ( void * param ); int main ( int argc , char * argv []) { int i , scope ; pthread_t tid [ NUM_THREADS ]; /* the thread identifier */ pthread_attr_t attr ; /* set of attributes for the thread */ /* get the default attributes */ pthread_attr_init ( attr ); /* first inquire on the current scope */ if ( pthread_attr_getscope ( attr , scope ) != 0 ) fprintf ( stderr , Unable to get scheduling scope. \\n ); else { if ( scope == PTHREAD_SCOPE_PROCESS ) printf ( PTHREAD_SCOPE_PROCESS \\n ); else if ( scope == PTHREAD_SCOPE_SYSTEM ) printf ( PTHREAD_SCOPE_SYSTEM \\n ); else fprintf ( stderr , Illegal scope value. \\n ); } /* set the scheduling algorithm to PCS or SCS */ if ( pthread_attr_setscope ( attr , PTHREAD_SCOPE_SYSTEM ) != 0 ) printf ( unable to set scheduling policy. \\n ); /* create the threads */ for ( i = 0 ; i NUM_THREADS ; i ++ ) pthread_create ( tid [ i ], attr , runner , NULL ); /** * Now join on each thread */ for ( i = 0 ; i NUM_THREADS ; i ++ ) pthread_join ( tid [ i ], NULL ); } /** * The thread will begin control in this function. */ void * runner ( void * param ) { /* do some work ... */ pthread_exit ( 0 ); } 5 Multi-Processor Scheduling Approaches to Multiple-Processor Scheduling Asymmetric multiprocessing (AMP\uff0c\u975e\u5bf9\u79f0\u591a\u5904\u7406) All scheduling decisions, I/O processing, and other system activities handled by a single processor -- the master server; the other processors execute only user code. It is simple because only one core accesses the system data structures, reducing the need for data sharing. The master server becomes a potential bottleneck where overall system performance may be reduced. Symmetric multiprocessing (SMP\uff0c \u5bf9\u79f0\u591a\u5904\u7406) Each processor is self-scheduling. It provides two possible strategies for organizing the threads eligible to be scheduled: All threads may be in a common ready queue . Use some form of locking to protect the common ready queue from race condition All accesses to the queue would require lock ownership, it would be a performance bottleneck. Each processor may have its own private queue of threads. Most common approach on systems supporting SMP More efficient use of cache memory. Multicore Processors Issue : memory stalls occurs when a processor accesses memory, it spends a significant amount of time waiting for the data to become available. Occurs primarily because modern processors operate at much faster speeds than memory Occur because of a cache miss as well Solution : many recent hardware designs have implemented multithreaded processing cores in which two (or more) hardware threads (\u786c\u4ef6\u7ebf\u7a0b) are assigned to each core. If one hardware thread stalls while waiting for memory, the core can switch to another thread. From an operating system perspective, each hardware thread maintains its architectural state, such as instruction pointer and register set, and thus appears as a logical CPU that is available to run a software thread. This technique is known as chip multithreading (CMT, \u82af\u7247\u591a\u7ebf\u7a0b). Intel use the term hyper-threading (\u8d85\u7ebf\u7a0b). NOTE : The resources of the physical core (such as caches and pipelines) are shared among its hardware threads, and a processing core can only execute one hardware thread at a time. Two levels of scheduling needed: It chooses which software thread to run on each hardware thread. It may choose any scheduling algorithm. It chooses which hardware thread to run on CPU. Use a simple round-robin algorithm assigned to each hardware thread a dynamic urgency value ranging from 0 to 7, with 0 representing the lowest urgency and 7 the highest. Load Balancing Load balancing (\u8d1f\u8f7d\u5747\u8861) attempts to keep the workload evenly distributed across all processors in an SMP system. Two general approaches to load balancing: Push migration : a specific task periodically checks the load on each processor and -- if it finds an imbalance -- evenly distributes the load by moving (or pushing) threads from overloaded to idle or less-busy processors. Pull migration : an idle processor pulls a waiting task from a busy processor. They are not mutually exclusive and are, in fact, often implemented in parallel on load-balancing systems. Processor Affinity Because of the high cost of invalidating and repopulating caches, most operating systems with SMP support try to avoid migrating a thread from one processor to another and instead attempt to keep a thread running on the same processor and take advantage of a warm cache. This is known as processor affinity (\u5904\u7406\u5668\u4eb2\u548c\u6027)\u3002 Common ready queue and per-processor ready queue(section 5.1): If we adopt the approach of a common ready queue, a thread may be selected for execution by any processor. Thus, if a thread is scheduled on a new processor, that processor\u2019s cache must be repopulated. With private, per-processor ready queues, a thread is always scheduled on the same processor and can therefore benefit from the contents of a warm cache. The main-memory architecture of a system can affect processor affinity issues as well. Non-uniform memory access (NUMA, \u975e\u4e00\u81f4\u6027\u5185\u5b58\u8bbf\u95ee) where there are two physical processor chips each with their own CPU and local memory. A CPU has faster access to its local memory than to memory local to another CPU. Interestingly, load balancing often counteracts the benefits of processor affinity. 6 Real-Time CPU Scheduling Two kinds of real-time systems exist: Soft real-time systems (\u8f6f\u5b9e\u65f6\u7cfb\u7edf) provide no guarantee as to when a critical real-time process will be scheduled. Hard real-time system (\u786c\u5b9e\u65f6\u7cfb\u7edf) have stricter requirements, A task must be serviced by its deadline; service after the deadline has expired is the same as no service at all. Minimizing latency When an event occurs, the system must respond to and service it as quickly as possible. Event latency is the amount of time that elapses from when an event occurs to when it is serviced. Two types of latencies affect the performance of real-time systems: Interrupt latency : the period of time from the arrival of an interrupt at the CPU to the start of the routine that services the interrupt Fist, complete the instruction it is executing and determine the type of interrupt that occurred. Second, save the state of the current process before servicing the interrupt using the specific interrupt service routine One important factor contributing to interrupt latency is the amount of time interrupts may be disabled while kernel data structures are being updated. Real-time operating systems require that interrupts be disabled for only very short periods of time. Dispatch latency : the time required for the dispatcher to stop one process and start another is known as dispatch latency. Rate-Monotonic Scheduling The rate-monotonic scheduling (\u5355\u8c03\u901f\u7387\u8c03\u5ea6) algorithm schedules periodic tasks using a static priority policy with preemption. Upon entering the system, each periodic task is assigned a priority inversely based on its period . The shorter the period, the higher the priority; the longer the period, the lower the priority. It assumes that the processing time of a periodic process is the same for each CPU burst. That is, every time a process acquires the CPU, the duration of its CPU burst is the same. Before we proceed with the details, we must define certain characteristics of the processes that are to be scheduled. The processes are considered periodic . Once a periodic process has acquired the CPU, it has a fixed processing time t t , a deadline d d by which it must be serviced by the CPU, and a period p p . The rate of a periodic task is 1/p 1/p . Let's consider an example. We have two processes, P_1 P_1 and P_2 P_2 . The periods: - P_1=50 P_1=50 and P_2=100 P_2=100 The processing time: t_1=20 t_1=20 and t_2=35 t_2=35 The deadline requires that it complete its CPU burst by the start of its next period. Now suppose we use rate-monotonic scheduling: We assign P_1 P_1 a higher priority than P_2 P_2 because the period of P_1 P_1 is shorter than that of P_2 P_2 . P_1 P_1 starts first and completes its CPU burst at time 20, thereby meeting its first deadline. P_2 P_2 starts running at this point and runs until time 50. At this time, it is preempted by P_1 P_1 , although it still has 5 milliseconds remaining in its CPU burst. P_1 P_1 completes its CPU burst at time 70, at which point the scheduler resumes P_2 P_2 . P_2 P_2 completes its CPU burst at time 75, also meeting its first deadline. The system is idle until time 100, when P_1 P_1 is scheduled again. 7 Linux Scheduling Completely Fair Scheduler The Completely Fair Scheduler (CFS\uff0c\u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5) is the default Linux scheduling algorithm after release 2.6.23 of the kernel. Each task has a virtual runtime (\u865a\u62df\u8fd0\u884c\u65f6) value, which is its actual runtime normalized to the number of ready tasks. Task priority is incorporated as a decay factor into this formula. Lower-priority tasks have higher rates of decay than higher-priority tasks. The CPU is allocated to the task with the smallest virtual runtime value. Standard Linux kernels implement two scheduling classes (\u8c03\u5ea6\u7c7b): a default scheduling class using the CFS scheduling algorithm a real-time scheduling class. Each runnable task is placed in a red-black tree - a balanced binary search tree whose key is based on the value of virtual runtime vruntime . discover the leftmost node will require O(\\log N) O(\\log N) operations. Linux scheduler caches the leftmost node in the variable rb_leftmost , and requires only retrieving the cached value. Load Balancing on NUMA systems Problem: On NUMA systems, migrating a thread may result in a memory access penalty due to either having to invalidate cache contents or, incurring longer memory access times. SOLUTION: Linux identifies a hierarchical system of scheduling domains (\u8c03\u5ea6\u57df) \u2014\u2014 a set of CPU cores that can be balanced against one another. The cores in each scheduling domain are grouped according to how they share the resources of the system. Pairs of cores share a level 2 (L2) cache and are thus organized into separate domain 0 and domain 1 . These two domains may share a level 3 (L3) cache, and are therefore organized into a processor-level domain (also known as a NUMA node). The general strategy behind CFS is to balance loads within domains, beginning at the lowest level of the hierarchy .","title":"Chapter 5: CPU Scheduling"},{"location":"os/osc/ch5/#operating-system-concepts-5-cpu-scheduling","text":"On modern operating systems it is kernel-level threads \u2014not processes\u2014that are in fact being scheduled by the operating system. User-level threads are managed by a thread library, and the kernel is unaware of them. To run on a CPU, user-level threads must ultimately be mapped to an associated kernel-level thread, although this mapping may be indirect and may use a lightweight process (LWP).","title":"Operating System Concepts 5 - CPU Scheduling"},{"location":"os/osc/ch5/#1-basic-concepts","text":"","title":"1 Basic Concepts"},{"location":"os/osc/ch5/#cpu-io-burst-cycle","text":"Process execution consists of a cycle of CPU execution and I/O wait. \u8fdb\u7a0b\u6267\u884c\u7531CPU\u6267\u884c\u5468\u671f\u548cI/O\u7b49\u5f85\u5468\u671f\u7ec4\u6210\u3002 Processes alternate between these two states. \u8fdb\u7a0b\u5728\u8fd9\u4e24\u4e2a\u72b6\u6001\u4e4b\u95f4\u5207\u6362\u3002 Process execution begins with a CPU burst , which is followed by an I/O burst and so on. \u8fdb\u7a0b\u6267\u884c\u4eceCPU\u533a\u95f4\u5f00\u59cb\uff0c\u5728\u8fd9\u4e4b\u540e\u662fI/O\u533a\u95f4\u3002 \u8fdb\u7a0b\u5728CPU\u533a\u95f4\u548cI/O\u533a\u95f4\u4e4b\u95f4\u5207\u6362\uff1a The durations of CPU bursts tend to have a frequency curve similar to the figure below. The curve is generally characterized as exponential or hyperexpoential(\u8d85\u6307\u6570). A large number of short CPU bursts and a small number of long CPU burst. An I/O-bounded program typically has many short CPU bursts. I/O\u5bc6\u96c6\u7a0b\u5e8f\u901a\u5e38\u5177\u6709\u5f88\u591a\u77edCPU\u533a\u95f4\u3002 A CPU-bound program might have a few long CPU bursts.CPU\u5bc6\u96c6\u7a0b\u5e8f\u53ef\u80fd\u6709\u5c11\u91cf\u7684\u957fCPU\u533a\u95f4\u3002 The distribution can be important when implementing a CPU-scheduling algorithm. \u5206\u5e03\u6709\u52a9\u4e8e\u9009\u62e9\u5408\u9002\u7684CPU\u8c03\u5ea6\u7b97\u6cd5\u3002","title":"CPU-I/O Burst Cycle"},{"location":"os/osc/ch5/#cpu-scheduler","text":"Whenever the CPU becomes idle, the operating system must select one of the processes in the ready queue (\u5c31\u7eea\u961f\u5217) to be executed. \u6bcf\u5f53CPU\u7a7a\u95f2\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c31\u5fc5\u987b\u4ece\u5c31\u7eea\u961f\u5217\u4e2d\u9009\u62e9\u4e00\u4e2a\u8fdb\u7a0b\u6765\u6267\u884c\u3002 The selection process is carried out by the CPU scheduler (CPU\u8c03\u5ea6\u7a0b\u5e8f). \u8fdb\u7a0b\u9009\u62e9\u7531CPU\u8c03\u5ea6\u7a0b\u5e8f\u6267\u884c\u3002 CPU scheduler selects a process from the processes in memory that are ready to execute and allocates the CPU to that process. \u8c03\u5ea6\u7a0b\u5e8f\u4ece\u5185\u5b58\u4e2d\u9009\u62e9\u4e00\u4e2a\u80fd\u591f\u6267\u884c\u7684\u8fdb\u7a0b\uff0c\u5e76\u4e3a\u4e4b\u5206\u914dCPU\u3002 A ready queue can be implemented as a FIFO queue, a priority queue, a tree, or simply an unordered linked list. \u5c31\u7eea\u961f\u5217\u53ef\u4ee5\u662fFIFO\u961f\u5217\uff0c\u4f18\u5148\u961f\u5217\u3001\u6811\u6216\u65e0\u5e8f\u94fe\u8868\u3002","title":"CPU Scheduler"},{"location":"os/osc/ch5/#preemptive-and-nonpreemptive-scheduling","text":"CPU-scheduling decisions may take place under the following four circumstances: When a process switches from the running state to the waiting state (for example, as the result of an I/O request or an invocation of wait() for the termination of a child process) \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u8fd0\u884c\u72b6\u6001\u5207\u6362\u5230\u7b49\u5f85\u72b6\u6001\uff08\u5982\uff1aI/O\u8bf7\u6c42\uff0c\u6216\u8005\u8c03\u7528wait\u7b49\u5f85\u4e00\u4e2a\u5b50\u8fdb\u7a0b\u7684\u7ec8\u6b62\uff09 When a process switches from the running state to the ready state (for example, when an interrupt occurs) \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u8fd0\u884c\u72b6\u6001\u5207\u6362\u5230\u5c31\u7eea\u72b6\u6001\uff08\u5982\uff1a\u51fa\u73b0\u4e2d\u65ad\uff09 When a process switches from the waiting state to the ready state (for example, at completion of I/O) \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u4ece\u7b49\u5f85\u72b6\u6001\u5207\u6362\u5230\u5c31\u7eea\u72b6\u6001\uff08\u5982\uff1aI/O\u5b8c\u6210\uff09 When a process terminates \u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7ec8\u6b62\u65f6 When scheduling takes place only under circumstances 1 and 4, the scheduling scheme is nonpreemptive (\u975e\u62a2\u5360\u7684) or cooperative (\u534f\u4f5c\u7684). Otherwise, it is preemptive (\u62a2\u5360\u7684). Under nonpreemptive scheduling, once the CPU has been allocated to a process, the process keeps the CPU until it releases it either by terminating or by switching to the waiting state. Virtually all modern Operating systems use preemptive scheduling algorithms.","title":"Preemptive and Nonpreemptive Scheduling"},{"location":"os/osc/ch5/#dispatcher","text":"The dispatcher (\u5206\u6d3e\u7a0b\u5e8f) is the module that gives control of the CPU's core to the process selected by the CPU scheduler. This function involves the following: Switching context from one process to another Switching to user mode Jumping to the proper location in the user program to resume that program Dispatch latency (\u5206\u6d3e\u5ef6\u8fdf) is the time it takes for the dispatcher to stop one process and start another running.","title":"Dispatcher"},{"location":"os/osc/ch5/#2-scheduling-criteria","text":"Scheduling criteria\uff08\u8c03\u5ea6\u51c6\u5219) include the following: CPU utilization (CPU\u5229\u7528\u7387) Throughput (\u541e\u5410\u91cf): the number of processes that are completed per time unit. Turnaround time (\u5468\u8f6c\u65f6\u95f4): the interval from the time of submission of a process to the time of completion. Waiting time (\u7b49\u5f85\u65f6\u95f4): the sum of time spent waiting in the ready queue. Response time (\u54cd\u5e94\u65f6\u95f4): the time from the submission of a request until the first response is produced.","title":"2 Scheduling Criteria"},{"location":"os/osc/ch5/#3-scheduling-algorithms","text":"","title":"3 Scheduling Algorithms"},{"location":"os/osc/ch5/#first-comefirst-serve-scheduling-fcfs","text":"By far the simplest CPU-scheduling algorithm is the first-come first serve scheduling (\u5148\u5230\u5148\u670d\u52a1\u8c03\u5ea6, FCFS) algorithm. The implementation of FCFS policy is easily managed with a FIFO queue . The average waiting time under the FCFS policy is often quite long . Convoy effect (\u62a4\u822a\u6548\u679c) occurs when all the other processes wait for the one big process to get off the CPU. \u6240\u6709\u5176\u4ed6\u8fdb\u7a0b\u90fd\u7b49\u5f85\u4e00\u4e2a\u5927\u8fdb\u7a0b\u91ca\u653eCPU\uff0c\u8fd9\u79f0\u4e4b\u4e3a\u62a4\u822a\u6548\u679c\u3002 The FCFS scheduling algorithm is nonpreemptive . FCFS\u8c03\u5ea6\u7b97\u6cd5\u662f\u975e\u62a2\u5360\u7684\u3002","title":"First-Come,First-Serve scheduling, FCFS"},{"location":"os/osc/ch5/#shortest-job-first-scheduling-sjf","text":"The shortest-job-first scheduling (\u6700\u77ed\u4f5c\u4e1a\u4f18\u5148\u8c03\u5ea6, SJF) algorithm associates with each process the length of the process's next CPU burst. When the CPU is available, it is assigned to the process that has the smallest next CPU burst. It gives the minimum average waiting time for a given set of processes. The SJF algorithm can be either preemptive or nonpreemptive. Preempt the currently executing process: when a new process arrives at the ready queue while a previous process is still executing. The next CPU burst of the newly arrived process may be shorter than what is left of the currently executing process. The next CPU burst is generally predicted as an exponential average of the measured lengths of previous CPU bursts. Let t_n t_n be the length of the n n th CPU burst, and let \\tau_{n+1} \\tau_{n+1} be predicted value for the next CPU burst: \\tau_{n+1}= \\alpha t_n + (1-\\alpha) \\tau_n \\tau_{n+1}= \\alpha t_n + (1-\\alpha) \\tau_n where 0\\le\\alpha \\le 1 0\\le\\alpha \\le 1 , commonly \\alpha = 1/2 \\alpha = 1/2 .","title":"Shortest-job-first scheduling, SJF"},{"location":"os/osc/ch5/#round-robin-scheduling-rr","text":"The round-robin scheduling (\u8f6e\u8f6c\u8c03\u5ea6) algorithm is similar to FCFS scheduling, but switch occurs after 1 time quantum (\u65f6\u95f4\u7247). Time quantum is a small unit of time, generally from 10 to 100 milliseconds in length. The ready queue is treated as a circular queue. If the process have a CPU burst of less than 1 time quantum, the process itself will release the CPU voluntarily. otherwise, a context switch will be executed, and the process will be put at the tail of the ready queue. The performance of the RR algorithm depends heavily on the size of the time quantum. If extremely large, the RR policy is the same as the FCFS policy. If extremely small, it'll result in a large number of context switches.","title":"Round-Robin scheduling, RR"},{"location":"os/osc/ch5/#priority-scheduling-algorithm","text":"The priority-scheduling (\u4f18\u5148\u7ea7\u8c03\u5ea6) algorithm associate each process a priority, and the CPU allocated to the process with the highest priority. FCFS: equal-priority SJF: the priority is the inverse of the next CPU burst. ISSUE: Indefinite blocking (\u65e0\u9650\u963b\u585e), or starvation (\u9965\u997f) occurs when some low-priority processes waiting indefinitely . SOLUTION: Aging (\u8001\u5316) involves gradually increasing the priority of processes that wait in the system for a long time.","title":"Priority scheduling algorithm"},{"location":"os/osc/ch5/#multilevel-queue-scheduling","text":"For multilevel queue scheduling (\u591a\u7ea7\u961f\u5217\u8c03\u5ea6), there are separate queues for each distinct priority, and priority scheduling simply schedules the process in the highest-priority queue. A multilevel queue scheduling algorithm can be used to partition processes into several separate queues based on the process type: In addition, there must be scheduling among the queues : Fixed-priority preemptive scheduling (\u56fa\u5b9a\u4f18\u5148\u7ea7\u62a2\u5360\u8c03\u5ea6): Each queue has absolute priority over lower-priority queues eg. no process in the batch queue, could run unless the queues for real-time processes, system processes, and interactive processes were all empty. Time-slice among queues (\u961f\u5217\u4e4b\u95f4\u5212\u5206\u65f6\u95f4\u7247): each queue gets a certain portion of the CPU time. eg. the foreground queue can be given 80 percent of the CPU time for RR scheduling among its processes, while the background queue receives 20 percent of the CPU to give to its processes on an FCFS basis.","title":"Multilevel Queue Scheduling"},{"location":"os/osc/ch5/#multilevel-feedback-queue-scheduling","text":"The multilevel feedback queue scheduling (\u591a\u7ea7\u53cd\u9988\u961f\u5217\u8c03\u5ea6) algorithm allows a process to move between queues. If a process uses too much CPU time, it will be moved to a lower-priority queue. It leaves I/O-bound and interactive processes\u2014which are typically characterized by short CPU bursts \u2014in the higher-priority queues. A process that waits too long in a lower-priority queue may be moved to a higher-priority queue. This form of aging prevent starvation. In general, a multilevel feedback queue scheduler is defined by the following parameters: The number of queues The scheduling algorithm for each queue The method used to determine when to upgrade a process to a higher priority queue The method used to determine when to demote a process to a lower priority queue The method used to determine which queue a process will enter when that process needs service","title":"Multilevel Feedback-Queue Scheduling"},{"location":"os/osc/ch5/#4-thread-scheduling","text":"","title":"4 Thread Scheduling"},{"location":"os/osc/ch5/#contention-scope","text":"Process contention scope (PCS\uff0c\u8fdb\u7a0b\u7ade\u4e89\u8303\u56f4), specifies that competition for the CPU takes place among threads belonging to the same process. the thread library schedules user-level threads to run on an available LWP, on systems implementing the many-to-one and many-to-many models. To decide which kernel-level thread to schedule onto a CPU, the kernel uses system-contention scope (SCS, \u7cfb\u7edf\u7ade\u4e89\u8303\u56f4). Systems using the one-to-one model, such as Windows and Linux schedule threads using only SCS.","title":"Contention Scope"},{"location":"os/osc/ch5/#pthread-scheduling","text":"Pthreads identifies the following contention scope values: PTHREAD_SCOPE_PROCESS schedules threads using PCS scheduling. PTHREAD_SCOPE_SYSTEM schedules threads using SCS scheduling. The Pthread IPC (Interprocess Communication) provides two functions for setting\u2014and getting\u2014the contention scope policy: pthread_attr_setscope(pthread_attr_t *attr, int scope) pthread_attr_getscope(pthread_attr_t *attr, int *scope) #include pthread.h #include stdio.h #define NUM_THREADS 5 /* the thread runs in this function */ void * runner ( void * param ); int main ( int argc , char * argv []) { int i , scope ; pthread_t tid [ NUM_THREADS ]; /* the thread identifier */ pthread_attr_t attr ; /* set of attributes for the thread */ /* get the default attributes */ pthread_attr_init ( attr ); /* first inquire on the current scope */ if ( pthread_attr_getscope ( attr , scope ) != 0 ) fprintf ( stderr , Unable to get scheduling scope. \\n ); else { if ( scope == PTHREAD_SCOPE_PROCESS ) printf ( PTHREAD_SCOPE_PROCESS \\n ); else if ( scope == PTHREAD_SCOPE_SYSTEM ) printf ( PTHREAD_SCOPE_SYSTEM \\n ); else fprintf ( stderr , Illegal scope value. \\n ); } /* set the scheduling algorithm to PCS or SCS */ if ( pthread_attr_setscope ( attr , PTHREAD_SCOPE_SYSTEM ) != 0 ) printf ( unable to set scheduling policy. \\n ); /* create the threads */ for ( i = 0 ; i NUM_THREADS ; i ++ ) pthread_create ( tid [ i ], attr , runner , NULL ); /** * Now join on each thread */ for ( i = 0 ; i NUM_THREADS ; i ++ ) pthread_join ( tid [ i ], NULL ); } /** * The thread will begin control in this function. */ void * runner ( void * param ) { /* do some work ... */ pthread_exit ( 0 ); }","title":"Pthread Scheduling"},{"location":"os/osc/ch5/#5-multi-processor-scheduling","text":"","title":"5 Multi-Processor Scheduling"},{"location":"os/osc/ch5/#approaches-to-multiple-processor-scheduling","text":"Asymmetric multiprocessing (AMP\uff0c\u975e\u5bf9\u79f0\u591a\u5904\u7406) All scheduling decisions, I/O processing, and other system activities handled by a single processor -- the master server; the other processors execute only user code. It is simple because only one core accesses the system data structures, reducing the need for data sharing. The master server becomes a potential bottleneck where overall system performance may be reduced. Symmetric multiprocessing (SMP\uff0c \u5bf9\u79f0\u591a\u5904\u7406) Each processor is self-scheduling. It provides two possible strategies for organizing the threads eligible to be scheduled: All threads may be in a common ready queue . Use some form of locking to protect the common ready queue from race condition All accesses to the queue would require lock ownership, it would be a performance bottleneck. Each processor may have its own private queue of threads. Most common approach on systems supporting SMP More efficient use of cache memory.","title":"Approaches to Multiple-Processor Scheduling"},{"location":"os/osc/ch5/#multicore-processors","text":"Issue : memory stalls occurs when a processor accesses memory, it spends a significant amount of time waiting for the data to become available. Occurs primarily because modern processors operate at much faster speeds than memory Occur because of a cache miss as well Solution : many recent hardware designs have implemented multithreaded processing cores in which two (or more) hardware threads (\u786c\u4ef6\u7ebf\u7a0b) are assigned to each core. If one hardware thread stalls while waiting for memory, the core can switch to another thread. From an operating system perspective, each hardware thread maintains its architectural state, such as instruction pointer and register set, and thus appears as a logical CPU that is available to run a software thread. This technique is known as chip multithreading (CMT, \u82af\u7247\u591a\u7ebf\u7a0b). Intel use the term hyper-threading (\u8d85\u7ebf\u7a0b). NOTE : The resources of the physical core (such as caches and pipelines) are shared among its hardware threads, and a processing core can only execute one hardware thread at a time. Two levels of scheduling needed: It chooses which software thread to run on each hardware thread. It may choose any scheduling algorithm. It chooses which hardware thread to run on CPU. Use a simple round-robin algorithm assigned to each hardware thread a dynamic urgency value ranging from 0 to 7, with 0 representing the lowest urgency and 7 the highest.","title":"Multicore Processors"},{"location":"os/osc/ch5/#load-balancing","text":"Load balancing (\u8d1f\u8f7d\u5747\u8861) attempts to keep the workload evenly distributed across all processors in an SMP system. Two general approaches to load balancing: Push migration : a specific task periodically checks the load on each processor and -- if it finds an imbalance -- evenly distributes the load by moving (or pushing) threads from overloaded to idle or less-busy processors. Pull migration : an idle processor pulls a waiting task from a busy processor. They are not mutually exclusive and are, in fact, often implemented in parallel on load-balancing systems.","title":"Load Balancing"},{"location":"os/osc/ch5/#processor-affinity","text":"Because of the high cost of invalidating and repopulating caches, most operating systems with SMP support try to avoid migrating a thread from one processor to another and instead attempt to keep a thread running on the same processor and take advantage of a warm cache. This is known as processor affinity (\u5904\u7406\u5668\u4eb2\u548c\u6027)\u3002 Common ready queue and per-processor ready queue(section 5.1): If we adopt the approach of a common ready queue, a thread may be selected for execution by any processor. Thus, if a thread is scheduled on a new processor, that processor\u2019s cache must be repopulated. With private, per-processor ready queues, a thread is always scheduled on the same processor and can therefore benefit from the contents of a warm cache. The main-memory architecture of a system can affect processor affinity issues as well. Non-uniform memory access (NUMA, \u975e\u4e00\u81f4\u6027\u5185\u5b58\u8bbf\u95ee) where there are two physical processor chips each with their own CPU and local memory. A CPU has faster access to its local memory than to memory local to another CPU. Interestingly, load balancing often counteracts the benefits of processor affinity.","title":"Processor Affinity"},{"location":"os/osc/ch5/#6-real-time-cpu-scheduling","text":"Two kinds of real-time systems exist: Soft real-time systems (\u8f6f\u5b9e\u65f6\u7cfb\u7edf) provide no guarantee as to when a critical real-time process will be scheduled. Hard real-time system (\u786c\u5b9e\u65f6\u7cfb\u7edf) have stricter requirements, A task must be serviced by its deadline; service after the deadline has expired is the same as no service at all.","title":"6 Real-Time CPU Scheduling"},{"location":"os/osc/ch5/#minimizing-latency","text":"When an event occurs, the system must respond to and service it as quickly as possible. Event latency is the amount of time that elapses from when an event occurs to when it is serviced. Two types of latencies affect the performance of real-time systems: Interrupt latency : the period of time from the arrival of an interrupt at the CPU to the start of the routine that services the interrupt Fist, complete the instruction it is executing and determine the type of interrupt that occurred. Second, save the state of the current process before servicing the interrupt using the specific interrupt service routine One important factor contributing to interrupt latency is the amount of time interrupts may be disabled while kernel data structures are being updated. Real-time operating systems require that interrupts be disabled for only very short periods of time. Dispatch latency : the time required for the dispatcher to stop one process and start another is known as dispatch latency.","title":"Minimizing latency"},{"location":"os/osc/ch5/#rate-monotonic-scheduling","text":"The rate-monotonic scheduling (\u5355\u8c03\u901f\u7387\u8c03\u5ea6) algorithm schedules periodic tasks using a static priority policy with preemption. Upon entering the system, each periodic task is assigned a priority inversely based on its period . The shorter the period, the higher the priority; the longer the period, the lower the priority. It assumes that the processing time of a periodic process is the same for each CPU burst. That is, every time a process acquires the CPU, the duration of its CPU burst is the same. Before we proceed with the details, we must define certain characteristics of the processes that are to be scheduled. The processes are considered periodic . Once a periodic process has acquired the CPU, it has a fixed processing time t t , a deadline d d by which it must be serviced by the CPU, and a period p p . The rate of a periodic task is 1/p 1/p . Let's consider an example. We have two processes, P_1 P_1 and P_2 P_2 . The periods: - P_1=50 P_1=50 and P_2=100 P_2=100 The processing time: t_1=20 t_1=20 and t_2=35 t_2=35 The deadline requires that it complete its CPU burst by the start of its next period. Now suppose we use rate-monotonic scheduling: We assign P_1 P_1 a higher priority than P_2 P_2 because the period of P_1 P_1 is shorter than that of P_2 P_2 . P_1 P_1 starts first and completes its CPU burst at time 20, thereby meeting its first deadline. P_2 P_2 starts running at this point and runs until time 50. At this time, it is preempted by P_1 P_1 , although it still has 5 milliseconds remaining in its CPU burst. P_1 P_1 completes its CPU burst at time 70, at which point the scheduler resumes P_2 P_2 . P_2 P_2 completes its CPU burst at time 75, also meeting its first deadline. The system is idle until time 100, when P_1 P_1 is scheduled again.","title":"Rate-Monotonic Scheduling"},{"location":"os/osc/ch5/#7-linux-scheduling","text":"","title":"7 Linux Scheduling"},{"location":"os/osc/ch5/#completely-fair-scheduler","text":"The Completely Fair Scheduler (CFS\uff0c\u5b8c\u5168\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5) is the default Linux scheduling algorithm after release 2.6.23 of the kernel. Each task has a virtual runtime (\u865a\u62df\u8fd0\u884c\u65f6) value, which is its actual runtime normalized to the number of ready tasks. Task priority is incorporated as a decay factor into this formula. Lower-priority tasks have higher rates of decay than higher-priority tasks. The CPU is allocated to the task with the smallest virtual runtime value. Standard Linux kernels implement two scheduling classes (\u8c03\u5ea6\u7c7b): a default scheduling class using the CFS scheduling algorithm a real-time scheduling class. Each runnable task is placed in a red-black tree - a balanced binary search tree whose key is based on the value of virtual runtime vruntime . discover the leftmost node will require O(\\log N) O(\\log N) operations. Linux scheduler caches the leftmost node in the variable rb_leftmost , and requires only retrieving the cached value.","title":"Completely Fair Scheduler"},{"location":"os/osc/ch5/#load-balancing-on-numa-systems","text":"Problem: On NUMA systems, migrating a thread may result in a memory access penalty due to either having to invalidate cache contents or, incurring longer memory access times. SOLUTION: Linux identifies a hierarchical system of scheduling domains (\u8c03\u5ea6\u57df) \u2014\u2014 a set of CPU cores that can be balanced against one another. The cores in each scheduling domain are grouped according to how they share the resources of the system. Pairs of cores share a level 2 (L2) cache and are thus organized into separate domain 0 and domain 1 . These two domains may share a level 3 (L3) cache, and are therefore organized into a processor-level domain (also known as a NUMA node). The general strategy behind CFS is to balance loads within domains, beginning at the lowest level of the hierarchy .","title":"Load Balancing on NUMA systems"},{"location":"os/osc/ch6/","text":"Operating System Concepts 6 - Synchronization Tools 1 Background A race condition (\u7ade\u4e89\u6761\u4ef6) occurs when several processes access and manipulate the same data concurrently and the outcome of the execution depends on the particular order in which the access takes place. \u591a\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u8bbf\u95ee\u548c\u64cd\u4f5c\u540c\u4e00\u6570\u636e\uff0c\u4e14\u6267\u884c\u7ed3\u679c\u4e0e\u8bbf\u95ee\u53d1\u751f\u7684\u7279\u5b9a\u987a\u5e8f\u6709\u5173\uff0c\u79f0\u4e4b\u4e3a\u7ade\u4e89\u6761\u4ef6\u3002 2 The Critical-Section problem A critical section (\u4e34\u754c\u533a) is a section of code, in which the process may be accessing and updating data that is shared with at least one other process. When one process is executing in its critical section, no other process is allowed to execute in its critical section. The critical-section problem (\u4e34\u754c\u533a\u95ee\u9898) is to design a protocol that the processes can use to synchronize their activity so as to cooperatively share data. Each process must request permission to enter its critical section. The section of code implementing this request is the entry section (\u8fdb\u5165\u533a) The critical section may be followed by an exit section (\u9000\u51fa\u533a)\u3002 The remaining code is the remainder section (\u5269\u4f59\u533a)\u3002 A solution to the critical-section problem must satisfy the following three requirements: Mutual exclusion (\u4e92\u65a5): If process P_i P_i is executing in its critical section, then no other processes can be executing in their critical sections. \u5982\u679c\u8fdb\u7a0b P_i P_i \u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff0c\u90a3\u4e48\u5176\u4ed6\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff1b Progress (\u524d\u8fdb): If no process is executing in its critical section and some processes wish to enter their critical sections, then only those processes that are not executing in their remainder sections can participate in deciding which will enter its critical section next, and this selection cannot be postponed indefinitely. \u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\u4e14\u6709\u8fdb\u7a0b\u9700\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u90a3\u4e48\u53ea\u6709\u90a3\u4e48\u4e0d\u5728\u5269\u4f59\u533a\u5185\u6267\u884c\u7684\u8fdb\u7a0b\u53ef\u53c2\u52a0\u9009\u62e9\uff0c\u4ee5\u786e\u5b9a\u8c01\u80fd\u4e0b\u4e00\u4e2a\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4e14\u8fd9\u79cd\u9009\u62e9\u4e0d\u80fd\u65e0\u9650\u63a8\u8fdf\uff1b Bounded waiting (\u6709\u9650\u7b49\u5f85): There exists a bound, or limit, on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted. \u4ece\u4e00\u4e2a\u8fdb\u7a0b\u505a\u51fa\u8fdb\u5165\u4e34\u754c\u533a\u7684\u8bf7\u6c42\uff0c\u76f4\u5230\u8be5\u8bf7\u6c42\u5141\u8bb8\u4e3a\u6b62\uff0c\u5176\u4ed6\u8fdb\u7a0b\u5141\u8bb8\u8fdb\u5165\u5176\u4e34\u754c\u533a\u5185\u7684\u6b21\u6570\u6709\u4e0a\u9650\u3002 Two general approaches are used to handle critical sections in operating systems: preemptive kernels \uff08\u62a2\u5360\u5185\u6838\uff09 and nonpreemptive kernels \uff08\u975e\u62a2\u5360\u5185\u6838\uff09. A preemptive kernel allows a process to be preempted while it is running in kernel mode. \u62a2\u5360\u5185\u6838\u5141\u8bb8\u5904\u4e8e\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u88ab\u62a2\u5360\u3002 A nonpreemptive kernel does not allow a process running in kernel mode to be preempted.A kernel-model process will run until it exists kernel mode, blocks, or voluntarily yields control of the CPU.\u975e\u62a2\u5360\u5185\u6838\u4e0d\u5141\u8bb8\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u88ab\u62a2\u5360\u3002 A nonpreemptive kernel is essentially free from race conditions on kernel data structures, as only on process is active in the kernel at at time. \u975e\u62a2\u5360\u5185\u6838\u7684\u5185\u6838\u4ece\u6839\u672c\u4e0a\u4e0d\u4f1a\u5bfc\u81f4\u7ade\u4e89\u6761\u4ef6\uff0c\u56e0\u4e3a\u5728\u5185\u6838\u4e2d\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u662f\u6d3b\u8dc3\u7684\u3002 Preemptive kernels must be carefully designed to ensure that shared kernel data are free from race conditions. \u5bf9\u4e8e\u62a2\u5360\u5185\u6838\u9700\u8981\u8ba4\u771f\u8bbe\u8ba1\u4ee5\u786e\u4fdd\u5171\u4eab\u5185\u548c\u6570\u636e\u514d\u4e8e\u7ade\u4e89\u6761\u4ef6\u3002 A preemptive kernel may be more responsive, since there is less risk that a kernel-model process will run for an arbitrarily long period before relinquishing the processor to waiting process. \u62a2\u5360\u5185\u6838\u7684\u54cd\u5e94\u66f4\u5feb\uff0c\u56e0\u4e3a\u5904\u4e8e\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u5728\u91ca\u653eCPU\u4e4b\u524d\u4e0d\u4f1a\u8fd0\u884c\u8fc7\u4e45\u3002 A preemptive kernel is more suitable for real-time programming, as it will allow a real-time process to preemptive a process currently running in the kernel. \u62a2\u5360\u5185\u6838\u66f4\u9002\u5408\u5b9e\u65f6\u7f16\u7a0b\uff0c\u56e0\u4e3a\u5b83\u80fd\u5141\u8bb8\u5b9e\u65f6\u8fdb\u7a0b\u62a2\u5360\u5904\u4e8e\u5185\u6838\u6a21\u5f0f\u8fd0\u884c\u7684\u5176\u4ed6\u8fdb\u7a0b\u3002 3 Peterson's Solution Peterson\u2019s solution (Peterson \u7b97\u6cd5) is restricted to two processes that alternate execution between their critical sections and remainder sections. The processes are numbered P_0 P_0 and P_1 P_1 . For convenience, when presenting P_i P_i , we use P_j P_j to denote the other process; that is j j equals 1-i 1-i . Peterson's solution requires the two processes to share two data items: int turn ; boolean flag [ 2 ]; The structure of process P_i P_i in Peterson's solution. while ( true ) { flag [ i ] = true ; turn = j ; while ( flag [ j ] turn == j ) ; /* critical section */ flag [ i ] = false ; /*remainder section */ } The variable turn indicates whose turn it is to enter its critical section. The flag array is used to indicate if a process is ready to enter its critical section. Note Peterson\u2019s solution is not guaranteed to work on modern computer architectures for the primary reason that, to improve system performance, processors and/or compilers may reorder read and write operations that have no dependencies . If the assignments of the first two statements that appear in the entry section of Peterson's solution are reordered. It is possible that both threads may be active in their critical sections at the same time. 4 Hardware support for Synchronization Hardware support for the critical-section problem includes: Memory barriers Hardware instructions Atomic variables Memory barriers How a computer architecture determines what memory guarantees it will provide to an application program is known as its memory model (\u5185\u5b58\u6a21\u578b). In general, a memory model falls into one of two categories: Strongly ordered , where a memory modification on one processor is immediately visible to all other processors. Weakly ordered , where modifications to memory on one processor may not be immediately visible to other processors. Computer architectures provide instructions that can force any changes in memory to be propagated to all other processors, thereby ensuring that memory modifications are visible to threads running on other processors. Such instruction are known as memory barriers (\u5185\u5b58\u5c4f\u969c). When a memory barrier instruction is performed, the system ensures that all loads and stores are completed before any subsequent load or store operations are performed. Hardware instructions Many modern computer systems provide special hardware instructions that allow either to test and modify the content of a word or to swap the contents of two words atomically - that is, one uninterruptible unit. The definition of the atomic test_and_set() instruction: boolean test_and_set ( boolean * target ) { boolean rv = * target ; * target = true ; return rv ; } Mutual-exclusion implementation with test_and_set() : do { while ( test_and_set ( lock )) ; /* do nothing */ /* critical section */ lock = false ; /* remainder section */ } while ( true ); The definition of the atomic compare_and_swap() \uff08CAS\uff0c \u6bd4\u8f83\u5e76\u4ea4\u6362\uff09instruction: int compare_and_swap ( int * value , int expected , int new value ) { int temp = * value ; if ( * value == expected ) * value = new value ; return temp ; } Mutual exclusion with the compare_and_swap() instruction: while ( true ) { while ( compare_and_swap ( lock , 0 , 1 ) != 0 ) ; /* do nothing */ /* critical section */ lock = 0 ; /* remainder section */ } Atomic variables Atomic variables (\u539f\u5b50\u53d8\u91cf) provides atomic operations on basic data types such as integers and booleans. Their use is often limited to single updates of shared data such as counters and sequence generators . Important It is important to note that although atomic variables provide atomic updates, they do not entirely solve race conditions in all circumstances. increment ( sequence ); void increment ( atomic int * v ) { int temp ; do { temp = * v ; } while ( temp != compare_and_swap ( v , temp , temp + 1 )); } 5 Mutex locks ISSUE: The hardware-based solutions are complicated as well as generally inaccessible to application programmers. SOLUTION: Operating-system designers build higher-level software tools. The simplest of these tools is the mutex lock (\u4e92\u65a5\u9501)\u3002 A process must acquire the lock before entering a critical section; A process releases the lock when it exists the critical section. A mutex lock has a boolean variable available , whose value indicates if the lock is available or not. Calls to either acquire() or release() must be performed atomically. Thus mutex locks can be implemented using the CAS operation. Solution to the critical-section problem using mutex locks: while ( true ) { /* acquire lock */ /* critical section */ /* release lock */ /* remainder section */ } The definition of acquire() is as follows: acquire () { while ( ! available ) ; /* busy wait */ available = false ; } The definition of release() is as follows: release (){ available = true ; } The main disadvantage of the implementation is that it requires busy waiting (\u5fd9\u7b49\u5f85). While a process is in its critical section, any other process that tries enter its critical section must loop continuously in the call to acquire() . It wastes CPU cycles. Because the process \"spins\" while waiting for the lock to become available, this type of mutex lock is also called a spinlock \uff08\u81ea\u65cb\u9501\uff09\u3002 Advantage: no context switch is required Spinlocks are not appropriate for single-processor systems yet are often used in multiprocessor systems. POSIX API for Spinlocks 6 Semaphores A semaphore (\u4fe1\u53f7\u91cf) S is an integer variable that, apart from initialization, is accessed only through two standard atomic operations: wait() and signal() . \u4fe1\u53f7\u91cfS\u662f\u4e2a\u6574\u6570\u53d8\u91cf\uff0c\u9664\u4e86\u521d\u59cb\u5316\u5916\uff0c\u5b83\u53ea\u80fd\u901a\u8fc7\u4e24\u4e2a\u6807\u51c6\u539f\u5b50\u64cd\u4f5c\uff1a wait() \u548c signal() \u6765\u8bbf\u95ee\u3002 The definition of wait() is as follows: wait ( S ){ while ( S = 0 ) ; // busy wait S -- ; { The definition of signal() is as follows: signal ( S ){ S ++ ; } All modifications to the integer value of the semaphore in the wait() and signal() operations must be executed atomically. \u5728 wait() \u548c signal() \u64cd\u4f5c\u4e2d\uff0c\u5bf9\u4fe1\u53f7\u91cf\u6574\u578b\u503c\u7684\u4fee\u6539\u5fc5\u987b\u4e0d\u53ef\u5206\u5730\u6267\u884c\u3002 Operating systems often distinguish between counting and binary semaphores.\u901a\u5e38\u64cd\u4f5c\u7cfb\u7edf\u533a\u5206\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u3002 The value of a counting semaphore (\u8ba1\u6570\u4fe1\u53f7\u91cf) can range over an unrestricted domain.\u8ba1\u6570\u4fe1\u53f7\u91cf\u7684\u503c\u57df\u4e0d\u53d7\u9650\u5236\u3002 The value of a binary semaphore (\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf) can range only between 0 and 1. \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u7684\u503c\u53ea\u80fd\u4e3a0\u62161\u3002 Counting semaphores can be used to control access to a given resource consisting of a finite number of instances. The semaphore is initialized to the number of resources available. Each process that wishes to use a resource performs a wait() operation on the semaphore (thereby decrementing the count). When a process releases a resource, it performs a signal() operation (incrementing the count). When the count for the semaphore goes to 0, all resources are being used. After that, processes that wish to use a resource will block until the count becomes greater than 0. POSIX API for Semaphores Java API for Semaphores 7 Monitors Monitor Usage Issues: various types of errors can be generated easily when programmers use semaphores or mutex locks incorrectly to solve the critical-section problem. interchanges the order of wait() and signal() replaces signal() with wait() omits wait() or signal() Solution: An abstract data type, monitor (\u7ba1\u7a0b), includes a set of programmer-defined operation related to mutual exclusion within the monitor. The monitor construct ensures that only one process at a time is active within the monitor. Pseudocode syntax of a monitor: monitor monitor name { /* shared variable declarations */ function P1 ( . . . ) { . . .} function P2 ( . . . ) { . . .} . . function Pn ( . . . ) { . . .} initialization code ( . . . ) { . . .} } A monitor uses condition variables that allow processes to wait for certain conditions to become true and to signal one another when conditions have been set to true: \\text{condition x, y;} \\text{condition x, y;} The only operations that can be invoked on a condition variable are wait() and signal() . Implementing a Monitor Using Semaphores binary semaphore next : the signaling processes use it to suspend themselves. integer variable next_count : to count the number of processes suspended on next . condition x , binary semaphore x_sem , and integer variable x_count monitor ResourceAllocator { boolean busy ; condition x ; void acquire ( int time ) { if ( busy ) x . wait ( time ); busy = true ; } void release () { busy = false ; x . signal (); } initialization code () { busy = false ; } signal () { if ( x_count 0 ) { next_count ++ ; signal ( x_sem ); wait ( next ); next_count -- ; } } wait () { x_count ++ ; if ( next_count 0 ) signal ( next ); else signal ( mutex ); wait ( x_sem ); x count -- ; } } Monitor in Java 8 Liveness Deadlock Consider two threads A and B that both need simultaneous access to resources 1 and 2: Thread A runs, grabs the lock for Resource 1 . \u2192 CONTEXT SWITCH \u2190 Thread B runs, grabs the lock for Resource 2 . \u2192 CONTEXT SWITCH \u2190 Thread A runs, tries to acquire the lock for Resource 2 . \u2192 THREAD A SLEEPS \u2190 Thread B runs, tries to acquire the lock for Resource 1 . \u2192 THREAD B SLEEPS \u2190 Deadlocked (\u6b7b\u9501): two or more processes are waiting indefinitely for an event . A set of processes is in a deadlocked state when every process in the set is waiting for an event that can be caused only by another process in the set. Priority Inversion A scheduling challenge arises when a higher-priority process needs to read or modify kernel data that are currently being accessed by a lower-priority process\u2014or a chain of lower-priority processes. Since kernel data are typically protected with a lock, the higher-priority process will have to wait for a lower-priority one to finish with the resource. The situation becomes more complicated if the lower-priority process is preempted in favor of another process with a higher priority. As an example, assume we have three processes\u2014 L L , M M , and H H \u2014whose priorities follow the order L M H L < M < H . Assume that process H H requires a semaphore S S , which is currently being accessed by process L L . Ordinarily, process H H would wait for L L to finish using resource S. However, now suppose that process M M becomes runnable, thereby preempting process L L . Indirectly, a process with a lower priority\u2014process M M \u2014has affected how long process H H must wait for L L to relinquish resource S S . This liveness problem is known as priority inversion (\u4f18\u5148\u7ea7\u53cd\u8f6c), and it can occur only in systems with more than two priorities. Solution\uff1a priority-inheritance protocol (\u4f18\u5148\u7ea7\u7ee7\u627f\u534f\u8bae)\uff1a All processes that are accessing resources needed by a higher-priority process inherit the higher priority until they are finished with the resources. When they are finished, priorities revert to original values. 9 Evaluation Performance differences between CAS-based synchronization and traditional synchronization (such as mutex locks and semaphores) under varying contention loads: Uncontended \uff1aAlthough both options are generally fast, CAS protection will be somewhat faster than traditional synchronization. Moderate contention \uff1aCAS protection will be faster\u2014possibly much faster \u2014than traditional synchronization. High contention \uff1aUnder very highly contended loads, traditional synchronization will ultimately be faster than CAS-based synchronization. Higher-level tools such as monitors and condition variables may have significant overhead, and may be less likely to scale in highly contended situations.","title":"Chapter 6: Synchronization Tools"},{"location":"os/osc/ch6/#operating-system-concepts-6-synchronization-tools","text":"","title":"Operating System Concepts 6 - Synchronization Tools"},{"location":"os/osc/ch6/#1-background","text":"A race condition (\u7ade\u4e89\u6761\u4ef6) occurs when several processes access and manipulate the same data concurrently and the outcome of the execution depends on the particular order in which the access takes place. \u591a\u4e2a\u8fdb\u7a0b\u5e76\u53d1\u8bbf\u95ee\u548c\u64cd\u4f5c\u540c\u4e00\u6570\u636e\uff0c\u4e14\u6267\u884c\u7ed3\u679c\u4e0e\u8bbf\u95ee\u53d1\u751f\u7684\u7279\u5b9a\u987a\u5e8f\u6709\u5173\uff0c\u79f0\u4e4b\u4e3a\u7ade\u4e89\u6761\u4ef6\u3002","title":"1 Background"},{"location":"os/osc/ch6/#2-the-critical-section-problem","text":"A critical section (\u4e34\u754c\u533a) is a section of code, in which the process may be accessing and updating data that is shared with at least one other process. When one process is executing in its critical section, no other process is allowed to execute in its critical section. The critical-section problem (\u4e34\u754c\u533a\u95ee\u9898) is to design a protocol that the processes can use to synchronize their activity so as to cooperatively share data. Each process must request permission to enter its critical section. The section of code implementing this request is the entry section (\u8fdb\u5165\u533a) The critical section may be followed by an exit section (\u9000\u51fa\u533a)\u3002 The remaining code is the remainder section (\u5269\u4f59\u533a)\u3002 A solution to the critical-section problem must satisfy the following three requirements: Mutual exclusion (\u4e92\u65a5): If process P_i P_i is executing in its critical section, then no other processes can be executing in their critical sections. \u5982\u679c\u8fdb\u7a0b P_i P_i \u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff0c\u90a3\u4e48\u5176\u4ed6\u8fdb\u7a0b\u90fd\u4e0d\u80fd\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\uff1b Progress (\u524d\u8fdb): If no process is executing in its critical section and some processes wish to enter their critical sections, then only those processes that are not executing in their remainder sections can participate in deciding which will enter its critical section next, and this selection cannot be postponed indefinitely. \u5982\u679c\u6ca1\u6709\u8fdb\u7a0b\u5728\u5176\u4e34\u754c\u533a\u5185\u6267\u884c\u4e14\u6709\u8fdb\u7a0b\u9700\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u90a3\u4e48\u53ea\u6709\u90a3\u4e48\u4e0d\u5728\u5269\u4f59\u533a\u5185\u6267\u884c\u7684\u8fdb\u7a0b\u53ef\u53c2\u52a0\u9009\u62e9\uff0c\u4ee5\u786e\u5b9a\u8c01\u80fd\u4e0b\u4e00\u4e2a\u8fdb\u5165\u4e34\u754c\u533a\uff0c\u4e14\u8fd9\u79cd\u9009\u62e9\u4e0d\u80fd\u65e0\u9650\u63a8\u8fdf\uff1b Bounded waiting (\u6709\u9650\u7b49\u5f85): There exists a bound, or limit, on the number of times that other processes are allowed to enter their critical sections after a process has made a request to enter its critical section and before that request is granted. \u4ece\u4e00\u4e2a\u8fdb\u7a0b\u505a\u51fa\u8fdb\u5165\u4e34\u754c\u533a\u7684\u8bf7\u6c42\uff0c\u76f4\u5230\u8be5\u8bf7\u6c42\u5141\u8bb8\u4e3a\u6b62\uff0c\u5176\u4ed6\u8fdb\u7a0b\u5141\u8bb8\u8fdb\u5165\u5176\u4e34\u754c\u533a\u5185\u7684\u6b21\u6570\u6709\u4e0a\u9650\u3002 Two general approaches are used to handle critical sections in operating systems: preemptive kernels \uff08\u62a2\u5360\u5185\u6838\uff09 and nonpreemptive kernels \uff08\u975e\u62a2\u5360\u5185\u6838\uff09. A preemptive kernel allows a process to be preempted while it is running in kernel mode. \u62a2\u5360\u5185\u6838\u5141\u8bb8\u5904\u4e8e\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u88ab\u62a2\u5360\u3002 A nonpreemptive kernel does not allow a process running in kernel mode to be preempted.A kernel-model process will run until it exists kernel mode, blocks, or voluntarily yields control of the CPU.\u975e\u62a2\u5360\u5185\u6838\u4e0d\u5141\u8bb8\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u88ab\u62a2\u5360\u3002 A nonpreemptive kernel is essentially free from race conditions on kernel data structures, as only on process is active in the kernel at at time. \u975e\u62a2\u5360\u5185\u6838\u7684\u5185\u6838\u4ece\u6839\u672c\u4e0a\u4e0d\u4f1a\u5bfc\u81f4\u7ade\u4e89\u6761\u4ef6\uff0c\u56e0\u4e3a\u5728\u5185\u6838\u4e2d\u4e00\u6b21\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u662f\u6d3b\u8dc3\u7684\u3002 Preemptive kernels must be carefully designed to ensure that shared kernel data are free from race conditions. \u5bf9\u4e8e\u62a2\u5360\u5185\u6838\u9700\u8981\u8ba4\u771f\u8bbe\u8ba1\u4ee5\u786e\u4fdd\u5171\u4eab\u5185\u548c\u6570\u636e\u514d\u4e8e\u7ade\u4e89\u6761\u4ef6\u3002 A preemptive kernel may be more responsive, since there is less risk that a kernel-model process will run for an arbitrarily long period before relinquishing the processor to waiting process. \u62a2\u5360\u5185\u6838\u7684\u54cd\u5e94\u66f4\u5feb\uff0c\u56e0\u4e3a\u5904\u4e8e\u5185\u6838\u6a21\u5f0f\u7684\u8fdb\u7a0b\u5728\u91ca\u653eCPU\u4e4b\u524d\u4e0d\u4f1a\u8fd0\u884c\u8fc7\u4e45\u3002 A preemptive kernel is more suitable for real-time programming, as it will allow a real-time process to preemptive a process currently running in the kernel. \u62a2\u5360\u5185\u6838\u66f4\u9002\u5408\u5b9e\u65f6\u7f16\u7a0b\uff0c\u56e0\u4e3a\u5b83\u80fd\u5141\u8bb8\u5b9e\u65f6\u8fdb\u7a0b\u62a2\u5360\u5904\u4e8e\u5185\u6838\u6a21\u5f0f\u8fd0\u884c\u7684\u5176\u4ed6\u8fdb\u7a0b\u3002","title":"2 The Critical-Section problem"},{"location":"os/osc/ch6/#3-petersons-solution","text":"Peterson\u2019s solution (Peterson \u7b97\u6cd5) is restricted to two processes that alternate execution between their critical sections and remainder sections. The processes are numbered P_0 P_0 and P_1 P_1 . For convenience, when presenting P_i P_i , we use P_j P_j to denote the other process; that is j j equals 1-i 1-i . Peterson's solution requires the two processes to share two data items: int turn ; boolean flag [ 2 ]; The structure of process P_i P_i in Peterson's solution. while ( true ) { flag [ i ] = true ; turn = j ; while ( flag [ j ] turn == j ) ; /* critical section */ flag [ i ] = false ; /*remainder section */ } The variable turn indicates whose turn it is to enter its critical section. The flag array is used to indicate if a process is ready to enter its critical section. Note Peterson\u2019s solution is not guaranteed to work on modern computer architectures for the primary reason that, to improve system performance, processors and/or compilers may reorder read and write operations that have no dependencies . If the assignments of the first two statements that appear in the entry section of Peterson's solution are reordered. It is possible that both threads may be active in their critical sections at the same time.","title":"3 Peterson's Solution"},{"location":"os/osc/ch6/#4-hardware-support-for-synchronization","text":"Hardware support for the critical-section problem includes: Memory barriers Hardware instructions Atomic variables","title":"4 Hardware support for Synchronization"},{"location":"os/osc/ch6/#memory-barriers","text":"How a computer architecture determines what memory guarantees it will provide to an application program is known as its memory model (\u5185\u5b58\u6a21\u578b). In general, a memory model falls into one of two categories: Strongly ordered , where a memory modification on one processor is immediately visible to all other processors. Weakly ordered , where modifications to memory on one processor may not be immediately visible to other processors. Computer architectures provide instructions that can force any changes in memory to be propagated to all other processors, thereby ensuring that memory modifications are visible to threads running on other processors. Such instruction are known as memory barriers (\u5185\u5b58\u5c4f\u969c). When a memory barrier instruction is performed, the system ensures that all loads and stores are completed before any subsequent load or store operations are performed.","title":"Memory barriers"},{"location":"os/osc/ch6/#hardware-instructions","text":"Many modern computer systems provide special hardware instructions that allow either to test and modify the content of a word or to swap the contents of two words atomically - that is, one uninterruptible unit. The definition of the atomic test_and_set() instruction: boolean test_and_set ( boolean * target ) { boolean rv = * target ; * target = true ; return rv ; } Mutual-exclusion implementation with test_and_set() : do { while ( test_and_set ( lock )) ; /* do nothing */ /* critical section */ lock = false ; /* remainder section */ } while ( true ); The definition of the atomic compare_and_swap() \uff08CAS\uff0c \u6bd4\u8f83\u5e76\u4ea4\u6362\uff09instruction: int compare_and_swap ( int * value , int expected , int new value ) { int temp = * value ; if ( * value == expected ) * value = new value ; return temp ; } Mutual exclusion with the compare_and_swap() instruction: while ( true ) { while ( compare_and_swap ( lock , 0 , 1 ) != 0 ) ; /* do nothing */ /* critical section */ lock = 0 ; /* remainder section */ }","title":"Hardware instructions"},{"location":"os/osc/ch6/#atomic-variables","text":"Atomic variables (\u539f\u5b50\u53d8\u91cf) provides atomic operations on basic data types such as integers and booleans. Their use is often limited to single updates of shared data such as counters and sequence generators . Important It is important to note that although atomic variables provide atomic updates, they do not entirely solve race conditions in all circumstances. increment ( sequence ); void increment ( atomic int * v ) { int temp ; do { temp = * v ; } while ( temp != compare_and_swap ( v , temp , temp + 1 )); }","title":"Atomic variables"},{"location":"os/osc/ch6/#5-mutex-locks","text":"ISSUE: The hardware-based solutions are complicated as well as generally inaccessible to application programmers. SOLUTION: Operating-system designers build higher-level software tools. The simplest of these tools is the mutex lock (\u4e92\u65a5\u9501)\u3002 A process must acquire the lock before entering a critical section; A process releases the lock when it exists the critical section. A mutex lock has a boolean variable available , whose value indicates if the lock is available or not. Calls to either acquire() or release() must be performed atomically. Thus mutex locks can be implemented using the CAS operation. Solution to the critical-section problem using mutex locks: while ( true ) { /* acquire lock */ /* critical section */ /* release lock */ /* remainder section */ } The definition of acquire() is as follows: acquire () { while ( ! available ) ; /* busy wait */ available = false ; } The definition of release() is as follows: release (){ available = true ; } The main disadvantage of the implementation is that it requires busy waiting (\u5fd9\u7b49\u5f85). While a process is in its critical section, any other process that tries enter its critical section must loop continuously in the call to acquire() . It wastes CPU cycles. Because the process \"spins\" while waiting for the lock to become available, this type of mutex lock is also called a spinlock \uff08\u81ea\u65cb\u9501\uff09\u3002 Advantage: no context switch is required Spinlocks are not appropriate for single-processor systems yet are often used in multiprocessor systems. POSIX API for Spinlocks","title":"5 Mutex locks"},{"location":"os/osc/ch6/#6-semaphores","text":"A semaphore (\u4fe1\u53f7\u91cf) S is an integer variable that, apart from initialization, is accessed only through two standard atomic operations: wait() and signal() . \u4fe1\u53f7\u91cfS\u662f\u4e2a\u6574\u6570\u53d8\u91cf\uff0c\u9664\u4e86\u521d\u59cb\u5316\u5916\uff0c\u5b83\u53ea\u80fd\u901a\u8fc7\u4e24\u4e2a\u6807\u51c6\u539f\u5b50\u64cd\u4f5c\uff1a wait() \u548c signal() \u6765\u8bbf\u95ee\u3002 The definition of wait() is as follows: wait ( S ){ while ( S = 0 ) ; // busy wait S -- ; { The definition of signal() is as follows: signal ( S ){ S ++ ; } All modifications to the integer value of the semaphore in the wait() and signal() operations must be executed atomically. \u5728 wait() \u548c signal() \u64cd\u4f5c\u4e2d\uff0c\u5bf9\u4fe1\u53f7\u91cf\u6574\u578b\u503c\u7684\u4fee\u6539\u5fc5\u987b\u4e0d\u53ef\u5206\u5730\u6267\u884c\u3002 Operating systems often distinguish between counting and binary semaphores.\u901a\u5e38\u64cd\u4f5c\u7cfb\u7edf\u533a\u5206\u8ba1\u6570\u4fe1\u53f7\u91cf\u548c\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u3002 The value of a counting semaphore (\u8ba1\u6570\u4fe1\u53f7\u91cf) can range over an unrestricted domain.\u8ba1\u6570\u4fe1\u53f7\u91cf\u7684\u503c\u57df\u4e0d\u53d7\u9650\u5236\u3002 The value of a binary semaphore (\u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf) can range only between 0 and 1. \u4e8c\u8fdb\u5236\u4fe1\u53f7\u91cf\u7684\u503c\u53ea\u80fd\u4e3a0\u62161\u3002 Counting semaphores can be used to control access to a given resource consisting of a finite number of instances. The semaphore is initialized to the number of resources available. Each process that wishes to use a resource performs a wait() operation on the semaphore (thereby decrementing the count). When a process releases a resource, it performs a signal() operation (incrementing the count). When the count for the semaphore goes to 0, all resources are being used. After that, processes that wish to use a resource will block until the count becomes greater than 0. POSIX API for Semaphores Java API for Semaphores","title":"6 Semaphores"},{"location":"os/osc/ch6/#7-monitors","text":"","title":"7 Monitors"},{"location":"os/osc/ch6/#monitor-usage","text":"Issues: various types of errors can be generated easily when programmers use semaphores or mutex locks incorrectly to solve the critical-section problem. interchanges the order of wait() and signal() replaces signal() with wait() omits wait() or signal() Solution: An abstract data type, monitor (\u7ba1\u7a0b), includes a set of programmer-defined operation related to mutual exclusion within the monitor. The monitor construct ensures that only one process at a time is active within the monitor. Pseudocode syntax of a monitor: monitor monitor name { /* shared variable declarations */ function P1 ( . . . ) { . . .} function P2 ( . . . ) { . . .} . . function Pn ( . . . ) { . . .} initialization code ( . . . ) { . . .} } A monitor uses condition variables that allow processes to wait for certain conditions to become true and to signal one another when conditions have been set to true: \\text{condition x, y;} \\text{condition x, y;} The only operations that can be invoked on a condition variable are wait() and signal() .","title":"Monitor Usage"},{"location":"os/osc/ch6/#implementing-a-monitor-using-semaphores","text":"binary semaphore next : the signaling processes use it to suspend themselves. integer variable next_count : to count the number of processes suspended on next . condition x , binary semaphore x_sem , and integer variable x_count monitor ResourceAllocator { boolean busy ; condition x ; void acquire ( int time ) { if ( busy ) x . wait ( time ); busy = true ; } void release () { busy = false ; x . signal (); } initialization code () { busy = false ; } signal () { if ( x_count 0 ) { next_count ++ ; signal ( x_sem ); wait ( next ); next_count -- ; } } wait () { x_count ++ ; if ( next_count 0 ) signal ( next ); else signal ( mutex ); wait ( x_sem ); x count -- ; } } Monitor in Java","title":"Implementing a Monitor Using Semaphores"},{"location":"os/osc/ch6/#8-liveness","text":"","title":"8 Liveness"},{"location":"os/osc/ch6/#deadlock","text":"Consider two threads A and B that both need simultaneous access to resources 1 and 2: Thread A runs, grabs the lock for Resource 1 . \u2192 CONTEXT SWITCH \u2190 Thread B runs, grabs the lock for Resource 2 . \u2192 CONTEXT SWITCH \u2190 Thread A runs, tries to acquire the lock for Resource 2 . \u2192 THREAD A SLEEPS \u2190 Thread B runs, tries to acquire the lock for Resource 1 . \u2192 THREAD B SLEEPS \u2190 Deadlocked (\u6b7b\u9501): two or more processes are waiting indefinitely for an event . A set of processes is in a deadlocked state when every process in the set is waiting for an event that can be caused only by another process in the set.","title":"Deadlock"},{"location":"os/osc/ch6/#priority-inversion","text":"A scheduling challenge arises when a higher-priority process needs to read or modify kernel data that are currently being accessed by a lower-priority process\u2014or a chain of lower-priority processes. Since kernel data are typically protected with a lock, the higher-priority process will have to wait for a lower-priority one to finish with the resource. The situation becomes more complicated if the lower-priority process is preempted in favor of another process with a higher priority. As an example, assume we have three processes\u2014 L L , M M , and H H \u2014whose priorities follow the order L M H L < M < H . Assume that process H H requires a semaphore S S , which is currently being accessed by process L L . Ordinarily, process H H would wait for L L to finish using resource S. However, now suppose that process M M becomes runnable, thereby preempting process L L . Indirectly, a process with a lower priority\u2014process M M \u2014has affected how long process H H must wait for L L to relinquish resource S S . This liveness problem is known as priority inversion (\u4f18\u5148\u7ea7\u53cd\u8f6c), and it can occur only in systems with more than two priorities. Solution\uff1a priority-inheritance protocol (\u4f18\u5148\u7ea7\u7ee7\u627f\u534f\u8bae)\uff1a All processes that are accessing resources needed by a higher-priority process inherit the higher priority until they are finished with the resources. When they are finished, priorities revert to original values.","title":"Priority Inversion"},{"location":"os/osc/ch6/#9-evaluation","text":"Performance differences between CAS-based synchronization and traditional synchronization (such as mutex locks and semaphores) under varying contention loads: Uncontended \uff1aAlthough both options are generally fast, CAS protection will be somewhat faster than traditional synchronization. Moderate contention \uff1aCAS protection will be faster\u2014possibly much faster \u2014than traditional synchronization. High contention \uff1aUnder very highly contended loads, traditional synchronization will ultimately be faster than CAS-based synchronization. Higher-level tools such as monitors and condition variables may have significant overhead, and may be less likely to scale in highly contended situations.","title":"9 Evaluation"},{"location":"os/osc/ch7/","text":"Operating System Concepts 7 - Synchronization Examples 1 Classic Problems of Synchronization The Bounded Buffer Problem We consider the producer-consumer problem with bounded buffer . The producer and consumer processes share the following data structures: int n ; semaphore mutex = 1 ; semaphore empty = n ; semaphore full = 0 ; We assume that the pool consists of n n buffers, each capable of holding one item. The mutex binary semaphore provides mutual exclusion for accesses to the buffer pool and is initialized to the value 1. The empty and full semaphores count the number of empty and full buffers. // The code for the producer process: while ( true ) { . . . /* produce an item in next produced */ . . . wait ( empty ); wait ( mutex ); . . . /* add next produced to the buffer */ . . . signal ( mutex ); signal ( full ); } //The code for the consumer process: while ( true ) { wait ( full ); wait ( mutex ); . . . /* remove an item from buffer to next consumed */ . . . signal ( mutex ); signal ( empty ); . . . /* consume the item in next consumed */ . . . } The Readers\u2013Writers Problem Suppose that a database is to be shared among several concurrent processes. Some of these processes may want only to read the database, whereas others may want to update(that is, read and write) the database. If two readers access the shared data simultaneously, no adverse effects will result. If a writer and some other processes (either a reader or a writer) access the database simultaneously, chaos may ensue. Three variables are used: mutex , rw_mutex , readcnt to implement solution. semaphore rw_mutex = 1 ; semaphore mutex = 1 ; int read count = 0 ; semaphore mutex : used to ensure mutual exclusion when readcnt is updated i.e. when any reader enters or exit from the critical section. semaphore rw_mutex : used by both readers and writers. int readcnt : the number of processes performing read in the critical section, initially 0. Writer processes: Writer requests the entry to critical section. If allowed i.e. wait() gives a true value, it enters and performs the write. If not allowed, it keeps on waiting. It exits the critical section. do { // writer requests for critical section wait ( rw_mutex ); // performs the write // leaves the critical section signal ( rw_mutex ); } while ( true ); Reader process: Reader requests the entry to critical section. If allowed: It increments the count of number of readers inside the critical section. If this reader is the first reader entering, it locks the rw_mutex semaphore to restrict the entry of writers if any reader is inside. It then, signals mutex as any other reader is allowed to enter while others are already reading. After performing reading, it exits the critical section. When exiting, it checks if no more reader is inside, it signals the semaphore rw_mutex as now, writer can enter the critical section. If not allowed, it keeps on waiting. do { // Reader wants to enter the critical section wait ( mutex ); // The number of readers has now increased by 1 readcnt ++ ; // there is at least one reader in the critical section // this ensure no writer can enter if there is even one reader // thus we give preference to readers here if ( readcnt == 1 ) wait ( rw_mutex ); // other readers can enter while this current reader is inside // the critical section signal ( mutex ); ... /* current reader performs reading here */ ... wait ( mutex ); // a reader wants to leave readcnt -- ; // that is, no reader is left in the critical section, if ( readcnt == 0 ) signal ( rw_mutex ); // writers can enter signal ( mutex ); // reader leaves } while ( true ); The Dining-Philosophers Problem The dining-philosophers problem is an example of a large class of concurrency-control problems. It is a simple representation of the need to allocate several resources among several processes in a deadlock-free and starvation-free manner. Consider five philosophers who spend their lives thinking and eating. The philosophers share a circular table surrounded by five chairs, each belonging to one philosopher. In the center of the table is a bowl of rice, and the table is laid with five single chopsticks. When a philosopher thinks, she does not interact with her colleagues. From time to time, a philosopher gets hungry and tries to pick up the two chopsticks that are closest to her (the chopsticks that are between her and her left and right neighbors). A philosopher may pick up only one chopstick at a time. Obviously, she cannot pick up a chopstick that is already in the hand of a neighbor. When a hungry philosopher has both her chopsticks at the same time, she eats without releasing the chopsticks. When she is finished eating, she puts down both chopsticks and starts thinking again Java solution of Dining Philosophers Problem 2 Synchronization within the Linux Kernel Linux provides several different mechanisms for synchronization in the kernel. The synchronization methods discussed here to synchronization within the kernel and are therefore available only to kernel developers. Atomic integer The simplest synchronization technique within the Linux kernel is an atomic integer, which is represented using the opaque data type atomic_t . All math operations using atomic integers are performed without interruption. Atomic integers are particularly efficient in situations where an integer variable\u2014such as a counter\u2014needs to be updated, since atomic operations do not require the overhead of locking mechanisms: Locks In situations where there are several variables contributing to a possible race condition, more sophisticated locking tools must be used. Mutex locks are available in Linux for protecting critical sections within the kernel. Here, a task must invoke the mutex_lock() function prior to entering a critical section and the mutex_unlock() function after exiting the critical section. Linux also provides spinlocks and semaphores (as well as reader\u2013writer versions of these two locks) for locking in the kernel. Both spinlocks and mutex locks in the Linux kernel are nonrecursive , which means that if a thread has acquired one of these locks, it cannot acquire the same lock a second time without first releasing the lock. Otherwise, the second attempt at acquiring the lock will block. Linux provides two simple system calls \u2014 preempt_disable() and preempt_enable() \u2014for disabling and enabling kernel preemption. 3 POSIX Synchronization The POSIX API is available for programmers at the user level and is not part of any particular operating-system kernel. POSIX Mutex Locks Pthreads uses the pthread_mutex_t data type for mutex locks. A mutex is created with the pthread mutex_init() function. The mutex is acquired and released with the pthread mutex_lock() and pthread mutex_unlock() functions. #include pthread.h pthread_mutex_t mutex ; /* create and initialize the mutex lock */ pthread_mutex_init ( mutex , NULL ); /* acquire the mutex lock */ pthread mutex_lock ( mutex ); /* critical section */ /* release the mutex lock */ pthread mutex_unlock ( mutex ); POSIX Spinlocks // \u521d\u59cb\u5316\u81ea\u65cb\u9501\uff1a \u7528\u6765\u7533\u8bf7\u4f7f\u7528\u81ea\u65cb\u9501\u6240\u9700\u8981\u7684\u8d44\u6e90\u5e76\u4e14\u5c06\u5b83\u521d\u59cb\u5316\u4e3a\u975e\u9501\u5b9a\u72b6\u6001 int pthread_spin_init ( pthread_spinlock_t * , int ); // \u83b7\u5f97\u4e00\u4e2a\u81ea\u65cb\u9501\uff1a\u5982\u679c\u8be5\u81ea\u65cb\u9501\u5f53\u524d\u6ca1\u6709\u88ab\u5176\u5b83\u7ebf\u7a0b\u6240\u6301\u6709\uff0c\u5219\u8c03\u7528\u8be5\u51fd\u6570\u7684\u7ebf\u7a0b\u83b7\u5f97\u8be5\u81ea\u65cb\u9501. // \u5426\u5219\u8be5\u51fd\u6570\u5728\u83b7\u5f97\u81ea\u65cb\u9501\u4e4b\u524d\u4e0d\u4f1a\u8fd4\u56de\u3002 int pthread_spin_lock ( pthread_spinlock_t * ); //\u91ca\u653e\u6307\u5b9a\u7684\u81ea\u65cb\u9501 int pthread_spin_unlock ( pthread_spinlock_t * ); // \u9500\u6bc1\u4e00\u4e2a\u81ea\u65cb\u9501 int pthread_spin_destroy ( pthread_spinlock_t * ); POSIX Semaphores Semaphores are not part of the POSIX standard and instead belong to the POSIX SEM extension. POSIX specifies two types of semaphores - named and unnamed semaphores. The advantage of named semaphores is that multiple unrelated processes can easily use a common semaphore as a synchronization mechanism by simply referring to the semaphore\u2019s name. Both Linux and macOS systems provide POSIX named semaphores. #include semaphore.h sem_t * sem ; /* Create the semaphore and initialize it to 1 * Here, we are naming the semaphore SEM. * The O_CREAT flag indicates that the semaphore will be created if it does not already exist. * The parameter 0666 indicates that the semaphore has read/write access for other processes. * The parameter 1 indicates that the semaphore is initialized to 1. */ sem = sem_open ( SEM , O_CREAT , 0666 , 1 ); /* acquire the semaphore */ sem_wait ( sem ); /* critical section */ /* release the semaphore */ sem_post ( sem ); POSIX Condition Variables 4 Synchronization in Java The Java language and its API have provided rich support for thread synchronization. Java Monitors Entities possessing both locks and wait sets are generally called monitors (although almost every language defines details somewhat differently). Since every Object in Java has a lock and a wait set that is manipulated only by methods wait, notify, notifyAll. Any Object can be serve as a monitor. [Concurrent Programming in Java 3.2.2 Monitor Mechanics] Every object in Java has associated it with a single lock. When a method is declared to be synchronized , calling the method requires owning the lock for the object. Invoking a synchronized method requires owning the lock on an object instance. If the lock is already owned by another thread, the thread calling the synchronized method blocks and is placed in the entry set for the object's lock. The entry set represents the set of threads waiting for the lock to become available. If the lock is available when a synchronized method is called, the calling thread becomes the owner of the object's lock and can enter the method. The lock is released when the thread exits the method. If the entry set for the lock is not empty when the lock is released, the JVM arbitrarily selects a thread from this set to be the owner of the lock. In addition to having a lock, every object also has associated with it a wait set consisting of a set of threads. This wait set is initially empty. When a thread enters a synchronized method, it owns the lock for the object. However, this thread may determine that it is unable to continue because a certain condition has not been met. (e.g. if the producer calls the insert() method and the buffer is full) The thread then will release the lock and wait until the condition that will allow it to continue is met. When a thread calls the wait() method, the following happens: The thread releases the lock for the object. The state of the thread is set to blocked. The thread is placed in the wait set for the object. Reentrant Locks Perhaps the simplest locking mechanism available in the API is the ReentrantLock . A ReentrantLock is owned by a single thread and is used to provide mutually exclusive access to a shared resource. It provides several additional features, such as setting a fairness parameter, which favors granting the lock to the longest-waiting thread. A thread acquires a ReentrantLock lock by invoking its lock() method. If the lock is available - or if the thread invoking lock() already owns it, lock() assigns the invoking thread lock ownership and return control. Lock key = new ReentrantLock (); key . lock (); try { /* critical section */ } finally { key . unlock (); } Semaphores The Java API also provides a counting semaphore. The constructor for the semaphore appears as Semaphore ( int value ); where value specifies the initial value of the semaphore ( a negative value is allowed). The acquire method throws an InterruptedException if the acquiring thread is interrupted. The following example illustrates using a semaphore for mutual exclusion: Semaphore sem = new Semaphore ( 1 ); try { sem . acquire (); /* critical section */ } catch ( InterruptedException ex ) { } finally { sem . release (); } Class Semaphore is a counting semaphore. Conceptually, a semaphore maintains a set of permits. Each acquire() blocks if necessary until a permit is available, and then takes it. Each release() adds a permit, potentially releasing a blocking acquirer. However, no actual permit objects are used; the Semaphore just keeps a count of the number available and acts accordingly. Java DOC - Semaphore Condition Variables Condition variables provide functionality similar to the wait() and notify() methods. To provide mutual exclusion, a condition variable must be associated with a ReentrantLock . We create a condition variable by first creating a ReentrantLock and invoking its newCondition() method, which returns a Condition object representing the condition variable for the associated ReentrantLock . Lock lock = new ReentrantLock (); Condition condVar = lock . newCondition (); Once the condition variable has been obtained, we can invoke its await() and signal() methods. Java Solution of Buffered Buffer Using condition variables JAVA DOC - Interface Condition Suppose we have a bounded buffer which supports put and take methods. If a take is attempted on an empty buffer, then the thread will block until an item becomes available; if a put is attempted on a full buffer, then the thread will block until a space becomes available. We would like to keep waiting put threads and take threads in separate wait-sets so that we can use the optimization of only notifying a single thread at a time when items or spaces become available in the buffer. This can be achieved using two Condition instances. class BoundedBuffer { final Lock lock = new ReentrantLock (); final Condition notFull = lock . newCondition (); final Condition notEmpty = lock . newCondition (); final Object [] items = new Object [ 100 ]; int putptr , takeptr , count ; public void put ( Object x ) throws InterruptedException { lock . lock (); try { while ( count == items . length ) notFull . await (); items [ putptr ] = x ; if (++ putptr == items . length ) putptr = 0 ; ++ count ; notEmpty . signal (); } finally { lock . unlock (); } } public Object take () throws InterruptedException { lock . lock (); try { while ( count == 0 ) notEmpty . await (); Object x = items [ takeptr ]; if (++ takeptr == items . length ) takeptr = 0 ; -- count ; notFull . signal (); return x ; } finally { lock . unlock (); } } } Atomic Variables Java Tutorial - Atomic Variables The java.util.concurrent.atomic package defines classes that support atomic operations on single variables: AtomicBoolean : A boolean value that may be updated atomically. AtomicInteger : An int value that may be updated atomically AtomicReference : An object reference that may be updated atomically. All classes have get and set methods that works like reads and writes on volatile variables. That is, a set has a happens-before relationship with any subsequent get on the same variable. The atomic compareAndSet method also has these memory consistency features, as do the simple atomic arithmetic methods that apply to integer atomic variables. Suppose we have a Counter class: class Counter { private int c = 0 ; public void increment () { c ++; } public void decrement () { c --; } public int value () { return c ; } } One way to keep Counter free from race condition, is to make its methods as synchronized methods. Another way is to replace the int filed with an AtomicInteger : import import java.util.concurrent.atomic.AtomicInteger ; class AtomicCounter { private AtomicInteger c = new AtomicInteger ( 0 ); public void increment () { c . incrementAndGet (); } public void decrement () { c . decrementAndGet (); } public int value () { return c . get (); } }","title":"Chapter 7: Synchronization Examples"},{"location":"os/osc/ch7/#operating-system-concepts-7-synchronization-examples","text":"","title":"Operating System Concepts 7 - Synchronization Examples"},{"location":"os/osc/ch7/#1-classic-problems-of-synchronization","text":"","title":"1 Classic Problems of Synchronization"},{"location":"os/osc/ch7/#the-bounded-buffer-problem","text":"We consider the producer-consumer problem with bounded buffer . The producer and consumer processes share the following data structures: int n ; semaphore mutex = 1 ; semaphore empty = n ; semaphore full = 0 ; We assume that the pool consists of n n buffers, each capable of holding one item. The mutex binary semaphore provides mutual exclusion for accesses to the buffer pool and is initialized to the value 1. The empty and full semaphores count the number of empty and full buffers. // The code for the producer process: while ( true ) { . . . /* produce an item in next produced */ . . . wait ( empty ); wait ( mutex ); . . . /* add next produced to the buffer */ . . . signal ( mutex ); signal ( full ); } //The code for the consumer process: while ( true ) { wait ( full ); wait ( mutex ); . . . /* remove an item from buffer to next consumed */ . . . signal ( mutex ); signal ( empty ); . . . /* consume the item in next consumed */ . . . }","title":"The Bounded Buffer Problem"},{"location":"os/osc/ch7/#the-readerswriters-problem","text":"Suppose that a database is to be shared among several concurrent processes. Some of these processes may want only to read the database, whereas others may want to update(that is, read and write) the database. If two readers access the shared data simultaneously, no adverse effects will result. If a writer and some other processes (either a reader or a writer) access the database simultaneously, chaos may ensue. Three variables are used: mutex , rw_mutex , readcnt to implement solution. semaphore rw_mutex = 1 ; semaphore mutex = 1 ; int read count = 0 ; semaphore mutex : used to ensure mutual exclusion when readcnt is updated i.e. when any reader enters or exit from the critical section. semaphore rw_mutex : used by both readers and writers. int readcnt : the number of processes performing read in the critical section, initially 0. Writer processes: Writer requests the entry to critical section. If allowed i.e. wait() gives a true value, it enters and performs the write. If not allowed, it keeps on waiting. It exits the critical section. do { // writer requests for critical section wait ( rw_mutex ); // performs the write // leaves the critical section signal ( rw_mutex ); } while ( true ); Reader process: Reader requests the entry to critical section. If allowed: It increments the count of number of readers inside the critical section. If this reader is the first reader entering, it locks the rw_mutex semaphore to restrict the entry of writers if any reader is inside. It then, signals mutex as any other reader is allowed to enter while others are already reading. After performing reading, it exits the critical section. When exiting, it checks if no more reader is inside, it signals the semaphore rw_mutex as now, writer can enter the critical section. If not allowed, it keeps on waiting. do { // Reader wants to enter the critical section wait ( mutex ); // The number of readers has now increased by 1 readcnt ++ ; // there is at least one reader in the critical section // this ensure no writer can enter if there is even one reader // thus we give preference to readers here if ( readcnt == 1 ) wait ( rw_mutex ); // other readers can enter while this current reader is inside // the critical section signal ( mutex ); ... /* current reader performs reading here */ ... wait ( mutex ); // a reader wants to leave readcnt -- ; // that is, no reader is left in the critical section, if ( readcnt == 0 ) signal ( rw_mutex ); // writers can enter signal ( mutex ); // reader leaves } while ( true );","title":"The Readers\u2013Writers Problem"},{"location":"os/osc/ch7/#the-dining-philosophers-problem","text":"The dining-philosophers problem is an example of a large class of concurrency-control problems. It is a simple representation of the need to allocate several resources among several processes in a deadlock-free and starvation-free manner. Consider five philosophers who spend their lives thinking and eating. The philosophers share a circular table surrounded by five chairs, each belonging to one philosopher. In the center of the table is a bowl of rice, and the table is laid with five single chopsticks. When a philosopher thinks, she does not interact with her colleagues. From time to time, a philosopher gets hungry and tries to pick up the two chopsticks that are closest to her (the chopsticks that are between her and her left and right neighbors). A philosopher may pick up only one chopstick at a time. Obviously, she cannot pick up a chopstick that is already in the hand of a neighbor. When a hungry philosopher has both her chopsticks at the same time, she eats without releasing the chopsticks. When she is finished eating, she puts down both chopsticks and starts thinking again Java solution of Dining Philosophers Problem","title":"The Dining-Philosophers Problem"},{"location":"os/osc/ch7/#2-synchronization-within-the-linux-kernel","text":"Linux provides several different mechanisms for synchronization in the kernel. The synchronization methods discussed here to synchronization within the kernel and are therefore available only to kernel developers.","title":"2 Synchronization within the Linux Kernel"},{"location":"os/osc/ch7/#atomic-integer","text":"The simplest synchronization technique within the Linux kernel is an atomic integer, which is represented using the opaque data type atomic_t . All math operations using atomic integers are performed without interruption. Atomic integers are particularly efficient in situations where an integer variable\u2014such as a counter\u2014needs to be updated, since atomic operations do not require the overhead of locking mechanisms:","title":"Atomic integer"},{"location":"os/osc/ch7/#locks","text":"In situations where there are several variables contributing to a possible race condition, more sophisticated locking tools must be used. Mutex locks are available in Linux for protecting critical sections within the kernel. Here, a task must invoke the mutex_lock() function prior to entering a critical section and the mutex_unlock() function after exiting the critical section. Linux also provides spinlocks and semaphores (as well as reader\u2013writer versions of these two locks) for locking in the kernel. Both spinlocks and mutex locks in the Linux kernel are nonrecursive , which means that if a thread has acquired one of these locks, it cannot acquire the same lock a second time without first releasing the lock. Otherwise, the second attempt at acquiring the lock will block. Linux provides two simple system calls \u2014 preempt_disable() and preempt_enable() \u2014for disabling and enabling kernel preemption.","title":"Locks"},{"location":"os/osc/ch7/#3-posix-synchronization","text":"The POSIX API is available for programmers at the user level and is not part of any particular operating-system kernel.","title":"3 POSIX Synchronization"},{"location":"os/osc/ch7/#posix-mutex-locks","text":"Pthreads uses the pthread_mutex_t data type for mutex locks. A mutex is created with the pthread mutex_init() function. The mutex is acquired and released with the pthread mutex_lock() and pthread mutex_unlock() functions. #include pthread.h pthread_mutex_t mutex ; /* create and initialize the mutex lock */ pthread_mutex_init ( mutex , NULL ); /* acquire the mutex lock */ pthread mutex_lock ( mutex ); /* critical section */ /* release the mutex lock */ pthread mutex_unlock ( mutex );","title":"POSIX Mutex Locks"},{"location":"os/osc/ch7/#posix-spinlocks","text":"// \u521d\u59cb\u5316\u81ea\u65cb\u9501\uff1a \u7528\u6765\u7533\u8bf7\u4f7f\u7528\u81ea\u65cb\u9501\u6240\u9700\u8981\u7684\u8d44\u6e90\u5e76\u4e14\u5c06\u5b83\u521d\u59cb\u5316\u4e3a\u975e\u9501\u5b9a\u72b6\u6001 int pthread_spin_init ( pthread_spinlock_t * , int ); // \u83b7\u5f97\u4e00\u4e2a\u81ea\u65cb\u9501\uff1a\u5982\u679c\u8be5\u81ea\u65cb\u9501\u5f53\u524d\u6ca1\u6709\u88ab\u5176\u5b83\u7ebf\u7a0b\u6240\u6301\u6709\uff0c\u5219\u8c03\u7528\u8be5\u51fd\u6570\u7684\u7ebf\u7a0b\u83b7\u5f97\u8be5\u81ea\u65cb\u9501. // \u5426\u5219\u8be5\u51fd\u6570\u5728\u83b7\u5f97\u81ea\u65cb\u9501\u4e4b\u524d\u4e0d\u4f1a\u8fd4\u56de\u3002 int pthread_spin_lock ( pthread_spinlock_t * ); //\u91ca\u653e\u6307\u5b9a\u7684\u81ea\u65cb\u9501 int pthread_spin_unlock ( pthread_spinlock_t * ); // \u9500\u6bc1\u4e00\u4e2a\u81ea\u65cb\u9501 int pthread_spin_destroy ( pthread_spinlock_t * );","title":"POSIX Spinlocks"},{"location":"os/osc/ch7/#posix-semaphores","text":"Semaphores are not part of the POSIX standard and instead belong to the POSIX SEM extension. POSIX specifies two types of semaphores - named and unnamed semaphores. The advantage of named semaphores is that multiple unrelated processes can easily use a common semaphore as a synchronization mechanism by simply referring to the semaphore\u2019s name. Both Linux and macOS systems provide POSIX named semaphores. #include semaphore.h sem_t * sem ; /* Create the semaphore and initialize it to 1 * Here, we are naming the semaphore SEM. * The O_CREAT flag indicates that the semaphore will be created if it does not already exist. * The parameter 0666 indicates that the semaphore has read/write access for other processes. * The parameter 1 indicates that the semaphore is initialized to 1. */ sem = sem_open ( SEM , O_CREAT , 0666 , 1 ); /* acquire the semaphore */ sem_wait ( sem ); /* critical section */ /* release the semaphore */ sem_post ( sem );","title":"POSIX Semaphores"},{"location":"os/osc/ch7/#posix-condition-variables","text":"","title":"POSIX Condition Variables"},{"location":"os/osc/ch7/#4-synchronization-in-java","text":"The Java language and its API have provided rich support for thread synchronization.","title":"4 Synchronization in Java"},{"location":"os/osc/ch7/#java-monitors","text":"Entities possessing both locks and wait sets are generally called monitors (although almost every language defines details somewhat differently). Since every Object in Java has a lock and a wait set that is manipulated only by methods wait, notify, notifyAll. Any Object can be serve as a monitor. [Concurrent Programming in Java 3.2.2 Monitor Mechanics] Every object in Java has associated it with a single lock. When a method is declared to be synchronized , calling the method requires owning the lock for the object. Invoking a synchronized method requires owning the lock on an object instance. If the lock is already owned by another thread, the thread calling the synchronized method blocks and is placed in the entry set for the object's lock. The entry set represents the set of threads waiting for the lock to become available. If the lock is available when a synchronized method is called, the calling thread becomes the owner of the object's lock and can enter the method. The lock is released when the thread exits the method. If the entry set for the lock is not empty when the lock is released, the JVM arbitrarily selects a thread from this set to be the owner of the lock. In addition to having a lock, every object also has associated with it a wait set consisting of a set of threads. This wait set is initially empty. When a thread enters a synchronized method, it owns the lock for the object. However, this thread may determine that it is unable to continue because a certain condition has not been met. (e.g. if the producer calls the insert() method and the buffer is full) The thread then will release the lock and wait until the condition that will allow it to continue is met. When a thread calls the wait() method, the following happens: The thread releases the lock for the object. The state of the thread is set to blocked. The thread is placed in the wait set for the object.","title":"Java Monitors"},{"location":"os/osc/ch7/#reentrant-locks","text":"Perhaps the simplest locking mechanism available in the API is the ReentrantLock . A ReentrantLock is owned by a single thread and is used to provide mutually exclusive access to a shared resource. It provides several additional features, such as setting a fairness parameter, which favors granting the lock to the longest-waiting thread. A thread acquires a ReentrantLock lock by invoking its lock() method. If the lock is available - or if the thread invoking lock() already owns it, lock() assigns the invoking thread lock ownership and return control. Lock key = new ReentrantLock (); key . lock (); try { /* critical section */ } finally { key . unlock (); }","title":"Reentrant Locks"},{"location":"os/osc/ch7/#semaphores","text":"The Java API also provides a counting semaphore. The constructor for the semaphore appears as Semaphore ( int value ); where value specifies the initial value of the semaphore ( a negative value is allowed). The acquire method throws an InterruptedException if the acquiring thread is interrupted. The following example illustrates using a semaphore for mutual exclusion: Semaphore sem = new Semaphore ( 1 ); try { sem . acquire (); /* critical section */ } catch ( InterruptedException ex ) { } finally { sem . release (); } Class Semaphore is a counting semaphore. Conceptually, a semaphore maintains a set of permits. Each acquire() blocks if necessary until a permit is available, and then takes it. Each release() adds a permit, potentially releasing a blocking acquirer. However, no actual permit objects are used; the Semaphore just keeps a count of the number available and acts accordingly. Java DOC - Semaphore","title":"Semaphores"},{"location":"os/osc/ch7/#condition-variables","text":"Condition variables provide functionality similar to the wait() and notify() methods. To provide mutual exclusion, a condition variable must be associated with a ReentrantLock . We create a condition variable by first creating a ReentrantLock and invoking its newCondition() method, which returns a Condition object representing the condition variable for the associated ReentrantLock . Lock lock = new ReentrantLock (); Condition condVar = lock . newCondition (); Once the condition variable has been obtained, we can invoke its await() and signal() methods. Java Solution of Buffered Buffer Using condition variables JAVA DOC - Interface Condition Suppose we have a bounded buffer which supports put and take methods. If a take is attempted on an empty buffer, then the thread will block until an item becomes available; if a put is attempted on a full buffer, then the thread will block until a space becomes available. We would like to keep waiting put threads and take threads in separate wait-sets so that we can use the optimization of only notifying a single thread at a time when items or spaces become available in the buffer. This can be achieved using two Condition instances. class BoundedBuffer { final Lock lock = new ReentrantLock (); final Condition notFull = lock . newCondition (); final Condition notEmpty = lock . newCondition (); final Object [] items = new Object [ 100 ]; int putptr , takeptr , count ; public void put ( Object x ) throws InterruptedException { lock . lock (); try { while ( count == items . length ) notFull . await (); items [ putptr ] = x ; if (++ putptr == items . length ) putptr = 0 ; ++ count ; notEmpty . signal (); } finally { lock . unlock (); } } public Object take () throws InterruptedException { lock . lock (); try { while ( count == 0 ) notEmpty . await (); Object x = items [ takeptr ]; if (++ takeptr == items . length ) takeptr = 0 ; -- count ; notFull . signal (); return x ; } finally { lock . unlock (); } } }","title":"Condition Variables"},{"location":"os/osc/ch7/#atomic-variables","text":"Java Tutorial - Atomic Variables The java.util.concurrent.atomic package defines classes that support atomic operations on single variables: AtomicBoolean : A boolean value that may be updated atomically. AtomicInteger : An int value that may be updated atomically AtomicReference : An object reference that may be updated atomically. All classes have get and set methods that works like reads and writes on volatile variables. That is, a set has a happens-before relationship with any subsequent get on the same variable. The atomic compareAndSet method also has these memory consistency features, as do the simple atomic arithmetic methods that apply to integer atomic variables. Suppose we have a Counter class: class Counter { private int c = 0 ; public void increment () { c ++; } public void decrement () { c --; } public int value () { return c ; } } One way to keep Counter free from race condition, is to make its methods as synchronized methods. Another way is to replace the int filed with an AtomicInteger : import import java.util.concurrent.atomic.AtomicInteger ; class AtomicCounter { private AtomicInteger c = new AtomicInteger ( 0 ); public void increment () { c . incrementAndGet (); } public void decrement () { c . decrementAndGet (); } public int value () { return c . get (); } }","title":"Atomic Variables"},{"location":"os/osc/ch8/","text":"Operating System Concepts 8 - DeadLocks 1 System Model 2 Deadlock in Multithreaded Applications Livelock Threads in deadlock will block indefinitely because each is waiting on the other, while threads in livelock can continue execution but make no meaningful progress. /* thread one runs in this function */ void * do work one ( void * param ) { int done = 0 ; while ( ! done ) { pthread_mutex_lock ( first mutex ); if ( pthread_mutex_trylock ( second mutex )) { /** * Do some work */ pthread_mutex_unlock ( second mutex ); pthread_mutex_unlock ( first mutex ); done = 1 ; } else pthread_mutex_unlock ( first mutex ); } pthread exit ( 0 ); } /* thread two runs in this function */ void * do_work_two ( void * param ) { int done = 0 ; while ( ! done ) { pthread_mutex_lock ( second mutex ); if ( pthread_mutex_trylock ( first mutex )) { /** * Do some work */ p thread_mutex_unlock ( first mutex ); pthread_mutex_unlock ( second mutex ); done = 1 ; } else pthread_mutex_unlock ( second mutex ); } pthread_exit ( 0 ); } 3 Deadlock Characterization Necessary Conditions Resource-Allocation Graph 4 Methods for Handling Deadlocks 5 Deadlock Prevention Mutual Exclusion Hold and Wait No Preemption Circular Wait 6 Deadlock Avoidance Safe State Resource-Allocation-Graph Algorithm Banker's Algorithm 7 Deadlock Detection Single Instance of Each Resource Type Several Instances of a Resource Type Detection-Algorithm Usage 8 Recovery from Deadlock Process and Thread Termination Resource Preemption","title":"Chapter 8: Deadlocks"},{"location":"os/osc/ch8/#operating-system-concepts-8-deadlocks","text":"","title":"Operating System Concepts 8 - DeadLocks"},{"location":"os/osc/ch8/#1-system-model","text":"","title":"1 System Model"},{"location":"os/osc/ch8/#2-deadlock-in-multithreaded-applications","text":"","title":"2 Deadlock in Multithreaded Applications"},{"location":"os/osc/ch8/#livelock","text":"Threads in deadlock will block indefinitely because each is waiting on the other, while threads in livelock can continue execution but make no meaningful progress. /* thread one runs in this function */ void * do work one ( void * param ) { int done = 0 ; while ( ! done ) { pthread_mutex_lock ( first mutex ); if ( pthread_mutex_trylock ( second mutex )) { /** * Do some work */ pthread_mutex_unlock ( second mutex ); pthread_mutex_unlock ( first mutex ); done = 1 ; } else pthread_mutex_unlock ( first mutex ); } pthread exit ( 0 ); } /* thread two runs in this function */ void * do_work_two ( void * param ) { int done = 0 ; while ( ! done ) { pthread_mutex_lock ( second mutex ); if ( pthread_mutex_trylock ( first mutex )) { /** * Do some work */ p thread_mutex_unlock ( first mutex ); pthread_mutex_unlock ( second mutex ); done = 1 ; } else pthread_mutex_unlock ( second mutex ); } pthread_exit ( 0 ); }","title":"Livelock"},{"location":"os/osc/ch8/#3-deadlock-characterization","text":"","title":"3 Deadlock Characterization"},{"location":"os/osc/ch8/#necessary-conditions","text":"","title":"Necessary Conditions"},{"location":"os/osc/ch8/#resource-allocation-graph","text":"","title":"Resource-Allocation Graph"},{"location":"os/osc/ch8/#4-methods-for-handling-deadlocks","text":"","title":"4 Methods for Handling Deadlocks"},{"location":"os/osc/ch8/#5-deadlock-prevention","text":"","title":"5 Deadlock Prevention"},{"location":"os/osc/ch8/#mutual-exclusion","text":"","title":"Mutual Exclusion"},{"location":"os/osc/ch8/#hold-and-wait","text":"","title":"Hold and Wait"},{"location":"os/osc/ch8/#no-preemption","text":"","title":"No Preemption"},{"location":"os/osc/ch8/#circular-wait","text":"","title":"Circular Wait"},{"location":"os/osc/ch8/#6-deadlock-avoidance","text":"","title":"6 Deadlock Avoidance"},{"location":"os/osc/ch8/#safe-state","text":"","title":"Safe State"},{"location":"os/osc/ch8/#resource-allocation-graph-algorithm","text":"","title":"Resource-Allocation-Graph Algorithm"},{"location":"os/osc/ch8/#bankers-algorithm","text":"","title":"Banker's Algorithm"},{"location":"os/osc/ch8/#7-deadlock-detection","text":"","title":"7 Deadlock Detection"},{"location":"os/osc/ch8/#single-instance-of-each-resource-type","text":"","title":"Single Instance of Each Resource Type"},{"location":"os/osc/ch8/#several-instances-of-a-resource-type","text":"","title":"Several Instances of a Resource Type"},{"location":"os/osc/ch8/#detection-algorithm-usage","text":"","title":"Detection-Algorithm Usage"},{"location":"os/osc/ch8/#8-recovery-from-deadlock","text":"","title":"8 Recovery from Deadlock"},{"location":"os/osc/ch8/#process-and-thread-termination","text":"","title":"Process and Thread Termination"},{"location":"os/osc/ch8/#resource-preemption","text":"","title":"Resource Preemption"},{"location":"os/osc/ch9/","text":"Operating System Concepts 9 - Main Memory 1 Background Basic Hardware Main memory and the registers built into each processing core are the only general-purpose storage that the CPU can access directly. Registers that are built into each CPU core are generally accessible within one cycle of the CPU clock. Completing a memory access may take hundreds cycles of the CPU clock. In such cases, the processor normally needs to stall. The remedy is to add cache between the CPU and main memory for fast access. Table. Approximate timing for various operations on a typical PC operations approximate timing execute typical instruction 1/1,000,000,000 sec = 1 nanosec fetch from L1 cache memory 0.5 nanosec branch misprediction 5 nanosec fetch from L2 cache memory 7 nanosec Mutex lock/unlock 25 nanosec fetch from main memory 100 nanosec send 2K bytes over 1Gbps network 20,000 nanosec read 1MB sequentially from memory 250,000 nanosec fetch from new disk location (seek) 8,000,000 nanosec read 1MB sequentially from disk 20,000,000 nanosec send packet US to Europe and back 150 milliseconds = 150,000,000 nanosec We also must protect the operating system from access by user processes, as well as protect user processes from one another. This protection must be provided by the hardware, because the operating system doesn't usually intervene between the CPU and its memory access. Hardware implements this production in several different ways. We first need to make sure that each process have a separate memory space. Separate per-process memory space protects the processes from each other and is fundamental to having multiple processes loading in memory for concurrent execution. To separate memory spaces, we need the ability to determine the range of legal addresses that the process may access and to ensure that the process can access only these legal addresses. We can provide this protection by using two registers, usually a base and a limit. The base register holds the smallest legal physical memory address; the limit register specifies the size of the range. The base and limit registers can be loaded only by the operating system, which uses a special privileged instruction. Any attempt by a program executing in user mode to access operating-system memory or other users\u2019 memory results in a trap to the operating system, which treats the attempt as a fatal error. Address Binding In most cases, a user program goes through several steps. Addresses may be represented in different ways during these steps. Addresses in the source program are generally symbolic(\u7b26\u53f7). A compiler typically binds these symbolic addresses to relocatable addresses(\u53ef\u91cd\u5b9a\u4f4d\u5730\u5740). The linker or loader binds the relocatable addresses to absolute addresses(\u7edd\u5bf9\u5730\u5740)\u3002 Logical Versus Physical Address Space An address generated by the CPU is commonly referred to as a logical address (\u903b\u8f91\u5730\u5740), whereas an address loaded into memory-address register (MAR) of the memory is commonly referred to as a physical address (\u7269\u7406\u5730\u5740). We usually refer to the logical address as a virtual address (\u865a\u62df\u5730\u5740). The run-time mapping from virtual to physical addresses is done by a hardware device called the memory-management unit (MMU\uff0c\u5185\u5b58\u7ba1\u7406\u5355\u5143). Note Program counter points to the next instruction to be fetched/executed , whereas memory address register points to the memory location that contains data required (not an instruction).[ ref ] Dynamic Loading With dynamic loading (\u52a8\u6001\u52a0\u8f7d), a routine is not loaded until it is called. All routines are kept on disk in a relocatable load format. The main program is loaded into memory and is executed. When a routine needs to call another routine, the calling routine first checks to see whether the other routine has been loaded. If it has not, the relocatable linking loader is called to load the desired routine into memory and to update the program\u2019s address tables to reflect this change. Then control is passed to the newly loaded routine. The advantage of dynamic loading is that a routine is loaded only when it is needed. This method is particularly useful when large amounts of code are needed to handle infrequently occurring cases, such as error routines. A simple example: void * hndl = dlopen ( libnewshapes.so , RTLD_NOW ); if ( hndl == NULL ){ cerr dlerror () endl ; exit ( - 1 ); } void * mkr = dlsym ( hndl , maker ); Dynamic Linking and Shared Libraries Dynamically linked libraries (DLLs\uff0c\u52a8\u6001\u94fe\u63a5\u5e93) are system libraries that are linked to user programs when the programs are run Detailed information in CSAPP 2 Contiguous Memory Allocation In order to accommodate both the operating system and the various user processes, allocating main memory are needed to be in the most efficient way. In Contiguous memory allocation (\u8fde\u7eed\u5185\u5b58\u5206\u914d), one early method, each process is contained in a single section of memory that is contiguous to the section containing the next process . The memory is usually divided into two partitions: one for the operating system and one for the user processes. We can place the operating system in either low memory addresses or high memory addresses. Many operating system(including Linux and windows) place the operating system in high memory. Memory Protection Relocation register (\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668) and limit register (\u754c\u9650\u5730\u5740\u5bc4\u5b58\u5668) are used to prevent a process from accessing memory that it does not own. The relocation register contains the value of the smallest physical address. The limit register contains the range of logical addresses. Each logical address must fall within the range specified by the limit register. The MMU maps the logical address dynamically by adding the value in the relocation register. Memory Allocation One of the simplest methods of allocating memory is to assign processes to variably sized partitions in memory, where each partition may contain exactly one process. The operating system keeps a table indicating which parts of memory are available and which are occupied. A block of available memory is a hole (\u5b54). When a process arrives and needs memory, the system searches for a hole that is large enough for this process. Placement policy (\u653e\u7f6e\u7b56\u7565)\uff1aSeveral Ways to satisfy a request of size n n from a list of free holes. First fit (\u9996\u6b21\u9002\u914d). Allocate the first hole that is big enough. Best fit (\u6700\u4f73\u9002\u914d). Allocate the smallest hole that is big enough. Worst fit (\u6700\u5dee\u9002\u914d). Allocate the largest hole. Both first fit and best fit are better than worst fit in terms of decreasing time and storage utilization. Neither first fit nor best fit is clearly better than the other in terms of storage utilization, but first fit is generally faster. Fragmentation External fragmentation (\u5916\u90e8\u788e\u7247) exists when there is enough total memory space to satisfy a request but the available spaces are not contiguous: storage is fragmented into a large number of small holes. One solution is compaction \uff0cwhich shuffles the memory contents so as to place all free memory together in one large block. Another solution is to permit the logical address space of processes to be noncontiguous, thus allowing a process to be allocated physical memory wherever such memory is available.( paging , \u5206\u9875, the most common memory-management technique for computer systems). Internal fragmentation (\u5185\u90e8\u788e\u7247) occurs when unused memory is internal to a partition, because of allocating memory in units based on block size. The memory must be partitioned into variable sized blocks and assign the best fit block to the process. 3 Paging Paging (\u5206\u9875), is a memory management scheme that permits a process's physical address space to be non-contiguous. Paging avoids external fragmentation and the associated need for compaction. Basic Method The basic method for implementing paging involves breaking physical memory info fixed-sized blocks called frames (\u5e27, also physical page), and breaking logical memory into blocks of the same size called pages (\u9875, also virtual page). The backing store is divided into fixed-sized blocks that are the same size as the memory frames or clusters of multiple frames. Every address generated by the CPU is divided into two parts: a page number (p, \u9875\u53f7) and a page offset (d, \u9875\u504f\u79fb)\u3002 The page number is used as an index into a per-process page table . Page table contains the base address of each frame in physical memory and the offset is the location in the frame being referenced. The base address of the frame is combined with the page offset to define the physical memory address. The MMU translates a logical address generated by the CPU to a physical address by: Extract the page number p p and use it as an index into the page table. Extract the corresponding frame number f f from the page table. Replace the page number p p in the logical address with the frame number f f . The page size is defined by the hardware, typically a power of 2. If the size of logical address space is $2^m $, and a page size is $2^n $ bytes, then the high-order m-n m-n bits of a logical address designate the page number, and the n n low-order bits designate the page offset. Internal fragmentation still exists\uff1a If process size is independent of page size, we expect internal fragmentation to average one-half page per process. This consideration suggests that small page sizes are desirable. However, overhead is involved in each page table entry, and this overhead is reduced as the size of the pages increases. Also, disk I/O is more efficient when the amount of data being transferred is larger Hardware Suport The hardware implementation of the page table can be done in several ways. In the simplest case, the page table is implemented as a set of dedicated high-speed hardware registers. It makes the page-address translation very efficient. It increases context-switch time, as each one of these registers must be exchanged during a context switch. The use of registers for the page table is satisfactory if the page table is reasonably small (for example, 256 entries). It is not feasible for most contemporary CPUs, since much larger page tables needed. For a much large page table, the page table is kept in main memory, and a page-table base register (PTBR, \u9875\u8868\u57fa\u5740\u5bc4\u5b58\u5668) points to the page table. ISSUE: Although storing the page table in main memory can yield faster context switches, it may also result in slower memory access times. Because using page-table to find a physical address need one memory access, since the page-table is kept in main memory. SOLUTION: To use a special, small, fast-lookup hardware cache called a translation look-aside buffer (TLB, \u8f6c\u8bd1\u540e\u5907\u7f13\u51b2\u5668). Each entry in the TLB consists of two parts: a key(tag) and a value. When the associative memory is presented with an item, the item is compared with all keys simultaneously . If the item is found, the corresponding value field is returned. TLB is kept small, typically between 32 and 1,024 entries in size. CPUs today may provide multiple levels of TLBs. We take the Intel Core i7 as an example [ see detail here ]: The Intel Core i7 CPU has a 128-entry L1 instruction TLB and a 64-entry L1 data TLB. In the case of a miss at L1, it takes the CPU six cycles to check for the entry in the L2 512-entry TLB. A miss in L2 means that the CPU must either walk through the page-table entries in memory to find the associated frame address, which can take hundreds of cycles, or interrupt to the operating system to have it do the work. Protection Memory protection in a paged environment is accomplished by protection bits associated with each frame. Normally, these bits are kept in the page table. One bit can define a page to be read\u2013write or read-only. One additional bit is generally attached to each entry in the page table: a valid\u2013invalid bit. (When the bit is set to invalid, the page is not in the process\u2019s logical address space). Shared Pages An advantage of paging is the possibility of sharing common code. Reentrant code is non-self-modifying code: it never changes during execution. If the code is reentrant code, it can be shared. Two or more processes can execute the same code at the same time. Each process has its own copy of registers and data storage to hold the data for the process\u2019s execution. The shared libraries are typically implemented with shared pages. Some operating systems implement shared memory using shared pages. Example: Sharing of standard C library in a paging environment. 4 Structure of the Page Table Hierarchical Paging Problem: Most modern computer systems support a large logical address space 2^{32}-2^{64} 2^{32}-2^{64} . In such an environment, the page table itself becomes excessively large. SOLUTION: Hierarchical Paging (\u5c42\u6b21\u5316\u5206\u9875) uses multi-level tables which break up the virtual address into multiple parts. The simplest way is to use a two-level paging algorithm, in which the page table itself is also paged. For a system with a 64-bit logical address space, a two-level paging scheme is no longer appropriate. So we can page the outer page table, giving us a three-level paging scheme. But the outer page table is still large in size. The next step would be a four-level paging scheme, where the second-level outer page table itself is also paged, and so forth. For 64-bit architectures, hierarchical page tables are generally considered inappropriate. Hashed Page Tables One approach for handling address spaces larger than 32 bits is to use a hashed page table (\u54c8\u5e0c\u9875\u8868), with the hash value being the virtual page number. Each entry in the hash table contains a linked list of elements that hash to the same location (to handle collisions). Each element consists of three fields: the virtual page number the value of the mapped page frame a pointer to the next element in the linked list. The algorithm works as follows: The virtual page number in the virtual address is hashed into the hash table. The virtual page number is compared with field 1 in the first element in the linked list. If there is a match, the corresponding page frame (field 2) is used to form the desired physical address. If there is no match, subsequent entries in the linked list are searched for a matching virtual page number. Clustered page tables , which are similar to hashed page tables except that each entry in the hash table refers to several pages (such as 16) rather than a single page. It is particularly useful for sparse address spaces, where memory references are noncontiguous and scattered throughout the address space. Inverted Page Tables Problem: One of the drawbacks of methods above is that each page table may consist of millions of entries. These tables may consume large amounts of physical memory just to keep track of how other physical memory is being used. SOLUTION: An inverted page table (\u53cd\u5411\u9875\u8868) has one entry for each real page (or frame) of memory. Each entry consists of the virtual address of the page stored in that real memory location, with information about the process that owns the page. Only one page table is in the system, and it has only one entry for each page of physical memory. DISADVANTAGE: It increases the amount of time needed to search the table when a page reference occurs. 5 Swapping A process, or a portion of a process, can be swapped temporarily out of memory to a backing store and then brought back into memory for continued execution. (The backing store is commonly fast secondary storage.) Swapping makes it possible for the total physical address space of all processes to exceed the real physical memory of the system, thus increasing the degree of multiprogramming in a system. Standard Swapping Standard swapping involves moving entire processes between main memory and a backing store. For a multithreaded process, all per-thread data structures must be swapped as well. The advantage of standard swapping is that it allows physical memory to be oversubscribed , so that the system can accommodate more processes than there is actual physical memory to store them. Idle or mostly idle processes are good candidates for swapping. Swapping with paging ISSUE: For standard swapping, the amount of time required to move entire processes between memory and the backing store is prohibitive. It was used in traditional UNIX systems, but it is generally no longer used in contemporary operating systems. SOLUTION: Most systems, including Linux and Windows, use a variation of swapping in which pages of a process\u2014rather than an entire process \u2014can be swapped. A page out operation moves a page from memory to the backing store; the reverse process is known as a page in . Swapping on Mobile Systems ISSUE: In contrast, mobile systems typically do not support swapping in any form. Space constraint: Mobile devices generally use flash memory rather than more spacious hard disks for nonvolatile storage. Other reasons include the limited number of writes that flash memory can tolerate before it becomes unreliable and the poor throughput between main memory and flash memory in these devices. SOLUTION: Instead of using swapping, when free memory falls below a certain threshold, Apple\u2019s iOS asks applications to voluntarily relinquish allocated memory. Any applications that fail to free up sufficient memory may be terminated by the operating system. 6 Example: Intel 64-bit Architectures Core i7 Memory System","title":"Chapter 9: Main Memory"},{"location":"os/osc/ch9/#operating-system-concepts-9-main-memory","text":"","title":"Operating System Concepts 9 - Main Memory"},{"location":"os/osc/ch9/#1-background","text":"","title":"1 Background"},{"location":"os/osc/ch9/#basic-hardware","text":"Main memory and the registers built into each processing core are the only general-purpose storage that the CPU can access directly. Registers that are built into each CPU core are generally accessible within one cycle of the CPU clock. Completing a memory access may take hundreds cycles of the CPU clock. In such cases, the processor normally needs to stall. The remedy is to add cache between the CPU and main memory for fast access. Table. Approximate timing for various operations on a typical PC operations approximate timing execute typical instruction 1/1,000,000,000 sec = 1 nanosec fetch from L1 cache memory 0.5 nanosec branch misprediction 5 nanosec fetch from L2 cache memory 7 nanosec Mutex lock/unlock 25 nanosec fetch from main memory 100 nanosec send 2K bytes over 1Gbps network 20,000 nanosec read 1MB sequentially from memory 250,000 nanosec fetch from new disk location (seek) 8,000,000 nanosec read 1MB sequentially from disk 20,000,000 nanosec send packet US to Europe and back 150 milliseconds = 150,000,000 nanosec We also must protect the operating system from access by user processes, as well as protect user processes from one another. This protection must be provided by the hardware, because the operating system doesn't usually intervene between the CPU and its memory access. Hardware implements this production in several different ways. We first need to make sure that each process have a separate memory space. Separate per-process memory space protects the processes from each other and is fundamental to having multiple processes loading in memory for concurrent execution. To separate memory spaces, we need the ability to determine the range of legal addresses that the process may access and to ensure that the process can access only these legal addresses. We can provide this protection by using two registers, usually a base and a limit. The base register holds the smallest legal physical memory address; the limit register specifies the size of the range. The base and limit registers can be loaded only by the operating system, which uses a special privileged instruction. Any attempt by a program executing in user mode to access operating-system memory or other users\u2019 memory results in a trap to the operating system, which treats the attempt as a fatal error.","title":"Basic Hardware"},{"location":"os/osc/ch9/#address-binding","text":"In most cases, a user program goes through several steps. Addresses may be represented in different ways during these steps. Addresses in the source program are generally symbolic(\u7b26\u53f7). A compiler typically binds these symbolic addresses to relocatable addresses(\u53ef\u91cd\u5b9a\u4f4d\u5730\u5740). The linker or loader binds the relocatable addresses to absolute addresses(\u7edd\u5bf9\u5730\u5740)\u3002","title":"Address Binding"},{"location":"os/osc/ch9/#logical-versus-physical-address-space","text":"An address generated by the CPU is commonly referred to as a logical address (\u903b\u8f91\u5730\u5740), whereas an address loaded into memory-address register (MAR) of the memory is commonly referred to as a physical address (\u7269\u7406\u5730\u5740). We usually refer to the logical address as a virtual address (\u865a\u62df\u5730\u5740). The run-time mapping from virtual to physical addresses is done by a hardware device called the memory-management unit (MMU\uff0c\u5185\u5b58\u7ba1\u7406\u5355\u5143). Note Program counter points to the next instruction to be fetched/executed , whereas memory address register points to the memory location that contains data required (not an instruction).[ ref ]","title":"Logical Versus Physical Address Space"},{"location":"os/osc/ch9/#dynamic-loading","text":"With dynamic loading (\u52a8\u6001\u52a0\u8f7d), a routine is not loaded until it is called. All routines are kept on disk in a relocatable load format. The main program is loaded into memory and is executed. When a routine needs to call another routine, the calling routine first checks to see whether the other routine has been loaded. If it has not, the relocatable linking loader is called to load the desired routine into memory and to update the program\u2019s address tables to reflect this change. Then control is passed to the newly loaded routine. The advantage of dynamic loading is that a routine is loaded only when it is needed. This method is particularly useful when large amounts of code are needed to handle infrequently occurring cases, such as error routines. A simple example: void * hndl = dlopen ( libnewshapes.so , RTLD_NOW ); if ( hndl == NULL ){ cerr dlerror () endl ; exit ( - 1 ); } void * mkr = dlsym ( hndl , maker );","title":"Dynamic Loading"},{"location":"os/osc/ch9/#dynamic-linking-and-shared-libraries","text":"Dynamically linked libraries (DLLs\uff0c\u52a8\u6001\u94fe\u63a5\u5e93) are system libraries that are linked to user programs when the programs are run Detailed information in CSAPP","title":"Dynamic Linking and Shared Libraries"},{"location":"os/osc/ch9/#2-contiguous-memory-allocation","text":"In order to accommodate both the operating system and the various user processes, allocating main memory are needed to be in the most efficient way. In Contiguous memory allocation (\u8fde\u7eed\u5185\u5b58\u5206\u914d), one early method, each process is contained in a single section of memory that is contiguous to the section containing the next process . The memory is usually divided into two partitions: one for the operating system and one for the user processes. We can place the operating system in either low memory addresses or high memory addresses. Many operating system(including Linux and windows) place the operating system in high memory.","title":"2 Contiguous Memory Allocation"},{"location":"os/osc/ch9/#memory-protection","text":"Relocation register (\u91cd\u5b9a\u4f4d\u5bc4\u5b58\u5668) and limit register (\u754c\u9650\u5730\u5740\u5bc4\u5b58\u5668) are used to prevent a process from accessing memory that it does not own. The relocation register contains the value of the smallest physical address. The limit register contains the range of logical addresses. Each logical address must fall within the range specified by the limit register. The MMU maps the logical address dynamically by adding the value in the relocation register.","title":"Memory Protection"},{"location":"os/osc/ch9/#memory-allocation","text":"One of the simplest methods of allocating memory is to assign processes to variably sized partitions in memory, where each partition may contain exactly one process. The operating system keeps a table indicating which parts of memory are available and which are occupied. A block of available memory is a hole (\u5b54). When a process arrives and needs memory, the system searches for a hole that is large enough for this process. Placement policy (\u653e\u7f6e\u7b56\u7565)\uff1aSeveral Ways to satisfy a request of size n n from a list of free holes. First fit (\u9996\u6b21\u9002\u914d). Allocate the first hole that is big enough. Best fit (\u6700\u4f73\u9002\u914d). Allocate the smallest hole that is big enough. Worst fit (\u6700\u5dee\u9002\u914d). Allocate the largest hole. Both first fit and best fit are better than worst fit in terms of decreasing time and storage utilization. Neither first fit nor best fit is clearly better than the other in terms of storage utilization, but first fit is generally faster.","title":"Memory Allocation"},{"location":"os/osc/ch9/#fragmentation","text":"External fragmentation (\u5916\u90e8\u788e\u7247) exists when there is enough total memory space to satisfy a request but the available spaces are not contiguous: storage is fragmented into a large number of small holes. One solution is compaction \uff0cwhich shuffles the memory contents so as to place all free memory together in one large block. Another solution is to permit the logical address space of processes to be noncontiguous, thus allowing a process to be allocated physical memory wherever such memory is available.( paging , \u5206\u9875, the most common memory-management technique for computer systems). Internal fragmentation (\u5185\u90e8\u788e\u7247) occurs when unused memory is internal to a partition, because of allocating memory in units based on block size. The memory must be partitioned into variable sized blocks and assign the best fit block to the process.","title":"Fragmentation"},{"location":"os/osc/ch9/#3-paging","text":"Paging (\u5206\u9875), is a memory management scheme that permits a process's physical address space to be non-contiguous. Paging avoids external fragmentation and the associated need for compaction.","title":"3 Paging"},{"location":"os/osc/ch9/#basic-method","text":"The basic method for implementing paging involves breaking physical memory info fixed-sized blocks called frames (\u5e27, also physical page), and breaking logical memory into blocks of the same size called pages (\u9875, also virtual page). The backing store is divided into fixed-sized blocks that are the same size as the memory frames or clusters of multiple frames. Every address generated by the CPU is divided into two parts: a page number (p, \u9875\u53f7) and a page offset (d, \u9875\u504f\u79fb)\u3002 The page number is used as an index into a per-process page table . Page table contains the base address of each frame in physical memory and the offset is the location in the frame being referenced. The base address of the frame is combined with the page offset to define the physical memory address. The MMU translates a logical address generated by the CPU to a physical address by: Extract the page number p p and use it as an index into the page table. Extract the corresponding frame number f f from the page table. Replace the page number p p in the logical address with the frame number f f . The page size is defined by the hardware, typically a power of 2. If the size of logical address space is $2^m $, and a page size is $2^n $ bytes, then the high-order m-n m-n bits of a logical address designate the page number, and the n n low-order bits designate the page offset. Internal fragmentation still exists\uff1a If process size is independent of page size, we expect internal fragmentation to average one-half page per process. This consideration suggests that small page sizes are desirable. However, overhead is involved in each page table entry, and this overhead is reduced as the size of the pages increases. Also, disk I/O is more efficient when the amount of data being transferred is larger","title":"Basic Method"},{"location":"os/osc/ch9/#hardware-suport","text":"The hardware implementation of the page table can be done in several ways. In the simplest case, the page table is implemented as a set of dedicated high-speed hardware registers. It makes the page-address translation very efficient. It increases context-switch time, as each one of these registers must be exchanged during a context switch. The use of registers for the page table is satisfactory if the page table is reasonably small (for example, 256 entries). It is not feasible for most contemporary CPUs, since much larger page tables needed. For a much large page table, the page table is kept in main memory, and a page-table base register (PTBR, \u9875\u8868\u57fa\u5740\u5bc4\u5b58\u5668) points to the page table. ISSUE: Although storing the page table in main memory can yield faster context switches, it may also result in slower memory access times. Because using page-table to find a physical address need one memory access, since the page-table is kept in main memory. SOLUTION: To use a special, small, fast-lookup hardware cache called a translation look-aside buffer (TLB, \u8f6c\u8bd1\u540e\u5907\u7f13\u51b2\u5668). Each entry in the TLB consists of two parts: a key(tag) and a value. When the associative memory is presented with an item, the item is compared with all keys simultaneously . If the item is found, the corresponding value field is returned. TLB is kept small, typically between 32 and 1,024 entries in size. CPUs today may provide multiple levels of TLBs. We take the Intel Core i7 as an example [ see detail here ]: The Intel Core i7 CPU has a 128-entry L1 instruction TLB and a 64-entry L1 data TLB. In the case of a miss at L1, it takes the CPU six cycles to check for the entry in the L2 512-entry TLB. A miss in L2 means that the CPU must either walk through the page-table entries in memory to find the associated frame address, which can take hundreds of cycles, or interrupt to the operating system to have it do the work.","title":"Hardware Suport"},{"location":"os/osc/ch9/#protection","text":"Memory protection in a paged environment is accomplished by protection bits associated with each frame. Normally, these bits are kept in the page table. One bit can define a page to be read\u2013write or read-only. One additional bit is generally attached to each entry in the page table: a valid\u2013invalid bit. (When the bit is set to invalid, the page is not in the process\u2019s logical address space).","title":"Protection"},{"location":"os/osc/ch9/#shared-pages","text":"An advantage of paging is the possibility of sharing common code. Reentrant code is non-self-modifying code: it never changes during execution. If the code is reentrant code, it can be shared. Two or more processes can execute the same code at the same time. Each process has its own copy of registers and data storage to hold the data for the process\u2019s execution. The shared libraries are typically implemented with shared pages. Some operating systems implement shared memory using shared pages. Example: Sharing of standard C library in a paging environment.","title":"Shared Pages"},{"location":"os/osc/ch9/#4-structure-of-the-page-table","text":"","title":"4 Structure of the Page Table"},{"location":"os/osc/ch9/#hierarchical-paging","text":"Problem: Most modern computer systems support a large logical address space 2^{32}-2^{64} 2^{32}-2^{64} . In such an environment, the page table itself becomes excessively large. SOLUTION: Hierarchical Paging (\u5c42\u6b21\u5316\u5206\u9875) uses multi-level tables which break up the virtual address into multiple parts. The simplest way is to use a two-level paging algorithm, in which the page table itself is also paged. For a system with a 64-bit logical address space, a two-level paging scheme is no longer appropriate. So we can page the outer page table, giving us a three-level paging scheme. But the outer page table is still large in size. The next step would be a four-level paging scheme, where the second-level outer page table itself is also paged, and so forth. For 64-bit architectures, hierarchical page tables are generally considered inappropriate.","title":"Hierarchical Paging"},{"location":"os/osc/ch9/#hashed-page-tables","text":"One approach for handling address spaces larger than 32 bits is to use a hashed page table (\u54c8\u5e0c\u9875\u8868), with the hash value being the virtual page number. Each entry in the hash table contains a linked list of elements that hash to the same location (to handle collisions). Each element consists of three fields: the virtual page number the value of the mapped page frame a pointer to the next element in the linked list. The algorithm works as follows: The virtual page number in the virtual address is hashed into the hash table. The virtual page number is compared with field 1 in the first element in the linked list. If there is a match, the corresponding page frame (field 2) is used to form the desired physical address. If there is no match, subsequent entries in the linked list are searched for a matching virtual page number. Clustered page tables , which are similar to hashed page tables except that each entry in the hash table refers to several pages (such as 16) rather than a single page. It is particularly useful for sparse address spaces, where memory references are noncontiguous and scattered throughout the address space.","title":"Hashed Page Tables"},{"location":"os/osc/ch9/#inverted-page-tables","text":"Problem: One of the drawbacks of methods above is that each page table may consist of millions of entries. These tables may consume large amounts of physical memory just to keep track of how other physical memory is being used. SOLUTION: An inverted page table (\u53cd\u5411\u9875\u8868) has one entry for each real page (or frame) of memory. Each entry consists of the virtual address of the page stored in that real memory location, with information about the process that owns the page. Only one page table is in the system, and it has only one entry for each page of physical memory. DISADVANTAGE: It increases the amount of time needed to search the table when a page reference occurs.","title":"Inverted Page Tables"},{"location":"os/osc/ch9/#5-swapping","text":"A process, or a portion of a process, can be swapped temporarily out of memory to a backing store and then brought back into memory for continued execution. (The backing store is commonly fast secondary storage.) Swapping makes it possible for the total physical address space of all processes to exceed the real physical memory of the system, thus increasing the degree of multiprogramming in a system.","title":"5 Swapping"},{"location":"os/osc/ch9/#standard-swapping","text":"Standard swapping involves moving entire processes between main memory and a backing store. For a multithreaded process, all per-thread data structures must be swapped as well. The advantage of standard swapping is that it allows physical memory to be oversubscribed , so that the system can accommodate more processes than there is actual physical memory to store them. Idle or mostly idle processes are good candidates for swapping.","title":"Standard Swapping"},{"location":"os/osc/ch9/#swapping-with-paging","text":"ISSUE: For standard swapping, the amount of time required to move entire processes between memory and the backing store is prohibitive. It was used in traditional UNIX systems, but it is generally no longer used in contemporary operating systems. SOLUTION: Most systems, including Linux and Windows, use a variation of swapping in which pages of a process\u2014rather than an entire process \u2014can be swapped. A page out operation moves a page from memory to the backing store; the reverse process is known as a page in .","title":"Swapping with paging"},{"location":"os/osc/ch9/#swapping-on-mobile-systems","text":"ISSUE: In contrast, mobile systems typically do not support swapping in any form. Space constraint: Mobile devices generally use flash memory rather than more spacious hard disks for nonvolatile storage. Other reasons include the limited number of writes that flash memory can tolerate before it becomes unreliable and the poor throughput between main memory and flash memory in these devices. SOLUTION: Instead of using swapping, when free memory falls below a certain threshold, Apple\u2019s iOS asks applications to voluntarily relinquish allocated memory. Any applications that fail to free up sufficient memory may be terminated by the operating system.","title":"Swapping on Mobile Systems"},{"location":"os/osc/ch9/#6-example-intel-64-bit-architectures","text":"Core i7 Memory System","title":"6 Example: Intel 64-bit Architectures"},{"location":"python/static method/","text":"staticmethod/class method Though classmethod and staticmethod are quite similar, there's a slight difference in usage for both entities: classmethod must have a reference to a class object as the first parameter, whereas staticmethod can have no parameters at all. Example class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) date1 = cls ( day , month , year ) return date1 @staticmethod def is_date_valid ( date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) return day = 31 and month = 12 and year = 3999 date2 = Date . from_string ( 11-09-2012 ) is_date = Date . is_date_valid ( 11-09-2012 ) Explanation Let's assume an example of a class, dealing with date information (this will be our boilerplate): class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year This class obviously could be used to store information about certain dates (without timezone information; let's assume all dates are presented in UTC). Here we have __init__ , a typical initializer of Python class instances, which receives arguments as a typical instancemethod , having the first non-optional argument (self) that holds a reference to a newly created instance. Class Method We have some tasks that can be nicely done using classmethods . Let's assume that we want to create a lot of Date class instances having date information coming from an outer source encoded as a string with format dd-mm-yyyy . Suppose we have to do this in different places in the source code of our project. So what we must do here is: Parse a string to receive day, month and year as three integer variables or a 3-item tuple consisting of that variable. Instantiate Date by passing those values to the initialization call. This will look like: day , month , year = map ( int , string_date . split ( - )) date1 = Date ( day , month , year ) For this purpose, C++ can implement such a feature with overloading, but Python lacks this overloading. Instead, we can use classmethod. Let's create another \"constructor\". @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) date1 = cls ( day , month , year ) return date1 date2 = Date . from_string ( 11-09-2012 ) Let's look more carefully at the above implementation, and review what advantages we have here: We've implemented date string parsing in one place and it's reusable now. Encapsulation works fine here (if you think that you could implement string parsing as a single function elsewhere, this solution fits the OOP paradigm far better). cls is an object that holds the class itself, not an instance of the class. It's pretty cool because if we inherit our Date class, all children will have from_string defined also. Static method What about staticmethod ? It's pretty similar to classmethod but doesn't take any obligatory parameters (like a class method or instance method does). Let's look at the next use case. We have a date string that we want to validate somehow. This task is also logically bound to the Date class we've used so far, but doesn't require instantiation of it. Here is where staticmethod can be useful. Let's look at the next piece of code: @staticmethod def is_date_valid ( date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) return day = 31 and month = 12 and year = 3999 # usage: is_date = Date . is_date_valid ( 11-09-2012 ) So, as we can see from usage of staticmethod, we don't have any access to what the class is---it's basically just a function, called syntactically like a method, but without access to the object and its internals (fields and another methods), while classmethod does.","title":"Static method"},{"location":"python/static method/#staticmethodclass-method","text":"Though classmethod and staticmethod are quite similar, there's a slight difference in usage for both entities: classmethod must have a reference to a class object as the first parameter, whereas staticmethod can have no parameters at all. Example class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) date1 = cls ( day , month , year ) return date1 @staticmethod def is_date_valid ( date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) return day = 31 and month = 12 and year = 3999 date2 = Date . from_string ( 11-09-2012 ) is_date = Date . is_date_valid ( 11-09-2012 ) Explanation Let's assume an example of a class, dealing with date information (this will be our boilerplate): class Date ( object ): def __init__ ( self , day = 0 , month = 0 , year = 0 ): self . day = day self . month = month self . year = year This class obviously could be used to store information about certain dates (without timezone information; let's assume all dates are presented in UTC). Here we have __init__ , a typical initializer of Python class instances, which receives arguments as a typical instancemethod , having the first non-optional argument (self) that holds a reference to a newly created instance.","title":"staticmethod/class method"},{"location":"python/static method/#class-method","text":"We have some tasks that can be nicely done using classmethods . Let's assume that we want to create a lot of Date class instances having date information coming from an outer source encoded as a string with format dd-mm-yyyy . Suppose we have to do this in different places in the source code of our project. So what we must do here is: Parse a string to receive day, month and year as three integer variables or a 3-item tuple consisting of that variable. Instantiate Date by passing those values to the initialization call. This will look like: day , month , year = map ( int , string_date . split ( - )) date1 = Date ( day , month , year ) For this purpose, C++ can implement such a feature with overloading, but Python lacks this overloading. Instead, we can use classmethod. Let's create another \"constructor\". @classmethod def from_string ( cls , date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) date1 = cls ( day , month , year ) return date1 date2 = Date . from_string ( 11-09-2012 ) Let's look more carefully at the above implementation, and review what advantages we have here: We've implemented date string parsing in one place and it's reusable now. Encapsulation works fine here (if you think that you could implement string parsing as a single function elsewhere, this solution fits the OOP paradigm far better). cls is an object that holds the class itself, not an instance of the class. It's pretty cool because if we inherit our Date class, all children will have from_string defined also.","title":"Class Method"},{"location":"python/static method/#static-method","text":"What about staticmethod ? It's pretty similar to classmethod but doesn't take any obligatory parameters (like a class method or instance method does). Let's look at the next use case. We have a date string that we want to validate somehow. This task is also logically bound to the Date class we've used so far, but doesn't require instantiation of it. Here is where staticmethod can be useful. Let's look at the next piece of code: @staticmethod def is_date_valid ( date_as_string ): day , month , year = map ( int , date_as_string . split ( - )) return day = 31 and month = 12 and year = 3999 # usage: is_date = Date . is_date_valid ( 11-09-2012 ) So, as we can see from usage of staticmethod, we don't have any access to what the class is---it's basically just a function, called syntactically like a method, but without access to the object and its internals (fields and another methods), while classmethod does.","title":"Static method"}]}