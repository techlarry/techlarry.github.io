{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"java/ujvm/ch12/","text":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 12 - Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b \u5e76\u53d1\u5904\u7406\u7684\u5e7f\u6cdb\u5e94\u7528\u662f\u4f7f\u5f97Amdahl\u5b9a\u5f8b\u4ee3\u66ff\u6469\u5c14\u5b9a\u5f8b\u6210\u4e3a\u8ba1\u7b97\u673a\u6027\u80fd\u53d1\u5c55\u6e90\u52a8\u529b\u7684\u6839\u672c\u539f\u56e0\uff0c\u4e5f\u662f\u4eba\u7c7b\u201c\u538b\u69a8\u201d\u8ba1\u7b97\u673a\u8fd0\u7b97\u80fd\u529b\u7684\u6700\u6709\u529b\u6b66\u5668\u3002 1 \u6982\u8ff0 \u591a\u4efb\u52a1\u5904\u7406\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u51e0\u4e4e\u5df2\u662f\u4e00\u9879\u5fc5\u5907\u7684\u529f\u80fd\u4e86\uff1b \u9664\u4e86\u5145\u5206\u5229\u7528\u8ba1\u7b97\u673a\u5904\u7406\u5668\u7684\u80fd\u529b\u5916\uff0c\u4e00\u4e2a\u670d\u52a1\u7aef\u540c\u65f6\u5bf9\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u670d\u52a1\u5219\u662f\u53e6\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u5e76\u53d1\u5e94\u7528\u573a\u666f\uff1b\u670d\u52a1\u7aef\u662fJava\u8bed\u8a00\u6700\u64c5\u957f\u7684\u9886\u57df\u4e4b\u4e00\uff0c\u4e0d\u8fc7\u5982\u4f55\u5199\u597d\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\u5374\u53c8\u662f\u670d\u52a1\u7aef\u7a0b\u5e8f\u5f00\u53d1\u7684\u96be\u70b9\u4e4b\u4e00\uff0c\u5904\u7406\u597d\u5e76\u53d1\u65b9\u9762\u7684\u95ee\u9898\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684\u7f16\u7801\u7ecf\u9a8c\u6765\u652f\u6301\uff0c\u5e78\u597dJava\u8bed\u8a00\u548c\u865a\u62df\u673a\u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\uff0c\u628a\u5e76\u53d1\u7f16\u7801\u7684\u95e8\u69db\u964d\u4f4e\u4e86\u4e0d\u5c11\uff1b 2 \u786c\u4ef6\u7684\u6548\u7387\u4e0e\u4e00\u81f4\u6027 \u7f13\u5b58\u4e00\u81f4\u6027 \u57fa\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5b58\u50a8\u4ea4\u4e92\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u5904\u7406\u5668\u4e0e\u5185\u5b58\u7684\u901f\u5ea6\u77db\u76fe\uff0c\u4f46\u662f\u4e5f\u4e3a\u8ba1\u7b97\u673a\u7cfb\u7edf\u5e26\u6765\u66f4\u9ad8\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5b83\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff1a \u7f13\u5b58\u4e00\u81f4\u6027 (Cache Coherence)\u3002\u5728\u591a\u5904\u7406\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u6709\u81ea\u5df1\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u800c\u5b83\u4eec\u6709\u5171\u4eab\u540c\u4e00\u4e3b\u5185\u5b58(Main memory)\u3002 Cache coherence is the uniformity of shared resource data that ends up stored in multiple local caches. \u7f13\u5b58\u4e00\u81f4\u6027\u662f\u5b58\u50a8\u5728\u591a\u4e2a\u5c40\u90e8\u7f13\u5b58\u4e2d\u7684\u5171\u4eab\u8d44\u6e90\u7684\u4e00\u81f4\u6027\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e00\u81f4\u6027\u7684\u95ee\u9898\uff0c\u9700\u8981\u5404\u4e2a\u5904\u7406\u5668\u8bbf\u95ee\u7f13\u5b58\u65f6\u90fd\u9075\u5faa\u4e00\u4e9b\u534f\u8bae\uff0c\u5728\u8bfb\u5199\u65f6\u8981\u6839\u636e\u534f\u8bae\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u7c7b\u534f\u8bae\u6709MSI\u3001MESI\u3001MOSI\u3001Synapse\u3001Firefly\u53caDragon Protocol\u7b49\uff1bJava\u865a\u62df\u673a\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5185\u5b58\u8bbf\u95ee\u64cd\u4f5c\u4e0e\u786c\u4ef6\u7684\u7f13\u5b58\u8bbf\u95ee\u64cd\u4f5c\u662f\u5177\u6709\u53ef\u6bd4\u6027\u7684\u3002 \u4e71\u5e8f\u6267\u884c \u9664\u4e86\u589e\u52a0\u9ad8\u901f\u7f13\u5b58\u4e4b\u5916\uff0c\u4e3a\u4e86\u4f7f\u5f97\u5904\u7406\u5668\u5185\u90e8\u7684\u8fd0\u7b97\u5355\u5143\u80fd\u5c3d\u91cf\u88ab\u5145\u5206\u5229\u7528\uff0c\u5904\u7406\u5668\u53ef\u80fd\u4f1a\u5bf9\u8f93\u5165\u4ee3\u7801\u8fdb\u884c \u4e71\u5e8f\u6267\u884c (Out-Of-Order Execution)\u4f18\u5316\uff0c\u5904\u7406\u5668\u4f1a\u5728\u8ba1\u7b97\u4e4b\u540e\u5c06\u4e71\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u91cd\u7ec4\uff0c\u4fdd\u8bc1\u8be5\u7ed3\u679c\u4e0e\u987a\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684\uff1b\u4e0e\u5904\u7406\u5668\u7684\u4e71\u5e8f\u6267\u884c\u4f18\u5316\u7c7b\u4f3c\uff0cJava\u865a\u62df\u673a\u7684\u5373\u65f6\u7f16\u8bd1\u5668\u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684 \u6307\u4ee4\u91cd\u6392\u5e8f (Instruction Reorder)\u4f18\u5316\u3002 In-order v.s. Out-of-order Execution CSE P 548: Computer Architecture, University of Washington In-order execution \u987a\u5e8f\u6267\u884c instructions are fetched, executed and completed in compiler-generated order one stalls, they all stall instructions are statically scheduled Out-Of-Order execution \u4e71\u5e8f\u6267\u884c instructions are fetched in compiler-generated order instruction completion is in-oder. instructions are dynamically scheduled Dynamic Scheduling: CMU Computer Architecture In-order pipeline Problem : A true data dependency stalls dispatch of younger instructions into functional (execution) units Dispatch: Act of sending an instruction to a functional unit Out-of-order Execution (Dynamic Scheduling) Idea: Move the dependent instructions out of the way of independent ones Rest areas for dependent instructions: Reservation stations 3 Java\u5185\u5b58\u6a21\u578b Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u89c6\u56fe\u5b9a\u4e49\u4e00\u79cd Java\u5185\u5b58\u6a21\u578b (Java Memory Model, JMM\uff09\u6765\u5c4f\u853d\u6389\u5404\u79cd\u786c\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\u8bbf\u95ee\u5dee\u5f02\uff0c\u4ee5\u5b9e\u73b0\u8ba9Java\u7a0b\u5e8f\u5728\u5404\u79cd\u5e73\u53f0\u4e0b\u90fd\u80fd\u8fbe\u5230\u4e00\u81f4\u7684\u5185\u5b58\u8bbf\u95ee\u6548\u679c\u3002 Princeton COS 597C Memory model is a formal specification of how the memory system will appear to the programmer, eliminating the gap between the behavior expected by the programmer and the actual behavior supported by a system . [Adve's 1995] Memory model specifies: How Threads interact through memory What value a read can return When does a value update become visible to other Threads What assumptions are allowed to make about memory when writing a program or applying some program optimization \u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58 Java\u5185\u5b58\u6a21\u578b\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u5b9a\u4e49\u7a0b\u5e8f\u4e2d \u5404\u4e2a\u53d8\u91cf\u7684\u8bbf\u95ee\u89c4\u5219 \uff0c\u5373\u5728\u865a\u62df\u673a\u4e2d\u5c06\u53d8\u91cf\u5b58\u50a8\u5230\u5185\u5b58\u548c\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u53d8\u91cf\u8fd9\u6837\u7684\u5e95\u5c42\u7ec6\u8282.\u6b64\u5904\u7684\u53d8\u91cf\u4e0eJava\u7f16\u7a0b\u4e2d\u6240\u8bf4\u7684\u53d8\u91cf\u6709\u6240\u533a\u522b\uff0c\u5b83\u5305\u62ec\u4e86\u5b9e\u4f8b\u5b57\u6bb5\u3001\u9759\u6001\u5b57\u6bb5\u548c\u6784\u6210\u6570\u7ec4\u5bf9\u8c61\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u4e0e\u65b9\u6cd5\u53c2\u6570\uff0c\u56e0\u4e3a\u540e\u8005\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\uff0c\u4e0d\u4f1a\u88ab\u5171\u4eab\uff1b Java\u5185\u5b58\u6a21\u578b\u89c4\u5b9a\u4e86\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 \u4e3b\u5185\u5b58 (Main Meory)\u4e2d(\u6b64\u5904\u7684\u4e3b\u5185\u5b58\u4e0e\u4ecb\u7ecd\u7269\u7406\u786c\u4ef6\u65f6\u7684\u4e3b\u5185\u5b58\u540d\u5b57\u4e00\u6837\uff0c\u4e24\u8005\u4e5f\u53ef\u4ee5\u76f8\u4e92\u7c7b\u6bd4\uff0c\u4f46\u6b64\u5904\u4ec5\u662f\u865a\u62df\u673a\u5185\u5b58\u7684\u4e00\u90e8\u5206)\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8fd8\u6709\u81ea\u5df1\u7684 \u5de5\u4f5c\u5185\u5b58 (Working Memory, \u53ef\u4e0e\u524d\u9762\u6240\u8bb2\u7684\u5904\u7406\u5668\u9ad8\u901f\u7f13\u5b58\u7c7b\u6bd4)\uff0c\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e86\u88ab\u8be5\u7ebf\u7a0b\u4f7f\u7528\u5230\u7684\u53d8\u91cf\u7684\u4e3b\u5185\u5b58\u526f\u672c\u62f7\u8d1d\uff0c\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5fc5\u987b\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u5199\u4e3b\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u3002 \u5185\u5b58\u95f4\u4ea4\u4e92\u64cd\u4f5c \u5173\u4e8e\u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58\u4e4b\u95f4\u5177\u4f53\u7684\u4ea4\u4e92\u534f\u8bae\uff0c\u5373\u4e00\u4e2a\u53d8\u91cf\u5982\u4f55\u4ece\u4e3b\u5185\u5b58\u62f7\u8d1d\u5230\u5de5\u4f5c\u5185\u5b58\u3001\u5982\u4f55\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e4b\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\uff0cJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u516b\u79cd\u64cd\u4f5c\u6765\u5b8c\u6210\uff0c\u865a\u62df\u673a\u5b9e\u73b0\u65f6\u5fc5\u987b\u4fdd\u8bc1\u4e0b\u9762\u63d0\u53ca\u7684\u6bcf\u4e00\u79cd\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\u3001\u4e0d\u53ef\u518d\u5206\u7684\uff08\u5bf9\u4e8e double \u548c long \u7c7b\u578b\u7684\u53d8\u91cf\u7684\u67d0\u4e9b\u64cd\u4f5c\u5728\u67d0\u4e9b\u5e73\u53f0\u5141\u8bb8\u6709\u4f8b\u5916\uff09\uff1a lock (\u9501\u5b9a)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u6807\u8bc6\u4e3a\u4e00\u6761\u7ebf\u7a0b\u72ec\u5360\u7684\u72b6\u6001\u3002 unlock (\u89e3\u9501)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u5904\u7406\u9501\u5b9a\u7684\u72b6\u6001\u7684\u53d8\u91cf\u91ca\u653e\u51fa\u6765,\u91ca\u653e\u540e\u7684\u53d8\u91cf\u624d\u53ef\u4ee5\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\uff0c unlock \u4e4b\u524d\u5fc5\u987b\u5c06\u53d8\u91cf\u503c\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 read (\u8bfb\u53d6)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4ece\u4e3b\u5185\u5b58\u4f20\u8f93\u5230\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 load \u52a8\u4f5c\u4f7f\u7528\u3002 load (\u8f7d\u5165)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a read \u64cd\u4f5c\u4ece\u4e3b\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\u526f\u672c\u4e2d\u3002 use (\u4f7f\u7528)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9012\u7ed9\u6267\u884c\u5f15\u64ce\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u9700\u8981\u4f7f\u7528\u5230\u53d8\u91cf\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u5c06\u4f1a\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 assign (\u8d4b\u503c)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u4ece\u6267\u884c\u5f15\u64ce\u63a5\u5230\u7684\u503c\u8d4b\u503c\u7ed9\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 store (\u5b58\u50a8)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9001\u5230\u4e3b\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 write \u64cd\u4f5c\u4f7f\u7528\u3002 write (\u5199\u5165)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a store \u64cd\u4f5c\u4ece\u5de5\u4f5c\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\u4e2d\u3002 \u5982\u679c\u8981\u628a\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u590d\u5236\u5230\u5de5\u4f5c\u5185\u5b58\uff0c\u90a3\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c read \u548c load \u64cd\u4f5c\uff0c\u5982\u679c\u8981\u628a\u53d8\u91cf\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\uff0c\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c store \u548c write \u64cd\u4f5c\u3002Java\u5185\u5b58\u6a21\u578b\u53ea\u662f\u8981\u6c42\u4e0a\u8ff0\u4e24\u4e2a\u64cd\u4f5c\u5fc5\u987b\u6309\u987a\u5e8f\u6267\u884c\uff0c\u800c\u6ca1\u6709\u4fdd\u8bc1\u5fc5\u987b\u662f\u8fde\u7eed\u6267\u884c\u3002\u4e5f\u5c31\u662f\u8bf4 read \u4e0e load \u4e4b\u95f4\u3001 store \u4e0e write \u4e4b\u95f4\u662f\u53ef\u4ee5\u63d2\u5165\u5176\u5b83\u6307\u4ee4\u7684\uff0c\u5982\u679c\u5bf9\u4e3b\u5728\u5185\u4e2d\u7684\u53d8\u91cfa,b\u8fdb\u884c\u8bbf\u95ee\u65f6\uff0c\u4e00\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u987a\u5e8f\u662f read a\u3001 read b\u3001 load b\u3001 load a\u3002\u9664\u6b64\u4e4b\u5916\uff0cJava\u5185\u5b58\u6a21\u578b\u8fd8\u89c4\u5b9a\u4e86\u6267\u884c\u4e0a\u8ff0\u516b\u79cd\u57fa\u7840\u64cd\u4f5c\u65f6\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u89c4\u5219\uff1a \u4e0d\u5141\u8bb8 read \u548c load \u3001 store \u548c write \u64cd\u4f5c\u4e4b\u4e00\u5355\u72ec\u51fa\u73b0\uff0c\u5373\u4e0d\u5141\u8bb8\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u8bfb\u53d6\u4e86\u4f46\u5de5\u4f5c\u5185\u5b58\u4e0d\u63a5\u53d7\uff0c\u6216\u8005\u4ece\u5de5\u4f5c\u5185\u5b58\u53d1\u8d77\u56de\u5199\u4f46\u4e3b\u5185\u5b58\u4e0d\u63a5\u53d7\u7684\u60c5\u51b5\u51fa\u73b0\u3002 \u4e0d\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u4e22\u5f03\u5b83\u7684\u6700\u8fd1\u7684 assign \u64cd\u4f5c\uff0c\u5373\u53d8\u91cf\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u6539\u53d8(\u4e3a\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\u8d4b\u503c)\u4e86\u4e4b\u540e\u5fc5\u987b\u628a\u8be5\u53d8\u5316\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 \u4e00\u4e2a\u65b0\u53d8\u91cf\u53ea\u80fd\u5728\u4e3b\u5185\u5b58\u4e2d\u201c\u8bde\u751f\u201d\uff0c\u4e0d\u5141\u8bb8\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u672a\u88ab\u521d\u59cb\u5316( load \u548c assign )\u7684\u53d8\u91cf\uff0c\u6362\u8bdd\u8bf4\u5c31\u662f\u4e00\u4e2a\u53d8\u91cf\u5728\u5b9e\u65bd use \u548c store \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u6267\u884c\u8fc7\u4e86 assign \u548c load \u64cd\u4f5c\u3002 \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u4e8b\u5148\u6ca1\u6709\u88ab load \u64cd\u4f5c\u9501\u5b9a\uff0c\u5219\u4e0d\u5141\u8bb8\u5bf9\u5b83\u6267\u884c unlock \u64cd\u4f5c\uff1a\u4e5f\u4e0d\u5141\u8bb8\u53bb unlock \u4e00\u4e2a\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\u7684\u53d8\u91cf\u3002 \u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884c unlock \u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d(\u6267\u884c store \u548c write \u64cd\u4f5c)\u3002 \u5bf9\u4e8evolatile\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219 \u5173\u952e\u5b57 volatile \u53ef\u4ee5\u8bf4\u662fJava\u865a\u62df\u673a\u63d0\u4f9b\u7684\u6700\u8f7b\u91cf\u7ea7\u7684\u540c\u6b65\u673a\u5236\uff1b\u5f53\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e3a volatile \u4e4b\u540e\uff0c\u5b83\u5c06\u5177\u5907\u4e24\u79cd\u7279\u6027\uff1a\u7b2c\u4e00\u662f\u4fdd\u8bc1\u6b64\u53d8\u91cf\u5bf9\u6240\u6709\u7ebf\u7a0b\u7684 \u53ef\u89c1\u6027 \uff0c\u8fd9\u91cc\u7684\u53ef\u89c1\u6027\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u65b0\u7684\u503c\u5bf9\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u6765\u8bf4\u662f\u53ef\u4ee5\u7acb\u5373\u5f97\u77e5\u7684\uff0c\u800c\u666e\u901a\u7684\u53d8\u91cf\u7684\u503c\u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\u5747\u9700\u8981\u901a\u8fc7\u4e3b\u5185\u5b58\u6765\u5b8c\u6210\uff1b\u53e6\u5916\u4e00\u4e2a\u662f \u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316 \uff0c\u666e\u901a\u7684\u53d8\u91cf\u4ec5\u4ec5\u4f1a\u4fdd\u8bc1\u5728\u8be5\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u6240\u6709\u4f9d\u8d56\u8d4b\u503c\u7ed3\u679c\u7684\u5730\u65b9\u90fd\u80fd\u83b7\u53d6\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u80fd\u4fdd\u8bc1\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u7684\u987a\u5e8f\u4e0e\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u4e00\u81f4\uff1b volatile \u53d8\u91cf\u5728\u5404\u4e2a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e0d\u5b58\u5728\u4e00\u81f4\u6027\u95ee\u9898\u3002\u4f46\u4e0d\u80fd\u8bf4\u201c\u57fa\u4e8evolatile\u53d8\u91cf\u7684\u8fd0\u7b97\u5728\u5e76\u53d1\u4e0b\u65f6\u5b89\u5168\u7684\u201d\u3002 \u7531\u4e8e volatile \u53d8\u91cf\u53ea\u80fd\u4fdd\u8bc1\u53ef\u89c1\u6027\uff0c\u5728\u4e0d\u7b26\u5408\u4ee5\u4e0b\u4e24\u6761\u89c4\u5219\u7684\u8fd0\u7b97\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u4ecd\u7136\u8981\u901a\u8fc7\u52a0\u9501\u6765\u4fdd\u8bc1\u539f\u5b50\u6027\uff1a \u8fd0\u7b97\u7ed3\u679c\u5e76\u4e0d\u4f9d\u8d56\u53d8\u91cf\u7684\u5f53\u524d\u503c\u6216\u8005\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u5355\u4e00\u7684\u7ebf\u7a0b\u4fee\u6539\u53d8\u91cf\u7684\u503c \u53d8\u91cf\u4e0d\u9700\u8981\u4e0e\u5176\u4ed6\u7684\u72b6\u6001\u53d8\u91cf\u5171\u540c\u53c2\u4e0e\u4e0d\u53d8\u7ea6\u675f\uff1b \u4ee5\u4e0b\u573a\u666f\u5f88\u9002\u5408\u7528 volatile \u53d8\u91cf\u6765\u63a7\u5236\u5e76\u53d1\uff0c\u5f53 shutdown() \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u80fd\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u7684 doWork() \u65b9\u6cd5\u90fd\u7acb\u523b\u505c\u4e0b\u6765\u3002 volatile boolean shutdownRequested ; public void shutdown () { shutdownRequested = true ; } public void doWork () { while (! shutdownRequested ) { // do stuff } } volatile \u53d8\u91cf\u8bfb\u64cd\u4f5c\u7684\u6027\u80fd\u6d88\u8017\u4e0e\u666e\u901a\u53d8\u91cf\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u5dee\u522b\uff0c\u4f46\u662f\u5199\u64cd\u4f5c\u5219\u53ef\u80fd\u4f1a\u6162\u4e00\u4e9b\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u672c\u5730\u4ee3\u7801\u4e2d\u63d2\u5165\u8bb8\u591a\u5185\u5b58\u5c4f\u969c(Memory Barrier)\u6307\u4ee4\u6765\u4fdd\u8bc1\u5904\u7406\u5668\u4e0d\u53d1\u751f\u4e71\u5e8f\u6267\u884c\uff1b\u4e0d\u8fc7\u5927\u591a\u6570\u573a\u666f\u4e0b volatile \u7684\u603b\u5f00\u9500\u4ecd\u7136\u8981\u6bd4\u9501\u4f4e\uff0c\u6211\u4eec\u5728 volatile \u4e0e\u9501\u4e4b\u4e2d\u9009\u62e9\u7684\u552f\u4e00\u4f9d\u636e\u4ec5\u4ec5\u662f volatile \u7684\u8bed\u4e49\u80fd\u5426\u6ee1\u8db3\u4f7f\u7528\u573a\u666f\u7684\u9700\u6c42\uff1b Java\u5185\u5b58\u6a21\u578b\u4e2d\u5bf9 volatile \u53d8\u91cf\u5b9a\u4e49\u7684\u7279\u6b8a\u89c4\u5219(\u5047\u8bbeV\u8868\u793a volatile \u884c\u53d8\u91cf)\uff1a \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4f7f\u7528V\u524d\u90fd\u5fc5\u987b\u5148\u4ece\u4e3b\u5185\u5b58\u5237\u65b0\u6700\u65b0\u7684\u503c\uff0c\u7528\u4e8e\u4fdd\u8bc1\u80fd\u770b\u5230\u5176\u4ed6\u7ebf\u7a0b\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539\u540e\u7684\u503c \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4fee\u6539V\u4e4b\u540e\u90fd\u5fc5\u987b\u7acb\u523b\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\uff0c\u7528\u4e8e\u4fdd\u8bc1\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539 \u8981\u6c42V\u4e0d\u4f1a\u88ab\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316\uff0c\u4fdd\u8bc1\u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\u548c\u7a0b\u5e8f\u7684\u987a\u5e8f\u76f8\u540c\u3002 \u5bf9\u4e8elong\u548cdouble\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219 Java\u5185\u5b58\u6a21\u578b\u8981\u6c42 lock \u3001 unlock \u3001 read \u3001 load \u3001 assign \u3001 use \u3001 store \u3001 write \u8fd9\u516b\u4e2a\u64cd\u4f5c\u90fd\u5177\u6709\u539f\u5b50\u6027\u3002 \u4f46\u662f\u5bf9\u4e8e64\u4f4d\u7684\u6570\u636e\u7c7b\u578b(long\u548cdouble): \u5141\u8bb8\u865a\u62df\u673a\u5c06\u6ca1\u6709\u88ab volatile \u4fee\u9970\u768464\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u5212\u5206\u4e3a\u4e24\u6b2132\u4f4d\u7684\u64cd\u4f5c\u6765\u8fdb\u884c\uff0c\u5373\u5141\u8bb8\u865a\u62df\u673a\u5b9e\u73b0\u9009\u62e9\u53ef\u4ee5\u4e0d\u4fdd\u8bc164\u4f4d\u6570\u636e\u7c7b\u578b\u7684 read \u3001 load \u3001 store \u3001 write \u8fd94\u4e2a\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u8fd9\u70b9\u5c31\u662f\u6240\u8c13\u7684 long\u548cdouble\u7684\u975e\u539f\u5b50\u6027\u534f\u5b9a (Nonatomic Treatment of double and long Variables)\uff1b \u4f46\u5141\u8bb8\u865a\u62df\u673a\u9009\u62e9\u628a\u8fd9\u4e9b\u64cd\u4f5c\u5b9e\u73b0\u4e3a\u5177\u6709\u539f\u5b50\u6027\u7684\u64cd\u4f5c\uff0c\u76ee\u524d\u5404\u79cd\u5e73\u53f0\u4e0b\u7684\u5546\u7528\u865a\u62df\u673a\u51e0\u4e4e\u90fd\u9009\u62e9\u628a64\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u4f5c\u4e3a\u539f\u5b50\u64cd\u4f5c\u6765\u5bf9\u5f85\u3002 \u539f\u5b50\u6027\u3001\u53ef\u89c1\u6027\u4e0e\u6709\u5e8f\u6027 \u539f\u5b50\u6027 (Atomicity): \u7531Java\u5185\u5b58\u6a21\u578b\u6765\u76f4\u63a5\u4fdd\u8bc1\u7684\u539f\u5b50\u6027\u53d8\u91cf\u64cd\u4f5c\u5305\u62ec read \u3001 load \u3001 assign \u3001 use \u3001 store \u548cC write \u8fd9\u516d\u4e2a\u3002 lock \u3001 unlock \u64cd\u4f5c\u672a\u76f4\u63a5\u5f00\u653e\u7ed9\u7528\u6237\u4f7f\u7528, \u800c\u53cd\u6620\u5728\u540c\u6b65\u5757\u4e2d \u2014\u2014 synchronized \u5757\u4e4b\u95f4\u7684\u64cd\u4f5c\u4e5f\u5177\u5907\u539f\u5b50\u6027\uff1b \u53ef\u89c1\u6027 (Visibility)\uff1a\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u5171\u4eab\u53d8\u91cf\u7684\u503c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u80fd\u591f\u7acb\u5373\u5f97\u77e5\u8fd9\u4e2a\u4fee\u6539\u3002 volatile \u3001 synchronized \u548c final \u5173\u952e\u5b57\u80fd\u5b9e\u73b0\u53ef\u89c1\u6027\u3002 synchronized \u540c\u6b65\u5757\u7684\u53ef\u89c1\u6027\u662f\u7531\u201c\u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884cun lock \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\u201c\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\u3002 final \u5173\u952e\u5b57\u7684\u53ef\u89c1\u6027\u662f\u6307\uff0c\u88ab final \u4fee\u9970\u7684\u5b57\u6bb5\u5728\u6784\u9020\u5668\u4e2d\u4e00\u65e6\u88ab\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u5e76\u4e14\u6784\u9020\u5668\u6ca1\u6709\u628a\"this\"\u7684\u5f15\u7528\u4f20\u9012\u51fa\u53bb\uff0c\u90a3\u4e48\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u5c31\u80fd\u770b\u89c1 final \u5b57\u6bb5\u7684\u503c\u3002 \u6709\u5e8f\u6027 (Ordering)\uff1a\u5982\u679c\u5728\u672c\u7ebf\u7a0b\u5185\u89c2\u5bdf\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u6709\u5e8f\u7684\uff1b\u5982\u679c\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u89c2\u5bdf\u53e6\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u65e0\u5e8f\u7684\u3002Java\u8bed\u8a00\u63d0\u4f9b\u4e86 volatile \u548c synchronized \u4e24\u4e2a\u5173\u952e\u5b57\u6765\u4fdd\u8bc1\u7ebf\u7a0b\u4e4b\u95f4\u64cd\u4f5c\u7684\u6709\u5e8f\u6027, volatile \u5173\u952e\u5b57\u672c\u8eab\u5c31\u5305\u542b\u4e86\u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u7684\u8bed\u610f\uff0c\u800c synchronized \u662f\u7531\u201c\u4e00\u4e2a\u53d8\u91cf\u5728\u540c\u4e00\u65f6\u523b\u53ea\u5141\u8bb8\u4e00\u6761\u7ebf\u7a0b\u5bf9\u5176\u8fdb\u884c lock \u64cd\u4f5c\u201d\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\uff0c\u8fd9\u4e2a\u89c4\u5219\u51b3\u5b9a\u4e86\u6301\u6709\u540c\u4e00\u4e2a\u9501\u7684\u4e24\u4e2a\u540c\u6b65\u5757\u53ea\u80fd\u4e32\u884c\u7684\u8fdb\u5165\u3002 \u5148\u884c\u53d1\u751f\u539f\u5219 \u5148\u884c\u53d1\u751f (happens-before)\u539f\u5219\u662f\u5224\u65ad\u6570\u636e\u662f\u5426\u5b58\u5728\u7ade\u4e89\u3001\u7ebf\u7a0b\u662f\u5426\u5b89\u5168\u7684\u4e3b\u8981\u4f9d\u636e\u3002 \u5148\u884c\u53d1\u751f(happens-before)\u662fJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u4e24\u9879\u64cd\u4f5c\u4e4b\u95f4\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u5982\u679c\u8bf4\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u5176\u5b9e\u5c31\u662f\u8bf4\u5728\u53d1\u751f\u64cd\u4f5cB\u4e4b\u524d\uff0c\u64cd\u4f5cA\u4ea7\u751f\u7684\u5f71\u54cd\u80fd\u88ab\u64cd\u4f5cB\u89c2\u5bdf\u5230\uff0c\u5f71\u54cd\u5305\u62ec\u4e86\u4fee\u6539\u4e86\u5185\u5b58\u4e2d\u5171\u4eab\u53d8\u91cf\u7684\u503c\u3001\u53d1\u9001\u4e86\u6d88\u606f\u3001\u8c03\u7528\u4e86\u65b9\u6cd5\u7b49. \u4e0b\u9762\u662fJava\u5185\u5b58\u6a21\u578b\u4e0b\u4e00\u4e9b\u5929\u7136\u7684 \u5148\u884c\u53d1\u751f\u5173\u7cfb \u3002\u8fd9\u4e9b\u5148\u884c\u53d1\u751f\u5173\u7cfb\u65e0\u9700\u4efb\u4f55\u540c\u6b65\u5668\u534f\u52a9\u5c31\u53ef\u4ee5\u5b58\u5728\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u7684\u5173\u7cfb\u4e0d\u5728\u6b64\u5217\uff0c\u5e76\u4e14\u65e0\u6cd5\u4ece\u4ee5\u4e0b\u89c4\u5219\u63a8\u5bfc\u51fa\u6765\u7684\u8bdd\uff0c\u5b83\u4eec\u5c31\u6ca1\u6709\u987a\u5e8f\u6027\u4fdd\u969c\uff0c\u865a\u62df\u673a\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u968f\u610f\u7684\u91cd\u6392\u5e8f\uff1a \u7a0b\u5e8f\u6b21\u5e8f\u89c4\u5219 (Pragram Order Rule)\uff1a \u5728\u4e00\u4e2a\u7ebf\u7a0b\u5185 \uff0c\u6309\u7167\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u4e66\u5199\u5728\u524d\u9762\u7684\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u4e66\u5199\u5728\u540e\u9762\u7684\u64cd\u4f5c\u3002\u51c6\u786e\u5730\u8bf4\u5e94\u8be5\u662f\u63a7\u5236\u6d41\u987a\u5e8f\u800c\u4e0d\u662f\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u8003\u8651\u5206\u652f\u3001\u5faa\u73af\u7ed3\u6784\u3002 \u7ba1\u7a0b\u9501\u5b9a\u89c4\u5219 (Monitor lock Rule)\uff1a\u4e00\u4e2a unlock \u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u540c\u4e00\u4e2a\u9501\u7684 lock \u64cd\u4f5c\u3002\u8fd9\u91cc\u5fc5\u987b\u5f3a\u8c03\u7684\u662f\u540c\u4e00\u4e2a\u9501\uff0c\u800c\u201d\u540e\u9762\u201c\u662f\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 volatile \u53d8\u91cf\u89c4\u5219 (Volatile Variable Rule)\uff1a\u5bf9\u4e00\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u8bfb\u53d6\u64cd\u4f5c\uff0c\u8fd9\u91cc\u7684\u201d\u540e\u9762\u201c\u540c\u6837\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 \u7ebf\u7a0b\u542f\u52a8\u89c4\u5219 (Thread Start Rule)\uff1a Thread\u5bf9\u8c61\u7684 start() \u65b9\u6cd5\u5148\u884c\u53d1\u751f\u4e8e\u6b64\u7ebf\u7a0b\u7684\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u3002 \u7ebf\u7a0b\u7ec8\u6b62\u89c4\u5219 (Thread Termination Rule)\uff1a\u7ebf\u7a0b\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5148\u884c\u53d1\u751f\u4e8e\u5bf9\u6b64\u7ebf\u7a0b\u7684\u7ec8\u6b62\u68c0\u6d4b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Thread.join() \u65b9\u6cd5\u7ed3\u675f\uff0c Thread.isAlive() \u7684\u8fd4\u56de\u503c\u7b49\u4f5c\u6bb5\u68c0\u6d4b\u5230\u7ebf\u7a0b\u5df2\u7ecf\u7ec8\u6b62\u6267\u884c\u3002 \u7ebf\u7a0b\u4e2d\u65ad\u89c4 \u5219(Thread Interruption Rule)\uff1a\u5bf9\u7ebf\u7a0b interrupt() \u65b9\u6cd5\u7684\u8c03\u7528\u5148\u884c\u53d1\u751f\u4e8e\u88ab\u4e2d\u65ad\u7ebf\u7a0b\u7684\u4ee3\u7801\u68c0\u6d4b\u5230\u4e2d\u65ad\u4e8b\u4ef6\u7684\u53d1\u751f\uff0c\u53ef\u4ee5\u901a\u8fc7 Thread.interrupted() \u65b9\u6cd5\u68c0\u6d4b\u662f\u5426\u6709\u4e2d\u65ad\u53d1\u751f\u3002 \u5bf9\u8c61\u7ec8\u7ed3\u89c4\u5219 (Finalizer Rule)\uff1a\u4e00\u4e2a\u5bf9\u8c61\u521d\u59cb\u5316\u5b8c\u6210(\u6784\u9020\u65b9\u6cd5\u6267\u884c\u5b8c\u6210)\u5148\u884c\u53d1\u751f\u4e8e\u5b83\u7684 finalize() \u65b9\u6cd5\u7684\u5f00\u59cb\u3002 \u4f20\u9012\u6027 (Transitivity)\uff1a\u5982\u679c\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u64cd\u4f5cB\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\uff0c\u90a3\u5c31\u53ef\u4ee5\u5f97\u51fa\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\u7684\u7ed3\u8bba\u3002 \u65f6\u95f4\u5148\u540e\u987a\u5e8f\u4e0e\u5148\u884c\u53d1\u751f\u539f\u5219\u4e4b\u95f4\u57fa\u672c\u6ca1\u6709\u592a\u5927\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u8861\u91cf\u5e76\u53d1\u5b89\u5168\u95ee\u9898\u7684\u65f6\u5019\u4e0d\u8981\u53d7\u5230\u65f6\u95f4\u987a\u5e8f\u7684\u5e72\u6270\uff0c\u4e00\u5207\u5fc5\u987b\u4ee5\u5148\u884c\u53d1\u751f\u539f\u5219\u4e3a\u51c6\uff1b 4 Java\u4e0e\u7ebf\u7a0b \u7ebf\u7a0b\u7684\u5b9e\u73b0 \u7ebf\u7a0b\u662f\u6bd4\u8fdb\u7a0b\u66f4\u8f7b\u91cf\u7ea7\u7684\u8c03\u5ea6\u6267\u884c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u7684\u5f15\u5165\u53ef\u4ee5\u628a\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u5206\u914d\u548c\u6267\u884c\u8c03\u5ea6\u5206\u5f00\uff0c\u5404\u4e2a\u7ebf\u7a0b\u65e2\u53ef\u4ee5\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90\u53c8\u53ef\u4ee5\u72ec\u7acb\u8c03\u5ea6\u3002 Thread\u7c7b\u4e0e\u5927\u90e8\u5206\u7684Java API\u6709\u663e\u8457\u7684\u5dee\u522b\uff0c\u5b83\u7684\u6240\u6709\u5173\u952e\u65b9\u6cd5\u90fd\u662f\u58f0\u660e\u4e3a native \u7684\u3002Java\u7ebf\u7a0b\u662f\u57fa\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u539f\u751f\u7ebf\u7a0b\u6a21\u578b\u6765\u5b9e\u73b0\u7684\u3002 Note native \u4fee\u9970\u8bcd\u8bf4\u660e\uff0c\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u662f\u7528\u5176\u4ed6\u8bed\u8a00(C/C++)\u5b9e\u73b0\u7684\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7Java Native Interface (JNI, Java\u672c\u5730\u63a5\u53e3)\u8c03\u7528\u672c\u5730\u4ee3\u7801\u3002 Java\u7ebf\u7a0b\u8c03\u5ea6 Java\u8bed\u8a00\u4e00\u5171\u8bbe\u7f6e\u4e8610\u4e2a\u7ea7\u522b\u7684\u7ebf\u7a0b\u4f18\u5148\u7ea7( Thread.MIN_PRIORITY - Thread.MAX_PRIORITY )\u3002 /* The minimum priority that a Thread can have.*/ public static final int MIN_PRIORITY = 1 ; /* The default priority that is C assign /C ed to a Thread.*/ public static final int NORM_PRIORITY = 5 ; /* The maximum priority that a Thread can have. */ public static final int MAX_PRIORITY = 10 ; \u72b6\u6001\u8f6c\u6362 Java\u8bed\u8a00\u5b9a\u4e49\u4e86\u4e94\u79cd\u7ebf\u7a0b\u72b6\u6001\uff0c\u5728\u4efb\u610f\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e14\u53ea\u6709\u5176\u4e2d\u4e00\u79cd\u72b6\u6001\uff0c\u5206\u522b\u662f \u65b0\u5efa(New): Thread state for a Thread which has not yet started. \u8fd0\u884c(Runnable): Thread state for a runnable Thread. A Thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as processor. \u963b\u585e(Blocked): Thread state for a Thread blocked waiting for a monitor lock . A Thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait . \u65e0\u9650\u671f\u7b49\u5f85(Waiting): A Thread that is waiting indefinitely for another Thread to perform a particular action is in this state. wait() join() lock Support.park() \u9650\u671f\u7b49\u5f85(Timed Waiting): A Thread that is waiting for another Thread to perform an action for up to a specified waiting time is in this state. sleep() wait(long) join(long) lock Support.parkNanos(long) lock Support.parkUntil() \u7ed3\u675f(Terminated): A Thread that has exited is in this state.","title":"Chapter 12 : Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b"},{"location":"java/ujvm/ch12/#java-12-java","text":"\u5e76\u53d1\u5904\u7406\u7684\u5e7f\u6cdb\u5e94\u7528\u662f\u4f7f\u5f97Amdahl\u5b9a\u5f8b\u4ee3\u66ff\u6469\u5c14\u5b9a\u5f8b\u6210\u4e3a\u8ba1\u7b97\u673a\u6027\u80fd\u53d1\u5c55\u6e90\u52a8\u529b\u7684\u6839\u672c\u539f\u56e0\uff0c\u4e5f\u662f\u4eba\u7c7b\u201c\u538b\u69a8\u201d\u8ba1\u7b97\u673a\u8fd0\u7b97\u80fd\u529b\u7684\u6700\u6709\u529b\u6b66\u5668\u3002","title":"\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a 12 - Java\u5185\u5b58\u6a21\u578b\u4e0e\u7ebf\u7a0b"},{"location":"java/ujvm/ch12/#1","text":"\u591a\u4efb\u52a1\u5904\u7406\u5728\u73b0\u4ee3\u8ba1\u7b97\u673a\u64cd\u4f5c\u7cfb\u7edf\u4e2d\u51e0\u4e4e\u5df2\u662f\u4e00\u9879\u5fc5\u5907\u7684\u529f\u80fd\u4e86\uff1b \u9664\u4e86\u5145\u5206\u5229\u7528\u8ba1\u7b97\u673a\u5904\u7406\u5668\u7684\u80fd\u529b\u5916\uff0c\u4e00\u4e2a\u670d\u52a1\u7aef\u540c\u65f6\u5bf9\u591a\u4e2a\u5ba2\u6237\u7aef\u63d0\u4f9b\u670d\u52a1\u5219\u662f\u53e6\u4e00\u4e2a\u66f4\u5177\u4f53\u7684\u5e76\u53d1\u5e94\u7528\u573a\u666f\uff1b\u670d\u52a1\u7aef\u662fJava\u8bed\u8a00\u6700\u64c5\u957f\u7684\u9886\u57df\u4e4b\u4e00\uff0c\u4e0d\u8fc7\u5982\u4f55\u5199\u597d\u5e76\u53d1\u5e94\u7528\u7a0b\u5e8f\u5374\u53c8\u662f\u670d\u52a1\u7aef\u7a0b\u5e8f\u5f00\u53d1\u7684\u96be\u70b9\u4e4b\u4e00\uff0c\u5904\u7406\u597d\u5e76\u53d1\u65b9\u9762\u7684\u95ee\u9898\u901a\u5e38\u9700\u8981\u66f4\u591a\u7684\u7f16\u7801\u7ecf\u9a8c\u6765\u652f\u6301\uff0c\u5e78\u597dJava\u8bed\u8a00\u548c\u865a\u62df\u673a\u63d0\u4f9b\u4e86\u8bb8\u591a\u5de5\u5177\uff0c\u628a\u5e76\u53d1\u7f16\u7801\u7684\u95e8\u69db\u964d\u4f4e\u4e86\u4e0d\u5c11\uff1b","title":"1 \u6982\u8ff0"},{"location":"java/ujvm/ch12/#2","text":"","title":"2 \u786c\u4ef6\u7684\u6548\u7387\u4e0e\u4e00\u81f4\u6027"},{"location":"java/ujvm/ch12/#_1","text":"\u57fa\u4e8e\u9ad8\u901f\u7f13\u5b58\u7684\u5b58\u50a8\u4ea4\u4e92\u5f88\u597d\u5730\u89e3\u51b3\u4e86\u5904\u7406\u5668\u4e0e\u5185\u5b58\u7684\u901f\u5ea6\u77db\u76fe\uff0c\u4f46\u662f\u4e5f\u4e3a\u8ba1\u7b97\u673a\u7cfb\u7edf\u5e26\u6765\u66f4\u9ad8\u7684\u590d\u6742\u5ea6\uff0c\u56e0\u4e3a\u5b83\u5f15\u5165\u4e86\u4e00\u4e2a\u65b0\u7684\u95ee\u9898\uff1a \u7f13\u5b58\u4e00\u81f4\u6027 (Cache Coherence)\u3002\u5728\u591a\u5904\u7406\u7cfb\u7edf\u4e2d\uff0c\u6bcf\u4e2a\u5904\u7406\u5668\u90fd\u6709\u81ea\u5df1\u7684\u9ad8\u901f\u7f13\u5b58\uff0c\u800c\u5b83\u4eec\u6709\u5171\u4eab\u540c\u4e00\u4e3b\u5185\u5b58(Main memory)\u3002 Cache coherence is the uniformity of shared resource data that ends up stored in multiple local caches. \u7f13\u5b58\u4e00\u81f4\u6027\u662f\u5b58\u50a8\u5728\u591a\u4e2a\u5c40\u90e8\u7f13\u5b58\u4e2d\u7684\u5171\u4eab\u8d44\u6e90\u7684\u4e00\u81f4\u6027\u3002 \u4e3a\u4e86\u89e3\u51b3\u4e00\u81f4\u6027\u7684\u95ee\u9898\uff0c\u9700\u8981\u5404\u4e2a\u5904\u7406\u5668\u8bbf\u95ee\u7f13\u5b58\u65f6\u90fd\u9075\u5faa\u4e00\u4e9b\u534f\u8bae\uff0c\u5728\u8bfb\u5199\u65f6\u8981\u6839\u636e\u534f\u8bae\u6765\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u7c7b\u534f\u8bae\u6709MSI\u3001MESI\u3001MOSI\u3001Synapse\u3001Firefly\u53caDragon Protocol\u7b49\uff1bJava\u865a\u62df\u673a\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u5185\u5b58\u8bbf\u95ee\u64cd\u4f5c\u4e0e\u786c\u4ef6\u7684\u7f13\u5b58\u8bbf\u95ee\u64cd\u4f5c\u662f\u5177\u6709\u53ef\u6bd4\u6027\u7684\u3002","title":"\u7f13\u5b58\u4e00\u81f4\u6027"},{"location":"java/ujvm/ch12/#_2","text":"\u9664\u4e86\u589e\u52a0\u9ad8\u901f\u7f13\u5b58\u4e4b\u5916\uff0c\u4e3a\u4e86\u4f7f\u5f97\u5904\u7406\u5668\u5185\u90e8\u7684\u8fd0\u7b97\u5355\u5143\u80fd\u5c3d\u91cf\u88ab\u5145\u5206\u5229\u7528\uff0c\u5904\u7406\u5668\u53ef\u80fd\u4f1a\u5bf9\u8f93\u5165\u4ee3\u7801\u8fdb\u884c \u4e71\u5e8f\u6267\u884c (Out-Of-Order Execution)\u4f18\u5316\uff0c\u5904\u7406\u5668\u4f1a\u5728\u8ba1\u7b97\u4e4b\u540e\u5c06\u4e71\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u91cd\u7ec4\uff0c\u4fdd\u8bc1\u8be5\u7ed3\u679c\u4e0e\u987a\u5e8f\u6267\u884c\u7684\u7ed3\u679c\u662f\u4e00\u81f4\u7684\uff1b\u4e0e\u5904\u7406\u5668\u7684\u4e71\u5e8f\u6267\u884c\u4f18\u5316\u7c7b\u4f3c\uff0cJava\u865a\u62df\u673a\u7684\u5373\u65f6\u7f16\u8bd1\u5668\u4e2d\u4e5f\u6709\u7c7b\u4f3c\u7684 \u6307\u4ee4\u91cd\u6392\u5e8f (Instruction Reorder)\u4f18\u5316\u3002 In-order v.s. Out-of-order Execution CSE P 548: Computer Architecture, University of Washington In-order execution \u987a\u5e8f\u6267\u884c instructions are fetched, executed and completed in compiler-generated order one stalls, they all stall instructions are statically scheduled Out-Of-Order execution \u4e71\u5e8f\u6267\u884c instructions are fetched in compiler-generated order instruction completion is in-oder. instructions are dynamically scheduled Dynamic Scheduling: CMU Computer Architecture In-order pipeline Problem : A true data dependency stalls dispatch of younger instructions into functional (execution) units Dispatch: Act of sending an instruction to a functional unit Out-of-order Execution (Dynamic Scheduling) Idea: Move the dependent instructions out of the way of independent ones Rest areas for dependent instructions: Reservation stations","title":"\u4e71\u5e8f\u6267\u884c"},{"location":"java/ujvm/ch12/#3-java","text":"Java\u865a\u62df\u673a\u89c4\u8303\u4e2d\u89c6\u56fe\u5b9a\u4e49\u4e00\u79cd Java\u5185\u5b58\u6a21\u578b (Java Memory Model, JMM\uff09\u6765\u5c4f\u853d\u6389\u5404\u79cd\u786c\u4ef6\u548c\u64cd\u4f5c\u7cfb\u7edf\u7684\u5185\u5b58\u8bbf\u95ee\u5dee\u5f02\uff0c\u4ee5\u5b9e\u73b0\u8ba9Java\u7a0b\u5e8f\u5728\u5404\u79cd\u5e73\u53f0\u4e0b\u90fd\u80fd\u8fbe\u5230\u4e00\u81f4\u7684\u5185\u5b58\u8bbf\u95ee\u6548\u679c\u3002 Princeton COS 597C Memory model is a formal specification of how the memory system will appear to the programmer, eliminating the gap between the behavior expected by the programmer and the actual behavior supported by a system . [Adve's 1995] Memory model specifies: How Threads interact through memory What value a read can return When does a value update become visible to other Threads What assumptions are allowed to make about memory when writing a program or applying some program optimization","title":"3 Java\u5185\u5b58\u6a21\u578b"},{"location":"java/ujvm/ch12/#_3","text":"Java\u5185\u5b58\u6a21\u578b\u7684\u4e00\u4e2a\u4e3b\u8981\u76ee\u6807\u662f\u5b9a\u4e49\u7a0b\u5e8f\u4e2d \u5404\u4e2a\u53d8\u91cf\u7684\u8bbf\u95ee\u89c4\u5219 \uff0c\u5373\u5728\u865a\u62df\u673a\u4e2d\u5c06\u53d8\u91cf\u5b58\u50a8\u5230\u5185\u5b58\u548c\u4ece\u5185\u5b58\u4e2d\u53d6\u51fa\u53d8\u91cf\u8fd9\u6837\u7684\u5e95\u5c42\u7ec6\u8282.\u6b64\u5904\u7684\u53d8\u91cf\u4e0eJava\u7f16\u7a0b\u4e2d\u6240\u8bf4\u7684\u53d8\u91cf\u6709\u6240\u533a\u522b\uff0c\u5b83\u5305\u62ec\u4e86\u5b9e\u4f8b\u5b57\u6bb5\u3001\u9759\u6001\u5b57\u6bb5\u548c\u6784\u6210\u6570\u7ec4\u5bf9\u8c61\u7684\u5143\u7d20\uff0c\u4f46\u4e0d\u5305\u62ec\u5c40\u90e8\u53d8\u91cf\u4e0e\u65b9\u6cd5\u53c2\u6570\uff0c\u56e0\u4e3a\u540e\u8005\u662f\u7ebf\u7a0b\u79c1\u6709\u7684\uff0c\u4e0d\u4f1a\u88ab\u5171\u4eab\uff1b Java\u5185\u5b58\u6a21\u578b\u89c4\u5b9a\u4e86\u6240\u6709\u7684\u53d8\u91cf\u90fd\u5b58\u50a8\u5728 \u4e3b\u5185\u5b58 (Main Meory)\u4e2d(\u6b64\u5904\u7684\u4e3b\u5185\u5b58\u4e0e\u4ecb\u7ecd\u7269\u7406\u786c\u4ef6\u65f6\u7684\u4e3b\u5185\u5b58\u540d\u5b57\u4e00\u6837\uff0c\u4e24\u8005\u4e5f\u53ef\u4ee5\u76f8\u4e92\u7c7b\u6bd4\uff0c\u4f46\u6b64\u5904\u4ec5\u662f\u865a\u62df\u673a\u5185\u5b58\u7684\u4e00\u90e8\u5206)\uff0c\u6bcf\u4e2a\u7ebf\u7a0b\u8fd8\u6709\u81ea\u5df1\u7684 \u5de5\u4f5c\u5185\u5b58 (Working Memory, \u53ef\u4e0e\u524d\u9762\u6240\u8bb2\u7684\u5904\u7406\u5668\u9ad8\u901f\u7f13\u5b58\u7c7b\u6bd4)\uff0c\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4fdd\u5b58\u4e86\u88ab\u8be5\u7ebf\u7a0b\u4f7f\u7528\u5230\u7684\u53d8\u91cf\u7684\u4e3b\u5185\u5b58\u526f\u672c\u62f7\u8d1d\uff0c\u7ebf\u7a0b\u5bf9\u53d8\u91cf\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5fc5\u987b\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u8fdb\u884c\uff0c\u800c\u4e0d\u80fd\u76f4\u63a5\u8bfb\u5199\u4e3b\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\u3002","title":"\u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58"},{"location":"java/ujvm/ch12/#_4","text":"\u5173\u4e8e\u4e3b\u5185\u5b58\u4e0e\u5de5\u4f5c\u5185\u5b58\u4e4b\u95f4\u5177\u4f53\u7684\u4ea4\u4e92\u534f\u8bae\uff0c\u5373\u4e00\u4e2a\u53d8\u91cf\u5982\u4f55\u4ece\u4e3b\u5185\u5b58\u62f7\u8d1d\u5230\u5de5\u4f5c\u5185\u5b58\u3001\u5982\u4f55\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e4b\u7c7b\u7684\u5b9e\u73b0\u7ec6\u8282\uff0cJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u4e86\u4ee5\u4e0b\u516b\u79cd\u64cd\u4f5c\u6765\u5b8c\u6210\uff0c\u865a\u62df\u673a\u5b9e\u73b0\u65f6\u5fc5\u987b\u4fdd\u8bc1\u4e0b\u9762\u63d0\u53ca\u7684\u6bcf\u4e00\u79cd\u64cd\u4f5c\u90fd\u662f\u539f\u5b50\u7684\u3001\u4e0d\u53ef\u518d\u5206\u7684\uff08\u5bf9\u4e8e double \u548c long \u7c7b\u578b\u7684\u53d8\u91cf\u7684\u67d0\u4e9b\u64cd\u4f5c\u5728\u67d0\u4e9b\u5e73\u53f0\u5141\u8bb8\u6709\u4f8b\u5916\uff09\uff1a lock (\u9501\u5b9a)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u6807\u8bc6\u4e3a\u4e00\u6761\u7ebf\u7a0b\u72ec\u5360\u7684\u72b6\u6001\u3002 unlock (\u89e3\u9501)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u5904\u7406\u9501\u5b9a\u7684\u72b6\u6001\u7684\u53d8\u91cf\u91ca\u653e\u51fa\u6765,\u91ca\u653e\u540e\u7684\u53d8\u91cf\u624d\u53ef\u4ee5\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\uff0c unlock \u4e4b\u524d\u5fc5\u987b\u5c06\u53d8\u91cf\u503c\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 read (\u8bfb\u53d6)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4ece\u4e3b\u5185\u5b58\u4f20\u8f93\u5230\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 load \u52a8\u4f5c\u4f7f\u7528\u3002 load (\u8f7d\u5165)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a read \u64cd\u4f5c\u4ece\u4e3b\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\u526f\u672c\u4e2d\u3002 use (\u4f7f\u7528)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u4e2d\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9012\u7ed9\u6267\u884c\u5f15\u64ce\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u9700\u8981\u4f7f\u7528\u5230\u53d8\u91cf\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u5c06\u4f1a\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 assign (\u8d4b\u503c)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\uff0c\u5b83\u628a\u4e00\u4e2a\u4ece\u6267\u884c\u5f15\u64ce\u63a5\u5230\u7684\u503c\u8d4b\u503c\u7ed9\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u6bcf\u5f53\u865a\u62df\u673a\u9047\u5230\u4e00\u4e2a\u7ed9\u53d8\u91cf\u8d4b\u503c\u7684\u5b57\u8282\u7801\u6307\u4ee4\u65f6\u6267\u884c\u8fd9\u4e2a\u64cd\u4f5c\u3002 store (\u5b58\u50a8)\uff1a\u4f5c\u7528\u4e8e\u5de5\u4f5c\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e00\u4e2a\u53d8\u91cf\u7684\u503c\u4f20\u9001\u5230\u4e3b\u5185\u5b58\u4e2d\uff0c\u4ee5\u4fbf\u968f\u540e\u7684 write \u64cd\u4f5c\u4f7f\u7528\u3002 write (\u5199\u5165)\uff1a\u4f5c\u7528\u4e8e\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\uff0c\u5b83\u628a store \u64cd\u4f5c\u4ece\u5de5\u4f5c\u5185\u5b58\u4e2d\u5f97\u5230\u7684\u503c\u653e\u5165\u4e3b\u5185\u5b58\u7684\u53d8\u91cf\u4e2d\u3002 \u5982\u679c\u8981\u628a\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u590d\u5236\u5230\u5de5\u4f5c\u5185\u5b58\uff0c\u90a3\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c read \u548c load \u64cd\u4f5c\uff0c\u5982\u679c\u8981\u628a\u53d8\u91cf\u4ece\u5de5\u4f5c\u5185\u5b58\u540c\u6b65\u56de\u4e3b\u5185\u5b58\uff0c\u5c31\u8981\u987a\u5e8f\u5730\u6267\u884c store \u548c write \u64cd\u4f5c\u3002Java\u5185\u5b58\u6a21\u578b\u53ea\u662f\u8981\u6c42\u4e0a\u8ff0\u4e24\u4e2a\u64cd\u4f5c\u5fc5\u987b\u6309\u987a\u5e8f\u6267\u884c\uff0c\u800c\u6ca1\u6709\u4fdd\u8bc1\u5fc5\u987b\u662f\u8fde\u7eed\u6267\u884c\u3002\u4e5f\u5c31\u662f\u8bf4 read \u4e0e load \u4e4b\u95f4\u3001 store \u4e0e write \u4e4b\u95f4\u662f\u53ef\u4ee5\u63d2\u5165\u5176\u5b83\u6307\u4ee4\u7684\uff0c\u5982\u679c\u5bf9\u4e3b\u5728\u5185\u4e2d\u7684\u53d8\u91cfa,b\u8fdb\u884c\u8bbf\u95ee\u65f6\uff0c\u4e00\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u987a\u5e8f\u662f read a\u3001 read b\u3001 load b\u3001 load a\u3002\u9664\u6b64\u4e4b\u5916\uff0cJava\u5185\u5b58\u6a21\u578b\u8fd8\u89c4\u5b9a\u4e86\u6267\u884c\u4e0a\u8ff0\u516b\u79cd\u57fa\u7840\u64cd\u4f5c\u65f6\u5fc5\u987b\u6ee1\u8db3\u5982\u4e0b\u89c4\u5219\uff1a \u4e0d\u5141\u8bb8 read \u548c load \u3001 store \u548c write \u64cd\u4f5c\u4e4b\u4e00\u5355\u72ec\u51fa\u73b0\uff0c\u5373\u4e0d\u5141\u8bb8\u4e00\u4e2a\u53d8\u91cf\u4ece\u4e3b\u5185\u5b58\u8bfb\u53d6\u4e86\u4f46\u5de5\u4f5c\u5185\u5b58\u4e0d\u63a5\u53d7\uff0c\u6216\u8005\u4ece\u5de5\u4f5c\u5185\u5b58\u53d1\u8d77\u56de\u5199\u4f46\u4e3b\u5185\u5b58\u4e0d\u63a5\u53d7\u7684\u60c5\u51b5\u51fa\u73b0\u3002 \u4e0d\u5141\u8bb8\u4e00\u4e2a\u7ebf\u7a0b\u4e22\u5f03\u5b83\u7684\u6700\u8fd1\u7684 assign \u64cd\u4f5c\uff0c\u5373\u53d8\u91cf\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u6539\u53d8(\u4e3a\u5de5\u4f5c\u5185\u5b58\u53d8\u91cf\u8d4b\u503c)\u4e86\u4e4b\u540e\u5fc5\u987b\u628a\u8be5\u53d8\u5316\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u3002 \u4e00\u4e2a\u65b0\u53d8\u91cf\u53ea\u80fd\u5728\u4e3b\u5185\u5b58\u4e2d\u201c\u8bde\u751f\u201d\uff0c\u4e0d\u5141\u8bb8\u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\u76f4\u63a5\u4f7f\u7528\u4e00\u4e2a\u672a\u88ab\u521d\u59cb\u5316( load \u548c assign )\u7684\u53d8\u91cf\uff0c\u6362\u8bdd\u8bf4\u5c31\u662f\u4e00\u4e2a\u53d8\u91cf\u5728\u5b9e\u65bd use \u548c store \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u6267\u884c\u8fc7\u4e86 assign \u548c load \u64cd\u4f5c\u3002 \u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u4e8b\u5148\u6ca1\u6709\u88ab load \u64cd\u4f5c\u9501\u5b9a\uff0c\u5219\u4e0d\u5141\u8bb8\u5bf9\u5b83\u6267\u884c unlock \u64cd\u4f5c\uff1a\u4e5f\u4e0d\u5141\u8bb8\u53bb unlock \u4e00\u4e2a\u88ab\u5176\u5b83\u7ebf\u7a0b\u9501\u5b9a\u7684\u53d8\u91cf\u3002 \u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884c unlock \u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d(\u6267\u884c store \u548c write \u64cd\u4f5c)\u3002","title":"\u5185\u5b58\u95f4\u4ea4\u4e92\u64cd\u4f5c"},{"location":"java/ujvm/ch12/#volatile","text":"\u5173\u952e\u5b57 volatile \u53ef\u4ee5\u8bf4\u662fJava\u865a\u62df\u673a\u63d0\u4f9b\u7684\u6700\u8f7b\u91cf\u7ea7\u7684\u540c\u6b65\u673a\u5236\uff1b\u5f53\u4e00\u4e2a\u53d8\u91cf\u5b9a\u4e49\u4e3a volatile \u4e4b\u540e\uff0c\u5b83\u5c06\u5177\u5907\u4e24\u79cd\u7279\u6027\uff1a\u7b2c\u4e00\u662f\u4fdd\u8bc1\u6b64\u53d8\u91cf\u5bf9\u6240\u6709\u7ebf\u7a0b\u7684 \u53ef\u89c1\u6027 \uff0c\u8fd9\u91cc\u7684\u53ef\u89c1\u6027\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\uff0c\u65b0\u7684\u503c\u5bf9\u4e8e\u5176\u4ed6\u7ebf\u7a0b\u6765\u8bf4\u662f\u53ef\u4ee5\u7acb\u5373\u5f97\u77e5\u7684\uff0c\u800c\u666e\u901a\u7684\u53d8\u91cf\u7684\u503c\u5728\u7ebf\u7a0b\u95f4\u4f20\u9012\u5747\u9700\u8981\u901a\u8fc7\u4e3b\u5185\u5b58\u6765\u5b8c\u6210\uff1b\u53e6\u5916\u4e00\u4e2a\u662f \u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316 \uff0c\u666e\u901a\u7684\u53d8\u91cf\u4ec5\u4ec5\u4f1a\u4fdd\u8bc1\u5728\u8be5\u65b9\u6cd5\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u6240\u6709\u4f9d\u8d56\u8d4b\u503c\u7ed3\u679c\u7684\u5730\u65b9\u90fd\u80fd\u83b7\u53d6\u5230\u6b63\u786e\u7684\u7ed3\u679c\uff0c\u800c\u4e0d\u80fd\u4fdd\u8bc1\u53d8\u91cf\u8d4b\u503c\u64cd\u4f5c\u7684\u987a\u5e8f\u4e0e\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u7684\u6267\u884c\u987a\u5e8f\u4e00\u81f4\uff1b volatile \u53d8\u91cf\u5728\u5404\u4e2a\u7ebf\u7a0b\u7684\u5de5\u4f5c\u5185\u5b58\u4e2d\u4e0d\u5b58\u5728\u4e00\u81f4\u6027\u95ee\u9898\u3002\u4f46\u4e0d\u80fd\u8bf4\u201c\u57fa\u4e8evolatile\u53d8\u91cf\u7684\u8fd0\u7b97\u5728\u5e76\u53d1\u4e0b\u65f6\u5b89\u5168\u7684\u201d\u3002 \u7531\u4e8e volatile \u53d8\u91cf\u53ea\u80fd\u4fdd\u8bc1\u53ef\u89c1\u6027\uff0c\u5728\u4e0d\u7b26\u5408\u4ee5\u4e0b\u4e24\u6761\u89c4\u5219\u7684\u8fd0\u7b97\u573a\u666f\u4e2d\uff0c\u6211\u4eec\u4ecd\u7136\u8981\u901a\u8fc7\u52a0\u9501\u6765\u4fdd\u8bc1\u539f\u5b50\u6027\uff1a \u8fd0\u7b97\u7ed3\u679c\u5e76\u4e0d\u4f9d\u8d56\u53d8\u91cf\u7684\u5f53\u524d\u503c\u6216\u8005\u80fd\u591f\u786e\u4fdd\u53ea\u6709\u5355\u4e00\u7684\u7ebf\u7a0b\u4fee\u6539\u53d8\u91cf\u7684\u503c \u53d8\u91cf\u4e0d\u9700\u8981\u4e0e\u5176\u4ed6\u7684\u72b6\u6001\u53d8\u91cf\u5171\u540c\u53c2\u4e0e\u4e0d\u53d8\u7ea6\u675f\uff1b \u4ee5\u4e0b\u573a\u666f\u5f88\u9002\u5408\u7528 volatile \u53d8\u91cf\u6765\u63a7\u5236\u5e76\u53d1\uff0c\u5f53 shutdown() \u65b9\u6cd5\u88ab\u8c03\u7528\u65f6\uff0c\u80fd\u4fdd\u8bc1\u6240\u6709\u7ebf\u7a0b\u7684 doWork() \u65b9\u6cd5\u90fd\u7acb\u523b\u505c\u4e0b\u6765\u3002 volatile boolean shutdownRequested ; public void shutdown () { shutdownRequested = true ; } public void doWork () { while (! shutdownRequested ) { // do stuff } } volatile \u53d8\u91cf\u8bfb\u64cd\u4f5c\u7684\u6027\u80fd\u6d88\u8017\u4e0e\u666e\u901a\u53d8\u91cf\u51e0\u4e4e\u6ca1\u6709\u4efb\u4f55\u5dee\u522b\uff0c\u4f46\u662f\u5199\u64cd\u4f5c\u5219\u53ef\u80fd\u4f1a\u6162\u4e00\u4e9b\uff0c\u56e0\u4e3a\u5b83\u9700\u8981\u5728\u672c\u5730\u4ee3\u7801\u4e2d\u63d2\u5165\u8bb8\u591a\u5185\u5b58\u5c4f\u969c(Memory Barrier)\u6307\u4ee4\u6765\u4fdd\u8bc1\u5904\u7406\u5668\u4e0d\u53d1\u751f\u4e71\u5e8f\u6267\u884c\uff1b\u4e0d\u8fc7\u5927\u591a\u6570\u573a\u666f\u4e0b volatile \u7684\u603b\u5f00\u9500\u4ecd\u7136\u8981\u6bd4\u9501\u4f4e\uff0c\u6211\u4eec\u5728 volatile \u4e0e\u9501\u4e4b\u4e2d\u9009\u62e9\u7684\u552f\u4e00\u4f9d\u636e\u4ec5\u4ec5\u662f volatile \u7684\u8bed\u4e49\u80fd\u5426\u6ee1\u8db3\u4f7f\u7528\u573a\u666f\u7684\u9700\u6c42\uff1b Java\u5185\u5b58\u6a21\u578b\u4e2d\u5bf9 volatile \u53d8\u91cf\u5b9a\u4e49\u7684\u7279\u6b8a\u89c4\u5219(\u5047\u8bbeV\u8868\u793a volatile \u884c\u53d8\u91cf)\uff1a \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4f7f\u7528V\u524d\u90fd\u5fc5\u987b\u5148\u4ece\u4e3b\u5185\u5b58\u5237\u65b0\u6700\u65b0\u7684\u503c\uff0c\u7528\u4e8e\u4fdd\u8bc1\u80fd\u770b\u5230\u5176\u4ed6\u7ebf\u7a0b\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539\u540e\u7684\u503c \u5728\u5de5\u4f5c\u5185\u5b58\u4e2d\uff0c\u6bcf\u6b21\u4fee\u6539V\u4e4b\u540e\u90fd\u5fc5\u987b\u7acb\u523b\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\uff0c\u7528\u4e8e\u4fdd\u8bc1\u5176\u4ed6\u7ebf\u7a0b\u53ef\u4ee5\u770b\u5230\u81ea\u5df1\u5bf9\u53d8\u91cfV\u6240\u505a\u7684\u4fee\u6539 \u8981\u6c42V\u4e0d\u4f1a\u88ab\u6307\u4ee4\u91cd\u6392\u5e8f\u4f18\u5316\uff0c\u4fdd\u8bc1\u4ee3\u7801\u7684\u6267\u884c\u987a\u5e8f\u548c\u7a0b\u5e8f\u7684\u987a\u5e8f\u76f8\u540c\u3002","title":"\u5bf9\u4e8evolatile\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219"},{"location":"java/ujvm/ch12/#longdouble","text":"Java\u5185\u5b58\u6a21\u578b\u8981\u6c42 lock \u3001 unlock \u3001 read \u3001 load \u3001 assign \u3001 use \u3001 store \u3001 write \u8fd9\u516b\u4e2a\u64cd\u4f5c\u90fd\u5177\u6709\u539f\u5b50\u6027\u3002 \u4f46\u662f\u5bf9\u4e8e64\u4f4d\u7684\u6570\u636e\u7c7b\u578b(long\u548cdouble): \u5141\u8bb8\u865a\u62df\u673a\u5c06\u6ca1\u6709\u88ab volatile \u4fee\u9970\u768464\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u5212\u5206\u4e3a\u4e24\u6b2132\u4f4d\u7684\u64cd\u4f5c\u6765\u8fdb\u884c\uff0c\u5373\u5141\u8bb8\u865a\u62df\u673a\u5b9e\u73b0\u9009\u62e9\u53ef\u4ee5\u4e0d\u4fdd\u8bc164\u4f4d\u6570\u636e\u7c7b\u578b\u7684 read \u3001 load \u3001 store \u3001 write \u8fd94\u4e2a\u64cd\u4f5c\u7684\u539f\u5b50\u6027\uff0c\u8fd9\u70b9\u5c31\u662f\u6240\u8c13\u7684 long\u548cdouble\u7684\u975e\u539f\u5b50\u6027\u534f\u5b9a (Nonatomic Treatment of double and long Variables)\uff1b \u4f46\u5141\u8bb8\u865a\u62df\u673a\u9009\u62e9\u628a\u8fd9\u4e9b\u64cd\u4f5c\u5b9e\u73b0\u4e3a\u5177\u6709\u539f\u5b50\u6027\u7684\u64cd\u4f5c\uff0c\u76ee\u524d\u5404\u79cd\u5e73\u53f0\u4e0b\u7684\u5546\u7528\u865a\u62df\u673a\u51e0\u4e4e\u90fd\u9009\u62e9\u628a64\u4f4d\u6570\u636e\u7684\u8bfb\u5199\u64cd\u4f5c\u4f5c\u4e3a\u539f\u5b50\u64cd\u4f5c\u6765\u5bf9\u5f85\u3002","title":"\u5bf9\u4e8elong\u548cdouble\u578b\u53d8\u91cf\u7684\u7279\u6b8a\u89c4\u5219"},{"location":"java/ujvm/ch12/#_5","text":"\u539f\u5b50\u6027 (Atomicity): \u7531Java\u5185\u5b58\u6a21\u578b\u6765\u76f4\u63a5\u4fdd\u8bc1\u7684\u539f\u5b50\u6027\u53d8\u91cf\u64cd\u4f5c\u5305\u62ec read \u3001 load \u3001 assign \u3001 use \u3001 store \u548cC write \u8fd9\u516d\u4e2a\u3002 lock \u3001 unlock \u64cd\u4f5c\u672a\u76f4\u63a5\u5f00\u653e\u7ed9\u7528\u6237\u4f7f\u7528, \u800c\u53cd\u6620\u5728\u540c\u6b65\u5757\u4e2d \u2014\u2014 synchronized \u5757\u4e4b\u95f4\u7684\u64cd\u4f5c\u4e5f\u5177\u5907\u539f\u5b50\u6027\uff1b \u53ef\u89c1\u6027 (Visibility)\uff1a\u662f\u6307\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u4fee\u6539\u4e86\u5171\u4eab\u53d8\u91cf\u7684\u503c\uff0c\u5176\u4ed6\u7ebf\u7a0b\u80fd\u591f\u7acb\u5373\u5f97\u77e5\u8fd9\u4e2a\u4fee\u6539\u3002 volatile \u3001 synchronized \u548c final \u5173\u952e\u5b57\u80fd\u5b9e\u73b0\u53ef\u89c1\u6027\u3002 synchronized \u540c\u6b65\u5757\u7684\u53ef\u89c1\u6027\u662f\u7531\u201c\u5bf9\u4e00\u4e2a\u53d8\u91cf\u6267\u884cun lock \u64cd\u4f5c\u4e4b\u524d\uff0c\u5fc5\u987b\u628a\u6b64\u53d8\u91cf\u540c\u6b65\u56de\u4e3b\u5185\u5b58\u4e2d\u201c\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\u3002 final \u5173\u952e\u5b57\u7684\u53ef\u89c1\u6027\u662f\u6307\uff0c\u88ab final \u4fee\u9970\u7684\u5b57\u6bb5\u5728\u6784\u9020\u5668\u4e2d\u4e00\u65e6\u88ab\u521d\u59cb\u5316\u5b8c\u6210\uff0c\u5e76\u4e14\u6784\u9020\u5668\u6ca1\u6709\u628a\"this\"\u7684\u5f15\u7528\u4f20\u9012\u51fa\u53bb\uff0c\u90a3\u4e48\u5728\u5176\u4ed6\u7ebf\u7a0b\u4e2d\u5c31\u80fd\u770b\u89c1 final \u5b57\u6bb5\u7684\u503c\u3002 \u6709\u5e8f\u6027 (Ordering)\uff1a\u5982\u679c\u5728\u672c\u7ebf\u7a0b\u5185\u89c2\u5bdf\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u6709\u5e8f\u7684\uff1b\u5982\u679c\u5728\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u89c2\u5bdf\u53e6\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u65e0\u5e8f\u7684\u3002Java\u8bed\u8a00\u63d0\u4f9b\u4e86 volatile \u548c synchronized \u4e24\u4e2a\u5173\u952e\u5b57\u6765\u4fdd\u8bc1\u7ebf\u7a0b\u4e4b\u95f4\u64cd\u4f5c\u7684\u6709\u5e8f\u6027, volatile \u5173\u952e\u5b57\u672c\u8eab\u5c31\u5305\u542b\u4e86\u7981\u6b62\u6307\u4ee4\u91cd\u6392\u5e8f\u7684\u8bed\u610f\uff0c\u800c synchronized \u662f\u7531\u201c\u4e00\u4e2a\u53d8\u91cf\u5728\u540c\u4e00\u65f6\u523b\u53ea\u5141\u8bb8\u4e00\u6761\u7ebf\u7a0b\u5bf9\u5176\u8fdb\u884c lock \u64cd\u4f5c\u201d\u8fd9\u6761\u89c4\u5219\u83b7\u5f97\u7684\uff0c\u8fd9\u4e2a\u89c4\u5219\u51b3\u5b9a\u4e86\u6301\u6709\u540c\u4e00\u4e2a\u9501\u7684\u4e24\u4e2a\u540c\u6b65\u5757\u53ea\u80fd\u4e32\u884c\u7684\u8fdb\u5165\u3002","title":"\u539f\u5b50\u6027\u3001\u53ef\u89c1\u6027\u4e0e\u6709\u5e8f\u6027"},{"location":"java/ujvm/ch12/#_6","text":"\u5148\u884c\u53d1\u751f (happens-before)\u539f\u5219\u662f\u5224\u65ad\u6570\u636e\u662f\u5426\u5b58\u5728\u7ade\u4e89\u3001\u7ebf\u7a0b\u662f\u5426\u5b89\u5168\u7684\u4e3b\u8981\u4f9d\u636e\u3002 \u5148\u884c\u53d1\u751f(happens-before)\u662fJava\u5185\u5b58\u6a21\u578b\u4e2d\u5b9a\u4e49\u7684\u4e24\u9879\u64cd\u4f5c\u4e4b\u95f4\u7684\u504f\u5e8f\u5173\u7cfb\uff0c\u5982\u679c\u8bf4\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u5176\u5b9e\u5c31\u662f\u8bf4\u5728\u53d1\u751f\u64cd\u4f5cB\u4e4b\u524d\uff0c\u64cd\u4f5cA\u4ea7\u751f\u7684\u5f71\u54cd\u80fd\u88ab\u64cd\u4f5cB\u89c2\u5bdf\u5230\uff0c\u5f71\u54cd\u5305\u62ec\u4e86\u4fee\u6539\u4e86\u5185\u5b58\u4e2d\u5171\u4eab\u53d8\u91cf\u7684\u503c\u3001\u53d1\u9001\u4e86\u6d88\u606f\u3001\u8c03\u7528\u4e86\u65b9\u6cd5\u7b49. \u4e0b\u9762\u662fJava\u5185\u5b58\u6a21\u578b\u4e0b\u4e00\u4e9b\u5929\u7136\u7684 \u5148\u884c\u53d1\u751f\u5173\u7cfb \u3002\u8fd9\u4e9b\u5148\u884c\u53d1\u751f\u5173\u7cfb\u65e0\u9700\u4efb\u4f55\u540c\u6b65\u5668\u534f\u52a9\u5c31\u53ef\u4ee5\u5b58\u5728\u3002\u5982\u679c\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u95f4\u7684\u5173\u7cfb\u4e0d\u5728\u6b64\u5217\uff0c\u5e76\u4e14\u65e0\u6cd5\u4ece\u4ee5\u4e0b\u89c4\u5219\u63a8\u5bfc\u51fa\u6765\u7684\u8bdd\uff0c\u5b83\u4eec\u5c31\u6ca1\u6709\u987a\u5e8f\u6027\u4fdd\u969c\uff0c\u865a\u62df\u673a\u53ef\u4ee5\u5bf9\u5b83\u4eec\u8fdb\u884c\u968f\u610f\u7684\u91cd\u6392\u5e8f\uff1a \u7a0b\u5e8f\u6b21\u5e8f\u89c4\u5219 (Pragram Order Rule)\uff1a \u5728\u4e00\u4e2a\u7ebf\u7a0b\u5185 \uff0c\u6309\u7167\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u4e66\u5199\u5728\u524d\u9762\u7684\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u4e66\u5199\u5728\u540e\u9762\u7684\u64cd\u4f5c\u3002\u51c6\u786e\u5730\u8bf4\u5e94\u8be5\u662f\u63a7\u5236\u6d41\u987a\u5e8f\u800c\u4e0d\u662f\u7a0b\u5e8f\u4ee3\u7801\u987a\u5e8f\uff0c\u56e0\u4e3a\u8981\u8003\u8651\u5206\u652f\u3001\u5faa\u73af\u7ed3\u6784\u3002 \u7ba1\u7a0b\u9501\u5b9a\u89c4\u5219 (Monitor lock Rule)\uff1a\u4e00\u4e2a unlock \u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u540c\u4e00\u4e2a\u9501\u7684 lock \u64cd\u4f5c\u3002\u8fd9\u91cc\u5fc5\u987b\u5f3a\u8c03\u7684\u662f\u540c\u4e00\u4e2a\u9501\uff0c\u800c\u201d\u540e\u9762\u201c\u662f\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 volatile \u53d8\u91cf\u89c4\u5219 (Volatile Variable Rule)\uff1a\u5bf9\u4e00\u4e2a volatile \u53d8\u91cf\u7684\u5199\u64cd\u4f5c\u5148\u884c\u53d1\u751f\u4e8e\u540e\u9762\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u7684\u8bfb\u53d6\u64cd\u4f5c\uff0c\u8fd9\u91cc\u7684\u201d\u540e\u9762\u201c\u540c\u6837\u6307\u65f6\u95f4\u4e0a\u7684\u5148\u540e\u987a\u5e8f\u3002 \u7ebf\u7a0b\u542f\u52a8\u89c4\u5219 (Thread Start Rule)\uff1a Thread\u5bf9\u8c61\u7684 start() \u65b9\u6cd5\u5148\u884c\u53d1\u751f\u4e8e\u6b64\u7ebf\u7a0b\u7684\u6bcf\u4e00\u4e2a\u52a8\u4f5c\u3002 \u7ebf\u7a0b\u7ec8\u6b62\u89c4\u5219 (Thread Termination Rule)\uff1a\u7ebf\u7a0b\u4e2d\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5148\u884c\u53d1\u751f\u4e8e\u5bf9\u6b64\u7ebf\u7a0b\u7684\u7ec8\u6b62\u68c0\u6d4b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 Thread.join() \u65b9\u6cd5\u7ed3\u675f\uff0c Thread.isAlive() \u7684\u8fd4\u56de\u503c\u7b49\u4f5c\u6bb5\u68c0\u6d4b\u5230\u7ebf\u7a0b\u5df2\u7ecf\u7ec8\u6b62\u6267\u884c\u3002 \u7ebf\u7a0b\u4e2d\u65ad\u89c4 \u5219(Thread Interruption Rule)\uff1a\u5bf9\u7ebf\u7a0b interrupt() \u65b9\u6cd5\u7684\u8c03\u7528\u5148\u884c\u53d1\u751f\u4e8e\u88ab\u4e2d\u65ad\u7ebf\u7a0b\u7684\u4ee3\u7801\u68c0\u6d4b\u5230\u4e2d\u65ad\u4e8b\u4ef6\u7684\u53d1\u751f\uff0c\u53ef\u4ee5\u901a\u8fc7 Thread.interrupted() \u65b9\u6cd5\u68c0\u6d4b\u662f\u5426\u6709\u4e2d\u65ad\u53d1\u751f\u3002 \u5bf9\u8c61\u7ec8\u7ed3\u89c4\u5219 (Finalizer Rule)\uff1a\u4e00\u4e2a\u5bf9\u8c61\u521d\u59cb\u5316\u5b8c\u6210(\u6784\u9020\u65b9\u6cd5\u6267\u884c\u5b8c\u6210)\u5148\u884c\u53d1\u751f\u4e8e\u5b83\u7684 finalize() \u65b9\u6cd5\u7684\u5f00\u59cb\u3002 \u4f20\u9012\u6027 (Transitivity)\uff1a\u5982\u679c\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cB\uff0c\u64cd\u4f5cB\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\uff0c\u90a3\u5c31\u53ef\u4ee5\u5f97\u51fa\u64cd\u4f5cA\u5148\u884c\u53d1\u751f\u4e8e\u64cd\u4f5cC\u7684\u7ed3\u8bba\u3002 \u65f6\u95f4\u5148\u540e\u987a\u5e8f\u4e0e\u5148\u884c\u53d1\u751f\u539f\u5219\u4e4b\u95f4\u57fa\u672c\u6ca1\u6709\u592a\u5927\u7684\u5173\u7cfb\uff0c\u6240\u4ee5\u6211\u4eec\u8861\u91cf\u5e76\u53d1\u5b89\u5168\u95ee\u9898\u7684\u65f6\u5019\u4e0d\u8981\u53d7\u5230\u65f6\u95f4\u987a\u5e8f\u7684\u5e72\u6270\uff0c\u4e00\u5207\u5fc5\u987b\u4ee5\u5148\u884c\u53d1\u751f\u539f\u5219\u4e3a\u51c6\uff1b","title":"\u5148\u884c\u53d1\u751f\u539f\u5219"},{"location":"java/ujvm/ch12/#4-java","text":"","title":"4 Java\u4e0e\u7ebf\u7a0b"},{"location":"java/ujvm/ch12/#_7","text":"\u7ebf\u7a0b\u662f\u6bd4\u8fdb\u7a0b\u66f4\u8f7b\u91cf\u7ea7\u7684\u8c03\u5ea6\u6267\u884c\u5355\u4f4d\uff0c\u7ebf\u7a0b\u7684\u5f15\u5165\u53ef\u4ee5\u628a\u4e00\u4e2a\u8fdb\u7a0b\u7684\u8d44\u6e90\u5206\u914d\u548c\u6267\u884c\u8c03\u5ea6\u5206\u5f00\uff0c\u5404\u4e2a\u7ebf\u7a0b\u65e2\u53ef\u4ee5\u5171\u4eab\u8fdb\u7a0b\u8d44\u6e90\u53c8\u53ef\u4ee5\u72ec\u7acb\u8c03\u5ea6\u3002 Thread\u7c7b\u4e0e\u5927\u90e8\u5206\u7684Java API\u6709\u663e\u8457\u7684\u5dee\u522b\uff0c\u5b83\u7684\u6240\u6709\u5173\u952e\u65b9\u6cd5\u90fd\u662f\u58f0\u660e\u4e3a native \u7684\u3002Java\u7ebf\u7a0b\u662f\u57fa\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u539f\u751f\u7ebf\u7a0b\u6a21\u578b\u6765\u5b9e\u73b0\u7684\u3002 Note native \u4fee\u9970\u8bcd\u8bf4\u660e\uff0c\u8be5\u65b9\u6cd5\u7684\u5b9e\u73b0\u662f\u7528\u5176\u4ed6\u8bed\u8a00(C/C++)\u5b9e\u73b0\u7684\uff0c\u8be5\u65b9\u6cd5\u901a\u8fc7Java Native Interface (JNI, Java\u672c\u5730\u63a5\u53e3)\u8c03\u7528\u672c\u5730\u4ee3\u7801\u3002","title":"\u7ebf\u7a0b\u7684\u5b9e\u73b0"},{"location":"java/ujvm/ch12/#java","text":"Java\u8bed\u8a00\u4e00\u5171\u8bbe\u7f6e\u4e8610\u4e2a\u7ea7\u522b\u7684\u7ebf\u7a0b\u4f18\u5148\u7ea7( Thread.MIN_PRIORITY - Thread.MAX_PRIORITY )\u3002 /* The minimum priority that a Thread can have.*/ public static final int MIN_PRIORITY = 1 ; /* The default priority that is C assign /C ed to a Thread.*/ public static final int NORM_PRIORITY = 5 ; /* The maximum priority that a Thread can have. */ public static final int MAX_PRIORITY = 10 ;","title":"Java\u7ebf\u7a0b\u8c03\u5ea6"},{"location":"java/ujvm/ch12/#_8","text":"Java\u8bed\u8a00\u5b9a\u4e49\u4e86\u4e94\u79cd\u7ebf\u7a0b\u72b6\u6001\uff0c\u5728\u4efb\u610f\u4e00\u4e2a\u65f6\u95f4\u70b9\uff0c\u4e00\u4e2a\u7ebf\u7a0b\u53ea\u80fd\u6709\u4e14\u53ea\u6709\u5176\u4e2d\u4e00\u79cd\u72b6\u6001\uff0c\u5206\u522b\u662f \u65b0\u5efa(New): Thread state for a Thread which has not yet started. \u8fd0\u884c(Runnable): Thread state for a runnable Thread. A Thread in the runnable state is executing in the Java virtual machine but it may be waiting for other resources from the operating system such as processor. \u963b\u585e(Blocked): Thread state for a Thread blocked waiting for a monitor lock . A Thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait . \u65e0\u9650\u671f\u7b49\u5f85(Waiting): A Thread that is waiting indefinitely for another Thread to perform a particular action is in this state. wait() join() lock Support.park() \u9650\u671f\u7b49\u5f85(Timed Waiting): A Thread that is waiting for another Thread to perform an action for up to a specified waiting time is in this state. sleep() wait(long) join(long) lock Support.parkNanos(long) lock Support.parkUntil() \u7ed3\u675f(Terminated): A Thread that has exited is in this state.","title":"\u72b6\u6001\u8f6c\u6362"}]}