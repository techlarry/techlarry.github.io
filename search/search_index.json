{
    "docs": [
        {
            "location": "/hfdp/ch9/", 
            "text": "Head First Design Patterns 9 - Iterator and Composite Pattern\n\n\n1 Iterator Pattern\n\n\nIterator Pattern Defined\n\n\n\n\nThe Iterator Pattern(\u8fed\u4ee3\u5668\u6a21\u5f0f) provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.\n\n\n\n\nIterator Pattern takes the responsibility of traversing elements and gives that responsibility to the iterator object, not the aggregate object.\n\n\nIterator Pattern Class Diagram\n\n\n\n\n\n\nThe \nConcreteAggregate\n has  a collection of objects and implements the method that returns an \nIterator\n for its collection.\n\n\nThe \nIterator\n interface provides the interface that all iterators must implement, and a set of methods for traversing over elements of a collection.\n\n\n\n\n\n\nNote\n\n\nJava\u2019s Collection Framework provides another type of iterator interface called \njava.util.ListIterator\n. This iterator adds \nprevious()\n and a few other methods to the standard \njava.util.Iterator\n interface. It is supported by any \nCollection\n that implements the \nList\n interface.\n\n\n\n\nDesign Principle - Single Responsibility\n\n\n\n\nDesign Principle - Single Responsibility : A class should have only one reason to change.\n\n\n\n\nEvery responsibility of a class is an area of potential change. More than one responsibility means more than one area of change.\n\n\nExample - Caf\u00e9 Menu\n\n\nCafemenu\npublic\n \ninterface\n \nMenu\n \n{\n\n    \npublic\n \nIterator\nMenuItem\n \ncreateIterator\n();\n\n\n}\n\n\n\n\npublic\n \nclass\n \nCafeMenu\n \nimplements\n \nMenu\n \n{\n\n    \nHashMap\nString\n,\n \nMenuItem\n \nmenuItems\n \n=\n \nnew\n \nHashMap\nString\n,\n \nMenuItem\n();\n\n\n    \npublic\n \nCafeMenu\n()\n \n{\n\n        \naddItem\n(\nVeggie Burger and Air Fries\n,\n\n            \nVeggie burger on a whole wheat bun, lettuce, tomato, and fries\n,\n\n            \ntrue\n,\n \n3.99\n);\n\n        \naddItem\n(\nSoup of the day\n,\n\n            \nA cup of the soup of the day, with a side salad\n,\n\n            \nfalse\n,\n \n3.69\n);\n\n        \naddItem\n(\nBurrito\n,\n\n            \nA large burrito, with whole pinto beans, salsa, guacamole\n,\n\n            \ntrue\n,\n \n4.29\n);\n\n    \n}\n\n\n    \npublic\n \nvoid\n \naddItem\n(\nString\n \nname\n,\n \nString\n \ndescription\n,\n \n                         \nboolean\n \nvegetarian\n,\n \ndouble\n \nprice\n)\n \n    \n{\n\n        \nMenuItem\n \nmenuItem\n \n=\n \nnew\n \nMenuItem\n(\nname\n,\n \ndescription\n,\n \nvegetarian\n,\n \nprice\n);\n\n        \nmenuItems\n.\nput\n(\nmenuItem\n.\ngetName\n(),\n \nmenuItem\n);\n\n    \n}\n\n\n    \npublic\n \nMap\nString\n,\n \nMenuItem\n \ngetItems\n()\n \n{\n\n        \nreturn\n \nmenuItems\n;\n\n    \n}\n\n\n    \npublic\n \nIterator\nMenuItem\n \ncreateIterator\n()\n \n{\n\n        \nreturn\n \nmenuItems\n.\nvalues\n().\niterator\n();\n\n    \n}\n\n\n}\n\n\nWaitress\npublic\n \nclass\n \nWaitress\n \n{\n\n    \nMenu\n \ncafeMenu\n;\n\n\n    \npublic\n \nWaitress\n(\nMenu\n \ncafeMenu\n)\n \n{\n\n        \nthis\n.\ncafeMenu\n \n=\n \ncafeMenu\n;\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nprintMenu\n()\n \n{\n\n        \nIterator\nMenuItem\n \ncafeIterator\n \n=\n \ncafeMenu\n.\ncreateIterator\n();\n\n        \nprintMenu\n(\ncafeIterator\n);\n\n    \n}\n\n\n    \nprivate\n \nvoid\n \nprintMenu\n(\nIterator\nMenuItem\n \niterator\n)\n \n{\n\n        \nwhile\n \n(\niterator\n.\nhasNext\n())\n \n{\n\n            \nMenuItem\n \nmenuItem\n \n=\n \niterator\n.\nnext\n();\n\n            \nSystem\n.\nout\n.\nprint\n(\nmenuItem\n.\ngetName\n()\n \n+\n \n, \n);\n\n            \nSystem\n.\nout\n.\nprint\n(\nmenuItem\n.\ngetPrice\n()\n \n+\n \n -- \n);\n\n            \nSystem\n.\nout\n.\nprintln\n(\nmenuItem\n.\ngetDescription\n());\n\n        \n}\n\n    \n}\n\n\n}\n\n\nTestdrive\npublic\n \nclass\n \nMenuTestDrive\n \n{\n\n    \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n \nargs\n[])\n \n{\n\n        \nCafeMenu\n \ncafeMenu\n \n=\n \nnew\n \nCafeMenu\n();\n\n        \nWaitress\n \nwaitress\n \n=\n \nnew\n \nWaitress\n(\npancakeHouseMenu\n,\n \ndinerMenu\n,\n \ncafeMenu\n);\n\n        \nwaitress\n.\nprintMenu\n();\n\n        \n}\n\n\n}\n\n\n\n\n\nIterators and Collections\n\n\nEach \nCollection\n object knows how to create its own \nIterator\n.\n\n\n\n\nJava 5 includes a new form of the for statement, called \nfor/in\n, that lets you iterate over a collection or an array without creating an iterator explicitly.\n\n\nTo use for/in, you use a for statement that looks like:\n\n\n \nfor\n \n(\nObject\n \nobj\n:\n \ncollection\n)\n \n{\n\n    \n...\n\n\n}\n\n\n\n\n\n\nIterates over each object in the Collection\n\n\nobj\n is assigned to the next element in the collection each time through the loop.\n\n\n\n\n2 Composite Pattern\n\n\nComposite Pattern Defined\n\n\n\n\nThe Composite Pattern(\u7ec4\u5408\u6a21\u5f0f) allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.\n\n\n\n\nThe Composite Pattern create a part-whole hierarchy; that is, a tree of objects that is made of parts (e.g. menus and menu items) but that can be treated as a whole. (i.e. treat \u201cindividual objects and compositions uniformly.\u201d)\n\n\nCohesion\n is a term you\u2019ll hear used as a measure of how closely a class or a module supports a single purpose or responsibility. We say that a module or class has high cohesion when it is designed around a set of related functions, and we say it has low cohesion when it is designed around a set of unrelated functions.\n\n\nComposite Pattern Class Diagram\n\n\n\n\nExample - Menus\n\n\nWe try to design a menu that support menus with menus. For example, we want to make the dessert menu an element of the DinerMenu collection.\n\n\n\n\nComposite pattern gives us a way to create a tree structure that can handle a nested group of menus and menu items in the same structure.\n\n\n\n\n\n\nThe \nWaitress\n is going to use the \nMenuComponent\n interface to access both \nMenus\n and \nMenuItems\n.\n\n\nMenuComponent\n represents the interface for both \nMenuItem\n and \nMenu\n. We've used an abstract class here because we want to provide default implementations for these methods.\n\n\n\n\nMenucomponent\n/** MenuComponent provides default implementation for every method.\n\n\n *\n\n\n */\n\n\npublic\n \nabstract\n \nclass\n \nMenuComponent\n \n{\n\n\n    \npublic\n \nString\n \ngetName\n(){\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n    \npublic\n \nString\n \ngetDescription\n(){\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n    \npublic\n \ndouble\n \ngetPrice\n()\n \n{\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n\n    \npublic\n \nboolean\n \nisVegetarian\n()\n \n{\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nprint\n()\n \n{\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nadd\n(\nMenuComponent\n \nmenuComponent\n)\n \n{\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n    \npublic\n \nvoid\n \nremove\n(\nMenuComponent\n \nmenuComponent\n)\n \n{\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n    \npublic\n \nMenuComponent\n \ngetChild\n(\nint\n \nindex\n)\n \n{\n\n        \nthrow\n \nnew\n \nUnsupportedOperationException\n();\n\n    \n}\n\n\n}\n\n\nMenuitem\npublic\n \nclass\n \nMenuItem\n \nextends\n \nMenuComponent\n \n{\n\n    \nString\n \nname\n;\n\n    \nString\n \ndescription\n;\n\n    \nboolean\n \nisVegetarian\n;\n\n    \ndouble\n \nprice\n;\n\n\n    \npublic\n \nMenuItem\n(\nString\n \nname\n,\n \nString\n \ndescription\n,\n \nboolean\n \nvegetarian\n,\n \ndouble\n \nprice\n)\n \n{\n\n        \nthis\n.\nname\n \n=\n \nname\n;\n\n        \nthis\n.\ndescription\n \n=\n \ndescription\n;\n\n        \nthis\n.\nisVegetarian\n \n=\n \nvegetarian\n;\n\n        \nthis\n.\nprice\n \n=\n \nprice\n;\n\n    \n}\n\n\n\n    \n@Override\n\n    \npublic\n \nString\n \ngetName\n()\n \n{\n\n        \nreturn\n \nname\n;\n\n    \n}\n\n\n\n    \n@Override\n\n    \npublic\n \nString\n \ngetDescription\n()\n \n{\n\n        \nreturn\n \ndescription\n;\n\n    \n}\n\n\n\n    \n@Override\n\n    \npublic\n \nboolean\n \nisVegetarian\n()\n \n{\n\n        \nreturn\n \nisVegetarian\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \ndouble\n \ngetPrice\n()\n \n{\n\n        \nreturn\n \nprice\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nprint\n()\n \n{\n\n        \nSystem\n.\nout\n.\nprint\n(\n \n \n+\n \ngetName\n());\n\n        \nif\n \n(\nisVegetarian\n())\n \n{\n\n            \nSystem\n.\nout\n.\nprint\n(\n(v)\n);\n\n        \n}\n\n        \nSystem\n.\nout\n.\nprintln\n(\n, \n \n+\n \ngetPrice\n());\n\n        \nSystem\n.\nout\n.\nprintln\n(\n -- \n \n+\n \ngetDescription\n());\n\n    \n}\n \n// END PRINT\n\n\n}\n\n\nMenu\npublic\n \nclass\n \nMenu\n \nextends\n  \nMenuComponent\n \n{\n\n    \nprivate\n \nString\n \nname\n;\n\n    \nprivate\n \nString\n \ndescription\n;\n\n\n    \nprivate\n \nArrayList\nMenuComponent\n \nmenuComponents\n \n=\n \nnew\n \nArrayList\n();\n\n\n    \npublic\n \nMenu\n(\nString\n \nname\n,\n \nString\n \ndescription\n)\n \n{\n\n        \nthis\n.\nname\n \n=\n \nname\n;\n\n        \nthis\n.\ndescription\n \n=\n \ndescription\n;\n\n    \n}\n\n\n\n    \n@Override\n\n    \npublic\n \nString\n \ngetName\n()\n \n{\n\n        \nreturn\n \nname\n;\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nString\n \ngetDescription\n()\n \n{\n\n        \nreturn\n \ndescription\n;\n\n    \n}\n\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nadd\n(\nMenuComponent\n \nmenuComponent\n)\n \n{\n\n        \nmenuComponents\n.\nadd\n(\nmenuComponent\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nremove\n(\nMenuComponent\n \nmenuComponent\n)\n \n{\n\n        \nmenuComponents\n.\nremove\n(\nmenuComponent\n);\n\n    \n}\n\n\n    \n@Override\n\n    \npublic\n \nMenuComponent\n \ngetChild\n(\nint\n \nindex\n)\n \n{\n\n        \nreturn\n \nmenuComponents\n.\nget\n(\nindex\n);\n\n    \n}\n\n\n\n    \n@Override\n\n    \npublic\n \nvoid\n \nprint\n()\n \n{\n\n        \nSystem\n.\nout\n.\nprint\n(\n\\n\n \n+\n \ngetName\n());\n\n        \nSystem\n.\nout\n.\nprintln\n(\n,\n  \n+\n \ngetDescription\n());\n\n        \nSystem\n.\nout\n.\nprintln\n(\n---------------------\n);\n\n        \nIterator\nMenuComponent\n \niterator\n \n=\n \nmenuComponents\n.\niterator\n();\n\n\n        \nwhile\n(\niterator\n.\nhasNext\n())\n \n{\n\n            \nMenuComponent\n \nnextMenuComponent\n \n=\n \niterator\n.\nnext\n();\n\n            \nnextMenuComponent\n.\nprint\n();\n\n        \n}\n\n    \n}\n\n\n}\n\n\nMenutestdrive\npublic\n \nclass\n \nMenuTestDrive\n \n{\n\n    \npublic\n \nstatic\n \nvoid\n \nmain\n(\nString\n \nargs\n[])\n \n{\n\n        \nMenuComponent\n \npancakeHouseMenu\n \n=\n\n                \nnew\n \nMenu\n(\nPANCAKE HOUSE MENU\n,\n \nBreakfast\n);\n\n        \nMenuComponent\n \ndinerMenu\n \n=\n\n                \nnew\n \nMenu\n(\nDINER MENU\n,\n \nLunch\n);\n\n        \nMenuComponent\n \ncafeMenu\n \n=\n\n                \nnew\n \nMenu\n(\nCAFE MENU\n,\n \nDinner\n);\n\n        \nMenuComponent\n \ndessertMenu\n \n=\n\n                \nnew\n \nMenu\n(\nDESSERT MENU\n,\n \nDessert of course!\n);\n\n        \nMenuComponent\n \ncoffeeMenu\n \n=\n \nnew\n \nMenu\n(\nCOFFEE MENU\n,\n \nStuff to go with your afternoon coffee\n);\n\n\n        \nMenuComponent\n \nallMenus\n \n=\n \nnew\n \nMenu\n(\nALL MENUS\n,\n \nAll menus combined\n);\n\n\n        \nallMenus\n.\nadd\n(\npancakeHouseMenu\n);\n\n        \nallMenus\n.\nadd\n(\ndinerMenu\n);\n\n        \nallMenus\n.\nadd\n(\ncafeMenu\n);\n\n\n        \npancakeHouseMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nK\nB\ns Pancake Breakfast\n,\n\n                \nPancakes with scrambled eggs, and toast\n,\n\n                \ntrue\n,\n\n                \n2.99\n));\n\n        \npancakeHouseMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nRegular Pancake Breakfast\n,\n\n                \nPancakes with fried eggs, sausage\n,\n\n                \nfalse\n,\n\n                \n2.99\n));\n\n        \npancakeHouseMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nBlueberry Pancakes\n,\n\n                \nPancakes made with fresh blueberries, and blueberry syrup\n,\n\n                \ntrue\n,\n\n                \n3.49\n));\n\n        \npancakeHouseMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nWaffles\n,\n\n                \nWaffles, with your choice of blueberries or strawberries\n,\n\n                \ntrue\n,\n\n                \n3.59\n));\n\n\n        \ndinerMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nVegetarian BLT\n,\n\n                \n(Fakin\n) Bacon with lettuce \n tomato on whole wheat\n,\n\n                \ntrue\n,\n\n                \n2.99\n));\n\n        \ndinerMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nBLT\n,\n\n                \nBacon with lettuce \n tomato on whole wheat\n,\n\n                \nfalse\n,\n\n                \n2.99\n));\n\n        \ndinerMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nSoup of the day\n,\n\n                \nA bowl of the soup of the day, with a side of potato salad\n,\n\n                \nfalse\n,\n\n                \n3.29\n));\n\n        \ndinerMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nHotdog\n,\n\n                \nA hot dog, with saurkraut, relish, onions, topped with cheese\n,\n\n                \nfalse\n,\n\n                \n3.05\n));\n\n        \ndinerMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nSteamed Veggies and Brown Rice\n,\n\n                \nSteamed vegetables over brown rice\n,\n\n                \ntrue\n,\n\n                \n3.99\n));\n\n\n        \ndinerMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nPasta\n,\n\n                \nSpaghetti with Marinara Sauce, and a slice of sourdough bread\n,\n\n                \ntrue\n,\n\n                \n3.89\n));\n\n\n        \ndinerMenu\n.\nadd\n(\ndessertMenu\n);\n\n\n        \ndessertMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nApple Pie\n,\n\n                \nApple pie with a flakey crust, topped with vanilla icecream\n,\n\n                \ntrue\n,\n\n                \n1.59\n));\n\n\n        \ndessertMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nCheesecake\n,\n\n                \nCreamy New York cheesecake, with a chocolate graham crust\n,\n\n                \ntrue\n,\n\n                \n1.99\n));\n\n        \ndessertMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nSorbet\n,\n\n                \nA scoop of raspberry and a scoop of lime\n,\n\n                \ntrue\n,\n\n                \n1.89\n));\n\n\n        \ncafeMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nVeggie Burger and Air Fries\n,\n\n                \nVeggie burger on a whole wheat bun, lettuce, tomato, and fries\n,\n\n                \ntrue\n,\n\n                \n3.99\n));\n\n        \ncafeMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nSoup of the day\n,\n\n                \nA cup of the soup of the day, with a side salad\n,\n\n                \nfalse\n,\n\n                \n3.69\n));\n\n        \ncafeMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nBurrito\n,\n\n                \nA large burrito, with whole pinto beans, salsa, guacamole\n,\n\n                \ntrue\n,\n\n                \n4.29\n));\n\n\n        \ncafeMenu\n.\nadd\n(\ncoffeeMenu\n);\n\n\n        \ncoffeeMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nCoffee Cake\n,\n\n                \nCrumbly cake topped with cinnamon and walnuts\n,\n\n                \ntrue\n,\n\n                \n1.59\n));\n\n        \ncoffeeMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nBagel\n,\n\n                \nFlavors include sesame, poppyseed, cinnamon raisin, pumpkin\n,\n\n                \nfalse\n,\n\n                \n0.69\n));\n\n        \ncoffeeMenu\n.\nadd\n(\nnew\n \nMenuItem\n(\n\n                \nBiscotti\n,\n\n                \nThree almond or hazelnut biscotti cookies\n,\n\n                \ntrue\n,\n\n                \n0.89\n));\n\n\n        \nWaitress\n \nwaitress\n \n=\n \nnew\n \nWaitress\n(\nallMenus\n);\n\n\n        \nwaitress\n.\nprintMenu\n();\n\n    \n}\n\n\n}\n\n\n\n\n\nExample - java.awt.Container\n\n\n\n\ncomponent: \nComponent\n\n\nleaf: \nCheckbox\n, \nButton\n, \nLabel\n...\n\n\ncomposite: \nContainer\n\n\n\n\n\n\njava.awt.Container.add()\n add a \nComponent\n to a \nContainer\n.\n\n\n \npublic\n \nclass\n \nContainer\n \nextends\n \nComponent\n \n{\n\n    \npublic\n \nComponent\n \nadd\n(\nComponent\n \ncomp\n)\n \n{...}\n\n    \npublic\n \nvoid\n \nremove\n(\nComponent\n \ncomp\n)\n \n{...}", 
            "title": "Chapter 9: Iterator and Composite Patterns"
        }, 
        {
            "location": "/hfdp/ch9/#head-first-design-patterns-9-iterator-and-composite-pattern", 
            "text": "", 
            "title": "Head First Design Patterns 9 - Iterator and Composite Pattern"
        }, 
        {
            "location": "/hfdp/ch9/#1-iterator-pattern", 
            "text": "", 
            "title": "1 Iterator Pattern"
        }, 
        {
            "location": "/hfdp/ch9/#iterator-pattern-defined", 
            "text": "The Iterator Pattern(\u8fed\u4ee3\u5668\u6a21\u5f0f) provides a way to access the elements of an aggregate object sequentially without exposing its underlying representation.   Iterator Pattern takes the responsibility of traversing elements and gives that responsibility to the iterator object, not the aggregate object.", 
            "title": "Iterator Pattern Defined"
        }, 
        {
            "location": "/hfdp/ch9/#iterator-pattern-class-diagram", 
            "text": "The  ConcreteAggregate  has  a collection of objects and implements the method that returns an  Iterator  for its collection.  The  Iterator  interface provides the interface that all iterators must implement, and a set of methods for traversing over elements of a collection.    Note  Java\u2019s Collection Framework provides another type of iterator interface called  java.util.ListIterator . This iterator adds  previous()  and a few other methods to the standard  java.util.Iterator  interface. It is supported by any  Collection  that implements the  List  interface.", 
            "title": "Iterator Pattern Class Diagram"
        }, 
        {
            "location": "/hfdp/ch9/#design-principle-single-responsibility", 
            "text": "Design Principle - Single Responsibility : A class should have only one reason to change.   Every responsibility of a class is an area of potential change. More than one responsibility means more than one area of change.", 
            "title": "Design Principle - Single Responsibility"
        }, 
        {
            "location": "/hfdp/ch9/#example-cafe-menu", 
            "text": "Cafemenu public   interface   Menu   { \n     public   Iterator MenuItem   createIterator ();  }  public   class   CafeMenu   implements   Menu   { \n     HashMap String ,   MenuItem   menuItems   =   new   HashMap String ,   MenuItem (); \n\n     public   CafeMenu ()   { \n         addItem ( Veggie Burger and Air Fries , \n             Veggie burger on a whole wheat bun, lettuce, tomato, and fries , \n             true ,   3.99 ); \n         addItem ( Soup of the day , \n             A cup of the soup of the day, with a side salad , \n             false ,   3.69 ); \n         addItem ( Burrito , \n             A large burrito, with whole pinto beans, salsa, guacamole , \n             true ,   4.29 ); \n     } \n\n     public   void   addItem ( String   name ,   String   description ,  \n                          boolean   vegetarian ,   double   price )  \n     { \n         MenuItem   menuItem   =   new   MenuItem ( name ,   description ,   vegetarian ,   price ); \n         menuItems . put ( menuItem . getName (),   menuItem ); \n     } \n\n     public   Map String ,   MenuItem   getItems ()   { \n         return   menuItems ; \n     } \n\n     public   Iterator MenuItem   createIterator ()   { \n         return   menuItems . values (). iterator (); \n     }  }  Waitress public   class   Waitress   { \n     Menu   cafeMenu ; \n\n     public   Waitress ( Menu   cafeMenu )   { \n         this . cafeMenu   =   cafeMenu ; \n     } \n\n     public   void   printMenu ()   { \n         Iterator MenuItem   cafeIterator   =   cafeMenu . createIterator (); \n         printMenu ( cafeIterator ); \n     } \n\n     private   void   printMenu ( Iterator MenuItem   iterator )   { \n         while   ( iterator . hasNext ())   { \n             MenuItem   menuItem   =   iterator . next (); \n             System . out . print ( menuItem . getName ()   +   ,  ); \n             System . out . print ( menuItem . getPrice ()   +    --  ); \n             System . out . println ( menuItem . getDescription ()); \n         } \n     }  }  Testdrive public   class   MenuTestDrive   { \n     public   static   void   main ( String   args [])   { \n         CafeMenu   cafeMenu   =   new   CafeMenu (); \n         Waitress   waitress   =   new   Waitress ( pancakeHouseMenu ,   dinerMenu ,   cafeMenu ); \n         waitress . printMenu (); \n         }  }", 
            "title": "Example - Caf\u00e9 Menu"
        }, 
        {
            "location": "/hfdp/ch9/#iterators-and-collections", 
            "text": "Each  Collection  object knows how to create its own  Iterator .   Java 5 includes a new form of the for statement, called  for/in , that lets you iterate over a collection or an array without creating an iterator explicitly.  To use for/in, you use a for statement that looks like:    for   ( Object   obj :   collection )   { \n     ...  }    Iterates over each object in the Collection  obj  is assigned to the next element in the collection each time through the loop.", 
            "title": "Iterators and Collections"
        }, 
        {
            "location": "/hfdp/ch9/#2-composite-pattern", 
            "text": "", 
            "title": "2 Composite Pattern"
        }, 
        {
            "location": "/hfdp/ch9/#composite-pattern-defined", 
            "text": "The Composite Pattern(\u7ec4\u5408\u6a21\u5f0f) allows you to compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.   The Composite Pattern create a part-whole hierarchy; that is, a tree of objects that is made of parts (e.g. menus and menu items) but that can be treated as a whole. (i.e. treat \u201cindividual objects and compositions uniformly.\u201d)  Cohesion  is a term you\u2019ll hear used as a measure of how closely a class or a module supports a single purpose or responsibility. We say that a module or class has high cohesion when it is designed around a set of related functions, and we say it has low cohesion when it is designed around a set of unrelated functions.", 
            "title": "Composite Pattern Defined"
        }, 
        {
            "location": "/hfdp/ch9/#composite-pattern-class-diagram", 
            "text": "", 
            "title": "Composite Pattern Class Diagram"
        }, 
        {
            "location": "/hfdp/ch9/#example-menus", 
            "text": "We try to design a menu that support menus with menus. For example, we want to make the dessert menu an element of the DinerMenu collection.   Composite pattern gives us a way to create a tree structure that can handle a nested group of menus and menu items in the same structure.    The  Waitress  is going to use the  MenuComponent  interface to access both  Menus  and  MenuItems .  MenuComponent  represents the interface for both  MenuItem  and  Menu . We've used an abstract class here because we want to provide default implementations for these methods.   Menucomponent /** MenuComponent provides default implementation for every method.   *   */  public   abstract   class   MenuComponent   { \n\n     public   String   getName (){ \n         throw   new   UnsupportedOperationException (); \n     } \n\n     public   String   getDescription (){ \n         throw   new   UnsupportedOperationException (); \n     } \n\n     public   double   getPrice ()   { \n         throw   new   UnsupportedOperationException (); \n     } \n\n\n     public   boolean   isVegetarian ()   { \n         throw   new   UnsupportedOperationException (); \n     } \n\n     public   void   print ()   { \n         throw   new   UnsupportedOperationException (); \n     } \n\n     public   void   add ( MenuComponent   menuComponent )   { \n         throw   new   UnsupportedOperationException (); \n     } \n\n     public   void   remove ( MenuComponent   menuComponent )   { \n         throw   new   UnsupportedOperationException (); \n     } \n\n     public   MenuComponent   getChild ( int   index )   { \n         throw   new   UnsupportedOperationException (); \n     }  }  Menuitem public   class   MenuItem   extends   MenuComponent   { \n     String   name ; \n     String   description ; \n     boolean   isVegetarian ; \n     double   price ; \n\n     public   MenuItem ( String   name ,   String   description ,   boolean   vegetarian ,   double   price )   { \n         this . name   =   name ; \n         this . description   =   description ; \n         this . isVegetarian   =   vegetarian ; \n         this . price   =   price ; \n     } \n\n\n     @Override \n     public   String   getName ()   { \n         return   name ; \n     } \n\n\n     @Override \n     public   String   getDescription ()   { \n         return   description ; \n     } \n\n\n     @Override \n     public   boolean   isVegetarian ()   { \n         return   isVegetarian ; \n     } \n\n     @Override \n     public   double   getPrice ()   { \n         return   price ; \n     } \n\n     @Override \n     public   void   print ()   { \n         System . out . print (     +   getName ()); \n         if   ( isVegetarian ())   { \n             System . out . print ( (v) ); \n         } \n         System . out . println ( ,    +   getPrice ()); \n         System . out . println (  --    +   getDescription ()); \n     }   // END PRINT  }  Menu public   class   Menu   extends    MenuComponent   { \n     private   String   name ; \n     private   String   description ; \n\n     private   ArrayList MenuComponent   menuComponents   =   new   ArrayList (); \n\n     public   Menu ( String   name ,   String   description )   { \n         this . name   =   name ; \n         this . description   =   description ; \n     } \n\n\n     @Override \n     public   String   getName ()   { \n         return   name ; \n     } \n\n     @Override \n     public   String   getDescription ()   { \n         return   description ; \n     } \n\n\n     @Override \n     public   void   add ( MenuComponent   menuComponent )   { \n         menuComponents . add ( menuComponent ); \n     } \n\n     @Override \n     public   void   remove ( MenuComponent   menuComponent )   { \n         menuComponents . remove ( menuComponent ); \n     } \n\n     @Override \n     public   MenuComponent   getChild ( int   index )   { \n         return   menuComponents . get ( index ); \n     } \n\n\n     @Override \n     public   void   print ()   { \n         System . out . print ( \\n   +   getName ()); \n         System . out . println ( ,    +   getDescription ()); \n         System . out . println ( --------------------- ); \n         Iterator MenuComponent   iterator   =   menuComponents . iterator (); \n\n         while ( iterator . hasNext ())   { \n             MenuComponent   nextMenuComponent   =   iterator . next (); \n             nextMenuComponent . print (); \n         } \n     }  }  Menutestdrive public   class   MenuTestDrive   { \n     public   static   void   main ( String   args [])   { \n         MenuComponent   pancakeHouseMenu   = \n                 new   Menu ( PANCAKE HOUSE MENU ,   Breakfast ); \n         MenuComponent   dinerMenu   = \n                 new   Menu ( DINER MENU ,   Lunch ); \n         MenuComponent   cafeMenu   = \n                 new   Menu ( CAFE MENU ,   Dinner ); \n         MenuComponent   dessertMenu   = \n                 new   Menu ( DESSERT MENU ,   Dessert of course! ); \n         MenuComponent   coffeeMenu   =   new   Menu ( COFFEE MENU ,   Stuff to go with your afternoon coffee ); \n\n         MenuComponent   allMenus   =   new   Menu ( ALL MENUS ,   All menus combined ); \n\n         allMenus . add ( pancakeHouseMenu ); \n         allMenus . add ( dinerMenu ); \n         allMenus . add ( cafeMenu ); \n\n         pancakeHouseMenu . add ( new   MenuItem ( \n                 K B s Pancake Breakfast , \n                 Pancakes with scrambled eggs, and toast , \n                 true , \n                 2.99 )); \n         pancakeHouseMenu . add ( new   MenuItem ( \n                 Regular Pancake Breakfast , \n                 Pancakes with fried eggs, sausage , \n                 false , \n                 2.99 )); \n         pancakeHouseMenu . add ( new   MenuItem ( \n                 Blueberry Pancakes , \n                 Pancakes made with fresh blueberries, and blueberry syrup , \n                 true , \n                 3.49 )); \n         pancakeHouseMenu . add ( new   MenuItem ( \n                 Waffles , \n                 Waffles, with your choice of blueberries or strawberries , \n                 true , \n                 3.59 )); \n\n         dinerMenu . add ( new   MenuItem ( \n                 Vegetarian BLT , \n                 (Fakin ) Bacon with lettuce   tomato on whole wheat , \n                 true , \n                 2.99 )); \n         dinerMenu . add ( new   MenuItem ( \n                 BLT , \n                 Bacon with lettuce   tomato on whole wheat , \n                 false , \n                 2.99 )); \n         dinerMenu . add ( new   MenuItem ( \n                 Soup of the day , \n                 A bowl of the soup of the day, with a side of potato salad , \n                 false , \n                 3.29 )); \n         dinerMenu . add ( new   MenuItem ( \n                 Hotdog , \n                 A hot dog, with saurkraut, relish, onions, topped with cheese , \n                 false , \n                 3.05 )); \n         dinerMenu . add ( new   MenuItem ( \n                 Steamed Veggies and Brown Rice , \n                 Steamed vegetables over brown rice , \n                 true , \n                 3.99 )); \n\n         dinerMenu . add ( new   MenuItem ( \n                 Pasta , \n                 Spaghetti with Marinara Sauce, and a slice of sourdough bread , \n                 true , \n                 3.89 )); \n\n         dinerMenu . add ( dessertMenu ); \n\n         dessertMenu . add ( new   MenuItem ( \n                 Apple Pie , \n                 Apple pie with a flakey crust, topped with vanilla icecream , \n                 true , \n                 1.59 )); \n\n         dessertMenu . add ( new   MenuItem ( \n                 Cheesecake , \n                 Creamy New York cheesecake, with a chocolate graham crust , \n                 true , \n                 1.99 )); \n         dessertMenu . add ( new   MenuItem ( \n                 Sorbet , \n                 A scoop of raspberry and a scoop of lime , \n                 true , \n                 1.89 )); \n\n         cafeMenu . add ( new   MenuItem ( \n                 Veggie Burger and Air Fries , \n                 Veggie burger on a whole wheat bun, lettuce, tomato, and fries , \n                 true , \n                 3.99 )); \n         cafeMenu . add ( new   MenuItem ( \n                 Soup of the day , \n                 A cup of the soup of the day, with a side salad , \n                 false , \n                 3.69 )); \n         cafeMenu . add ( new   MenuItem ( \n                 Burrito , \n                 A large burrito, with whole pinto beans, salsa, guacamole , \n                 true , \n                 4.29 )); \n\n         cafeMenu . add ( coffeeMenu ); \n\n         coffeeMenu . add ( new   MenuItem ( \n                 Coffee Cake , \n                 Crumbly cake topped with cinnamon and walnuts , \n                 true , \n                 1.59 )); \n         coffeeMenu . add ( new   MenuItem ( \n                 Bagel , \n                 Flavors include sesame, poppyseed, cinnamon raisin, pumpkin , \n                 false , \n                 0.69 )); \n         coffeeMenu . add ( new   MenuItem ( \n                 Biscotti , \n                 Three almond or hazelnut biscotti cookies , \n                 true , \n                 0.89 )); \n\n         Waitress   waitress   =   new   Waitress ( allMenus ); \n\n         waitress . printMenu (); \n     }  }", 
            "title": "Example - Menus"
        }, 
        {
            "location": "/hfdp/ch9/#example-javaawtcontainer", 
            "text": "component:  Component  leaf:  Checkbox ,  Button ,  Label ...  composite:  Container    java.awt.Container.add()  add a  Component  to a  Container .    public   class   Container   extends   Component   { \n     public   Component   add ( Component   comp )   {...} \n     public   void   remove ( Component   comp )   {...}", 
            "title": "Example - java.awt.Container"
        }, 
        {
            "location": "/books/", 
            "text": "Books and Materials\n\n\nBooks\n\n\nThe following is the primary reading list of books. Each chapter is organized as a single page; the included sections are noted with major concepts, and summary.\n\n\nCSAPP\n\n\n\n\nComputer System: A Programmer's Perspective, 3rd Edition\n\n\nby Randal E. Bryant and David A. O'Hallaron\n\n\nOSC\n\n\n\n\nOperating System Concepts (10th Edition)\n\n\nby Silberschatz Abraham, Galvin, Peter B., Gagne, Greg\n\n\nHFJ\n\n\n\n\nHead first java, 2nd Edition\n\n\nby Kathy Sierra and Bert Bates\n\n\nTIJ\n\n\n\n\nThinking in Java, 4th Edition\n\n\nby Bruce Eckel\n\n\nUJVM\n\n\n\n\n\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a, 2nd Edition\n\n\nby \u5468\u5fd7\u660e\n\n\nMaterials\n\n\nCS61B\n\n\nCS 61B Data Structures, Berkeley\n\n\nInstructor: Josh Hug", 
            "title": "Books"
        }, 
        {
            "location": "/books/#books-and-materials", 
            "text": "", 
            "title": "Books and Materials"
        }, 
        {
            "location": "/books/#books", 
            "text": "The following is the primary reading list of books. Each chapter is organized as a single page; the included sections are noted with major concepts, and summary.", 
            "title": "Books"
        }, 
        {
            "location": "/books/#csapp", 
            "text": "Computer System: A Programmer's Perspective, 3rd Edition  by Randal E. Bryant and David A. O'Hallaron", 
            "title": "CSAPP"
        }, 
        {
            "location": "/books/#osc", 
            "text": "Operating System Concepts (10th Edition)  by Silberschatz Abraham, Galvin, Peter B., Gagne, Greg", 
            "title": "OSC"
        }, 
        {
            "location": "/books/#hfj", 
            "text": "Head first java, 2nd Edition  by Kathy Sierra and Bert Bates", 
            "title": "HFJ"
        }, 
        {
            "location": "/books/#tij", 
            "text": "Thinking in Java, 4th Edition  by Bruce Eckel", 
            "title": "TIJ"
        }, 
        {
            "location": "/books/#ujvm", 
            "text": "\u6df1\u5165\u7406\u89e3Java\u865a\u62df\u673a, 2nd Edition  by \u5468\u5fd7\u660e", 
            "title": "UJVM"
        }, 
        {
            "location": "/books/#materials", 
            "text": "", 
            "title": "Materials"
        }, 
        {
            "location": "/books/#cs61b", 
            "text": "CS 61B Data Structures, Berkeley  Instructor: Josh Hug", 
            "title": "CS61B"
        }
    ]
}