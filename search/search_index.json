{
    "docs": [
        {
            "location": "/", 
            "text": "Zhenhua's Notes\n\n\nThis site documents reading and learning notes.\n\n\nOther Notes Site\n\n\nNote - Algorithm\n\n\nNote - Big Data\n\n\nSearch\n\n\n\n  \n\n    \n\n      (function() {\n        var cx = '000491777875727507539:_gc3mx7cstg';\n        var gcse = document.createElement('script');\n        gcse.type = 'text/javascript';\n        gcse.async = true;\n        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +\n            '//cse.google.com/cse.js?cx=' + cx;\n        var s = document.getElementsByTagName('script')[0];\n        s.parentNode.insertBefore(gcse, s);\n      })();\n    \n\n    \n\n  \n\n\n\n\n\nTOC\n\n\nSee \nTable of Contents\n.\n\n\nBooks and Materials\n\n\nSee \nBooks and Materials\n.\n\n\nRoadmap\n\n\nSee \nRoadmap\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#zhenhuas-notes", 
            "text": "This site documents reading and learning notes.", 
            "title": "Zhenhua's Notes"
        }, 
        {
            "location": "/#other-notes-site", 
            "text": "Note - Algorithm  Note - Big Data", 
            "title": "Other Notes Site"
        }, 
        {
            "location": "/#search", 
            "text": "(function() {\n        var cx = '000491777875727507539:_gc3mx7cstg';\n        var gcse = document.createElement('script');\n        gcse.type = 'text/javascript';\n        gcse.async = true;\n        gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +\n            '//cse.google.com/cse.js?cx=' + cx;\n        var s = document.getElementsByTagName('script')[0];\n        s.parentNode.insertBefore(gcse, s);\n      })();", 
            "title": "Search"
        }, 
        {
            "location": "/#toc", 
            "text": "See  Table of Contents .", 
            "title": "TOC"
        }, 
        {
            "location": "/#books-and-materials", 
            "text": "See  Books and Materials .", 
            "title": "Books and Materials"
        }, 
        {
            "location": "/#roadmap", 
            "text": "See  Roadmap .", 
            "title": "Roadmap"
        }, 
        {
            "location": "/hfj/ch3/", 
            "text": "Chapter 3 Primitives and references\n\n\nVariables must always be declared with a \nname\n and a \ntype\n. Variables come in two flavors: \nprimitive\n and \nreference\n.\n\n\nVariables can be used in many places:\n\n\n\n\nas object state: \ninstance variables\n\n\nvariables declared within a method: \nlocal variables\n\n\nvalues sent to a method by the calling code: \narguments\n\n\nvalues sent back to the caller of the method: \nreturn types\n\n\n\n\nNaming\n\n\nYou can name a class, method, or variable according the following rules (the real rules are sightly more flexible, but these will keep you safe:\n\n\n\n\nIt must start with a letter, underscore (_), or dollar sign ($). You can\nt start a name with a number.\n\n\nAfter the first character, you can use numbers as well. Just don\nt start it with a number.\n\n\nIt can be anything you like, subject to those two rules, just so long as it isn\nt one of Java\ns reserved words.\n\n\n\n\nPrimitive Variable\n\n\nA \nprimitive variable\n value is the bits representing the value.\n\n\n\n\nPrimitives hold fundamental values.\n\n\nEach primitive variable has a \nfixed\n number of bits.\n\n\n\n\nReference variable\n\n\n\n\nA \nreference variable\n value is the bits representing a way to \naccess\n an object on the heap.\n\n\nThe only way you can access an object is through a reference variable.\n\n\nIt doesn\nt hold the object itself, but it holds something like a pointer. Or an address.\n\n\nA reference variable is like a remote control. Using the dot operator(\n.\n) on a reference variable is like pressing a button on the remote control to access a method or instance variables.\n\n\nA reference variable has a value of \nnull\n when it is not referencing any object.\n\n\n\n\nThe three steps of \nobject declaration, creation and assignment\n.\n\n\n(e.g. \nDog myDog = new Dog()\n);\n\n\n\n\ndeclare\n a reference variable: tell the JVM to allocate space for a reference variable, and names that variable myDog\n\n\ncreate\n an object: tells the JCM to allocate space for a new Dog object on the heap.\n\n\nAssigns\n the object to the reference variable.\n\n\n\n\n\n\nThe size of reference variables: All references for a given JVM will be the same size regardless of the objects they reference, but each JVM might have a different way of representing reference, so references on one JVM may be smaller or larger than references on another JVM.\n\n\nArray\n\n\nAn array is like a tray of cups:\n\n\n\n\nDeclare an int array variable. An array variable is a remote control to an array object. \nint\n[]\n \nnums\n;\n\n\nCreate a new int array with a length of 7, and assign it to the previously-declared int[] variable nums. \nnums\n \n=\n \nnew\n \nint\n[\n7\n];\n\n\nGive each element in the array an int value. \nnums\n[\n0\n]\n \n=\n \n6\n;\n\n\n\n\n\n\n\n\nAn array is always an object, even if the array is declared to hold primitives. \n\n\nEvery element in an array is just a variable.\n\n\n\n\nIf you want to initialize an array, try using Array Initializer:\n\n\n \nint\n[]\n \ndata\n \n=\n \n{\n10\n,\n20\n,\n30\n,\n40\n,\n50\n,\n60\n,\n71\n,\n80\n,\n90\n,\n91\n};\n\n\n\n// or\n\n\n\nint\n[]\n \ndata\n;\n\n\ndata\n \n=\n \nnew\n \nint\n[]\n \n{\n10\n,\n20\n,\n30\n,\n40\n,\n50\n,\n60\n,\n71\n,\n80\n,\n90\n,\n91\n};", 
            "title": "Chapter 3: Primitives and References"
        }, 
        {
            "location": "/hfj/ch3/#chapter-3-primitives-and-references", 
            "text": "Variables must always be declared with a  name  and a  type . Variables come in two flavors:  primitive  and  reference .  Variables can be used in many places:   as object state:  instance variables  variables declared within a method:  local variables  values sent to a method by the calling code:  arguments  values sent back to the caller of the method:  return types", 
            "title": "Chapter 3 Primitives and references"
        }, 
        {
            "location": "/hfj/ch3/#naming", 
            "text": "You can name a class, method, or variable according the following rules (the real rules are sightly more flexible, but these will keep you safe:   It must start with a letter, underscore (_), or dollar sign ($). You can t start a name with a number.  After the first character, you can use numbers as well. Just don t start it with a number.  It can be anything you like, subject to those two rules, just so long as it isn t one of Java s reserved words.", 
            "title": "Naming"
        }, 
        {
            "location": "/hfj/ch3/#primitive-variable", 
            "text": "A  primitive variable  value is the bits representing the value.   Primitives hold fundamental values.  Each primitive variable has a  fixed  number of bits.", 
            "title": "Primitive Variable"
        }, 
        {
            "location": "/hfj/ch3/#reference-variable", 
            "text": "A  reference variable  value is the bits representing a way to  access  an object on the heap.  The only way you can access an object is through a reference variable.  It doesn t hold the object itself, but it holds something like a pointer. Or an address.  A reference variable is like a remote control. Using the dot operator( . ) on a reference variable is like pressing a button on the remote control to access a method or instance variables.  A reference variable has a value of  null  when it is not referencing any object.   The three steps of  object declaration, creation and assignment .  (e.g.  Dog myDog = new Dog() );   declare  a reference variable: tell the JVM to allocate space for a reference variable, and names that variable myDog  create  an object: tells the JCM to allocate space for a new Dog object on the heap.  Assigns  the object to the reference variable.    The size of reference variables: All references for a given JVM will be the same size regardless of the objects they reference, but each JVM might have a different way of representing reference, so references on one JVM may be smaller or larger than references on another JVM.", 
            "title": "Reference variable"
        }, 
        {
            "location": "/hfj/ch3/#array", 
            "text": "An array is like a tray of cups:   Declare an int array variable. An array variable is a remote control to an array object.  int []   nums ;  Create a new int array with a length of 7, and assign it to the previously-declared int[] variable nums.  nums   =   new   int [ 7 ];  Give each element in the array an int value.  nums [ 0 ]   =   6 ;     An array is always an object, even if the array is declared to hold primitives.   Every element in an array is just a variable.   If you want to initialize an array, try using Array Initializer:    int []   data   =   { 10 , 20 , 30 , 40 , 50 , 60 , 71 , 80 , 90 , 91 };  // or  int []   data ;  data   =   new   int []   { 10 , 20 , 30 , 40 , 50 , 60 , 71 , 80 , 90 , 91 };", 
            "title": "Array"
        }
    ]
}