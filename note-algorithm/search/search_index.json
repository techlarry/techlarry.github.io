{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"algorithm/topic3/","text":"Chapter 2: Sorting Selection Sort In iteration i i , find index min min of smallest remaining entry. Swap a[i] a[i] and a[min] a[min] . Animation: public class Selection { public static void sort ( Comparable [] a ) { int N = a . length ; for ( int i = 0 ; i N ; i ++) { int min = i ; for ( int j = i + 1 ; j N ; j ++) if ( less ( a [ j ], a [ min ])) min = j ; exch ( a , i , min ); } } } Analysis Selection sort uses (N-1)+(N-2)+...+1\\sim N^2/2 (N-1)+(N-2)+...+1\\sim N^2/2 compares and N N exchanges. Insertion Sort Shell Sort Shuffling Merge Sort Basic plan: Divide array into two halves Recursively sort each half Merge two halves Goal. Given two sorted subarrays a[lo] to a[mid] and a[mid+1] to a[hi], replace with sorted subarray a[lo] to a[hi] Java Implementation","title":"Topic 3: Sort "},{"location":"algorithm/topic3/#chapter-2-sorting","text":"","title":"Chapter 2: Sorting"},{"location":"algorithm/topic3/#selection-sort","text":"In iteration i i , find index min min of smallest remaining entry. Swap a[i] a[i] and a[min] a[min] . Animation: public class Selection { public static void sort ( Comparable [] a ) { int N = a . length ; for ( int i = 0 ; i N ; i ++) { int min = i ; for ( int j = i + 1 ; j N ; j ++) if ( less ( a [ j ], a [ min ])) min = j ; exch ( a , i , min ); } } }","title":"Selection Sort"},{"location":"algorithm/topic3/#analysis","text":"Selection sort uses (N-1)+(N-2)+...+1\\sim N^2/2 (N-1)+(N-2)+...+1\\sim N^2/2 compares and N N exchanges.","title":"Analysis"},{"location":"algorithm/topic3/#insertion-sort","text":"","title":"Insertion Sort"},{"location":"algorithm/topic3/#shell-sort","text":"","title":"Shell Sort"},{"location":"algorithm/topic3/#shuffling","text":"","title":"Shuffling"},{"location":"algorithm/topic3/#merge-sort","text":"Basic plan: Divide array into two halves Recursively sort each half Merge two halves Goal. Given two sorted subarrays a[lo] to a[mid] and a[mid+1] to a[hi], replace with sorted subarray a[lo] to a[hi]","title":"Merge Sort"},{"location":"algorithm/topic3/#java-implementation","text":"","title":"Java Implementation"}]}