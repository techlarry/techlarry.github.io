<!DOCTYPE html>
<html lang=en>
<head>
    <meta charset="utf-8">
    
    <title>4 TF OpKernels简介 | Wiki</title>
    
    
        <meta name="keywords" content="tensorflow" />
    
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1" />
    <meta name="description" content="OpKernel类（core/framework/op_kernel.h）是所有Op类的基类。继承OpKernel还可以自定义新的Op类。用的较多的Op如（MatMul,  Conv2D,  SoftMax,  AvgPooling, Argmax等）。 所有Op包含注册（Register Op）和实现（正向计算、梯度定义）两部分。 所有Op类的实现需要overide抽象基函数 void Comp">
<meta name="keywords" content="tensorflow">
<meta property="og:type" content="article">
<meta property="og:title" content="4 TF OpKernels简介">
<meta property="og:url" content="http://larryim.cc/TensorFlowundefined">
<meta property="og:site_name" content="Wiki">
<meta property="og:description" content="OpKernel类（core/framework/op_kernel.h）是所有Op类的基类。继承OpKernel还可以自定义新的Op类。用的较多的Op如（MatMul,  Conv2D,  SoftMax,  AvgPooling, Argmax等）。 所有Op包含注册（Register Op）和实现（正向计算、梯度定义）两部分。 所有Op类的实现需要overide抽象基函数 void Comp">
<meta property="og:locale" content="en">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148888986528.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889249291.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889292844.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889481292.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889531209.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889599122.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889642022.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889881424.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148889946670.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890096198.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890181645.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890280195.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890353345.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890463715.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890640354.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890728382.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890890660.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148890938124.jpg">
<meta property="og:image" content="http://or9a8nskt.bkt.clouddn.com/15148891413185.jpg">
<meta property="og:updated_time" content="2018-01-28T07:12:47.443Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="4 TF OpKernels简介">
<meta name="twitter:description" content="OpKernel类（core/framework/op_kernel.h）是所有Op类的基类。继承OpKernel还可以自定义新的Op类。用的较多的Op如（MatMul,  Conv2D,  SoftMax,  AvgPooling, Argmax等）。 所有Op包含注册（Register Op）和实现（正向计算、梯度定义）两部分。 所有Op类的实现需要overide抽象基函数 void Comp">
<meta name="twitter:image" content="http://or9a8nskt.bkt.clouddn.com/15148888986528.jpg">
    

    

    

    <link rel="stylesheet" href="/wiki/libs/font-awesome/css/font-awesome.min.css">
    <link rel="stylesheet" href="/wiki/libs/open-sans/styles.css">
    <link rel="stylesheet" href="/wiki/libs/source-code-pro/styles.css">

    <link rel="stylesheet" href="/wiki/css/style.css">
    <script src="/wiki/libs/jquery/2.1.3/jquery.min.js"></script>
    <script src="/wiki/libs/jquery/plugins/cookie/1.4.1/jquery.cookie.js"></script>
    
    
        <link rel="stylesheet" href="/wiki/libs/lightgallery/css/lightgallery.min.css">
    
    
        <link rel="stylesheet" href="/wiki/libs/justified-gallery/justifiedGallery.min.css">
    
    
        <script type="text/javascript">
(function(i,s,o,g,r,a,m) {i['GoogleAnalyticsObject']=r;i[r]=i[r]||function() {
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-112743284-1', 'auto');
ga('send', 'pageview');

</script>
    
    
    
        <script>
var _hmt = _hmt || [];
(function() {
    var hm = document.createElement("script");
    hm.src = "//hm.baidu.com/hm.js?fdc936c9f5a3b72177541183cdeb8cb3";
    var s = document.getElementsByTagName("script")[0];
    s.parentNode.insertBefore(hm, s);
})();
</script>

    


</head>

<body>
    <div id="container">
        <header id="header">
    <div id="header-main" class="header-inner">
        <div class="outer">
            <a href="/wiki/" id="logo">
                
                <span class="site-title">Wiki</span>
            </a>
            <nav id="main-nav">
                
                    <a class="main-nav-link" href="/wiki/">首页</a>
                
                    <a class="main-nav-link" href="/wiki/tags">标签</a>
                
            </nav>
            
            <div id="search-form-wrap">

    <form class="search-form">
        <input type="text" class="ins-search-input search-form-input" placeholder="Search" />
        <button type="submit" class="search-form-submit"></button>
    </form>
    <div class="ins-search">
    <div class="ins-search-mask"></div>
    <div class="ins-search-container">
        <div class="ins-input-wrapper">
            <input type="text" class="ins-search-input" placeholder="Type something..." />
            <span class="ins-close ins-selectable"><i class="fa fa-times-circle"></i></span>
        </div>
        <div class="ins-section-wrapper">
            <div class="ins-section-container"></div>
        </div>
    </div>
</div>
<script>
(function (window) {
    var INSIGHT_CONFIG = {
        TRANSLATION: {
            POSTS: 'Posts',
            PAGES: 'Pages',
            CATEGORIES: 'Categories',
            TAGS: 'Tags',
            UNTITLED: '(Untitled)',
        },
        ROOT_URL: '/wiki/',
        CONTENT_URL: '/wiki/content.json',
    };
    window.INSIGHT_CONFIG = INSIGHT_CONFIG;
})(window);
</script>
<script src="/wiki/js/insight.js"></script>

</div>
        </div>
    </div>
    <div id="main-nav-mobile" class="header-sub header-inner">
        <table class="menu outer">
            <tr>
                
                    <td><a class="main-nav-link" href="/wiki/">首页</a></td>
                
                    <td><a class="main-nav-link" href="/wiki/tags">标签</a></td>
                
                <td>
                    
    <div class="search-form">
        <input type="text" class="ins-search-input search-form-input" placeholder="Search" />
    </div>

                </td>
            </tr>
        </table>
    </div>
</header>

        <div class="outer">
            
            
                <aside id="sidebar">
   
        
    <div class="widget-wrap" id='categories'>
        <h3 class="widget-title">
            <span>categories</span>
            &nbsp;
            <a id='allExpand' href="#">
                <i class="fa fa-angle-double-down fa-2x"></i>
            </a>
        </h3>
        
        
        
         <ul class="unstyled" id="tree" > 
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            Algorithm
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/Algorithmundefined">Divide and Conquer</a></li>  <li class="file"><a href="/wiki/Algorithmundefined">Recursion</a></li>  <li class="file"><a href="/wiki/Algorithmundefined">Exhaustive Search and Backtracking</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            C
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/Cundefined">static用法</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            C++
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/Cundefined">C++ Primer (12) - 动态内存</a></li>  <li class="file"><a href="/wiki/Cundefined">C++ Primer (6) - 函数</a></li>  <li class="file"><a href="/wiki/Cundefined">STL源码剖析</a></li>  <li class="file"><a href="/wiki/Cundefined"></a></li>  <li class="file"><a href="/wiki/Cundefined">C++面试经典100题</a></li>  <li class="file"><a href="/wiki/Cundefined">STL中的vector<string>总结</a></li>  <li class="file"><a href="/wiki/Cundefined">EOF</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            CSAPP Lab
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/CSAPP-Labundefined">Lab6 Malloc Lab</a></li>  <li class="file"><a href="/wiki/CSAPP-Labundefined">Lab5 Shell Lab</a></li>  <li class="file"><a href="/wiki/CSAPP-Labundefined">Lab4 Cache Lab</a></li>  <li class="file"><a href="/wiki/CSAPP-Labundefined">Lab3 Attack Lab</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            Java
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/Javaundefined">修饰词native</a></li>  <li class="file"><a href="/wiki/Javaundefined">Java record</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            Leetcode
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/Leetcodeundefined">703. Kth Largest Element in a Stream</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">633. Sum of Square Numbers</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">437. Path Sum III</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">401. Binary Watch</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">384. Shuffle an Array</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">367. Valid Perfect Square</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">345. Reverse Vowels of a String</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">344. Reverse String</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">331. Verify Preorder Serialization of a Binary Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">326. Power of Three</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">278. First Bad Version</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">257. Binary Tree Paths</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">242. Valid Anagram</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">237. Delete Node in a Linked List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">236. Lowest Common Ancestor of a Binary Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">235. Lowest Common Ancestor of a Binary Search Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">234. Palindrome Linked List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">232. Implement Queue using Stacks</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">559. Maximum Depth of N-ary Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">226. Invert Binary Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">225. Implement Stack using Queues</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">224. Basic Calculator</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">216. Combination Sum III</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">206. Reverse Linked List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">203. Remove Linked List Elements</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">200. Number of Islands</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">179. Largest Number</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">170. TwoSum III</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">167. Two Sum II - Input array is sorted</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">160. Intersection of Two Linked Lists</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">155. Min Stack</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">150. Evaluate Reverse Polish Notation</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">148. Sort List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">147. Insertion Sort List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">143. Reorder List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">141. Linked List Cycle</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">136 Single Number</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">130. Surrounded Regions</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">128. Longest Consecutive Sequence</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">127. Word Ladder</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">125. Valid Palindrome</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">113. Path Sum II</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">112. Path Sum</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">111. Minimum Depth of Binary Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">110. Balanced Binary Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">104. Maximum Depth of Binary Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">101. Symmetric Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">100. Same Tree</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">93. Restore IP Adress</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">90. Subsets II</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">89. Gray Code</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">86. Partition List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">84. Largest Rectangle in Histogram</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">83. Remove Duplicates from Sorted List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">82. Remove Duplicates from Sorted List II</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">79. Word Search</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">78. Subsets</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">77. Combinations</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">75. Sort Colors</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">74. Search a 2D Matrix</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">240. Search a 2D Matrix II</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">71. Simplify Path</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">69. Sqrt(x)</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">67. Add Binary</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">66. Plus One</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">61. Rotate List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">60. Permutation Sequence</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">58. Length of Last Word</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">56. Merge Intervals</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">52. N-Queens II</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">51. N-Queens</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">50. Pow(x, n)</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">47. Permutations II</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">46. Permutations</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">42. Trapping Rain Water</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">40. Combination Sum II</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">39. Combination Sum</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">38. Count and Say</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">37. Sudoku Solver</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">36. Valid Sudoku</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">35. Search Insert Position</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">34. Find First and Last Position of Element in Sorted Array</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">33. Search in Rotated Sorted Array</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">33. Search in Rotated Sorted Array</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">32. Longest Valid Parentheses</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">31. Next Permutation</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">30. Substring with Concatenation of All Words</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">29. Divide Two Integers</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">28. Implement strStr()</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">27. Remove Element</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">26. Remove Duplicates from Sorted Array</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">25. Reverse Nodes in k-Group</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">24. Swap Nodes in Pairs</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">23. Merge k Sorted Lists</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">22. Generate Parentheses</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">21. Merge Two Sorted Lists</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">20. Valid Parentheses</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">19. Remove Nth Node From End of List</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">18. 4 Sum</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">17. Letter Combinations of a Phone Number.md</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">16. 3Sum Closest</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">15. 3Sum</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">14. Longest Common Prefix</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">12. Integer to Roman</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">11. Container With Most Water</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">10. Regular Expression Matching</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">9. Palindrome Number</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">8. String to Integer (atoi)</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">7. Reverse Integer</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">6. ZigZag Conversion</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">5. Longest Palindromic Substring</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">4 Median of Two Sorted Arrays</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">2 Add Two Numbers</a></li>  <li class="file"><a href="/wiki/Leetcodeundefined">1 Two Sum</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            LintCode
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/LintCodeundefined">464. Sort Integers II</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            OS
                        </a>
                         <ul class="unstyled" id="tree" > 
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            CSE521
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/OS/CSE521undefined">Introduction to scheduling</a></li>  <li class="file"><a href="/wiki/OS/CSE521undefined">Threads and Thread Implementations</a></li>  <li class="file"><a href="/wiki/OS/CSE521undefined">context switching</a></li>  <li class="file"><a href="/wiki/OS/CSE521undefined">Interrupt and Exception Handling</a></li>  <li class="file"><a href="/wiki/OS/CSE521undefined">Deadlock and exec</a></li>  <li class="file"><a href="/wiki/OS/CSE521undefined">Synchronization Primitives</a></li>  <li class="file"><a href="/wiki/OS/CSE521undefined">Introduction to Synchronization</a></li>  <li class="file"><a href="/wiki/OS/CSE521undefined">fork() and pipe()</a></li>  </ul> 
                    </li> 
                     <li class="file"><a href="/wiki/OSundefined">实现操作系统1 - 配置</a></li>  <li class="file"><a href="/wiki/OSundefined">超线程</a></li>  <li class="file"><a href="/wiki/OSundefined">POSIX</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            Python
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/Pythonundefined">Records</a></li>  <li class="file"><a href="/wiki/Pythonundefined">Python引号</a></li>  <li class="file"><a href="/wiki/Pythonundefined">谈谈Python中的拷贝</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            TOOLS
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/TOOLSundefined">Python配置</a></li>  <li class="file"><a href="/wiki/TOOLSundefined">LLDB使用</a></li>  <li class="file"><a href="/wiki/TOOLSundefined">Git</a></li>  <li class="file"><a href="/wiki/TOOLSundefined">VIM技巧</a></li>  <li class="file"><a href="/wiki/TOOLSundefined">Clion</a></li>  <li class="file"><a href="/wiki/TOOLSundefined">VSCode</a></li>  <li class="file"><a href="/wiki/TOOLSundefined">GCC</a></li>  <li class="file"><a href="/wiki/TOOLSundefined">Maven</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory open">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder-open"></i>
                            &nbsp;
                            TensorFlow
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/TensorFlowundefined">TF会话生命周期</a></li>  <li class="file"><a href="/wiki/TensorFlowundefined">5 TF - Graph模块</a></li>  <li class="file active"><a href="/wiki/TensorFlowundefined">4 TF OpKernels简介</a></li>  <li class="file"><a href="/wiki/TensorFlowundefined">3 TF代码分析初步</a></li>  <li class="file"><a href="/wiki/TensorFlowundefined">2 TF核心概念</a></li>  <li class="file"><a href="/wiki/TensorFlowundefined">1 TF系统框架</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            awesome Install
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/awesome-Installundefined">搭建shadowsocks</a></li>  <li class="file"><a href="/wiki/awesome-Installundefined">vagrant搭建ubuntu</a></li>  <li class="file"><a href="/wiki/awesome-Installundefined">Youtube</a></li>  <li class="file"><a href="/wiki/awesome-Installundefined">git</a></li>  <li class="file"><a href="/wiki/awesome-Installundefined">Nasm</a></li>  <li class="file"><a href="/wiki/awesome-Installundefined">Octave</a></li>  <li class="file"><a href="/wiki/awesome-Installundefined">Intel Parallel Studio XE</a></li>  <li class="file"><a href="/wiki/awesome-Installundefined">Mac环境下搭建Hadoop家族产品</a></li>  </ul> 
                    </li> 
                    
                    <li class="directory">
                        <a href="#" data-role="directory">
                            <i class="fa fa-folder"></i>
                            &nbsp;
                            小技巧
                        </a>
                         <ul class="unstyled" id="tree" >  <li class="file"><a href="/wiki/小技巧undefined">Mac禁止访问网站</a></li>  </ul> 
                    </li> 
                     <li class="file"><a href="/wiki/rootundefined"></a></li>  </ul> 
    </div>
    <script>
        $(document).ready(function() {
            var iconFolderOpenClass  = 'fa-folder-open';
            var iconFolderCloseClass = 'fa-folder';
            var iconAllExpandClass = 'fa-angle-double-down';
            var iconAllPackClass = 'fa-angle-double-up';
            // Handle directory-tree expansion:
            // 左键单独展开目录
            $(document).on('click', '#categories a[data-role="directory"]', function (event) {
                event.preventDefault();

                var icon = $(this).children('.fa');
                var expanded = icon.hasClass(iconFolderOpenClass);
                var subtree = $(this).siblings('ul');
                icon.removeClass(iconFolderOpenClass).removeClass(iconFolderCloseClass);
                if (expanded) {
                    if (typeof subtree != 'undefined') {
                        subtree.slideUp({ duration: 100 });
                    }
                    icon.addClass(iconFolderCloseClass);
                } else {
                    if (typeof subtree != 'undefined') {
                        subtree.slideDown({ duration: 100 });
                    }
                    icon.addClass(iconFolderOpenClass);
                }
            });
            // 右键展开下属所有目录
            $('#categories a[data-role="directory"]').bind("contextmenu", function(event){
                event.preventDefault();
                
                var icon = $(this).children('.fa');
                var expanded = icon.hasClass(iconFolderOpenClass);
                var listNode = $(this).siblings('ul');
                var subtrees = $.merge(listNode.find('li ul'), listNode);
                var icons = $.merge(listNode.find('.fa'), icon);
                icons.removeClass(iconFolderOpenClass).removeClass(iconFolderCloseClass);
                if(expanded) {
                    subtrees.slideUp({ duration: 100 });
                    icons.addClass(iconFolderCloseClass);
                } else {
                    subtrees.slideDown({ duration: 100 });
                    icons.addClass(iconFolderOpenClass);
                }
            })
            // 展开关闭所有目录按钮
            $(document).on('click', '#allExpand', function (event) {
                event.preventDefault();
                
                var icon = $(this).children('.fa');
                var expanded = icon.hasClass(iconAllExpandClass);
                icon.removeClass(iconAllExpandClass).removeClass(iconAllPackClass);
                if(expanded) {
                    $('#sidebar .fa.fa-folder').removeClass('fa-folder').addClass('fa-folder-open')
                    $('#categories li ul').slideDown({ duration: 100 });
                    icon.addClass(iconAllPackClass);
                } else {
                    $('#sidebar .fa.fa-folder-open').removeClass('fa-folder-open').addClass('fa-folder')
                    $('#categories li ul').slideUp({ duration: 100 });
                    icon.addClass(iconAllExpandClass);
                }
            });  
        });
    </script>

    
        
    <div class="widget-wrap widget-list">
        <h3 class="widget-title"><span>links</span></h3>
        <div class="widget">
            <ul>
                
                    <li>
                        <a href="http://larryim.cc">My Blog</a>
                    </li>
                
            </ul>
        </div>
    </div>


    
    <div id="toTop" class="fa fa-angle-up"></div>
</aside>
            
            <section id="main"><article id="post-TensorFlow-4-OpKernels简介" class="article article-type-post" itemscope itemprop="blogPost">
    <div class="article-inner">
        
        
            <header class="article-header">
                
                    <div class="article-meta">
                        
    <div class="article-category">
    	<i class="fa fa-folder"></i>
        <a class="article-category-link" href="/wiki/categories/TensorFlow/">TensorFlow</a>
    </div>

                        
    <div class="article-tag">
        <i class="fa fa-tag"></i>
        <a class="tag-link" href="/wiki/tags/tensorflow/">tensorflow</a>
    </div>

                        
    <div class="article-date">
        <i class="fa fa-calendar"></i>
        <a href="/wiki/TensorFlowundefined">
            <time datetime="2017-12-29T16:00:00.000Z" itemprop="datePublished">2017-12-30</time>
        </a>
    </div>


                        
                    </div>
                
                
    
        <h1 class="article-title" itemprop="name">
            4 TF OpKernels简介
        </h1>
    

            </header>
        
        
        <div class="article-entry" itemprop="articleBody">
        
        
            
                <div id="toc" class="toc-article">
                <strong class="toc-title">Catalogue</strong>
                    <ol class="toc"><li class="toc-item toc-level-2"><a class="toc-link" href="#4-2-UnaryOp-amp-BinaryOp"><span class="toc-number">1.</span> <span class="toc-text">4.2 UnaryOp &amp; BinaryOp</span></a></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-3-MatMul"><span class="toc-number">2.</span> <span class="toc-text">4.3 MatMul</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#4-3-1-Python相关部分"><span class="toc-number">2.1.</span> <span class="toc-text">4.3.1 Python相关部分</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-3-2-C-相关部分"><span class="toc-number">2.2.</span> <span class="toc-text">4.3.2 C++相关部分</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-3-3-MatMul正向计算"><span class="toc-number">2.3.</span> <span class="toc-text">4.3.3 MatMul正向计算</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="#4-3-4-MatMul梯度计算"><span class="toc-number">2.4.</span> <span class="toc-text">4.3.4 MatMul梯度计算</span></a></li></ol></li><li class="toc-item toc-level-2"><a class="toc-link" href="#4-4-Conv2d"><span class="toc-number">3.</span> <span class="toc-text">4.4 Conv2d</span></a><ol class="toc-child"><li class="toc-item toc-level-3"><a class="toc-link" href="#4-4-1-Conv2d正向计算部分"><span class="toc-number">3.1.</span> <span class="toc-text">4.4.1 Conv2d正向计算部分</span></a></li></ol></li></ol>
                </div>
            
        
        
            <p><code>OpKernel</code>类（core/framework/op_kernel.h）是所有Op类的基类。继承<code>OpKernel</code>还可以自定义新的Op类。用的较多的Op如（MatMul,  Conv2D,  SoftMax,  AvgPooling, Argmax等）。</p>
<p>所有Op包含注册（Register Op）和实现（正向计算、梯度定义）两部分。</p>
<p>所有Op类的实现需要overide抽象基函数 void Compute(OpKernelContext* context)，实现自身Op功能。用户可以根据需要自定义新的Op操作，参考[12]。</p>
<p>TF中所有Op操作的属性定义和描述都在 <code>ops/ops.pbtxt</code>。如下Add操作，定义了输入参数x、y，输出参数z。</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148888986528.jpg" alt=""></p>
<h2 id="4-2-UnaryOp-amp-BinaryOp"><a href="#4-2-UnaryOp-amp-BinaryOp" class="headerlink" title="4.2 UnaryOp &amp; BinaryOp"></a>4.2 UnaryOp &amp; BinaryOp</h2><p>UnaryOp和BinaryOp定义了简单的一元操作和二元操作，类定义在/core/kernels/ cwise_ops.h文件，类实现在/core/kernels/cwise<em>op</em>*.cc类型的文件中，如cwise_op_sin.cc文件。</p>
<p>一元操作全称为Coefficient-wise unary operations，一元运算有abs， sqrt， exp， sin， cos，conj（共轭）等。如abs的基本定义：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889249291.jpg" alt=""></p>
<p>二元操作全称为Coefficient-wise binary operations，二元运算有add，sub， div， mul，mod等。如sum的基本定义：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889292844.jpg" alt=""></p>
<h2 id="4-3-MatMul"><a href="#4-3-MatMul" class="headerlink" title="4.3 MatMul"></a>4.3 MatMul</h2><h3 id="4-3-1-Python相关部分"><a href="#4-3-1-Python相关部分" class="headerlink" title="4.3.1 Python相关部分"></a>4.3.1 Python相关部分</h3><p>在Python脚本中定义matmul运算：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889481292.jpg" alt=""></p>
<p>根据Ops名称MatMul从Ops库中找出对应Ops类型</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889531209.jpg" alt=""></p>
<p>创建ops节点</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889599122.jpg" alt=""></p>
<p>创建ops节点并指定相关属性和设备分配</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889642022.jpg" alt=""></p>
<h3 id="4-3-2-C-相关部分"><a href="#4-3-2-C-相关部分" class="headerlink" title="4.3.2 C++相关部分"></a>4.3.2 C++相关部分</h3><p>Python脚本通过swig调用进入C接口API文件core/client/tensor_c_api.cc，调用TF_NewNode函数生成节点，同时还需要指定输入变量，TF_AddInput函数设置first输入变量，TF_AddInputList函数设置other输入变量。这里op_type为MatMul，first输入变量为a，other输入变量为b。</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889881424.jpg" alt=""></p>
<p>创建节点根据节点类型从注册的Ops工厂中生成，即TF通过工厂模式把一系列Ops注册到Ops工厂中。其中MatMul的注册函数为如下</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148889946670.jpg" alt=""></p>
<h3 id="4-3-3-MatMul正向计算"><a href="#4-3-3-MatMul正向计算" class="headerlink" title="4.3.3 MatMul正向计算"></a>4.3.3 MatMul正向计算</h3><p>MatMul的实现部分在core/kernels/matmul_op.cc文件中，类MatMulOp继承于<code>OpKernel</code>，成员函数Compute完成计算操作。</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890096198.jpg" alt=""></p>
<p>MatMul的测试用例core/kernels/matmul_op_test.cc文件，要调试这个测试用例，可通过如下方式：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890181645.jpg" alt=""></p>
<p>在TF中MatMul实现了CPU和GPU两个版本，其中CPU版本使用Eigen库，GPU版本使用cuBLAS库。</p>
<p>CPU版的MatMul使用Eigen库，调用方式如下：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890280195.jpg" alt=""></p>
<p>简而言之就是调用eigen的constract函数。</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890353345.jpg" alt=""></p>
<p>GPU版的MatMul使用cuBLAS库，准确而言是基于cuBLAS的stream_executor库。Stream executor是google开发的开源并行计算库，调用方式如下：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890463715.jpg" alt=""></p>
<p>其中stream类似于设备句柄，可以调用stream executor中的cuda模块完成运算。</p>
<h3 id="4-3-4-MatMul梯度计算"><a href="#4-3-4-MatMul梯度计算" class="headerlink" title="4.3.4 MatMul梯度计算"></a>4.3.4 MatMul梯度计算</h3><p>MatMul的梯度计算本质上也是一种kernel ops，描述为MatMulGrad。MatMulgrad操作是定义在grad_ops工厂中，类似于ops工厂。定义方式如下：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890640354.jpg" alt=""></p>
<p>MatmulGrad由FDH（Function Define Helper）完成定义，</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890728382.jpg" alt=""></p>
<p>其中attr_adj_x=”transpose_a” ax0=false, ax1=true, attr_adj_y= “transpose_b”, ay0=true, ay1=false, *g属于FunctionDef类，包含MatMul的梯度定义。</p>
<p>从FDH定义中可以看出MatMulGrad本质上还是MatMul操作。在矩阵求导运算中：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890890660.jpg" alt=""></p>
<p>MatMulGrad的测试用例core/ops/math_grad_test.cc文件，要调试这个测试用例，可通过如下方式：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148890938124.jpg" alt=""></p>
<h2 id="4-4-Conv2d"><a href="#4-4-Conv2d" class="headerlink" title="4.4 Conv2d"></a>4.4 Conv2d</h2><p>关于conv2d的python调用部分和C++创建部分可参考MatMul中的描述。</p>
<h3 id="4-4-1-Conv2d正向计算部分"><a href="#4-4-1-Conv2d正向计算部分" class="headerlink" title="4.4.1 Conv2d正向计算部分"></a>4.4.1 Conv2d正向计算部分</h3><p>TF中conv2d接口如下所示，简单易用：</p>
<p><img src="http://or9a8nskt.bkt.clouddn.com/15148891413185.jpg" alt=""></p>
<p>实现部分在<code>core/kernels/conv_ops.cc</code>文件中，类Conv2DOp继承于抽象基类<code>OpKernel</code>。<br>Conv2DOp的测试用例<code>core/kernels/eigen_spatial_convolutions_test.cc</code>文件，要调试这个测试用例，可通过如下方式：</p>
<p>Conv2DOp的成员函数Compute完成计算操作。</p>
<p><code>Conv2Dop::Compute(OpKernelContect* context)</code></p>
<p>为方便描述，假设tf.nn.conv2d中input参数的shape为[batch, in_rows, in_cols, in_depth]，filter参数的shape为[filter_rows, filter_cols, in_depth, out_depth]。</p>
<p>首先，计算卷积运算后输出tensor的shape。</p>
<p>Ø  若padding=VALID，output_size = (input_size - filter_size + stride) / stride;</p>
<p>Ø  若padding=SAME，output_size = (input_size + stride - 1) / stride;</p>
<p>其次，根据计算结果给输出tensor分配内存。</p>
<p>然后，开始卷积计算。Conv2DOp实现了CPU和GPU两种模式下的卷积运算。同时，还需要注意input tensor的输入格式，通常有NHWC和NCHW两种格式。在TF中，Conv2d-CPU模式下目前仅支持NHWC格式，即[Number, Height, Weight, Channel]格式。Conv2d-GPU模式下以NCHW为主，但支持将NHWC转换为NCHW求解。C++中多维数组是row-major顺序存储的，而Eigen默认是col-major顺序的，则C++中[N, H, W, C]相当于Eigen中的[C, W, H, N]，即dimention order是相反的，需要特别注意。</p>
<p>Conv2d-CPU模式下调用Eigen库函数。</p>
<p>Eigen库中卷积函数的详细代码参见图 4 2。</p>
<p>图 4 2 Eigen卷积运算的定义</p>
<p>Ø  Tensor::extract_image_patches() 为卷积或池化操作抽取与kernel size一致的image patches。该函数的定义在eigen3/unsupported/Eigen/CXX11/src/Tensor/ TensorBase.h中，参考该目录下ReadME.md。</p>
<p>Ø  Tensor::extract_image_patches() 的输出与input tensor的data layout有关。设input tensor为ColMajor格式[NHWC]，则image patches输出为[batch, filter_index, filter_rows, filter_cols, in_depth]，并reshape为[batch <em> filter_index, filter_rows </em> filter_cols <em> in_depth]，而kernels维度为[filter_rows </em> filter_cols <em> in_depth, out_depth]，然后kernels矩阵乘image patches得到输出矩阵[batch </em> filter_index, out_depth]，并reshape为[batch, out_rows, out_cols, out_depth]。</p>
<p>Conv2d-GPU模式下调用基于cuDNN的stream_executor库。若input tensor为NHWC格式的，则先转换为NCHW格式</p>
<p>调用cudnn库实现卷积运算：</p>
<p>计算完成后再转换成HHWC格式的</p>
<p>4.4.2 Conv2d梯度计算部分</p>
<p>Conv2D梯度计算公式，假设output=Conv2d(input, filter)，则</p>
<p>Conv2D梯度计算的测试用例core/kernels/eigen_backward_spatial_convolutions_test.cc文件，要调试这个测试用例，可通过如下方式：</p>
<p>Conv2d的梯度计算函数描述为Conv2DGrad。Conv2DGrad操作定义在grad_ops工厂中。注册方式如下：</p>
<p>Conv2DGrad由FDH（Function Define Helper）完成定义，参见图 4 3。</p>
<p>图 4 3 Conv2DGrad的函数定义</p>
<p>Conv2DGrad梯度函数定义中依赖Conv2DBackpropInput和Conv2DBackpropFilter两种Ops，二者均定义在kernels/conv_grad_ops.cc文件中。</p>
<p>Conv2DBackpropInputOp和Conv2DBackpropFilterOp的实现分为GPU和CPU版本。</p>
<p>Conv2D运算的GPU版实现定义在类Conv2DSlowBackpropInputOp和类Conv2DSlowBackprop FilterOp 中。</p>
<p>Conv2D运算的CPU版有两种实现形式，分别为custom模式和fast模式。Custom模式基于贾扬清在caffe中的思路实现，相关类是Conv2DCustomBackpropInputOp和Conv2DCustomBackpropFilterOp。Fast模式基于Eigen计算库，由于在GPU下会出现nvcc编译超时，目前仅适用于CPU环境，相关类是Conv2DFastBackpropInputOp和Conv2DFastBackpropFilterOp。 </p>
<p>根据Conv2DGrad的函数定义，从代码分析Conv2D-GPU版的实现代码，即分析Conv2DBackpropInput和Conv2DBackpropFilter的实现方式。</p>
<p>Conv2DSlowBackpropInputOp的成员函数Compute完成计算操作。</p>
<p>Compute实现部分调用stream executor的相关函数，需要先获取库的stream句柄，再调用卷积梯度函数。</p>
<p>stream executor在卷积梯度运算部分仍然是借助cudnn库实现的。</p>
<p>4.4.3 MaxPooling计算部分</p>
<p>在很多图像分类和识别问题中都用到了池化运算，池化操作主要有最大池化（max pooling）和均值池化（avg pooling），本章节主要介绍最大池化的实现方法。调用TF接口可以很容易实现池化操作。</p>
<p>类MaxPoolingOp继承于类<code>OpKernel</code>，成员函数Compute实现了最大池化运算。</p>
<p>最大池化运算调用Eigen库实现。</p>
<p>Eigen库中最大池化的详细描述如下：</p>
<p>其中最大池化运算主要分为两步，第一步中extract_image_patch为池化操作抽取与kernel size一致的image patches，第二步计算每个image patch的最大值。</p>
<p>4.5 SendOp &amp; RecvOp</p>
<p>TF所有操作都是节点形式表示的，包括计算节点和非计算节点。在跨设备通信中，发送节点（SendOp）和接收节点（RecvOp）为不同设备的两个相邻节点完成完成数据通信操作。Send和Recv通过TCP或RDMA来传输数据。</p>
<p>TF采用Rendezvous（回合）通信机制，Rendezvous类似生产者/消费者的消息信箱。引用TF描述如下：</p>
<p>TF的消息传递属于采用“发送不阻塞/接收阻塞”机制，实现场景有LocalRendezvous<br>（本地消息传递）、RpcRemoteRendezvous (分布式消息传递)。除此之外还有IntraProcessRendezvous用于本地不同设备间通信。</p>
<p>TF会在不同设备的两个相邻节点之间添加Send和Recv节点，通过Send和Recv之间进行通信来达到op之间通信的效果，如图 4 4右子图所示。图中还涉及到一个优化问题，即a-&gt;b和a-&gt;c需要建立两组send/recv连接的，但两组连接是可以共用的，所以合并成一组连接。</p>
<p>图 4 4 Graph跨设备通信</p>
<p>Send和Recv分别对应<code>OpKernel</code>中的SendOp和RecvOp两个类(kernels/sendrecv_ops.h)。<br>SendOp的计算函数。</p>
<p>SendOp作为发送方需要先获取封装ctx消息，然后借助Rendezvous模块发送给接收方。</p>
<p>RecvOp的计算函数如下。</p>
<p>RecvOp作为接收方借助Rendezvous模块获取ctx消息。</p>
<p>其中parsed变量是类ParsedKey的实例。图 5‑5是Rendezvous封装的ParsedKey消息实体示例。</p>
<p>4.6 ReaderOp &amp; QueueOp</p>
<p>4.6.1 TF数据读取</p>
<p>TF系统定义了三种数据读取方式[13]：</p>
<p>Ø  供给数据(Feeding)： 在TensorFlow程序运行的每一步， 通过feed_dict来供给数据。</p>
<p>Ø  从文件读取数据： 在TensorFlow图的起始， 让一个输入管线（piplines）从文件中读取数据放入队列，通过QueueRunner供给数据，其中队列可以实现多线程异步计算。</p>
<p>Ø  预加载数据： 在TensorFlow图中定义常量或变量来保存所有数据，如Mnist数据集（仅适用于数据量比较小的情况）。</p>
<p>除了以上三种数据读取方式外，TF还支持用户自定义数据读取方式，即继承ReaderOpKernel类创建新的输入读取类[14]。本章节主要讲述通过piplines方式读取数据的方法。</p>
<p>Piplines利用队列实现异步计算</p>
<p>从piplines读取数据也有两种方式：一种是读取所有样本文件路径名转换成string tensor，使用input_producer将tensor乱序（shuffle）或slice（切片）处理放入队列中；另一种是将数据转化为TF标准输入格式，即使用TFRecordWriter将样本数据写入tfrecords文件中，再使用TFRecordReader将tfrecords文件读取到队列中。</p>
<p>图 4 6描述了piplines读取数据的第一种方式，这些流程通过节点和边串联起来，成为graph数据流的一部分。</p>
<p>从左向右，第一步是载入文件列表，使用convert_to_tensor函数将文件列表转化为tensor，如cifar10数据集中的image_files_tensor和label_tensor。</p>
<p>第二步是使用input_producer将image_files_tensor和label_tensor放入图中的文件队列中，这里的input_producer作用就是将样本放入队列节点中，有string_input_producer、range_input_producer和slice_input_producer三种，其中slice_input_producer的切片功能支持乱序，其他两种需要借助tf.train.shuffle_batch函数作乱序处理，有关三种方式的具体描述可参考tensorflow/python/training/input.py注释说明。</p>
<p>第三步是使用tf.read_file()读取队列中的文件数据到内存中，使用解码器如tf.image.decode_jpeg()解码成[height, width, channels]格式的数据。</p>
<p>最后就是使用batch函数将样本数据处理成一批批的样本，然后使用session执行训练。</p>
<p>图 4 6 使用piplines读取数据</p>
<p>4.6.2 TFRecords使用</p>
<p>TFRecords是TF支持的标准文件格式，这种格式允许将任意的数据转换为TFRecords支持的文件格式。TFRecords方法需要两步：第一步是使用TFRecordWriter将样本数据写入tfrecords文件中，第二步是使用TFRecordReader将tfrecords文件读取到队列中。</p>
<p>图 4 7是TFRecords文件写入的简单示例。tf.train.Example将数据填入到Example协议内存块(protocol buffer)，将协议内存块序列化为一个字符串，通过TFRecordWriter写入到TFRecords文件，图中定义了label和image_raw两个feature。Example协议内存块的定义请参考文件core/example/example.proto。</p>
<p>图 4 7 TFRecordWriter写入数据示例</p>
<p>图 4 8是TFRecords文件读取的简单示例。tf.parse_single_example解析器将Example协议内存块解析为张量，放入example队列中，其中features命名和类型要与Example写入的一致。</p>
<p>图 4 8 TFRecrodReader读取数据示例</p>
<p>4.6.3 ReaderOps分析</p>
<p>ReaderOpsKernel类封装了数据读取的入口函数Compute，通过继承ReaderOpsKernel类可实现各种自定义的数据读取方法。图 4 9是ReaderOp相关的UML视图。</p>
<p>图 4 9 ReaderOp相关的UML视图</p>
<p>ReaderOpKernel子类必须重新定义成员函数SetReaderFactory实现对应的数据读取逻辑。TFRecordReaderOp的读取方法定义在TFRecordReader类中。</p>
<p>TFRecordReader调用RecordReader::ReadRecord()函数逐步读取.tfrecord文件中的数据，每读取一次，offset向后移动一定长度。</p>
<p>其中offset的计算方式。</p>

            </div>
        
        <footer class="article-footer">
        </footer>
    </div>
</article>


    
<nav id="article-nav">
    
        <a href="/wiki/TensorFlowundefined" id="article-nav-newer" class="article-nav-link-wrap">
            <strong class="article-nav-caption">Newer</strong>
            <div class="article-nav-title">
                
                    5 TF - Graph模块
                
            </div>
        </a>
    
    
        <a href="/wiki/awesome-Installundefined" id="article-nav-older" class="article-nav-link-wrap">
            <strong class="article-nav-caption">Older</strong>
            <div class="article-nav-title">Nasm</div>
        </a>
    
</nav>





    
    




<!-- baidu url auto push script -->
<script type="text/javascript">
    !function(){var e=/([http|https]:\/\/[a-zA-Z0-9\_\.]+\.baidu\.com)/gi,r=window.location.href,o=document.referrer;if(!e.test(r)){var n="//api.share.baidu.com/s.gif";o?(n+="?r="+encodeURIComponent(document.referrer),r&&(n+="&l="+r)):r&&(n+="?l="+r);var t=new Image;t.src=n}}(window);
</script>     
</section>
        </div>
        <footer id="footer">
    <div class="outer">
        <div id="footer-info" class="inner">
            larry &copy; 2018 
            <a rel="license" href="http://creativecommons.org/licenses/by-nc-nd/4.0/"><img alt="Creative Commons License" style="border-width:0" src="https://i.creativecommons.org/l/by-nc-nd/4.0/80x15.png" /></a>
            <br> Powered by <a href="http://hexo.io/" target="_blank">Hexo</a>. Theme - <a href="https://github.com/zthxxx/hexo-theme-Wikitten">wikitten</a>
        </div>
    </div>
</footer>
        

    
        <script src="/wiki/libs/lightgallery/js/lightgallery.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-thumbnail.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-pager.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-autoplay.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-fullscreen.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-zoom.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-hash.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-share.min.js"></script>
        <script src="/wiki/libs/lightgallery/js/lg-video.min.js"></script>
    
    
        <script src="/wiki/libs/justified-gallery/jquery.justifiedGallery.min.js"></script>
    
    
        <script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        tex2jax: {
            inlineMath: [ ["$","$"], ["\\(","\\)"] ],
            skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code'],
            processEscapes: true,
            TeX: {
                equationNumbers: {
                  autoNumber: 'AMS'
                }
            }
        }
    });
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax();
        for (var i = 0; i < all.length; ++i)
            all[i].SourceElement().parentNode.className += ' has-jax';
    });
</script>
<script async src="//cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    



<!-- Custom Scripts -->
<script src="/wiki/js/main.js"></script>

    </div>
</body>
</html>