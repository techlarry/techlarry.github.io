{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Leetcode/347. Top K Frequent Elements/","text":"Given a non-empty array of integers, return the k k most frequent elements. Example 1: Input : nums = [ 1 , 1 , 1 , 2 , 2 , 3 ], k = 2 Output : [ 1 , 2 ] Example 2: Input : nums = [ 1 ], k = 1 Output : [ 1 ] Note: You may assume k k is always valid, 1 \u2264 k \u2264 1 \u2264 k \u2264 number of unique elements. Your algorithm's time complexity must be better than O(n \\log n) O(n \\log n) , where n n is the array's size. Java \u00b6 \u8fd9\u9053\u9898\u76ee\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u5229\u7528\u4e8c\u53c9\u5806\u7ef4\u6301\u9891\u6570\u6700\u5927\u7684 k k \u4e2a\u5143\u7d20\u3002\u4e3a\u4e86\u83b7\u53d6\u5404\u4e2a\u5143\u7d20\u7684\u9891\u6570\uff0c\u9700\u8981\u5229\u7528\u54c8\u5e0c\u8868\u7edf\u8ba1\u5e76\u4fdd\u5b58\u5404\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u3002\u8ba1\u7b97\u9891\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \uff0c\u64cd\u4f5c\u4e8c\u53c9\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n\\log k) O(n\\log k) . public List < Integer > topKFrequent ( int [] nums , int k ) { List < Integer > list = new ArrayList <>(); if ( nums == null || nums . length == 0 || k <= 0 ) return list ; // \u8ba1\u7b97\u9891\u6570 HashMap < Integer , Integer > map = new HashMap <>(); for ( int num : nums ) map . put ( num , map . getOrDefault ( num , 0 ) + 1 ); // \u7528\u4e8c\u53c9\u5806\u7ef4\u6301\u9891\u6570\u6700\u5927\u7684K\u4e2a\u5143\u7d20 PriorityQueue < int []> pq = new PriorityQueue <>(( o1 , o2 )->( o1 [ 1 ]- o2 [ 1 ])); for ( int num : map . keySet ()) { pq . offer ( new int []{ num , map . get ( num )}); if ( pq . size () > k ) pq . poll (); } // \u9891\u6570\u6700\u5927\u7684K\u4e2a\u5143\u7d20 while (! pq . isEmpty ()) list . add ( pq . poll ()[ 0 ]); return list ; } \u53e6\u4e00\u4e2a\u66f4\u597d\u7684\u529e\u6cd5\u662f\u7528\u6876\u6392\u5e8f\u3002\u5229\u7528 \u6876\u6392\u5e8f\u7b97\u6cd5 \u5c06\u9891\u6570\u6392\u5e8f\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \u3002 public List < Integer > topKFrequent ( int [] nums , int k ) { List < Integer > list = new ArrayList <>(); if ( nums == null || nums . length == 0 || k <= 0 ) return list ; // \u8ba1\u7b97\u9891\u6570 HashMap < Integer , Integer > map = new HashMap <>(); for ( int num : nums ) map . put ( num , map . getOrDefault ( num , 0 ) + 1 ); // \u6876\u6392\u5e8f List < List < Integer >> buckets = new ArrayList <>(); for ( int i = 0 ; i <= nums . length ; i ++) buckets . add ( new ArrayList <>()); for ( Map . Entry < Integer , Integer > entry : map . entrySet ()) buckets . get ( entry . getValue ()). add ( entry . getKey ()); for ( int i = nums . length ; i >= 0 && list . size () < k ; i --) if (! buckets . get ( i ). isEmpty ()) list . addAll ( buckets . get ( i )); //\u5982\u679c\u6570\u91cf\u4e0d\u552f\u4e00 return list.sublist return list ; }","title":"347. Top K Frequent Elements"},{"location":"Leetcode/347. Top K Frequent Elements/#java","text":"\u8fd9\u9053\u9898\u76ee\u5e38\u89c1\u7684\u505a\u6cd5\u662f\u5229\u7528\u4e8c\u53c9\u5806\u7ef4\u6301\u9891\u6570\u6700\u5927\u7684 k k \u4e2a\u5143\u7d20\u3002\u4e3a\u4e86\u83b7\u53d6\u5404\u4e2a\u5143\u7d20\u7684\u9891\u6570\uff0c\u9700\u8981\u5229\u7528\u54c8\u5e0c\u8868\u7edf\u8ba1\u5e76\u4fdd\u5b58\u5404\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\u3002\u8ba1\u7b97\u9891\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \uff0c\u64cd\u4f5c\u4e8c\u53c9\u5806\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n\\log k) O(n\\log k) . public List < Integer > topKFrequent ( int [] nums , int k ) { List < Integer > list = new ArrayList <>(); if ( nums == null || nums . length == 0 || k <= 0 ) return list ; // \u8ba1\u7b97\u9891\u6570 HashMap < Integer , Integer > map = new HashMap <>(); for ( int num : nums ) map . put ( num , map . getOrDefault ( num , 0 ) + 1 ); // \u7528\u4e8c\u53c9\u5806\u7ef4\u6301\u9891\u6570\u6700\u5927\u7684K\u4e2a\u5143\u7d20 PriorityQueue < int []> pq = new PriorityQueue <>(( o1 , o2 )->( o1 [ 1 ]- o2 [ 1 ])); for ( int num : map . keySet ()) { pq . offer ( new int []{ num , map . get ( num )}); if ( pq . size () > k ) pq . poll (); } // \u9891\u6570\u6700\u5927\u7684K\u4e2a\u5143\u7d20 while (! pq . isEmpty ()) list . add ( pq . poll ()[ 0 ]); return list ; } \u53e6\u4e00\u4e2a\u66f4\u597d\u7684\u529e\u6cd5\u662f\u7528\u6876\u6392\u5e8f\u3002\u5229\u7528 \u6876\u6392\u5e8f\u7b97\u6cd5 \u5c06\u9891\u6570\u6392\u5e8f\uff0c\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(n) O(n) \u3002 public List < Integer > topKFrequent ( int [] nums , int k ) { List < Integer > list = new ArrayList <>(); if ( nums == null || nums . length == 0 || k <= 0 ) return list ; // \u8ba1\u7b97\u9891\u6570 HashMap < Integer , Integer > map = new HashMap <>(); for ( int num : nums ) map . put ( num , map . getOrDefault ( num , 0 ) + 1 ); // \u6876\u6392\u5e8f List < List < Integer >> buckets = new ArrayList <>(); for ( int i = 0 ; i <= nums . length ; i ++) buckets . add ( new ArrayList <>()); for ( Map . Entry < Integer , Integer > entry : map . entrySet ()) buckets . get ( entry . getValue ()). add ( entry . getKey ()); for ( int i = nums . length ; i >= 0 && list . size () < k ; i --) if (! buckets . get ( i ). isEmpty ()) list . addAll ( buckets . get ( i )); //\u5982\u679c\u6570\u91cf\u4e0d\u552f\u4e00 return list.sublist return list ; }","title":"Java"}]}