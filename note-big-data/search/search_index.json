{
    "docs": [
        {
            "location": "/datamining/guideToDataMining/", 
            "text": "\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357\n\n\n1 \u63a8\u8350\u7cfb\u7edf\u5165\u95e8\n\n\n\u672c\u7ae0\u5c06\u4ecb\u7ecd\u534f\u540c\u8fc7\u6ee4\uff0c\u57fa\u672c\u7684\u8ddd\u79bb\u7b97\u6cd5\uff0c\u6700\u540e\u4f7f\u7528Python\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u63a8\u8350\u7b97\u6cd5\u3002\n\n\n\u534f\u540c\u8fc7\u6ee4\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u5229\u7528\u4ed6\u4eba\u7684\u559c\u597d\u6765\u8fdb\u884c\u63a8\u8350\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u662f\u5927\u5bb6\u4e00\u8d77\u4ea7\u751f\u7684\u63a8\u8350\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u5728\u7f51\u7ad9\u4e0a\u67e5\u627e\u4e00\u4e2a\u548c\u4f60\u7c7b\u4f3c\u7684\u7528\u6237\uff0c\u7136\u540e\u5c06\u5b83\u559c\u6b22\u7684\u4e66\u7c4d\u63a8\u8350\u7ed9\u4f60\u3002\n\n\n\u5982\u4f55\u627e\u5230\u76f8\u4f3c\u7684\u7528\u6237\uff1f\n\n\n\u66fc\u54c8\u987f\u8ddd\u79bb\n\n\n\u987e\u540d\u601d\u4e49\uff0c\u5728\u66fc\u54c8\u987f\u8857\u533a\u8981\u4ece\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\u5f00\u8f66\u5230\u53e6\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\u5b9e\u9645\u9a7e\u9a76\u8ddd\u79bb\u5c31\u662f\u201c\u66fc\u54c8\u987f\u8ddd\u79bb\u201d\u3002\n\n\n\n\n\u6700\u7b80\u5355\u7684\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\u5728\u4e8c\u7ef4\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u7528\n(x, y)\n(x, y)\n\u7684\u70b9\u6765\u8868\u793a\uff0c\u8fd9\u91cc\u7528\u4e0b\u6807\u6765\u8868\u793a\u4e0d\u540c\u7684\u4eba\uff0c\n(x_1, y_1)\n(x_1, y_1)\n\u8868\u793a\u827e\u7c73\uff0c\n(x_2, y_2)\n(x_2, y_2)\n\u8868\u793a\u795e\u79d8\u7684X\u5148\u751f\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5c31\u662f\uff1a\n\n\n\n\n|x_1-x_2|+|y_1-y_2|\n\n\n|x_1-x_2|+|y_1-y_2|\n\n\n\n\n\n\n\u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u5bf9\u4e8eFacebook\u8fd9\u6837\u9700\u8981\u8ba1\u7b97\u767e\u4e07\u7528\u6237\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u65f6\u5c31\u975e\u5e38\u6709\u5229\u3002\n\n\n \ndef\n \nmanhattan\n(\nrating1\n,\n \nrating2\n):\n\n    \nComputes the Manhattan distance. Both rating1 and rating2 are dictionaries\n\n\n       of the form {\nThe Strokes\n: 3.0, \nSlightly Stoopid\n: 2.5}\n\n    \ndistance\n \n=\n \n0\n\n    \ncommonRatings\n \n=\n \nFalse\n \n    \nfor\n \nkey\n \nin\n \nrating1\n:\n\n        \nif\n \nkey\n \nin\n \nrating2\n:\n\n            \ndistance\n \n+=\n \nabs\n(\nrating1\n[\nkey\n]\n \n-\n \nrating2\n[\nkey\n])\n\n            \ncommonRatings\n \n=\n \nTrue\n\n    \nif\n \ncommonRatings\n:\n\n        \nreturn\n \ndistance\n\n    \nelse\n:\n\n        \nreturn\n \n-\n1\n \n#Indicates no ratings in common\n\n\n\n\n\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\n\n\n\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\u3002 \u4e0b\u9762\u7684\u659c\u7ebf\u5c31\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u516c\u5f0f\u662f\uff1a\n\n\n\n\n\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}\n\n\n\\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}\n\n\n\n\n\n\n\u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5728\u6570\u636e\u5b8c\u6574\u7684\u60c5\u51b5\u4e0b\u6548\u679c\u6700\u597d\u3002\n\n\n \ndef\n \neuclidean\n(\nrating1\n,\n \nrating2\n):\n\n    \n\n\n    Computes the Euclidean Distance\n\n\n    :param rating1: rating\n\n\n    :param rating2: rating\n\n\n    :return: distance if common ratings exists, or -1\n\n\n    \n\n    \ndistance\n \n=\n \n0\n\n    \ncommonRatings\n \n=\n \nFalse\n\n    \nfor\n \nkey\n \nin\n \nrating1\n:\n\n        \nif\n \nkey\n \nin\n \nrating2\n:\n\n            \ndistance\n \n+=\n \npow\n(\nrating1\n[\nkey\n]\n \n-\n \nrating2\n[\nkey\n],\n \n2\n)\n\n            \ncommonRatings\n \n=\n \nTrue\n\n\n    \nif\n \ncommonRatings\n:\n\n        \nreturn\n \ndistance\n\n    \nelse\n:\n\n        \nreturn\n \n-\n1\n  \n# Indicates no ratings in common\n\n\n\n\n\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb\n\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5f52\u7eb3\u6210\u4e00\u4e2a\u516c\u5f0f\uff0c\u8fd9\u4e2a\u516c\u5f0f\u79f0\u4e3a\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb(Minkowski Distance)\uff1a\n\n\n\n\nd(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}}\n\n\nd(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}}\n\n\n\n\n\u5176\u4e2d\uff1a\n\n\n\n\nr = 1\nr = 1\n, \u8be5\u516c\u5f0f\u5373\u66fc\u54c8\u987f\u8ddd\u79bb\n\n\nr = 2\nr = 2\n, \u8be5\u516c\u5f0f\u5373\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\n\n\nr = \\infty\nr = \\infty\n, \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\n\n\n\n\n\n\nNote\n\n\nr\nr\n\u503c\u8d8a\u5927\uff0c\u5355\u4e2a\u7ef4\u5ea6\u7684\u5dee\u503c\u5927\u5c0f\u4f1a\u5bf9\u6574\u4f53\u8ddd\u79bb\u6709\u66f4\u5927\u7684\u5f71\u54cd\u3002\n\n\n\n\n\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb\n\n\n\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb(Chebyshev Distance)\u662f\u5b9a\u4e49\u4e3a\u5176\u5404\u5750\u6807\u6570\u503c\u5dee\u7684\u6700\u5927\u503c\u3002\n\n\n\n\nD_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k}\n\n\nD_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k}\n\n\n\n\n \ndef\n \nchebyshev\n(\nrating1\n,\n \nrating2\n):\n\n    \n\n\n    Computes the Chebyshev Distance\n\n\n    :param rating1: rating\n\n\n    :param rating2: rating\n\n\n    :return: distance if common ratings exists, or -1\n\n\n    \n\n    \ndistance\n \n=\n \n0\n\n    \ncommonRatings\n \n=\n \nFalse\n\n    \nfor\n \nkey\n \nin\n \nrating1\n:\n\n        \nif\n \nkey\n \nin\n \nrating2\n:\n\n            \ndistance\n \n=\n \nmax\n(\ndistance\n,\n \nabs\n(\nrating1\n[\nkey\n]\n \n-\n \nrating2\n[\nkey\n]))\n\n            \ncommonRatings\n \n=\n \nTrue\n\n\n    \nif\n \ncommonRatings\n:\n\n        \nreturn\n \ndistance\n\n    \nelse\n:\n\n        \nreturn\n \n-\n1\n  \n# Indicates no ratings in common\n\n\n\n\n\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\n\n\n\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u7528\u6237\u5bf9\u4e50\u961f\u7684\u8bc4\u5206\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u7684\u6253\u5206\u6807\u51c6\u975e\u5e38\u4e0d\u540c\uff1a\n\n\n\n\nBill\u6ca1\u6709\u6253\u51fa\u6781\u7aef\u7684\u5206\u6570\uff0c\u90fd\u57282\u81f34\u5206\u4e4b\u95f4\uff1b \n\n\nJordyn\u4f3c\u4e4e\u559c\u6b22\u6240\u6709\u7684\u4e50\u961f\uff0c\u6253\u5206\u90fd\u57284\u81f35\u4e4b\u95f4\uff1b \n\n\nHailey\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u4eba\uff0c\u4ed6\u7684\u5206\u6570\u4e0d\u662f1\u5c31\u662f4\u3002\n\n\n\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u6bd4\u8f83\u8fd9\u4e9b\u7528\u6237\u5462\uff1f\u6bd4\u5982Hailey\u76844\u5206\u76f8\u5f53\u4e8eJordan\u76844\u5206\u8fd8\u662f5\u5206\u5462\uff1f\u6211\u89c9\u5f97\u66f4\u63a5\u8fd15\u5206\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u5f71\u54cd\u5230\u63a8\u8350\u7cfb\u7edf\u7684\u51c6\u786e\u6027\u4e86\u3002Clara\u6700\u4f4e\u7ed9\u4e864\u5206\u2014\u2014\u5979\u6240\u6709\u7684\u6253\u5206\u90fd\u57284\u81f35\u5206\u4e4b\u95f4\uff0c\u8fd9\u79cd\u73b0\u8c61\u5728\u6570\u636e\u6316\u6398\u9886\u57df\u79f0\u4e3a\n\u5206\u6570\u81a8\u80c0\n\u3002\n\n\n\n\n\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570, \u7528\u4e8e\u5ea6\u91cf\u4e24\u4e2a\u53d8\u91cfX\u548cY\u4e4b\u95f4\u7684\u76f8\u5173(\u7ebf\u6027\u76f8\u5173)\uff0c\u5176\u503c\u4ecb\u4e8e-1\u4e0e1\u4e4b\u95f4, 1\u8868\u793a\u5b8c\u5168\u543b\u5408\uff0c-1\u8868\u793a\u5b8c\u5168\u76f8\u6096\u3002\u4e0b\u9762\u662f\u5e38\u89c1\u7684\u51e0\u7ec4\n(x, y)\n(x, y)\n\u70b9\u96c6\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002\n\n\n\n\n\u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u534f\u65b9\u5dee(\n\\text{cov}(X,Y)\n\\text{cov}(X,Y)\n)\u548c\u6807\u51c6\u5dee(\n\\sigma_X\n\\sigma_X\n)\u7684\u5546\uff1a\n\n\n\n\n\\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y}\n\n\n\\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y}\n\n\n\n\n\u5bf9\u4e8e\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570:\n\n\n\n\nr_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}.\n\n\nr_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}.\n\n\n\n\n\u4ee5\u4e0a\u65b9\u7a0b\u7ed9\u51fa\u4e86\u8ba1\u7b97\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u7b80\u5355\u7684\u5355\u6d41\u7a0b\u7b97\u6cd5\uff0c\u4f46\u662f\u5176\u4f9d\u8d56\u4e8e\u6d89\u53ca\u5230\u7684\u6570\u636e\uff0c\u6709\u65f6\u5b83\u53ef\u80fd\u662f\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u3002\u4f46\u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\uff0c\u7528\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u53ea\u904d\u5386\u4e00\u6b21\u6570\u636e\u3002\n\n\n \n    \ndef\n \npearson\n(\nrating1\n,\n \nrating2\n):\n\n        \n\n\n        Compute pearson coefficient\n\n\n        :param rating1: a dictionary\n\n\n        :param rating2: a dictionary\n\n\n        :return: pearson coefficient\n\n\n        \n\n        \nsum_xy\n \n=\n \n0\n\n        \nsum_x\n \n=\n \n0\n\n        \nsum_y\n \n=\n \n0\n\n        \nsum_x2\n \n=\n \n0\n\n        \nsum_y2\n \n=\n \n0\n\n        \nn\n \n=\n \n0\n\n        \ncommonRatings\n \n=\n \nFalse\n\n        \nfor\n \nkey\n \nin\n \nrating1\n:\n\n            \nif\n \nkey\n \nin\n \nrating2\n:\n\n                \nn\n \n+=\n \n1\n\n                \nx\n \n=\n \nrating1\n[\nkey\n]\n\n                \ny\n \n=\n \nrating2\n[\nkey\n]\n\n                \nsum_xy\n \n+=\n \nx\n \n*\n \ny\n\n                \nsum_x\n \n+=\n \nx\n\n                \nsum_y\n \n+=\n \ny\n\n                \nsum_x2\n \n+=\n \npow\n(\nx\n,\n \n2\n)\n\n                \nsum_y2\n \n+=\n \npow\n(\ny\n,\n \n2\n)\n\n                \ncommonRatings\n \n=\n \nTrue\n\n\n        \nif\n \nnot\n \ncommonRatings\n:\n\n            \nreturn\n \n-\n1\n\n        \n# now compute denominator\n\n        \ndenominator\n \n=\n \nmath\n.\nsqrt\n(\nsum_x2\n \n-\n \npow\n(\nsum_x\n,\n \n2\n)\n \n/\n \nn\n)\n \n*\n \nmath\n.\nsqrt\n(\nsum_y2\n \n-\n \npow\n(\nsum_y\n,\n \n2\n)\n \n/\n \nn\n)\n\n        \nif\n \ndenominator\n \n==\n \n0\n:\n\n            \nreturn\n \n0\n\n        \nelse\n:\n\n            \nreturn\n \n(\nsum_xy\n \n-\n \n(\nsum_x\n \n*\n \nsum_y\n)\n \n/\n \nn\n)\n \n/\n \ndenominator\n\n\n\n\n\u4f59\u5f26\u76f8\u4f3c\u5ea6\n\n\n\u5f53\u6211\u4eec\u75281500\u4e07\u9996\u6b4c\u66f2\u6765\u6bd4\u8f83\u4e24\u4e2a\u7528\u6237\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u4ea4\u96c6\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u65e0\u4ece\u8ba1\u7b97\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e86\u3002\u7c7b\u4f3c\u7684\u60c5\u51b5\u662f\u5728\u8ba1\u7b97\u4e24\u7bc7\u6587\u7ae0\u7684\u76f8\u4f3c\u5ea6\u65f6\u3002\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7684\u8ba1\u7b97\u4e2d\u4f1a\u7565\u8fc7\u8fd9\u4e9b\u975e\u96f6\u503c\u3002\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a\n\n\n\n\n\\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||}\n\n\n\\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||}\n\n\n\n\n\u5176\u4e2d\uff0c\n\\cdot\n\\cdot\n \u53f7\u8868\u793a\u6570\u91cf\u79ef\u3002\n||x||\n||x||\n\u8868\u793a\u5411\u91cf\nx\nx\n\u7684\u6a21\u3002\n\n\n\u4f59\u5f26\u76f8\u4f3c\u5ea6\u5728\u6587\u672c\u6316\u6398\u4e2d\u5e94\u7528\u5f97\u8f83\u591a\uff0c\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u4e5f\u4f1a\u4f7f\u7528\u5230\u3002\n\n\n\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u76f8\u4f3c\u5ea6\uff1f\n\n\n\n\n\u5982\u679c\u6570\u636e\u5b58\u5728\u201c\u5206\u6570\u81a8\u80c0\u201d\u95ee\u9898\uff0c\u5c31\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002 \n\n\n\u5982\u679c\u6570\u636e\u6bd4\u8f83\u201c\u5bc6\u96c6\u201d\uff0c\u53d8\u91cf\u4e4b\u95f4\u57fa\u672c\u90fd\u5b58\u5728\u516c\u6709\u503c\uff0c\u4e14\u8fd9\u4e9b\u8ddd\u79bb\u6570\u636e\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u90a3\u5c31\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u6216\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\n\n\n\u5982\u679c\u6570\u636e\u662f\u7a00\u758f\u7684\uff0c\u5219\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002\n\n\n\n\n\n\nNote\n\n\n\u5728\u6570\u636e\u6807\u51c6\u5316(\n\\mu=0,\\sigma=1\n\\mu=0,\\sigma=1\n\uff09\u540e\uff0cPearson\u76f8\u5173\u6027\u7cfb\u6570\u3001\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3001\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9\u53ef\u8ba4\u4e3a\u662f\u7b49\u4ef7\u7684[\n1\n]\u3002\n\n\n\n\nK\u6700\u90bb\u8fd1\u7b97\u6cd5\n\n\n\u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ea\u4f9d\u9760\u6700\u76f8\u4f3c\u7684\u4e00\u4e2a\u7528\u6237\u6765\u505a\u63a8\u8350\uff0c\u5982\u679c\u8fd9\u4e2a\u7528\u6237\u6709\u4e9b\u7279\u6b8a\u7684\u504f\u597d\uff0c\u5c31\u4f1a\u76f4\u63a5\u53cd\u6620\u5728\u63a8\u8350\u5185\u5bb9\u91cc\u3002\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u627e\u5bfb\u591a\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230K\u6700\u90bb\u8fd1\u7b97\u6cd5\u4e86\u3002\n\n\n\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u53ef\u4ee5\u4f7f\u7528K\u6700\u90bb\u8fd1\u7b97\u6cd5\u6765\u627e\u51faK\u4e2a\u6700\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u63a8\u8350\u7684\u57fa\u7840\u3002\u4e0d\u540c\u7684 \u5e94\u7528\u6709\u4e0d\u540c\u7684K\u503c\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6765\u5f97\u51fa\u3002\u4ee5\u4e0b\u7ed9\u5230\u8bfb\u8005\u4e00\u4e2a\u57fa\u672c\u7684\u601d\u8def\u3002 \u5047\u8bbe\u6211\u8981\u4e3aAnn\u505a\u63a8\u8350\uff0c\u5e76\u4ee4K=3\u3002\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1a\n\n\n\n\n\n\n\n\nPerson\n\n\nPearson\n\n\n\n\n\n\n\n\n\n\nSally\n\n\n0.8\n\n\n\n\n\n\nEric\n\n\n0.7\n\n\n\n\n\n\nAmanda\n\n\n0.5\n\n\n\n\n\n\n\n\n\u8fd9\u4e09\u4e2a\u4eba\u90fd\u4f1a\u5bf9\u63a8\u8350\u7ed3\u679c\u6709\u6240\u8d21\u732e\uff0c\u95ee\u9898\u5728\u4e8e\u6211\u4eec\u5982\u4f55\u786e\u5b9a\u4ed6\u4eec\u7684\u6bd4\u91cd\u5462\uff1f \u6211\u4eec\u76f4\u63a5\u7528\u76f8\u5173\u7cfb\u6570\u7684\u6bd4\u91cd\u6765\u63cf\u8ff0\uff0cSally\u7684\u6bd4\u91cd\u662f0.8/2=40%\uff0cEric\u662f0.7/2=35%\uff0cAmanda \u5219\u662f25%\uff1a\n\n\n\u5047\u8bbe\u4ed6\u4eec\u4e09\u4eba\u5bf9Grey Wardens\u7684\u8bc4\u5206\u4ee5\u53ca\u52a0\u6743\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a\n\n\n\n\n\n\n\n\nPerson\n\n\nGrey Wardens Rating\n\n\nInfluence\n\n\n\n\n\n\n\n\n\n\nSally\n\n\n4.5\n\n\n25%\n\n\n\n\n\n\nEric\n\n\n5\n\n\n35%\n\n\n\n\n\n\nAmanda\n\n\n3.5\n\n\n40%\n\n\n\n\n\n\n\n\n\u6700\u540e\u8ba1\u7b97\u5f97\u5230\u7684\u5206\u6570\u4e3a\u4e3a\u52a0\u6743\u548c \n4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\%\n4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\%\n\u3002\n\n\nPython\u63a8\u8350\u6a21\u5757\n\n\nCai-Nicolas Zeigler\u4ece\u56fe\u4e66\u6f02\u6d41\u7ad9\u6536\u96c6\u4e86\u8d85\u8fc7100\u4e07\u6761\u8bc4\u4ef7\u6570\u636e\u2014\u2014278,858\u4f4d\u7528\u6237\u4e3a271,379\u672c\u4e66\u6253\u4e86\u5206\u3002\u6570\u636e\u53ef\u4ee5\u4ece\u8fd9\u4e2a\n\u5730\u5740\n\u83b7\u5f97\u3002\n\n\nCSV\u6587\u4ef6\u5305\u542b\u4e86\u4e09\u5f20\u8868\uff1a\n\n\n\n\n\u7528\u6237\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4f4d\u7f6e\u3001\u5e74\u9f84\u7b49\u4fe1\u606f\u3002\u5176\u4e2d\u7528\u6237\u7684\u59d3\u540d\u5df2\u7ecf\u9690\u53bb\uff1b \n\n\n\u4e66\u7c4d\u8868\uff0c\u5305\u62ecISBN\u53f7\u3001\u6807\u9898\u3001\u4f5c\u8005\u3001\u51fa\u7248\u65e5\u671f\u3001\u51fa\u7248\u793e\u7b49\uff1b\n\n\n\u8bc4\u5206\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4e66\u7c4dISBN\u53f7\u3001\u4ee5\u53ca\u8bc4\u5206\uff080-10\u5206\uff09\u3002\n\n\n\n\nRecommender\nclass\n \nRecommender\n:\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nbooks\n,\n \nusers\n,\n \nuser_ratings\n,\n \nbook_ratings\n):\n\n        \n\n\n        initialize basic data\n\n\n        :param books: a dictionary of books, whose key is book id\n\n\n        :param users: a dictionary of users, whose key is user id\n\n\n        :param book_ratings: a dictionary of book ratings, whose key is book id\n\n\n        :param user_ratings: a dictionary of user ratings, whose key is user id\n\n\n        \n\n        \nself\n.\nbooks\n \n=\n \nbooks\n\n        \nself\n.\nusers\n \n=\n \nusers\n\n        \nself\n.\nbook_ratings\n \n=\n \nbook_ratings\n\n        \nself\n.\nuser_ratings\n \n=\n \nuser_ratings\n\n\n    \ndef\n \nrecommend\n(\nself\n,\n \nuser_to_recommend_int\n,\n \nk\n=\n1\n):\n\n        \n\n\n        Recommend user books\n\n\n        :param user_to_recommend_int: int, user id\n\n\n        :param k : int, for nearest k neighbors\n\n\n        :return: a list of books\n\n\n        \n\n        \nuser_to_recommend\n \n=\n \nstr\n(\nuser_to_recommend_int\n)\n\n        \nif\n \nuser_to_recommend\n \nnot\n \nin\n \nself\n.\nusers\n:\n\n            \nraise\n \nException\n(\nuser does not exist!!\n)\n\n\n        \n# find the user having min distances from user_to_recommend\n\n        \ndistances\n \n=\n \n[]\n\n        \nfind_user\n \n=\n \nFalse\n\n        \nfor\n \nuser\n \nin\n \nself\n.\nusers\n:\n\n            \nif\n \nuser_to_recommend\n \n==\n \nuser\n:\n\n                \ncontinue\n\n            \n# extract user ratings based on user ids, \n\n            \n# and compute the distance between them\n\n            \ndistance\n \n=\n \nDistance\n.\npearson\n(\nself\n.\nuser_ratings\n[\nuser_to_recommend\n],\n \n                 \nself\n.\nuser_ratings\n[\nuser\n])\n\n            \nif\n \ndistance\n \n!=\n \n-\n1\n:\n\n                \ndistances\n.\nappend\n([\nuser\n,\n \ndistance\n])\n\n                \nfind_user\n \n=\n \nTrue\n\n\n        \nif\n \nnot\n \nfind_user\n:\n\n            \nreturn\n \n[]\n\n\n        \n# sort user based on their distances\n\n        \n# pearson \u7cfb\u6570\u8d8a\u5927\uff0c\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u6240\u4ee5\u7528reverse\n\n        \ndistances\n.\nsort\n(\nkey\n=\nlambda\n \nx\n:\n \nx\n[\n1\n],\n \nreverse\n=\nTrue\n)\n\n\n        \n# compute weight based on distances\n\n        \ndistances\n \n=\n \ndistances\n[\n0\n:\nk\n]\n\n        \nsum_distance\n \n=\n \nsum\n([\ndistance\n \nfor\n \nuser\n,\n \ndistance\n \nin\n \ndistances\n])\n\n        \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\ndistances\n)):\n\n            \ndistances\n[\ni\n][\n1\n]\n \n/=\n \nsum_distance\n\n\n        \n# recommend books\n\n        \nbooks_to_recommend\n \n=\n \n{}\n\n        \nfor\n \nuser_id\n,\n \nweight\n \nin\n \ndistances\n:\n\n            \nfor\n \nbook_id\n \nin\n \nself\n.\nuser_ratings\n[\nuser_id\n]:\n\n                    \nif\n \nbook_id\n \nnot\n \nin\n \nself\n.\nuser_ratings\n[\nuser_to_recommend\n]:\n  \n# the user haven\nt seen\n\n                        \nif\n \nbook_id\n \nnot\n \nin\n \nbooks_to_recommend\n:\n  \n# haven\nt recommend\n\n                            \nbooks_to_recommend\n[\nbook_id\n]\n \n=\n \n                                 \nself\n.\nuser_ratings\n[\nuser_id\n][\nbook_id\n]\n*\nweight\n\n                        \nelse\n:\n\n                            \nbooks_to_recommend\n[\nbook_id\n]\n \n=\n \nbooks_to_recommend\n[\nbook_id\n]\n \\\n                                \n+\n \nself\n.\nuser_ratings\n[\nuser_id\n][\nbook_id\n]\n*\nweight\n\n\n        \n# transform to a  list of tuple\n\n        \nbooks_to_recommend\n \n=\n \n[(\nbook_id\n,\n \nproject_rating\n)\n \n              \nfor\n \nbook_id\n,\n \nproject_rating\n \nin\n \nbooks_to_recommend\n.\nitems\n()]\n\n\n        \n# sort based on project_rating\n\n        \nbooks_to_recommend\n.\nsort\n(\nkey\n=\nlambda\n \nx\n:\n \nx\n[\n1\n],\n \nreverse\n=\nTrue\n)\n\n\n        \n# extract book title\n\n        \nbooks_to_recommend\n \n=\n \n[\nself\n.\nbooks\n[\nbook_id\n][\ntitle\n]\n\n               \nfor\n \nbook_id\n,\n \nproject_rating\n \nin\n \nbooks_to_recommend\n]\n\n        \nreturn\n \nbooks_to_recommend\n\n\n\n\nif\n \n__name__\n \n==\n \n__main__\n:\n\n    \nratings\n \n=\n \nBooksImport\n()\n\n    \nbooks\n,\n \nusers\n,\n \nuser_ratings\n,\n \nbook_ratings\n \n=\n \nratings\n.\nrecommender_import\n()\n\n    \ntest\n \n=\n \nRecommender\n(\nbooks\n,\n \nusers\n,\n \nuser_ratings\n,\n \nbook_ratings\n)\n\n    \nprint\n(\ntest\n.\nrecommend\n(\n171118\n))\n\n\nDistance\nimport\n \nmath\n\n\n\n\nclass\n \nDistance\n:\n\n    \n\n\n    Compute distance of two users, having different ratings.\n\n\n\n    Both rating1 and rating2 are\n\n\n    dictionaries of the form {\nThe Strokes\n: 3.0, \nSlightly Stoopid\n: 2.5}\n\n\n    \n\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \npass\n\n\n    \n@staticmethod\n\n    \ndef\n \nmanhattan\n(\nrating1\n,\n \nrating2\n):\n\n        \n\n\n        Computes the Manhattan distance.\n\n\n        \n\n        \ndistance\n \n=\n \n0\n\n        \ncommon_ratings\n \n=\n \nFalse\n\n        \nfor\n \nkey\n \nin\n \nrating1\n:\n\n            \nif\n \nkey\n \nin\n \nrating2\n:\n\n                \ndistance\n \n+=\n \nabs\n(\nrating1\n[\nkey\n]\n \n-\n \nrating2\n[\nkey\n])\n\n                \ncommon_ratings\n \n=\n \nTrue\n\n        \nif\n \ncommon_ratings\n:\n\n            \nreturn\n \ndistance\n\n        \nelse\n:\n\n            \nreturn\n \n-\n1\n  \n# Indicates no ratings in common\n\n\n    \n@staticmethod\n\n    \ndef\n \neuclidean\n(\nrating1\n,\n \nrating2\n):\n\n        \n\n\n        Computes the Euclidean Distance\n\n\n        :param rating1: rating\n\n\n        :param rating2: rating\n\n\n        :return: distance if common ratings exists, or -1\n\n\n        \n\n        \ndistance\n \n=\n \n0\n\n        \ncommonRatings\n \n=\n \nFalse\n\n        \nfor\n \nkey\n \nin\n \nrating1\n:\n\n            \nif\n \nkey\n \nin\n \nrating2\n:\n\n                \ndistance\n \n+=\n \npow\n(\nrating1\n[\nkey\n]\n \n-\n \nrating2\n[\nkey\n],\n \n2\n)\n\n                \ncommonRatings\n \n=\n \nTrue\n\n\n        \nif\n \ncommonRatings\n:\n\n            \nreturn\n \ndistance\n\n        \nelse\n:\n\n            \nreturn\n \n-\n1\n  \n# Indicates no ratings in common\n\n\n    \n@staticmethod\n\n    \ndef\n \nchebyshev\n(\nrating1\n,\n \nrating2\n):\n\n        \n\n\n        Computes the Chebyshev Distance\n\n\n        :param rating1: rating\n\n\n        :param rating2: rating\n\n\n        :return: distance if common ratings exists, or -1\n\n\n        \n\n        \ndistance\n \n=\n \n0\n\n        \ncommonRatings\n \n=\n \nFalse\n\n        \nfor\n \nkey\n \nin\n \nrating1\n:\n\n            \nif\n \nkey\n \nin\n \nrating2\n:\n\n                \ndistance\n \n=\n \nmax\n(\ndistance\n,\n \nabs\n(\nrating1\n[\nkey\n]\n \n-\n \nrating2\n[\nkey\n]))\n\n                \ncommonRatings\n \n=\n \nTrue\n\n\n        \nif\n \ncommonRatings\n:\n\n            \nreturn\n \ndistance\n\n        \nelse\n:\n\n            \nreturn\n \n-\n1\n  \n# Indicates no ratings in common\n\n\n    \n@staticmethod\n\n    \ndef\n \npearson\n(\nrating1\n,\n \nrating2\n):\n\n        \n\n\n        Compute pearson coefficient\n\n\n        :param rating1: a dictionary\n\n\n        :param rating2: a dictionary\n\n\n        :return: pearson coefficient\n\n\n        \n\n        \nsum_xy\n \n=\n \n0\n\n        \nsum_x\n \n=\n \n0\n\n        \nsum_y\n \n=\n \n0\n\n        \nsum_x2\n \n=\n \n0\n\n        \nsum_y2\n \n=\n \n0\n\n        \nn\n \n=\n \n0\n\n        \ncommonRatings\n \n=\n \nFalse\n\n        \nfor\n \nkey\n \nin\n \nrating1\n:\n\n            \nif\n \nkey\n \nin\n \nrating2\n:\n\n                \nn\n \n+=\n \n1\n\n                \nx\n \n=\n \nrating1\n[\nkey\n]\n\n                \ny\n \n=\n \nrating2\n[\nkey\n]\n\n                \nsum_xy\n \n+=\n \nx\n \n*\n \ny\n\n                \nsum_x\n \n+=\n \nx\n\n                \nsum_y\n \n+=\n \ny\n\n                \nsum_x2\n \n+=\n \npow\n(\nx\n,\n \n2\n)\n\n                \nsum_y2\n \n+=\n \npow\n(\ny\n,\n \n2\n)\n\n                \ncommonRatings\n \n=\n \nTrue\n\n\n        \nif\n \nnot\n \ncommonRatings\n:\n\n            \nreturn\n \n-\n1\n\n        \n# now compute denominator\n\n        \ndenominator\n \n=\n \nmath\n.\nsqrt\n(\nsum_x2\n \n-\n \npow\n(\nsum_x\n,\n \n2\n)\n \n/\n \nn\n)\n\\ \n            \n*\n \nmath\n.\nsqrt\n(\nsum_y2\n \n-\n \npow\n(\nsum_y\n,\n \n2\n)\n \n/\n \nn\n)\n\n        \nif\n \ndenominator\n \n==\n \n0\n:\n\n            \nreturn\n \n0\n\n        \nelse\n:\n\n            \nreturn\n \n(\nsum_xy\n \n-\n \n(\nsum_x\n \n*\n \nsum_y\n)\n \n/\n \nn\n)\n \n/\n \ndenominator\n\n\nBooks_import\nclass\n \nBooksImport\n:\n\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \nself\n.\nbooks\n \n=\n \n{}\n\n        \nself\n.\nusers\n \n=\n \n{}\n\n        \nself\n.\nbook_ratings\n \n=\n \n{}\n\n        \nself\n.\nuser_ratings\n \n=\n \n{}\n\n        \nself\n.\nbx_books_import\n()\n\n        \nself\n.\nbx_users_import\n()\n\n        \nself\n.\nbx_ratings_import\n()\n\n\n    \ndef\n \nbx_books_import\n(\nself\n):\n\n        \n\n\n        import books meta information\n\n\n        \n\n\n        \ntry\n:\n\n            \nbooksfile\n \n=\n \ncodecs\n.\nopen\n(\nBX-Dump/BX-Books.csv\n,\n \nr\n,\n \nutf-8\n)\n\n\n            \nfor\n \nline\n \nin\n \nbooksfile\n:\n\n                \nprops\n \n=\n \nline\n.\nsplit\n(\n;\n)\n\n                \nisbn\n \n=\n \nprops\n[\n0\n]\n.\nstrip\n(\n)\n\n                \ntitle\n \n=\n \nprops\n[\n1\n]\n.\nstrip\n(\n)\n\n                \nauthor\n \n=\n \nprops\n[\n2\n]\n.\nstrip\n(\n)\n\n                \nyear\n \n=\n \nprops\n[\n3\n]\n.\nstrip\n(\n)\n\n                \nself\n.\nbooks\n[\nisbn\n]\n \n=\n \n{\ntitle\n:\n \ntitle\n,\n \nauthor\n:\n \nauthor\n,\n \nyear\n:\n \nyear\n}\n\n\n            \nbooksfile\n.\nclose\n()\n\n\n        \nexcept\n \nIOError\n \nas\n \ne\n:\n\n            \nerror\n \n=\n \nFailed to load: {0}\n.\nformat\n(\ne\n)\n\n            \nprint\n(\nerror\n)\n\n\n    \ndef\n \nbx_users_import\n(\nself\n):\n\n        \n\n\n        import user meta information\n\n\n        user is a dictionary, whose key is user_id\n\n\n        \n\n        \ntry\n:\n\n            \nusers_file\n \n=\n \ncodecs\n.\nopen\n(\nBX-Dump/BX-Users.csv\n,\n \nr\n,\n \nutf--8\n)\n\n            \nfor\n \nline\n \nin\n \nusers_file\n:\n\n                \nprops\n \n=\n \nline\n.\nsplit\n(\n;\n)\n\n                \nuser_id\n \n=\n \nprops\n[\n0\n]\n.\nstrip\n(\n)\n\n                \nlocation\n \n=\n \nprops\n[\n1\n]\n.\nstrip\n(\n)\n\n                \nself\n.\nusers\n[\nuser_id\n]\n \n=\n \nlocation\n\n                \nself\n.\nuser_ratings\n[\nuser_id\n]\n \n=\n \n{}\n\n            \nusers_file\n.\nclose\n()\n\n\n        \nexcept\n \nIOError\n \nas\n \ne\n:\n\n            \nerror\n \n=\n \nFailed to load: {0}\n.\nformat\n(\ne\n)\n\n            \nprint\n(\nerror\n)\n\n\n    \ndef\n \nbx_ratings_import\n(\nself\n):\n\n        \ntry\n:\n\n            \nratings_file\n \n=\n \ncodecs\n.\nopen\n(\nBX-Dump/BX-Book-Ratings.csv\n,\n \nr\n,\n \nutf--8\n)\n\n            \nfor\n \nline\n \nin\n \nratings_file\n:\n\n                \nprops\n \n=\n \nline\n.\nsplit\n(\n;\n)\n\n                \nuser_id\n \n=\n \nprops\n[\n0\n]\n.\nstrip\n(\n)\n\n                \nbook_id\n \n=\n \nprops\n[\n1\n]\n.\nstrip\n(\n)\n\n                \nrating\n \n=\n \nint\n(\nprops\n[\n2\n]\n.\nstrip\n()\n.\nstrip\n(\n))\n\n\n                \nif\n \nbook_id\n \nin\n \nself\n.\nbook_ratings\n:\n\n                    \nself\n.\nbook_ratings\n[\nbook_id\n]\n.\nappend\n(\nrating\n)\n\n                \nelse\n:\n\n                    \nself\n.\nbook_ratings\n[\nbook_id\n]\n \n=\n \n[\nrating\n]\n\n\n                \nself\n.\nuser_ratings\n[\nuser_id\n][\nbook_id\n]\n \n=\n \nrating\n\n\n            \nratings_file\n.\nclose\n()\n\n\n        \nexcept\n \nIOError\n \nas\n \ne\n:\n\n            \nerror\n \n=\n \nFailed to load: {0}\n.\nformat\n(\ne\n)\n\n            \nprint\n(\nerror\n)\n\n\n    \ndef\n \nget_books\n(\nself\n):\n\n        \nreturn\n \nself\n.\nbooks\n\n\n    \ndef\n \nget_users\n(\nself\n):\n\n        \nreturn\n \nself\n.\nusers\n\n\n    \ndef\n \nget_user_ratings\n(\nself\n):\n\n        \nreturn\n \nself\n.\nuser_ratings\n\n\n    \ndef\n \nget_book_ratings\n(\nself\n):\n\n        \nreturn\n \nself\n.\nbook_ratings\n\n\n    \ndef\n \nrecommender_import\n(\nself\n):\n\n        \nreturn\n \nself\n.\nbooks\n,\n \nself\n.\nusers\n,\n \nself\n.\nuser_ratings\n,\n \nself\n.\nbook_ratings\n\n\n\n\n\n2 \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5\n\n\n\u9690\u5f0f\u8bc4\u4ef7\n\n\n\u7528\u6237\u7684\u8bc4\u4ef7\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u663e\u5f0f\u8bc4\u4ef7\u548c\u9690\u5f0f\u8bc4\u4ef7\u3002\n\u663e\u5f0f\u8bc4\u4ef7\n\u6307\u7684\u662f\u7528\u6237\u660e\u786e\u5730\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u662fYouTube\u4e0a\u7684\u201c\u559c\u6b22\u201d\u548c\u201c\u4e0d\u559c\u6b22\u201d\u6309\u94ae\uff0c\u4ee5\u53ca\u4e9a\u9a6c\u900a\u8bc4\u8bba\u7684\u661f\u7ea7\u7cfb\u7edf\u3002\n\n\n\u9690\u5f0f\u8bc4\u4ef7\n\uff0c\u5c31\u662f\u6211\u4eec\u4e0d\u8ba9\u7528\u6237\u660e\u786e\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\uff0c\u800c\u662f\u901a\u8fc7\u89c2\u5bdf\u4ed6\u4eec\u7684\u884c\u4e3a\u6765\u83b7\u5f97\u504f\u597d\u4fe1\u606f\u3002\u793a\u4f8b\u4e4b\u4e00\u662f\u8bb0\u5f55\u7528\u6237\u5728\u7ebd\u7ea6\u65f6\u62a5\u7f51\u4e0a\u7684\u70b9\u51fb\u8bb0\u5f55\uff0c\u4e9a\u9a6c\u900a\u4e0a\u7528\u6237\u7684\u5b9e\u9645\u8d2d\u4e70\u8bb0\u5f55\n\n\n\u6211\u4eec\u53ef\u4ee5\u6536\u96c6\u5230\u54ea\u4e9b\u9690\u5f0f\u8bc4\u4ef7\u5462\uff1f \u7f51\u9875\u65b9\u9762\uff1a\u9875\u9762\u70b9\u51fb\u3001\u505c\u7559\u65f6\u95f4\u3001\u91cd\u590d\u8bbf\u95ee\u6b21\u6570\u3001\u5f15 \u7528\u7387\u3001Hulu\u4e0a\u89c2\u770b\u89c6\u9891\u7684\u6b21\u6570\uff1b \u97f3\u4e50\u64ad\u653e\u5668\uff1a\u64ad\u653e\u7684\u66f2\u76ee\u3001\u8df3\u8fc7\u7684\u66f2\u76ee\u3001\u64ad\u653e\u6b21\u6570\uff1b \u8fd9 \u4e9b\u53ea\u662f\u4e00\u5c0f\u90e8\u5206\uff01\n\n\n\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5\n\n\n\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u63cf\u8ff0\u7684\u90fd\u662f\u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\uff1a\u5c06\u4e00\u4e2a\u7528\u6237\u548c\u5176\u4ed6\n\u6240\u6709\n\u7528\u6237\u8fdb\u884c\u5bf9\u6bd4\uff0c\u627e\u5230\u76f8\u4f3c\u7684\u4eba\u3002\u8fd9\u79cd\u7b97\u6cd5\u6709\u4e24\u4e2a\u5f0a\u7aef\uff1a\n\n\n\n\n\u6269\u5c55\u6027\n\uff1a\u968f\u7740\u7528\u6237\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5176\u8ba1\u7b97\u91cf\u4e5f\u4f1a\u589e\u52a0\u3002\u8fd9\u79cd\u7b97\u6cd5\u5728\u53ea\u6709\u51e0\u5343\u4e2a\u7528\u6237\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u8fbe\u5230\u4e00\u767e\u4e07\u4e2a\u7528\u6237\u65f6\u5c31\u4f1a\u51fa\u73b0\u74f6\u9888\u3002\n\n\n\u7a00\u758f\u6027\n\uff1a\u5927\u591a\u6570\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u7269\u54c1\u7684\u6570\u91cf\u8981\u8fdc\u5927\u4e8e\u7528\u6237\u7684\u6570\u91cf\uff0c\u56e0\u6b64\u7528\u6237\u4ec5\u4ec5\u5bf9\u4e00\u5c0f\u90e8\u5206\u7269\u54c1\u8fdb\u884c\u4e86\u8bc4\u4ef7\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6570\u636e\u7684\u7a00\u758f\u6027\u3002\u6bd4\u5982\u4e9a\u9a6c\u900a\u6709\u4e0a\u767e\u4e07\u672c\u4e66\uff0c\u4f46\u7528\u6237\u53ea\u8bc4\u8bba \u4e86\u5f88\u5c11\u4e00\u90e8\u5206\uff0c\u4e8e\u662f\u5c31\u5f88\u96be\u627e\u5230\u4e24\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\u4e86\u3002\n\n\n\n\n\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\n\n\n\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6765\u8ba1\u7b97\u4e24\u4e2a\u7269\u54c1\u7684\u8ddd\u79bb\u3002\u7531\u4e8e\u201c\u5206\u6570\u81a8\u80c0\u201d\u73b0\u8c61\uff0c\u9700\u8981\u4ece\u7528\u6237\u7684\u8bc4\u4ef7\u4e2d\u51cf\u53bb\u4ed6\u6240\u6709\u8bc4\u4ef7\u7684\u5747\u503c\uff0c\u8fd9\u5c31\u662f\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002\n\n\n\n\ns(i,j) =\\frac{\\sum_{u\\in U}(R_{u.i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}}\n\n\ns(i,j) =\\frac{\\sum_{u\\in U}(R_{u.i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}}\n\n\n\n\nU\nU\n\u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7\u7269\u54c1\ni\ni\n\u548c\nj\nj\n\u7684\u7528\u6237\u96c6\u5408\uff0c \n\\bar R_u\n\\bar R_u\n\u8868\u793a\u7528\u6237\nu\nu\n\u5bf9\u6240\u6709\u7269\u54c1\u7684\u8bc4\u4ef7\u5747\u503c\uff0c\ns(i,j)\ns(i,j)\n\u8868\u793a\u7269\u54c1i\u548cj\u7684\u76f8\u4f3c\u5ea6\u3002\n\n\n \ndef\n \ncosinesimilarity\n(\nitem1\n,\n \nitem2\n,\n \nuserRatings\n):\n\n    \naverages\n \n=\n \n{}\n\n    \nfor\n \nitem\n,\n \nratings\n \nin\n \nuserRatings\n.\nitems\n():\n\n        \naverages\n[\nitem\n]\n \n=\n \n(\nfloat\n(\nsum\n(\nratings\n.\nvalues\n()))\n \n/\n \nlen\n(\nratings\n.\nvalues\n()))\n\n\n    \nnum\n \n=\n \n0\n    \n# \u5206\u5b50\n\n    \ndem1\n \n=\n \n0\n   \n# \u5206\u6bcd\u7684\u7b2c\u4e00\u90e8\u5206\n\n    \ndem2\n \n=\n \n0\n\n    \nfor\n \n(\nuser\n,\n \nratings\n)\n \nin\n \nuserRatings\n.\nitems\n():\n\n        \nif\n \nitem1\n \nin\n \nratings\n \nand\n \nitem2\n \nin\n \nratings\n:\n\n            \navg\n \n=\n \naverages\n[\nuser\n]\n\n            \nnum\n \n+=\n \n(\nratings\n[\nitem1\n]\n \n-\n \navg\n)\n \n*\n \n(\nratings\n[\nitem2\n]\n \n-\n \navg\n)\n\n            \ndem1\n \n+=\n \n(\nratings\n[\nitem1\n]\n \n-\n \navg\n)\n \n**\n \n2\n\n            \ndem2\n \n+=\n \n(\nratings\n[\nitem1\n]\n \n-\n \navg\n)\n \n**\n \n2\n\n    \nreturn\n \nnum\n \n/\n \n(\nmath\n.\nsqrt\n(\ndem1\n)\n \n*\n \nmath\n.\nsqrt\n(\ndem2\n))\n\n\n\n\nSlope One\u7b97\u6cd5\n\n\nSlope One\u662f\u4e00\u79cd\u6bd4\u8f83\u6d41\u884c\u7684\u57fa\u4e8e\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\u3002\u5b83\u6700\u5927\u7684\u4f18\u52bf\u662f\u7b80\u5355\uff0c\u56e0\u6b64\u6613\u4e8e\u5b9e\u73b0\u3002\n\n\n3 \u5206\u7c7b\n\n\n4 \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b\n\n\n5 \u6734\u7d20\u8d1d\u53f6\u65af\n\n\n6 \u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u548c\u975e\u7ed3\u6784\u5316\u6587\u672c\n\n\n7 \u805a\u7c7b~~~~", 
            "title": "\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_1", 
            "text": "", 
            "title": "\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357"
        }, 
        {
            "location": "/datamining/guideToDataMining/#1", 
            "text": "\u672c\u7ae0\u5c06\u4ecb\u7ecd\u534f\u540c\u8fc7\u6ee4\uff0c\u57fa\u672c\u7684\u8ddd\u79bb\u7b97\u6cd5\uff0c\u6700\u540e\u4f7f\u7528Python\u5b9e\u73b0\u4e00\u4e2a\u7b80\u5355\u7684\u63a8\u8350\u7b97\u6cd5\u3002  \u534f\u540c\u8fc7\u6ee4\uff0c\u987e\u540d\u601d\u4e49\uff0c\u662f\u5229\u7528\u4ed6\u4eba\u7684\u559c\u597d\u6765\u8fdb\u884c\u63a8\u8350\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u662f\u5927\u5bb6\u4e00\u8d77\u4ea7\u751f\u7684\u63a8\u8350\u3002\u5b83\u7684\u5de5\u4f5c\u539f\u7406\u662f\uff0c\u5728\u7f51\u7ad9\u4e0a\u67e5\u627e\u4e00\u4e2a\u548c\u4f60\u7c7b\u4f3c\u7684\u7528\u6237\uff0c\u7136\u540e\u5c06\u5b83\u559c\u6b22\u7684\u4e66\u7c4d\u63a8\u8350\u7ed9\u4f60\u3002  \u5982\u4f55\u627e\u5230\u76f8\u4f3c\u7684\u7528\u6237\uff1f", 
            "title": "1 \u63a8\u8350\u7cfb\u7edf\u5165\u95e8"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_2", 
            "text": "\u987e\u540d\u601d\u4e49\uff0c\u5728\u66fc\u54c8\u987f\u8857\u533a\u8981\u4ece\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\u5f00\u8f66\u5230\u53e6\u4e00\u4e2a\u5341\u5b57\u8def\u53e3\uff0c\u5b9e\u9645\u9a7e\u9a76\u8ddd\u79bb\u5c31\u662f\u201c\u66fc\u54c8\u987f\u8ddd\u79bb\u201d\u3002   \u6700\u7b80\u5355\u7684\u8ddd\u79bb\u8ba1\u7b97\u65b9\u5f0f\u662f\u66fc\u54c8\u987f\u8ddd\u79bb\u3002\u5728\u4e8c\u7ef4\u6a21\u578b\u4e2d\uff0c\u6bcf\u4e2a\u4eba\u90fd\u53ef\u4ee5\u7528 (x, y) (x, y) \u7684\u70b9\u6765\u8868\u793a\uff0c\u8fd9\u91cc\u7528\u4e0b\u6807\u6765\u8868\u793a\u4e0d\u540c\u7684\u4eba\uff0c (x_1, y_1) (x_1, y_1) \u8868\u793a\u827e\u7c73\uff0c (x_2, y_2) (x_2, y_2) \u8868\u793a\u795e\u79d8\u7684X\u5148\u751f\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e4b\u95f4\u7684\u66fc\u54c8\u987f\u8ddd\u79bb\u5c31\u662f\uff1a   |x_1-x_2|+|y_1-y_2|  |x_1-x_2|+|y_1-y_2|    \u66fc\u54c8\u987f\u8ddd\u79bb\u7684\u4f18\u70b9\u4e4b\u4e00\u662f\u8ba1\u7b97\u901f\u5ea6\u5feb\uff0c\u5bf9\u4e8eFacebook\u8fd9\u6837\u9700\u8981\u8ba1\u7b97\u767e\u4e07\u7528\u6237\u4e4b\u95f4\u7684\u76f8\u4f3c\u5ea6\u65f6\u5c31\u975e\u5e38\u6709\u5229\u3002    def   manhattan ( rating1 ,   rating2 ): \n     Computes the Manhattan distance. Both rating1 and rating2 are dictionaries         of the form { The Strokes : 3.0,  Slightly Stoopid : 2.5} \n     distance   =   0 \n     commonRatings   =   False  \n     for   key   in   rating1 : \n         if   key   in   rating2 : \n             distance   +=   abs ( rating1 [ key ]   -   rating2 [ key ]) \n             commonRatings   =   True \n     if   commonRatings : \n         return   distance \n     else : \n         return   - 1   #Indicates no ratings in common", 
            "title": "\u66fc\u54c8\u987f\u8ddd\u79bb"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_3", 
            "text": "\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5c31\u662f\u4e24\u70b9\u4e4b\u95f4\u7684\u76f4\u7ebf\u8ddd\u79bb\u3002 \u4e0b\u9762\u7684\u659c\u7ebf\u5c31\u662f\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u516c\u5f0f\u662f\uff1a   \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}  \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2}    \u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5728\u6570\u636e\u5b8c\u6574\u7684\u60c5\u51b5\u4e0b\u6548\u679c\u6700\u597d\u3002    def   euclidean ( rating1 ,   rating2 ): \n          Computes the Euclidean Distance      :param rating1: rating      :param rating2: rating      :return: distance if common ratings exists, or -1       \n     distance   =   0 \n     commonRatings   =   False \n     for   key   in   rating1 : \n         if   key   in   rating2 : \n             distance   +=   pow ( rating1 [ key ]   -   rating2 [ key ],   2 ) \n             commonRatings   =   True \n\n     if   commonRatings : \n         return   distance \n     else : \n         return   - 1    # Indicates no ratings in common", 
            "title": "\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_4", 
            "text": "\u6211\u4eec\u53ef\u4ee5\u5c06\u66fc\u54c8\u987f\u8ddd\u79bb\u548c\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u5f52\u7eb3\u6210\u4e00\u4e2a\u516c\u5f0f\uff0c\u8fd9\u4e2a\u516c\u5f0f\u79f0\u4e3a\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb(Minkowski Distance)\uff1a   d(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}}  d(x,y) = (\\sum_{k=1}^{n}|x_k-y_k|^r)^{\\frac{1}{r}}   \u5176\u4e2d\uff1a   r = 1 r = 1 , \u8be5\u516c\u5f0f\u5373\u66fc\u54c8\u987f\u8ddd\u79bb  r = 2 r = 2 , \u8be5\u516c\u5f0f\u5373\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb  r = \\infty r = \\infty , \u5207\u6bd4\u96ea\u592b\u8ddd\u79bb    Note  r r \u503c\u8d8a\u5927\uff0c\u5355\u4e2a\u7ef4\u5ea6\u7684\u5dee\u503c\u5927\u5c0f\u4f1a\u5bf9\u6574\u4f53\u8ddd\u79bb\u6709\u66f4\u5927\u7684\u5f71\u54cd\u3002", 
            "title": "\u95f5\u53ef\u592b\u65af\u57fa\u8ddd\u79bb"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_5", 
            "text": "\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb(Chebyshev Distance)\u662f\u5b9a\u4e49\u4e3a\u5176\u5404\u5750\u6807\u6570\u503c\u5dee\u7684\u6700\u5927\u503c\u3002   D_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k}  D_{\\rm Chebyshev}(x,y) = \\max_i(|x_i - y_i|)=\\lim_{k \\to \\infty} \\bigg( \\sum_{i=1}^n \\left| x_i - y_i \\right|^k \\bigg)^{1/k}     def   chebyshev ( rating1 ,   rating2 ): \n          Computes the Chebyshev Distance      :param rating1: rating      :param rating2: rating      :return: distance if common ratings exists, or -1       \n     distance   =   0 \n     commonRatings   =   False \n     for   key   in   rating1 : \n         if   key   in   rating2 : \n             distance   =   max ( distance ,   abs ( rating1 [ key ]   -   rating2 [ key ])) \n             commonRatings   =   True \n\n     if   commonRatings : \n         return   distance \n     else : \n         return   - 1    # Indicates no ratings in common", 
            "title": "\u5207\u6bd4\u96ea\u592b\u8ddd\u79bb"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_6", 
            "text": "\u8ba9\u6211\u4eec\u4ed4\u7ec6\u770b\u770b\u7528\u6237\u5bf9\u4e50\u961f\u7684\u8bc4\u5206\uff0c\u53ef\u4ee5\u53d1\u73b0\u6bcf\u4e2a\u7528\u6237\u7684\u6253\u5206\u6807\u51c6\u975e\u5e38\u4e0d\u540c\uff1a   Bill\u6ca1\u6709\u6253\u51fa\u6781\u7aef\u7684\u5206\u6570\uff0c\u90fd\u57282\u81f34\u5206\u4e4b\u95f4\uff1b   Jordyn\u4f3c\u4e4e\u559c\u6b22\u6240\u6709\u7684\u4e50\u961f\uff0c\u6253\u5206\u90fd\u57284\u81f35\u4e4b\u95f4\uff1b   Hailey\u662f\u4e00\u4e2a\u6709\u8da3\u7684\u4eba\uff0c\u4ed6\u7684\u5206\u6570\u4e0d\u662f1\u5c31\u662f4\u3002   \u90a3\u4e48\uff0c\u5982\u4f55\u6bd4\u8f83\u8fd9\u4e9b\u7528\u6237\u5462\uff1f\u6bd4\u5982Hailey\u76844\u5206\u76f8\u5f53\u4e8eJordan\u76844\u5206\u8fd8\u662f5\u5206\u5462\uff1f\u6211\u89c9\u5f97\u66f4\u63a5\u8fd15\u5206\u3002\u8fd9\u6837\u4e00\u6765\u5c31\u4f1a\u5f71\u54cd\u5230\u63a8\u8350\u7cfb\u7edf\u7684\u51c6\u786e\u6027\u4e86\u3002Clara\u6700\u4f4e\u7ed9\u4e864\u5206\u2014\u2014\u5979\u6240\u6709\u7684\u6253\u5206\u90fd\u57284\u81f35\u5206\u4e4b\u95f4\uff0c\u8fd9\u79cd\u73b0\u8c61\u5728\u6570\u636e\u6316\u6398\u9886\u57df\u79f0\u4e3a \u5206\u6570\u81a8\u80c0 \u3002   \u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570, \u7528\u4e8e\u5ea6\u91cf\u4e24\u4e2a\u53d8\u91cfX\u548cY\u4e4b\u95f4\u7684\u76f8\u5173(\u7ebf\u6027\u76f8\u5173)\uff0c\u5176\u503c\u4ecb\u4e8e-1\u4e0e1\u4e4b\u95f4, 1\u8868\u793a\u5b8c\u5168\u543b\u5408\uff0c-1\u8868\u793a\u5b8c\u5168\u76f8\u6096\u3002\u4e0b\u9762\u662f\u5e38\u89c1\u7684\u51e0\u7ec4 (x, y) (x, y) \u70b9\u96c6\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002   \u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5b9a\u4e49\u4e3a\u4e24\u4e2a\u53d8\u91cf\u4e4b\u95f4\u7684\u534f\u65b9\u5dee( \\text{cov}(X,Y) \\text{cov}(X,Y) )\u548c\u6807\u51c6\u5dee( \\sigma_X \\sigma_X )\u7684\u5546\uff1a   \\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y}  \\rho_{X,Y}={\\mathrm{cov}(X,Y) \\over \\sigma_X \\sigma_Y} ={E[(X-\\mu_X)(Y-\\mu_Y)] \\over \\sigma_X\\sigma_Y}   \u5bf9\u4e8e\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570:   r_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}.  r_{xy}=\\frac{\\sum x_iy_i-n \\bar{x} \\bar{y}}{(n-1) s_x s_y}=\\frac{n\\sum x_iy_i-\\sum x_i\\sum y_i}{\\sqrt{n\\sum x_i^2-(\\sum x_i)^2}~\\sqrt{n\\sum y_i^2-(\\sum y_i)^2}}.   \u4ee5\u4e0a\u65b9\u7a0b\u7ed9\u51fa\u4e86\u8ba1\u7b97\u6837\u672c\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u7b80\u5355\u7684\u5355\u6d41\u7a0b\u7b97\u6cd5\uff0c\u4f46\u662f\u5176\u4f9d\u8d56\u4e8e\u6d89\u53ca\u5230\u7684\u6570\u636e\uff0c\u6709\u65f6\u5b83\u53ef\u80fd\u662f\u6570\u503c\u4e0d\u7a33\u5b9a\u7684\u3002\u4f46\u5b83\u6700\u5927\u7684\u4f18\u70b9\u662f\uff0c\u7528\u4ee3\u7801\u5b9e\u73b0\u7684\u65f6\u5019\u53ef\u4ee5\u53ea\u904d\u5386\u4e00\u6b21\u6570\u636e\u3002         def   pearson ( rating1 ,   rating2 ): \n                  Compute pearson coefficient          :param rating1: a dictionary          :param rating2: a dictionary          :return: pearson coefficient           \n         sum_xy   =   0 \n         sum_x   =   0 \n         sum_y   =   0 \n         sum_x2   =   0 \n         sum_y2   =   0 \n         n   =   0 \n         commonRatings   =   False \n         for   key   in   rating1 : \n             if   key   in   rating2 : \n                 n   +=   1 \n                 x   =   rating1 [ key ] \n                 y   =   rating2 [ key ] \n                 sum_xy   +=   x   *   y \n                 sum_x   +=   x \n                 sum_y   +=   y \n                 sum_x2   +=   pow ( x ,   2 ) \n                 sum_y2   +=   pow ( y ,   2 ) \n                 commonRatings   =   True \n\n         if   not   commonRatings : \n             return   - 1 \n         # now compute denominator \n         denominator   =   math . sqrt ( sum_x2   -   pow ( sum_x ,   2 )   /   n )   *   math . sqrt ( sum_y2   -   pow ( sum_y ,   2 )   /   n ) \n         if   denominator   ==   0 : \n             return   0 \n         else : \n             return   ( sum_xy   -   ( sum_x   *   sum_y )   /   n )   /   denominator", 
            "title": "\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_7", 
            "text": "\u5f53\u6211\u4eec\u75281500\u4e07\u9996\u6b4c\u66f2\u6765\u6bd4\u8f83\u4e24\u4e2a\u7528\u6237\u65f6\uff0c\u5f88\u6709\u53ef\u80fd\u4ed6\u4eec\u4e4b\u95f4\u6ca1\u6709\u4efb\u4f55\u4ea4\u96c6\uff0c\u8fd9\u6837\u4e00\u6765\u5c31\u65e0\u4ece\u8ba1\u7b97\u4ed6\u4eec\u4e4b\u95f4\u7684\u8ddd\u79bb\u4e86\u3002\u7c7b\u4f3c\u7684\u60c5\u51b5\u662f\u5728\u8ba1\u7b97\u4e24\u7bc7\u6587\u7ae0\u7684\u76f8\u4f3c\u5ea6\u65f6\u3002\u4f59\u5f26\u76f8\u4f3c\u5ea6\u7684\u8ba1\u7b97\u4e2d\u4f1a\u7565\u8fc7\u8fd9\u4e9b\u975e\u96f6\u503c\u3002\u5b83\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a   \\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||}  \\cos(x,y) = \\frac{x\\cdot y}{||x||\\times||y||}   \u5176\u4e2d\uff0c \\cdot \\cdot  \u53f7\u8868\u793a\u6570\u91cf\u79ef\u3002 ||x|| ||x|| \u8868\u793a\u5411\u91cf x x \u7684\u6a21\u3002  \u4f59\u5f26\u76f8\u4f3c\u5ea6\u5728\u6587\u672c\u6316\u6398\u4e2d\u5e94\u7528\u5f97\u8f83\u591a\uff0c\u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u4e5f\u4f1a\u4f7f\u7528\u5230\u3002", 
            "title": "\u4f59\u5f26\u76f8\u4f3c\u5ea6"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_8", 
            "text": "\u5982\u679c\u6570\u636e\u5b58\u5728\u201c\u5206\u6570\u81a8\u80c0\u201d\u95ee\u9898\uff0c\u5c31\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u3002   \u5982\u679c\u6570\u636e\u6bd4\u8f83\u201c\u5bc6\u96c6\u201d\uff0c\u53d8\u91cf\u4e4b\u95f4\u57fa\u672c\u90fd\u5b58\u5728\u516c\u6709\u503c\uff0c\u4e14\u8fd9\u4e9b\u8ddd\u79bb\u6570\u636e\u662f\u975e\u5e38\u91cd\u8981\u7684\uff0c\u90a3\u5c31\u4f7f\u7528\u6b27\u51e0\u91cc\u5f97\u6216\u66fc\u54c8\u987f\u8ddd\u79bb\u3002  \u5982\u679c\u6570\u636e\u662f\u7a00\u758f\u7684\uff0c\u5219\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002    Note  \u5728\u6570\u636e\u6807\u51c6\u5316( \\mu=0,\\sigma=1 \\mu=0,\\sigma=1 \uff09\u540e\uff0cPearson\u76f8\u5173\u6027\u7cfb\u6570\u3001\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3001\u6b27\u5f0f\u8ddd\u79bb\u7684\u5e73\u65b9\u53ef\u8ba4\u4e3a\u662f\u7b49\u4ef7\u7684[ 1 ]\u3002", 
            "title": "\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u76f8\u4f3c\u5ea6\uff1f"
        }, 
        {
            "location": "/datamining/guideToDataMining/#k", 
            "text": "\u4e0a\u9762\u7684\u505a\u6cd5\u4e2d\uff0c\u6211\u4eec\u53ea\u4f9d\u9760\u6700\u76f8\u4f3c\u7684\u4e00\u4e2a\u7528\u6237\u6765\u505a\u63a8\u8350\uff0c\u5982\u679c\u8fd9\u4e2a\u7528\u6237\u6709\u4e9b\u7279\u6b8a\u7684\u504f\u597d\uff0c\u5c31\u4f1a\u76f4\u63a5\u53cd\u6620\u5728\u63a8\u8350\u5185\u5bb9\u91cc\u3002\u89e3\u51b3\u65b9\u6cd5\u4e4b\u4e00\u662f\u627e\u5bfb\u591a\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u8fd9\u91cc\u5c31\u8981\u7528\u5230K\u6700\u90bb\u8fd1\u7b97\u6cd5\u4e86\u3002  \u5728\u534f\u540c\u8fc7\u6ee4\u4e2d\u53ef\u4ee5\u4f7f\u7528K\u6700\u90bb\u8fd1\u7b97\u6cd5\u6765\u627e\u51faK\u4e2a\u6700\u76f8\u4f3c\u7684\u7528\u6237\uff0c\u4ee5\u6b64\u4f5c\u4e3a\u63a8\u8350\u7684\u57fa\u7840\u3002\u4e0d\u540c\u7684 \u5e94\u7528\u6709\u4e0d\u540c\u7684K\u503c\uff0c\u9700\u8981\u505a\u4e00\u4e9b\u5b9e\u9a8c\u6765\u5f97\u51fa\u3002\u4ee5\u4e0b\u7ed9\u5230\u8bfb\u8005\u4e00\u4e2a\u57fa\u672c\u7684\u601d\u8def\u3002 \u5047\u8bbe\u6211\u8981\u4e3aAnn\u505a\u63a8\u8350\uff0c\u5e76\u4ee4K=3\u3002\u4f7f\u7528\u76ae\u5c14\u900a\u76f8\u5173\u7cfb\u6570\u5f97\u5230\u7684\u7ed3\u679c\u662f\uff1a     Person  Pearson      Sally  0.8    Eric  0.7    Amanda  0.5     \u8fd9\u4e09\u4e2a\u4eba\u90fd\u4f1a\u5bf9\u63a8\u8350\u7ed3\u679c\u6709\u6240\u8d21\u732e\uff0c\u95ee\u9898\u5728\u4e8e\u6211\u4eec\u5982\u4f55\u786e\u5b9a\u4ed6\u4eec\u7684\u6bd4\u91cd\u5462\uff1f \u6211\u4eec\u76f4\u63a5\u7528\u76f8\u5173\u7cfb\u6570\u7684\u6bd4\u91cd\u6765\u63cf\u8ff0\uff0cSally\u7684\u6bd4\u91cd\u662f0.8/2=40%\uff0cEric\u662f0.7/2=35%\uff0cAmanda \u5219\u662f25%\uff1a  \u5047\u8bbe\u4ed6\u4eec\u4e09\u4eba\u5bf9Grey Wardens\u7684\u8bc4\u5206\u4ee5\u53ca\u52a0\u6743\u540e\u7684\u7ed3\u679c\u5982\u4e0b\uff1a     Person  Grey Wardens Rating  Influence      Sally  4.5  25%    Eric  5  35%    Amanda  3.5  40%     \u6700\u540e\u8ba1\u7b97\u5f97\u5230\u7684\u5206\u6570\u4e3a\u4e3a\u52a0\u6743\u548c  4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\% 4.5\\times 25\\% + 5\\times 35\\% + 3.5 \\times 40\\% \u3002", 
            "title": "K\u6700\u90bb\u8fd1\u7b97\u6cd5"
        }, 
        {
            "location": "/datamining/guideToDataMining/#python", 
            "text": "Cai-Nicolas Zeigler\u4ece\u56fe\u4e66\u6f02\u6d41\u7ad9\u6536\u96c6\u4e86\u8d85\u8fc7100\u4e07\u6761\u8bc4\u4ef7\u6570\u636e\u2014\u2014278,858\u4f4d\u7528\u6237\u4e3a271,379\u672c\u4e66\u6253\u4e86\u5206\u3002\u6570\u636e\u53ef\u4ee5\u4ece\u8fd9\u4e2a \u5730\u5740 \u83b7\u5f97\u3002  CSV\u6587\u4ef6\u5305\u542b\u4e86\u4e09\u5f20\u8868\uff1a   \u7528\u6237\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4f4d\u7f6e\u3001\u5e74\u9f84\u7b49\u4fe1\u606f\u3002\u5176\u4e2d\u7528\u6237\u7684\u59d3\u540d\u5df2\u7ecf\u9690\u53bb\uff1b   \u4e66\u7c4d\u8868\uff0c\u5305\u62ecISBN\u53f7\u3001\u6807\u9898\u3001\u4f5c\u8005\u3001\u51fa\u7248\u65e5\u671f\u3001\u51fa\u7248\u793e\u7b49\uff1b  \u8bc4\u5206\u8868\uff0c\u5305\u62ec\u7528\u6237ID\u3001\u4e66\u7c4dISBN\u53f7\u3001\u4ee5\u53ca\u8bc4\u5206\uff080-10\u5206\uff09\u3002   Recommender class   Recommender : \n\n     def   __init__ ( self ,   books ,   users ,   user_ratings ,   book_ratings ): \n                  initialize basic data          :param books: a dictionary of books, whose key is book id          :param users: a dictionary of users, whose key is user id          :param book_ratings: a dictionary of book ratings, whose key is book id          :param user_ratings: a dictionary of user ratings, whose key is user id           \n         self . books   =   books \n         self . users   =   users \n         self . book_ratings   =   book_ratings \n         self . user_ratings   =   user_ratings \n\n     def   recommend ( self ,   user_to_recommend_int ,   k = 1 ): \n                  Recommend user books          :param user_to_recommend_int: int, user id          :param k : int, for nearest k neighbors          :return: a list of books           \n         user_to_recommend   =   str ( user_to_recommend_int ) \n         if   user_to_recommend   not   in   self . users : \n             raise   Exception ( user does not exist!! ) \n\n         # find the user having min distances from user_to_recommend \n         distances   =   [] \n         find_user   =   False \n         for   user   in   self . users : \n             if   user_to_recommend   ==   user : \n                 continue \n             # extract user ratings based on user ids,  \n             # and compute the distance between them \n             distance   =   Distance . pearson ( self . user_ratings [ user_to_recommend ],  \n                  self . user_ratings [ user ]) \n             if   distance   !=   - 1 : \n                 distances . append ([ user ,   distance ]) \n                 find_user   =   True \n\n         if   not   find_user : \n             return   [] \n\n         # sort user based on their distances \n         # pearson \u7cfb\u6570\u8d8a\u5927\uff0c\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u6240\u4ee5\u7528reverse \n         distances . sort ( key = lambda   x :   x [ 1 ],   reverse = True ) \n\n         # compute weight based on distances \n         distances   =   distances [ 0 : k ] \n         sum_distance   =   sum ([ distance   for   user ,   distance   in   distances ]) \n         for   i   in   range ( len ( distances )): \n             distances [ i ][ 1 ]   /=   sum_distance \n\n         # recommend books \n         books_to_recommend   =   {} \n         for   user_id ,   weight   in   distances : \n             for   book_id   in   self . user_ratings [ user_id ]: \n                     if   book_id   not   in   self . user_ratings [ user_to_recommend ]:    # the user haven t seen \n                         if   book_id   not   in   books_to_recommend :    # haven t recommend \n                             books_to_recommend [ book_id ]   =  \n                                  self . user_ratings [ user_id ][ book_id ] * weight \n                         else : \n                             books_to_recommend [ book_id ]   =   books_to_recommend [ book_id ]  \\\n                                 +   self . user_ratings [ user_id ][ book_id ] * weight \n\n         # transform to a  list of tuple \n         books_to_recommend   =   [( book_id ,   project_rating )  \n               for   book_id ,   project_rating   in   books_to_recommend . items ()] \n\n         # sort based on project_rating \n         books_to_recommend . sort ( key = lambda   x :   x [ 1 ],   reverse = True ) \n\n         # extract book title \n         books_to_recommend   =   [ self . books [ book_id ][ title ] \n                for   book_id ,   project_rating   in   books_to_recommend ] \n         return   books_to_recommend  if   __name__   ==   __main__ : \n     ratings   =   BooksImport () \n     books ,   users ,   user_ratings ,   book_ratings   =   ratings . recommender_import () \n     test   =   Recommender ( books ,   users ,   user_ratings ,   book_ratings ) \n     print ( test . recommend ( 171118 ))  Distance import   math  class   Distance : \n          Compute distance of two users, having different ratings.      Both rating1 and rating2 are      dictionaries of the form { The Strokes : 3.0,  Slightly Stoopid : 2.5}       \n\n     def   __init__ ( self ): \n         pass \n\n     @staticmethod \n     def   manhattan ( rating1 ,   rating2 ): \n                  Computes the Manhattan distance.           \n         distance   =   0 \n         common_ratings   =   False \n         for   key   in   rating1 : \n             if   key   in   rating2 : \n                 distance   +=   abs ( rating1 [ key ]   -   rating2 [ key ]) \n                 common_ratings   =   True \n         if   common_ratings : \n             return   distance \n         else : \n             return   - 1    # Indicates no ratings in common \n\n     @staticmethod \n     def   euclidean ( rating1 ,   rating2 ): \n                  Computes the Euclidean Distance          :param rating1: rating          :param rating2: rating          :return: distance if common ratings exists, or -1           \n         distance   =   0 \n         commonRatings   =   False \n         for   key   in   rating1 : \n             if   key   in   rating2 : \n                 distance   +=   pow ( rating1 [ key ]   -   rating2 [ key ],   2 ) \n                 commonRatings   =   True \n\n         if   commonRatings : \n             return   distance \n         else : \n             return   - 1    # Indicates no ratings in common \n\n     @staticmethod \n     def   chebyshev ( rating1 ,   rating2 ): \n                  Computes the Chebyshev Distance          :param rating1: rating          :param rating2: rating          :return: distance if common ratings exists, or -1           \n         distance   =   0 \n         commonRatings   =   False \n         for   key   in   rating1 : \n             if   key   in   rating2 : \n                 distance   =   max ( distance ,   abs ( rating1 [ key ]   -   rating2 [ key ])) \n                 commonRatings   =   True \n\n         if   commonRatings : \n             return   distance \n         else : \n             return   - 1    # Indicates no ratings in common \n\n     @staticmethod \n     def   pearson ( rating1 ,   rating2 ): \n                  Compute pearson coefficient          :param rating1: a dictionary          :param rating2: a dictionary          :return: pearson coefficient           \n         sum_xy   =   0 \n         sum_x   =   0 \n         sum_y   =   0 \n         sum_x2   =   0 \n         sum_y2   =   0 \n         n   =   0 \n         commonRatings   =   False \n         for   key   in   rating1 : \n             if   key   in   rating2 : \n                 n   +=   1 \n                 x   =   rating1 [ key ] \n                 y   =   rating2 [ key ] \n                 sum_xy   +=   x   *   y \n                 sum_x   +=   x \n                 sum_y   +=   y \n                 sum_x2   +=   pow ( x ,   2 ) \n                 sum_y2   +=   pow ( y ,   2 ) \n                 commonRatings   =   True \n\n         if   not   commonRatings : \n             return   - 1 \n         # now compute denominator \n         denominator   =   math . sqrt ( sum_x2   -   pow ( sum_x ,   2 )   /   n ) \\ \n             *   math . sqrt ( sum_y2   -   pow ( sum_y ,   2 )   /   n ) \n         if   denominator   ==   0 : \n             return   0 \n         else : \n             return   ( sum_xy   -   ( sum_x   *   sum_y )   /   n )   /   denominator  Books_import class   BooksImport : \n\n     def   __init__ ( self ): \n         self . books   =   {} \n         self . users   =   {} \n         self . book_ratings   =   {} \n         self . user_ratings   =   {} \n         self . bx_books_import () \n         self . bx_users_import () \n         self . bx_ratings_import () \n\n     def   bx_books_import ( self ): \n                  import books meta information           \n\n         try : \n             booksfile   =   codecs . open ( BX-Dump/BX-Books.csv ,   r ,   utf-8 ) \n\n             for   line   in   booksfile : \n                 props   =   line . split ( ; ) \n                 isbn   =   props [ 0 ] . strip ( ) \n                 title   =   props [ 1 ] . strip ( ) \n                 author   =   props [ 2 ] . strip ( ) \n                 year   =   props [ 3 ] . strip ( ) \n                 self . books [ isbn ]   =   { title :   title ,   author :   author ,   year :   year } \n\n             booksfile . close () \n\n         except   IOError   as   e : \n             error   =   Failed to load: {0} . format ( e ) \n             print ( error ) \n\n     def   bx_users_import ( self ): \n                  import user meta information          user is a dictionary, whose key is user_id           \n         try : \n             users_file   =   codecs . open ( BX-Dump/BX-Users.csv ,   r ,   utf--8 ) \n             for   line   in   users_file : \n                 props   =   line . split ( ; ) \n                 user_id   =   props [ 0 ] . strip ( ) \n                 location   =   props [ 1 ] . strip ( ) \n                 self . users [ user_id ]   =   location \n                 self . user_ratings [ user_id ]   =   {} \n             users_file . close () \n\n         except   IOError   as   e : \n             error   =   Failed to load: {0} . format ( e ) \n             print ( error ) \n\n     def   bx_ratings_import ( self ): \n         try : \n             ratings_file   =   codecs . open ( BX-Dump/BX-Book-Ratings.csv ,   r ,   utf--8 ) \n             for   line   in   ratings_file : \n                 props   =   line . split ( ; ) \n                 user_id   =   props [ 0 ] . strip ( ) \n                 book_id   =   props [ 1 ] . strip ( ) \n                 rating   =   int ( props [ 2 ] . strip () . strip ( )) \n\n                 if   book_id   in   self . book_ratings : \n                     self . book_ratings [ book_id ] . append ( rating ) \n                 else : \n                     self . book_ratings [ book_id ]   =   [ rating ] \n\n                 self . user_ratings [ user_id ][ book_id ]   =   rating \n\n             ratings_file . close () \n\n         except   IOError   as   e : \n             error   =   Failed to load: {0} . format ( e ) \n             print ( error ) \n\n     def   get_books ( self ): \n         return   self . books \n\n     def   get_users ( self ): \n         return   self . users \n\n     def   get_user_ratings ( self ): \n         return   self . user_ratings \n\n     def   get_book_ratings ( self ): \n         return   self . book_ratings \n\n     def   recommender_import ( self ): \n         return   self . books ,   self . users ,   self . user_ratings ,   self . book_ratings", 
            "title": "Python\u63a8\u8350\u6a21\u5757"
        }, 
        {
            "location": "/datamining/guideToDataMining/#2", 
            "text": "", 
            "title": "2 \u9690\u5f0f\u8bc4\u4ef7\u548c\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_9", 
            "text": "\u7528\u6237\u7684\u8bc4\u4ef7\u7c7b\u578b\u53ef\u4ee5\u5206\u4e3a\u663e\u5f0f\u8bc4\u4ef7\u548c\u9690\u5f0f\u8bc4\u4ef7\u3002 \u663e\u5f0f\u8bc4\u4ef7 \u6307\u7684\u662f\u7528\u6237\u660e\u786e\u5730\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\u3002\u6700\u5e38\u89c1\u7684\u4f8b\u5b50\u662fYouTube\u4e0a\u7684\u201c\u559c\u6b22\u201d\u548c\u201c\u4e0d\u559c\u6b22\u201d\u6309\u94ae\uff0c\u4ee5\u53ca\u4e9a\u9a6c\u900a\u8bc4\u8bba\u7684\u661f\u7ea7\u7cfb\u7edf\u3002  \u9690\u5f0f\u8bc4\u4ef7 \uff0c\u5c31\u662f\u6211\u4eec\u4e0d\u8ba9\u7528\u6237\u660e\u786e\u7ed9\u51fa\u5bf9\u7269\u54c1\u7684\u8bc4\u4ef7\uff0c\u800c\u662f\u901a\u8fc7\u89c2\u5bdf\u4ed6\u4eec\u7684\u884c\u4e3a\u6765\u83b7\u5f97\u504f\u597d\u4fe1\u606f\u3002\u793a\u4f8b\u4e4b\u4e00\u662f\u8bb0\u5f55\u7528\u6237\u5728\u7ebd\u7ea6\u65f6\u62a5\u7f51\u4e0a\u7684\u70b9\u51fb\u8bb0\u5f55\uff0c\u4e9a\u9a6c\u900a\u4e0a\u7528\u6237\u7684\u5b9e\u9645\u8d2d\u4e70\u8bb0\u5f55  \u6211\u4eec\u53ef\u4ee5\u6536\u96c6\u5230\u54ea\u4e9b\u9690\u5f0f\u8bc4\u4ef7\u5462\uff1f \u7f51\u9875\u65b9\u9762\uff1a\u9875\u9762\u70b9\u51fb\u3001\u505c\u7559\u65f6\u95f4\u3001\u91cd\u590d\u8bbf\u95ee\u6b21\u6570\u3001\u5f15 \u7528\u7387\u3001Hulu\u4e0a\u89c2\u770b\u89c6\u9891\u7684\u6b21\u6570\uff1b \u97f3\u4e50\u64ad\u653e\u5668\uff1a\u64ad\u653e\u7684\u66f2\u76ee\u3001\u8df3\u8fc7\u7684\u66f2\u76ee\u3001\u64ad\u653e\u6b21\u6570\uff1b \u8fd9 \u4e9b\u53ea\u662f\u4e00\u5c0f\u90e8\u5206\uff01", 
            "title": "\u9690\u5f0f\u8bc4\u4ef7"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_10", 
            "text": "\u76ee\u524d\u4e3a\u6b62\u6211\u4eec\u63cf\u8ff0\u7684\u90fd\u662f\u57fa\u4e8e\u7528\u6237\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\uff1a\u5c06\u4e00\u4e2a\u7528\u6237\u548c\u5176\u4ed6 \u6240\u6709 \u7528\u6237\u8fdb\u884c\u5bf9\u6bd4\uff0c\u627e\u5230\u76f8\u4f3c\u7684\u4eba\u3002\u8fd9\u79cd\u7b97\u6cd5\u6709\u4e24\u4e2a\u5f0a\u7aef\uff1a   \u6269\u5c55\u6027 \uff1a\u968f\u7740\u7528\u6237\u6570\u91cf\u7684\u589e\u52a0\uff0c\u5176\u8ba1\u7b97\u91cf\u4e5f\u4f1a\u589e\u52a0\u3002\u8fd9\u79cd\u7b97\u6cd5\u5728\u53ea\u6709\u51e0\u5343\u4e2a\u7528\u6237\u7684\u60c5\u51b5\u4e0b\u80fd\u591f\u5de5\u4f5c\u5f97\u5f88\u597d\uff0c\u4f46\u8fbe\u5230\u4e00\u767e\u4e07\u4e2a\u7528\u6237\u65f6\u5c31\u4f1a\u51fa\u73b0\u74f6\u9888\u3002  \u7a00\u758f\u6027 \uff1a\u5927\u591a\u6570\u63a8\u8350\u7cfb\u7edf\u4e2d\uff0c\u7269\u54c1\u7684\u6570\u91cf\u8981\u8fdc\u5927\u4e8e\u7528\u6237\u7684\u6570\u91cf\uff0c\u56e0\u6b64\u7528\u6237\u4ec5\u4ec5\u5bf9\u4e00\u5c0f\u90e8\u5206\u7269\u54c1\u8fdb\u884c\u4e86\u8bc4\u4ef7\uff0c\u8fd9\u5c31\u9020\u6210\u4e86\u6570\u636e\u7684\u7a00\u758f\u6027\u3002\u6bd4\u5982\u4e9a\u9a6c\u900a\u6709\u4e0a\u767e\u4e07\u672c\u4e66\uff0c\u4f46\u7528\u6237\u53ea\u8bc4\u8bba \u4e86\u5f88\u5c11\u4e00\u90e8\u5206\uff0c\u4e8e\u662f\u5c31\u5f88\u96be\u627e\u5230\u4e24\u4e2a\u76f8\u4f3c\u7684\u7528\u6237\u4e86\u3002", 
            "title": "\u57fa\u4e8e\u7269\u54c1\u7684\u8fc7\u6ee4\u7b97\u6cd5"
        }, 
        {
            "location": "/datamining/guideToDataMining/#_11", 
            "text": "\u4f7f\u7528\u4f59\u5f26\u76f8\u4f3c\u5ea6\u6765\u8ba1\u7b97\u4e24\u4e2a\u7269\u54c1\u7684\u8ddd\u79bb\u3002\u7531\u4e8e\u201c\u5206\u6570\u81a8\u80c0\u201d\u73b0\u8c61\uff0c\u9700\u8981\u4ece\u7528\u6237\u7684\u8bc4\u4ef7\u4e2d\u51cf\u53bb\u4ed6\u6240\u6709\u8bc4\u4ef7\u7684\u5747\u503c\uff0c\u8fd9\u5c31\u662f\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\u3002   s(i,j) =\\frac{\\sum_{u\\in U}(R_{u.i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}}  s(i,j) =\\frac{\\sum_{u\\in U}(R_{u.i}-\\bar R_u)(R_{u,j}-\\bar R_u)}{\\sqrt{\\sum_{u\\in U}(R_{u,i}-\\bar R_u)^2}\\sqrt{\\sum_{u\\in U}(R_{u,j}-\\bar R_u)^2}}   U U \u8868\u793a\u540c\u65f6\u8bc4\u4ef7\u8fc7\u7269\u54c1 i i \u548c j j \u7684\u7528\u6237\u96c6\u5408\uff0c  \\bar R_u \\bar R_u \u8868\u793a\u7528\u6237 u u \u5bf9\u6240\u6709\u7269\u54c1\u7684\u8bc4\u4ef7\u5747\u503c\uff0c s(i,j) s(i,j) \u8868\u793a\u7269\u54c1i\u548cj\u7684\u76f8\u4f3c\u5ea6\u3002    def   cosinesimilarity ( item1 ,   item2 ,   userRatings ): \n     averages   =   {} \n     for   item ,   ratings   in   userRatings . items (): \n         averages [ item ]   =   ( float ( sum ( ratings . values ()))   /   len ( ratings . values ())) \n\n     num   =   0      # \u5206\u5b50 \n     dem1   =   0     # \u5206\u6bcd\u7684\u7b2c\u4e00\u90e8\u5206 \n     dem2   =   0 \n     for   ( user ,   ratings )   in   userRatings . items (): \n         if   item1   in   ratings   and   item2   in   ratings : \n             avg   =   averages [ user ] \n             num   +=   ( ratings [ item1 ]   -   avg )   *   ( ratings [ item2 ]   -   avg ) \n             dem1   +=   ( ratings [ item1 ]   -   avg )   **   2 \n             dem2   +=   ( ratings [ item1 ]   -   avg )   **   2 \n     return   num   /   ( math . sqrt ( dem1 )   *   math . sqrt ( dem2 ))", 
            "title": "\u4fee\u6b63\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6"
        }, 
        {
            "location": "/datamining/guideToDataMining/#slope-one", 
            "text": "Slope One\u662f\u4e00\u79cd\u6bd4\u8f83\u6d41\u884c\u7684\u57fa\u4e8e\u7269\u54c1\u7684\u534f\u540c\u8fc7\u6ee4\u7b97\u6cd5\u3002\u5b83\u6700\u5927\u7684\u4f18\u52bf\u662f\u7b80\u5355\uff0c\u56e0\u6b64\u6613\u4e8e\u5b9e\u73b0\u3002", 
            "title": "Slope One\u7b97\u6cd5"
        }, 
        {
            "location": "/datamining/guideToDataMining/#3", 
            "text": "", 
            "title": "3 \u5206\u7c7b"
        }, 
        {
            "location": "/datamining/guideToDataMining/#4", 
            "text": "", 
            "title": "4 \u8fdb\u4e00\u6b65\u63a2\u7d22\u5206\u7c7b"
        }, 
        {
            "location": "/datamining/guideToDataMining/#5", 
            "text": "", 
            "title": "5 \u6734\u7d20\u8d1d\u53f6\u65af"
        }, 
        {
            "location": "/datamining/guideToDataMining/#6", 
            "text": "", 
            "title": "6 \u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u548c\u975e\u7ed3\u6784\u5316\u6587\u672c"
        }, 
        {
            "location": "/datamining/guideToDataMining/#7", 
            "text": "", 
            "title": "7 \u805a\u7c7b~~~~"
        }
    ]
}