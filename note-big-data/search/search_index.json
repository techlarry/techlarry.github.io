{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"gdm/ch5/","text":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 5 \u6734\u7d20\u8d1d\u53f6\u65af 1 \u6734\u7d20\u8d1d\u53f6\u65af \u4f7f\u7528\u8fd1\u90bb\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u5f88\u96be\u5bf9\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\u8fdb\u884c\u91cf\u5316\u3002\u4f46\u5982\u679c\u4f7f\u7528\u7684\u662f\u57fa\u4e8e\u6982\u7387\u7684\u5206\u7c7b\u7b97\u6cd5\u2014\u2014\u8d1d\u53f6\u65af\u7b97\u6cd5\u2014\u2014\u90a3\u5c31\u53ef\u4ee5\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u53ef\u80fd\u6027\u4e86\uff1a\u8fd9\u540d\u8fd0\u52a8\u5458\u670980%\u7684\u51e0\u7387\u662f\u7bee\u7403\u8fd0\u52a8\u5458\u3002 \u8fd1\u90bb\u7b97\u6cd5\u53c8\u79f0\u4e3a \u88ab\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u8fd9\u79cd\u7b97\u6cd5\u53ea\u662f\u5c06\u8bad\u7ec3\u96c6\u7684\u6570\u636e\u4fdd\u5b58\u8d77\u6765\uff0c\u5728\u6536\u5230\u6d4b\u8bd5\u6570\u636e\u65f6\u624d\u4f1a\u8fdb\u884c\u8ba1\u7b97\u3002\u5982\u679c\u6211\u4eec\u670910\u4e07\u9996\u97f3\u4e50\uff0c\u90a3\u6bcf\u8fdb\u884c\u4e00\u6b21\u5206\u7c7b\uff0c\u90fd\u9700\u8981\u904d\u5386\u8fd910\u4e07\u6761\u8bb0\u5f55\u624d\u884c\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u5219\u662f\u4e00\u79cd \u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u5b83\u4f1a\u6839\u636e\u8bad\u7ec3\u96c6\u6784\u5efa\u8d77\u4e00\u4e2a\u6a21\u578b\uff0c\u5e76\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u5bf9\u65b0\u7684\u8bb0\u5f55\u8fdb\u884c\u5206\u7c7b\uff0c\u56e0\u6b64\u901f\u5ea6\u4f1a\u5feb\u5f88\u591a\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u7684\u4e24\u4e2a\u4f18\u70b9\u5373\uff1a \u80fd\u591f\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\uff1b \u5b83\u662f\u4e00\u79cd\u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5\u3002 \u6982\u7387 \u6211\u4eec\u7528 P(h|D) P(h|D) \u6765\u8868\u793a D D \u6761\u4ef6\u4e0b\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\u3002 P(h) P(h) \u8868\u793a\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\uff0c\u79f0\u4e3ah\u7684\u5148\u9a8c\u6982\u7387\u3002 P(h|d) P(h|d) \u79f0\u4e3a\u540e\u9a8c\u6982\u7387\uff0c\u8868\u793a\u5728\u89c2\u5bdf\u4e86\u6570\u636e\u96c6 d d \u4e4b\u540e\uff0c h h \u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\u662f\u591a\u5c11\u3002\u540e\u9a8c\u6982\u7387\u53c8\u79f0\u4e3a\u6761\u4ef6\u6982\u7387\u3002 \u8d1d\u53f6\u65af\u6cd5\u5219 \u8d1d\u53f6\u65af\u6cd5\u5219\u63cf\u8ff0\u4e86 P(h) P(h) \u3001 P(h|D) P(h|D) \u3001 P(D) P(D) \u3001\u4ee5\u53ca P(D|h) P(D|h) \u8fd9\u56db\u4e2a\u6982\u7387\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a P(h|D) = \\frac{P(D|h)P(h)}{P(D)} P(h|D) = \\frac{P(D|h)P(h)}{P(D)} \u5982\u679c\u6211\u4eec\u6709 h_1, h_2,...h_n h_1, h_2,...h_n \u7b49\u4e8b\u4ef6\u3002\u8ba1\u7b97\u4e0d\u540c\u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\uff0c P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} \u9009\u53d6\u6700\u5927\u7684\u6982\u7387\uff0c\u5c31\u80fd\u7528\u4f5c\u5206\u7c7b\u4e86\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u6700\u5927\u540e\u9a8c\u4f30\u8ba1\uff0c\u8bb0\u4e3a h_{MAP} h_{MAP} \uff1a h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} H H \u8868\u793a\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u6240\u4ee5 h\\in H h\\in H \u8868\u793a\u201c\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\u201d\u3002\u6574\u4e2a\u516c\u5f0f\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8ba1\u7b97\u51fa P(h|D) P(h|D) \u7684\u503c\uff0c\u5e76\u53d6\u6700\u5927\u7684\u7ed3\u679c\u3002 \u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u516c\u5f0f\u4e2d\u7684\u5206\u6bcd\u90fd\u662f P(D) P(D) \uff0c\u56e0\u6b64\u5373\u4fbf\u53ea\u8ba1\u7b97 P(D|h)P(h) P(D|h)P(h) \uff0c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6700\u5927\u7684\u7ed3\u679c\u3002\u90a3\u4e48\u8fd9\u4e2a\u516c\u5f0f\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h) h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h) Example: \u624b\u73af\u63a8\u8350 \u73b0\u5728\u6211\u4eec\u8981\u4e3aiHealth\u516c\u53f8\u53d1\u4e00\u5957\u63a8\u8350\u7cfb\u7edf\u3002iHealth\u65b0\u51fa\u4ea7\u4e86\u4e24\u4ef6\u5546\u54c1\uff1ai100\u548ci500\u3002\u4e3a\u4e86\u6536\u96c6\u6570\u636e\uff0c\u8ba9\u8d2d\u4e70\u7684\u7528\u6237\u586b\u5199\u8c03\u67e5\u95ee\u5377\uff0c\u6bcf\u4e2a\u95ee\u9898\u90fd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5f81\uff1a \u5df2\u77e5\u4e00\u4f4d\u5ba2\u6237\u7684\u8fd0\u52a8\u76ee\u7684\u3001\u5f53\u524d\u8fd0\u52a8\u6c34\u5e73\u3001\u5bf9\u5065\u8eab\u7684\u70ed\u60c5\u3001\u662f\u5426\u9002\u5e94\u9ad8\u79d1\u6280\u4ea7\u54c1\uff0c\u8bf7\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u6765\u63a8\u8350\u624b\u73af\u578b\u53f7\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u8bad\u7ec3\u548c\u5206\u7c7b\u3002 \u8bad\u7ec3 \u8bad\u7ec3\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\uff1a \u5148\u9a8c\u6982\u7387\uff0c\u5982 P(i100) = 0.4 P(i100) = 0.4 \u6761\u4ef6\u6982\u7387\uff0c\u5982 P(\u5065\u5eb7|i100) = 0.167 P(\u5065\u5eb7|i100) = 0.167 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u8868\u793a\u5148\u9a8c\u6982\u7387\uff1a self . prior = { i500 : 0.6 , i100 : 0.4 } \u6761\u4ef6\u6982\u7387\u7684\u8868\u793a\u6709\u4e9b\u590d\u6742\uff0c\u7528\u5d4c\u5957\u7684\u5b57\u5178\u6765\u5b9e\u73b0\uff1a { i500 : { 1 : { appearance : 0.3333333333333333 , health : 0.4444444444444444 , both : 0.2222222222222222 }, 2 : { active : 0.4444444444444444 , sedentary : 0.2222222222222222 , moderate : 0.3333333333333333 }, 3 : { aggressive : 0.6666666666666666 , moderate : 0.3333333333333333 }, 4 : { yes : 0.6666666666666666 , no : 0.3333333333333333 }}, i100 : { 1 : { both : 0.5 , health : 0.16666666666666666 , appearance : 0.3333333333333333 }, 2 : { active : 0.3333333333333333 , sedentary : 0.5 , moderate : 0.16666666666666666 }, 3 : { aggressive : 0.16666666666666666 , moderate : 0.8333333333333334 }, 4 : { yes : 0.3333333333333333 , no : 0.6666666666666666 }}} 1\u30012\u30013\u30014\u8868\u793a\u7b2c\u51e0\u5217\uff0c\u6240\u4ee5\u7b2c\u4e00\u884c\u53ef\u4ee5\u89e3\u91ca\u4e3a\u8d2d\u4e70i500\u7684\u987e\u5ba2\u4e2d\u8fd0\u52a8\u76ee\u7684\u662f\u5916\u8868\u7684\u6982\u7387\u662f 0.333\u3002 \u4e3a\u4e86\u8ba1\u7b97\u6982\u7387\uff0c\u8981\u8fdb\u884c\u8ba1\u6570\uff0c\u53ef\u4ee5\u7528\u5b57\u5178\u6765\u7edf\u8ba1\u6bcf\u4e2a\u578b\u53f7\u7684\u6b21\u6570\u3002 \u4ee5\u4e0b\u662f\u8bad\u7ec3\u7528\u7684Python\u4ee3\u7801\uff1a class NavieBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u603b\u6761\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] for i in range ( len ( fields )): if self . format [ i ] == num : vector . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) self . tmp = counts def classify ( self , itemVector ): \u8fd4\u56deitemVector\u6240\u5c5e\u7c7b\u522b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob = prob * self . conditional [ category ][ col ][ attrValue ] col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] if __name__ == __main__ : c = NavieBayes ( iHealth/i , 10 , attr \\t attr \\t attr \\t attr \\t class ) print ( c . classify ([ health moderate , moderate , yes ])) Example: \u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e \u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e \uff0c\u5176\u4e2d\u6bcf\u6761\u8bb0\u5f55\u4ee3\u8868\u4e00\u4e2a\u9009\u6c11\uff0c\u7b2c\u4e00\u5217\u662f\u5206\u7c7b\u540d\u79f0\uff08democrat, republican\uff09\uff0c\u4e4b\u540e\u662f16\u6761\u6cd5\u6848\uff0c\u7528y\u548cn\u8868\u793a\u8be5\u4eba\u662f\u5426\u652f\u6301\u3002 \u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a democrat y n y n n y y y y y n n y n n y democrat y y y n n y y y y n n n n n y y republican y y n y y y n n n y n y y y n n \u5728\u8c03\u7528\u4e0a\u4e00\u8282\u7f16\u5199\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\u4f7f\u7528\u4ee5\u4e0bdataFormat\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86\uff1a class\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\t attr\\tattr\\tattr \u6982\u7387\u503c\u4e3a0 \u4f46\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\u3002 \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u5176\u5b9e\u662f\u771f\u5b9e\u6982\u7387\u7684\u4e00\u79cd\u4f30\u8ba1\uff0c\u800c\u771f\u5b9e\u6982\u7387\u662f\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u5f97\u5230\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6240\u6709\u4eba\u90fd\u505a\u8840\u6db2\u6d4b\u8bd5\uff0c\u624d\u80fd\u5f97\u5230\u5065\u5eb7\u4eba\u8fd4\u56de\u9634\u6027\u7ed3\u679c\u7684\u771f\u5b9e\u6982\u7387\u3002\u663e\u7136\uff0c\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u9009\u53d6\u4e00\u4e2a\u6837\u672c\uff0c\u59821000\u4eba\uff0c\u5bf9\u4ed6\u4eec\u8fdb\u884c\u6d4b\u8bd5\u5e76\u8ba1\u7b97\u6982\u7387\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u4f30\u8ba1\u90fd\u662f\u63a5\u8fd1\u4e8e\u771f\u5b9e\u6982\u7387\u7684\u3002\u4f46\u5f53\u771f\u5b9e\u6982\u7387\u975e\u5e38\u5c0f\u65f6\uff0c\u8fd9\u79cd\u62bd\u6837\u7edf\u8ba1\u7684\u505a\u6cd5\u5c31\u4f1a\u6709\u95ee\u9898\u4e86\u3002\u6bd4\u5982\u8bf4\uff0c\u6c11\u4e3b\u515a\u5bf9\u7f51\u7edc\u975e\u6cd5\u4f20\u64ad\u6cd5\u6848\u7684\u5426\u51b3\u7387\u662f0.03\uff0c\u5373 P(S=no|\u6c11\u4e3b\u515a) = 0.03 P(S=no|\u6c11\u4e3b\u515a) = 0.03 \u3002\u5982\u679c\u6211\u4eec \u5206\u522b\u9009\u53d6\u5341\u4e2a\u6c11\u4e3b\u515a\u548c\u5171\u548c\u515a\u4eba\uff0c\u770b\u4ed6\u4eec\u5bf9\u8be5\u6cd5\u6848\u7684\u6295\u7968\u60c5\u51b5\uff0c\u4f60\u89c9\u5f97\u5f97\u5230\u7684\u6982\u7387\u4f1a\u662f\u4ec0\u4e48\uff1f\u7b54\u6848\u5f88\u53ef\u80fd\u662f0\u3002 \u5728\u6734\u7d20\u8d1d\u53f6\u65af\u4e2d\uff0c\u6982\u7387\u4e3a0\u7684\u5f71\u54cd\u662f\u5f88\u5927\u7684\u3002\u5982\u679c\u5176\u4e2d\u2f00\u4e2a\u6982\u7387\u503c\u4e3a0\uff0c\u90a3\u4e48\u6700\u540e\u7684\u4e58\u79ef\u4e5f\u4e3a0\u3002 \u4e3a\u4e86\u8868\u793a\u65b9\u4fbf\uff0c\u6211\u4eec\u91c7\u7528\u4ee5\u4e0b\u516c\u5f0f\uff1a P(x|y)=\\frac{n_c}{n} P(x|y)=\\frac{n_c}{n} \u5176\u4e2d, n n \u8868\u793a\u8bad\u7ec3\u96c6\u4e2dy\u7c7b\u522b\u7684\u8bb0\u5f55\u6570\uff1b n_c n_c \u8868\u793a y y \u7c7b\u522b\u4e2d\u503c\u4e3a x x \u7684\u8bb0\u5f55\u6570\u3002\u6211\u4eec\u7684\u95ee\u9898\u662f n_c n_c \u53ef\u80fd\u4e3a0\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u516c\u793a\u53d8\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a P(x|y)=\\frac{n_c+mp}{n+m} P(x|y)=\\frac{n_c+mp}{n+m} m m \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u8868\u793a\u7b49\u6548\u6837\u672c\u5927\u5c0f\u3002\u51b3\u5b9a\u5e38\u6570 m m \u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u503c\u7684\u7c7b\u522b\u6570\u76ee\u6765\u4f5c\u4e3a m m \uff0c\u6bd4\u5982\u6295\u7968\u6709\u8d5e\u6210\u548c\u5426\u51b3\u4e24\u79cd\u7c7b\u522b\uff0c\u6240\u4ee5 m m \u5c31\u4e3a2\u3002 p p \u5219\u662f\u76f8\u5e94\u7684\u5148\u9a8c\u6982\u7387\uff0c\u6bd4\u5982\u8bf4\u8d5e\u6210\u548c\u5426\u51b3\u7684\u6982\u7387\u5206\u522b\u662f0.5\uff0c\u90a3 p p \u5c31\u662f0.5\u3002 2 \u6570\u503c\u578b\u6570\u636e \u5728\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e2d\uff0c\u4e4b\u524d\u6211\u4eec\u5bf9\u4e8b\u7269\u8fdb\u884c\u4e86\u8ba1\u6570\uff0c\u8fd9\u79cd\u8ba1\u6570\u5219\u662f\u53ef\u4ee5\u5ea6\u91cf\u7684\u3002\u5bf9\u4e8e\u6570\u503c\u578b\u7684\u6570\u636e\u8981\u5982\u4f55\u8ba1\u6570\u5462\uff1f\u901a\u5e38\u6709\u4e24\u79cd\u505a\u6cd5\uff1a\u533a\u5206\u7c7b\u522b\u548c\u9ad8\u65af\u5206\u5e03\u3002 \u533a\u5206\u7c7b\u522b \u6211\u4eec\u53ef\u4ee5\u5212\u5b9a\u51e0\u4e2a\u8303\u56f4\u4f5c\u4e3a\u5206\u7c7b\uff0c\u5982\uff1a \u5e74\u9f84 18 18 - 22 23 - 30 31 - 40 40 \u5e74\u85aa $200,000 150,000 - 200,000 100,000 - 150,000 60,000 - 100,000 40,000 - 60,000 \u5212\u5206\u7c7b\u522b\u540e\uff0c\u5c31\u53ef\u4ee5\u5e94\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e86\u3002 \u9ad8\u65af\u5206\u5e03 \u5c5e\u4e8e\u7c7b\u522b y_i y_i \u7684\u7279\u5f81 x_i x_i \u7684\u6982\u7387\u4e3a P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} \u4e3a\u4e86\u4e3e\u4f8b\uff0c\u6211\u4eec\u4e3a\u4e0a\u9762\u8bb2\u8ff0\u7684\u624b\u73af\u7684\u4f8b\u5b50\u589e\u52a0\u4e00\u5217\u6536\u5165\u5c5e\u6027\u3002\u5047\u8bbe\u6211\u4eec\u8981\u8ba1\u7b97 P(100k|i500) P(100k|i500) \u7684\u6982\u7387\uff0c\u5373\u8d2d\u4e70i500\u7684\u7528\u6237\u4e2d\u6536\u5165\u662f100,000\u7f8e\u5143\u7684\u6982\u7387\u3002\u90a3\u4e48\u8fd9\u91cc u_{ij}, \\sigma_{ij} u_{ij}, \\sigma_{ij} \u5206\u522b\u5bf9\u5e94\u7684\u662f\u8d2d\u4e70i500\u7684\u7528\u6237\u7684\u5e73\u5747\u6536\u5165\u548c\u6536\u5165\u7684\u6807\u51c6\u5dee\u3002 \u6837\u672c\u6807\u51c6\u5dee\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \u6ce8\u610f\u5206\u6bcd\u4e2d\u7684\u662f \\text{card}(x)-1 \\text{card}(x)-1 \u4e0d\u662f \\text{card}(x) \\text{card}(x) \u3002 \u5728\u8bad\u7ec3\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u5c5e\u6027\u7684\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u51fa\u6765\uff0c\u800c\u5206\u7c7b\u9636\u6bb5\u4f7f\u7528\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff1a def pdf ( mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart Example: \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5 \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6\u5728 \u524d\u4e00\u7ae0 \u5df2\u7ecf\u8fdb\u884c\u4e86\u8be6\u7ec6\u63cf\u8ff0\u3002\u8be5\u6570\u636e\u96c6\u5305\u542b\u4e86\u6570\u503c\u578b\u7279\u5f81\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528\u4e0a\u4e00\u8282\u4ee3\u7801\u3002\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u76f4\u63a5\u7528\u8ba1\u6570\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u67d0\u4e2a\u5177\u4f53\u7279\u5f81\u7684\u503c\u51fa\u73b0\u7684\u6982\u7387\uff0c\u800c\u662f\u8981\u7528\u9ad8\u65af\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u8ba1\u7b97\u3002 import math import numpy as np class NaiveBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u5bf9\u6570\u503c\u578b\u6570\u636e\u8fdb\u884c\u6c42\u548c totals = {} numericValues = {} # \u5bf9\u5206\u7c7b\u578b\u6570\u636e\u8fdb\u884c\u8ba1\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u5206\u7c7b\u578b\u6570\u636e # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u5904\u7406\u6570\u503c\u578b\u6570\u636e col = 0 # column number totals . setdefault ( category , {}) numericValues . setdefault ( category , {}) for columnValue in nums : col += 1 totals [ category ] . setdefault ( col , 0 ) totals [ category ][ col ] += columnValue numericValues [ category ] . setdefault ( col , []) numericValues [ category ][ col ] . append ( columnValue ) # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) # \u8ba1\u7b97\u5e73\u5747\u6570\u548c\u6837\u672c\u6807\u51c6\u5dee self . means = {} self . standard_deviation = {} for category , columns in totals . items (): self . means . setdefault ( category , {}) self . standard_deviation . setdefault ( category , {}) for col , sums in columns . items (): self . means [ category ][ col ] = sums / len ( numericValues [ category ][ col ]) self . standard_deviation [ category ][ col ] = np . sqrt ( np . sum ( np . power ( ( np . array ( numericValues [ category ][ col ]) - self . means [ category ][ col ]), 2 )) / ( len ( numericValues [ category ][ col ]) - 1.0 )) def pdf ( self , mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart def classify ( self , itemVector , numVector ): \u6839\u636eitemVector\u548cnumVector\u8fdb\u884c\u5206\u7c7b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob *= self . conditional [ category ][ col ][ attrValue ] col += 1 col = 1 for numValue in numVector : #\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u5206\u5e03 prob *= self . pdf ( self . means [ category ][ col ], self . standard_deviation [ category ][ col ], numValue ) col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] def testBucket ( self , bucketPrefix , i ): \u6d4b\u8bd5 :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param i: \u7f16\u53f7 :return: \u6d4b\u8bd5\u7ed3\u679c filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () results = {} for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] test_result = self . classify ( vector , nums ) results . setdefault ( category , {}) results [ category ] . setdefault ( test_result , 0 ) results [ category ][ test_result ] += 1 return results def tenfold ( bucketPrefix , dataFormat ): results = {} for i in range ( 1 , 11 ): c = NaiveBayes ( bucketPrefix , i , dataFormat ) t = c . testBucket ( bucketPrefix , i ) for ( key , value ) in t . items (): results . setdefault ( key , {}) for ( ckey , cvalue ) in value . items (): results [ key ] . setdefault ( ckey , 0 ) results [ key ][ ckey ] += cvalue # now print results categories = list ( results . keys ()) categories . sort () print ( \\n Classified as: ) header = subheader = + for category in categories : header += % 2s % category subheader += -----+ print ( header ) print ( subheader ) total = 0.0 correct = 0.0 for category in categories : row = %s | % category for c2 in categories : if c2 in results [ category ]: count = results [ category ][ c2 ] else : count = 0 row += %3i | % count total += count if c2 == category : correct += count print ( row ) print ( subheader ) print ( \\n %5.3f percent correct % (( correct * 100 ) / total )) print ( total of %i instances % total ) if __name__ == __main__ : tenfold ( pimaSmall/pimaSmall , num \\t num \\t num \\t num \\t num \\t num \\t num \\t num \\t class ) \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a Classified as: 0 1 +-----+-----+ 0 | 46 | 13 | 1 | 15 | 26 | +-----+-----+ 72.000 percent correct total of 100 instances \u4e0ekNN\u76f8\u6bd4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u51c6\u786e\u7387\u66f4\u597d\uff0c\u800c\u4e14\u8ba1\u7b97\u66f4\u5feb\u3002 \u4e3a\u4ec0\u4e48\u8981\u53eb\u201c\u6734\u7d20\u8d1d\u53f6\u65af\u201d\u5462\uff1f \u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u5c06\u591a\u4e2a\u6982\u7387\u8fdb\u884c\u76f8\u4e58\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6982\u7387\u90fd\u662f\u5177\u6709\u72ec\u7acb\u6027\u7684\u3002\u5173\u4e8e\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u53ef\u4ee5\u53c2\u89c1 \u6982\u7387\u5bfc\u8bba \u3002 In simple terms, a naive Bayes classifier assumes that the presence (or absence) of a particular feature of a class is unrelated to the presence (or absence) of any other feature, given the class variable. For example, a fruit may be considered to be an apple if it is red, round, and about 4\" in diameter. Even if these features depend on each other or upon the existence of the other features, a naive Bayes classifier considers all of these properties to independently contribute to the probability that this fruit is an apple. [ ref ] \u4f46\u662f\u5728\u73b0\u5b9e\u6570\u636e\u6316\u6398\u573a\u666f\u4e2d\uff0c\u8fd9\u79cd\u7279\u5f81\u53d8\u91cf\u4e4b\u95f4\u5f80\u5f80\u4e0d\u76f8\u4e92\u72ec\u7acb\u3002 \u8fd0\u52a8\u5458\u4f8b\u5b50\u4e2d\uff0c\u8eab\u9ad8\u548c\u4f53\u91cd\u4e0d\u662f\u4e92\u76f8\u72ec\u7acb\u7684\uff0c\u56e0\u4e3a\u9ad8\u7684\u4eba\u4f53\u91cd\u4e5f\u4f1a\u8f83\u9ad8\u3002 \u5730\u533a\u90ae\u7f16\u3001\u6536\u5165\u3001\u5e74\u9f84\uff0c\u8fd9\u4e9b\u7279\u5f81\u4e5f\u4e0d\u5b8c\u5168\u72ec\u7acb\uff0c\u4e00\u4e9b\u5730\u533a\u7684\u623f\u5c4b\u90fd\u5f88\u6602\u8d35\uff0c\u4e00\u4e9b\u5730\u533a\u5219\u53ea\u6709\u623f\u8f66\uff1a\u52a0\u5dde\u5e15\u7f57\u5965\u56fe\u5927\u591a\u662f20\u5c81\u7684\u5e74\u8f7b\u4eba\uff0c\u800c\u4e9a\u5229\u6851\u90a3\u5dde\u5219\u591a\u662f\u9000\u4f11\u4eba\u5458\u3002 \u5728\u97f3\u4e50\u57fa\u56e0\u5de5\u7a0b\u4e2d\uff0c\u5f88\u591a\u7279\u5f81\u4e5f\u662f\u4e0d\u72ec\u7acb\u7684\uff0c\u5982\u679c\u97f3\u4e50\u4e2d\u6709\u5f88\u591a\u53d8\u97f3\u5409\u4ed6\uff0c\u90a3\u5c0f\u63d0\u7434\u7684 \u6982\u7387\u5c31\u964d\u4f4e\u4e86\u3002 \u8840\u6db2\u68c0\u9a8c\u7684\u7ed3\u679c\u4e2d\uff0cT4\u548cTSH\u8fd9\u4e24\u4e2a\u6307\u6807\u901a\u5e38\u662f\u5448\u53cd\u6bd4\u7684\u3002 \u6240\u4ee5\uff0c\u5728\u4f7f\u7528\u8d1d\u53f6\u65af\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e92\u76f8\u72ec\u7acb\u7684\u7279\u5f81\uff0c\u4f46\u73b0\u5b9e\u751f\u6d3b\u4e2d\u5f88\u96be\u627e\u5230\u8fd9\u6837\u7684\u5e94\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u80fd\u5047\u8bbe\u4ed6\u4eec\u662f\u72ec\u7acb\u7684\u4e86\uff01\u6211\u4eec\u5b8c\u5168\u5ffd\u7565\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64\u624d\u79f0\u4e3a\u201c\u6734\u7d20\u7684\u201d\uff08\u5929\u771f\u7684\uff09\u8d1d\u53f6\u65af\u65b9\u6cd5\u3002\u4e0d\u8fc7\u4e8b\u5b9e\u8bc1\u660e\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u6548\u679c\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\u3002","title":"Chapter 5: \u6982\u7387\u548c\u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"gdm/ch5/#-5","text":"","title":"\u9762\u5411\u7a0b\u5e8f\u5458\u7684\u6570\u636e\u6316\u6398\u6307\u5357 - 5 \u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"gdm/ch5/#1","text":"\u4f7f\u7528\u8fd1\u90bb\u7b97\u6cd5\u65f6\uff0c\u6211\u4eec\u5f88\u96be\u5bf9\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\u8fdb\u884c\u91cf\u5316\u3002\u4f46\u5982\u679c\u4f7f\u7528\u7684\u662f\u57fa\u4e8e\u6982\u7387\u7684\u5206\u7c7b\u7b97\u6cd5\u2014\u2014\u8d1d\u53f6\u65af\u7b97\u6cd5\u2014\u2014\u90a3\u5c31\u53ef\u4ee5\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u53ef\u80fd\u6027\u4e86\uff1a\u8fd9\u540d\u8fd0\u52a8\u5458\u670980%\u7684\u51e0\u7387\u662f\u7bee\u7403\u8fd0\u52a8\u5458\u3002 \u8fd1\u90bb\u7b97\u6cd5\u53c8\u79f0\u4e3a \u88ab\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u8fd9\u79cd\u7b97\u6cd5\u53ea\u662f\u5c06\u8bad\u7ec3\u96c6\u7684\u6570\u636e\u4fdd\u5b58\u8d77\u6765\uff0c\u5728\u6536\u5230\u6d4b\u8bd5\u6570\u636e\u65f6\u624d\u4f1a\u8fdb\u884c\u8ba1\u7b97\u3002\u5982\u679c\u6211\u4eec\u670910\u4e07\u9996\u97f3\u4e50\uff0c\u90a3\u6bcf\u8fdb\u884c\u4e00\u6b21\u5206\u7c7b\uff0c\u90fd\u9700\u8981\u904d\u5386\u8fd910\u4e07\u6761\u8bb0\u5f55\u624d\u884c\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u5219\u662f\u4e00\u79cd \u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5 \u3002\u5b83\u4f1a\u6839\u636e\u8bad\u7ec3\u96c6\u6784\u5efa\u8d77\u4e00\u4e2a\u6a21\u578b\uff0c\u5e76\u7528\u8fd9\u4e2a\u6a21\u578b\u6765\u5bf9\u65b0\u7684\u8bb0\u5f55\u8fdb\u884c\u5206\u7c7b\uff0c\u56e0\u6b64\u901f\u5ea6\u4f1a\u5feb\u5f88\u591a\u3002 \u8d1d\u53f6\u65af\u7b97\u6cd5\u7684\u4e24\u4e2a\u4f18\u70b9\u5373\uff1a \u80fd\u591f\u7ed9\u51fa\u5206\u7c7b\u7ed3\u679c\u7684\u7f6e\u4fe1\u5ea6\uff1b \u5b83\u662f\u4e00\u79cd\u4e3b\u52a8\u5b66\u4e60\u7b97\u6cd5\u3002","title":"1 \u6734\u7d20\u8d1d\u53f6\u65af"},{"location":"gdm/ch5/#_1","text":"\u6211\u4eec\u7528 P(h|D) P(h|D) \u6765\u8868\u793a D D \u6761\u4ef6\u4e0b\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\u3002 P(h) P(h) \u8868\u793a\u4e8b\u4ef6 h h \u53d1\u751f\u7684\u6982\u7387\uff0c\u79f0\u4e3ah\u7684\u5148\u9a8c\u6982\u7387\u3002 P(h|d) P(h|d) \u79f0\u4e3a\u540e\u9a8c\u6982\u7387\uff0c\u8868\u793a\u5728\u89c2\u5bdf\u4e86\u6570\u636e\u96c6 d d \u4e4b\u540e\uff0c h h \u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\u662f\u591a\u5c11\u3002\u540e\u9a8c\u6982\u7387\u53c8\u79f0\u4e3a\u6761\u4ef6\u6982\u7387\u3002","title":"\u6982\u7387"},{"location":"gdm/ch5/#_2","text":"\u8d1d\u53f6\u65af\u6cd5\u5219\u63cf\u8ff0\u4e86 P(h) P(h) \u3001 P(h|D) P(h|D) \u3001 P(D) P(D) \u3001\u4ee5\u53ca P(D|h) P(D|h) \u8fd9\u56db\u4e2a\u6982\u7387\u4e4b\u95f4\u7684\u5173\u7cfb\uff1a P(h|D) = \\frac{P(D|h)P(h)}{P(D)} P(h|D) = \\frac{P(D|h)P(h)}{P(D)} \u5982\u679c\u6211\u4eec\u6709 h_1, h_2,...h_n h_1, h_2,...h_n \u7b49\u4e8b\u4ef6\u3002\u8ba1\u7b97\u4e0d\u540c\u4e8b\u4ef6\u53d1\u751f\u7684\u6982\u7387\uff0c P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} P(h_i|D) = \\frac{P(D|h_i)P(h_i)}{P(D)} \u9009\u53d6\u6700\u5927\u7684\u6982\u7387\uff0c\u5c31\u80fd\u7528\u4f5c\u5206\u7c7b\u4e86\u3002\u8fd9\u79cd\u65b9\u6cd5\u53eb\u6700\u5927\u540e\u9a8c\u4f30\u8ba1\uff0c\u8bb0\u4e3a h_{MAP} h_{MAP} \uff1a h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} h_{MAP} = \\arg \\max_{h\\in H} P(h|D) = \\arg \\max_{h\\in H} \\frac{P(D|h)P(h)}{P(D)} H H \u8868\u793a\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u6240\u4ee5 h\\in H h\\in H \u8868\u793a\u201c\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\u201d\u3002\u6574\u4e2a\u516c\u5f0f\u7684\u542b\u4e49\u5c31\u662f\uff1a\u5bf9\u4e8e\u96c6\u5408\u4e2d\u7684\u6bcf\u4e00\u4e2a\u4e8b\u4ef6\uff0c\u8ba1\u7b97\u51fa P(h|D) P(h|D) \u7684\u503c\uff0c\u5e76\u53d6\u6700\u5927\u7684\u7ed3\u679c\u3002 \u53ef\u4ee5\u53d1\u73b0\u5bf9\u4e8e\u6240\u6709\u7684\u4e8b\u4ef6\uff0c\u516c\u5f0f\u4e2d\u7684\u5206\u6bcd\u90fd\u662f P(D) P(D) \uff0c\u56e0\u6b64\u5373\u4fbf\u53ea\u8ba1\u7b97 P(D|h)P(h) P(D|h)P(h) \uff0c\u4e5f\u53ef\u4ee5\u5224\u65ad\u51fa\u6700\u5927\u7684\u7ed3\u679c\u3002\u90a3\u4e48\u8fd9\u4e2a\u516c\u5f0f\u5c31\u53ef\u4ee5\u7b80\u5316\u4e3a\uff1a h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h) h_{MAP} = \\arg \\max_{h\\in H} P(D|h)P(h)","title":"\u8d1d\u53f6\u65af\u6cd5\u5219"},{"location":"gdm/ch5/#example","text":"\u73b0\u5728\u6211\u4eec\u8981\u4e3aiHealth\u516c\u53f8\u53d1\u4e00\u5957\u63a8\u8350\u7cfb\u7edf\u3002iHealth\u65b0\u51fa\u4ea7\u4e86\u4e24\u4ef6\u5546\u54c1\uff1ai100\u548ci500\u3002\u4e3a\u4e86\u6536\u96c6\u6570\u636e\uff0c\u8ba9\u8d2d\u4e70\u7684\u7528\u6237\u586b\u5199\u8c03\u67e5\u95ee\u5377\uff0c\u6bcf\u4e2a\u95ee\u9898\u90fd\u5bf9\u5e94\u4e00\u4e2a\u7279\u5f81\uff1a \u5df2\u77e5\u4e00\u4f4d\u5ba2\u6237\u7684\u8fd0\u52a8\u76ee\u7684\u3001\u5f53\u524d\u8fd0\u52a8\u6c34\u5e73\u3001\u5bf9\u5065\u8eab\u7684\u70ed\u60c5\u3001\u662f\u5426\u9002\u5e94\u9ad8\u79d1\u6280\u4ea7\u54c1\uff0c\u8bf7\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u6765\u63a8\u8350\u624b\u73af\u578b\u53f7\u3002 \u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u5305\u542b\u4e24\u4e2a\u90e8\u5206\uff1a\u8bad\u7ec3\u548c\u5206\u7c7b\u3002 \u8bad\u7ec3 \u8bad\u7ec3\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\uff1a \u5148\u9a8c\u6982\u7387\uff0c\u5982 P(i100) = 0.4 P(i100) = 0.4 \u6761\u4ef6\u6982\u7387\uff0c\u5982 P(\u5065\u5eb7|i100) = 0.167 P(\u5065\u5eb7|i100) = 0.167 \u6211\u4eec\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\u8868\u793a\u5148\u9a8c\u6982\u7387\uff1a self . prior = { i500 : 0.6 , i100 : 0.4 } \u6761\u4ef6\u6982\u7387\u7684\u8868\u793a\u6709\u4e9b\u590d\u6742\uff0c\u7528\u5d4c\u5957\u7684\u5b57\u5178\u6765\u5b9e\u73b0\uff1a { i500 : { 1 : { appearance : 0.3333333333333333 , health : 0.4444444444444444 , both : 0.2222222222222222 }, 2 : { active : 0.4444444444444444 , sedentary : 0.2222222222222222 , moderate : 0.3333333333333333 }, 3 : { aggressive : 0.6666666666666666 , moderate : 0.3333333333333333 }, 4 : { yes : 0.6666666666666666 , no : 0.3333333333333333 }}, i100 : { 1 : { both : 0.5 , health : 0.16666666666666666 , appearance : 0.3333333333333333 }, 2 : { active : 0.3333333333333333 , sedentary : 0.5 , moderate : 0.16666666666666666 }, 3 : { aggressive : 0.16666666666666666 , moderate : 0.8333333333333334 }, 4 : { yes : 0.3333333333333333 , no : 0.6666666666666666 }}} 1\u30012\u30013\u30014\u8868\u793a\u7b2c\u51e0\u5217\uff0c\u6240\u4ee5\u7b2c\u4e00\u884c\u53ef\u4ee5\u89e3\u91ca\u4e3a\u8d2d\u4e70i500\u7684\u987e\u5ba2\u4e2d\u8fd0\u52a8\u76ee\u7684\u662f\u5916\u8868\u7684\u6982\u7387\u662f 0.333\u3002 \u4e3a\u4e86\u8ba1\u7b97\u6982\u7387\uff0c\u8981\u8fdb\u884c\u8ba1\u6570\uff0c\u53ef\u4ee5\u7528\u5b57\u5178\u6765\u7edf\u8ba1\u6bcf\u4e2a\u578b\u53f7\u7684\u6b21\u6570\u3002 \u4ee5\u4e0b\u662f\u8bad\u7ec3\u7528\u7684Python\u4ee3\u7801\uff1a class NavieBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u603b\u6761\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] for i in range ( len ( fields )): if self . format [ i ] == num : vector . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) self . tmp = counts def classify ( self , itemVector ): \u8fd4\u56deitemVector\u6240\u5c5e\u7c7b\u522b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob = prob * self . conditional [ category ][ col ][ attrValue ] col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] if __name__ == __main__ : c = NavieBayes ( iHealth/i , 10 , attr \\t attr \\t attr \\t attr \\t class ) print ( c . classify ([ health moderate , moderate , yes ]))","title":"Example: \u624b\u73af\u63a8\u8350"},{"location":"gdm/ch5/#example_1","text":"\u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e \uff0c\u5176\u4e2d\u6bcf\u6761\u8bb0\u5f55\u4ee3\u8868\u4e00\u4e2a\u9009\u6c11\uff0c\u7b2c\u4e00\u5217\u662f\u5206\u7c7b\u540d\u79f0\uff08democrat, republican\uff09\uff0c\u4e4b\u540e\u662f16\u6761\u6cd5\u6848\uff0c\u7528y\u548cn\u8868\u793a\u8be5\u4eba\u662f\u5426\u652f\u6301\u3002 \u6587\u4ef6\u683c\u5f0f\u5982\u4e0b\uff1a democrat y n y n n y y y y y n n y n n y democrat y y y n n y y y y n n n n n y y republican y y n y y y n n n y n y y y n n \u5728\u8c03\u7528\u4e0a\u4e00\u8282\u7f16\u5199\u7684\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\u4f7f\u7528\u4ee5\u4e0bdataFormat\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86\uff1a class\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\tattr\\t attr\\tattr\\tattr \u6982\u7387\u503c\u4e3a0 \u4f46\u662f\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\u4e0b\u4f1a\u6709\u4e00\u4e9b\u95ee\u9898\u3002 \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u8ba1\u7b97\u5f97\u5230\u7684\u6982\u7387\u5176\u5b9e\u662f\u771f\u5b9e\u6982\u7387\u7684\u4e00\u79cd\u4f30\u8ba1\uff0c\u800c\u771f\u5b9e\u6982\u7387\u662f\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u5f97\u5230\u7684\u3002\u6bd4\u5982\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u5bf9\u6240\u6709\u4eba\u90fd\u505a\u8840\u6db2\u6d4b\u8bd5\uff0c\u624d\u80fd\u5f97\u5230\u5065\u5eb7\u4eba\u8fd4\u56de\u9634\u6027\u7ed3\u679c\u7684\u771f\u5b9e\u6982\u7387\u3002\u663e\u7136\uff0c\u5bf9\u5168\u91cf\u6570\u636e\u505a\u7edf\u8ba1\u662f\u4e0d\u73b0\u5b9e\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u9009\u53d6\u4e00\u4e2a\u6837\u672c\uff0c\u59821000\u4eba\uff0c\u5bf9\u4ed6\u4eec\u8fdb\u884c\u6d4b\u8bd5\u5e76\u8ba1\u7b97\u6982\u7387\u3002\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u8fd9\u79cd\u4f30\u8ba1\u90fd\u662f\u63a5\u8fd1\u4e8e\u771f\u5b9e\u6982\u7387\u7684\u3002\u4f46\u5f53\u771f\u5b9e\u6982\u7387\u975e\u5e38\u5c0f\u65f6\uff0c\u8fd9\u79cd\u62bd\u6837\u7edf\u8ba1\u7684\u505a\u6cd5\u5c31\u4f1a\u6709\u95ee\u9898\u4e86\u3002\u6bd4\u5982\u8bf4\uff0c\u6c11\u4e3b\u515a\u5bf9\u7f51\u7edc\u975e\u6cd5\u4f20\u64ad\u6cd5\u6848\u7684\u5426\u51b3\u7387\u662f0.03\uff0c\u5373 P(S=no|\u6c11\u4e3b\u515a) = 0.03 P(S=no|\u6c11\u4e3b\u515a) = 0.03 \u3002\u5982\u679c\u6211\u4eec \u5206\u522b\u9009\u53d6\u5341\u4e2a\u6c11\u4e3b\u515a\u548c\u5171\u548c\u515a\u4eba\uff0c\u770b\u4ed6\u4eec\u5bf9\u8be5\u6cd5\u6848\u7684\u6295\u7968\u60c5\u51b5\uff0c\u4f60\u89c9\u5f97\u5f97\u5230\u7684\u6982\u7387\u4f1a\u662f\u4ec0\u4e48\uff1f\u7b54\u6848\u5f88\u53ef\u80fd\u662f0\u3002 \u5728\u6734\u7d20\u8d1d\u53f6\u65af\u4e2d\uff0c\u6982\u7387\u4e3a0\u7684\u5f71\u54cd\u662f\u5f88\u5927\u7684\u3002\u5982\u679c\u5176\u4e2d\u2f00\u4e2a\u6982\u7387\u503c\u4e3a0\uff0c\u90a3\u4e48\u6700\u540e\u7684\u4e58\u79ef\u4e5f\u4e3a0\u3002 \u4e3a\u4e86\u8868\u793a\u65b9\u4fbf\uff0c\u6211\u4eec\u91c7\u7528\u4ee5\u4e0b\u516c\u5f0f\uff1a P(x|y)=\\frac{n_c}{n} P(x|y)=\\frac{n_c}{n} \u5176\u4e2d, n n \u8868\u793a\u8bad\u7ec3\u96c6\u4e2dy\u7c7b\u522b\u7684\u8bb0\u5f55\u6570\uff1b n_c n_c \u8868\u793a y y \u7c7b\u522b\u4e2d\u503c\u4e3a x x \u7684\u8bb0\u5f55\u6570\u3002\u6211\u4eec\u7684\u95ee\u9898\u662f n_c n_c \u53ef\u80fd\u4e3a0\u3002\u89e3\u51b3\u65b9\u6cd5\u662f\u5c06\u516c\u793a\u53d8\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff1a P(x|y)=\\frac{n_c+mp}{n+m} P(x|y)=\\frac{n_c+mp}{n+m} m m \u662f\u4e00\u4e2a\u5e38\u6570\uff0c\u8868\u793a\u7b49\u6548\u6837\u672c\u5927\u5c0f\u3002\u51b3\u5b9a\u5e38\u6570 m m \u7684\u65b9\u6cd5\u6709\u5f88\u591a\uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u503c\u7684\u7c7b\u522b\u6570\u76ee\u6765\u4f5c\u4e3a m m \uff0c\u6bd4\u5982\u6295\u7968\u6709\u8d5e\u6210\u548c\u5426\u51b3\u4e24\u79cd\u7c7b\u522b\uff0c\u6240\u4ee5 m m \u5c31\u4e3a2\u3002 p p \u5219\u662f\u76f8\u5e94\u7684\u5148\u9a8c\u6982\u7387\uff0c\u6bd4\u5982\u8bf4\u8d5e\u6210\u548c\u5426\u51b3\u7684\u6982\u7387\u5206\u522b\u662f0.5\uff0c\u90a3 p p \u5c31\u662f0.5\u3002","title":"Example: \u7f8e\u56fd\u56fd\u4f1a\u6295\u7968\u6570\u636e"},{"location":"gdm/ch5/#2","text":"\u5728\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e2d\uff0c\u4e4b\u524d\u6211\u4eec\u5bf9\u4e8b\u7269\u8fdb\u884c\u4e86\u8ba1\u6570\uff0c\u8fd9\u79cd\u8ba1\u6570\u5219\u662f\u53ef\u4ee5\u5ea6\u91cf\u7684\u3002\u5bf9\u4e8e\u6570\u503c\u578b\u7684\u6570\u636e\u8981\u5982\u4f55\u8ba1\u6570\u5462\uff1f\u901a\u5e38\u6709\u4e24\u79cd\u505a\u6cd5\uff1a\u533a\u5206\u7c7b\u522b\u548c\u9ad8\u65af\u5206\u5e03\u3002","title":"2 \u6570\u503c\u578b\u6570\u636e"},{"location":"gdm/ch5/#_3","text":"\u6211\u4eec\u53ef\u4ee5\u5212\u5b9a\u51e0\u4e2a\u8303\u56f4\u4f5c\u4e3a\u5206\u7c7b\uff0c\u5982\uff1a \u5e74\u9f84 18 18 - 22 23 - 30 31 - 40 40 \u5e74\u85aa $200,000 150,000 - 200,000 100,000 - 150,000 60,000 - 100,000 40,000 - 60,000 \u5212\u5206\u7c7b\u522b\u540e\uff0c\u5c31\u53ef\u4ee5\u5e94\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\u4e86\u3002","title":"\u533a\u5206\u7c7b\u522b"},{"location":"gdm/ch5/#_4","text":"\u5c5e\u4e8e\u7c7b\u522b y_i y_i \u7684\u7279\u5f81 x_i x_i \u7684\u6982\u7387\u4e3a P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} P(x_i|y_i) = \\frac{1}{\\sqrt{2\\pi}\\sigma_{ij}} e^{\\LARGE -\\frac{(x_i-u_{ij})^2}{2\\sigma^2_{ij}}} \u4e3a\u4e86\u4e3e\u4f8b\uff0c\u6211\u4eec\u4e3a\u4e0a\u9762\u8bb2\u8ff0\u7684\u624b\u73af\u7684\u4f8b\u5b50\u589e\u52a0\u4e00\u5217\u6536\u5165\u5c5e\u6027\u3002\u5047\u8bbe\u6211\u4eec\u8981\u8ba1\u7b97 P(100k|i500) P(100k|i500) \u7684\u6982\u7387\uff0c\u5373\u8d2d\u4e70i500\u7684\u7528\u6237\u4e2d\u6536\u5165\u662f100,000\u7f8e\u5143\u7684\u6982\u7387\u3002\u90a3\u4e48\u8fd9\u91cc u_{ij}, \\sigma_{ij} u_{ij}, \\sigma_{ij} \u5206\u522b\u5bf9\u5e94\u7684\u662f\u8d2d\u4e70i500\u7684\u7528\u6237\u7684\u5e73\u5747\u6536\u5165\u548c\u6536\u5165\u7684\u6807\u51c6\u5dee\u3002 \u6837\u672c\u6807\u51c6\u5dee\u7684\u8ba1\u7b97\u516c\u5f0f\u662f\uff1a \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \\sigma = \\sqrt{\\frac{\\sum_i(x_i-\\bar x)^2}{\\text{card}(x)-1}} \u6ce8\u610f\u5206\u6bcd\u4e2d\u7684\u662f \\text{card}(x)-1 \\text{card}(x)-1 \u4e0d\u662f \\text{card}(x) \\text{card}(x) \u3002 \u5728\u8bad\u7ec3\u6734\u7d20\u8d1d\u53f6\u65af\u5206\u7c7b\u5668\u65f6\uff0c\u53ef\u4ee5\u5c06\u6240\u6709\u5c5e\u6027\u7684\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u51fa\u6765\uff0c\u800c\u5206\u7c7b\u9636\u6bb5\u4f7f\u7528\u5e73\u5747\u503c\u548c\u6837\u672c\u6807\u51c6\u5dee\u8ba1\u7b97\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\uff1a def pdf ( mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart","title":"\u9ad8\u65af\u5206\u5e03"},{"location":"gdm/ch5/#example_2","text":"\u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5\u6570\u636e\u96c6\u5728 \u524d\u4e00\u7ae0 \u5df2\u7ecf\u8fdb\u884c\u4e86\u8be6\u7ec6\u63cf\u8ff0\u3002\u8be5\u6570\u636e\u96c6\u5305\u542b\u4e86\u6570\u503c\u578b\u7279\u5f81\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528\u4e0a\u4e00\u8282\u4ee3\u7801\u3002\u4e5f\u5c31\u662f\u8bf4\u4e0d\u80fd\u76f4\u63a5\u7528\u8ba1\u6570\u7684\u65b9\u6cd5\u6765\u8ba1\u7b97\u67d0\u4e2a\u5177\u4f53\u7279\u5f81\u7684\u503c\u51fa\u73b0\u7684\u6982\u7387\uff0c\u800c\u662f\u8981\u7528\u9ad8\u65af\u5206\u5e03\u7684\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u8ba1\u7b97\u3002 import math import numpy as np class NaiveBayes : Classification Using naive bayes def __init__ ( self , bucketPrefix , testBucketNumber , dataFormat , separator = \\t ): initialize data :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param testBucketNumber: \u6d4b\u8bd5\u6876\u7684\u7f16\u53f7 :param dataFormat: \u6570\u636e\u683c\u5f0f\uff0c\u5f62\u5982attr attr attr attr class :param separator: \u6587\u4ef6\u5206\u9694\u7b26 # \u5bf9\u6570\u503c\u578b\u6570\u636e\u8fdb\u884c\u6c42\u548c totals = {} numericValues = {} # \u5bf9\u5206\u7c7b\u578b\u6570\u636e\u8fdb\u884c\u8ba1\u6570 total = 0 # \u5148\u9a8c\u6982\u7387\u8ba1\u6570 classes = {} # \u540e\u9a8c\u6982\u7387\u8ba1\u6570 counts = {} # \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e self . format = dataFormat . strip () . split ( separator ) # \u5148\u9a8c\u6982\u7387 self . prior = {} # \u6761\u4ef6\u6982\u7387 self . conditional = {} # \u904d\u5386\u5341\u4e2a\u6876\uff0c \u5341\u6298\u4ea4\u53c9\u9a8c\u8bc1 for i in range ( 1 , 11 ): # \u8df3\u8fc7\u6d4b\u8bd5\u6876 if i != testBucketNumber : filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] # \u5904\u7406\u5206\u7c7b\u578b\u6570\u636e # \u5904\u7406\u8be5\u6761\u8bb0\u5f55 total += 1 classes . setdefault ( category , 0 ) counts . setdefault ( category , {}) classes [ category ] += 1 # \u5904\u7406\u5404\u4e2a\u5c5e\u6027 col = 0 for columnValue in vector : col += 1 counts [ category ] . setdefault ( col , {}) counts [ category ][ col ] . setdefault ( columnValue , 0 ) counts [ category ][ col ][ columnValue ] += 1 # \u5904\u7406\u6570\u503c\u578b\u6570\u636e col = 0 # column number totals . setdefault ( category , {}) numericValues . setdefault ( category , {}) for columnValue in nums : col += 1 totals [ category ] . setdefault ( col , 0 ) totals [ category ][ col ] += columnValue numericValues [ category ] . setdefault ( col , []) numericValues [ category ][ col ] . append ( columnValue ) # \u8ba1\u6570\u7ed3\u675f\uff0c\u5f00\u59cb\u8ba1\u7b97\u6982\u7387 # \u8ba1\u7b97\u5148\u9a8c\u6982\u7387P(h) for ( category , count ) in classes . items (): self . prior [ category ] = count / total # \u8ba1\u7b97\u6761\u4ef6\u6982\u7387P(h|D) for ( category , columns ) in counts . items (): self . conditional . setdefault ( category , {}) for ( col_id , valueCounts ) in columns . items (): self . conditional [ category ] . setdefault ( col_id , {}) for ( attrValue , count ) in valueCounts . items (): self . conditional [ category ][ col_id ][ attrValue ] = ( count / classes [ category ]) # \u8ba1\u7b97\u5e73\u5747\u6570\u548c\u6837\u672c\u6807\u51c6\u5dee self . means = {} self . standard_deviation = {} for category , columns in totals . items (): self . means . setdefault ( category , {}) self . standard_deviation . setdefault ( category , {}) for col , sums in columns . items (): self . means [ category ][ col ] = sums / len ( numericValues [ category ][ col ]) self . standard_deviation [ category ][ col ] = np . sqrt ( np . sum ( np . power ( ( np . array ( numericValues [ category ][ col ]) - self . means [ category ][ col ]), 2 )) / ( len ( numericValues [ category ][ col ]) - 1.0 )) def pdf ( self , mean , ssd , x ): \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u8ba1\u7b97P(x|y) ePart = math . pow ( math . e , - ( x - mean ) ** 2 / ( 2 * ssd ** 2 )) return ( 1.0 / ( math . sqrt ( 2 * math . pi ) * ssd )) * ePart def classify ( self , itemVector , numVector ): \u6839\u636eitemVector\u548cnumVector\u8fdb\u884c\u5206\u7c7b results = [] for ( category , prior ) in self . prior . items (): prob = prior col = 1 for attrValue in itemVector : if attrValue not in self . conditional [ category ][ col ]: # \u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de0\u6982\u7387 prob = 0 else : prob *= self . conditional [ category ][ col ][ attrValue ] col += 1 col = 1 for numValue in numVector : #\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u5206\u5e03 prob *= self . pdf ( self . means [ category ][ col ], self . standard_deviation [ category ][ col ], numValue ) col += 1 results . append (( prob , category )) # \u8fd4\u56de\u6982\u7387\u6700\u9ad8\u7684\u7ed3\u679c return max ( results )[ 1 ] def testBucket ( self , bucketPrefix , i ): \u6d4b\u8bd5 :param bucketPrefix: \u5206\u6876\u6570\u636e\u96c6\u6587\u4ef6\u524d\u7f00 :param i: \u7f16\u53f7 :return: \u6d4b\u8bd5\u7ed3\u679c filename = %s - %02i % ( bucketPrefix , i ) f = open ( filename ) lines = f . readlines () f . close () results = {} for line in lines : fields = line . strip () . split ( \\t ) ignore = [] vector = [] nums = [] if len ( fields ) len ( self . format ): print ( fields , filename , line ) raise Exception ( INPUT ERROR ) for i in range ( len ( fields )): if self . format [ i ] == num : nums . append ( float ( fields [ i ])) elif self . format [ i ] == attr : vector . append ( fields [ i ]) elif self . format [ i ] == comment : ignore . append ( fields [ i ]) elif self . format [ i ] == class : category = fields [ i ] test_result = self . classify ( vector , nums ) results . setdefault ( category , {}) results [ category ] . setdefault ( test_result , 0 ) results [ category ][ test_result ] += 1 return results def tenfold ( bucketPrefix , dataFormat ): results = {} for i in range ( 1 , 11 ): c = NaiveBayes ( bucketPrefix , i , dataFormat ) t = c . testBucket ( bucketPrefix , i ) for ( key , value ) in t . items (): results . setdefault ( key , {}) for ( ckey , cvalue ) in value . items (): results [ key ] . setdefault ( ckey , 0 ) results [ key ][ ckey ] += cvalue # now print results categories = list ( results . keys ()) categories . sort () print ( \\n Classified as: ) header = subheader = + for category in categories : header += % 2s % category subheader += -----+ print ( header ) print ( subheader ) total = 0.0 correct = 0.0 for category in categories : row = %s | % category for c2 in categories : if c2 in results [ category ]: count = results [ category ][ c2 ] else : count = 0 row += %3i | % count total += count if c2 == category : correct += count print ( row ) print ( subheader ) print ( \\n %5.3f percent correct % (( correct * 100 ) / total )) print ( total of %i instances % total ) if __name__ == __main__ : tenfold ( pimaSmall/pimaSmall , num \\t num \\t num \\t num \\t num \\t num \\t num \\t num \\t class ) \u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a Classified as: 0 1 +-----+-----+ 0 | 46 | 13 | 1 | 15 | 26 | +-----+-----+ 72.000 percent correct total of 100 instances \u4e0ekNN\u76f8\u6bd4\uff0c\u6734\u7d20\u8d1d\u53f6\u65af\u51c6\u786e\u7387\u66f4\u597d\uff0c\u800c\u4e14\u8ba1\u7b97\u66f4\u5feb\u3002","title":"Example: \u6bd4\u9a6c\u5370\u7b2c\u5b89\u4eba\u7cd6\u5c3f\u75c5"},{"location":"gdm/ch5/#_5","text":"\u6211\u4eec\u4e4b\u6240\u4ee5\u80fd\u5c06\u591a\u4e2a\u6982\u7387\u8fdb\u884c\u76f8\u4e58\u662f\u56e0\u4e3a\u8fd9\u4e9b\u6982\u7387\u90fd\u662f\u5177\u6709\u72ec\u7acb\u6027\u7684\u3002\u5173\u4e8e\u8d1d\u53f6\u65af\u51c6\u5219\uff0c\u53ef\u4ee5\u53c2\u89c1 \u6982\u7387\u5bfc\u8bba \u3002 In simple terms, a naive Bayes classifier assumes that the presence (or absence) of a particular feature of a class is unrelated to the presence (or absence) of any other feature, given the class variable. For example, a fruit may be considered to be an apple if it is red, round, and about 4\" in diameter. Even if these features depend on each other or upon the existence of the other features, a naive Bayes classifier considers all of these properties to independently contribute to the probability that this fruit is an apple. [ ref ] \u4f46\u662f\u5728\u73b0\u5b9e\u6570\u636e\u6316\u6398\u573a\u666f\u4e2d\uff0c\u8fd9\u79cd\u7279\u5f81\u53d8\u91cf\u4e4b\u95f4\u5f80\u5f80\u4e0d\u76f8\u4e92\u72ec\u7acb\u3002 \u8fd0\u52a8\u5458\u4f8b\u5b50\u4e2d\uff0c\u8eab\u9ad8\u548c\u4f53\u91cd\u4e0d\u662f\u4e92\u76f8\u72ec\u7acb\u7684\uff0c\u56e0\u4e3a\u9ad8\u7684\u4eba\u4f53\u91cd\u4e5f\u4f1a\u8f83\u9ad8\u3002 \u5730\u533a\u90ae\u7f16\u3001\u6536\u5165\u3001\u5e74\u9f84\uff0c\u8fd9\u4e9b\u7279\u5f81\u4e5f\u4e0d\u5b8c\u5168\u72ec\u7acb\uff0c\u4e00\u4e9b\u5730\u533a\u7684\u623f\u5c4b\u90fd\u5f88\u6602\u8d35\uff0c\u4e00\u4e9b\u5730\u533a\u5219\u53ea\u6709\u623f\u8f66\uff1a\u52a0\u5dde\u5e15\u7f57\u5965\u56fe\u5927\u591a\u662f20\u5c81\u7684\u5e74\u8f7b\u4eba\uff0c\u800c\u4e9a\u5229\u6851\u90a3\u5dde\u5219\u591a\u662f\u9000\u4f11\u4eba\u5458\u3002 \u5728\u97f3\u4e50\u57fa\u56e0\u5de5\u7a0b\u4e2d\uff0c\u5f88\u591a\u7279\u5f81\u4e5f\u662f\u4e0d\u72ec\u7acb\u7684\uff0c\u5982\u679c\u97f3\u4e50\u4e2d\u6709\u5f88\u591a\u53d8\u97f3\u5409\u4ed6\uff0c\u90a3\u5c0f\u63d0\u7434\u7684 \u6982\u7387\u5c31\u964d\u4f4e\u4e86\u3002 \u8840\u6db2\u68c0\u9a8c\u7684\u7ed3\u679c\u4e2d\uff0cT4\u548cTSH\u8fd9\u4e24\u4e2a\u6307\u6807\u901a\u5e38\u662f\u5448\u53cd\u6bd4\u7684\u3002 \u6240\u4ee5\uff0c\u5728\u4f7f\u7528\u8d1d\u53f6\u65af\u65b9\u6cd5\u65f6\uff0c\u6211\u4eec\u9700\u8981\u4e92\u76f8\u72ec\u7acb\u7684\u7279\u5f81\uff0c\u4f46\u73b0\u5b9e\u751f\u6d3b\u4e2d\u5f88\u96be\u627e\u5230\u8fd9\u6837\u7684\u5e94\u7528\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u80fd\u5047\u8bbe\u4ed6\u4eec\u662f\u72ec\u7acb\u7684\u4e86\uff01\u6211\u4eec\u5b8c\u5168\u5ffd\u7565\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u6b64\u624d\u79f0\u4e3a\u201c\u6734\u7d20\u7684\u201d\uff08\u5929\u771f\u7684\uff09\u8d1d\u53f6\u65af\u65b9\u6cd5\u3002\u4e0d\u8fc7\u4e8b\u5b9e\u8bc1\u660e\u6734\u7d20\u8d1d\u53f6\u65af\u7684\u6548\u679c\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\u3002","title":"\u4e3a\u4ec0\u4e48\u8981\u53eb\u201c\u6734\u7d20\u8d1d\u53f6\u65af\u201d\u5462\uff1f"}]}